//The Jacobi Iteration Pixel Shader Used to Solve Poisson Equations

/////////////
// BUFFERS //
/////////////
cbuffer InputBuffer {
	float fAlpha;
	float fInverseBeta;
	float fTextureWidth;
	float fTextureHeight;
};

/////////////
// GLOBALS //
/////////////
Texture2D shaderTextures[2];	// 0 is the x vector; 1 is the b Vector  (Ax = b)
SamplerState SampleType;

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType {
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

float4 JacobiPixelShader(PixelInputType input) : SV_TARGET {
	float2 rdFactors = float2(1.0f/fTextureWidth,1.0f/fTextureHeight);

	float2 coordT = input.tex + float2(0.0f, rdFactors.y);
	float2 coordB = input.tex - float2(0.0f, rdFactors.y);
	float2 coordR = input.tex + float2(rdFactors.x, 0.0f);
	float2 coordL = input.tex - float2(rdFactors.x, 0.0f);

	float xL = shaderTextures[0].Sample(SampleType,coordL).x;
	float xR = shaderTextures[0].Sample(SampleType,coordR).x;
	float xB = shaderTextures[0].Sample(SampleType,coordB).x;
	float xT = shaderTextures[0].Sample(SampleType,coordT).x;
	float xC = shaderTextures[0].Sample(SampleType,input.tex).x;

	if (coordT.y > 1.0f)
		xT = xC;
	if (coordB.y < 0.0f)
		xB = xC;
	if (coordR.x > 1.0f)
		xR = xC;
	if (coordL.x < 0.0f)
		xL = xC;

	float bC = shaderTextures[1].Sample(SampleType,input.tex).x;

	float final = (xL + xR + xB + xT + (fAlpha * bC) ) * fInverseBeta;
	return float4(final,0.0f,0.0f,1.0f);
}