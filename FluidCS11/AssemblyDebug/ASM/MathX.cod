; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	D:\Engine Class\Assignment 1\Scratch\DXSSE\FluidCS11\MathX.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_CLSID_WICGifEncoder
PUBLIC	_D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID
PUBLIC	_CATID_WICBitmapEncoders
PUBLIC	_IID_ID3D11VideoDecoder
PUBLIC	_D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC
PUBLIC	_IID_ID3D10Texture2D
PUBLIC	_IID_ID3D11SwitchToRef
PUBLIC	_SID_SCommandBarState
PUBLIC	_IID_IDXGIDevice1
PUBLIC	_IID_IDXGIDevice
PUBLIC	_D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT
PUBLIC	_IID_ID3D10BlendState1
PUBLIC	_CLSID_WICIcoDecoder
PUBLIC	_CLSID_WICPngDecoder
PUBLIC	_D3D11_DECODER_PROFILE_H264_IDCT_FGT
PUBLIC	_IID_ID3D10RasterizerState
PUBLIC	_GUID_ContainerFormatIco
PUBLIC	_IID_ID3D11Module
PUBLIC	_IID_ID3D10Resource
PUBLIC	_GUID_WICPixelFormat8bppCb
PUBLIC	_GUID_WICPixelFormat32bppRGBA
PUBLIC	_GUID_WICPixelFormat16bppBGR555
PUBLIC	_IID_ID3D11Resource
PUBLIC	_D3D11_DECODER_PROFILE_MPEG1_VLD
PUBLIC	_D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT
PUBLIC	_IID_ID3D11Buffer
PUBLIC	_GUID_WICPixelFormat48bpp5ChannelsAlpha
PUBLIC	_IID_ID3D10EffectStringVariable
PUBLIC	_IID_ID3D11HullShader
PUBLIC	_IID_ID3D11RenderTargetView
PUBLIC	_D3D11_DECODER_PROFILE_VC1_MOCOMP
PUBLIC	_GUID_WICPixelFormat2bppIndexed
PUBLIC	_D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE
PUBLIC	_GUID_WICPixelFormat128bppRGBFixedPoint
PUBLIC	_GUID_WICPixelFormat32bppBGR
PUBLIC	_IID_ID3D11VideoProcessorEnumerator
PUBLIC	_IID_ID3D11FunctionLinkingGraph
PUBLIC	_IID_IDXGISwapChain
PUBLIC	_GUID_WICPixelFormat16bppGrayHalf
PUBLIC	_IID_ID3D10Query
PUBLIC	_GUID_WICPixelFormat64bpp4Channels
PUBLIC	_IID_ID3D11ComputeShader
PUBLIC	_IID_IDXGIOutput1
PUBLIC	_GUID_WICPixelFormat64bppRGBAHalf
PUBLIC	_GUID_WICPixelFormat16bppBGR565
PUBLIC	_IID_IDXGIDisplayControl
PUBLIC	_GUID_WICPixelFormat64bppPBGRA
PUBLIC	_GUID_WICPixelFormat48bppRGB
PUBLIC	_CATID_WICMetadataReader
PUBLIC	_CLSID_WICWmpDecoder
PUBLIC	_IID_ID3D10BlendState
PUBLIC	_IID_IDXGIResource
PUBLIC	_D3D11_DECODER_PROFILE_H264_VLD_FGT
PUBLIC	_GUID_WICPixelFormat24bppRGB
PUBLIC	_GUID_WICPixelFormatDontCare
PUBLIC	_IID_ID3D10VertexShader
PUBLIC	_IID_ID3D11BlendState
PUBLIC	_IID_ID3D10ShaderReflectionConstantBuffer
PUBLIC	_IID_ID3D11DepthStencilView
PUBLIC	_IID_ID3D10EffectSamplerVariable
PUBLIC	_IID_ID3D10Texture1D
PUBLIC	_IID_ID3D11ShaderReflectionConstantBuffer
PUBLIC	_GUID_WICPixelFormat8bppIndexed
PUBLIC	_GUID_WICPixelFormat48bpp3Channels
PUBLIC	_WKPDID_D3DDebugObjectName
PUBLIC	_GUID_WICPixelFormat8bppY
PUBLIC	_GUID_WICPixelFormat8bppCr
PUBLIC	_GUID_WICPixelFormat48bppRGBHalf
PUBLIC	_GUID_WICPixelFormat1bppIndexed
PUBLIC	_IID_ID3D10EffectVariable
PUBLIC	_IID_ID3D10Predicate
PUBLIC	_D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES
PUBLIC	??_8XQuaternion@Math@@7B@			; Math::XQuaternion::`vbtable'
PUBLIC	_GUID_WICPixelFormat64bpp7ChannelsAlpha
PUBLIC	_CLSID_WICWmpEncoder
PUBLIC	_IID_ID3D10DepthStencilState
PUBLIC	_IID_ID3D11DomainShader
PUBLIC	_GUID_WICPixelFormat40bpp5Channels
PUBLIC	_IID_ID3D10EffectDepthStencilViewVariable
PUBLIC	_D3D11_DECODER_PROFILE_VC1_VLD
PUBLIC	_CLSID_WICJpegDecoder
PUBLIC	_GUID_WICPixelFormat56bpp7Channels
PUBLIC	_D3D11_KEY_EXCHANGE_RSAES_OAEP
PUBLIC	_D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT
PUBLIC	_IID_IDXGIFactory
PUBLIC	_IID_ID3D11FunctionParameterReflection
PUBLIC	_IID_ID3D10ShaderReflection1
PUBLIC	_CLSID_WICImagingFactory2
PUBLIC	_D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE
PUBLIC	_IID_ID3D11Query
PUBLIC	_IID_ID3D11VideoDecoderOutputView
PUBLIC	_CLSID_WICFormatConverterNChannel
PUBLIC	_CLSID_WICDefaultFormatConverter
PUBLIC	_D3D11_DECODER_PROFILE_MPEG2_MOCOMP
PUBLIC	__CTA2PAD
PUBLIC	_GUID_WICPixelFormat56bpp6ChannelsAlpha
PUBLIC	_IID_ID3D10ShaderReflection
PUBLIC	_GUID_ContainerFormatDds
PUBLIC	_IID_ID3D11ShaderReflection
PUBLIC	_IID_ID3D10Effect
PUBLIC	__CT??_R0H@84
PUBLIC	_GUID_WICPixelFormat64bppRGBFixedPoint
PUBLIC	_D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION
PUBLIC	_D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE
PUBLIC	_CATID_WICBitmapDecoders
PUBLIC	_GUID_WICPixelFormat32bpp3ChannelsAlpha
PUBLIC	_IID_IDXGIDeviceSubObject
PUBLIC	_D3D11_DECODER_PROFILE_WMV9_POSTPROC
PUBLIC	_IID_ID3D11Debug
PUBLIC	_GUID_WICPixelFormat16bppGrayFixedPoint
PUBLIC	_CLSID_WICPngDecoder1
PUBLIC	_D3D11_DECODER_PROFILE_WMV8_MOCOMP
PUBLIC	_IID_ID3D10View
PUBLIC	_D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS
PUBLIC	_GUID_WICPixelFormat80bpp4ChannelsAlpha
PUBLIC	_GUID_WICPixelFormat64bpp8Channels
PUBLIC	_GUID_WICPixelFormat48bppBGR
PUBLIC	_IID_ID3D11ClassLinkage
PUBLIC	_D3D11_DECODER_PROFILE_MPEG2and1_VLD
PUBLIC	_IID_ID3D10EffectDepthStencilVariable
PUBLIC	_IID_ID3D10EffectBlendVariable
PUBLIC	_CLSID_WICImagingCategories
PUBLIC	_IID_ID3D10Buffer
PUBLIC	_GUID_WICPixelFormat128bpp8Channels
PUBLIC	_GUID_WICPixelFormat64bppRGBA
PUBLIC	_GUID_WICPixelFormat16bppGray
PUBLIC	_IID_ID3DUserDefinedAnnotation
PUBLIC	_CATID_WICMetadataWriter
PUBLIC	_D3D11_DECODER_PROFILE_MPEG2_VLD
PUBLIC	_IID_ID3D11VideoContext
PUBLIC	_IID_ID3D10Multithread
PUBLIC	_IID_ID3D11Linker
PUBLIC	_IID_ID3D10InfoQueue
PUBLIC	_IID_ID3D11Device1
PUBLIC	_D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION
PUBLIC	??_R0PAD@8					; char * `RTTI Type Descriptor'
PUBLIC	_IID_ID3D10EffectType
PUBLIC	_IID_ID3D11ClassInstance
PUBLIC	_IID_ID3D11FunctionReflection
PUBLIC	_IID_ID3D10EffectConstantBuffer
PUBLIC	_D3D11_DECODER_PROFILE_WMV9_MOCOMP
PUBLIC	_IID_ID3D10EffectRasterizerVariable
PUBLIC	_D3D11_DECODER_PROFILE_VC1_IDCT
PUBLIC	_GUID_WICPixelFormat128bppRGBAFloat
PUBLIC	_CLSID_WICImagingFactory1
PUBLIC	_IID_ID3D10DepthStencilView
PUBLIC	_GUID_WICPixelFormat128bppRGBFloat
PUBLIC	_GUID_WICPixelFormat80bppCMYKAlpha
PUBLIC	_IID_ID3D10SwitchToRef
PUBLIC	_GUID_ContainerFormatWmp
PUBLIC	_IID_ID3D11RefDefaultTrackingOptions
PUBLIC	_GUID_WICPixelFormat96bpp5ChannelsAlpha
PUBLIC	_IID_ID3D10EffectPool
PUBLIC	_IID_ID3D11ShaderResourceView
PUBLIC	_IID_IDXGIAdapter2
PUBLIC	_GUID_WICPixelFormat40bpp4ChannelsAlpha
PUBLIC	_IID_ID3D10EffectRenderTargetViewVariable
PUBLIC	_IID_ID3D11VideoProcessorOutputView
PUBLIC	_GUID_WICPixelFormat24bppBGR
PUBLIC	_CLSID_WICBmpEncoder
PUBLIC	_IID_IDXGIDevice2
PUBLIC	_IID_ID3D10EffectShaderResourceVariable
PUBLIC	_D3D11_AUTHENTICATED_QUERY_PROTECTION
PUBLIC	_IID_ID3D11CommandList
PUBLIC	__TI2PAD
PUBLIC	_D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC
PUBLIC	_GUID_WICPixelFormat96bpp6Channels
PUBLIC	_GUID_WICPixelFormat32bpp4Channels
PUBLIC	_D3D11_CRYPTO_TYPE_AES128_CTR
PUBLIC	_GUID_WICPixelFormat32bppRGBE
PUBLIC	_GUID_ContainerFormatBmp
PUBLIC	_CLSID_WICPngEncoder
PUBLIC	_CLSID_WICBmpDecoder
PUBLIC	_IID_ID3D11RasterizerState1
PUBLIC	__TI1H
PUBLIC	_IID_ID3D10PixelShader
PUBLIC	_IID_ID3D11DeviceContext
PUBLIC	_CLSID_WICGifDecoder
PUBLIC	_IID_ID3D11Texture1D
PUBLIC	_IID_ID3D11Device
PUBLIC	_IID_IDXGIKeyedMutex
PUBLIC	_IID_IDXGIAdapter
PUBLIC	_IID_ID3D10GeometryShader
PUBLIC	_GUID_ContainerFormatTiff
PUBLIC	_GUID_DeviceType
PUBLIC	_D3D11_DECODER_PROFILE_VC1_POSTPROC
PUBLIC	_GUID_WICPixelFormat64bppRGBHalf
PUBLIC	_IID_ID3D11Counter
PUBLIC	_IID_ID3D11PixelShader
PUBLIC	_IID_ID3D11Asynchronous
PUBLIC	_IID_ID3D10EffectPass
PUBLIC	_GUID_WICPixelFormat40bppCMYKAlpha
PUBLIC	_GUID_WICPixelFormat112bpp7Channels
PUBLIC	_D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE
PUBLIC	_IID_ID3D11LinkingNode
PUBLIC	_CLSID_WICFormatConverterWMPhoto
PUBLIC	_GUID_ContainerFormatPng
PUBLIC	_IID_IDXGIOutputDuplication
PUBLIC	_CATID_WICFormatConverters
PUBLIC	_D3D11_DECODER_PROFILE_MPEG2_IDCT
PUBLIC	_IID_ID3D10EffectShaderVariable
PUBLIC	_CLSID_WICImagingFactory
PUBLIC	_GUID_WICPixelFormat144bpp8ChannelsAlpha
PUBLIC	_CATID_WICPixelFormats
PUBLIC	_D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT
PUBLIC	_CLSID_WICTiffEncoder
PUBLIC	_IID_ID3D11Predicate
PUBLIC	_GUID_WICPixelFormat48bpp6Channels
PUBLIC	_IID_ID3D11DeviceContext1
PUBLIC	_GUID_WICPixelFormat128bppRGBAFixedPoint
PUBLIC	_GUID_WICPixelFormat128bppPRGBAFloat
PUBLIC	_GUID_WICPixelFormat16bppBGRA5551
PUBLIC	_IID_IDXGIFactory1
PUBLIC	_GUID_WICPixelFormat32bppBGR101010
PUBLIC	_GUID_WICPixelFormat8bppAlpha
PUBLIC	_IID_ID3D10InputLayout
PUBLIC	_IID_ID3D10Texture3D
PUBLIC	_GUID_WICPixelFormat112bpp6ChannelsAlpha
PUBLIC	_GUID_WICPixelFormat32bppPRGBA
PUBLIC	_CLSID_WICDdsEncoder
PUBLIC	_IID_ID3D10ShaderReflectionVariable
PUBLIC	_CLSID_WICPngDecoder2
PUBLIC	_D3D11_AUTHENTICATED_QUERY_OUTPUT_ID
PUBLIC	_GUID_WICPixelFormat32bppGrayFloat
PUBLIC	_GUID_WICPixelFormat64bppRGBAFixedPoint
PUBLIC	_IID_ID3D11ShaderReflectionVariable
PUBLIC	_DXGI_DEBUG_D3D11
PUBLIC	_GUID_WICPixelFormat32bppPBGRA
PUBLIC	_GUID_WICPixelFormat80bpp5Channels
PUBLIC	_IID_ID3D11DeviceChild
PUBLIC	_D3D11_DECODER_PROFILE_WMV8_POSTPROC
PUBLIC	_GUID_WICPixelFormat32bppRGBA1010102XR
PUBLIC	_IID_ID3D10EffectScalarVariable
PUBLIC	__CTA1H
PUBLIC	_CLSID_WICJpegEncoder
PUBLIC	_GUID_WICPixelFormat64bpp3ChannelsAlpha
PUBLIC	_IID_ID3D10ShaderResourceView
PUBLIC	_IID_ID3D11InfoQueue
PUBLIC	_IID_ID3D11View
PUBLIC	_IID_ID3D10StateBlock
PUBLIC	_IID_IDXGIOutput
PUBLIC	_D3D11_DECODER_PROFILE_VC1_D2010
PUBLIC	_IID_ID3D11DepthStencilState
PUBLIC	_GUID_VendorMicrosoft
PUBLIC	_D3D11_DECODER_PROFILE_WMV9_IDCT
PUBLIC	_CLSID_WICFormatConverterHighColor
PUBLIC	_IID_ID3D10Debug
PUBLIC	_GUID_WICPixelFormat64bppBGRA
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
PUBLIC	_IID_ID3D11BlendState1
PUBLIC	_GUID_WICPixelFormat64bppBGRAFixedPoint
PUBLIC	_D3D11_DECODER_PROFILE_HEVC_VLD_MAIN
PUBLIC	_IID_IDXGIObject
PUBLIC	_D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE
PUBLIC	_IID_IDXGIResource1
PUBLIC	_IID_ID3D11VertexShader
PUBLIC	_GUID_WICPixelFormat32bppBGRA
PUBLIC	_GUID_VendorMicrosoftBuiltIn
PUBLIC	_IID_ID3D10EffectVectorVariable
PUBLIC	_D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT
PUBLIC	_IID_ID3D10RenderTargetView
PUBLIC	_GUID_WICPixelFormat4bppIndexed
PUBLIC	_IID_ID3D11Texture3D
PUBLIC	_IID_ID3D11UnorderedAccessView
PUBLIC	_GUID_WICPixelFormat32bppGrayFixedPoint
PUBLIC	_CLSID_WICPlanarFormatConverter
PUBLIC	_CLSID_WICTiffDecoder
PUBLIC	_IID_ID3D10EffectMatrixVariable
PUBLIC	_GUID_ContainerFormatGif
PUBLIC	_IID_ID3DDeviceContextState
PUBLIC	_IID_ID3D11VideoDevice
PUBLIC	_D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT
PUBLIC	_D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10
PUBLIC	_D3D11_DECODER_PROFILE_H264_MOCOMP_FGT
PUBLIC	_IID_ID3D11LibraryReflection
PUBLIC	_GUID_WICPixelFormat32bppRGBA1010102
PUBLIC	_IID_ID3D10Blob
PUBLIC	_IID_IDXGISurface
PUBLIC	_IID_IDXGIAdapter1
PUBLIC	_GUID_WICPixelFormat16bppCbCr
PUBLIC	_D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE
PUBLIC	_D3D11_DECODER_PROFILE_H264_IDCT_NOFGT
PUBLIC	_IID_ID3D11TracingDevice
PUBLIC	_IID_ID3D11SamplerState
PUBLIC	_IID_ID3D11ShaderReflectionType
PUBLIC	_IID_ID3D10Asynchronous
PUBLIC	_IID_ID3D10ShaderReflectionType
PUBLIC	_IID_ID3D10Device
PUBLIC	_CLSID_WICDdsDecoder
PUBLIC	_DXGI_DEBUG_D3D10
PUBLIC	_GUID_WICPixelFormat8bppGray
PUBLIC	_IID_ID3D10Device1
PUBLIC	_D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT
PUBLIC	?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients0
PUBLIC	?g_XMFour@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMFour
PUBLIC	?g_XMFixupY16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixupY16
PUBLIC	?g_XMNegIdentityR3@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegIdentityR3
PUBLIC	?g_XMExpEst7@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst7
PUBLIC	?g_XMMulDec4@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMMulDec4
PUBLIC	?g_XMLogEst0@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst0
PUBLIC	?g_XMMaxUInt@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMMaxUInt
PUBLIC	?g_XMSelect1010@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMSelect1010
PUBLIC	?g_XMAddDec4@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMAddDec4
PUBLIC	?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMEpsilon
PUBLIC	?g_XMFixUnsigned@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixUnsigned
PUBLIC	?g_XMMask3@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMMask3
PUBLIC	?g_XMOne@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOne
PUBLIC	?g_XMMaskX16Y16@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMMaskX16Y16
PUBLIC	?g_XMMaskX@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMMaskX
PUBLIC	?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMQNaN
PUBLIC	?g_XMLogEst5@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst5
PUBLIC	?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMSelect1110
PUBLIC	?g_XMSix@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMSix
PUBLIC	?g_XMsrgbA@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMsrgbA
PUBLIC	?g_XMNormalizeA8R8G8B8@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNormalizeA8R8G8B8
PUBLIC	?g_XMFlipX16Y16@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMFlipX16Y16
PUBLIC	?g_XMMaxInt@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMMaxInt
PUBLIC	?LightSalmon@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightSalmon
PUBLIC	?Yellow@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Yellow
PUBLIC	?LemonChiffon@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LemonChiffon
PUBLIC	?SkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SkyBlue
PUBLIC	?LightGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightGreen
PUBLIC	?DarkKhaki@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkKhaki
PUBLIC	?DarkSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkSeaGreen
PUBLIC	?DarkMagenta@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkMagenta
PUBLIC	?NavajoWhite@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::NavajoWhite
PUBLIC	?LightSkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightSkyBlue
PUBLIC	?Indigo@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Indigo
PUBLIC	?AliceBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::AliceBlue
PUBLIC	?MediumBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::MediumBlue
PUBLIC	?DeepPink@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DeepPink
PUBLIC	?HotPink@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::HotPink
PUBLIC	?MediumVioletRed@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::MediumVioletRed
PUBLIC	?MistyRose@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::MistyRose
PUBLIC	?Chocolate@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Chocolate
PUBLIC	?Brown@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Brown
PUBLIC	?DarkGray@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkGray
PUBLIC	?SpringGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SpringGreen
PUBLIC	?Plum@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Plum
PUBLIC	?GreenYellow@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::GreenYellow
PUBLIC	?Turquoise@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Turquoise
PUBLIC	?WhiteSmoke@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::WhiteSmoke
PUBLIC	?Azure@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Azure
PUBLIC	?Beige@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Beige
PUBLIC	?Transparent@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Transparent
PUBLIC	?DeepSkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DeepSkyBlue
PUBLIC	?AntiqueWhite@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::AntiqueWhite
PUBLIC	?LimeGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LimeGreen
PUBLIC	?Cornsilk@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Cornsilk
PUBLIC	?OliveDrab@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::OliveDrab
PUBLIC	?Linen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Linen
PUBLIC	?Blue@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Blue
PUBLIC	?LightSteelBlue@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::LightSteelBlue
PUBLIC	?OrangeRed@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::OrangeRed
PUBLIC	?OldLace@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::OldLace
PUBLIC	?Lavender@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Lavender
PUBLIC	?LightBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightBlue
PUBLIC	?YellowGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::YellowGreen
PUBLIC	?Tomato@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Tomato
PUBLIC	?DarkOrchid@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkOrchid
PUBLIC	?Cyan@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Cyan
PUBLIC	?DarkOrange@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkOrange
PUBLIC	?PaleVioletRed@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::PaleVioletRed
PUBLIC	?FloralWhite@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::FloralWhite
PUBLIC	?CadetBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::CadetBlue
PUBLIC	?Coral@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Coral
PUBLIC	?Green@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Green
PUBLIC	?Fuchsia@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Fuchsia
PUBLIC	?BurlyWood@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::BurlyWood
PUBLIC	?Pink@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Pink
PUBLIC	?Orange@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Orange
PUBLIC	?Aquamarine@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Aquamarine
PUBLIC	?LightGray@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightGray
PUBLIC	?Chartreuse@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Chartreuse
PUBLIC	?SteelBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SteelBlue
PUBLIC	?Honeydew@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Honeydew
PUBLIC	?LightSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::LightSeaGreen
PUBLIC	?ForestGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::ForestGreen
PUBLIC	?DarkSlateGray@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::DarkSlateGray
PUBLIC	?DarkTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::DarkTurquoise
PUBLIC	?Crimson@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Crimson
PUBLIC	?Gray@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Gray
PUBLIC	?DarkCyan@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkCyan
PUBLIC	?LightCoral@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightCoral
PUBLIC	?PaleGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::PaleGreen
PUBLIC	?LightSlateGray@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::LightSlateGray
PUBLIC	?Gold@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Gold
PUBLIC	?SandyBrown@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SandyBrown
PUBLIC	?LightGoldenrodYellow@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::LightGoldenrodYellow
PUBLIC	?Aqua@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Aqua
PUBLIC	?MediumAquamarine@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::MediumAquamarine
PUBLIC	?Teal@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Teal
PUBLIC	?Red@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Red
PUBLIC	?Bisque@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Bisque
PUBLIC	?Silver@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Silver
PUBLIC	?Maroon@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Maroon
PUBLIC	?MediumSlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::MediumSlateBlue
PUBLIC	?SeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SeaGreen
PUBLIC	?Ivory@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Ivory
PUBLIC	?MidnightBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::MidnightBlue
PUBLIC	?SlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SlateBlue
PUBLIC	?DarkSlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::DarkSlateBlue
PUBLIC	?DarkOliveGreen@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::DarkOliveGreen
PUBLIC	?MediumOrchid@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::MediumOrchid
PUBLIC	?PowderBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::PowderBlue
PUBLIC	?PaleTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::PaleTurquoise
PUBLIC	?Lime@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Lime
PUBLIC	?Peru@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Peru
PUBLIC	?LightYellow@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightYellow
PUBLIC	?DarkSalmon@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkSalmon
PUBLIC	?MediumSpringGreen@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::MediumSpringGreen
PUBLIC	?Goldenrod@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Goldenrod
PUBLIC	?DarkRed@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkRed
PUBLIC	?RoyalBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::RoyalBlue
PUBLIC	?DarkGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkGreen
PUBLIC	?MediumTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::MediumTurquoise
PUBLIC	?RosyBrown@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::RosyBrown
PUBLIC	?CornflowerBlue@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::CornflowerBlue
PUBLIC	?LavenderBlush@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::LavenderBlush
PUBLIC	?DarkBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkBlue
PUBLIC	?Orchid@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Orchid
PUBLIC	?Khaki@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Khaki
PUBLIC	?IndianRed@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::IndianRed
PUBLIC	?White@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::White
PUBLIC	?Sienna@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Sienna
PUBLIC	?MediumSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::MediumSeaGreen
PUBLIC	?GhostWhite@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::GhostWhite
PUBLIC	?Tan@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Tan
PUBLIC	?LawnGreen@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LawnGreen
PUBLIC	?LightCyan@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightCyan
PUBLIC	?SlateGray@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SlateGray
PUBLIC	?Firebrick@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Firebrick
PUBLIC	?Violet@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Violet
PUBLIC	?PeachPuff@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::PeachPuff
PUBLIC	?PaleGoldenrod@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::PaleGoldenrod
PUBLIC	?Magenta@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Magenta
PUBLIC	?LightPink@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::LightPink
PUBLIC	?Snow@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Snow
PUBLIC	?MediumPurple@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::MediumPurple
PUBLIC	?DarkGoldenrod@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::DarkGoldenrod
PUBLIC	?Black@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Black
PUBLIC	?DimGray@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DimGray
PUBLIC	?SeaShell@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SeaShell
PUBLIC	?DarkViolet@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DarkViolet
PUBLIC	?PapayaWhip@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::PapayaWhip
PUBLIC	?Salmon@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Salmon
PUBLIC	?Olive@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Olive
PUBLIC	?DodgerBlue@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::DodgerBlue
PUBLIC	?Wheat@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Wheat
PUBLIC	?BlueViolet@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::BlueViolet
PUBLIC	?MintCream@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::MintCream
PUBLIC	?SaddleBrown@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::SaddleBrown
PUBLIC	?Purple@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Purple
PUBLIC	?BlanchedAlmond@Colors@DirectX@@3UXMVECTORF32@2@B ; DirectX::Colors::BlanchedAlmond
PUBLIC	?Thistle@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Thistle
PUBLIC	?Navy@Colors@DirectX@@3UXMVECTORF32@2@B		; DirectX::Colors::Navy
PUBLIC	?Moccasin@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Moccasin
PUBLIC	?Gainsboro@Colors@DirectX@@3UXMVECTORF32@2@B	; DirectX::Colors::Gainsboro
PUBLIC	?g_XMNegQNaN@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMNegQNaN
PUBLIC	?g_XMExpEst2@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst2
PUBLIC	?g_XMNegateX@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMNegateX
PUBLIC	?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMInfinity
PUBLIC	?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients0
PUBLIC	?g_XMFlipYZ@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMFlipYZ
PUBLIC	?g_XMLogEst2@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst2
PUBLIC	?g_XMMaskZ@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMMaskZ
PUBLIC	?g_XMMaskY@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMMaskY
PUBLIC	?g_XMNegIdentityR0@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegIdentityR0
PUBLIC	?g_XMSelect0101@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMSelect0101
PUBLIC	?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegativeOne
PUBLIC	?g_XMFlipA2B10G10R10@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMFlipA2B10G10R10
PUBLIC	?g_XMMaskA2B10G10R10@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMMaskA2B10G10R10
PUBLIC	?g_XMArcCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMArcCoefficients1
PUBLIC	?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR3
PUBLIC	?g_XMFlipW@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMFlipW
PUBLIC	?g_XMExpEst4@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst4
PUBLIC	?g_XMFlipZ@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMFlipZ
PUBLIC	?g_XMNormalizeX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNormalizeX16Y16Z16W16
PUBLIC	?g_XMMinNormal@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMMinNormal
PUBLIC	?g_XMNegateY@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMNegateY
PUBLIC	?g_XMBinNeg150@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMBinNeg150
PUBLIC	?g_XMAddByte4@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMAddByte4
PUBLIC	?g_XMFixX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixX16Y16Z16W16
PUBLIC	?g_XMTwo@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMTwo
PUBLIC	?g_XMFixupY16W16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixupY16W16
PUBLIC	?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients1
PUBLIC	?g_XMLogEst7@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst7
PUBLIC	?g_XMMaskDec4@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMMaskDec4
PUBLIC	?g_XMLogEst1@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst1
PUBLIC	?g_XMSelect1100@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMSelect1100
PUBLIC	?g_XMSelect1000@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMSelect1000
PUBLIC	?g_XMQNaNTest@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMQNaNTest
PUBLIC	?g_XMExpEst3@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst3
PUBLIC	?g_XMUnsignedFix@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMUnsignedFix
PUBLIC	?g_XMFlipX16Y16Z16W16@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMFlipX16Y16Z16W16
PUBLIC	?g_XMNegateZ@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMNegateZ
PUBLIC	?g_XMSubnormalExponent@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSubnormalExponent
PUBLIC	?g_XMATanCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMATanCoefficients0
PUBLIC	?g_XMLogEst6@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst6
PUBLIC	?g_XMXorByte4@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMXorByte4
PUBLIC	?g_XMNegIdentityR2@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegIdentityR2
PUBLIC	?g_XMBin128@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMBin128
PUBLIC	?g_XMZero@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMZero
PUBLIC	?g_XMFlipA8R8G8B8@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMFlipA8R8G8B8
PUBLIC	?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR0
PUBLIC	?g_XMNegInfinity@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMNegInfinity
PUBLIC	?g_XMExpEst6@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst6
PUBLIC	?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR2
PUBLIC	?g_XMTanCoefficients2@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTanCoefficients2
PUBLIC	?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMAbsMask
PUBLIC	?g_XMLgE@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLgE
PUBLIC	?g_XMFlipY@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMFlipY
PUBLIC	?g_XMNegIdentityR1@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegIdentityR1
PUBLIC	?g_XMATanCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMATanCoefficients1
PUBLIC	?g_XMLogEst3@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst3
PUBLIC	?g_XM253@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XM253
PUBLIC	?g_XMNegativeZero@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMNegativeZero
PUBLIC	?g_XMArcCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMArcCoefficients0
PUBLIC	?g_XMNormalizeX16Y16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNormalizeX16Y16
PUBLIC	?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR1
PUBLIC	?g_XMMaskA8R8G8B8@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMMaskA8R8G8B8
PUBLIC	?g_XMNoFraction@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNoFraction
PUBLIC	?g_XMTanCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTanCoefficients1
PUBLIC	?g_XMXorDec4@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMXorDec4
PUBLIC	?g_XMOne3@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOne3
PUBLIC	?g_XMExpEst1@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst1
PUBLIC	?g_XMArcEstCoefficients@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMArcEstCoefficients
PUBLIC	?g_XMsrgbA1@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMsrgbA1
PUBLIC	?g_XMAddUDec4@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMAddUDec4
PUBLIC	?g_XMFlipZW@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMFlipZW
PUBLIC	?g_XMNumTrailing@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMNumTrailing
PUBLIC	?g_XMMaskByte4@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMMaskByte4
PUBLIC	?g_XMNormalizeA2B10G10R10@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNormalizeA2B10G10R10
PUBLIC	?g_XMATanEstCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMATanEstCoefficients1
PUBLIC	?g_XMExpEst5@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMExpEst5
PUBLIC	?g_XMMaskW@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMMaskW
PUBLIC	?g_XMFlipYW@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMFlipYW
PUBLIC	?g_XMFltMin@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMFltMin
PUBLIC	?g_XMNegateW@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMNegateW
PUBLIC	?g_XMFixAA2B10G10R10@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixAA2B10G10R10
PUBLIC	?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients1
PUBLIC	?g_XMLogEst4@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMLogEst4
PUBLIC	?g_XMSelect1011@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMSelect1011
PUBLIC	?g_XMFixAA8R8G8B8@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixAA8R8G8B8
PUBLIC	?g_XMExponentBias@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMExponentBias
PUBLIC	?g_XMFixX16Y16@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMFixX16Y16
PUBLIC	?g_XMMaskX16Y16Z16W16@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMMaskX16Y16Z16W16
PUBLIC	?g_XMFltMax@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMFltMax
PUBLIC	?g_XMsrgbScale@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMsrgbScale
PUBLIC	?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOneHalf
PUBLIC	?g_XMNegate3@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMNegate3
PUBLIC	?g_XMNegativeOneHalf@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegativeOneHalf
PUBLIC	?g_XMATanEstCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMATanEstCoefficients0
PUBLIC	?g_XMOneHalfMinusEpsilon@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMOneHalfMinusEpsilon
PUBLIC	?g_XMTanCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTanCoefficients0
PUBLIC	?g_XMInvLgE@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMInvLgE
PUBLIC	?g_XMMaskByte@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMMaskByte
PUBLIC	?g_XMNegOneMask@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMNegOneMask
PUBLIC	_IID_ID3D11ModuleInstance
PUBLIC	_IID_ID3D11AuthenticatedChannel
PUBLIC	_IID_ID3D10SamplerState
PUBLIC	_D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT
PUBLIC	_D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT
PUBLIC	_GUID_WICPixelFormat4bppGray
PUBLIC	_GUID_WICPixelFormat32bppCMYK
PUBLIC	_IID_ID3D10ShaderResourceView1
PUBLIC	_IID_ID3D11VideoProcessorInputView
PUBLIC	_D3D11_AUTHENTICATED_CONFIGURE_PROTECTION
PUBLIC	_IID_ID3D10EffectTechnique
PUBLIC	_IID_IDXGISwapChain1
PUBLIC	_IID_IDXGISurface1
PUBLIC	_GUID_WICPixelFormat72bpp8ChannelsAlpha
PUBLIC	?sm_kxOne@XVector@Math@@1T__m128@@B		; Math::XVector::sm_kxOne
PUBLIC	?sm_kxHighOne@XMatrix4x4@Math@@1T__m128@@B	; Math::XMatrix4x4::sm_kxHighOne
PUBLIC	?sm_kxUnitY@XVector@Math@@1T__m128@@B		; Math::XVector::sm_kxUnitY
PUBLIC	?sm_kxNegateXYZ@XVector@Math@@1T__m128@@B	; Math::XVector::sm_kxNegateXYZ
PUBLIC	?sm_kxTwo@XVector@Math@@1T__m128@@B		; Math::XVector::sm_kxTwo
PUBLIC	?sm_kxNegateW@XVector@Math@@1T__m128@@B		; Math::XVector::sm_kxNegateW
PUBLIC	?sm_kxNegateZ@XVector@Math@@1T__m128@@B		; Math::XVector::sm_kxNegateZ
PUBLIC	?sm_kxUnitX@XVector@Math@@1T__m128@@B		; Math::XVector::sm_kxUnitX
PUBLIC	?sm_kxUnitW@XVector@Math@@1T__m128@@B		; Math::XVector::sm_kxUnitW
PUBLIC	?sm_kxNegateXYZW@XVector@Math@@1T__m128@@B	; Math::XVector::sm_kxNegateXYZW
PUBLIC	?sm_kxNegateY@XVector@Math@@1T__m128@@B		; Math::XVector::sm_kxNegateY
PUBLIC	?sm_kxNegateX@XVector@Math@@1T__m128@@B		; Math::XVector::sm_kxNegateX
PUBLIC	?sm_kxUnitZ@XVector@Math@@1T__m128@@B		; Math::XVector::sm_kxUnitZ
PUBLIC	_GUID_WICPixelFormat24bpp3Channels
PUBLIC	_IID_ID3D11RasterizerState
PUBLIC	_IID_IDXGISurface2
PUBLIC	_GUID_WICPixelFormat48bppRGBFixedPoint
PUBLIC	_GUID_WICPixelFormat128bpp7ChannelsAlpha
PUBLIC	_IID_ID3D11VideoProcessor
PUBLIC	_IID_ID3D11Texture2D
PUBLIC	_D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE
PUBLIC	_D3D11_DECODER_PROFILE_H264_VLD_NOFGT
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$integral_constant@I$07@std@@2IB	; std::integral_constant<unsigned int,8>::value
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?value@?$_Maximum@$S@std@@2IB			; std::_Maximum<>::value
PUBLIC	?value@?$integral_constant@I$00@std@@2IB	; std::integral_constant<unsigned int,1>::value
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?value@?$integral_constant@I$01@std@@2IB	; std::integral_constant<unsigned int,2>::value
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?value@?$integral_constant@I$03@std@@2IB	; std::integral_constant<unsigned int,4>::value
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	_GUID_WICPixelFormatBlackWhite
PUBLIC	_IID_ID3D11CryptoSession
PUBLIC	_IID_ID3D11RefTrackingOptions
PUBLIC	_IID_ID3D10Counter
PUBLIC	_GUID_WICPixelFormat64bppPRGBA
PUBLIC	_IID_IDXGIFactory2
PUBLIC	__CT??_R0PAX@84
PUBLIC	_IID_ID3D11InputLayout
PUBLIC	_GUID_WICPixelFormat48bppBGRFixedPoint
PUBLIC	_IID_ID3D10DeviceChild
PUBLIC	__CT??_R0PAD@84
PUBLIC	??_R0PAX@8					; void * `RTTI Type Descriptor'
PUBLIC	_GUID_WICPixelFormat64bppCMYK
PUBLIC	_GUID_WICPixelFormat2bppGray
PUBLIC	_GUID_ContainerFormatJpeg
PUBLIC	_GUID_WICPixelFormat96bppRGBFixedPoint
PUBLIC	_IID_ID3D11GeometryShader
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp___hypot:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT _IID_ID3D11GeometryShader
CONST	SEGMENT
_IID_ID3D11GeometryShader DD 038325b96H
	DW	0effbH
	DW	04022H
	DB	0baH
	DB	02H
	DB	02eH
	DB	079H
	DB	05bH
	DB	070H
	DB	027H
	DB	05cH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat96bppRGBFixedPoint
CONST	SEGMENT
_GUID_WICPixelFormat96bppRGBFixedPoint DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	018H
CONST	ENDS
;	COMDAT _GUID_ContainerFormatJpeg
CONST	SEGMENT
_GUID_ContainerFormatJpeg DD 019e4a5aaH
	DW	05662H
	DW	04fc5H
	DB	0a0H
	DB	0c0H
	DB	017H
	DB	058H
	DB	02H
	DB	08eH
	DB	010H
	DB	057H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat2bppGray
CONST	SEGMENT
_GUID_WICPixelFormat2bppGray DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	06H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat64bppCMYK
CONST	SEGMENT
_GUID_WICPixelFormat64bppCMYK DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	01fH
CONST	ENDS
;	COMDAT ??_R0PAX@8
data$r	SEGMENT
??_R0PAX@8 DD	FLAT:??_7type_info@@6B@			; void * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAX', 00H
data$r	ENDS
;	COMDAT __CT??_R0PAD@84
xdata$x	SEGMENT
__CT??_R0PAD@84 DD 01H
	DD	FLAT:??_R0PAD@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT _IID_ID3D10DeviceChild
CONST	SEGMENT
_IID_ID3D10DeviceChild DD 09b7e4c00H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat48bppBGRFixedPoint
CONST	SEGMENT
_GUID_WICPixelFormat48bppBGRFixedPoint DD 049ca140eH
	DW	0cab6H
	DW	0493bH
	DB	09dH
	DB	0dfH
	DB	060H
	DB	018H
	DB	07cH
	DB	037H
	DB	053H
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ID3D11InputLayout
CONST	SEGMENT
_IID_ID3D11InputLayout DD 0e4819ddcH
	DW	04cf0H
	DW	04025H
	DB	0bdH
	DB	026H
	DB	05dH
	DB	0e8H
	DB	02aH
	DB	03eH
	DB	07H
	DB	0b7H
CONST	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT
__CT??_R0PAX@84 DD 01H
	DD	FLAT:??_R0PAX@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT _IID_IDXGIFactory2
CONST	SEGMENT
_IID_IDXGIFactory2 DD 050c83a1cH
	DW	0e072H
	DW	04c48H
	DB	087H
	DB	0b0H
	DB	036H
	DB	030H
	DB	0faH
	DB	036H
	DB	0a6H
	DB	0d0H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat64bppPRGBA
CONST	SEGMENT
_GUID_WICPixelFormat64bppPRGBA DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	017H
CONST	ENDS
;	COMDAT _IID_ID3D10Counter
CONST	SEGMENT
_IID_ID3D10Counter DD 09b7e4c11H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D11RefTrackingOptions
CONST	SEGMENT
_IID_ID3D11RefTrackingOptions DD 0193dacdfH
	DW	0db2H
	DW	04c05H
	DB	0a5H
	DB	05cH
	DB	0efH
	DB	06H
	DB	0caH
	DB	0c5H
	DB	06fH
	DB	0d9H
CONST	ENDS
;	COMDAT _IID_ID3D11CryptoSession
CONST	SEGMENT
_IID_ID3D11CryptoSession DD 09b32f9adH
	DW	0bdccH
	DW	040a6H
	DB	0a3H
	DB	09dH
	DB	0d5H
	DB	0c8H
	DB	065H
	DB	084H
	DB	057H
	DB	020H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormatBlackWhite
CONST	SEGMENT
_GUID_WICPixelFormatBlackWhite DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	05H
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$03@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$03@std@@2IB DD 04H		; std::integral_constant<unsigned int,4>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$01@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$01@std@@2IB DD 02H		; std::integral_constant<unsigned int,2>::value
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$00@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$00@std@@2IB DD 01H		; std::integral_constant<unsigned int,1>::value
CONST	ENDS
;	COMDAT ?value@?$_Maximum@$S@std@@2IB
CONST	SEGMENT
?value@?$_Maximum@$S@std@@2IB DD 00H			; std::_Maximum<>::value
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$07@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$07@std@@2IB DD 08H		; std::integral_constant<unsigned int,8>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_VLD_NOFGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_VLD_NOFGT DD 01b81be68H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE DD 0efd64d74H
	DW	0c9e8H
	DW	041d7H
	DB	0a5H
	DB	0e9H
	DB	0e9H
	DB	0b0H
	DB	0e3H
	DB	09fH
	DB	0a3H
	DB	019H
CONST	ENDS
;	COMDAT _IID_ID3D11Texture2D
CONST	SEGMENT
_IID_ID3D11Texture2D DD 06f15aaf2H
	DW	0d208H
	DW	04e89H
	DB	09aH
	DB	0b4H
	DB	048H
	DB	095H
	DB	035H
	DB	0d3H
	DB	04fH
	DB	09cH
CONST	ENDS
;	COMDAT _IID_ID3D11VideoProcessor
CONST	SEGMENT
_IID_ID3D11VideoProcessor DD 01d7b0652H
	DW	0185fH
	DW	041c6H
	DB	085H
	DB	0ceH
	DB	0cH
	DB	05bH
	DB	0e3H
	DB	0d4H
	DB	0aeH
	DB	06cH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat128bpp7ChannelsAlpha
CONST	SEGMENT
_GUID_WICPixelFormat128bpp7ChannelsAlpha DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	038H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat48bppRGBFixedPoint
CONST	SEGMENT
_GUID_WICPixelFormat48bppRGBFixedPoint DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	012H
CONST	ENDS
;	COMDAT _IID_IDXGISurface2
CONST	SEGMENT
_IID_IDXGISurface2 DD 0aba496ddH
	DW	0b617H
	DW	04cb8H
	DB	0a8H
	DB	066H
	DB	0bcH
	DB	044H
	DB	0d7H
	DB	0ebH
	DB	01fH
	DB	0a2H
CONST	ENDS
;	COMDAT _IID_ID3D11RasterizerState
CONST	SEGMENT
_IID_ID3D11RasterizerState DD 09bb4ab81H
	DW	0ab1aH
	DW	04d8fH
	DB	0b5H
	DB	06H
	DB	0fcH
	DB	04H
	DB	020H
	DB	0bH
	DB	06eH
	DB	0e7H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat24bpp3Channels
CONST	SEGMENT
_GUID_WICPixelFormat24bpp3Channels DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	020H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat72bpp8ChannelsAlpha
CONST	SEGMENT
_GUID_WICPixelFormat72bpp8ChannelsAlpha DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	033H
CONST	ENDS
;	COMDAT _IID_IDXGISurface1
CONST	SEGMENT
_IID_IDXGISurface1 DD 04ae63092H
	DW	06327H
	DW	04c1bH
	DB	080H
	DB	0aeH
	DB	0bfH
	DB	0e1H
	DB	02eH
	DB	0a3H
	DB	02bH
	DB	086H
CONST	ENDS
;	COMDAT _IID_IDXGISwapChain1
CONST	SEGMENT
_IID_IDXGISwapChain1 DD 0790a45f7H
	DW	0d42H
	DW	04876H
	DB	098H
	DB	03aH
	DB	0aH
	DB	055H
	DB	0cfH
	DB	0e6H
	DB	0f4H
	DB	0aaH
CONST	ENDS
;	COMDAT _IID_ID3D10EffectTechnique
CONST	SEGMENT
_IID_ID3D10EffectTechnique DD 0db122ce8H
	DW	0d1c9H
	DW	04292H
	DB	0b2H
	DB	037H
	DB	024H
	DB	0edH
	DB	03dH
	DB	0e8H
	DB	0b1H
	DB	075H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_CONFIGURE_PROTECTION
CONST	SEGMENT
_D3D11_AUTHENTICATED_CONFIGURE_PROTECTION DD 050455658H
	DW	03f47H
	DW	04362H
	DB	0bfH
	DB	099H
	DB	0bfH
	DB	0dfH
	DB	0cdH
	DB	0e9H
	DB	0edH
	DB	029H
CONST	ENDS
;	COMDAT _IID_ID3D11VideoProcessorInputView
CONST	SEGMENT
_IID_ID3D11VideoProcessorInputView DD 011ec5a5fH
	DW	051dcH
	DW	04945H
	DB	0abH
	DB	034H
	DB	06eH
	DB	08cH
	DB	021H
	DB	030H
	DB	0eH
	DB	0a5H
CONST	ENDS
;	COMDAT _IID_ID3D10ShaderResourceView1
CONST	SEGMENT
_IID_ID3D10ShaderResourceView1 DD 09b7e4c87H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat32bppCMYK
CONST	SEGMENT
_GUID_WICPixelFormat32bppCMYK DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	01cH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat4bppGray
CONST	SEGMENT
_GUID_WICPixelFormat4bppGray DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	07H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT DD 0db207b3H
	DW	09450H
	DW	046a6H
	DB	082H
	DB	0deH
	DB	01bH
	DB	096H
	DB	0d4H
	DB	04fH
	DB	09cH
	DB	0f2H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT DD 012f0bd6H
	DW	0e662H
	DW	04474H
	DB	0beH
	DB	0fdH
	DB	0aaH
	DB	053H
	DB	0e5H
	DB	014H
	DB	03cH
	DB	06dH
CONST	ENDS
;	COMDAT _IID_ID3D10SamplerState
CONST	SEGMENT
_IID_ID3D10SamplerState DD 09b7e4c0cH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D11AuthenticatedChannel
CONST	SEGMENT
_IID_ID3D11AuthenticatedChannel DD 03015a308H
	DW	0dcbdH
	DW	047aaH
	DB	0a7H
	DB	047H
	DB	019H
	DB	024H
	DB	086H
	DB	0d1H
	DB	04dH
	DB	04aH
CONST	ENDS
;	COMDAT _IID_ID3D11ModuleInstance
CONST	SEGMENT
_IID_ID3D11ModuleInstance DD 0469e07f7H
	DW	045aH
	DW	048d5H
	DB	0aaH
	DB	012H
	DB	068H
	DB	0a4H
	DB	078H
	DB	0cdH
	DB	0f7H
	DB	05dH
CONST	ENDS
;	COMDAT ?g_XMNegOneMask@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMNegOneMask@DirectX@@3UXMVECTORI32@1@B DD 0ffffffffH ; DirectX::g_XMNegOneMask
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMMaskByte@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskByte@DirectX@@3UXMVECTORI32@1@B DD 0ffH	; DirectX::g_XMMaskByte
	DD	0ffH
	DD	0ffH
	DD	0ffH
CONST	ENDS
;	COMDAT ?g_XMInvLgE@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMInvLgE@DirectX@@3UXMVECTORF32@1@B DD 03f317218r ; 0.693147 ; DirectX::g_XMInvLgE
	DD	03f317218r			; 0.693147
	DD	03f317218r			; 0.693147
	DD	03f317218r			; 0.693147
CONST	ENDS
;	COMDAT ?g_XMTanCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTanCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMTanCoefficients0
	DD	03eaaaaabr			; 0.333333
	DD	03e088889r			; 0.133333
	DD	03d5d0dd1r			; 0.0539683
CONST	ENDS
;	COMDAT ?g_XMOneHalfMinusEpsilon@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMOneHalfMinusEpsilon@DirectX@@3UXMVECTORI32@1@B DD 03efffffdH ; DirectX::g_XMOneHalfMinusEpsilon
	DD	03efffffdH
	DD	03efffffdH
	DD	03efffffdH
CONST	ENDS
;	COMDAT ?g_XMATanEstCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMATanEstCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 03f7ff738r ; 0.999866 ; DirectX::g_XMATanEstCoefficients0
	DD	03f7ff738r			; 0.999866
	DD	03f7ff738r			; 0.999866
	DD	03f7ff738r			; 0.999866
CONST	ENDS
;	COMDAT ?g_XMNegativeOneHalf@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegativeOneHalf@DirectX@@3UXMVECTORF32@1@B DD 0bf000000r ; -0.5 ; DirectX::g_XMNegativeOneHalf
	DD	0bf000000r			; -0.5
	DD	0bf000000r			; -0.5
	DD	0bf000000r			; -0.5
CONST	ENDS
;	COMDAT ?g_XMNegate3@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMNegate3@DirectX@@3UXMVECTORI32@1@B DD 080000000H	; DirectX::g_XMNegate3
	DD	080000000H
	DD	080000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B DD 03f000000r ; 0.5 ; DirectX::g_XMOneHalf
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
CONST	ENDS
;	COMDAT ?g_XMsrgbScale@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMsrgbScale@DirectX@@3UXMVECTORF32@1@B DD 0414eb852r ; 12.92 ; DirectX::g_XMsrgbScale
	DD	0414eb852r			; 12.92
	DD	0414eb852r			; 12.92
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMFltMax@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFltMax@DirectX@@3UXMVECTORI32@1@B DD 07f7fffffH	; DirectX::g_XMFltMax
	DD	07f7fffffH
	DD	07f7fffffH
	DD	07f7fffffH
CONST	ENDS
;	COMDAT ?g_XMMaskX16Y16Z16W16@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskX16Y16Z16W16@DirectX@@3UXMVECTORI32@1@B DD 0ffffH ; DirectX::g_XMMaskX16Y16Z16W16
	DD	0ffffH
	DD	0ffff0000H
	DD	0ffff0000H
CONST	ENDS
;	COMDAT ?g_XMFixX16Y16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixX16Y16@DirectX@@3UXMVECTORF32@1@B DD 0c7000000r ; -32768 ; DirectX::g_XMFixX16Y16
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMExponentBias@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMExponentBias@DirectX@@3UXMVECTORI32@1@B DD 07fH	; DirectX::g_XMExponentBias
	DD	07fH
	DD	07fH
	DD	07fH
CONST	ENDS
;	COMDAT ?g_XMFixAA8R8G8B8@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixAA8R8G8B8@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMFixAA8R8G8B8
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	04f000000r			; 2.14748e+009
CONST	ENDS
;	COMDAT ?g_XMSelect1011@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMSelect1011@DirectX@@3UXMVECTORI32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1011
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMLogEst4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst4@DirectX@@3UXMVECTORF32@1@B DD 03e7e8e61r ; 0.24859 ; DirectX::g_XMLogEst4
	DD	03e7e8e61r			; 0.24859
	DD	03e7e8e61r			; 0.24859
	DD	03e7e8e61r			; 0.24859
CONST	ENDS
;	COMDAT ?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0b48bdd11r ; -2.60516e-007 ; DirectX::g_XMCosCoefficients1
	DD	0befff67er			; -0.499927
	DD	03d29f587r			; 0.0414939
	DD	0baa69fdbr			; -0.00127124
CONST	ENDS
;	COMDAT ?g_XMFixAA2B10G10R10@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixAA2B10G10R10@DirectX@@3UXMVECTORF32@1@B DD 0c4000000r ; -512 ; DirectX::g_XMFixAA2B10G10R10
	DD	0c9000000r			; -524288
	DD	0ce000000r			; -5.36871e+008
	DD	04f000000r			; 2.14748e+009
CONST	ENDS
;	COMDAT ?g_XMNegateW@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegateW@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMNegateW
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?g_XMFltMin@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFltMin@DirectX@@3UXMVECTORI32@1@B DD 0800000H	; DirectX::g_XMFltMin
	DD	0800000H
	DD	0800000H
	DD	0800000H
CONST	ENDS
;	COMDAT ?g_XMFlipYW@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFlipYW@DirectX@@3UXMVECTORI32@1@B DD 00H		; DirectX::g_XMFlipYW
	DD	080000000H
	DD	00H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMMaskW@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskW@DirectX@@3UXMVECTORI32@1@B DD 00H		; DirectX::g_XMMaskW
	DD	00H
	DD	00H
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMExpEst5@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst5@DirectX@@3UXMVECTORF32@1@B DD 0baae1854r ; -0.00132824 ; DirectX::g_XMExpEst5
	DD	0baae1854r			; -0.00132824
	DD	0baae1854r			; -0.00132824
	DD	0baae1854r			; -0.00132824
CONST	ENDS
;	COMDAT ?g_XMATanEstCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMATanEstCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0bea91d04r ; -0.330299 ; DirectX::g_XMATanEstCoefficients1
	DD	03e3876e2r			; 0.180141
	DD	0bdae5a36r			; -0.085133
	DD	03caaae5fr			; 0.0208351
CONST	ENDS
;	COMDAT ?g_XMNormalizeA2B10G10R10@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNormalizeA2B10G10R10@DirectX@@3UXMVECTORF32@1@B DD 03b004020r ; 0.00195695 ; DirectX::g_XMNormalizeA2B10G10R10
	DD	036004020r			; 1.91108e-006
	DD	031004020r			; 1.86629e-009
	DD	02faaaaabr			; 3.10441e-010
CONST	ENDS
;	COMDAT ?g_XMMaskByte4@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskByte4@DirectX@@3UXMVECTORI32@1@B DD 0ffH	; DirectX::g_XMMaskByte4
	DD	0ff00H
	DD	0ff0000H
	DD	0ff000000H
CONST	ENDS
;	COMDAT ?g_XMNumTrailing@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMNumTrailing@DirectX@@3UXMVECTORI32@1@B DD 017H	; DirectX::g_XMNumTrailing
	DD	017H
	DD	017H
	DD	017H
CONST	ENDS
;	COMDAT ?g_XMFlipZW@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFlipZW@DirectX@@3UXMVECTORI32@1@B DD 00H		; DirectX::g_XMFlipZW
	DD	00H
	DD	080000000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMAddUDec4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMAddUDec4@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMAddUDec4
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	04f000000r			; 2.14748e+009
CONST	ENDS
;	COMDAT ?g_XMsrgbA1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMsrgbA1@DirectX@@3UXMVECTORF32@1@B DD 03f870a3dr ; 1.055 ; DirectX::g_XMsrgbA1
	DD	03f870a3dr			; 1.055
	DD	03f870a3dr			; 1.055
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMArcEstCoefficients@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMArcEstCoefficients@DirectX@@3UXMVECTORF32@1@B DD 03fc90da4r ; 1.57073 ; DirectX::g_XMArcEstCoefficients
	DD	0be593484r			; -0.212114
	DD	03d981627r			; 0.074261
	DD	0bc996e30r			; -0.0187293
CONST	ENDS
;	COMDAT ?g_XMExpEst1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst1@DirectX@@3UXMVECTORF32@1@B DD 0bf317218r ; -0.693147 ; DirectX::g_XMExpEst1
	DD	0bf317218r			; -0.693147
	DD	0bf317218r			; -0.693147
	DD	0bf317218r			; -0.693147
CONST	ENDS
;	COMDAT ?g_XMOne3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOne3@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1	; DirectX::g_XMOne3
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMXorDec4@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMXorDec4@DirectX@@3UXMVECTORI32@1@B DD 0200H	; DirectX::g_XMXorDec4
	DD	080000H
	DD	020000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMTanCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTanCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 03cb327a4r ; 0.0218695 ; DirectX::g_XMTanCoefficients1
	DD	03c11371br			; 0.00886324
	DD	03b6b69e9r			; 0.00359213
	DD	03abed1b3r			; 0.00145583
CONST	ENDS
;	COMDAT ?g_XMNoFraction@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNoFraction@DirectX@@3UXMVECTORF32@1@B DD 04b000000r ; 8.38861e+006 ; DirectX::g_XMNoFraction
	DD	04b000000r			; 8.38861e+006
	DD	04b000000r			; 8.38861e+006
	DD	04b000000r			; 8.38861e+006
CONST	ENDS
;	COMDAT ?g_XMMaskA8R8G8B8@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskA8R8G8B8@DirectX@@3UXMVECTORI32@1@B DD 0ff0000H ; DirectX::g_XMMaskA8R8G8B8
	DD	0ff00H
	DD	0ffH
	DD	0ff000000H
CONST	ENDS
;	COMDAT ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMNormalizeX16Y16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNormalizeX16Y16@DirectX@@3UXMVECTORF32@1@B DD 038000100r ; 3.05185e-005 ; DirectX::g_XMNormalizeX16Y16
	DD	030000100r			; 4.65675e-010
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMArcCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMArcCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 03fc90fdar ; 1.5708 ; DirectX::g_XMArcCoefficients0
	DD	0be5bbfcar			; -0.214599
	DD	03db63a9er			; 0.088979
	DD	0bd4d8392r			; -0.0501743
CONST	ENDS
;	COMDAT ?g_XMNegativeZero@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMNegativeZero@DirectX@@3UXMVECTORI32@1@B DD 080000000H ; DirectX::g_XMNegativeZero
	DD	080000000H
	DD	080000000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XM253@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XM253@DirectX@@3UXMVECTORI32@1@B DD 0fdH		; DirectX::g_XM253
	DD	0fdH
	DD	0fdH
	DD	0fdH
CONST	ENDS
;	COMDAT ?g_XMLogEst3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst3@DirectX@@3UXMVECTORF32@1@B DD 0beb359der ; -0.350295 ; DirectX::g_XMLogEst3
	DD	0beb359der			; -0.350295
	DD	0beb359der			; -0.350295
	DD	0beb359der			; -0.350295
CONST	ENDS
;	COMDAT ?g_XMATanCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMATanCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0bd9a3174r ; -0.0752896 ; DirectX::g_XMATanCoefficients1
	DD	03d2fc1fer			; 0.0429096
	DD	0bc846e02r			; -0.0161657
	DD	03b3bd74ar			; 0.00286623
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegIdentityR1@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMNegIdentityR1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMFlipY@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFlipY@DirectX@@3UXMVECTORI32@1@B DD 00H		; DirectX::g_XMFlipY
	DD	080000000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMLgE@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLgE@DirectX@@3UXMVECTORF32@1@B DD 03fb8aa3br ; 1.4427 ; DirectX::g_XMLgE
	DD	03fb8aa3br			; 1.4427
	DD	03fb8aa3br			; 1.4427
	DD	03fb8aa3br			; 1.4427
CONST	ENDS
;	COMDAT ?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B DD 07fffffffH	; DirectX::g_XMAbsMask
	DD	07fffffffH
	DD	07fffffffH
	DD	07fffffffH
CONST	ENDS
;	COMDAT ?g_XMTanCoefficients2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTanCoefficients2@DirectX@@3UXMVECTORF32@1@B DD 03a1aac12r ; 0.000590027 ; DirectX::g_XMTanCoefficients2
	DD	0397abeb9r			; 0.000239129
	DD	038cb3f0cr			; 9.69154e-005
	DD	03824bec9r			; 3.92783e-005
CONST	ENDS
;	COMDAT ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR2
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMExpEst6@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst6@DirectX@@3UXMVECTORF32@1@B DD 0391aa7d7r ; 0.000147491 ; DirectX::g_XMExpEst6
	DD	0391aa7d7r			; 0.000147491
	DD	0391aa7d7r			; 0.000147491
	DD	0391aa7d7r			; 0.000147491
CONST	ENDS
;	COMDAT ?g_XMNegInfinity@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMNegInfinity@DirectX@@3UXMVECTORI32@1@B DD 0ff800000H ; DirectX::g_XMNegInfinity
	DD	0ff800000H
	DD	0ff800000H
	DD	0ff800000H
CONST	ENDS
;	COMDAT ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMIdentityR0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMFlipA8R8G8B8@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFlipA8R8G8B8@DirectX@@3UXMVECTORI32@1@B DD 00H	; DirectX::g_XMFlipA8R8G8B8
	DD	00H
	DD	00H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMZero@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMZero@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0	; DirectX::g_XMZero
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMBin128@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMBin128@DirectX@@3UXMVECTORI32@1@B DD 043000000H	; DirectX::g_XMBin128
	DD	043000000H
	DD	043000000H
	DD	043000000H
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegIdentityR2@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMNegIdentityR2
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMXorByte4@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMXorByte4@DirectX@@3UXMVECTORI32@1@B DD 080H	; DirectX::g_XMXorByte4
	DD	08000H
	DD	0800000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMLogEst6@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst6@DirectX@@3UXMVECTORF32@1@B DD 03d6a1405r ; 0.057148 ; DirectX::g_XMLogEst6
	DD	03d6a1405r			; 0.057148
	DD	03d6a1405r			; 0.057148
	DD	03d6a1405r			; 0.057148
CONST	ENDS
;	COMDAT ?g_XMATanCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMATanCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 0beaaaa6cr ; -0.333331 ; DirectX::g_XMATanCoefficients0
	DD	03e4cbbe5r			; 0.199936
	DD	0be117fc7r			; -0.142089
	DD	03dda3d83r			; 0.106563
CONST	ENDS
;	COMDAT ?g_XMSubnormalExponent@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMSubnormalExponent@DirectX@@3UXMVECTORI32@1@B DD 0ffffff82H ; DirectX::g_XMSubnormalExponent
	DD	0ffffff82H
	DD	0ffffff82H
	DD	0ffffff82H
CONST	ENDS
;	COMDAT ?g_XMNegateZ@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegateZ@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMNegateZ
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMFlipX16Y16Z16W16@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFlipX16Y16Z16W16@DirectX@@3UXMVECTORI32@1@B DD 08000H ; DirectX::g_XMFlipX16Y16Z16W16
	DD	08000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMUnsignedFix@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMUnsignedFix@DirectX@@3UXMVECTORF32@1@B DD 04f000000r ; 2.14748e+009 ; DirectX::g_XMUnsignedFix
	DD	04f000000r			; 2.14748e+009
	DD	04f000000r			; 2.14748e+009
	DD	04f000000r			; 2.14748e+009
CONST	ENDS
;	COMDAT ?g_XMExpEst3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst3@DirectX@@3UXMVECTORF32@1@B DD 0bd6357car ; -0.0555036 ; DirectX::g_XMExpEst3
	DD	0bd6357car			; -0.0555036
	DD	0bd6357car			; -0.0555036
	DD	0bd6357car			; -0.0555036
CONST	ENDS
;	COMDAT ?g_XMQNaNTest@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMQNaNTest@DirectX@@3UXMVECTORI32@1@B DD 07fffffH	; DirectX::g_XMQNaNTest
	DD	07fffffH
	DD	07fffffH
	DD	07fffffH
CONST	ENDS
;	COMDAT ?g_XMSelect1000@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMSelect1000@DirectX@@3UXMVECTORI32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1000
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMSelect1100@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMSelect1100@DirectX@@3UXMVECTORI32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1100
	DD	0ffffffffH
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMLogEst1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst1@DirectX@@3UXMVECTORF32@1@B DD 0bf38a351r ; -0.721242 ; DirectX::g_XMLogEst1
	DD	0bf38a351r			; -0.721242
	DD	0bf38a351r			; -0.721242
	DD	0bf38a351r			; -0.721242
CONST	ENDS
;	COMDAT ?g_XMMaskDec4@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskDec4@DirectX@@3UXMVECTORI32@1@B DD 03ffH	; DirectX::g_XMMaskDec4
	DD	0ffc00H
	DD	03ff00000H
	DD	0c0000000H
CONST	ENDS
;	COMDAT ?g_XMLogEst7@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst7@DirectX@@3UXMVECTORF32@1@B DD 0bc2d4f59r ; -0.010578 ; DirectX::g_XMLogEst7
	DD	0bc2d4f59r			; -0.010578
	DD	0bc2d4f59r			; -0.010578
	DD	0bc2d4f59r			; -0.010578
CONST	ENDS
;	COMDAT ?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0b2cd365br ; -2.38899e-008 ; DirectX::g_XMSinCoefficients1
	DD	0be2aa888r			; -0.166659
	DD	03c08373cr			; 0.00831395
	DD	0b9423ec8r			; -0.000185247
CONST	ENDS
;	COMDAT ?g_XMFixupY16W16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixupY16W16@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMFixupY16W16
	DD	03f800000r			; 1
	DD	037800000r			; 1.52588e-005
	DD	037800000r			; 1.52588e-005
CONST	ENDS
;	COMDAT ?g_XMTwo@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMTwo@DirectX@@3UXMVECTORF32@1@B DD 040000000r ; 2	; DirectX::g_XMTwo
	DD	040000000r			; 2
	DD	040000000r			; 2
	DD	040000000r			; 2
CONST	ENDS
;	COMDAT ?g_XMFixX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B DD 0c7000000r ; -32768 ; DirectX::g_XMFixX16Y16Z16W16
	DD	0c7000000r			; -32768
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMAddByte4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMAddByte4@DirectX@@3UXMVECTORF32@1@B DD 0c3000000r ; -128 ; DirectX::g_XMAddByte4
	DD	0c7000000r			; -32768
	DD	0cb000000r			; -8.38861e+006
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMBinNeg150@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMBinNeg150@DirectX@@3UXMVECTORI32@1@B DD 0c3160000H	; DirectX::g_XMBinNeg150
	DD	0c3160000H
	DD	0c3160000H
	DD	0c3160000H
CONST	ENDS
;	COMDAT ?g_XMNegateY@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegateY@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMNegateY
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMMinNormal@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMinNormal@DirectX@@3UXMVECTORI32@1@B DD 0800000H	; DirectX::g_XMMinNormal
	DD	0800000H
	DD	0800000H
	DD	0800000H
CONST	ENDS
;	COMDAT ?g_XMNormalizeX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNormalizeX16Y16Z16W16@DirectX@@3UXMVECTORF32@1@B DD 038000100r ; 3.05185e-005 ; DirectX::g_XMNormalizeX16Y16Z16W16
	DD	038000100r			; 3.05185e-005
	DD	030000100r			; 4.65675e-010
	DD	030000100r			; 4.65675e-010
CONST	ENDS
;	COMDAT ?g_XMFlipZ@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFlipZ@DirectX@@3UXMVECTORI32@1@B DD 00H		; DirectX::g_XMFlipZ
	DD	00H
	DD	080000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMExpEst4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst4@DirectX@@3UXMVECTORF32@1@B DD 03c1d8c54r ; 0.00961598 ; DirectX::g_XMExpEst4
	DD	03c1d8c54r			; 0.00961598
	DD	03c1d8c54r			; 0.00961598
	DD	03c1d8c54r			; 0.00961598
CONST	ENDS
;	COMDAT ?g_XMFlipW@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFlipW@DirectX@@3UXMVECTORI32@1@B DD 00H		; DirectX::g_XMFlipW
	DD	00H
	DD	00H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR3
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMArcCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMArcCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 03cfd10f8r ; 0.0308919 ; DirectX::g_XMArcCoefficients1
	DD	0bc8bfc66r			; -0.0170881
	DD	03bda90c5r			; 0.00667009
	DD	0baa57a2cr			; -0.00126249
CONST	ENDS
;	COMDAT ?g_XMMaskA2B10G10R10@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskA2B10G10R10@DirectX@@3UXMVECTORI32@1@B DD 03ffH ; DirectX::g_XMMaskA2B10G10R10
	DD	0ffc00H
	DD	03ff00000H
	DD	0c0000000H
CONST	ENDS
;	COMDAT ?g_XMFlipA2B10G10R10@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFlipA2B10G10R10@DirectX@@3UXMVECTORI32@1@B DD 0200H ; DirectX::g_XMFlipA2B10G10R10
	DD	080000H
	DD	020000000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B DD 0bf800000r ; -1 ; DirectX::g_XMNegativeOne
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?g_XMSelect0101@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMSelect0101@DirectX@@3UXMVECTORI32@1@B DD 00H	; DirectX::g_XMSelect0101
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegIdentityR0@DirectX@@3UXMVECTORF32@1@B DD 0bf800000r ; -1 ; DirectX::g_XMNegIdentityR0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMMaskY@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskY@DirectX@@3UXMVECTORI32@1@B DD 00H		; DirectX::g_XMMaskY
	DD	0ffffffffH
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskZ@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskZ@DirectX@@3UXMVECTORI32@1@B DD 00H		; DirectX::g_XMMaskZ
	DD	00H
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMLogEst2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst2@DirectX@@3UXMVECTORF32@1@B DD 03ef571d2r ; 0.479384 ; DirectX::g_XMLogEst2
	DD	03ef571d2r			; 0.479384
	DD	03ef571d2r			; 0.479384
	DD	03ef571d2r			; 0.479384
CONST	ENDS
;	COMDAT ?g_XMFlipYZ@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFlipYZ@DirectX@@3UXMVECTORI32@1@B DD 00H		; DirectX::g_XMFlipYZ
	DD	080000000H
	DD	080000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 0be2aaaabr ; -0.166667 ; DirectX::g_XMSinCoefficients0
	DD	03c088886r			; 0.00833333
	DD	0b9500bf1r			; -0.000198409
	DD	03638b88er			; 2.75256e-006
CONST	ENDS
;	COMDAT ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B DD 07f800000H	; DirectX::g_XMInfinity
	DD	07f800000H
	DD	07f800000H
	DD	07f800000H
CONST	ENDS
;	COMDAT ?g_XMNegateX@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegateX@DirectX@@3UXMVECTORF32@1@B DD 0bf800000r ; -1 ; DirectX::g_XMNegateX
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMExpEst2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst2@DirectX@@3UXMVECTORF32@1@B DD 03e75fdedr ; 0.240226 ; DirectX::g_XMExpEst2
	DD	03e75fdedr			; 0.240226
	DD	03e75fdedr			; 0.240226
	DD	03e75fdedr			; 0.240226
CONST	ENDS
;	COMDAT ?g_XMNegQNaN@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMNegQNaN@DirectX@@3UXMVECTORI32@1@B DD 0ffc00000H	; DirectX::g_XMNegQNaN
	DD	0ffc00000H
	DD	0ffc00000H
	DD	0ffc00000H
CONST	ENDS
;	COMDAT ?Gainsboro@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Gainsboro@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f5cdcder ; 0.862745 ; DirectX::Colors::Gainsboro
	DD	03f5cdcder			; 0.862745
	DD	03f5cdcder			; 0.862745
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Moccasin@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Moccasin@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Moccasin
	DD	03f64e4e6r			; 0.894118
	DD	03f35b5b6r			; 0.709804
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Navy@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Navy@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Navy
	DD	000000000r			; 0
	DD	03f008081r			; 0.501961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Thistle@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Thistle@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f58d8dar ; 0.847059 ; DirectX::Colors::Thistle
	DD	03f3fbfc0r			; 0.74902
	DD	03f58d8dar			; 0.847059
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?BlanchedAlmond@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?BlanchedAlmond@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::BlanchedAlmond
	DD	03f6bebedr			; 0.921569
	DD	03f4dcdcfr			; 0.803922
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Purple@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Purple@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f008081r ; 0.501961 ; DirectX::Colors::Purple
	DD	000000000r			; 0
	DD	03f008081r			; 0.501961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SaddleBrown@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SaddleBrown@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f0b8b8cr ; 0.545098 ; DirectX::Colors::SaddleBrown
	DD	03e8a8a8br			; 0.270588
	DD	03d989899r			; 0.0745098
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MintCream@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MintCream@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f75f5f7r ; 0.960784 ; DirectX::Colors::MintCream
	DD	03f800000r			; 1
	DD	03f7afafcr			; 0.980392
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?BlueViolet@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?BlueViolet@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f0a8a8br ; 0.541176 ; DirectX::Colors::BlueViolet
	DD	03e2cacadr			; 0.168627
	DD	03f62e2e4r			; 0.886275
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Wheat@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Wheat@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f75f5f7r ; 0.960784 ; DirectX::Colors::Wheat
	DD	03f5edee0r			; 0.870588
	DD	03f33b3b4r			; 0.701961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DodgerBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DodgerBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03df0f0f2r ; 0.117647 ; DirectX::Colors::DodgerBlue
	DD	03f109091r			; 0.564706
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Olive@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Olive@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f008081r ; 0.501961 ; DirectX::Colors::Olive
	DD	03f008081r			; 0.501961
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Salmon@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Salmon@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f7afafcr ; 0.980392 ; DirectX::Colors::Salmon
	DD	03f008081r			; 0.501961
	DD	03ee4e4e6r			; 0.447059
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?PapayaWhip@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?PapayaWhip@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::PapayaWhip
	DD	03f6feff1r			; 0.937255
	DD	03f55d5d7r			; 0.835294
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkViolet@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkViolet@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f149495r ; 0.580392 ; DirectX::Colors::DarkViolet
	DD	000000000r			; 0
	DD	03f53d3d5r			; 0.827451
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SeaShell@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SeaShell@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::SeaShell
	DD	03f75f5f7r			; 0.960784
	DD	03f6eeef0r			; 0.933333
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DimGray@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DimGray@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ed2d2d4r ; 0.411765 ; DirectX::Colors::DimGray
	DD	03ed2d2d4r			; 0.411765
	DD	03ed2d2d4r			; 0.411765
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Black@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Black@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Black
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkGoldenrod@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkGoldenrod@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f38b8b9r ; 0.721569 ; DirectX::Colors::DarkGoldenrod
	DD	03f068687r			; 0.52549
	DD	03d30b0b1r			; 0.0431373
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumPurple@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumPurple@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f139394r ; 0.576471 ; DirectX::Colors::MediumPurple
	DD	03ee0e0e2r			; 0.439216
	DD	03f5bdbddr			; 0.858824
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Snow@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Snow@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Snow
	DD	03f7afafcr			; 0.980392
	DD	03f7afafcr			; 0.980392
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightPink@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightPink@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::LightPink
	DD	03f36b6b7r			; 0.713726
	DD	03f41c1c3r			; 0.756863
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Magenta@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Magenta@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Magenta
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?PaleGoldenrod@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?PaleGoldenrod@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f6eeef0r ; 0.933333 ; DirectX::Colors::PaleGoldenrod
	DD	03f68e8ear			; 0.909804
	DD	03f2aaaabr			; 0.666667
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?PeachPuff@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?PeachPuff@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::PeachPuff
	DD	03f5adadcr			; 0.854902
	DD	03f39b9bar			; 0.72549
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Violet@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Violet@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f6eeef0r ; 0.933333 ; DirectX::Colors::Violet
	DD	03f028283r			; 0.509804
	DD	03f6eeef0r			; 0.933333
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Firebrick@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Firebrick@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f32b2b3r ; 0.698039 ; DirectX::Colors::Firebrick
	DD	03e088889r			; 0.133333
	DD	03e088889r			; 0.133333
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SlateGray@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SlateGray@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ee0e0e2r ; 0.439216 ; DirectX::Colors::SlateGray
	DD	03f008081r			; 0.501961
	DD	03f109091r			; 0.564706
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightCyan@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightCyan@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f60e0e2r ; 0.878431 ; DirectX::Colors::LightCyan
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LawnGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LawnGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ef8f8far ; 0.486275 ; DirectX::Colors::LawnGreen
	DD	03f7cfcfer			; 0.988235
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Tan@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Tan@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f52d2d4r ; 0.823529 ; DirectX::Colors::Tan
	DD	03f34b4b5r			; 0.705882
	DD	03f0c8c8dr			; 0.54902
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?GhostWhite@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?GhostWhite@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f78f8far ; 0.972549 ; DirectX::Colors::GhostWhite
	DD	03f78f8far			; 0.972549
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e70f0f2r ; 0.235294 ; DirectX::Colors::MediumSeaGreen
	DD	03f33b3b4r			; 0.701961
	DD	03ee2e2e4r			; 0.443137
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Sienna@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Sienna@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f20a0a1r ; 0.627451 ; DirectX::Colors::Sienna
	DD	03ea4a4a5r			; 0.321569
	DD	03e34b4b5r			; 0.176471
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?White@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?White@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::White
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?IndianRed@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?IndianRed@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f4dcdcfr ; 0.803922 ; DirectX::Colors::IndianRed
	DD	03eb8b8b9r			; 0.360784
	DD	03eb8b8b9r			; 0.360784
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Khaki@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Khaki@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f70f0f2r ; 0.941177 ; DirectX::Colors::Khaki
	DD	03f66e6e8r			; 0.901961
	DD	03f0c8c8dr			; 0.54902
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Orchid@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Orchid@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f5adadcr ; 0.854902 ; DirectX::Colors::Orchid
	DD	03ee0e0e2r			; 0.439216
	DD	03f56d6d8r			; 0.839216
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::DarkBlue
	DD	000000000r			; 0
	DD	03f0b8b8cr			; 0.545098
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LavenderBlush@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LavenderBlush@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::LavenderBlush
	DD	03f70f0f2r			; 0.941177
	DD	03f75f5f7r			; 0.960784
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?CornflowerBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?CornflowerBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ec8c8car ; 0.392157 ; DirectX::Colors::CornflowerBlue
	DD	03f159596r			; 0.584314
	DD	03f6dedefr			; 0.929412
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?RosyBrown@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?RosyBrown@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f3cbcbdr ; 0.737255 ; DirectX::Colors::RosyBrown
	DD	03f0f8f90r			; 0.560784
	DD	03f0f8f90r			; 0.560784
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e909091r ; 0.282353 ; DirectX::Colors::MediumTurquoise
	DD	03f51d1d3r			; 0.819608
	DD	03f4ccccer			; 0.8
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::DarkGreen
	DD	03ec8c8car			; 0.392157
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?RoyalBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?RoyalBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e828283r ; 0.254902 ; DirectX::Colors::RoyalBlue
	DD	03ed2d2d4r			; 0.411765
	DD	03f61e1e3r			; 0.882353
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkRed@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkRed@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f0b8b8cr ; 0.545098 ; DirectX::Colors::DarkRed
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Goldenrod@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Goldenrod@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f5adadcr ; 0.854902 ; DirectX::Colors::Goldenrod
	DD	03f25a5a6r			; 0.647059
	DD	03e008081r			; 0.12549
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumSpringGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumSpringGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::MediumSpringGreen
	DD	03f7afafcr			; 0.980392
	DD	03f1a9a9br			; 0.603922
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkSalmon@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkSalmon@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f69e9ebr ; 0.913726 ; DirectX::Colors::DarkSalmon
	DD	03f169697r			; 0.588235
	DD	03ef4f4f6r			; 0.478431
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightYellow@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightYellow@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::LightYellow
	DD	03f800000r			; 1
	DD	03f60e0e2r			; 0.878431
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Peru@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Peru@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f4dcdcfr ; 0.803922 ; DirectX::Colors::Peru
	DD	03f058586r			; 0.521569
	DD	03e7cfcfer			; 0.247059
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Lime@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Lime@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Lime
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?PaleTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?PaleTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f2fafb0r ; 0.686275 ; DirectX::Colors::PaleTurquoise
	DD	03f6eeef0r			; 0.933333
	DD	03f6eeef0r			; 0.933333
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?PowderBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?PowderBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f30b0b1r ; 0.690196 ; DirectX::Colors::PowderBlue
	DD	03f60e0e2r			; 0.878431
	DD	03f66e6e8r			; 0.901961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumOrchid@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumOrchid@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f3ababbr ; 0.729412 ; DirectX::Colors::MediumOrchid
	DD	03eaaaaabr			; 0.333333
	DD	03f53d3d5r			; 0.827451
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkOliveGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkOliveGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03eaaaaabr ; 0.333333 ; DirectX::Colors::DarkOliveGreen
	DD	03ed6d6d8r			; 0.419608
	DD	03e3cbcbdr			; 0.184314
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkSlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkSlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e909091r ; 0.282353 ; DirectX::Colors::DarkSlateBlue
	DD	03e74f4f6r			; 0.239216
	DD	03f0b8b8cr			; 0.545098
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ed4d4d6r ; 0.415686 ; DirectX::Colors::SlateBlue
	DD	03eb4b4b5r			; 0.352941
	DD	03f4dcdcfr			; 0.803922
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MidnightBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MidnightBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03dc8c8car ; 0.0980392 ; DirectX::Colors::MidnightBlue
	DD	03dc8c8car			; 0.0980392
	DD	03ee0e0e2r			; 0.439216
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Ivory@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Ivory@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Ivory
	DD	03f800000r			; 1
	DD	03f70f0f2r			; 0.941177
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e38b8b9r ; 0.180392 ; DirectX::Colors::SeaGreen
	DD	03f0b8b8cr			; 0.545098
	DD	03eaeaeafr			; 0.341176
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumSlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumSlateBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ef6f6f8r ; 0.482353 ; DirectX::Colors::MediumSlateBlue
	DD	03ed0d0d2r			; 0.407843
	DD	03f6eeef0r			; 0.933333
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Maroon@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Maroon@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f008081r ; 0.501961 ; DirectX::Colors::Maroon
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Silver@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Silver@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f40c0c2r ; 0.752941 ; DirectX::Colors::Silver
	DD	03f40c0c2r			; 0.752941
	DD	03f40c0c2r			; 0.752941
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Bisque@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Bisque@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Bisque
	DD	03f64e4e6r			; 0.894118
	DD	03f44c4c6r			; 0.768628
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Red@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Red@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Red
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Teal@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Teal@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Teal
	DD	03f008081r			; 0.501961
	DD	03f008081r			; 0.501961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumAquamarine@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumAquamarine@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ecccccer ; 0.4 ; DirectX::Colors::MediumAquamarine
	DD	03f4dcdcfr			; 0.803922
	DD	03f2aaaabr			; 0.666667
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Aqua@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Aqua@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Aqua
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightGoldenrodYellow@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightGoldenrodYellow@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f7afafcr ; 0.980392 ; DirectX::Colors::LightGoldenrodYellow
	DD	03f7afafcr			; 0.980392
	DD	03f52d2d4r			; 0.823529
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SandyBrown@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SandyBrown@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f74f4f6r ; 0.956863 ; DirectX::Colors::SandyBrown
	DD	03f24a4a5r			; 0.643137
	DD	03ec0c0c2r			; 0.376471
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Gold@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Gold@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Gold
	DD	03f57d7d9r			; 0.843137
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightSlateGray@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightSlateGray@Colors@DirectX@@3UXMVECTORF32@2@B DD 03eeeeef0r ; 0.466667 ; DirectX::Colors::LightSlateGray
	DD	03f088889r			; 0.533333
	DD	03f19999ar			; 0.6
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?PaleGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?PaleGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f189899r ; 0.596078 ; DirectX::Colors::PaleGreen
	DD	03f7bfbfdr			; 0.984314
	DD	03f189899r			; 0.596078
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightCoral@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightCoral@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f70f0f2r ; 0.941177 ; DirectX::Colors::LightCoral
	DD	03f008081r			; 0.501961
	DD	03f008081r			; 0.501961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkCyan@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkCyan@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::DarkCyan
	DD	03f0b8b8cr			; 0.545098
	DD	03f0b8b8cr			; 0.545098
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Gray@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Gray@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f008081r ; 0.501961 ; DirectX::Colors::Gray
	DD	03f008081r			; 0.501961
	DD	03f008081r			; 0.501961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Crimson@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Crimson@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f5cdcder ; 0.862745 ; DirectX::Colors::Crimson
	DD	03da0a0a1r			; 0.0784314
	DD	03e70f0f2r			; 0.235294
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkTurquoise@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::DarkTurquoise
	DD	03f4eced0r			; 0.807843
	DD	03f51d1d3r			; 0.819608
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkSlateGray@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkSlateGray@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e3cbcbdr ; 0.184314 ; DirectX::Colors::DarkSlateGray
	DD	03e9e9e9fr			; 0.309804
	DD	03e9e9e9fr			; 0.309804
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?ForestGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?ForestGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e088889r ; 0.133333 ; DirectX::Colors::ForestGreen
	DD	03f0b8b8cr			; 0.545098
	DD	03e088889r			; 0.133333
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e008081r ; 0.12549 ; DirectX::Colors::LightSeaGreen
	DD	03f32b2b3r			; 0.698039
	DD	03f2aaaabr			; 0.666667
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Honeydew@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Honeydew@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f70f0f2r ; 0.941177 ; DirectX::Colors::Honeydew
	DD	03f800000r			; 1
	DD	03f70f0f2r			; 0.941177
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SteelBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SteelBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e8c8c8dr ; 0.27451 ; DirectX::Colors::SteelBlue
	DD	03f028283r			; 0.509804
	DD	03f34b4b5r			; 0.705882
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Chartreuse@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Chartreuse@Colors@DirectX@@3UXMVECTORF32@2@B DD 03efeff00r ; 0.498039 ; DirectX::Colors::Chartreuse
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightGray@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightGray@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f53d3d5r ; 0.827451 ; DirectX::Colors::LightGray
	DD	03f53d3d5r			; 0.827451
	DD	03f53d3d5r			; 0.827451
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Aquamarine@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Aquamarine@Colors@DirectX@@3UXMVECTORF32@2@B DD 03efeff00r ; 0.498039 ; DirectX::Colors::Aquamarine
	DD	03f800000r			; 1
	DD	03f54d4d6r			; 0.831373
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Orange@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Orange@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Orange
	DD	03f25a5a6r			; 0.647059
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Pink@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Pink@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Pink
	DD	03f40c0c2r			; 0.752941
	DD	03f4bcbcdr			; 0.796079
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?BurlyWood@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?BurlyWood@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f5edee0r ; 0.870588 ; DirectX::Colors::BurlyWood
	DD	03f38b8b9r			; 0.721569
	DD	03f078788r			; 0.529412
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Fuchsia@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Fuchsia@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Fuchsia
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Green@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Green@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Green
	DD	03f008081r			; 0.501961
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Coral@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Coral@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Coral
	DD	03efeff00r			; 0.498039
	DD	03ea0a0a1r			; 0.313726
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?CadetBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?CadetBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ebebebfr ; 0.372549 ; DirectX::Colors::CadetBlue
	DD	03f1e9e9fr			; 0.619608
	DD	03f20a0a1r			; 0.627451
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?FloralWhite@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?FloralWhite@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::FloralWhite
	DD	03f7afafcr			; 0.980392
	DD	03f70f0f2r			; 0.941177
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?PaleVioletRed@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?PaleVioletRed@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f5bdbddr ; 0.858824 ; DirectX::Colors::PaleVioletRed
	DD	03ee0e0e2r			; 0.439216
	DD	03f139394r			; 0.576471
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkOrange@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkOrange@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::DarkOrange
	DD	03f0c8c8dr			; 0.54902
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Cyan@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Cyan@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Cyan
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkOrchid@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkOrchid@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f19999ar ; 0.6 ; DirectX::Colors::DarkOrchid
	DD	03e48c8car			; 0.196078
	DD	03f4ccccer			; 0.8
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Tomato@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Tomato@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Tomato
	DD	03ec6c6c8r			; 0.388235
	DD	03e8e8e8fr			; 0.278431
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?YellowGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?YellowGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f1a9a9br ; 0.603922 ; DirectX::Colors::YellowGreen
	DD	03f4dcdcfr			; 0.803922
	DD	03e48c8car			; 0.196078
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f2dadaer ; 0.678431 ; DirectX::Colors::LightBlue
	DD	03f58d8dar			; 0.847059
	DD	03f66e6e8r			; 0.901961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Lavender@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Lavender@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f66e6e8r ; 0.901961 ; DirectX::Colors::Lavender
	DD	03f66e6e8r			; 0.901961
	DD	03f7afafcr			; 0.980392
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?OldLace@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?OldLace@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f7dfdffr ; 0.992157 ; DirectX::Colors::OldLace
	DD	03f75f5f7r			; 0.960784
	DD	03f66e6e8r			; 0.901961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?OrangeRed@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?OrangeRed@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::OrangeRed
	DD	03e8a8a8br			; 0.270588
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightSteelBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightSteelBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f30b0b1r ; 0.690196 ; DirectX::Colors::LightSteelBlue
	DD	03f44c4c6r			; 0.768628
	DD	03f5edee0r			; 0.870588
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Blue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Blue@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Blue
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Linen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Linen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f7afafcr ; 0.980392 ; DirectX::Colors::Linen
	DD	03f70f0f2r			; 0.941177
	DD	03f66e6e8r			; 0.901961
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?OliveDrab@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?OliveDrab@Colors@DirectX@@3UXMVECTORF32@2@B DD 03ed6d6d8r ; 0.419608 ; DirectX::Colors::OliveDrab
	DD	03f0e8e8fr			; 0.556863
	DD	03e0c8c8dr			; 0.137255
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Cornsilk@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Cornsilk@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Cornsilk
	DD	03f78f8far			; 0.972549
	DD	03f5cdcder			; 0.862745
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LimeGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LimeGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e48c8car ; 0.196078 ; DirectX::Colors::LimeGreen
	DD	03f4dcdcfr			; 0.803922
	DD	03e48c8car			; 0.196078
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?AntiqueWhite@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?AntiqueWhite@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f7afafcr ; 0.980392 ; DirectX::Colors::AntiqueWhite
	DD	03f6bebedr			; 0.921569
	DD	03f57d7d9r			; 0.843137
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DeepSkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DeepSkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::DeepSkyBlue
	DD	03f3fbfc0r			; 0.74902
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Transparent@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Transparent@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::Transparent
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?Beige@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Beige@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f75f5f7r ; 0.960784 ; DirectX::Colors::Beige
	DD	03f75f5f7r			; 0.960784
	DD	03f5cdcder			; 0.862745
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Azure@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Azure@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f70f0f2r ; 0.941177 ; DirectX::Colors::Azure
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?WhiteSmoke@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?WhiteSmoke@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f75f5f7r ; 0.960784 ; DirectX::Colors::WhiteSmoke
	DD	03f75f5f7r			; 0.960784
	DD	03f75f5f7r			; 0.960784
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Turquoise@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Turquoise@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e808081r ; 0.25098 ; DirectX::Colors::Turquoise
	DD	03f60e0e2r			; 0.878431
	DD	03f50d0d2r			; 0.815686
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?GreenYellow@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?GreenYellow@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f2dadaer ; 0.678431 ; DirectX::Colors::GreenYellow
	DD	03f800000r			; 1
	DD	03e3cbcbdr			; 0.184314
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Plum@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Plum@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f5ddddfr ; 0.866667 ; DirectX::Colors::Plum
	DD	03f20a0a1r			; 0.627451
	DD	03f5ddddfr			; 0.866667
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SpringGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SpringGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::SpringGreen
	DD	03f800000r			; 1
	DD	03efeff00r			; 0.498039
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkGray@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkGray@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f29a9aar ; 0.662745 ; DirectX::Colors::DarkGray
	DD	03f29a9aar			; 0.662745
	DD	03f29a9aar			; 0.662745
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Brown@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Brown@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f25a5a6r ; 0.647059 ; DirectX::Colors::Brown
	DD	03e28a8a9r			; 0.164706
	DD	03e28a8a9r			; 0.164706
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Chocolate@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Chocolate@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f52d2d4r ; 0.823529 ; DirectX::Colors::Chocolate
	DD	03ed2d2d4r			; 0.411765
	DD	03df0f0f2r			; 0.117647
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MistyRose@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MistyRose@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::MistyRose
	DD	03f64e4e6r			; 0.894118
	DD	03f61e1e3r			; 0.882353
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumVioletRed@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumVioletRed@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f47c7c9r ; 0.780392 ; DirectX::Colors::MediumVioletRed
	DD	03da8a8a9r			; 0.0823529
	DD	03f058586r			; 0.521569
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?HotPink@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?HotPink@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::HotPink
	DD	03ed2d2d4r			; 0.411765
	DD	03f34b4b5r			; 0.705882
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DeepPink@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DeepPink@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::DeepPink
	DD	03da0a0a1r			; 0.0784314
	DD	03f139394r			; 0.576471
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?MediumBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?MediumBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 000000000r ; 0 ; DirectX::Colors::MediumBlue
	DD	000000000r			; 0
	DD	03f4dcdcfr			; 0.803922
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?AliceBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?AliceBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f70f0f2r ; 0.941177 ; DirectX::Colors::AliceBlue
	DD	03f78f8far			; 0.972549
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Indigo@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Indigo@Colors@DirectX@@3UXMVECTORF32@2@B DD 03e969697r ; 0.294118 ; DirectX::Colors::Indigo
	DD	000000000r			; 0
	DD	03f028283r			; 0.509804
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightSkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightSkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f078788r ; 0.529412 ; DirectX::Colors::LightSkyBlue
	DD	03f4eced0r			; 0.807843
	DD	03f7afafcr			; 0.980392
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?NavajoWhite@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?NavajoWhite@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::NavajoWhite
	DD	03f5edee0r			; 0.870588
	DD	03f2dadaer			; 0.678431
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkMagenta@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkMagenta@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f0b8b8cr ; 0.545098 ; DirectX::Colors::DarkMagenta
	DD	000000000r			; 0
	DD	03f0b8b8cr			; 0.545098
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkSeaGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f0f8f90r ; 0.560784 ; DirectX::Colors::DarkSeaGreen
	DD	03f3cbcbdr			; 0.737255
	DD	03f0b8b8cr			; 0.545098
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?DarkKhaki@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?DarkKhaki@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f3dbdber ; 0.741176 ; DirectX::Colors::DarkKhaki
	DD	03f37b7b8r			; 0.717647
	DD	03ed6d6d8r			; 0.419608
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightGreen@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightGreen@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f109091r ; 0.564706 ; DirectX::Colors::LightGreen
	DD	03f6eeef0r			; 0.933333
	DD	03f109091r			; 0.564706
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?SkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?SkyBlue@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f078788r ; 0.529412 ; DirectX::Colors::SkyBlue
	DD	03f4eced0r			; 0.807843
	DD	03f6bebedr			; 0.921569
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LemonChiffon@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LemonChiffon@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::LemonChiffon
	DD	03f7afafcr			; 0.980392
	DD	03f4dcdcfr			; 0.803922
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Yellow@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?Yellow@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::Yellow
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?LightSalmon@Colors@DirectX@@3UXMVECTORF32@2@B
CONST	SEGMENT
?LightSalmon@Colors@DirectX@@3UXMVECTORF32@2@B DD 03f800000r ; 1 ; DirectX::Colors::LightSalmon
	DD	03f20a0a1r			; 0.627451
	DD	03ef4f4f6r			; 0.478431
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMMaxInt@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMMaxInt@DirectX@@3UXMVECTORF32@1@B DD 04effffffr ; 2.14748e+009 ; DirectX::g_XMMaxInt
	DD	04effffffr			; 2.14748e+009
	DD	04effffffr			; 2.14748e+009
	DD	04effffffr			; 2.14748e+009
CONST	ENDS
;	COMDAT ?g_XMFlipX16Y16@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMFlipX16Y16@DirectX@@3UXMVECTORI32@1@B DD 08000H	; DirectX::g_XMFlipX16Y16
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMNormalizeA8R8G8B8@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNormalizeA8R8G8B8@DirectX@@3UXMVECTORF32@1@B DD 033808081r ; 5.98384e-008 ; DirectX::g_XMNormalizeA8R8G8B8
	DD	037808081r			; 1.53186e-005
	DD	03b808081r			; 0.00392157
	DD	02f808081r			; 2.33744e-010
CONST	ENDS
;	COMDAT ?g_XMsrgbA@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMsrgbA@DirectX@@3UXMVECTORF32@1@B DD 03d6147aer ; 0.055 ; DirectX::g_XMsrgbA
	DD	03d6147aer			; 0.055
	DD	03d6147aer			; 0.055
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMSix@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMSix@DirectX@@3UXMVECTORF32@1@B DD 040c00000r ; 6	; DirectX::g_XMSix
	DD	040c00000r			; 6
	DD	040c00000r			; 6
	DD	040c00000r			; 6
CONST	ENDS
;	COMDAT ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1110
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMLogEst5@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst5@DirectX@@3UXMVECTORF32@1@B DD 0be153261r ; -0.1457 ; DirectX::g_XMLogEst5
	DD	0be153261r			; -0.1457
	DD	0be153261r			; -0.1457
	DD	0be153261r			; -0.1457
CONST	ENDS
;	COMDAT ?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B DD 07fc00000H	; DirectX::g_XMQNaN
	DD	07fc00000H
	DD	07fc00000H
	DD	07fc00000H
CONST	ENDS
;	COMDAT ?g_XMMaskX@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskX@DirectX@@3UXMVECTORI32@1@B DD 0ffffffffH	; DirectX::g_XMMaskX
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskX16Y16@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskX16Y16@DirectX@@3UXMVECTORI32@1@B DD 0ffffH	; DirectX::g_XMMaskX16Y16
	DD	0ffff0000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMOne@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOne@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1	; DirectX::g_XMOne
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMask3@DirectX@@3UXMVECTORI32@1@B DD 0ffffffffH	; DirectX::g_XMMask3
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMFixUnsigned@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixUnsigned@DirectX@@3UXMVECTORF32@1@B DD 04f000000r ; 2.14748e+009 ; DirectX::g_XMFixUnsigned
	DD	04f000000r			; 2.14748e+009
	DD	04f000000r			; 2.14748e+009
	DD	04f000000r			; 2.14748e+009
CONST	ENDS
;	COMDAT ?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B DD 034000000r ; 1.19209e-007 ; DirectX::g_XMEpsilon
	DD	034000000r			; 1.19209e-007
	DD	034000000r			; 1.19209e-007
	DD	034000000r			; 1.19209e-007
CONST	ENDS
;	COMDAT ?g_XMAddDec4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMAddDec4@DirectX@@3UXMVECTORF32@1@B DD 0c4000000r ; -512 ; DirectX::g_XMAddDec4
	DD	0c9000000r			; -524288
	DD	0ce000000r			; -5.36871e+008
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMSelect1010@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMSelect1010@DirectX@@3UXMVECTORI32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1010
	DD	00H
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaxUInt@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMMaxUInt@DirectX@@3UXMVECTORF32@1@B DD 04f7fffffr ; 4.29497e+009 ; DirectX::g_XMMaxUInt
	DD	04f7fffffr			; 4.29497e+009
	DD	04f7fffffr			; 4.29497e+009
	DD	04f7fffffr			; 4.29497e+009
CONST	ENDS
;	COMDAT ?g_XMLogEst0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMLogEst0@DirectX@@3UXMVECTORF32@1@B DD 03fb8aa2ar ; 1.44269 ; DirectX::g_XMLogEst0
	DD	03fb8aa2ar			; 1.44269
	DD	03fb8aa2ar			; 1.44269
	DD	03fb8aa2ar			; 1.44269
CONST	ENDS
;	COMDAT ?g_XMMulDec4@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMMulDec4@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMMulDec4
	DD	03a800000r			; 0.000976563
	DD	035800000r			; 9.53674e-007
	DD	030800000r			; 9.31323e-010
CONST	ENDS
;	COMDAT ?g_XMExpEst7@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMExpEst7@DirectX@@3UXMVECTORF32@1@B DD 0b7364261r ; -1.08635e-005 ; DirectX::g_XMExpEst7
	DD	0b7364261r			; -1.08635e-005
	DD	0b7364261r			; -1.08635e-005
	DD	0b7364261r			; -1.08635e-005
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegIdentityR3@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMNegIdentityR3
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?g_XMFixupY16@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFixupY16@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMFixupY16
	DD	037800000r			; 1.52588e-005
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMFour@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMFour@DirectX@@3UXMVECTORF32@1@B DD 040800000r ; 4	; DirectX::g_XMFour
	DD	040800000r			; 4
	DD	040800000r			; 4
	DD	040800000r			; 4
CONST	ENDS
;	COMDAT ?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 0bf000000r ; -0.5 ; DirectX::g_XMCosCoefficients0
	DD	03d2aaaa3r			; 0.0416666
	DD	0bab609aar			; -0.00138884
	DD	037cfb4c2r			; 2.47605e-005
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT DD 0705b9d82H
	DW	076cfH
	DW	049d6H
	DB	0b7H
	DB	0e6H
	DB	0acH
	DB	088H
	DB	072H
	DB	0dbH
	DB	01H
	DB	03cH
CONST	ENDS
;	COMDAT _IID_ID3D10Device1
CONST	SEGMENT
_IID_ID3D10Device1 DD 09b7e4c8fH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat8bppGray
CONST	SEGMENT
_GUID_WICPixelFormat8bppGray DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	08H
CONST	ENDS
;	COMDAT _DXGI_DEBUG_D3D10
CONST	SEGMENT
_DXGI_DEBUG_D3D10 DD 0243b4c52H
	DW	03606H
	DW	04d3aH
	DB	099H
	DB	0d7H
	DB	0a7H
	DB	0e7H
	DB	0b3H
	DB	03eH
	DB	0d7H
	DB	06H
CONST	ENDS
;	COMDAT _CLSID_WICDdsDecoder
CONST	SEGMENT
_CLSID_WICDdsDecoder DD 09053699fH
	DW	0a341H
	DW	0429dH
	DB	09eH
	DB	090H
	DB	0eeH
	DB	043H
	DB	07cH
	DB	0f8H
	DB	0cH
	DB	073H
CONST	ENDS
;	COMDAT _IID_ID3D10Device
CONST	SEGMENT
_IID_ID3D10Device DD 09b7e4c0fH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10ShaderReflectionType
CONST	SEGMENT
_IID_ID3D10ShaderReflectionType DD 0c530ad7dH
	DW	09b16H
	DW	04395H
	DB	0a9H
	DB	079H
	DB	0baH
	DB	02eH
	DB	0cfH
	DB	0f8H
	DB	03aH
	DB	0ddH
CONST	ENDS
;	COMDAT _IID_ID3D10Asynchronous
CONST	SEGMENT
_IID_ID3D10Asynchronous DD 09b7e4c0dH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflectionType
CONST	SEGMENT
_IID_ID3D11ShaderReflectionType DD 06e6ffa6aH
	DW	09baeH
	DW	04613H
	DB	0a5H
	DB	01eH
	DB	091H
	DB	065H
	DB	02dH
	DB	050H
	DB	08cH
	DB	021H
CONST	ENDS
;	COMDAT _IID_ID3D11SamplerState
CONST	SEGMENT
_IID_ID3D11SamplerState DD 0da6fea51H
	DW	0564cH
	DW	04487H
	DB	098H
	DB	010H
	DB	0f0H
	DB	0d0H
	DB	0f9H
	DB	0b4H
	DB	0e3H
	DB	0a5H
CONST	ENDS
;	COMDAT _IID_ID3D11TracingDevice
CONST	SEGMENT
_IID_ID3D11TracingDevice DD 01911c771H
	DW	01587H
	DW	0413eH
	DB	0a7H
	DB	0e0H
	DB	0fbH
	DB	026H
	DB	0c3H
	DB	0deH
	DB	02H
	DB	068H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_IDCT_NOFGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_IDCT_NOFGT DD 01b81be66H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE DD 0bc1b18a5H
	DW	0b1fbH
	DW	042abH
	DB	0bdH
	DB	094H
	DB	0b5H
	DB	082H
	DB	08bH
	DB	04bH
	DB	0f7H
	DB	0beH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat16bppCbCr
CONST	SEGMENT
_GUID_WICPixelFormat16bppCbCr DD 0ff95ba6eH
	DW	011e0H
	DW	04263H
	DB	0bbH
	DB	045H
	DB	01H
	DB	072H
	DB	01fH
	DB	034H
	DB	060H
	DB	0a4H
CONST	ENDS
;	COMDAT _IID_IDXGIAdapter1
CONST	SEGMENT
_IID_IDXGIAdapter1 DD 029038f61H
	DW	03839H
	DW	04626H
	DB	091H
	DB	0fdH
	DB	08H
	DB	068H
	DB	079H
	DB	01H
	DB	01aH
	DB	05H
CONST	ENDS
;	COMDAT _IID_IDXGISurface
CONST	SEGMENT
_IID_IDXGISurface DD 0cafcb56cH
	DW	06ac3H
	DW	04889H
	DB	0bfH
	DB	047H
	DB	09eH
	DB	023H
	DB	0bbH
	DB	0d2H
	DB	060H
	DB	0ecH
CONST	ENDS
;	COMDAT _IID_ID3D10Blob
CONST	SEGMENT
_IID_ID3D10Blob DD 08ba5fb08H
	DW	05195H
	DW	040e2H
	DB	0acH
	DB	058H
	DB	0dH
	DB	098H
	DB	09cH
	DB	03aH
	DB	01H
	DB	02H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat32bppRGBA1010102
CONST	SEGMENT
_GUID_WICPixelFormat32bppRGBA1010102 DD 025238d72H
	DW	0fcf9H
	DW	04522H
	DB	0b5H
	DB	014H
	DB	055H
	DB	078H
	DB	0e5H
	DB	0adH
	DB	055H
	DB	0e0H
CONST	ENDS
;	COMDAT _IID_ID3D11LibraryReflection
CONST	SEGMENT
_IID_ID3D11LibraryReflection DD 054384f1bH
	DW	05b3eH
	DW	04bb7H
	DB	0aeH
	DB	01H
	DB	060H
	DB	0baH
	DB	030H
	DB	097H
	DB	0cbH
	DB	0b6H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_MOCOMP_FGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_MOCOMP_FGT DD 01b81be65H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10
CONST	SEGMENT
_D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10 DD 0107af0e0H
	DW	0ef1aH
	DW	04d19H
	DB	0abH
	DB	0a8H
	DB	067H
	DB	0a1H
	DB	063H
	DB	07H
	DB	03dH
	DB	013H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT DD 0d5f04ff9H
	DW	03418H
	DW	045d8H
	DB	095H
	DB	061H
	DB	032H
	DB	0a7H
	DB	06aH
	DB	0aeH
	DB	02dH
	DB	0ddH
CONST	ENDS
;	COMDAT _IID_ID3D11VideoDevice
CONST	SEGMENT
_IID_ID3D11VideoDevice DD 010ec4d5bH
	DW	0975aH
	DW	04689H
	DB	0b9H
	DB	0e4H
	DB	0d0H
	DB	0aaH
	DB	0c3H
	DB	0fH
	DB	0e3H
	DB	033H
CONST	ENDS
;	COMDAT _IID_ID3DDeviceContextState
CONST	SEGMENT
_IID_ID3DDeviceContextState DD 05c1e0d8aH
	DW	07c23H
	DW	048f9H
	DB	08cH
	DB	059H
	DB	0a9H
	DB	029H
	DB	058H
	DB	0ceH
	DB	0ffH
	DB	011H
CONST	ENDS
;	COMDAT _GUID_ContainerFormatGif
CONST	SEGMENT
_GUID_ContainerFormatGif DD 01f8a5601H
	DW	07d4dH
	DW	04cbdH
	DB	09cH
	DB	082H
	DB	01bH
	DB	0c8H
	DB	0d4H
	DB	0eeH
	DB	0b9H
	DB	0a5H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectMatrixVariable
CONST	SEGMENT
_IID_ID3D10EffectMatrixVariable DD 050666c24H
	DW	0b82fH
	DW	04eedH
	DB	0a1H
	DB	072H
	DB	05bH
	DB	06eH
	DB	07eH
	DB	085H
	DB	022H
	DB	0e0H
CONST	ENDS
;	COMDAT _CLSID_WICTiffDecoder
CONST	SEGMENT
_CLSID_WICTiffDecoder DD 0b54e85d9H
	DW	0fe23H
	DW	0499fH
	DB	08bH
	DB	088H
	DB	06aH
	DB	0ceH
	DB	0a7H
	DB	013H
	DB	075H
	DB	02bH
CONST	ENDS
;	COMDAT _CLSID_WICPlanarFormatConverter
CONST	SEGMENT
_CLSID_WICPlanarFormatConverter DD 0184132b8H
	DW	032f8H
	DW	04784H
	DB	091H
	DB	031H
	DB	0ddH
	DB	072H
	DB	024H
	DB	0b2H
	DB	034H
	DB	038H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat32bppGrayFixedPoint
CONST	SEGMENT
_GUID_WICPixelFormat32bppGrayFixedPoint DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	03fH
CONST	ENDS
;	COMDAT _IID_ID3D11UnorderedAccessView
CONST	SEGMENT
_IID_ID3D11UnorderedAccessView DD 028acf509H
	DW	07f5cH
	DW	048f6H
	DB	086H
	DB	011H
	DB	0f3H
	DB	016H
	DB	01H
	DB	0aH
	DB	063H
	DB	080H
CONST	ENDS
;	COMDAT _IID_ID3D11Texture3D
CONST	SEGMENT
_IID_ID3D11Texture3D DD 037e866eH
	DW	0f56dH
	DW	04357H
	DB	0a8H
	DB	0afH
	DB	09dH
	DB	0abH
	DB	0beH
	DB	06eH
	DB	025H
	DB	0eH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat4bppIndexed
CONST	SEGMENT
_GUID_WICPixelFormat4bppIndexed DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	03H
CONST	ENDS
;	COMDAT _IID_ID3D10RenderTargetView
CONST	SEGMENT
_IID_ID3D10RenderTargetView DD 09b7e4c08H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT DD 02c042b5eH
	DW	08c07H
	DW	046d5H
	DB	0aaH
	DB	0beH
	DB	08fH
	DB	075H
	DB	0cbH
	DB	0adH
	DB	04cH
	DB	031H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectVectorVariable
CONST	SEGMENT
_IID_ID3D10EffectVectorVariable DD 062b98c44H
	DW	01f82H
	DW	04c67H
	DB	0bcH
	DB	0d0H
	DB	072H
	DB	0cfH
	DB	08fH
	DB	021H
	DB	07eH
	DB	081H
CONST	ENDS
;	COMDAT _GUID_VendorMicrosoftBuiltIn
CONST	SEGMENT
_GUID_VendorMicrosoftBuiltIn DD 0257a30fdH
	DW	06b6H
	DW	0462bH
	DB	0aeH
	DB	0a4H
	DB	063H
	DB	0f7H
	DB	0bH
	DB	086H
	DB	0e5H
	DB	033H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat32bppBGRA
CONST	SEGMENT
_GUID_WICPixelFormat32bppBGRA DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	0fH
CONST	ENDS
;	COMDAT _IID_ID3D11VertexShader
CONST	SEGMENT
_IID_ID3D11VertexShader DD 03b301d64H
	DW	0d678H
	DW	04289H
	DB	088H
	DB	097H
	DB	022H
	DB	0f8H
	DB	092H
	DB	08bH
	DB	072H
	DB	0f3H
CONST	ENDS
;	COMDAT _IID_IDXGIResource1
CONST	SEGMENT
_IID_IDXGIResource1 DD 030961379H
	DW	04609H
	DW	04a41H
	DB	099H
	DB	08eH
	DB	054H
	DB	0feH
	DB	056H
	DB	07eH
	DB	0e0H
	DB	0c1H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE
CONST	SEGMENT
_D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE DD 041fff286H
	DW	06ae0H
	DW	04d43H
	DB	09dH
	DB	055H
	DB	0a4H
	DB	06eH
	DB	09eH
	DB	0fdH
	DB	015H
	DB	08aH
CONST	ENDS
;	COMDAT _IID_IDXGIObject
CONST	SEGMENT
_IID_IDXGIObject DD 0aec22fb8H
	DW	076f3H
	DW	04639H
	DB	09bH
	DB	0e0H
	DB	028H
	DB	0ebH
	DB	043H
	DB	0a6H
	DB	07aH
	DB	02eH
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_HEVC_VLD_MAIN
CONST	SEGMENT
_D3D11_DECODER_PROFILE_HEVC_VLD_MAIN DD 05b11d51bH
	DW	02f4cH
	DW	04452H
	DB	0bcH
	DB	0c3H
	DB	09H
	DB	0f2H
	DB	0a1H
	DB	016H
	DB	0cH
	DB	0c0H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat64bppBGRAFixedPoint
CONST	SEGMENT
_GUID_WICPixelFormat64bppBGRAFixedPoint DD 0356de33cH
	DW	054d2H
	DW	04a23H
	DB	0bbH
	DB	04H
	DB	09bH
	DB	07bH
	DB	0f9H
	DB	0b1H
	DB	0d4H
	DB	02dH
CONST	ENDS
;	COMDAT _IID_ID3D11BlendState1
CONST	SEGMENT
_IID_ID3D11BlendState1 DD 0cc86fabeH
	DW	0da55H
	DW	0401dH
	DB	085H
	DB	0e7H
	DB	0e3H
	DB	0c9H
	DB	0deH
	DB	028H
	DB	077H
	DB	0e9H
CONST	ENDS
;	COMDAT ??_R0H@8
data$r	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
data$r	ENDS
;	COMDAT _GUID_WICPixelFormat64bppBGRA
CONST	SEGMENT
_GUID_WICPixelFormat64bppBGRA DD 01562ff7cH
	DW	0d352H
	DW	046f9H
	DB	097H
	DB	09eH
	DB	042H
	DB	097H
	DB	06bH
	DB	079H
	DB	022H
	DB	046H
CONST	ENDS
;	COMDAT _IID_ID3D10Debug
CONST	SEGMENT
_IID_ID3D10Debug DD 09b7e4e01H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _CLSID_WICFormatConverterHighColor
CONST	SEGMENT
_CLSID_WICFormatConverterHighColor DD 0ac75d454H
	DW	09f37H
	DW	048f8H
	DB	0b9H
	DB	072H
	DB	04eH
	DB	019H
	DB	0bcH
	DB	085H
	DB	060H
	DB	011H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_WMV9_IDCT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_WMV9_IDCT DD 01b81be94H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _GUID_VendorMicrosoft
CONST	SEGMENT
_GUID_VendorMicrosoft DD 0f0e749caH
	DW	0edefH
	DW	04589H
	DB	0a7H
	DB	03aH
	DB	0eeH
	DB	0eH
	DB	062H
	DB	06aH
	DB	02aH
	DB	02bH
CONST	ENDS
;	COMDAT _IID_ID3D11DepthStencilState
CONST	SEGMENT
_IID_ID3D11DepthStencilState DD 03823efbH
	DW	08d8fH
	DW	04e1cH
	DB	09aH
	DB	0a2H
	DB	0f6H
	DB	04bH
	DB	0b2H
	DB	0cbH
	DB	0fdH
	DB	0f1H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_VC1_D2010
CONST	SEGMENT
_D3D11_DECODER_PROFILE_VC1_D2010 DD 01b81bea4H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _IID_IDXGIOutput
CONST	SEGMENT
_IID_IDXGIOutput DD 0ae02eedbH
	DW	0c735H
	DW	04690H
	DB	08dH
	DB	052H
	DB	05aH
	DB	08dH
	DB	0c2H
	DB	02H
	DB	013H
	DB	0aaH
CONST	ENDS
;	COMDAT _IID_ID3D10StateBlock
CONST	SEGMENT
_IID_ID3D10StateBlock DD 0803425aH
	DW	057f5H
	DW	04dd6H
	DB	094H
	DB	065H
	DB	0a8H
	DB	075H
	DB	070H
	DB	083H
	DB	04aH
	DB	08H
CONST	ENDS
;	COMDAT _IID_ID3D11View
CONST	SEGMENT
_IID_ID3D11View DD 0839d1216H
	DW	0bb2eH
	DW	0412bH
	DB	0b7H
	DB	0f4H
	DB	0a9H
	DB	0dbH
	DB	0ebH
	DB	0e0H
	DB	08eH
	DB	0d1H
CONST	ENDS
;	COMDAT _IID_ID3D11InfoQueue
CONST	SEGMENT
_IID_ID3D11InfoQueue DD 06543dbb6H
	DW	01b48H
	DW	042f5H
	DB	0abH
	DB	082H
	DB	0e9H
	DB	07eH
	DB	0c7H
	DB	043H
	DB	026H
	DB	0f6H
CONST	ENDS
;	COMDAT _IID_ID3D10ShaderResourceView
CONST	SEGMENT
_IID_ID3D10ShaderResourceView DD 09b7e4c07H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat64bpp3ChannelsAlpha
CONST	SEGMENT
_GUID_WICPixelFormat64bpp3ChannelsAlpha DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	034H
CONST	ENDS
;	COMDAT _CLSID_WICJpegEncoder
CONST	SEGMENT
_CLSID_WICJpegEncoder DD 01a34f5c1H
	DW	04a5aH
	DW	046dcH
	DB	0b6H
	DB	044H
	DB	01fH
	DB	045H
	DB	067H
	DB	0e7H
	DB	0a6H
	DB	076H
CONST	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT _IID_ID3D10EffectScalarVariable
CONST	SEGMENT
_IID_ID3D10EffectScalarVariable DD 0e48f7bH
	DW	0d2c8H
	DW	049e8H
	DB	0a8H
	DB	06cH
	DB	02H
	DB	02dH
	DB	0eeH
	DB	053H
	DB	043H
	DB	01fH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat32bppRGBA1010102XR
CONST	SEGMENT
_GUID_WICPixelFormat32bppRGBA1010102XR DD 0de6b9aH
	DW	0c101H
	DW	0434bH
	DB	0b5H
	DB	02H
	DB	0d0H
	DB	016H
	DB	05eH
	DB	0e1H
	DB	012H
	DB	02cH
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_WMV8_POSTPROC
CONST	SEGMENT
_D3D11_DECODER_PROFILE_WMV8_POSTPROC DD 01b81be80H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _IID_ID3D11DeviceChild
CONST	SEGMENT
_IID_ID3D11DeviceChild DD 01841e5c8H
	DW	016b0H
	DW	0489bH
	DB	0bcH
	DB	0c8H
	DB	044H
	DB	0cfH
	DB	0b0H
	DB	0d5H
	DB	0deH
	DB	0aeH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat80bpp5Channels
CONST	SEGMENT
_GUID_WICPixelFormat80bpp5Channels DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	028H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat32bppPBGRA
CONST	SEGMENT
_GUID_WICPixelFormat32bppPBGRA DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	010H
CONST	ENDS
;	COMDAT _DXGI_DEBUG_D3D11
CONST	SEGMENT
_DXGI_DEBUG_D3D11 DD 04b99317bH
	DW	0ac39H
	DW	04aa6H
	DB	0bbH
	DB	0bH
	DB	0baH
	DB	0a0H
	DB	047H
	DB	084H
	DB	079H
	DB	08fH
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflectionVariable
CONST	SEGMENT
_IID_ID3D11ShaderReflectionVariable DD 051f23923H
	DW	0f3e5H
	DW	04bd1H
	DB	091H
	DB	0cbH
	DB	060H
	DB	061H
	DB	077H
	DB	0d8H
	DB	0dbH
	DB	04cH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat64bppRGBAFixedPoint
CONST	SEGMENT
_GUID_WICPixelFormat64bppRGBAFixedPoint DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	01dH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat32bppGrayFloat
CONST	SEGMENT
_GUID_WICPixelFormat32bppGrayFloat DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	011H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_OUTPUT_ID
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_OUTPUT_ID DD 0839ddca3H
	DW	09b4eH
	DW	041e4H
	DB	0b0H
	DB	053H
	DB	089H
	DB	02bH
	DB	0d2H
	DB	0a1H
	DB	01eH
	DB	0e7H
CONST	ENDS
;	COMDAT _CLSID_WICPngDecoder2
CONST	SEGMENT
_CLSID_WICPngDecoder2 DD 0e018945bH
	DW	0aa86H
	DW	04008H
	DB	09bH
	DB	0d4H
	DB	067H
	DB	077H
	DB	0a1H
	DB	0e4H
	DB	0cH
	DB	011H
CONST	ENDS
;	COMDAT _IID_ID3D10ShaderReflectionVariable
CONST	SEGMENT
_IID_ID3D10ShaderReflectionVariable DD 01bf63c95H
	DW	02650H
	DW	0405dH
	DB	099H
	DB	0c1H
	DB	036H
	DB	036H
	DB	0bdH
	DB	01dH
	DB	0a0H
	DB	0a1H
CONST	ENDS
;	COMDAT _CLSID_WICDdsEncoder
CONST	SEGMENT
_CLSID_WICDdsEncoder DD 0a61dde94H
	DW	066ceH
	DW	04ac1H
	DB	088H
	DB	01bH
	DB	071H
	DB	068H
	DB	05H
	DB	088H
	DB	089H
	DB	05eH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat32bppPRGBA
CONST	SEGMENT
_GUID_WICPixelFormat32bppPRGBA DD 03cc4a650H
	DW	0a527H
	DW	04d37H
	DB	0a9H
	DB	016H
	DB	031H
	DB	042H
	DB	0c7H
	DB	0ebH
	DB	0edH
	DB	0baH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat112bpp6ChannelsAlpha
CONST	SEGMENT
_GUID_WICPixelFormat112bpp6ChannelsAlpha DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	037H
CONST	ENDS
;	COMDAT _IID_ID3D10Texture3D
CONST	SEGMENT
_IID_ID3D10Texture3D DD 09b7e4c05H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10InputLayout
CONST	SEGMENT
_IID_ID3D10InputLayout DD 09b7e4c0bH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat8bppAlpha
CONST	SEGMENT
_GUID_WICPixelFormat8bppAlpha DD 0e6cd0116H
	DW	0eebaH
	DW	04161H
	DB	0aaH
	DB	085H
	DB	027H
	DB	0ddH
	DB	09fH
	DB	0b3H
	DB	0a8H
	DB	095H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat32bppBGR101010
CONST	SEGMENT
_GUID_WICPixelFormat32bppBGR101010 DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	014H
CONST	ENDS
;	COMDAT _IID_IDXGIFactory1
CONST	SEGMENT
_IID_IDXGIFactory1 DD 0770aae78H
	DW	0f26fH
	DW	04dbaH
	DB	0a8H
	DB	029H
	DB	025H
	DB	03cH
	DB	083H
	DB	0d1H
	DB	0b3H
	DB	087H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat16bppBGRA5551
CONST	SEGMENT
_GUID_WICPixelFormat16bppBGRA5551 DD 05ec7c2bH
	DW	0f1e6H
	DW	04961H
	DB	0adH
	DB	046H
	DB	0e1H
	DB	0ccH
	DB	081H
	DB	0aH
	DB	087H
	DB	0d2H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat128bppPRGBAFloat
CONST	SEGMENT
_GUID_WICPixelFormat128bppPRGBAFloat DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	01aH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat128bppRGBAFixedPoint
CONST	SEGMENT
_GUID_WICPixelFormat128bppRGBAFixedPoint DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	01eH
CONST	ENDS
;	COMDAT _IID_ID3D11DeviceContext1
CONST	SEGMENT
_IID_ID3D11DeviceContext1 DD 0bb2c6faaH
	DW	0b5fbH
	DW	04082H
	DB	08eH
	DB	06bH
	DB	038H
	DB	08bH
	DB	08cH
	DB	0faH
	DB	090H
	DB	0e1H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat48bpp6Channels
CONST	SEGMENT
_GUID_WICPixelFormat48bpp6Channels DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	023H
CONST	ENDS
;	COMDAT _IID_ID3D11Predicate
CONST	SEGMENT
_IID_ID3D11Predicate DD 09eb576ddH
	DW	09f77H
	DW	04d86H
	DB	081H
	DB	0aaH
	DB	08bH
	DB	0abH
	DB	05fH
	DB	0e4H
	DB	090H
	DB	0e2H
CONST	ENDS
;	COMDAT _CLSID_WICTiffEncoder
CONST	SEGMENT
_CLSID_WICTiffEncoder DD 0131be10H
	DW	02001H
	DW	04c5fH
	DB	0a9H
	DB	0b0H
	DB	0ccH
	DB	088H
	DB	0faH
	DB	0b6H
	DB	04cH
	DB	0e8H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT DD 0f9aaccbbH
	DW	0c2b6H
	DW	04cfcH
	DB	087H
	DB	079H
	DB	057H
	DB	07H
	DB	0b1H
	DB	076H
	DB	05H
	DB	052H
CONST	ENDS
;	COMDAT _CATID_WICPixelFormats
CONST	SEGMENT
_CATID_WICPixelFormats DD 02b46e70fH
	DW	0cda7H
	DW	0473eH
	DB	089H
	DB	0f6H
	DB	0dcH
	DB	096H
	DB	030H
	DB	0a2H
	DB	039H
	DB	0bH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat144bpp8ChannelsAlpha
CONST	SEGMENT
_GUID_WICPixelFormat144bpp8ChannelsAlpha DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	039H
CONST	ENDS
;	COMDAT _CLSID_WICImagingFactory
CONST	SEGMENT
_CLSID_WICImagingFactory DD 0cacaf262H
	DW	09370H
	DW	04615H
	DB	0a1H
	DB	03bH
	DB	09fH
	DB	055H
	DB	039H
	DB	0daH
	DB	04cH
	DB	0aH
CONST	ENDS
;	COMDAT _IID_ID3D10EffectShaderVariable
CONST	SEGMENT
_IID_ID3D10EffectShaderVariable DD 080849279H
	DW	0c799H
	DW	04797H
	DB	08cH
	DB	033H
	DB	04H
	DB	07H
	DB	0a0H
	DB	07dH
	DB	09eH
	DB	06H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG2_IDCT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG2_IDCT DD 0bf22ad00H
	DW	03eaH
	DW	04690H
	DB	080H
	DB	077H
	DB	047H
	DB	033H
	DB	046H
	DB	020H
	DB	09bH
	DB	07eH
CONST	ENDS
;	COMDAT _CATID_WICFormatConverters
CONST	SEGMENT
_CATID_WICFormatConverters DD 07835eae8H
	DW	0bf14H
	DW	049d1H
	DB	093H
	DB	0ceH
	DB	053H
	DB	03aH
	DB	040H
	DB	07bH
	DB	022H
	DB	048H
CONST	ENDS
;	COMDAT _IID_IDXGIOutputDuplication
CONST	SEGMENT
_IID_IDXGIOutputDuplication DD 0191cfac3H
	DW	0a341H
	DW	0470dH
	DB	0b2H
	DB	06eH
	DB	0a8H
	DB	064H
	DB	0f4H
	DB	028H
	DB	031H
	DB	09cH
CONST	ENDS
;	COMDAT _GUID_ContainerFormatPng
CONST	SEGMENT
_GUID_ContainerFormatPng DD 01b7cfaf4H
	DW	0713fH
	DW	0473cH
	DB	0bbH
	DB	0cdH
	DB	061H
	DB	037H
	DB	042H
	DB	05fH
	DB	0aeH
	DB	0afH
CONST	ENDS
;	COMDAT _CLSID_WICFormatConverterWMPhoto
CONST	SEGMENT
_CLSID_WICFormatConverterWMPhoto DD 09cb5172bH
	DW	0d600H
	DW	046baH
	DB	0abH
	DB	077H
	DB	077H
	DB	0bbH
	DB	07eH
	DB	03aH
	DB	00H
	DB	0d9H
CONST	ENDS
;	COMDAT _IID_ID3D11LinkingNode
CONST	SEGMENT
_IID_ID3D11LinkingNode DD 0d80dd70cH
	DW	08d2fH
	DW	04751H
	DB	094H
	DB	0a1H
	DB	03H
	DB	0c7H
	DB	09bH
	DB	035H
	DB	056H
	DB	0dbH
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE DD 0ec1791c7H
	DW	0dad3H
	DW	04f15H
	DB	09eH
	DB	0c3H
	DB	0faH
	DB	0a9H
	DB	03dH
	DB	060H
	DB	0d4H
	DB	0f0H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat112bpp7Channels
CONST	SEGMENT
_GUID_WICPixelFormat112bpp7Channels DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	02aH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat40bppCMYKAlpha
CONST	SEGMENT
_GUID_WICPixelFormat40bppCMYKAlpha DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	02cH
CONST	ENDS
;	COMDAT _IID_ID3D10EffectPass
CONST	SEGMENT
_IID_ID3D10EffectPass DD 05cfbeb89H
	DW	01a06H
	DW	046e0H
	DB	0b2H
	DB	082H
	DB	0e3H
	DB	0f9H
	DB	0bfH
	DB	0a3H
	DB	06aH
	DB	054H
CONST	ENDS
;	COMDAT _IID_ID3D11Asynchronous
CONST	SEGMENT
_IID_ID3D11Asynchronous DD 04b35d0cdH
	DW	01e15H
	DW	04258H
	DB	09cH
	DB	098H
	DB	01bH
	DB	013H
	DB	033H
	DB	0f6H
	DB	0ddH
	DB	03bH
CONST	ENDS
;	COMDAT _IID_ID3D11PixelShader
CONST	SEGMENT
_IID_ID3D11PixelShader DD 0ea82e40dH
	DW	051dcH
	DW	04f33H
	DB	093H
	DB	0d4H
	DB	0dbH
	DB	07cH
	DB	091H
	DB	025H
	DB	0aeH
	DB	08cH
CONST	ENDS
;	COMDAT _IID_ID3D11Counter
CONST	SEGMENT
_IID_ID3D11Counter DD 06e8c49fbH
	DW	0a371H
	DW	04770H
	DB	0b4H
	DB	040H
	DB	029H
	DB	08H
	DB	060H
	DB	022H
	DB	0b7H
	DB	041H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat64bppRGBHalf
CONST	SEGMENT
_GUID_WICPixelFormat64bppRGBHalf DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	042H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_VC1_POSTPROC
CONST	SEGMENT
_D3D11_DECODER_PROFILE_VC1_POSTPROC DD 01b81bea0H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _GUID_DeviceType
CONST	SEGMENT
_GUID_DeviceType DD 0d722fb4dH
	DW	07a68H
	DW	0437aH
	DB	0b2H
	DB	0cH
	DB	058H
	DB	04H
	DB	0eeH
	DB	024H
	DB	094H
	DB	0a6H
CONST	ENDS
;	COMDAT _GUID_ContainerFormatTiff
CONST	SEGMENT
_GUID_ContainerFormatTiff DD 0163bcc30H
	DW	0e2e9H
	DW	04f0bH
	DB	096H
	DB	01dH
	DB	0a3H
	DB	0e9H
	DB	0fdH
	DB	0b7H
	DB	088H
	DB	0a3H
CONST	ENDS
;	COMDAT _IID_ID3D10GeometryShader
CONST	SEGMENT
_IID_ID3D10GeometryShader DD 06316be88H
	DW	054cdH
	DW	04040H
	DB	0abH
	DB	044H
	DB	020H
	DB	046H
	DB	01bH
	DB	0c8H
	DB	01fH
	DB	068H
CONST	ENDS
;	COMDAT _IID_IDXGIAdapter
CONST	SEGMENT
_IID_IDXGIAdapter DD 02411e7e1H
	DW	012acH
	DW	04ccfH
	DB	0bdH
	DB	014H
	DB	097H
	DB	098H
	DB	0e8H
	DB	053H
	DB	04dH
	DB	0c0H
CONST	ENDS
;	COMDAT _IID_IDXGIKeyedMutex
CONST	SEGMENT
_IID_IDXGIKeyedMutex DD 09d8e1289H
	DW	0d7b3H
	DW	0465fH
	DB	081H
	DB	026H
	DB	025H
	DB	0eH
	DB	034H
	DB	09aH
	DB	0f8H
	DB	05dH
CONST	ENDS
;	COMDAT _IID_ID3D11Device
CONST	SEGMENT
_IID_ID3D11Device DD 0db6f6ddbH
	DW	0ac77H
	DW	04e88H
	DB	082H
	DB	053H
	DB	081H
	DB	09dH
	DB	0f9H
	DB	0bbH
	DB	0f1H
	DB	040H
CONST	ENDS
;	COMDAT _IID_ID3D11Texture1D
CONST	SEGMENT
_IID_ID3D11Texture1D DD 0f8fb5c27H
	DW	0c6b3H
	DW	04f75H
	DB	0a4H
	DB	0c8H
	DB	043H
	DB	09aH
	DB	0f2H
	DB	0efH
	DB	056H
	DB	04cH
CONST	ENDS
;	COMDAT _CLSID_WICGifDecoder
CONST	SEGMENT
_CLSID_WICGifDecoder DD 0381dda3cH
	DW	09ce9H
	DW	04834H
	DB	0a2H
	DB	03eH
	DB	01fH
	DB	098H
	DB	0f8H
	DB	0fcH
	DB	052H
	DB	0beH
CONST	ENDS
;	COMDAT _IID_ID3D11DeviceContext
CONST	SEGMENT
_IID_ID3D11DeviceContext DD 0c0bfa96cH
	DW	0e089H
	DW	044fbH
	DB	08eH
	DB	0afH
	DB	026H
	DB	0f8H
	DB	079H
	DB	061H
	DB	090H
	DB	0daH
CONST	ENDS
;	COMDAT _IID_ID3D10PixelShader
CONST	SEGMENT
_IID_ID3D10PixelShader DD 04968b601H
	DW	09d00H
	DW	04cdeH
	DB	083H
	DB	046H
	DB	08eH
	DB	07fH
	DB	067H
	DB	058H
	DB	019H
	DB	0b6H
CONST	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
xdata$x	ENDS
;	COMDAT _IID_ID3D11RasterizerState1
CONST	SEGMENT
_IID_ID3D11RasterizerState1 DD 01217d7a6H
	DW	05039H
	DW	0418cH
	DB	0b0H
	DB	042H
	DB	09cH
	DB	0beH
	DB	025H
	DB	06aH
	DB	0fdH
	DB	06eH
CONST	ENDS
;	COMDAT _CLSID_WICBmpDecoder
CONST	SEGMENT
_CLSID_WICBmpDecoder DD 06b462062H
	DW	07cbfH
	DW	0400dH
	DB	09fH
	DB	0dbH
	DB	081H
	DB	03dH
	DB	0d1H
	DB	0fH
	DB	027H
	DB	078H
CONST	ENDS
;	COMDAT _CLSID_WICPngEncoder
CONST	SEGMENT
_CLSID_WICPngEncoder DD 027949969H
	DW	0876aH
	DW	041d7H
	DB	094H
	DB	047H
	DB	056H
	DB	08fH
	DB	06aH
	DB	035H
	DB	0a4H
	DB	0dcH
CONST	ENDS
;	COMDAT _GUID_ContainerFormatBmp
CONST	SEGMENT
_GUID_ContainerFormatBmp DD 0af1d87eH
	DW	0fcfeH
	DW	04188H
	DB	0bdH
	DB	0ebH
	DB	0a7H
	DB	090H
	DB	064H
	DB	071H
	DB	0cbH
	DB	0e3H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat32bppRGBE
CONST	SEGMENT
_GUID_WICPixelFormat32bppRGBE DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	03dH
CONST	ENDS
;	COMDAT _D3D11_CRYPTO_TYPE_AES128_CTR
CONST	SEGMENT
_D3D11_CRYPTO_TYPE_AES128_CTR DD 09b6bd711H
	DW	04f74H
	DW	041c9H
	DB	09eH
	DB	07bH
	DB	0bH
	DB	0e2H
	DB	0d7H
	DB	0d9H
	DB	03bH
	DB	04fH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat32bpp4Channels
CONST	SEGMENT
_GUID_WICPixelFormat32bpp4Channels DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	021H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat96bpp6Channels
CONST	SEGMENT
_GUID_WICPixelFormat96bpp6Channels DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	029H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC DD 0ab998b5bH
	DW	04258H
	DW	044a9H
	DB	09fH
	DB	0ebH
	DB	094H
	DB	0e5H
	DB	097H
	DB	0a6H
	DB	0baH
	DB	0aeH
CONST	ENDS
;	COMDAT __TI2PAD
xdata$x	SEGMENT
__TI2PAD DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2PAD
xdata$x	ENDS
;	COMDAT _IID_ID3D11CommandList
CONST	SEGMENT
_IID_ID3D11CommandList DD 0a24bc4d1H
	DW	0769eH
	DW	043f7H
	DB	080H
	DB	013H
	DB	098H
	DB	0ffH
	DB	056H
	DB	06cH
	DB	018H
	DB	0e2H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_PROTECTION
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_PROTECTION DD 0a84eb584H
	DW	0c495H
	DW	048aaH
	DB	0b9H
	DB	04dH
	DB	08bH
	DB	0d2H
	DB	0d6H
	DB	0fbH
	DB	0ceH
	DB	05H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectShaderResourceVariable
CONST	SEGMENT
_IID_ID3D10EffectShaderResourceVariable DD 0c0a7157bH
	DW	0d872H
	DW	04b1dH
	DB	080H
	DB	073H
	DB	0efH
	DB	0c2H
	DB	0acH
	DB	0d4H
	DB	0b1H
	DB	0fcH
CONST	ENDS
;	COMDAT _IID_IDXGIDevice2
CONST	SEGMENT
_IID_IDXGIDevice2 DD 05008617H
	DW	0fbfdH
	DW	04051H
	DB	0a7H
	DB	090H
	DB	014H
	DB	048H
	DB	084H
	DB	0b4H
	DB	0f6H
	DB	0a9H
CONST	ENDS
;	COMDAT _CLSID_WICBmpEncoder
CONST	SEGMENT
_CLSID_WICBmpEncoder DD 069be8bb4H
	DW	0d66dH
	DW	047c8H
	DB	086H
	DB	05aH
	DB	0edH
	DB	015H
	DB	089H
	DB	043H
	DB	037H
	DB	082H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat24bppBGR
CONST	SEGMENT
_GUID_WICPixelFormat24bppBGR DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	0cH
CONST	ENDS
;	COMDAT _IID_ID3D11VideoProcessorOutputView
CONST	SEGMENT
_IID_ID3D11VideoProcessorOutputView DD 0a048285eH
	DW	025a9H
	DW	04527H
	DB	0bdH
	DB	093H
	DB	0d6H
	DB	08bH
	DB	068H
	DB	0c4H
	DB	042H
	DB	054H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectRenderTargetViewVariable
CONST	SEGMENT
_IID_ID3D10EffectRenderTargetViewVariable DD 028ca0cc3H
	DW	0c2c9H
	DW	040bbH
	DB	0b5H
	DB	07fH
	DB	067H
	DB	0b7H
	DB	037H
	DB	012H
	DB	02bH
	DB	017H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat40bpp4ChannelsAlpha
CONST	SEGMENT
_GUID_WICPixelFormat40bpp4ChannelsAlpha DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	02fH
CONST	ENDS
;	COMDAT _IID_IDXGIAdapter2
CONST	SEGMENT
_IID_IDXGIAdapter2 DD 0aa1ae0aH
	DW	0fa0eH
	DW	04b84H
	DB	086H
	DB	044H
	DB	0e0H
	DB	05fH
	DB	0f8H
	DB	0e5H
	DB	0acH
	DB	0b5H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderResourceView
CONST	SEGMENT
_IID_ID3D11ShaderResourceView DD 0b0e06fe0H
	DW	08192H
	DW	04e1aH
	DB	0b1H
	DB	0caH
	DB	036H
	DB	0d7H
	DB	041H
	DB	047H
	DB	010H
	DB	0b2H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectPool
CONST	SEGMENT
_IID_ID3D10EffectPool DD 09537ab04H
	DW	03250H
	DW	0412eH
	DB	082H
	DB	013H
	DB	0fcH
	DB	0d2H
	DB	0f8H
	DB	067H
	DB	079H
	DB	033H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat96bpp5ChannelsAlpha
CONST	SEGMENT
_GUID_WICPixelFormat96bpp5ChannelsAlpha DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	036H
CONST	ENDS
;	COMDAT _IID_ID3D11RefDefaultTrackingOptions
CONST	SEGMENT
_IID_ID3D11RefDefaultTrackingOptions DD 03916615H
	DW	0c644H
	DW	0418cH
	DB	09bH
	DB	0f4H
	DB	075H
	DB	0dbH
	DB	05bH
	DB	0e6H
	DB	03cH
	DB	0a0H
CONST	ENDS
;	COMDAT _GUID_ContainerFormatWmp
CONST	SEGMENT
_GUID_ContainerFormatWmp DD 057a37caaH
	DW	0367aH
	DW	04540H
	DB	091H
	DB	06bH
	DB	0f1H
	DB	083H
	DB	0c5H
	DB	09H
	DB	03aH
	DB	04bH
CONST	ENDS
;	COMDAT _IID_ID3D10SwitchToRef
CONST	SEGMENT
_IID_ID3D10SwitchToRef DD 09b7e4e02H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat80bppCMYKAlpha
CONST	SEGMENT
_GUID_WICPixelFormat80bppCMYKAlpha DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	02dH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat128bppRGBFloat
CONST	SEGMENT
_GUID_WICPixelFormat128bppRGBFloat DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	01bH
CONST	ENDS
;	COMDAT _IID_ID3D10DepthStencilView
CONST	SEGMENT
_IID_ID3D10DepthStencilView DD 09b7e4c09H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _CLSID_WICImagingFactory1
CONST	SEGMENT
_CLSID_WICImagingFactory1 DD 0cacaf262H
	DW	09370H
	DW	04615H
	DB	0a1H
	DB	03bH
	DB	09fH
	DB	055H
	DB	039H
	DB	0daH
	DB	04cH
	DB	0aH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat128bppRGBAFloat
CONST	SEGMENT
_GUID_WICPixelFormat128bppRGBAFloat DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	019H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_VC1_IDCT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_VC1_IDCT DD 01b81bea2H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectRasterizerVariable
CONST	SEGMENT
_IID_ID3D10EffectRasterizerVariable DD 021af9f0eH
	DW	04d94H
	DW	04ea9H
	DB	097H
	DB	085H
	DB	02cH
	DB	0b7H
	DB	06bH
	DB	08cH
	DB	0bH
	DB	034H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_WMV9_MOCOMP
CONST	SEGMENT
_D3D11_DECODER_PROFILE_WMV9_MOCOMP DD 01b81be91H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectConstantBuffer
CONST	SEGMENT
_IID_ID3D10EffectConstantBuffer DD 056648f4dH
	DW	0cc8bH
	DW	04444H
	DB	0a5H
	DB	0adH
	DB	0b5H
	DB	0a3H
	DB	0d7H
	DB	06eH
	DB	091H
	DB	0b3H
CONST	ENDS
;	COMDAT _IID_ID3D11FunctionReflection
CONST	SEGMENT
_IID_ID3D11FunctionReflection DD 0207bcecbH
	DW	0d683H
	DW	04a06H
	DB	0a8H
	DB	0a3H
	DB	09bH
	DB	014H
	DB	09bH
	DB	09fH
	DB	073H
	DB	0a4H
CONST	ENDS
;	COMDAT _IID_ID3D11ClassInstance
CONST	SEGMENT
_IID_ID3D11ClassInstance DD 0a6cd7faaH
	DW	0b0b7H
	DW	04a2fH
	DB	094H
	DB	036H
	DB	086H
	DB	062H
	DB	0a6H
	DB	057H
	DB	097H
	DB	0cbH
CONST	ENDS
;	COMDAT _IID_ID3D10EffectType
CONST	SEGMENT
_IID_ID3D10EffectType DD 04e9e1ddcH
	DW	0cd9dH
	DW	04772H
	DB	0a8H
	DB	037H
	DB	00H
	DB	018H
	DB	0bH
	DB	09bH
	DB	088H
	DB	0fdH
CONST	ENDS
;	COMDAT ??_R0PAD@8
data$r	SEGMENT
??_R0PAD@8 DD	FLAT:??_7type_info@@6B@			; char * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAD', 00H
data$r	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION DD 02634499eH
	DW	0d018H
	DW	04d74H
	DB	0acH
	DB	017H
	DB	07fH
	DB	072H
	DB	040H
	DB	059H
	DB	052H
	DB	08dH
CONST	ENDS
;	COMDAT _IID_ID3D11Device1
CONST	SEGMENT
_IID_ID3D11Device1 DD 0a04bfb29H
	DW	08efH
	DW	043d6H
	DB	0a4H
	DB	09cH
	DB	0a9H
	DB	0bdH
	DB	0bdH
	DB	0cbH
	DB	0e6H
	DB	086H
CONST	ENDS
;	COMDAT _IID_ID3D10InfoQueue
CONST	SEGMENT
_IID_ID3D10InfoQueue DD 01b940b17H
	DW	02642H
	DW	04d1fH
	DB	0abH
	DB	01fH
	DB	0b9H
	DB	09bH
	DB	0adH
	DB	0cH
	DB	039H
	DB	05fH
CONST	ENDS
;	COMDAT _IID_ID3D11Linker
CONST	SEGMENT
_IID_ID3D11Linker DD 059a6cd0eH
	DW	0e10dH
	DW	04c1fH
	DB	088H
	DB	0c0H
	DB	063H
	DB	0abH
	DB	0a1H
	DB	0daH
	DB	0f3H
	DB	0eH
CONST	ENDS
;	COMDAT _IID_ID3D10Multithread
CONST	SEGMENT
_IID_ID3D10Multithread DD 09b7e4e00H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D11VideoContext
CONST	SEGMENT
_IID_ID3D11VideoContext DD 061f21c45H
	DW	03c0eH
	DW	04a74H
	DB	09cH
	DB	0eaH
	DB	067H
	DB	010H
	DB	0dH
	DB	09aH
	DB	0d5H
	DB	0e4H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG2_VLD
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG2_VLD DD 0ee27417fH
	DW	05e28H
	DW	04e65H
	DB	0beH
	DB	0eaH
	DB	01dH
	DB	026H
	DB	0b5H
	DB	08H
	DB	0adH
	DB	0c9H
CONST	ENDS
;	COMDAT _CATID_WICMetadataWriter
CONST	SEGMENT
_CATID_WICMetadataWriter DD 0abe3b9a4H
	DW	0257dH
	DW	04b97H
	DB	0bdH
	DB	01aH
	DB	029H
	DB	04aH
	DB	0f4H
	DB	096H
	DB	022H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_ID3DUserDefinedAnnotation
CONST	SEGMENT
_IID_ID3DUserDefinedAnnotation DD 0b2daad8bH
	DW	03d4H
	DW	04dbfH
	DB	095H
	DB	0ebH
	DB	032H
	DB	0abH
	DB	04bH
	DB	063H
	DB	0d0H
	DB	0abH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat16bppGray
CONST	SEGMENT
_GUID_WICPixelFormat16bppGray DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	0bH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat64bppRGBA
CONST	SEGMENT
_GUID_WICPixelFormat64bppRGBA DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	016H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat128bpp8Channels
CONST	SEGMENT
_GUID_WICPixelFormat128bpp8Channels DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	02bH
CONST	ENDS
;	COMDAT _IID_ID3D10Buffer
CONST	SEGMENT
_IID_ID3D10Buffer DD 09b7e4c02H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _CLSID_WICImagingCategories
CONST	SEGMENT
_CLSID_WICImagingCategories DD 0fae3d380H
	DW	0fea4H
	DW	04623H
	DB	08cH
	DB	075H
	DB	0c6H
	DB	0b6H
	DB	011H
	DB	010H
	DB	0b6H
	DB	081H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectBlendVariable
CONST	SEGMENT
_IID_ID3D10EffectBlendVariable DD 01fcd2294H
	DW	0df6dH
	DW	04eaeH
	DB	086H
	DB	0b3H
	DB	0eH
	DB	091H
	DB	060H
	DB	0cfH
	DB	0b0H
	DB	07bH
CONST	ENDS
;	COMDAT _IID_ID3D10EffectDepthStencilVariable
CONST	SEGMENT
_IID_ID3D10EffectDepthStencilVariable DD 0af482368H
	DW	0330aH
	DW	046a5H
	DB	09aH
	DB	05cH
	DB	01H
	DB	0c7H
	DB	01aH
	DB	0f2H
	DB	04cH
	DB	08dH
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG2and1_VLD
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG2and1_VLD DD 086695f12H
	DW	0340eH
	DW	04f04H
	DB	09fH
	DB	0d3H
	DB	092H
	DB	053H
	DB	0ddH
	DB	032H
	DB	074H
	DB	060H
CONST	ENDS
;	COMDAT _IID_ID3D11ClassLinkage
CONST	SEGMENT
_IID_ID3D11ClassLinkage DD 0ddf57cbaH
	DW	09543H
	DW	046e4H
	DB	0a1H
	DB	02bH
	DB	0f2H
	DB	07H
	DB	0a0H
	DB	0feH
	DB	07fH
	DB	0edH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat48bppBGR
CONST	SEGMENT
_GUID_WICPixelFormat48bppBGR DD 0e605a384H
	DW	0b468H
	DW	046ceH
	DB	0bbH
	DB	02eH
	DB	036H
	DB	0f1H
	DB	080H
	DB	0e6H
	DB	043H
	DB	013H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat64bpp8Channels
CONST	SEGMENT
_GUID_WICPixelFormat64bpp8Channels DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	025H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat80bpp4ChannelsAlpha
CONST	SEGMENT
_GUID_WICPixelFormat80bpp4ChannelsAlpha DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	035H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS DD 0649bbadbH
	DW	0f0f4H
	DW	04639H
	DB	0a1H
	DB	05bH
	DB	024H
	DB	039H
	DB	03fH
	DB	0c3H
	DB	0abH
	DB	0acH
CONST	ENDS
;	COMDAT _IID_ID3D10View
CONST	SEGMENT
_IID_ID3D10View DD 0c902b03fH
	DW	060a7H
	DW	049baH
	DB	099H
	DB	036H
	DB	02aH
	DB	03aH
	DB	0b3H
	DB	07aH
	DB	07eH
	DB	033H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_WMV8_MOCOMP
CONST	SEGMENT
_D3D11_DECODER_PROFILE_WMV8_MOCOMP DD 01b81be81H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _CLSID_WICPngDecoder1
CONST	SEGMENT
_CLSID_WICPngDecoder1 DD 0389ea17bH
	DW	05078H
	DW	04cdeH
	DB	0b6H
	DB	0efH
	DB	025H
	DB	0c1H
	DB	051H
	DB	075H
	DB	0c7H
	DB	051H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat16bppGrayFixedPoint
CONST	SEGMENT
_GUID_WICPixelFormat16bppGrayFixedPoint DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	013H
CONST	ENDS
;	COMDAT _IID_ID3D11Debug
CONST	SEGMENT
_IID_ID3D11Debug DD 079cf2233H
	DW	07536H
	DW	04948H
	DB	09dH
	DB	036H
	DB	01eH
	DB	046H
	DB	092H
	DB	0dcH
	DB	057H
	DB	060H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_WMV9_POSTPROC
CONST	SEGMENT
_D3D11_DECODER_PROFILE_WMV9_POSTPROC DD 01b81be90H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _IID_IDXGIDeviceSubObject
CONST	SEGMENT
_IID_IDXGIDeviceSubObject DD 03d3e0379H
	DW	0f9deH
	DW	04d58H
	DB	0bbH
	DB	06cH
	DB	018H
	DB	0d6H
	DB	029H
	DB	092H
	DB	0f1H
	DB	0a6H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat32bpp3ChannelsAlpha
CONST	SEGMENT
_GUID_WICPixelFormat32bpp3ChannelsAlpha DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	02eH
CONST	ENDS
;	COMDAT _CATID_WICBitmapDecoders
CONST	SEGMENT
_CATID_WICBitmapDecoders DD 07ed96837H
	DW	096f0H
	DW	04812H
	DB	0b2H
	DB	011H
	DB	0f1H
	DB	03cH
	DB	024H
	DB	011H
	DB	07eH
	DB	0d3H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE
CONST	SEGMENT
_D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE DD 06114bdbH
	DW	03523H
	DW	0470aH
	DB	08dH
	DB	0caH
	DB	0fbH
	DB	0c2H
	DB	084H
	DB	051H
	DB	054H
	DB	0f0H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION
CONST	SEGMENT
_D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION DD 06346cc54H
	DW	02cfcH
	DW	04ad4H
	DB	082H
	DB	024H
	DB	0d1H
	DB	058H
	DB	037H
	DB	0deH
	DB	077H
	DB	00H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat64bppRGBFixedPoint
CONST	SEGMENT
_GUID_WICPixelFormat64bppRGBFixedPoint DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	040H
CONST	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT _IID_ID3D10Effect
CONST	SEGMENT
_IID_ID3D10Effect DD 051b0ca8bH
	DW	0ec0bH
	DW	04519H
	DB	087H
	DB	0dH
	DB	08eH
	DB	0e1H
	DB	0cbH
	DB	050H
	DB	017H
	DB	0c7H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflection
CONST	SEGMENT
_IID_ID3D11ShaderReflection DD 08d536ca1H
	DW	0ccaH
	DW	04956H
	DB	0a8H
	DB	037H
	DB	078H
	DB	069H
	DB	063H
	DB	075H
	DB	055H
	DB	084H
CONST	ENDS
;	COMDAT _GUID_ContainerFormatDds
CONST	SEGMENT
_GUID_ContainerFormatDds DD 09967cb95H
	DW	02e85H
	DW	04ac8H
	DB	08cH
	DB	0a2H
	DB	083H
	DB	0d7H
	DB	0ccH
	DB	0d4H
	DB	025H
	DB	0c9H
CONST	ENDS
;	COMDAT _IID_ID3D10ShaderReflection
CONST	SEGMENT
_IID_ID3D10ShaderReflection DD 0d40e20b6H
	DW	0f8f7H
	DW	042adH
	DB	0abH
	DB	020H
	DB	04bH
	DB	0afH
	DB	08fH
	DB	015H
	DB	0dfH
	DB	0aaH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat56bpp6ChannelsAlpha
CONST	SEGMENT
_GUID_WICPixelFormat56bpp6ChannelsAlpha DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	031H
CONST	ENDS
;	COMDAT __CTA2PAD
xdata$x	SEGMENT
__CTA2PAD DD	02H
	DD	FLAT:__CT??_R0PAD@84
	DD	FLAT:__CT??_R0PAX@84
xdata$x	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG2_MOCOMP
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG2_MOCOMP DD 0e6a9f44bH
	DW	061b0H
	DW	04563H
	DB	09eH
	DB	0a4H
	DB	063H
	DB	0d2H
	DB	0a3H
	DB	0c6H
	DB	0feH
	DB	066H
CONST	ENDS
;	COMDAT _CLSID_WICDefaultFormatConverter
CONST	SEGMENT
_CLSID_WICDefaultFormatConverter DD 01a3f11dcH
	DW	0b514H
	DW	04b17H
	DB	08cH
	DB	05fH
	DB	021H
	DB	054H
	DB	051H
	DB	038H
	DB	052H
	DB	0f1H
CONST	ENDS
;	COMDAT _CLSID_WICFormatConverterNChannel
CONST	SEGMENT
_CLSID_WICFormatConverterNChannel DD 0c17cabb2H
	DW	0d4a3H
	DW	047d7H
	DB	0a5H
	DB	057H
	DB	033H
	DB	09bH
	DB	02eH
	DB	0fbH
	DB	0d4H
	DB	0f1H
CONST	ENDS
;	COMDAT _IID_ID3D11VideoDecoderOutputView
CONST	SEGMENT
_IID_ID3D11VideoDecoderOutputView DD 0c2931aeaH
	DW	02a85H
	DW	04f20H
	DB	086H
	DB	0fH
	DB	0fbH
	DB	0a1H
	DB	0fdH
	DB	025H
	DB	06eH
	DB	018H
CONST	ENDS
;	COMDAT _IID_ID3D11Query
CONST	SEGMENT
_IID_ID3D11Query DD 0d6c00747H
	DW	087b7H
	DW	0425eH
	DB	0b8H
	DB	04dH
	DB	044H
	DB	0d1H
	DB	08H
	DB	056H
	DB	0aH
	DB	0fdH
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE
CONST	SEGMENT
_D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE DD 0772d047H
	DW	01b40H
	DW	048e8H
	DB	09cH
	DB	0a6H
	DB	0b5H
	DB	0f5H
	DB	010H
	DB	0deH
	DB	09fH
	DB	01H
CONST	ENDS
;	COMDAT _CLSID_WICImagingFactory2
CONST	SEGMENT
_CLSID_WICImagingFactory2 DD 0317d06e8H
	DW	05f24H
	DW	0433dH
	DB	0bdH
	DB	0f7H
	DB	079H
	DB	0ceH
	DB	068H
	DB	0d8H
	DB	0abH
	DB	0c2H
CONST	ENDS
;	COMDAT _IID_ID3D10ShaderReflection1
CONST	SEGMENT
_IID_ID3D10ShaderReflection1 DD 0c3457783H
	DW	0a846H
	DW	047ceH
	DB	095H
	DB	020H
	DB	0ceH
	DB	0a6H
	DB	0f6H
	DB	06eH
	DB	074H
	DB	047H
CONST	ENDS
;	COMDAT _IID_ID3D11FunctionParameterReflection
CONST	SEGMENT
_IID_ID3D11FunctionParameterReflection DD 042757488H
	DW	0334fH
	DW	047feH
	DB	098H
	DB	02eH
	DB	01aH
	DB	065H
	DB	0d0H
	DB	08cH
	DB	0c4H
	DB	062H
CONST	ENDS
;	COMDAT _IID_IDXGIFactory
CONST	SEGMENT
_IID_IDXGIFactory DD 07b7166ecH
	DW	021c7H
	DW	044aeH
	DB	0b2H
	DB	01aH
	DB	0c9H
	DB	0aeH
	DB	032H
	DB	01aH
	DB	0e3H
	DB	069H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT DD 0d79be8daH
	DW	0cf1H
	DW	04c81H
	DB	0b8H
	DB	02aH
	DB	069H
	DB	0a4H
	DB	0e2H
	DB	036H
	DB	0f4H
	DB	03dH
CONST	ENDS
;	COMDAT _D3D11_KEY_EXCHANGE_RSAES_OAEP
CONST	SEGMENT
_D3D11_KEY_EXCHANGE_RSAES_OAEP DD 0c1949895H
	DW	0d72aH
	DW	04a1dH
	DB	08eH
	DB	05dH
	DB	0edH
	DB	085H
	DB	07dH
	DB	017H
	DB	015H
	DB	020H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat56bpp7Channels
CONST	SEGMENT
_GUID_WICPixelFormat56bpp7Channels DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	024H
CONST	ENDS
;	COMDAT _CLSID_WICJpegDecoder
CONST	SEGMENT
_CLSID_WICJpegDecoder DD 09456a480H
	DW	0e88bH
	DW	043eaH
	DB	09eH
	DB	073H
	DB	0bH
	DB	02dH
	DB	09bH
	DB	071H
	DB	0b1H
	DB	0caH
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_VC1_VLD
CONST	SEGMENT
_D3D11_DECODER_PROFILE_VC1_VLD DD 01b81bea3H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectDepthStencilViewVariable
CONST	SEGMENT
_IID_ID3D10EffectDepthStencilViewVariable DD 03e02c918H
	DW	0cc79H
	DW	04985H
	DB	0b6H
	DB	022H
	DB	02dH
	DB	092H
	DB	0adH
	DB	070H
	DB	016H
	DB	023H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat40bpp5Channels
CONST	SEGMENT
_GUID_WICPixelFormat40bpp5Channels DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	022H
CONST	ENDS
;	COMDAT _IID_ID3D11DomainShader
CONST	SEGMENT
_IID_ID3D11DomainShader DD 0f582c508H
	DW	0f36H
	DW	0490cH
	DB	099H
	DB	077H
	DB	031H
	DB	0eeH
	DB	0ceH
	DB	026H
	DB	08cH
	DB	0faH
CONST	ENDS
;	COMDAT _IID_ID3D10DepthStencilState
CONST	SEGMENT
_IID_ID3D10DepthStencilState DD 02b4b1cc8H
	DW	0a4adH
	DW	041f8H
	DB	083H
	DB	022H
	DB	0caH
	DB	086H
	DB	0fcH
	DB	03eH
	DB	0c6H
	DB	075H
CONST	ENDS
;	COMDAT _CLSID_WICWmpEncoder
CONST	SEGMENT
_CLSID_WICWmpEncoder DD 0ac4ce3cbH
	DW	0e1c1H
	DW	044cdH
	DB	082H
	DB	015H
	DB	05aH
	DB	016H
	DB	065H
	DB	050H
	DB	09eH
	DB	0c2H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat64bpp7ChannelsAlpha
CONST	SEGMENT
_GUID_WICPixelFormat64bpp7ChannelsAlpha DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	032H
CONST	ENDS
;	COMDAT ??_8XQuaternion@Math@@7B@
CONST	SEGMENT
??_8XQuaternion@Math@@7B@ DD 00H			; Math::XQuaternion::`vbtable'
	DD	010H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES DD 06214d9d2H
	DW	0432cH
	DW	04abbH
	DB	09fH
	DB	0ceH
	DB	021H
	DB	06eH
	DB	0eaH
	DB	026H
	DB	09eH
	DB	03bH
CONST	ENDS
;	COMDAT _IID_ID3D10Predicate
CONST	SEGMENT
_IID_ID3D10Predicate DD 09b7e4c10H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectVariable
CONST	SEGMENT
_IID_ID3D10EffectVariable DD 0ae897105H
	DW	0e6H
	DW	045bfH
	DB	0bbH
	DB	08eH
	DB	028H
	DB	01dH
	DB	0d6H
	DB	0dbH
	DB	08eH
	DB	01bH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat1bppIndexed
CONST	SEGMENT
_GUID_WICPixelFormat1bppIndexed DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	01H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat48bppRGBHalf
CONST	SEGMENT
_GUID_WICPixelFormat48bppRGBHalf DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	03bH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat8bppCr
CONST	SEGMENT
_GUID_WICPixelFormat8bppCr DD 0b8145053H
	DW	02116H
	DW	049f0H
	DB	088H
	DB	035H
	DB	0edH
	DB	084H
	DB	04bH
	DB	020H
	DB	05cH
	DB	051H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat8bppY
CONST	SEGMENT
_GUID_WICPixelFormat8bppY DD 091b4db54H
	DW	02df9H
	DW	042f0H
	DB	0b4H
	DB	049H
	DB	029H
	DB	09H
	DB	0bbH
	DB	03dH
	DB	0f8H
	DB	08eH
CONST	ENDS
;	COMDAT _WKPDID_D3DDebugObjectName
CONST	SEGMENT
_WKPDID_D3DDebugObjectName DD 0429b8c22H
	DW	09188H
	DW	04b0cH
	DB	087H
	DB	042H
	DB	0acH
	DB	0b0H
	DB	0bfH
	DB	085H
	DB	0c2H
	DB	00H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat48bpp3Channels
CONST	SEGMENT
_GUID_WICPixelFormat48bpp3Channels DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	026H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat8bppIndexed
CONST	SEGMENT
_GUID_WICPixelFormat8bppIndexed DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	04H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflectionConstantBuffer
CONST	SEGMENT
_IID_ID3D11ShaderReflectionConstantBuffer DD 0eb62d63dH
	DW	093ddH
	DW	04318H
	DB	08aH
	DB	0e8H
	DB	0c6H
	DB	0f8H
	DB	03aH
	DB	0d3H
	DB	071H
	DB	0b8H
CONST	ENDS
;	COMDAT _IID_ID3D10Texture1D
CONST	SEGMENT
_IID_ID3D10Texture1D DD 09b7e4c03H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D10EffectSamplerVariable
CONST	SEGMENT
_IID_ID3D10EffectSamplerVariable DD 06530d5c7H
	DW	07e9H
	DW	04271H
	DB	0a4H
	DB	018H
	DB	0e7H
	DB	0ceH
	DB	04bH
	DB	0d1H
	DB	0e4H
	DB	080H
CONST	ENDS
;	COMDAT _IID_ID3D11DepthStencilView
CONST	SEGMENT
_IID_ID3D11DepthStencilView DD 09fdac92aH
	DW	01876H
	DW	048c3H
	DB	0afH
	DB	0adH
	DB	025H
	DB	0b9H
	DB	04fH
	DB	084H
	DB	0a9H
	DB	0b6H
CONST	ENDS
;	COMDAT _IID_ID3D10ShaderReflectionConstantBuffer
CONST	SEGMENT
_IID_ID3D10ShaderReflectionConstantBuffer DD 066c66a94H
	DW	0ddddH
	DW	04b62H
	DB	0a6H
	DB	06aH
	DB	0f0H
	DB	0daH
	DB	033H
	DB	0c2H
	DB	0b4H
	DB	0d0H
CONST	ENDS
;	COMDAT _IID_ID3D11BlendState
CONST	SEGMENT
_IID_ID3D11BlendState DD 075b68faaH
	DW	0347dH
	DW	04159H
	DB	08fH
	DB	045H
	DB	0a0H
	DB	064H
	DB	0fH
	DB	01H
	DB	0cdH
	DB	09aH
CONST	ENDS
;	COMDAT _IID_ID3D10VertexShader
CONST	SEGMENT
_IID_ID3D10VertexShader DD 09b7e4c0aH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormatDontCare
CONST	SEGMENT
_GUID_WICPixelFormatDontCare DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	00H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat24bppRGB
CONST	SEGMENT
_GUID_WICPixelFormat24bppRGB DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	0dH
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_VLD_FGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_VLD_FGT DD 01b81be69H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _IID_IDXGIResource
CONST	SEGMENT
_IID_IDXGIResource DD 035f3ab4H
	DW	0482eH
	DW	04e50H
	DB	0b4H
	DB	01fH
	DB	08aH
	DB	07fH
	DB	08bH
	DB	0d8H
	DB	096H
	DB	0bH
CONST	ENDS
;	COMDAT _IID_ID3D10BlendState
CONST	SEGMENT
_IID_ID3D10BlendState DD 0edad8d19H
	DW	08a35H
	DW	04d6dH
	DB	085H
	DB	066H
	DB	02eH
	DB	0a2H
	DB	076H
	DB	0cdH
	DB	0e1H
	DB	061H
CONST	ENDS
;	COMDAT _CLSID_WICWmpDecoder
CONST	SEGMENT
_CLSID_WICWmpDecoder DD 0a26cec36H
	DW	0234cH
	DW	04950H
	DB	0aeH
	DB	016H
	DB	0e3H
	DB	04aH
	DB	0acH
	DB	0e7H
	DB	01dH
	DB	0dH
CONST	ENDS
;	COMDAT _CATID_WICMetadataReader
CONST	SEGMENT
_CATID_WICMetadataReader DD 05af94d8H
	DW	07174H
	DW	04cd2H
	DB	0beH
	DB	04aH
	DB	041H
	DB	024H
	DB	0b8H
	DB	0eH
	DB	0e4H
	DB	0b8H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat48bppRGB
CONST	SEGMENT
_GUID_WICPixelFormat48bppRGB DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	015H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat64bppPBGRA
CONST	SEGMENT
_GUID_WICPixelFormat64bppPBGRA DD 08c518e8eH
	DW	0a4ecH
	DW	0468bH
	DB	0aeH
	DB	070H
	DB	0c9H
	DB	0a3H
	DB	05aH
	DB	09cH
	DB	055H
	DB	030H
CONST	ENDS
;	COMDAT _IID_IDXGIDisplayControl
CONST	SEGMENT
_IID_IDXGIDisplayControl DD 0ea9dbf1aH
	DW	0c88eH
	DW	04486H
	DB	085H
	DB	04aH
	DB	098H
	DB	0aaH
	DB	01H
	DB	038H
	DB	0f3H
	DB	0cH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat16bppBGR565
CONST	SEGMENT
_GUID_WICPixelFormat16bppBGR565 DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	0aH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat64bppRGBAHalf
CONST	SEGMENT
_GUID_WICPixelFormat64bppRGBAHalf DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	03aH
CONST	ENDS
;	COMDAT _IID_IDXGIOutput1
CONST	SEGMENT
_IID_IDXGIOutput1 DD 0cddea8H
	DW	0939bH
	DW	04b83H
	DB	0a3H
	DB	040H
	DB	0a6H
	DB	085H
	DB	022H
	DB	066H
	DB	066H
	DB	0ccH
CONST	ENDS
;	COMDAT _IID_ID3D11ComputeShader
CONST	SEGMENT
_IID_ID3D11ComputeShader DD 04f5b196eH
	DW	0c2bdH
	DW	0495eH
	DB	0bdH
	DB	01H
	DB	01fH
	DB	0deH
	DB	0d3H
	DB	08eH
	DB	049H
	DB	069H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat64bpp4Channels
CONST	SEGMENT
_GUID_WICPixelFormat64bpp4Channels DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	027H
CONST	ENDS
;	COMDAT _IID_ID3D10Query
CONST	SEGMENT
_IID_ID3D10Query DD 09b7e4c0eH
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat16bppGrayHalf
CONST	SEGMENT
_GUID_WICPixelFormat16bppGrayHalf DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	03eH
CONST	ENDS
;	COMDAT _IID_IDXGISwapChain
CONST	SEGMENT
_IID_IDXGISwapChain DD 0310d36a0H
	DW	0d2e7H
	DW	04c0aH
	DB	0aaH
	DB	04H
	DB	06aH
	DB	09dH
	DB	023H
	DB	0b8H
	DB	088H
	DB	06aH
CONST	ENDS
;	COMDAT _IID_ID3D11FunctionLinkingGraph
CONST	SEGMENT
_IID_ID3D11FunctionLinkingGraph DD 054133220H
	DW	01ce8H
	DW	043d3H
	DB	082H
	DB	036H
	DB	098H
	DB	055H
	DB	0c5H
	DB	0ceH
	DB	0ecH
	DB	0ffH
CONST	ENDS
;	COMDAT _IID_ID3D11VideoProcessorEnumerator
CONST	SEGMENT
_IID_ID3D11VideoProcessorEnumerator DD 031627037H
	DW	053abH
	DW	04200H
	DB	090H
	DB	061H
	DB	05H
	DB	0faH
	DB	0a9H
	DB	0abH
	DB	045H
	DB	0f9H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat32bppBGR
CONST	SEGMENT
_GUID_WICPixelFormat32bppBGR DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	0eH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat128bppRGBFixedPoint
CONST	SEGMENT
_GUID_WICPixelFormat128bppRGBFixedPoint DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	041H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE DD 0ec1c539dH
	DW	08cffH
	DW	04e2aH
	DB	0bcH
	DB	0c4H
	DB	0f5H
	DB	069H
	DB	02fH
	DB	099H
	DB	0f4H
	DB	080H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat2bppIndexed
CONST	SEGMENT
_GUID_WICPixelFormat2bppIndexed DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	02H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_VC1_MOCOMP
CONST	SEGMENT
_D3D11_DECODER_PROFILE_VC1_MOCOMP DD 01b81bea1H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _IID_ID3D11RenderTargetView
CONST	SEGMENT
_IID_ID3D11RenderTargetView DD 0dfdba067H
	DW	0b8dH
	DW	04865H
	DB	087H
	DB	05bH
	DB	0d7H
	DB	0b4H
	DB	051H
	DB	06cH
	DB	0c1H
	DB	064H
CONST	ENDS
;	COMDAT _IID_ID3D11HullShader
CONST	SEGMENT
_IID_ID3D11HullShader DD 08e5c6061H
	DW	0628aH
	DW	04c8eH
	DB	082H
	DB	064H
	DB	0bbH
	DB	0e4H
	DB	05cH
	DB	0b3H
	DB	0d5H
	DB	0ddH
CONST	ENDS
;	COMDAT _IID_ID3D10EffectStringVariable
CONST	SEGMENT
_IID_ID3D10EffectStringVariable DD 071417501H
	DW	08df9H
	DW	04e0aH
	DB	0a7H
	DB	08aH
	DB	025H
	DB	05fH
	DB	097H
	DB	056H
	DB	0baH
	DB	0ffH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat48bpp5ChannelsAlpha
CONST	SEGMENT
_GUID_WICPixelFormat48bpp5ChannelsAlpha DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	030H
CONST	ENDS
;	COMDAT _IID_ID3D11Buffer
CONST	SEGMENT
_IID_ID3D11Buffer DD 048570b85H
	DW	0d1eeH
	DW	04fcdH
	DB	0a2H
	DB	050H
	DB	0ebH
	DB	035H
	DB	07H
	DB	022H
	DB	0b0H
	DB	037H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT DD 01b81be64H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG1_VLD
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG1_VLD DD 06f3ec719H
	DW	03735H
	DW	042ccH
	DB	080H
	DB	063H
	DB	065H
	DB	0ccH
	DB	03cH
	DB	0b3H
	DB	066H
	DB	016H
CONST	ENDS
;	COMDAT _IID_ID3D11Resource
CONST	SEGMENT
_IID_ID3D11Resource DD 0dc8e63f3H
	DW	0d12bH
	DW	04952H
	DB	0b4H
	DB	07bH
	DB	05eH
	DB	045H
	DB	02H
	DB	06aH
	DB	086H
	DB	02dH
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat16bppBGR555
CONST	SEGMENT
_GUID_WICPixelFormat16bppBGR555 DD 06fddc324H
	DW	04e03H
	DW	04bfeH
	DB	0b1H
	DB	085H
	DB	03dH
	DB	077H
	DB	076H
	DB	08dH
	DB	0c9H
	DB	09H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat32bppRGBA
CONST	SEGMENT
_GUID_WICPixelFormat32bppRGBA DD 0f5c7ad2dH
	DW	06a8dH
	DW	043ddH
	DB	0a7H
	DB	0a8H
	DB	0a2H
	DB	099H
	DB	035H
	DB	026H
	DB	01aH
	DB	0e9H
CONST	ENDS
;	COMDAT _GUID_WICPixelFormat8bppCb
CONST	SEGMENT
_GUID_WICPixelFormat8bppCb DD 01339f224H
	DW	06bfeH
	DW	04c3eH
	DB	093H
	DB	02H
	DB	0e4H
	DB	0f3H
	DB	0a6H
	DB	0d0H
	DB	0caH
	DB	02aH
CONST	ENDS
;	COMDAT _IID_ID3D10Resource
CONST	SEGMENT
_IID_ID3D10Resource DD 09b7e4c01H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _IID_ID3D11Module
CONST	SEGMENT
_IID_ID3D11Module DD 0cac701eeH
	DW	080fcH
	DW	04122H
	DB	082H
	DB	042H
	DB	010H
	DB	0b3H
	DB	09cH
	DB	08cH
	DB	0ecH
	DB	034H
CONST	ENDS
;	COMDAT _GUID_ContainerFormatIco
CONST	SEGMENT
_GUID_ContainerFormatIco DD 0a3a860c4H
	DW	0338fH
	DW	04c17H
	DB	091H
	DB	09aH
	DB	0fbH
	DB	0a4H
	DB	0b5H
	DB	062H
	DB	08fH
	DB	021H
CONST	ENDS
;	COMDAT _IID_ID3D10RasterizerState
CONST	SEGMENT
_IID_ID3D10RasterizerState DD 0a2a07292H
	DW	089afH
	DW	04345H
	DB	0beH
	DB	02eH
	DB	0c5H
	DB	03dH
	DB	09fH
	DB	0bbH
	DB	06eH
	DB	09fH
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_H264_IDCT_FGT
CONST	SEGMENT
_D3D11_DECODER_PROFILE_H264_IDCT_FGT DD 01b81be67H
	DW	0a0c7H
	DW	011d3H
	DB	0b9H
	DB	084H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	02eH
	DB	073H
	DB	0c5H
CONST	ENDS
;	COMDAT _CLSID_WICPngDecoder
CONST	SEGMENT
_CLSID_WICPngDecoder DD 0389ea17bH
	DW	05078H
	DW	04cdeH
	DB	0b6H
	DB	0efH
	DB	025H
	DB	0c1H
	DB	051H
	DB	075H
	DB	0c7H
	DB	051H
CONST	ENDS
;	COMDAT _CLSID_WICIcoDecoder
CONST	SEGMENT
_CLSID_WICIcoDecoder DD 0c61bfcdfH
	DW	02e0fH
	DW	04aadH
	DB	0a8H
	DB	0d7H
	DB	0e0H
	DB	06bH
	DB	0afH
	DB	0ebH
	DB	0cdH
	DB	0feH
CONST	ENDS
;	COMDAT _IID_ID3D10BlendState1
CONST	SEGMENT
_IID_ID3D10BlendState1 DD 0edad8d99H
	DW	08a35H
	DW	04d6dH
	DB	085H
	DB	066H
	DB	02eH
	DB	0a2H
	DB	076H
	DB	0cdH
	DB	0e1H
	DB	061H
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT DD 0b30f7066H
	DW	0203cH
	DW	04b07H
	DB	093H
	DB	0fcH
	DB	0ceH
	DB	0aaH
	DB	0fdH
	DB	061H
	DB	024H
	DB	01eH
CONST	ENDS
;	COMDAT _IID_IDXGIDevice
CONST	SEGMENT
_IID_IDXGIDevice DD 054ec77faH
	DW	01377H
	DW	044e6H
	DB	08cH
	DB	032H
	DB	088H
	DB	0fdH
	DB	05fH
	DB	044H
	DB	0c8H
	DB	04cH
CONST	ENDS
;	COMDAT _IID_IDXGIDevice1
CONST	SEGMENT
_IID_IDXGIDevice1 DD 077db970fH
	DW	06276H
	DW	048baH
	DB	0baH
	DB	028H
	DB	07H
	DB	01H
	DB	043H
	DB	0b4H
	DB	039H
	DB	02cH
CONST	ENDS
;	COMDAT _SID_SCommandBarState
CONST	SEGMENT
_SID_SCommandBarState DD 0b99eaa5cH
	DW	03850H
	DW	04400H
	DB	0bcH
	DB	033H
	DB	02cH
	DB	0e5H
	DB	034H
	DB	04H
	DB	08bH
	DB	0f8H
CONST	ENDS
;	COMDAT _IID_ID3D11SwitchToRef
CONST	SEGMENT
_IID_ID3D11SwitchToRef DD 01ef337e3H
	DW	058e7H
	DW	04f83H
	DB	0a6H
	DB	092H
	DB	0dbH
	DB	022H
	DB	01fH
	DB	05eH
	DB	0d4H
	DB	07eH
CONST	ENDS
;	COMDAT _IID_ID3D10Texture2D
CONST	SEGMENT
_IID_ID3D10Texture2D DD 09b7e4c04H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT _D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC
CONST	SEGMENT
_D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC DD 0ed418a9fH
	DW	010dH
	DW	04edaH
	DB	09aH
	DB	0e3H
	DB	09aH
	DB	065H
	DB	035H
	DB	08dH
	DB	08dH
	DB	02eH
CONST	ENDS
;	COMDAT _IID_ID3D11VideoDecoder
CONST	SEGMENT
_IID_ID3D11VideoDecoder DD 03c9c5b51H
	DW	0995dH
	DW	048d1H
	DB	09bH
	DB	08dH
	DB	0faH
	DB	05cH
	DB	0aeH
	DB	0deH
	DB	0d6H
	DB	05cH
CONST	ENDS
;	COMDAT _CATID_WICBitmapEncoders
CONST	SEGMENT
_CATID_WICBitmapEncoders DD 0ac757296H
	DW	03522H
	DW	04e11H
	DB	098H
	DB	062H
	DB	0c1H
	DB	07bH
	DB	0e5H
	DB	0a1H
	DB	076H
	DB	07eH
CONST	ENDS
;	COMDAT _D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID
CONST	SEGMENT
_D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID DD 0f83a5958H
	DW	0e986H
	DW	04bdaH
	DB	0beH
	DB	0b0H
	DB	041H
	DB	01fH
	DB	06aH
	DB	07aH
	DB	01H
	DB	0b7H
CONST	ENDS
;	COMDAT _CLSID_WICGifEncoder
CONST	SEGMENT
_CLSID_WICGifEncoder DD 0114f5598H
	DW	0b22H
	DW	040a0H
	DB	086H
	DB	0a1H
	DB	0c8H
	DB	03eH
	DB	0a4H
	DB	095H
	DB	0adH
	DB	0bdH
$SG4294967114 DB 'This function requires the vector to be normalized upon'
	DB	' entry.', 00H
	ORG $+1
_kaTranslationMask DD 0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
_XM_PIDIV4 DD	03f490fdbr			; 0.785398
_XM_1DIV2PI DD	03e22f983r			; 0.159155
_XM_PIDIV2 DD	03fc90fdbr			; 1.5708
_XM_2PI	DD	040c90fdbr			; 6.28319
_XM_PI	DD	040490fdbr			; 3.14159
_XM_1DIVPI DD	03ea2f983r			; 0.31831
	ORG $+8
_kaIdentityMatrix DD 03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
?sm_kxOne@XVector@Math@@1T__m128@@B DD 03f800000r ; 1	; Math::XVector::sm_kxOne
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
?sm_kxHighOne@XMatrix4x4@Math@@1T__m128@@B DD 000000000r ; 0 ; Math::XMatrix4x4::sm_kxHighOne
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
?sm_kxUnitY@XVector@Math@@1T__m128@@B DD 000000000r ; 0	; Math::XVector::sm_kxUnitY
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
?sm_kxNegateXYZ@XVector@Math@@1T__m128@@B DD 080000000r ; -0 ; Math::XVector::sm_kxNegateXYZ
	DD	080000000r			; -0
	DD	080000000r			; -0
	DD	000000000r			; 0
?sm_kxTwo@XVector@Math@@1T__m128@@B DD 040000000r ; 2	; Math::XVector::sm_kxTwo
	DD	040000000r			; 2
	DD	040000000r			; 2
	DD	040000000r			; 2
?sm_kxNegateW@XVector@Math@@1T__m128@@B DD 000000000r ; 0 ; Math::XVector::sm_kxNegateW
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	080000000r			; -0
?sm_kxNegateZ@XVector@Math@@1T__m128@@B DD 000000000r ; 0 ; Math::XVector::sm_kxNegateZ
	DD	000000000r			; 0
	DD	080000000r			; -0
	DD	000000000r			; 0
?sm_kxUnitX@XVector@Math@@1T__m128@@B DD 03f800000r ; 1	; Math::XVector::sm_kxUnitX
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
?sm_kxUnitW@XVector@Math@@1T__m128@@B DD 000000000r ; 0	; Math::XVector::sm_kxUnitW
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
?sm_kxNegateXYZW@XVector@Math@@1T__m128@@B DD 080000000r ; -0 ; Math::XVector::sm_kxNegateXYZW
	DD	080000000r			; -0
	DD	080000000r			; -0
	DD	080000000r			; -0
?sm_kxNegateY@XVector@Math@@1T__m128@@B DD 000000000r ; 0 ; Math::XVector::sm_kxNegateY
	DD	080000000r			; -0
	DD	000000000r			; 0
	DD	000000000r			; 0
?sm_kxNegateX@XVector@Math@@1T__m128@@B DD 080000000r ; -0 ; Math::XVector::sm_kxNegateX
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
?sm_kxUnitZ@XVector@Math@@1T__m128@@B DD 000000000r ; 0	; Math::XVector::sm_kxUnitZ
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
PUBLIC	?SetOrientation@XMatrix4x4@Math@@QAEAAV12@ABVXQuaternion@2@@Z ; Math::XMatrix4x4::SetOrientation
PUBLIC	?GetOrientation@XMatrix4x4@Math@@QBEAAVXQuaternion@2@AAV32@@Z ; Math::XMatrix4x4::GetOrientation
PUBLIC	??DXMatrix4x4@Math@@QBE?AV01@ABV01@@Z		; Math::XMatrix4x4::operator*
PUBLIC	??DXMatrix4x4@Math@@QBE?AVXVector4@1@ABV21@@Z	; Math::XMatrix4x4::operator*
PUBLIC	??DXMatrix4x4@Math@@QBE?AVXVector3@1@ABV21@@Z	; Math::XMatrix4x4::operator*
PUBLIC	??DXQuaternion@Math@@QBE?AV01@AAV01@@Z		; Math::XQuaternion::operator*
PUBLIC	??0XMatrix4x4@Math@@QAE@ABVXVector3@1@ABVXQuaternion@1@@Z ; Math::XMatrix4x4::XMatrix4x4
PUBLIC	??0XQuaternion@Math@@QAE@AAVXVector3@1@@Z	; Math::XQuaternion::XQuaternion
PUBLIC	??0XQuaternion@Math@@QAE@ABVXVector3@1@M@Z	; Math::XQuaternion::XQuaternion
PUBLIC	??0XQuaternion@Math@@QAE@MMMM@Z			; Math::XQuaternion::XQuaternion
PUBLIC	??0XVector4@Math@@QAE@MMMM@Z			; Math::XVector4::XVector4
PUBLIC	??0XVector3@Math@@QAE@MMM@Z			; Math::XVector3::XVector3
PUBLIC	?SetTranslation@XMatrix4x4@Math@@QAEAAV12@ABVXVector3@2@@Z ; Math::XMatrix4x4::SetTranslation
PUBLIC	??0XMatrix4x4@Math@@QAE@PBM@Z			; Math::XMatrix4x4::XMatrix4x4
PUBLIC	??0XMatrix4x4@Math@@QAE@XZ			; Math::XMatrix4x4::XMatrix4x4
PUBLIC	??4XQuaternion@Math@@QAEAAV01@ABV01@@Z		; Math::XQuaternion::operator=
PUBLIC	??XXQuaternion@Math@@QAEAAV01@AAV01@@Z		; Math::XQuaternion::operator*=
PUBLIC	??0XQuaternion@Math@@QAE@T__m128@@@Z		; Math::XQuaternion::XQuaternion
PUBLIC	??0XVector4@Math@@QAE@M@Z			; Math::XVector4::XVector4
PUBLIC	??0XVector4@Math@@QAE@T__m128@@@Z		; Math::XVector4::XVector4
PUBLIC	?Magnitude@XVector3@Math@@QBE?AVXScalar@2@XZ	; Math::XVector3::Magnitude
PUBLIC	?Dot@XVector3@Math@@QBE?AVXScalar@2@ABV12@@Z	; Math::XVector3::Dot
PUBLIC	??DXVector3@Math@@QBE?AV01@M@Z			; Math::XVector3::operator*
PUBLIC	??0XVector3@Math@@QAE@M@Z			; Math::XVector3::XVector3
PUBLIC	??0XVector3@Math@@QAE@T__m128@@@Z		; Math::XVector3::XVector3
PUBLIC	??BXScalar@Math@@QBEMXZ				; Math::XScalar::operator float
PUBLIC	??0XScalar@Math@@QAE@T__m128@@@Z		; Math::XScalar::XScalar
PUBLIC	?GetZ@XVector@Math@@QAEMXZ			; Math::XVector::GetZ
PUBLIC	?GetY@XVector@Math@@QAEMXZ			; Math::XVector::GetY
PUBLIC	?GetX@XVector@Math@@QAEMXZ			; Math::XVector::GetX
PUBLIC	??BXVector@Math@@QBE?BT__m128@@XZ		; Math::XVector::operator __m128 const 
PUBLIC	??0XVector@Math@@QAE@XZ				; Math::XVector::XVector
PUBLIC	?_mm_add4_ps_composite@@YA?AT__m128@@ABT1@000@Z	; _mm_add4_ps_composite
PUBLIC	?Cos@Angle@Math@@SAMM@Z				; Math::Angle::Cos
PUBLIC	?Sin@Angle@Math@@SAMM@Z				; Math::Angle::Sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	_sqrtf
PUBLIC	_sinf
PUBLIC	_cosf
PUBLIC	_hypot
PUBLIC	?One@XVector3@Math@@2V12@B			; Math::XVector3::One
PUBLIC	?UnitX@XVector3@Math@@2V12@B			; Math::XVector3::UnitX
PUBLIC	?g_XMReciprocalPi@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMReciprocalPi
PUBLIC	?g_XMTanEstCoefficients@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTanEstCoefficients
PUBLIC	?g_XMPiConstants0@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMPiConstants0
PUBLIC	?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMHalfPi
PUBLIC	?UnitY@XVector3@Math@@2V12@B			; Math::XVector3::UnitY
PUBLIC	?Zero@XVector4@Math@@2V12@B			; Math::XVector4::Zero
PUBLIC	?UnitZ@XVector3@Math@@2V12@B			; Math::XVector3::UnitZ
PUBLIC	?Zero@XQuaternion@Math@@2V12@B			; Math::XQuaternion::Zero
PUBLIC	?sm_kxTranslationMask@XVector@Math@@1T__m128@@B	; Math::XVector::sm_kxTranslationMask
PUBLIC	?Zero@XVector3@Math@@2V12@B			; Math::XVector3::Zero
PUBLIC	?Identity@XMatrix4x4@Math@@2V12@B		; Math::XMatrix4x4::Identity
PUBLIC	?g_XMPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMPi
PUBLIC	?g_XMNegativeTwoPi@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegativeTwoPi
PUBLIC	?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMReciprocalTwoPi
PUBLIC	?g_XMNegativePi@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegativePi
PUBLIC	?One@XVector4@Math@@2V12@B			; Math::XVector4::One
PUBLIC	?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMTwoPi
PUBLIC	__real@00000000
PUBLIC	__real@322bcc77
PUBLIC	__real@3e800000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	___libm_sse2_cosf:PROC
EXTRN	___libm_sse2_sinf:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
?One@XVector3@Math@@2V12@B DB 010H DUP (?)		; Math::XVector3::One
?UnitX@XVector3@Math@@2V12@B DB 010H DUP (?)		; Math::XVector3::UnitX
?UnitY@XVector3@Math@@2V12@B DB 010H DUP (?)		; Math::XVector3::UnitY
?Zero@XVector4@Math@@2V12@B DB 010H DUP (?)		; Math::XVector4::Zero
?UnitZ@XVector3@Math@@2V12@B DB 010H DUP (?)		; Math::XVector3::UnitZ
?Zero@XQuaternion@Math@@2V12@B DB 020H DUP (?)		; Math::XQuaternion::Zero
?sm_kxTranslationMask@XVector@Math@@1T__m128@@B DB 010H DUP (?) ; Math::XVector::sm_kxTranslationMask
?Zero@XVector3@Math@@2V12@B DB 010H DUP (?)		; Math::XVector3::Zero
?Identity@XMatrix4x4@Math@@2V12@B DB 040H DUP (?)	; Math::XMatrix4x4::Identity
_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
	ALIGN	4

?One@XVector4@Math@@2V12@B DB 010H DUP (?)		; Math::XVector4::One
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMTanEstCoefficients$initializer$ DD FLAT:??__Eg_XMTanEstCoefficients@DirectX@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@322bcc77
CONST	SEGMENT
__real@322bcc77 DD 0322bcc77r			; 1e-008
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B	ORG $+16		; DirectX::g_XMTwoPi
_DATA	ENDS
;	COMDAT ?g_XMNegativePi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMNegativePi@DirectX@@3UXMVECTORF32@1@B	ORG $+16	; DirectX::g_XMNegativePi
_DATA	ENDS
;	COMDAT ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B	ORG $+16 ; DirectX::g_XMReciprocalTwoPi
_DATA	ENDS
;	COMDAT ?g_XMNegativeTwoPi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMNegativeTwoPi@DirectX@@3UXMVECTORF32@1@B	ORG $+16	; DirectX::g_XMNegativeTwoPi
_DATA	ENDS
;	COMDAT ?g_XMPi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMPi@DirectX@@3UXMVECTORF32@1@B	ORG $+16		; DirectX::g_XMPi
_DATA	ENDS
;	COMDAT ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B	ORG $+16		; DirectX::g_XMHalfPi
_DATA	ENDS
;	COMDAT ?g_XMPiConstants0@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMPiConstants0@DirectX@@3UXMVECTORF32@1@B	ORG $+16	; DirectX::g_XMPiConstants0
_DATA	ENDS
;	COMDAT ?g_XMTanEstCoefficients@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMTanEstCoefficients@DirectX@@3UXMVECTORF32@1@B DD 0401ef9dbr ; 2.484 ; DirectX::g_XMTanEstCoefficients
	DD	0be482f23r			; -0.195492
	DD	0401de9e6r			; 2.4674
	ORG $+4
_DATA	ENDS
;	COMDAT ?g_XMReciprocalPi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMReciprocalPi@DirectX@@3UXMVECTORF32@1@B	ORG $+16	; DirectX::g_XMReciprocalPi
_DATA	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMPiConstants0$initializer$ DD FLAT:??__Eg_XMPiConstants0@DirectX@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMNegativeTwoPi$initializer$ DD FLAT:??__Eg_XMNegativeTwoPi@DirectX@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMNegativePi$initializer$ DD FLAT:??__Eg_XMNegativePi@DirectX@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMHalfPi$initializer$ DD FLAT:??__Eg_XMHalfPi@DirectX@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMPi$initializer$ DD FLAT:??__Eg_XMPi@DirectX@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMReciprocalPi$initializer$ DD FLAT:??__Eg_XMReciprocalPi@DirectX@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMTwoPi$initializer$ DD FLAT:??__Eg_XMTwoPi@DirectX@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMReciprocalTwoPi$initializer$ DD FLAT:??__Eg_XMReciprocalTwoPi@DirectX@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?sm_kxTranslationMask$initializer$@XVector@Math@@1P6AXXZA DD FLAT:??__E?sm_kxTranslationMask@XVector@Math@@1T__m128@@B@@YAXXZ ; Math::XVector::sm_kxTranslationMask$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?Zero$initializer$@XVector3@Math@@2P6AXXZA DD FLAT:??__E?Zero@XVector3@Math@@2V12@B@@YAXXZ ; Math::XVector3::Zero$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?One$initializer$@XVector3@Math@@2P6AXXZA DD FLAT:??__E?One@XVector3@Math@@2V12@B@@YAXXZ ; Math::XVector3::One$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?UnitX$initializer$@XVector3@Math@@2P6AXXZA DD FLAT:??__E?UnitX@XVector3@Math@@2V12@B@@YAXXZ ; Math::XVector3::UnitX$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?UnitY$initializer$@XVector3@Math@@2P6AXXZA DD FLAT:??__E?UnitY@XVector3@Math@@2V12@B@@YAXXZ ; Math::XVector3::UnitY$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?UnitZ$initializer$@XVector3@Math@@2P6AXXZA DD FLAT:??__E?UnitZ@XVector3@Math@@2V12@B@@YAXXZ ; Math::XVector3::UnitZ$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?Zero$initializer$@XVector4@Math@@2P6AXXZA DD FLAT:??__E?Zero@XVector4@Math@@2V12@B@@YAXXZ ; Math::XVector4::Zero$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?One$initializer$@XVector4@Math@@2P6AXXZA DD FLAT:??__E?One@XVector4@Math@@2V12@B@@YAXXZ ; Math::XVector4::One$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?Zero$initializer$@XQuaternion@Math@@2P6AXXZA DD FLAT:??__E?Zero@XQuaternion@Math@@2V12@B@@YAXXZ ; Math::XQuaternion::Zero$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?Identity$initializer$@XMatrix4x4@Math@@2P6AXXZA DD FLAT:??__E?Identity@XMatrix4x4@Math@@2V12@B@@YAXXZ ; Math::XMatrix4x4::Identity$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _hypot
_TEXT	SEGMENT
__X$ = 8						; size = 8
__Y$ = 16						; size = 8
_hypot	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 556
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 557
  00004	8b f4		 mov	 esi, esp
  00006	83 ec 08	 sub	 esp, 8
  00009	f2 0f 10 45 10	 movsd	 xmm0, QWORD PTR __Y$[ebp]
  0000e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00013	83 ec 08	 sub	 esp, 8
  00016	f2 0f 10 45 08	 movsd	 xmm0, QWORD PTR __X$[ebp]
  0001b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___hypot
  00026	83 c4 10	 add	 esp, 16			; 00000010H
  00029	3b f4		 cmp	 esi, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 558
  00030	5e		 pop	 esi
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
_hypot	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _cosf
_TEXT	SEGMENT
tv70 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 663
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 664
  0000b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]
  00010	e8 00 00 00 00	 call	 ___libm_sse2_cosf
  00015	f3 0f 11 45 fc	 movss	 DWORD PTR tv70[ebp], xmm0
  0001a	d9 45 fc	 fld	 DWORD PTR tv70[ebp]
; Line 665
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _sinf
_TEXT	SEGMENT
tv70 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 764
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 765
  0000b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]
  00010	e8 00 00 00 00	 call	 ___libm_sse2_sinf
  00015	f3 0f 11 45 fc	 movss	 DWORD PTR tv70[ebp], xmm0
  0001a	d9 45 fc	 fld	 DWORD PTR tv70[ebp]
; Line 766
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 774
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 775
  0000b	f3 0f 51 45 08	 sqrtss	 xmm0, DWORD PTR __X$[ebp]
  00010	f3 0f 11 45 fc	 movss	 DWORD PTR tv70[ebp], xmm0
  00015	d9 45 fc	 fld	 DWORD PTR tv70[ebp]
; Line 776
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 1052
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]
  00009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0000e	e8 00 00 00 00	 call	 _cosf
  00013	83 c4 04	 add	 esp, 4
  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 1132
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]
  00009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0000e	e8 00 00 00 00	 call	 _sinf
  00013	83 c4 04	 add	 esp, 4
  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 1136
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]
  00009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0000e	e8 00 00 00 00	 call	 _sqrtf
  00013	83 c4 04	 add	 esp, 4
  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMTanEstCoefficients@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMTanEstCoefficients@DirectX@@YAXXZ PROC		; DirectX::`dynamic initializer for 'g_XMTanEstCoefficients'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1703
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIVPI
  0000b	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?g_XMTanEstCoefficients@DirectX@@3UXMVECTORF32@1@B+12, xmm0
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??__Eg_XMTanEstCoefficients@DirectX@@YAXXZ ENDP		; DirectX::`dynamic initializer for 'g_XMTanEstCoefficients''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMPiConstants0@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMPiConstants0@DirectX@@YAXXZ PROC		; DirectX::`dynamic initializer for 'g_XMPiConstants0'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1705
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  0000b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?g_XMPiConstants0@DirectX@@3UXMVECTORF32@1@B, xmm0
  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_2PI
  0001b	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?g_XMPiConstants0@DirectX@@3UXMVECTORF32@1@B+4, xmm0
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIVPI
  0002b	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?g_XMPiConstants0@DirectX@@3UXMVECTORF32@1@B+8, xmm0
  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIV2PI
  0003b	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?g_XMPiConstants0@DirectX@@3UXMVECTORF32@1@B+12, xmm0
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??__Eg_XMPiConstants0@DirectX@@YAXXZ ENDP		; DirectX::`dynamic initializer for 'g_XMPiConstants0''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMNegativeTwoPi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMNegativeTwoPi@DirectX@@YAXXZ PROC		; DirectX::`dynamic initializer for 'g_XMNegativeTwoPi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1730
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_2PI
  0000b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00012	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?g_XMNegativeTwoPi@DirectX@@3UXMVECTORF32@1@B, xmm0
  0001a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_2PI
  00022	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00029	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?g_XMNegativeTwoPi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
  00031	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_2PI
  00039	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00040	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?g_XMNegativeTwoPi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_2PI
  00050	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00057	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?g_XMNegativeTwoPi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??__Eg_XMNegativeTwoPi@DirectX@@YAXXZ ENDP		; DirectX::`dynamic initializer for 'g_XMNegativeTwoPi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMNegativePi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMNegativePi@DirectX@@YAXXZ PROC			; DirectX::`dynamic initializer for 'g_XMNegativePi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1731
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  0000b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00012	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?g_XMNegativePi@DirectX@@3UXMVECTORF32@1@B, xmm0
  0001a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  00022	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00029	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?g_XMNegativePi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
  00031	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  00039	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00040	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?g_XMNegativePi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  00050	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00057	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?g_XMNegativePi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??__Eg_XMNegativePi@DirectX@@YAXXZ ENDP			; DirectX::`dynamic initializer for 'g_XMNegativePi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMHalfPi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMHalfPi@DirectX@@YAXXZ PROC			; DirectX::`dynamic initializer for 'g_XMHalfPi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1732
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PIDIV2
  0000b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B, xmm0
  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PIDIV2
  0001b	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PIDIV2
  0002b	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PIDIV2
  0003b	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??__Eg_XMHalfPi@DirectX@@YAXXZ ENDP			; DirectX::`dynamic initializer for 'g_XMHalfPi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMPi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMPi@DirectX@@YAXXZ PROC				; DirectX::`dynamic initializer for 'g_XMPi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1733
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  0000b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?g_XMPi@DirectX@@3UXMVECTORF32@1@B, xmm0
  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  0001b	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?g_XMPi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  0002b	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?g_XMPi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  0003b	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?g_XMPi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??__Eg_XMPi@DirectX@@YAXXZ ENDP				; DirectX::`dynamic initializer for 'g_XMPi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMReciprocalPi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMReciprocalPi@DirectX@@YAXXZ PROC		; DirectX::`dynamic initializer for 'g_XMReciprocalPi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1734
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIVPI
  0000b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?g_XMReciprocalPi@DirectX@@3UXMVECTORF32@1@B, xmm0
  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIVPI
  0001b	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?g_XMReciprocalPi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIVPI
  0002b	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?g_XMReciprocalPi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIVPI
  0003b	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?g_XMReciprocalPi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??__Eg_XMReciprocalPi@DirectX@@YAXXZ ENDP		; DirectX::`dynamic initializer for 'g_XMReciprocalPi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMTwoPi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMTwoPi@DirectX@@YAXXZ PROC			; DirectX::`dynamic initializer for 'g_XMTwoPi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1735
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_2PI
  0000b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B, xmm0
  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_2PI
  0001b	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_2PI
  0002b	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_2PI
  0003b	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??__Eg_XMTwoPi@DirectX@@YAXXZ ENDP			; DirectX::`dynamic initializer for 'g_XMTwoPi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMReciprocalTwoPi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMReciprocalTwoPi@DirectX@@YAXXZ PROC		; DirectX::`dynamic initializer for 'g_XMReciprocalTwoPi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1736
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIV2PI
  0000b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B, xmm0
  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIV2PI
  0001b	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIV2PI
  0002b	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIV2PI
  0003b	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??__Eg_XMReciprocalTwoPi@DirectX@@YAXXZ ENDP		; DirectX::`dynamic initializer for 'g_XMReciprocalTwoPi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
; Line 70
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	33 c0		 xor	 eax, eax
  0000d	88 45 ff	 mov	 BYTE PTR $T1[ebp], al
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 3451
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	33 c0		 xor	 eax, eax
  0000d	88 45 ff	 mov	 BYTE PTR $T1[ebp], al
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Sin@Angle@Math@@SAMM@Z
_TEXT	SEGMENT
_Rad$ = 8						; size = 4
?Sin@Angle@Math@@SAMM@Z PROC				; Math::Angle::Sin, COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\macros.h
; Line 95
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 96
  00003	51		 push	 ecx
  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _Rad$[ebp]
  00009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0000e	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  00013	83 c4 04	 add	 esp, 4
; Line 97
  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?Sin@Angle@Math@@SAMM@Z ENDP				; Math::Angle::Sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Cos@Angle@Math@@SAMM@Z
_TEXT	SEGMENT
_Rad$ = 8						; size = 4
?Cos@Angle@Math@@SAMM@Z PROC				; Math::Angle::Cos, COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\macros.h
; Line 100
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 101
  00003	51		 push	 ecx
  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _Rad$[ebp]
  00009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0000e	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  00013	83 c4 04	 add	 esp, 4
; Line 102
  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?Cos@Angle@Math@@SAMM@Z ENDP				; Math::Angle::Cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_mm_add4_ps_composite@@YA?AT__m128@@ABT1@000@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
$T2 = -32						; size = 16
$T3 = -16						; size = 16
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
?_mm_add4_ps_composite@@YA?AT__m128@@ABT1@000@Z PROC	; _mm_add4_ps_composite, COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 51
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
; Line 52
  00029	8b 43 14	 mov	 eax, DWORD PTR _d$[ebx]
  0002c	8b 4b 10	 mov	 ecx, DWORD PTR _c$[ebx]
  0002f	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00032	0f 58 00	 addps	 xmm0, XMMWORD PTR [eax]
  00035	0f 29 45 e0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00039	8b 53 0c	 mov	 edx, DWORD PTR _b$[ebx]
  0003c	8b 43 08	 mov	 eax, DWORD PTR _a$[ebx]
  0003f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00042	0f 58 02	 addps	 xmm0, XMMWORD PTR [edx]
  00045	0f 29 45 f0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00049	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0004d	0f 58 45 e0	 addps	 xmm0, XMMWORD PTR $T2[ebp]
  00051	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00055	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 53
  00059	5f		 pop	 edi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	8b e3		 mov	 esp, ebx
  0005f	5b		 pop	 ebx
  00060	c3		 ret	 0
?_mm_add4_ps_composite@@YA?AT__m128@@ABT1@000@Z ENDP	; _mm_add4_ps_composite
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XVector@Math@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XVector@Math@@QAE@XZ PROC				; Math::XVector::XVector, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 87
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0XVector@Math@@QAE@XZ ENDP				; Math::XVector::XVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BXVector@Math@@QBE?BT__m128@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BXVector@Math@@QBE?BT__m128@@XZ PROC			; Math::XVector::operator __m128 const , COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 113
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 114
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00017	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 115
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??BXVector@Math@@QBE?BT__m128@@XZ ENDP			; Math::XVector::operator __m128 const 
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetX@XVector@Math@@QAEMXZ
_TEXT	SEGMENT
_x$ = -12						; size = 4
_this$ = -4						; size = 4
?GetX@XVector@Math@@QAEMXZ PROC				; Math::XVector::GetX, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 122
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 124
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00020	f3 0f 11 45 f4	 movss	 DWORD PTR _x$[ebp], xmm0
; Line 125
  00025	d9 45 f4	 fld	 DWORD PTR _x$[ebp]
; Line 126
  00028	52		 push	 edx
  00029	8b cd		 mov	 ecx, ebp
  0002b	50		 push	 eax
  0002c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@GetX
  00032	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00037	58		 pop	 eax
  00038	5a		 pop	 edx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
  0003d	8d 49 00	 npad	 3
$LN5@GetX:
  00040	01 00 00 00	 DD	 1
  00044	00 00 00 00	 DD	 $LN4@GetX
$LN4@GetX:
  00048	f4 ff ff ff	 DD	 -12			; fffffff4H
  0004c	04 00 00 00	 DD	 4
  00050	00 00 00 00	 DD	 $LN3@GetX
$LN3@GetX:
  00054	78		 DB	 120			; 00000078H
  00055	00		 DB	 0
?GetX@XVector@Math@@QAEMXZ ENDP				; Math::XVector::GetX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetY@XVector@Math@@QAEMXZ
_TEXT	SEGMENT
$T1 = -32						; size = 16
_y$ = -12						; size = 4
_this$ = -4						; size = 4
?GetY@XVector@Math@@QAEMXZ PROC				; Math::XVector::GetY, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 133
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 135
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00042	0f c6 00 01	 shufps	 xmm0, XMMWORD PTR [eax], 1
  00046	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0004a	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  0004e	f3 0f 11 45 f4	 movss	 DWORD PTR _y$[ebp], xmm0
; Line 136
  00053	d9 45 f4	 fld	 DWORD PTR _y$[ebp]
; Line 137
  00056	52		 push	 edx
  00057	8b cd		 mov	 ecx, ebp
  00059	50		 push	 eax
  0005a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@GetY
  00060	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00065	58		 pop	 eax
  00066	5a		 pop	 edx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	8b e3		 mov	 esp, ebx
  0006c	5b		 pop	 ebx
  0006d	c3		 ret	 0
  0006e	8b ff		 npad	 2
$LN5@GetY:
  00070	01 00 00 00	 DD	 1
  00074	00 00 00 00	 DD	 $LN4@GetY
$LN4@GetY:
  00078	f4 ff ff ff	 DD	 -12			; fffffff4H
  0007c	04 00 00 00	 DD	 4
  00080	00 00 00 00	 DD	 $LN3@GetY
$LN3@GetY:
  00084	79		 DB	 121			; 00000079H
  00085	00		 DB	 0
?GetY@XVector@Math@@QAEMXZ ENDP				; Math::XVector::GetY
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetZ@XVector@Math@@QAEMXZ
_TEXT	SEGMENT
$T1 = -32						; size = 16
_z$ = -12						; size = 4
_this$ = -4						; size = 4
?GetZ@XVector@Math@@QAEMXZ PROC				; Math::XVector::GetZ, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 144
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 146
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	0f 10 09	 movups	 xmm1, XMMWORD PTR [ecx]
  00045	0f 12 c8	 movhlps xmm1, xmm0
  00048	0f 29 4d e0	 movaps	 XMMWORD PTR $T1[ebp], xmm1
  0004c	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00050	f3 0f 11 45 f4	 movss	 DWORD PTR _z$[ebp], xmm0
; Line 147
  00055	d9 45 f4	 fld	 DWORD PTR _z$[ebp]
; Line 148
  00058	52		 push	 edx
  00059	8b cd		 mov	 ecx, ebp
  0005b	50		 push	 eax
  0005c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@GetZ
  00062	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00067	58		 pop	 eax
  00068	5a		 pop	 edx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	8b e3		 mov	 esp, ebx
  0006e	5b		 pop	 ebx
  0006f	c3		 ret	 0
$LN5@GetZ:
  00070	01 00 00 00	 DD	 1
  00074	00 00 00 00	 DD	 $LN4@GetZ
$LN4@GetZ:
  00078	f4 ff ff ff	 DD	 -12			; fffffff4H
  0007c	04 00 00 00	 DD	 4
  00080	00 00 00 00	 DD	 $LN3@GetZ
$LN3@GetZ:
  00084	7a		 DB	 122			; 0000007aH
  00085	00		 DB	 0
?GetZ@XVector@Math@@QAEMXZ ENDP				; Math::XVector::GetZ
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XScalar@Math@@QAE@T__m128@@@Z
_TEXT	SEGMENT
$T1 = -44						; size = 4
_this$ = -40						; size = 4
_x$ = -32						; size = 16
??0XScalar@Math@@QAE@T__m128@@@Z PROC			; Math::XScalar::XScalar, COMDAT
; _this$ = ecx
; _x$ = xmm0
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 210
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 45 e0	 movaps	 XMMWORD PTR _x$[ebp], xmm0
  0002f	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx
  00032	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ??0XVector@Math@@QAE@XZ	; Math::XVector::XVector
; Line 212
  0003a	b8 04 00 00 00	 mov	 eax, 4
  0003f	6b c8 00	 imul	 ecx, eax, 0
  00042	ba 04 00 00 00	 mov	 edx, 4
  00047	c1 e2 00	 shl	 edx, 0
  0004a	f3 0f 10 44 0d
	e0		 movss	 xmm0, DWORD PTR _x$[ebp+ecx]
  00050	0f 2e 44 15 e0	 ucomiss xmm0, DWORD PTR _x$[ebp+edx]
  00055	9f		 lahf
  00056	f6 c4 44	 test	 ah, 68			; 00000044H
  00059	7b 56		 jnp	 SHORT $LN1@XScalar
  0005b	b8 04 00 00 00	 mov	 eax, 4
  00060	6b c8 00	 imul	 ecx, eax, 0
  00063	ba 04 00 00 00	 mov	 edx, 4
  00068	d1 e2		 shl	 edx, 1
  0006a	f3 0f 10 44 0d
	e0		 movss	 xmm0, DWORD PTR _x$[ebp+ecx]
  00070	0f 2e 44 15 e0	 ucomiss xmm0, DWORD PTR _x$[ebp+edx]
  00075	9f		 lahf
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 36		 jp	 SHORT $LN1@XScalar
  0007b	b8 04 00 00 00	 mov	 eax, 4
  00080	6b c8 00	 imul	 ecx, eax, 0
  00083	ba 04 00 00 00	 mov	 edx, 4
  00088	6b c2 03	 imul	 eax, edx, 3
  0008b	f3 0f 10 44 0d
	e0		 movss	 xmm0, DWORD PTR _x$[ebp+ecx]
  00091	0f 2e 44 05 e0	 ucomiss xmm0, DWORD PTR _x$[ebp+eax]
  00096	9f		 lahf
  00097	f6 c4 44	 test	 ah, 68			; 00000044H
  0009a	7a 15		 jp	 SHORT $LN1@XScalar
  0009c	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR $T1[ebp], 1
  000a3	68 00 00 00 00	 push	 OFFSET __TI1H
  000a8	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  000ab	51		 push	 ecx
  000ac	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@XScalar:
; Line 215
  000b1	8b 55 d8	 mov	 edx, DWORD PTR _this$[ebp]
  000b4	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR _x$[ebp]
  000b8	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
; Line 216
  000bb	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
$LN3@XScalar:
  000be	52		 push	 edx
  000bf	8b cd		 mov	 ecx, ebp
  000c1	50		 push	 eax
  000c2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@XScalar
  000c8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000cd	58		 pop	 eax
  000ce	5a		 pop	 edx
  000cf	5f		 pop	 edi
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	8b e3		 mov	 esp, ebx
  000d5	5b		 pop	 ebx
  000d6	c3		 ret	 0
  000d7	90		 npad	 1
$LN6@XScalar:
  000d8	01 00 00 00	 DD	 1
  000dc	00 00 00 00	 DD	 $LN5@XScalar
$LN5@XScalar:
  000e0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000e4	10 00 00 00	 DD	 16			; 00000010H
  000e8	00 00 00 00	 DD	 $LN4@XScalar
$LN4@XScalar:
  000ec	78		 DB	 120			; 00000078H
  000ed	00		 DB	 0
??0XScalar@Math@@QAE@T__m128@@@Z ENDP			; Math::XScalar::XScalar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BXScalar@Math@@QBEMXZ
_TEXT	SEGMENT
_s$ = -12						; size = 4
_this$ = -4						; size = 4
??BXScalar@Math@@QBEMXZ PROC				; Math::XScalar::operator float, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 223
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 225
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00020	f3 0f 11 45 f4	 movss	 DWORD PTR _s$[ebp], xmm0
; Line 226
  00025	d9 45 f4	 fld	 DWORD PTR _s$[ebp]
; Line 227
  00028	52		 push	 edx
  00029	8b cd		 mov	 ecx, ebp
  0002b	50		 push	 eax
  0002c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@operator
  00032	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00037	58		 pop	 eax
  00038	5a		 pop	 edx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
  0003d	8d 49 00	 npad	 3
$LN5@operator:
  00040	01 00 00 00	 DD	 1
  00044	00 00 00 00	 DD	 $LN4@operator
$LN4@operator:
  00048	f4 ff ff ff	 DD	 -12			; fffffff4H
  0004c	04 00 00 00	 DD	 4
  00050	00 00 00 00	 DD	 $LN3@operator
$LN3@operator:
  00054	73		 DB	 115			; 00000073H
  00055	00		 DB	 0
??BXScalar@Math@@QBEMXZ ENDP				; Math::XScalar::operator float
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XVector3@Math@@QAE@T__m128@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_x$ = -16						; size = 16
??0XVector3@Math@@QAE@T__m128@@@Z PROC			; Math::XVector3::XVector3, COMDAT
; _this$ = ecx
; _x$ = xmm0
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 260
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	0f 29 45 f0	 movaps	 XMMWORD PTR _x$[ebp], xmm0
  0003a	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ??0XVector@Math@@QAE@XZ	; Math::XVector::XVector
; Line 262
  00045	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00048	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR _x$[ebp]
  0004c	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; Line 263
  0004f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	8b e3		 mov	 esp, ebx
  00057	5b		 pop	 ebx
  00058	c3		 ret	 0
??0XVector3@Math@@QAE@T__m128@@@Z ENDP			; Math::XVector3::XVector3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XVector3@Math@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
$T2 = -32						; size = 16
_this$ = -4						; size = 4
_f$ = 8							; size = 4
??0XVector3@Math@@QAE@M@Z PROC				; Math::XVector3::XVector3, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 269
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ??0XVector@Math@@QAE@XZ	; Math::XVector::XVector
; Line 271
  00036	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _f$[ebx]
  0003b	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  0003f	0f 29 45 e0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00043	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00047	0f 54 05 00 00
	00 00		 andps	 xmm0, XMMWORD PTR ?sm_kxTranslationMask@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxTranslationMask
  0004e	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	0f 10 45 d0	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  00059	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; Line 272
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	5f		 pop	 edi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	8b e3		 mov	 esp, ebx
  00065	5b		 pop	 ebx
  00066	c2 04 00	 ret	 4
??0XVector3@Math@@QAE@M@Z ENDP				; Math::XVector3::XVector3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??DXVector3@Math@@QBE?AV01@M@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
$T2 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
??DXVector3@Math@@QBE?AV01@M@Z PROC			; Math::XVector3::operator*, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 386
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 387
  0002e	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _s$[ebx]
  00033	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00037	0f 29 45 e0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00041	0f 59 45 e0	 mulps	 xmm0, XMMWORD PTR $T2[ebp]
  00045	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00049	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  0004d	8b 4b 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebx]
  00050	e8 00 00 00 00	 call	 ??0XVector3@Math@@QAE@T__m128@@@Z ; Math::XVector3::XVector3
  00055	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 388
  00058	5f		 pop	 edi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	8b e3		 mov	 esp, ebx
  0005e	5b		 pop	 ebx
  0005f	c2 08 00	 ret	 8
??DXVector3@Math@@QBE?AV01@M@Z ENDP			; Math::XVector3::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Dot@XVector3@Math@@QBE?AVXScalar@2@ABV12@@Z
_TEXT	SEGMENT
$T1 = -128						; size = 16
$T2 = -112						; size = 16
$T3 = -96						; size = 16
$T4 = -80						; size = 16
$T5 = -64						; size = 16
_sq$ = -48						; size = 16
_t$ = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
?Dot@XVector3@Math@@QBE?AVXScalar@2@ABV12@@Z PROC	; Math::XVector3::Dot, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 438
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00021	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 440
  00031	8b 43 0c	 mov	 eax, DWORD PTR _a$[ebx]
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0003a	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  0003d	0f 29 45 c0	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00041	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00045	0f 29 45 d0	 movaps	 XMMWORD PTR _sq$[ebp], xmm0
; Line 441
  00049	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _sq$[ebp]
  0004d	0f c6 45 d0 d2	 shufps	 xmm0, XMMWORD PTR _sq$[ebp], 210 ; 000000d2H
  00052	0f 29 45 b0	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00056	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _sq$[ebp]
  0005a	0f 58 45 b0	 addps	 xmm0, XMMWORD PTR $T4[ebp]
  0005e	0f 29 45 a0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00062	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00066	0f 29 45 e0	 movaps	 XMMWORD PTR _t$[ebp], xmm0
; Line 442
  0006a	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _sq$[ebp]
  0006e	0f c6 45 d0 c9	 shufps	 xmm0, XMMWORD PTR _sq$[ebp], 201 ; 000000c9H
  00073	0f 29 45 90	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00077	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _t$[ebp]
  0007b	0f 58 45 90	 addps	 xmm0, XMMWORD PTR $T2[ebp]
  0007f	0f 29 45 80	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00083	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00087	0f 29 45 e0	 movaps	 XMMWORD PTR _t$[ebp], xmm0
; Line 443
  0008b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _t$[ebp]
  0008f	8b 4b 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebx]
  00092	e8 00 00 00 00	 call	 ??0XScalar@Math@@QAE@T__m128@@@Z ; Math::XScalar::XScalar
  00097	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 444
  0009a	5f		 pop	 edi
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	8b e3		 mov	 esp, ebx
  000a0	5b		 pop	 ebx
  000a1	c2 08 00	 ret	 8
?Dot@XVector3@Math@@QBE?AVXScalar@2@ABV12@@Z ENDP	; Math::XVector3::Dot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Magnitude@XVector3@Math@@QBE?AVXScalar@2@XZ
_TEXT	SEGMENT
$T1 = -80						; size = 16
$T2 = -64						; size = 16
_s$ = -32						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?Magnitude@XVector3@Math@@QBE?AVXScalar@2@XZ PROC	; Math::XVector3::Magnitude, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 466
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 50	 sub	 esp, 80			; 00000050H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0001e	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 467
  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	50		 push	 eax
  0003c	8d 4d e0	 lea	 ecx, DWORD PTR _s$[ebp]
  0003f	51		 push	 ecx
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?Dot@XVector3@Math@@QBE?AVXScalar@2@ABV12@@Z ; Math::XVector3::Dot
; Line 468
  00048	8d 55 c0	 lea	 edx, DWORD PTR $T2[ebp]
  0004b	52		 push	 edx
  0004c	8d 4d e0	 lea	 ecx, DWORD PTR _s$[ebp]
  0004f	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  00054	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00057	0f 51 c0	 sqrtps	 xmm0, xmm0
  0005a	0f 29 45 b0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0005e	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00062	8b 4b 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebx]
  00065	e8 00 00 00 00	 call	 ??0XScalar@Math@@QAE@T__m128@@@Z ; Math::XScalar::XScalar
  0006a	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 469
  0006d	52		 push	 edx
  0006e	8b cd		 mov	 ecx, ebp
  00070	50		 push	 eax
  00071	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Magnitude
  00077	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0007c	58		 pop	 eax
  0007d	5a		 pop	 edx
  0007e	5f		 pop	 edi
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00082	33 cd		 xor	 ecx, ebp
  00084	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	8b e3		 mov	 esp, ebx
  0008e	5b		 pop	 ebx
  0008f	c2 04 00	 ret	 4
  00092	8b ff		 npad	 2
$LN5@Magnitude:
  00094	01 00 00 00	 DD	 1
  00098	00 00 00 00	 DD	 $LN4@Magnitude
$LN4@Magnitude:
  0009c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000a0	10 00 00 00	 DD	 16			; 00000010H
  000a4	00 00 00 00	 DD	 $LN3@Magnitude
$LN3@Magnitude:
  000a8	73		 DB	 115			; 00000073H
  000a9	00		 DB	 0
?Magnitude@XVector3@Math@@QBE?AVXScalar@2@XZ ENDP	; Math::XVector3::Magnitude
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XVector4@Math@@QAE@T__m128@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_x$ = -16						; size = 16
??0XVector4@Math@@QAE@T__m128@@@Z PROC			; Math::XVector4::XVector4, COMDAT
; _this$ = ecx
; _x$ = xmm0
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 533
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	0f 29 45 f0	 movaps	 XMMWORD PTR _x$[ebp], xmm0
  0003a	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ??0XVector@Math@@QAE@XZ	; Math::XVector::XVector
; Line 535
  00045	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00048	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR _x$[ebp]
  0004c	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; Line 536
  0004f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	8b e3		 mov	 esp, ebx
  00057	5b		 pop	 ebx
  00058	c3		 ret	 0
??0XVector4@Math@@QAE@T__m128@@@Z ENDP			; Math::XVector4::XVector4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XVector4@Math@@QAE@M@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_this$ = -4						; size = 4
_f$ = 8							; size = 4
??0XVector4@Math@@QAE@M@Z PROC				; Math::XVector4::XVector4, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 542
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ??0XVector@Math@@QAE@XZ	; Math::XVector::XVector
; Line 544
  00041	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _f$[ebx]
  00046	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  0004a	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0004e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00051	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  00055	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; Line 545
  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	8b e3		 mov	 esp, ebx
  00060	5b		 pop	 ebx
  00061	c2 04 00	 ret	 4
??0XVector4@Math@@QAE@M@Z ENDP				; Math::XVector4::XVector4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XQuaternion@Math@@QAE@T__m128@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_x$ = -16						; size = 16
_$initVBases$ = 8					; size = 4
??0XQuaternion@Math@@QAE@T__m128@@@Z PROC		; Math::XQuaternion::XQuaternion, COMDAT
; _this$ = ecx
; _x$ = xmm0
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 745
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	0f 29 45 f0	 movaps	 XMMWORD PTR _x$[ebp], xmm0
  0003a	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	83 7b 08 00	 cmp	 DWORD PTR _$initVBases$[ebx], 0
  00041	74 14		 je	 SHORT $LN1@XQuaternio
  00043	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00046	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8XQuaternion@Math@@7B@
  0004c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	83 c1 10	 add	 ecx, 16			; 00000010H
  00052	e8 00 00 00 00	 call	 ??0XVector@Math@@QAE@XZ	; Math::XVector::XVector
$LN1@XQuaternio:
; Line 747
  00057	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00062	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR _x$[ebp]
  00066	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; Line 748
  00069	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	8b e3		 mov	 esp, ebx
  00071	5b		 pop	 ebx
  00072	c2 04 00	 ret	 4
??0XQuaternion@Math@@QAE@T__m128@@@Z ENDP		; Math::XQuaternion::XQuaternion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??XXQuaternion@Math@@QAEAAV01@AAV01@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 32
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_a$ = 8							; size = 4
??XXQuaternion@Math@@QAEAAV01@AAV01@@Z PROC		; Math::XQuaternion::operator*=, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 787
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 788
  00038	8b 43 08	 mov	 eax, DWORD PTR _a$[ebx]
  0003b	50		 push	 eax
  0003c	8d 4d d0	 lea	 ecx, DWORD PTR $T1[ebp]
  0003f	51		 push	 ecx
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ??DXQuaternion@Math@@QBE?AV01@AAV01@@Z ; Math::XQuaternion::operator*
  00048	50		 push	 eax
  00049	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ??4XQuaternion@Math@@QAEAAV01@ABV01@@Z
; Line 789
  00051	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; Line 790
  00054	5f		 pop	 edi
  00055	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00058	33 cd		 xor	 ecx, ebp
  0005a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	8b e3		 mov	 esp, ebx
  00064	5b		 pop	 ebx
  00065	c2 04 00	 ret	 4
??XXQuaternion@Math@@QAEAAV01@AAV01@@Z ENDP		; Math::XQuaternion::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4XQuaternion@Math@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
tv83 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4XQuaternion@Math@@QAEAAV01@ABV01@@Z PROC		; Math::XQuaternion::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	83 7d 08 00	 cmp	 DWORD PTR ___that$[ebp], 0
  0001b	75 09		 jne	 SHORT $LN3@operator
  0001d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
  00024	eb 0e		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00026	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  0002e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00031	89 55 f8	 mov	 DWORD PTR tv83[ebp], edx
$LN4@operator:
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0003f	8b 45 f8	 mov	 eax, DWORD PTR tv83[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	89 0a		 mov	 DWORD PTR [edx], ecx
  00046	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00049	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0004c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004f	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00052	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00055	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
??4XQuaternion@Math@@QAEAAV01@ABV01@@Z ENDP		; Math::XQuaternion::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMatrix4x4@Math@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMatrix4x4@Math@@QAE@XZ PROC				; Math::XMatrix4x4::XMatrix4x4, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 850
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0XMatrix4x4@Math@@QAE@XZ ENDP				; Math::XMatrix4x4::XMatrix4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMatrix4x4@Math@@QAE@PBM@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
$T2 = -64						; size = 16
$T3 = -48						; size = 16
$T4 = -32						; size = 16
_this$ = -4						; size = 4
_m$ = 8							; size = 4
??0XMatrix4x4@Math@@QAE@PBM@Z PROC			; Math::XMatrix4x4::XMatrix4x4, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 856
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 50	 sub	 esp, 80			; 00000050H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0001e	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 858
  0002e	8b 43 08	 mov	 eax, DWORD PTR _m$[ebx]
  00031	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00034	0f 29 45 e0	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00038	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0003d	6b d1 00	 imul	 edx, ecx, 0
  00040	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  00043	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR $T4[ebp]
  00047	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
; Line 859
  0004a	8b 43 08	 mov	 eax, DWORD PTR _m$[ebx]
  0004d	83 c0 10	 add	 eax, 16			; 00000010H
  00050	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00053	0f 29 45 d0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00057	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0005c	c1 e1 00	 shl	 ecx, 0
  0005f	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  00062	0f 10 45 d0	 movups	 xmm0, XMMWORD PTR $T3[ebp]
  00066	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; Line 860
  00069	8b 53 08	 mov	 edx, DWORD PTR _m$[ebx]
  0006c	83 c2 20	 add	 edx, 32			; 00000020H
  0006f	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00072	0f 29 45 c0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00076	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0007b	d1 e0		 shl	 eax, 1
  0007d	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00080	0f 10 45 c0	 movups	 xmm0, XMMWORD PTR $T2[ebp]
  00084	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; Line 861
  00087	8b 4b 08	 mov	 ecx, DWORD PTR _m$[ebx]
  0008a	83 c1 30	 add	 ecx, 48			; 00000030H
  0008d	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00090	0f 29 45 b0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00094	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00099	6b c2 03	 imul	 eax, edx, 3
  0009c	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  0009f	0f 10 45 b0	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  000a3	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; Line 862
  000a6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a9	5f		 pop	 edi
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	8b e3		 mov	 esp, ebx
  000af	5b		 pop	 ebx
  000b0	c2 04 00	 ret	 4
??0XMatrix4x4@Math@@QAE@PBM@Z ENDP			; Math::XMatrix4x4::XMatrix4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetTranslation@XMatrix4x4@Math@@QAEAAV12@ABVXVector3@2@@Z
_TEXT	SEGMENT
tv138 = -112						; size = 16
tv73 = -88						; size = 4
$T1 = -84						; size = 4
$T2 = -80						; size = 16
$T3 = -64						; size = 16
$T4 = -48						; size = 16
$T5 = -32						; size = 16
_this$ = -4						; size = 4
_Translation$ = 8					; size = 4
?SetTranslation@XMatrix4x4@Math@@QAEAAV12@ABVXVector3@2@@Z PROC ; Math::XMatrix4x4::SetTranslation, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.h
; Line 926
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 70	 sub	 esp, 112		; 00000070H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  0001e	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 927
  0002e	8d 45 d0	 lea	 eax, DWORD PTR $T4[ebp]
  00031	50		 push	 eax
  00032	8b 4b 08	 mov	 ecx, DWORD PTR _Translation$[ebx]
  00035	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  0003a	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  0003e	0f 29 45 e0	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00042	b9 04 00 00 00	 mov	 ecx, 4
  00047	6b d1 03	 imul	 edx, ecx, 3
  0004a	f3 0f 10 44 15
	e0		 movss	 xmm0, DWORD PTR $T5[ebp+edx]
  00050	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00057	9f		 lahf
  00058	f6 c4 44	 test	 ah, 68			; 00000044H
  0005b	7a 09		 jp	 SHORT $LN4@SetTransla
  0005d	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  00064	eb 07		 jmp	 SHORT $LN5@SetTransla
$LN4@SetTransla:
  00066	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN5@SetTransla:
  0006d	f3 0f 2a 45 a8	 cvtsi2ss xmm0, DWORD PTR tv73[ebp]
  00072	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00079	9f		 lahf
  0007a	f6 c4 44	 test	 ah, 68			; 00000044H
  0007d	7a 15		 jp	 SHORT $LN1@SetTransla
  0007f	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR $T1[ebp], 1
  00086	68 00 00 00 00	 push	 OFFSET __TI1H
  0008b	8d 45 ac	 lea	 eax, DWORD PTR $T1[ebp]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@SetTransla:
; Line 928
  00094	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?sm_kxHighOne@XMatrix4x4@Math@@1T__m128@@B ; Math::XMatrix4x4::sm_kxHighOne
  0009b	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  0009e	51		 push	 ecx
  0009f	8b 4b 08	 mov	 ecx, DWORD PTR _Translation$[ebx]
  000a2	0f 29 45 90	 movaps	 XMMWORD PTR tv138[ebp], xmm0
  000a6	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  000ab	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000ae	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR tv138[ebp]
  000b2	0f 56 c1	 orps	 xmm0, xmm1
  000b5	0f 29 45 b0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000b9	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000be	6b c2 03	 imul	 eax, edx, 3
  000c1	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  000c4	0f 10 45 b0	 movups	 xmm0, XMMWORD PTR $T2[ebp]
  000c8	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; Line 929
  000cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN2@SetTransla:
; Line 930
  000ce	5f		 pop	 edi
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	8b e3		 mov	 esp, ebx
  000d4	5b		 pop	 ebx
  000d5	c2 04 00	 ret	 4
?SetTranslation@XMatrix4x4@Math@@QAEAAV12@ABVXVector3@2@@Z ENDP ; Math::XMatrix4x4::SetTranslation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__E?sm_kxTranslationMask@XVector@Math@@1T__m128@@B@@YAXXZ
text$di	SEGMENT
??__E?sm_kxTranslationMask@XVector@Math@@1T__m128@@B@@YAXXZ PROC ; `dynamic initializer for 'Math::XVector::sm_kxTranslationMask'', COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 38
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR _kaTranslationMask
  0000a	0f 29 05 00 00
	00 00		 movaps	 XMMWORD PTR ?sm_kxTranslationMask@XVector@Math@@1T__m128@@B, xmm0 ; Math::XVector::sm_kxTranslationMask
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??__E?sm_kxTranslationMask@XVector@Math@@1T__m128@@B@@YAXXZ ENDP ; `dynamic initializer for 'Math::XVector::sm_kxTranslationMask''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__E?Zero@XVector3@Math@@2V12@B@@YAXXZ
text$di	SEGMENT
??__E?Zero@XVector3@Math@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Math::XVector3::Zero'', COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 40
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0000c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00011	b9 00 00 00 00	 mov	 ecx, OFFSET ?Zero@XVector3@Math@@2V12@B ; Math::XVector3::Zero
  00016	e8 00 00 00 00	 call	 ??0XVector3@Math@@QAE@M@Z ; Math::XVector3::XVector3
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??__E?Zero@XVector3@Math@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Math::XVector3::Zero''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__E?One@XVector3@Math@@2V12@B@@YAXXZ
text$di	SEGMENT
??__E?One@XVector3@Math@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Math::XVector3::One'', COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 41
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0000c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00011	b9 00 00 00 00	 mov	 ecx, OFFSET ?One@XVector3@Math@@2V12@B ; Math::XVector3::One
  00016	e8 00 00 00 00	 call	 ??0XVector3@Math@@QAE@M@Z ; Math::XVector3::XVector3
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??__E?One@XVector3@Math@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Math::XVector3::One''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__E?UnitX@XVector3@Math@@2V12@B@@YAXXZ
text$di	SEGMENT
??__E?UnitX@XVector3@Math@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Math::XVector3::UnitX'', COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 42
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?sm_kxUnitX@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxUnitX
  0000a	b9 00 00 00 00	 mov	 ecx, OFFSET ?UnitX@XVector3@Math@@2V12@B ; Math::XVector3::UnitX
  0000f	e8 00 00 00 00	 call	 ??0XVector3@Math@@QAE@T__m128@@@Z ; Math::XVector3::XVector3
  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??__E?UnitX@XVector3@Math@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Math::XVector3::UnitX''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__E?UnitY@XVector3@Math@@2V12@B@@YAXXZ
text$di	SEGMENT
??__E?UnitY@XVector3@Math@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Math::XVector3::UnitY'', COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 43
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?sm_kxUnitY@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxUnitY
  0000a	b9 00 00 00 00	 mov	 ecx, OFFSET ?UnitY@XVector3@Math@@2V12@B ; Math::XVector3::UnitY
  0000f	e8 00 00 00 00	 call	 ??0XVector3@Math@@QAE@T__m128@@@Z ; Math::XVector3::XVector3
  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??__E?UnitY@XVector3@Math@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Math::XVector3::UnitY''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__E?UnitZ@XVector3@Math@@2V12@B@@YAXXZ
text$di	SEGMENT
??__E?UnitZ@XVector3@Math@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Math::XVector3::UnitZ'', COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 44
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?sm_kxUnitZ@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxUnitZ
  0000a	b9 00 00 00 00	 mov	 ecx, OFFSET ?UnitZ@XVector3@Math@@2V12@B ; Math::XVector3::UnitZ
  0000f	e8 00 00 00 00	 call	 ??0XVector3@Math@@QAE@T__m128@@@Z ; Math::XVector3::XVector3
  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??__E?UnitZ@XVector3@Math@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Math::XVector3::UnitZ''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__E?Zero@XVector4@Math@@2V12@B@@YAXXZ
text$di	SEGMENT
??__E?Zero@XVector4@Math@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Math::XVector4::Zero'', COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 46
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0000c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00011	51		 push	 ecx
  00012	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0001a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001f	51		 push	 ecx
  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00028	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002d	51		 push	 ecx
  0002e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET ?Zero@XVector4@Math@@2V12@B ; Math::XVector4::Zero
  00040	e8 00 00 00 00	 call	 ??0XVector4@Math@@QAE@MMMM@Z ; Math::XVector4::XVector4
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
??__E?Zero@XVector4@Math@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Math::XVector4::Zero''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__E?One@XVector4@Math@@2V12@B@@YAXXZ
text$di	SEGMENT
??__E?One@XVector4@Math@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Math::XVector4::One'', COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 47
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0000c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00011	b9 00 00 00 00	 mov	 ecx, OFFSET ?One@XVector4@Math@@2V12@B ; Math::XVector4::One
  00016	e8 00 00 00 00	 call	 ??0XVector4@Math@@QAE@M@Z ; Math::XVector4::XVector4
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??__E?One@XVector4@Math@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Math::XVector4::One''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__E?Zero@XQuaternion@Math@@2V12@B@@YAXXZ
text$di	SEGMENT
??__E?Zero@XQuaternion@Math@@2V12@B@@YAXXZ PROC		; `dynamic initializer for 'Math::XQuaternion::Zero'', COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 49
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 01		 push	 1
  00005	51		 push	 ecx
  00006	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0000e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00013	51		 push	 ecx
  00014	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0001c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00021	51		 push	 ecx
  00022	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0002a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002f	51		 push	 ecx
  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET ?Zero@XQuaternion@Math@@2V12@B ; Math::XQuaternion::Zero
  00042	e8 00 00 00 00	 call	 ??0XQuaternion@Math@@QAE@MMMM@Z ; Math::XQuaternion::XQuaternion
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??__E?Zero@XQuaternion@Math@@2V12@B@@YAXXZ ENDP		; `dynamic initializer for 'Math::XQuaternion::Zero''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__E?Identity@XMatrix4x4@Math@@2V12@B@@YAXXZ
text$di	SEGMENT
??__E?Identity@XMatrix4x4@Math@@2V12@B@@YAXXZ PROC	; `dynamic initializer for 'Math::XMatrix4x4::Identity'', COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 51
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET _kaIdentityMatrix
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?Identity@XMatrix4x4@Math@@2V12@B ; Math::XMatrix4x4::Identity
  0000d	e8 00 00 00 00	 call	 ??0XMatrix4x4@Math@@QAE@PBM@Z ; Math::XMatrix4x4::XMatrix4x4
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__E?Identity@XMatrix4x4@Math@@2V12@B@@YAXXZ ENDP	; `dynamic initializer for 'Math::XMatrix4x4::Identity''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -144						; size = 16
$T2 = -128						; size = 16
$T3 = -112						; size = 16
_xz$ = -96						; size = 16
$T4 = -80						; size = 16
_xy$ = -64						; size = 16
$T5 = -48						; size = 16
_xx$ = -32						; size = 16
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
??0XVector3@Math@@QAE@MMM@Z PROC			; Math::XVector3::XVector3
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 60
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-144]
  00024	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ??0XVector@Math@@QAE@XZ	; Math::XVector::XVector
; Line 61
  0003c	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _x$[ebx]
  00041	0f 29 45 d0	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00045	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00049	0f 29 45 e0	 movaps	 XMMWORD PTR _xx$[ebp], xmm0
; Line 62
  0004d	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _y$[ebx]
  00052	0f 29 45 b0	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00056	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  0005a	0f 29 45 c0	 movaps	 XMMWORD PTR _xy$[ebp], xmm0
; Line 63
  0005e	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR _z$[ebx]
  00063	0f 29 45 90	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00067	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0006b	0f 29 45 a0	 movaps	 XMMWORD PTR _xz$[ebp], xmm0
; Line 65
  0006f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _xx$[ebp]
  00073	0f 14 45 c0	 unpcklps xmm0, XMMWORD PTR _xy$[ebp]
  00077	0f 29 45 80	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0007b	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _xz$[ebp]
  0007f	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR $T2[ebp]
  00083	0f 16 c8	 movlhps xmm1, xmm0
  00086	0f 29 8d 70 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm1
  0008d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00090	0f 10 85 70 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  00097	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; Line 66
  0009a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009d	5f		 pop	 edi
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	8b e3		 mov	 esp, ebx
  000a3	5b		 pop	 ebx
  000a4	c2 0c 00	 ret	 12			; 0000000cH
??0XVector3@Math@@QAE@MMM@Z ENDP			; Math::XVector3::XVector3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -192						; size = 16
$T2 = -176						; size = 16
$T3 = -160						; size = 16
$T4 = -144						; size = 16
_xw$ = -128						; size = 16
$T5 = -112						; size = 16
_xz$ = -96						; size = 16
$T6 = -80						; size = 16
_xy$ = -64						; size = 16
$T7 = -48						; size = 16
_xx$ = -32						; size = 16
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_w$ = 20						; size = 4
??0XVector4@Math@@QAE@MMMM@Z PROC			; Math::XVector4::XVector4
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 75
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00024	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ??0XVector@Math@@QAE@XZ	; Math::XVector::XVector
; Line 76
  0003c	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _x$[ebx]
  00041	0f 29 45 d0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00045	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00049	0f 29 45 e0	 movaps	 XMMWORD PTR _xx$[ebp], xmm0
; Line 77
  0004d	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _y$[ebx]
  00052	0f 29 45 b0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00056	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0005a	0f 29 45 c0	 movaps	 XMMWORD PTR _xy$[ebp], xmm0
; Line 78
  0005e	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR _z$[ebx]
  00063	0f 29 45 90	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00067	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  0006b	0f 29 45 a0	 movaps	 XMMWORD PTR _xz$[ebp], xmm0
; Line 79
  0006f	f3 0f 10 43 14	 movss	 xmm0, DWORD PTR _w$[ebx]
  00074	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0007b	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00082	0f 29 45 80	 movaps	 XMMWORD PTR _xw$[ebp], xmm0
; Line 81
  00086	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _xz$[ebp]
  0008a	0f 14 45 80	 unpcklps xmm0, XMMWORD PTR _xw$[ebp]
  0008e	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00095	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _xx$[ebp]
  00099	0f 14 45 c0	 unpcklps xmm0, XMMWORD PTR _xy$[ebp]
  0009d	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  000a4	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000ab	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR $T3[ebp]
  000b2	0f 16 c8	 movlhps xmm1, xmm0
  000b5	0f 29 8d 40 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm1
  000bc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	0f 10 85 40 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  000c6	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; Line 82
  000c9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cc	5f		 pop	 edi
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	8b e3		 mov	 esp, ebx
  000d2	5b		 pop	 ebx
  000d3	c2 10 00	 ret	 16			; 00000010H
??0XVector4@Math@@QAE@MMMM@Z ENDP			; Math::XVector4::XVector4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -192						; size = 16
$T2 = -176						; size = 16
$T3 = -160						; size = 16
$T4 = -144						; size = 16
_xw$ = -128						; size = 16
$T5 = -112						; size = 16
_xz$ = -96						; size = 16
$T6 = -80						; size = 16
_xy$ = -64						; size = 16
$T7 = -48						; size = 16
_xx$ = -32						; size = 16
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_w$ = 20						; size = 4
_$initVBases$ = 24					; size = 4
??0XQuaternion@Math@@QAE@MMMM@Z PROC			; Math::XQuaternion::XQuaternion
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 91
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00024	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00034	83 7b 18 00	 cmp	 DWORD PTR _$initVBases$[ebx], 0
  00038	74 14		 je	 SHORT $LN1@XQuaternio
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8XQuaternion@Math@@7B@
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	83 c1 10	 add	 ecx, 16			; 00000010H
  00049	e8 00 00 00 00	 call	 ??0XVector@Math@@QAE@XZ	; Math::XVector::XVector
$LN1@XQuaternio:
; Line 92
  0004e	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _x$[ebx]
  00053	0f 29 45 d0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00057	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0005b	0f 29 45 e0	 movaps	 XMMWORD PTR _xx$[ebp], xmm0
; Line 93
  0005f	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _y$[ebx]
  00064	0f 29 45 b0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00068	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0006c	0f 29 45 c0	 movaps	 XMMWORD PTR _xy$[ebp], xmm0
; Line 94
  00070	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR _z$[ebx]
  00075	0f 29 45 90	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00079	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  0007d	0f 29 45 a0	 movaps	 XMMWORD PTR _xz$[ebp], xmm0
; Line 95
  00081	f3 0f 10 43 14	 movss	 xmm0, DWORD PTR _w$[ebx]
  00086	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0008d	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00094	0f 29 45 80	 movaps	 XMMWORD PTR _xw$[ebp], xmm0
; Line 97
  00098	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _xz$[ebp]
  0009c	0f 14 45 80	 unpcklps xmm0, XMMWORD PTR _xw$[ebp]
  000a0	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000a7	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _xx$[ebp]
  000ab	0f 14 45 c0	 unpcklps xmm0, XMMWORD PTR _xy$[ebp]
  000af	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  000b6	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000bd	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR $T3[ebp]
  000c4	0f 16 c8	 movlhps xmm1, xmm0
  000c7	0f 29 8d 40 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm1
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d6	03 42 04	 add	 eax, DWORD PTR [edx+4]
  000d9	0f 10 85 40 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  000e0	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; Line 98
  000e3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e6	5f		 pop	 edi
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	8b e3		 mov	 esp, ebx
  000ec	5b		 pop	 ebx
  000ed	c2 14 00	 ret	 20			; 00000014H
??0XQuaternion@Math@@QAE@MMMM@Z ENDP			; Math::XQuaternion::XQuaternion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv196 = -200						; size = 4
tv91 = -196						; size = 4
tv77 = -192						; size = 4
tv167 = -188						; size = 4
$T1 = -184						; size = 4
$T2 = -180						; size = 4
$T3 = -176						; size = 16
$T4 = -160						; size = 16
_xCos$ = -144						; size = 16
$T5 = -128						; size = 16
_xSin$ = -96						; size = 16
$T6 = -64						; size = 16
$T7 = -48						; size = 16
$T8 = -32						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Axis$ = 8						; size = 4
_Angle$ = 12						; size = 4
_$initVBases$ = 16					; size = 4
??0XQuaternion@Math@@QAE@ABVXVector3@1@M@Z PROC		; Math::XQuaternion::XQuaternion
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 105
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00024	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0003e	83 7b 10 00	 cmp	 DWORD PTR _$initVBases$[ebx], 0
  00042	74 14		 je	 SHORT $LN3@XQuaternio
  00044	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00047	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8XQuaternion@Math@@7B@
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 10	 add	 ecx, 16			; 00000010H
  00053	e8 00 00 00 00	 call	 ??0XVector@Math@@QAE@XZ	; Math::XVector::XVector
$LN3@XQuaternio:
; Line 107
  00058	8d 4d e0	 lea	 ecx, DWORD PTR $T8[ebp]
  0005b	51		 push	 ecx
  0005c	8b 4b 08	 mov	 ecx, DWORD PTR _Axis$[ebx]
  0005f	e8 00 00 00 00	 call	 ?Magnitude@XVector3@Math@@QBE?AVXScalar@2@XZ ; Math::XVector3::Magnitude
  00064	8b c8		 mov	 ecx, eax
  00066	e8 00 00 00 00	 call	 ??BXScalar@Math@@QBEMXZ	; Math::XScalar::operator float
  0006b	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv167[ebp]
  00071	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv167[ebp]
  00079	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00080	9f		 lahf
  00081	f6 c4 44	 test	 ah, 68			; 00000044H
  00084	7a 0c		 jp	 SHORT $LN6@XQuaternio
  00086	c7 85 40 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv77[ebp], 1
  00090	eb 0a		 jmp	 SHORT $LN7@XQuaternio
$LN6@XQuaternio:
  00092	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN7@XQuaternio:
  0009c	f3 0f 2a 85 40
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR tv77[ebp]
  000a4	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@3f800000
  000ab	9f		 lahf
  000ac	f6 c4 44	 test	 ah, 68			; 00000044H
  000af	7a 1b		 jp	 SHORT $LN2@XQuaternio
  000b1	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], OFFSET $SG4294967114
  000bb	68 00 00 00 00	 push	 OFFSET __TI2PAD
  000c0	8d 95 4c ff ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@XQuaternio:
; Line 108
  000cc	8d 45 c0	 lea	 eax, DWORD PTR $T6[ebp]
  000cf	50		 push	 eax
  000d0	8b 4b 08	 mov	 ecx, DWORD PTR _Axis$[ebx]
  000d3	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  000d8	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  000dc	0f 29 45 d0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  000e0	b9 04 00 00 00	 mov	 ecx, 4
  000e5	6b d1 03	 imul	 edx, ecx, 3
  000e8	f3 0f 10 44 15
	d0		 movss	 xmm0, DWORD PTR $T7[ebp+edx]
  000ee	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  000f5	9f		 lahf
  000f6	f6 c4 44	 test	 ah, 68			; 00000044H
  000f9	7a 0c		 jp	 SHORT $LN8@XQuaternio
  000fb	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv91[ebp], 1
  00105	eb 0a		 jmp	 SHORT $LN9@XQuaternio
$LN8@XQuaternio:
  00107	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv91[ebp], 0
$LN9@XQuaternio:
  00111	f3 0f 2a 85 3c
	ff ff ff	 cvtsi2ss xmm0, DWORD PTR tv91[ebp]
  00119	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00120	9f		 lahf
  00121	f6 c4 44	 test	 ah, 68			; 00000044H
  00124	7a 1b		 jp	 SHORT $LN1@XQuaternio
  00126	c7 85 48 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR $T1[ebp], 1
  00130	68 00 00 00 00	 push	 OFFSET __TI1H
  00135	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  0013b	50		 push	 eax
  0013c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@XQuaternio:
; Line 110
  00141	8d 4d a0	 lea	 ecx, DWORD PTR _xSin$[ebp]
  00144	51		 push	 ecx
  00145	51		 push	 ecx
  00146	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _Angle$[ebx]
  0014b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00150	e8 00 00 00 00	 call	 ?Sin@Angle@Math@@SAMM@Z	; Math::Angle::Sin
  00155	d9 1c 24	 fstp	 DWORD PTR [esp]
  00158	8d 55 80	 lea	 edx, DWORD PTR $T5[ebp]
  0015b	52		 push	 edx
  0015c	8b 4b 08	 mov	 ecx, DWORD PTR _Axis$[ebx]
  0015f	e8 00 00 00 00	 call	 ??DXVector3@Math@@QBE?AV01@M@Z ; Math::XVector3::operator*
  00164	8b c8		 mov	 ecx, eax
  00166	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
; Line 111
  0016b	51		 push	 ecx
  0016c	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _Angle$[ebx]
  00171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00176	e8 00 00 00 00	 call	 ?Cos@Angle@Math@@SAMM@Z	; Math::Angle::Cos
  0017b	83 c4 04	 add	 esp, 4
  0017e	d9 9d 38 ff ff
	ff		 fstp	 DWORD PTR tv196[ebp]
  00184	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR tv196[ebp]
  0018c	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00193	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  0019a	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _xCos$[ebp], xmm0
; Line 112
  001a1	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _xSin$[ebp]
  001a5	0f 56 85 70 ff
	ff ff		 orps	 xmm0, XMMWORD PTR _xCos$[ebp]
  001ac	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  001b3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001b6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b8	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001bb	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001be	0f 10 85 50 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T3[ebp]
  001c5	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
; Line 113
  001c8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@XQuaternio:
  001cb	52		 push	 edx
  001cc	8b cd		 mov	 ecx, ebp
  001ce	50		 push	 eax
  001cf	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@XQuaternio
  001d5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001da	58		 pop	 eax
  001db	5a		 pop	 edx
  001dc	5f		 pop	 edi
  001dd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e0	33 cd		 xor	 ecx, ebp
  001e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e7	8b e5		 mov	 esp, ebp
  001e9	5d		 pop	 ebp
  001ea	8b e3		 mov	 esp, ebx
  001ec	5b		 pop	 ebx
  001ed	c2 0c 00	 ret	 12			; 0000000cH
$LN12@XQuaternio:
  001f0	01 00 00 00	 DD	 1
  001f4	00 00 00 00	 DD	 $LN11@XQuaternio
$LN11@XQuaternio:
  001f8	a0 ff ff ff	 DD	 -96			; ffffffa0H
  001fc	10 00 00 00	 DD	 16			; 00000010H
  00200	00 00 00 00	 DD	 $LN10@XQuaternio
$LN10@XQuaternio:
  00204	78		 DB	 120			; 00000078H
  00205	53		 DB	 83			; 00000053H
  00206	69		 DB	 105			; 00000069H
  00207	6e		 DB	 110			; 0000006eH
  00208	00		 DB	 0
??0XQuaternion@Math@@QAE@ABVXVector3@1@M@Z ENDP		; Math::XQuaternion::XQuaternion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -192						; size = 32
_qz$ = -144						; size = 32
_qy$ = -96						; size = 32
_qx$ = -48						; size = 32
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Angles$ = 8						; size = 4
_$initVBases$ = 12					; size = 4
??0XQuaternion@Math@@QAE@AAVXVector3@1@@Z PROC		; Math::XQuaternion::XQuaternion
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 119
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00024	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0003e	83 7b 0c 00	 cmp	 DWORD PTR _$initVBases$[ebx], 0
  00042	74 14		 je	 SHORT $LN1@XQuaternio
  00044	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00047	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_8XQuaternion@Math@@7B@
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 10	 add	 ecx, 16			; 00000010H
  00053	e8 00 00 00 00	 call	 ??0XVector@Math@@QAE@XZ	; Math::XVector::XVector
$LN1@XQuaternio:
; Line 124
  00058	6a 01		 push	 1
  0005a	8b 4b 08	 mov	 ecx, DWORD PTR _Angles$[ebx]
  0005d	e8 00 00 00 00	 call	 ?GetX@XVector@Math@@QAEMXZ ; Math::XVector::GetX
  00062	51		 push	 ecx
  00063	d9 1c 24	 fstp	 DWORD PTR [esp]
  00066	68 00 00 00 00	 push	 OFFSET ?UnitX@XVector3@Math@@2V12@B ; Math::XVector3::UnitX
  0006b	8d 4d d0	 lea	 ecx, DWORD PTR _qx$[ebp]
  0006e	e8 00 00 00 00	 call	 ??0XQuaternion@Math@@QAE@ABVXVector3@1@M@Z ; Math::XQuaternion::XQuaternion
; Line 125
  00073	6a 01		 push	 1
  00075	8b 4b 08	 mov	 ecx, DWORD PTR _Angles$[ebx]
  00078	e8 00 00 00 00	 call	 ?GetY@XVector@Math@@QAEMXZ ; Math::XVector::GetY
  0007d	51		 push	 ecx
  0007e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00081	68 00 00 00 00	 push	 OFFSET ?UnitY@XVector3@Math@@2V12@B ; Math::XVector3::UnitY
  00086	8d 4d a0	 lea	 ecx, DWORD PTR _qy$[ebp]
  00089	e8 00 00 00 00	 call	 ??0XQuaternion@Math@@QAE@ABVXVector3@1@M@Z ; Math::XQuaternion::XQuaternion
; Line 126
  0008e	6a 01		 push	 1
  00090	8b 4b 08	 mov	 ecx, DWORD PTR _Angles$[ebx]
  00093	e8 00 00 00 00	 call	 ?GetZ@XVector@Math@@QAEMXZ ; Math::XVector::GetZ
  00098	51		 push	 ecx
  00099	d9 1c 24	 fstp	 DWORD PTR [esp]
  0009c	68 00 00 00 00	 push	 OFFSET ?UnitZ@XVector3@Math@@2V12@B ; Math::XVector3::UnitZ
  000a1	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _qz$[ebp]
  000a7	e8 00 00 00 00	 call	 ??0XQuaternion@Math@@QAE@ABVXVector3@1@M@Z ; Math::XQuaternion::XQuaternion
; Line 128
  000ac	8d 4d a0	 lea	 ecx, DWORD PTR _qy$[ebp]
  000af	51		 push	 ecx
  000b0	8d 95 40 ff ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  000b6	52		 push	 edx
  000b7	8d 4d d0	 lea	 ecx, DWORD PTR _qx$[ebp]
  000ba	e8 00 00 00 00	 call	 ??DXQuaternion@Math@@QBE?AV01@AAV01@@Z ; Math::XQuaternion::operator*
  000bf	50		 push	 eax
  000c0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	e8 00 00 00 00	 call	 ??4XQuaternion@Math@@QAEAAV01@ABV01@@Z
; Line 129
  000c8	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _qz$[ebp]
  000ce	50		 push	 eax
  000cf	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	e8 00 00 00 00	 call	 ??XXQuaternion@Math@@QAEAAV01@AAV01@@Z ; Math::XQuaternion::operator*=
; Line 130
  000d7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000da	52		 push	 edx
  000db	8b cd		 mov	 ecx, ebp
  000dd	50		 push	 eax
  000de	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@XQuaternio
  000e4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e9	58		 pop	 eax
  000ea	5a		 pop	 edx
  000eb	5f		 pop	 edi
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ef	33 cd		 xor	 ecx, ebp
  000f1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	8b e3		 mov	 esp, ebx
  000fb	5b		 pop	 ebx
  000fc	c2 08 00	 ret	 8
  000ff	90		 npad	 1
$LN8@XQuaternio:
  00100	03 00 00 00	 DD	 3
  00104	00 00 00 00	 DD	 $LN7@XQuaternio
$LN7@XQuaternio:
  00108	d0 ff ff ff	 DD	 -48			; ffffffd0H
  0010c	20 00 00 00	 DD	 32			; 00000020H
  00110	00 00 00 00	 DD	 $LN4@XQuaternio
  00114	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00118	20 00 00 00	 DD	 32			; 00000020H
  0011c	00 00 00 00	 DD	 $LN5@XQuaternio
  00120	70 ff ff ff	 DD	 -144			; ffffff70H
  00124	20 00 00 00	 DD	 32			; 00000020H
  00128	00 00 00 00	 DD	 $LN6@XQuaternio
$LN6@XQuaternio:
  0012c	71		 DB	 113			; 00000071H
  0012d	7a		 DB	 122			; 0000007aH
  0012e	00		 DB	 0
$LN5@XQuaternio:
  0012f	71		 DB	 113			; 00000071H
  00130	79		 DB	 121			; 00000079H
  00131	00		 DB	 0
$LN4@XQuaternio:
  00132	71		 DB	 113			; 00000071H
  00133	78		 DB	 120			; 00000078H
  00134	00		 DB	 0
??0XQuaternion@Math@@QAE@AAVXVector3@1@@Z ENDP		; Math::XQuaternion::XQuaternion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Translation$ = 8					; size = 4
_Orientation$ = 12					; size = 4
??0XMatrix4x4@Math@@QAE@ABVXVector3@1@ABVXQuaternion@1@@Z PROC ; Math::XMatrix4x4::XMatrix4x4
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 137
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 138
  0000e	8b 45 08	 mov	 eax, DWORD PTR _Translation$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?SetTranslation@XMatrix4x4@Math@@QAEAAV12@ABVXVector3@2@@Z ; Math::XMatrix4x4::SetTranslation
; Line 139
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _Orientation$[ebp]
  0001d	51		 push	 ecx
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?SetOrientation@XMatrix4x4@Math@@QAEAAV12@ABVXQuaternion@2@@Z ; Math::XMatrix4x4::SetOrientation
; Line 140
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 c4 04	 add	 esp, 4
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
??0XMatrix4x4@Math@@QAE@ABVXVector3@1@ABVXQuaternion@1@@Z ENDP ; Math::XMatrix4x4::XMatrix4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -320						; size = 16
$T2 = -304						; size = 16
$T3 = -288						; size = 16
$T4 = -272						; size = 16
$T5 = -256						; size = 16
$T6 = -240						; size = 16
$T7 = -224						; size = 16
$T8 = -208						; size = 16
_t3$ = -192						; size = 16
$T9 = -176						; size = 16
$T10 = -160						; size = 16
$T11 = -144						; size = 16
_t2$ = -128						; size = 16
$T12 = -112						; size = 16
$T13 = -96						; size = 16
_t1$ = -80						; size = 16
$T14 = -64						; size = 16
$T15 = -48						; size = 16
_t0$ = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
??DXQuaternion@Math@@QBE?AV01@AAV01@@Z PROC		; Math::XQuaternion::operator*
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 147
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 40 01 00
	00		 sub	 esp, 320		; 00000140H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd c0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-320]
  00024	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 149
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  0004a	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0004d	0f c6 02 ff	 shufps	 xmm0, XMMWORD PTR [edx], 255 ; 000000ffH
  00051	0f 29 45 d0	 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00055	8b 4b 0c	 mov	 ecx, DWORD PTR _a$[ebx]
  00058	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005a	8b 43 0c	 mov	 eax, DWORD PTR _a$[ebx]
  0005d	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00060	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  00064	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  00067	0f 29 45 c0	 movaps	 XMMWORD PTR $T14[ebp], xmm0
  0006b	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  0006f	0f 29 45 e0	 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 151
  00073	8b 4b 0c	 mov	 ecx, DWORD PTR _a$[ebx]
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	8b 43 0c	 mov	 eax, DWORD PTR _a$[ebx]
  0007b	03 42 04	 add	 eax, DWORD PTR [edx+4]
  0007e	8b 4b 0c	 mov	 ecx, DWORD PTR _a$[ebx]
  00081	8b 11		 mov	 edx, DWORD PTR [ecx]
  00083	8b 4b 0c	 mov	 ecx, DWORD PTR _a$[ebx]
  00086	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00089	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0008c	0f c6 00 3f	 shufps	 xmm0, XMMWORD PTR [eax], 63 ; 0000003fH
  00090	0f 29 45 a0	 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00094	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00097	8b 02		 mov	 eax, DWORD PTR [edx]
  00099	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0009f	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000a2	0f 59 45 a0	 mulps	 xmm0, XMMWORD PTR $T13[ebp]
  000a6	0f 29 45 90	 movaps	 XMMWORD PTR $T12[ebp], xmm0
  000aa	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  000ae	0f 29 45 b0	 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 153
  000b2	8b 53 0c	 mov	 edx, DWORD PTR _a$[ebx]
  000b5	8b 02		 mov	 eax, DWORD PTR [edx]
  000b7	8b 4b 0c	 mov	 ecx, DWORD PTR _a$[ebx]
  000ba	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000bd	8b 53 0c	 mov	 edx, DWORD PTR _a$[ebx]
  000c0	8b 02		 mov	 eax, DWORD PTR [edx]
  000c2	8b 53 0c	 mov	 edx, DWORD PTR _a$[ebx]
  000c5	03 50 04	 add	 edx, DWORD PTR [eax+4]
  000c8	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  000cb	0f c6 01 52	 shufps	 xmm0, XMMWORD PTR [ecx], 82 ; 00000052H
  000cf	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  000d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000db	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000de	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000e1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e9	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  000ec	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000ef	0f c6 02 49	 shufps	 xmm0, XMMWORD PTR [edx], 73 ; 00000049H
  000f3	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  000fa	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  00101	0f 59 85 60 ff
	ff ff		 mulps	 xmm0, XMMWORD PTR $T10[ebp]
  00108	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  0010f	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00116	0f 29 45 80	 movaps	 XMMWORD PTR _t2$[ebp], xmm0
; Line 155
  0011a	8b 4b 0c	 mov	 ecx, DWORD PTR _a$[ebx]
  0011d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0011f	8b 43 0c	 mov	 eax, DWORD PTR _a$[ebx]
  00122	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00125	8b 4b 0c	 mov	 ecx, DWORD PTR _a$[ebx]
  00128	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012a	8b 4b 0c	 mov	 ecx, DWORD PTR _a$[ebx]
  0012d	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00130	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00133	0f c6 00 89	 shufps	 xmm0, XMMWORD PTR [eax], 137 ; 00000089H
  00137	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0013e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00141	8b 02		 mov	 eax, DWORD PTR [edx]
  00143	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00146	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00149	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0014c	8b 02		 mov	 eax, DWORD PTR [edx]
  0014e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00151	03 50 04	 add	 edx, DWORD PTR [eax+4]
  00154	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00157	0f c6 01 92	 shufps	 xmm0, XMMWORD PTR [ecx], 146 ; 00000092H
  0015b	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00162	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00169	0f 59 85 20 ff
	ff ff		 mulps	 xmm0, XMMWORD PTR $T7[ebp]
  00170	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00177	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0017e	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _t3$[ebp], xmm0
; Line 157
  00185	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _t1$[ebp]
  00189	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR ?sm_kxNegateW@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxNegateW
  00190	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00197	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  0019e	0f 29 45 b0	 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 158
  001a2	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _t2$[ebp]
  001a6	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR ?sm_kxNegateW@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxNegateW
  001ad	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  001b4	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  001bb	0f 29 45 80	 movaps	 XMMWORD PTR _t2$[ebp], xmm0
; Line 160
  001bf	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _t2$[ebp]
  001c3	0f 5c 85 40 ff
	ff ff		 subps	 xmm0, XMMWORD PTR _t3$[ebp]
  001ca	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  001d1	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  001d5	0f 58 45 b0	 addps	 xmm0, XMMWORD PTR _t1$[ebp]
  001d9	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  001e0	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  001e7	0f 58 85 d0 fe
	ff ff		 addps	 xmm0, XMMWORD PTR $T2[ebp]
  001ee	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  001f5	6a 01		 push	 1
  001f7	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  001fe	8b 4b 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebx]
  00201	e8 00 00 00 00	 call	 ??0XQuaternion@Math@@QAE@T__m128@@@Z ; Math::XQuaternion::XQuaternion
  00206	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 161
  00209	5f		 pop	 edi
  0020a	8b e5		 mov	 esp, ebp
  0020c	5d		 pop	 ebp
  0020d	8b e3		 mov	 esp, ebx
  0020f	5b		 pop	 ebx
  00210	c2 08 00	 ret	 8
??DXQuaternion@Math@@QBE?AV01@AAV01@@Z ENDP		; Math::XQuaternion::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -192						; size = 16
$T2 = -176						; size = 16
$T3 = -160						; size = 16
$T4 = -144						; size = 16
$T5 = -128						; size = 16
$T6 = -112						; size = 16
$T7 = -96						; size = 16
$T8 = -80						; size = 16
_xVecRes$ = -64						; size = 16
_xVec$ = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
??DXMatrix4x4@Math@@QBE?AVXVector3@1@ABV21@@Z PROC	; Math::XMatrix4x4::operator*
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 168
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00024	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 169
  00034	8d 45 e0	 lea	 eax, DWORD PTR _xVec$[ebp]
  00037	50		 push	 eax
  00038	8b 4b 0c	 mov	 ecx, DWORD PTR _a$[ebx]
  0003b	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
; Line 178
  00040	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _xVec$[ebp]
  00044	0f c6 45 e0 aa	 shufps	 xmm0, XMMWORD PTR _xVec$[ebp], 170 ; 000000aaH
  00049	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00050	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00055	d1 e1		 shl	 ecx, 1
  00057	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  0005a	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0005d	0f 59 85 70 ff
	ff ff		 mulps	 xmm0, XMMWORD PTR $T4[ebp]
  00064	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0006b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _xVec$[ebp]
  0006f	0f c6 45 e0 55	 shufps	 xmm0, XMMWORD PTR _xVec$[ebp], 85 ; 00000055H
  00074	0f 29 45 90	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00078	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0007d	c1 e2 00	 shl	 edx, 0
  00080	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  00083	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00086	0f 59 45 90	 mulps	 xmm0, XMMWORD PTR $T6[ebp]
  0008a	0f 29 45 80	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0008e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _xVec$[ebp]
  00092	0f c6 45 e0 00	 shufps	 xmm0, XMMWORD PTR _xVec$[ebp], 0
  00097	0f 29 45 b0	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  0009b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000a0	6b c8 00	 imul	 ecx, eax, 0
  000a3	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  000a6	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000a9	0f 59 45 b0	 mulps	 xmm0, XMMWORD PTR $T8[ebp]
  000ad	0f 29 45 a0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  000b1	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000b6	6b c2 03	 imul	 eax, edx, 3
  000b9	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  000bc	50		 push	 eax
  000bd	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000c3	51		 push	 ecx
  000c4	8d 55 80	 lea	 edx, DWORD PTR $T5[ebp]
  000c7	52		 push	 edx
  000c8	8d 45 a0	 lea	 eax, DWORD PTR $T7[ebp]
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?_mm_add4_ps_composite@@YA?AT__m128@@ABT1@000@Z ; _mm_add4_ps_composite
  000d1	83 c4 10	 add	 esp, 16			; 00000010H
  000d4	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000db	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000e2	0f 29 45 c0	 movaps	 XMMWORD PTR _xVecRes$[ebp], xmm0
; Line 180
  000e6	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _xVecRes$[ebp]
  000ea	0f 54 05 00 00
	00 00		 andps	 xmm0, XMMWORD PTR ?sm_kxTranslationMask@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxTranslationMask
  000f1	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000f8	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  000ff	8b 4b 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebx]
  00102	e8 00 00 00 00	 call	 ??0XVector3@Math@@QAE@T__m128@@@Z ; Math::XVector3::XVector3
  00107	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 181
  0010a	52		 push	 edx
  0010b	8b cd		 mov	 ecx, ebp
  0010d	50		 push	 eax
  0010e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@operator
  00114	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00119	58		 pop	 eax
  0011a	5a		 pop	 edx
  0011b	5f		 pop	 edi
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	8b e3		 mov	 esp, ebx
  00121	5b		 pop	 ebx
  00122	c2 08 00	 ret	 8
  00125	8d 49 00	 npad	 3
$LN5@operator:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN4@operator
$LN4@operator:
  00130	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00134	10 00 00 00	 DD	 16			; 00000010H
  00138	00 00 00 00	 DD	 $LN3@operator
$LN3@operator:
  0013c	78		 DB	 120			; 00000078H
  0013d	56		 DB	 86			; 00000056H
  0013e	65		 DB	 101			; 00000065H
  0013f	63		 DB	 99			; 00000063H
  00140	00		 DB	 0
??DXMatrix4x4@Math@@QBE?AVXVector3@1@ABV21@@Z ENDP	; Math::XMatrix4x4::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -208						; size = 16
$T2 = -192						; size = 16
$T3 = -176						; size = 16
$T4 = -160						; size = 16
$T5 = -144						; size = 16
$T6 = -128						; size = 16
$T7 = -112						; size = 16
$T8 = -96						; size = 16
$T9 = -80						; size = 16
_xVecRes$ = -64						; size = 16
_xVec$ = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
??DXMatrix4x4@Math@@QBE?AVXVector4@1@ABV21@@Z PROC	; Math::XMatrix4x4::operator*
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 188
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00024	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 189
  00034	8d 45 e0	 lea	 eax, DWORD PTR _xVec$[ebp]
  00037	50		 push	 eax
  00038	8b 4b 0c	 mov	 ecx, DWORD PTR _a$[ebx]
  0003b	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
; Line 198
  00040	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _xVec$[ebp]
  00044	0f c6 45 e0 ff	 shufps	 xmm0, XMMWORD PTR _xVec$[ebp], 255 ; 000000ffH
  00049	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00050	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00055	6b d1 03	 imul	 edx, ecx, 3
  00058	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  0005b	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0005e	0f 59 85 50 ff
	ff ff		 mulps	 xmm0, XMMWORD PTR $T3[ebp]
  00065	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0006c	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _xVec$[ebp]
  00070	0f c6 45 e0 aa	 shufps	 xmm0, XMMWORD PTR _xVec$[ebp], 170 ; 000000aaH
  00075	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0007c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00081	d1 e0		 shl	 eax, 1
  00083	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00086	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00089	0f 59 85 70 ff
	ff ff		 mulps	 xmm0, XMMWORD PTR $T5[ebp]
  00090	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00097	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _xVec$[ebp]
  0009b	0f c6 45 e0 55	 shufps	 xmm0, XMMWORD PTR _xVec$[ebp], 85 ; 00000055H
  000a0	0f 29 45 90	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  000a4	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000a9	c1 e1 00	 shl	 ecx, 0
  000ac	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  000af	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000b2	0f 59 45 90	 mulps	 xmm0, XMMWORD PTR $T7[ebp]
  000b6	0f 29 45 80	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  000ba	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _xVec$[ebp]
  000be	0f c6 45 e0 00	 shufps	 xmm0, XMMWORD PTR _xVec$[ebp], 0
  000c3	0f 29 45 b0	 movaps	 XMMWORD PTR $T9[ebp], xmm0
  000c7	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000cc	6b c2 00	 imul	 eax, edx, 0
  000cf	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  000d2	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000d5	0f 59 45 b0	 mulps	 xmm0, XMMWORD PTR $T9[ebp]
  000d9	0f 29 45 a0	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  000dd	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000e3	51		 push	 ecx
  000e4	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  000ea	52		 push	 edx
  000eb	8d 45 80	 lea	 eax, DWORD PTR $T6[ebp]
  000ee	50		 push	 eax
  000ef	8d 4d a0	 lea	 ecx, DWORD PTR $T8[ebp]
  000f2	51		 push	 ecx
  000f3	e8 00 00 00 00	 call	 ?_mm_add4_ps_composite@@YA?AT__m128@@ABT1@000@Z ; _mm_add4_ps_composite
  000f8	83 c4 10	 add	 esp, 16			; 00000010H
  000fb	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00102	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00109	0f 29 45 c0	 movaps	 XMMWORD PTR _xVecRes$[ebp], xmm0
; Line 200
  0010d	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _xVecRes$[ebp]
  00111	8b 4b 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebx]
  00114	e8 00 00 00 00	 call	 ??0XVector4@Math@@QAE@T__m128@@@Z ; Math::XVector4::XVector4
  00119	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 201
  0011c	52		 push	 edx
  0011d	8b cd		 mov	 ecx, ebp
  0011f	50		 push	 eax
  00120	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@operator
  00126	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0012b	58		 pop	 eax
  0012c	5a		 pop	 edx
  0012d	5f		 pop	 edi
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	8b e3		 mov	 esp, ebx
  00133	5b		 pop	 ebx
  00134	c2 08 00	 ret	 8
  00137	90		 npad	 1
$LN5@operator:
  00138	01 00 00 00	 DD	 1
  0013c	00 00 00 00	 DD	 $LN4@operator
$LN4@operator:
  00140	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00144	10 00 00 00	 DD	 16			; 00000010H
  00148	00 00 00 00	 DD	 $LN3@operator
$LN3@operator:
  0014c	78		 DB	 120			; 00000078H
  0014d	56		 DB	 86			; 00000056H
  0014e	65		 DB	 101			; 00000065H
  0014f	63		 DB	 99			; 00000063H
  00150	00		 DB	 0
??DXMatrix4x4@Math@@QBE?AVXVector4@1@ABV21@@Z ENDP	; Math::XMatrix4x4::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -672						; size = 16
$T2 = -656						; size = 16
$T3 = -640						; size = 16
$T4 = -624						; size = 16
$T5 = -608						; size = 16
$T6 = -592						; size = 16
$T7 = -576						; size = 16
$T8 = -560						; size = 16
$T9 = -544						; size = 16
$T10 = -528						; size = 16
$T11 = -512						; size = 16
$T12 = -496						; size = 16
$T13 = -480						; size = 16
$T14 = -464						; size = 16
$T15 = -448						; size = 16
$T16 = -432						; size = 16
$T17 = -416						; size = 16
$T18 = -400						; size = 16
$T19 = -384						; size = 16
$T20 = -368						; size = 16
$T21 = -352						; size = 16
$T22 = -336						; size = 16
$T23 = -320						; size = 16
$T24 = -304						; size = 16
$T25 = -288						; size = 16
$T26 = -272						; size = 16
$T27 = -256						; size = 16
$T28 = -240						; size = 16
_r3$ = -224						; size = 16
_r2$ = -208						; size = 16
_r1$ = -192						; size = 16
_r0$ = -176						; size = 16
_t3$ = -160						; size = 16
_t2$ = -144						; size = 16
_t1$ = -128						; size = 16
_t0$ = -112						; size = 16
_r$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
??DXMatrix4x4@Math@@QBE?AV01@ABV01@@Z PROC		; Math::XMatrix4x4::operator*
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 208
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec a8 02 00
	00		 sub	 esp, 680		; 000002a8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 58 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-680]
  00025	b9 aa 00 00 00	 mov	 ecx, 170		; 000000aaH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 209
  0003f	8d 4d b0	 lea	 ecx, DWORD PTR _r$[ebp]
  00042	e8 00 00 00 00	 call	 ??0XMatrix4x4@Math@@QAE@XZ ; Math::XMatrix4x4::XMatrix4x4
; Line 214
  00047	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004c	c1 e0 00	 shl	 eax, 0
  0004f	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  00052	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00057	6b d1 00	 imul	 edx, ecx, 0
  0005a	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  0005d	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00060	0f 14 00	 unpcklps xmm0, XMMWORD PTR [eax]
  00063	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T28[ebp], xmm0
  0006a	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  00071	0f 29 45 90	 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 215
  00075	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0007a	c1 e0 00	 shl	 eax, 0
  0007d	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  00080	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00085	6b d1 00	 imul	 edx, ecx, 0
  00088	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  0008b	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0008e	0f 15 00	 unpckhps xmm0, XMMWORD PTR [eax]
  00091	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T27[ebp], xmm0
  00098	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T27[ebp]
  0009f	0f 29 45 80	 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 216
  000a3	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000a8	6b c8 03	 imul	 ecx, eax, 3
  000ab	03 4d f8	 add	 ecx, DWORD PTR _this$[ebp]
  000ae	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000b3	d1 e2		 shl	 edx, 1
  000b5	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  000b8	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  000bb	0f 14 01	 unpcklps xmm0, XMMWORD PTR [ecx]
  000be	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T26[ebp], xmm0
  000c5	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  000cc	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _t2$[ebp], xmm0
; Line 217
  000d3	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	03 4d f8	 add	 ecx, DWORD PTR _this$[ebp]
  000de	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000e3	d1 e2		 shl	 edx, 1
  000e5	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  000e8	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  000eb	0f 15 01	 unpckhps xmm0, XMMWORD PTR [ecx]
  000ee	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm0
  000f5	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  000fc	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _t3$[ebp], xmm0
; Line 219
  00103	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _t2$[ebp]
  0010a	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _t0$[ebp]
  0010e	0f 16 c8	 movlhps xmm1, xmm0
  00111	0f 29 8d d0 fe
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm1
  00118	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  0011f	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _r0$[ebp], xmm0
; Line 220
  00126	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _t2$[ebp]
  0012d	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _t0$[ebp]
  00131	0f 12 c8	 movhlps xmm1, xmm0
  00134	0f 29 8d c0 fe
	ff ff		 movaps	 XMMWORD PTR $T23[ebp], xmm1
  0013b	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T23[ebp]
  00142	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _r1$[ebp], xmm0
; Line 221
  00149	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _t3$[ebp]
  00150	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _t1$[ebp]
  00154	0f 16 c8	 movlhps xmm1, xmm0
  00157	0f 29 8d b0 fe
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm1
  0015e	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  00165	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _r2$[ebp], xmm0
; Line 222
  0016c	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _t3$[ebp]
  00173	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _t1$[ebp]
  00177	0f 12 c8	 movhlps xmm1, xmm0
  0017a	0f 29 8d a0 fe
	ff ff		 movaps	 XMMWORD PTR $T21[ebp], xmm1
  00181	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  00188	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _r3$[ebp], xmm0
; Line 227
  0018f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00194	6b c8 00	 imul	 ecx, eax, 0
  00197	03 4b 0c	 add	 ecx, DWORD PTR _a$[ebx]
  0019a	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r3$[ebp]
  001a1	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  001a4	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  001ab	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001b0	6b c2 00	 imul	 eax, edx, 0
  001b3	03 43 0c	 add	 eax, DWORD PTR _a$[ebx]
  001b6	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  001bd	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  001c0	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  001c7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001cc	6b d1 00	 imul	 edx, ecx, 0
  001cf	03 53 0c	 add	 edx, DWORD PTR _a$[ebx]
  001d2	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  001d9	0f 59 02	 mulps	 xmm0, XMMWORD PTR [edx]
  001dc	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  001e3	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001e8	6b c8 00	 imul	 ecx, eax, 0
  001eb	03 4b 0c	 add	 ecx, DWORD PTR _a$[ebx]
  001ee	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r0$[ebp]
  001f5	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  001f8	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  001ff	8d 95 60 fe ff
	ff		 lea	 edx, DWORD PTR $T17[ebp]
  00205	52		 push	 edx
  00206	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR $T18[ebp]
  0020c	50		 push	 eax
  0020d	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T19[ebp]
  00213	51		 push	 ecx
  00214	8d 95 90 fe ff
	ff		 lea	 edx, DWORD PTR $T20[ebp]
  0021a	52		 push	 edx
  0021b	e8 00 00 00 00	 call	 ?_mm_add4_ps_composite@@YA?AT__m128@@ABT1@000@Z ; _mm_add4_ps_composite
  00220	83 c4 10	 add	 esp, 16			; 00000010H
  00223	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  0022a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0022f	6b c8 00	 imul	 ecx, eax, 0
  00232	0f 10 85 50 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T16[ebp]
  00239	0f 11 44 0d b0	 movups	 XMMWORD PTR _r$[ebp+ecx], xmm0
; Line 232
  0023e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00243	c1 e2 00	 shl	 edx, 0
  00246	03 53 0c	 add	 edx, DWORD PTR _a$[ebx]
  00249	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r3$[ebp]
  00250	0f 59 02	 mulps	 xmm0, XMMWORD PTR [edx]
  00253	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  0025a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0025f	c1 e0 00	 shl	 eax, 0
  00262	03 43 0c	 add	 eax, DWORD PTR _a$[ebx]
  00265	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  0026c	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  0026f	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00276	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0027b	c1 e1 00	 shl	 ecx, 0
  0027e	03 4b 0c	 add	 ecx, DWORD PTR _a$[ebx]
  00281	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  00288	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  0028b	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00292	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00297	c1 e2 00	 shl	 edx, 0
  0029a	03 53 0c	 add	 edx, DWORD PTR _a$[ebx]
  0029d	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r0$[ebp]
  002a4	0f 59 02	 mulps	 xmm0, XMMWORD PTR [edx]
  002a7	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  002ae	8d 85 10 fe ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  002b4	50		 push	 eax
  002b5	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  002bb	51		 push	 ecx
  002bc	8d 95 30 fe ff
	ff		 lea	 edx, DWORD PTR $T14[ebp]
  002c2	52		 push	 edx
  002c3	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  002c9	50		 push	 eax
  002ca	e8 00 00 00 00	 call	 ?_mm_add4_ps_composite@@YA?AT__m128@@ABT1@000@Z ; _mm_add4_ps_composite
  002cf	83 c4 10	 add	 esp, 16			; 00000010H
  002d2	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  002d9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002de	c1 e1 00	 shl	 ecx, 0
  002e1	0f 10 85 00 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T11[ebp]
  002e8	0f 11 44 0d b0	 movups	 XMMWORD PTR _r$[ebp+ecx], xmm0
; Line 237
  002ed	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002f2	d1 e2		 shl	 edx, 1
  002f4	03 53 0c	 add	 edx, DWORD PTR _a$[ebx]
  002f7	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r3$[ebp]
  002fe	0f 59 02	 mulps	 xmm0, XMMWORD PTR [edx]
  00301	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00308	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0030d	d1 e0		 shl	 eax, 1
  0030f	03 43 0c	 add	 eax, DWORD PTR _a$[ebx]
  00312	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  00319	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  0031c	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00323	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00328	d1 e1		 shl	 ecx, 1
  0032a	03 4b 0c	 add	 ecx, DWORD PTR _a$[ebx]
  0032d	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  00334	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  00337	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  0033e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00343	d1 e2		 shl	 edx, 1
  00345	03 53 0c	 add	 edx, DWORD PTR _a$[ebx]
  00348	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r0$[ebp]
  0034f	0f 59 02	 mulps	 xmm0, XMMWORD PTR [edx]
  00352	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00359	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  0035f	50		 push	 eax
  00360	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00366	51		 push	 ecx
  00367	8d 95 e0 fd ff
	ff		 lea	 edx, DWORD PTR $T9[ebp]
  0036d	52		 push	 edx
  0036e	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00374	50		 push	 eax
  00375	e8 00 00 00 00	 call	 ?_mm_add4_ps_composite@@YA?AT__m128@@ABT1@000@Z ; _mm_add4_ps_composite
  0037a	83 c4 10	 add	 esp, 16			; 00000010H
  0037d	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00384	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00389	d1 e1		 shl	 ecx, 1
  0038b	0f 10 85 b0 fd
	ff ff		 movups	 xmm0, XMMWORD PTR $T6[ebp]
  00392	0f 11 44 0d b0	 movups	 XMMWORD PTR _r$[ebp+ecx], xmm0
; Line 242
  00397	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0039c	6b c2 03	 imul	 eax, edx, 3
  0039f	03 43 0c	 add	 eax, DWORD PTR _a$[ebx]
  003a2	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r3$[ebp]
  003a9	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  003ac	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  003b3	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003b8	6b d1 03	 imul	 edx, ecx, 3
  003bb	03 53 0c	 add	 edx, DWORD PTR _a$[ebx]
  003be	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  003c5	0f 59 02	 mulps	 xmm0, XMMWORD PTR [edx]
  003c8	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  003cf	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  003d4	6b c8 03	 imul	 ecx, eax, 3
  003d7	03 4b 0c	 add	 ecx, DWORD PTR _a$[ebx]
  003da	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  003e1	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  003e4	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  003eb	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  003f0	6b c2 03	 imul	 eax, edx, 3
  003f3	03 43 0c	 add	 eax, DWORD PTR _a$[ebx]
  003f6	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r0$[ebp]
  003fd	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  00400	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00407	8d 8d 70 fd ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0040d	51		 push	 ecx
  0040e	8d 95 80 fd ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  00414	52		 push	 edx
  00415	8d 85 90 fd ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0041b	50		 push	 eax
  0041c	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00422	51		 push	 ecx
  00423	e8 00 00 00 00	 call	 ?_mm_add4_ps_composite@@YA?AT__m128@@ABT1@000@Z ; _mm_add4_ps_composite
  00428	83 c4 10	 add	 esp, 16			; 00000010H
  0042b	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00432	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00437	6b c2 03	 imul	 eax, edx, 3
  0043a	0f 10 85 60 fd
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  00441	0f 11 44 05 b0	 movups	 XMMWORD PTR _r$[ebp+eax], xmm0
; Line 244
  00446	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0044b	8d 75 b0	 lea	 esi, DWORD PTR _r$[ebp]
  0044e	8b 7b 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebx]
  00451	f3 a5		 rep movsd
  00453	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 245
  00456	52		 push	 edx
  00457	8b cd		 mov	 ecx, ebp
  00459	50		 push	 eax
  0045a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@operator
  00460	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00465	58		 pop	 eax
  00466	5a		 pop	 edx
  00467	5f		 pop	 edi
  00468	5e		 pop	 esi
  00469	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0046c	33 cd		 xor	 ecx, ebp
  0046e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00473	8b e5		 mov	 esp, ebp
  00475	5d		 pop	 ebp
  00476	8b e3		 mov	 esp, ebx
  00478	5b		 pop	 ebx
  00479	c2 08 00	 ret	 8
$LN5@operator:
  0047c	01 00 00 00	 DD	 1
  00480	00 00 00 00	 DD	 $LN4@operator
$LN4@operator:
  00484	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00488	40 00 00 00	 DD	 64			; 00000040H
  0048c	00 00 00 00	 DD	 $LN3@operator
$LN3@operator:
  00490	72		 DB	 114			; 00000072H
  00491	00		 DB	 0
??DXMatrix4x4@Math@@QBE?AV01@ABV01@@Z ENDP		; Math::XMatrix4x4::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv412 = -288						; size = 4
tv387 = -284						; size = 4
tv359 = -280						; size = 4
tv328 = -276						; size = 4
$T1 = -272						; size = 32
_invS$2 = -232						; size = 4
_S$3 = -228						; size = 4
$T4 = -224						; size = 32
_invS$5 = -184						; size = 4
_S$6 = -180						; size = 4
$T7 = -176						; size = 32
_invS$8 = -136						; size = 4
_S$9 = -132						; size = 4
$T10 = -128						; size = 32
_invS$11 = -96						; size = 4
_S$12 = -92						; size = 4
_T$ = -88						; size = 4
_m$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_Orientation$ = 8					; size = 4
?GetOrientation@XMatrix4x4@Math@@QBEAAVXQuaternion@2@AAV32@@Z PROC ; Math::XMatrix4x4::GetOrientation
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 252
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd e0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-288]
  00024	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 254
  0003e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00043	6b c8 00	 imul	 ecx, eax, 0
  00046	03 4d f8	 add	 ecx, DWORD PTR _this$[ebp]
  00049	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0004c	0f 29 45 b0	 movaps	 XMMWORD PTR _m$[ebp], xmm0
; Line 255
  00050	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00055	c1 e2 00	 shl	 edx, 0
  00058	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  0005b	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0005e	0f 29 45 c0	 movaps	 XMMWORD PTR _m$[ebp+16], xmm0
; Line 256
  00062	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00067	d1 e0		 shl	 eax, 1
  00069	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  0006c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0006f	0f 29 45 d0	 movaps	 XMMWORD PTR _m$[ebp+32], xmm0
; Line 257
  00073	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00078	6b d1 03	 imul	 edx, ecx, 3
  0007b	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  0007e	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00081	0f 29 45 e0	 movaps	 XMMWORD PTR _m$[ebp+48], xmm0
; Line 259
  00085	b8 04 00 00 00	 mov	 eax, 4
  0008a	6b c8 00	 imul	 ecx, eax, 0
  0008d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00095	f3 0f 58 44 0d
	b0		 addss	 xmm0, DWORD PTR _m$[ebp+ecx]
  0009b	ba 04 00 00 00	 mov	 edx, 4
  000a0	6b c2 05	 imul	 eax, edx, 5
  000a3	f3 0f 58 44 05
	b0		 addss	 xmm0, DWORD PTR _m$[ebp+eax]
  000a9	b9 04 00 00 00	 mov	 ecx, 4
  000ae	6b d1 0a	 imul	 edx, ecx, 10
  000b1	f3 0f 58 44 15
	b0		 addss	 xmm0, DWORD PTR _m$[ebp+edx]
  000b7	f3 0f 11 45 a8	 movss	 DWORD PTR _T$[ebp], xmm0
; Line 261
  000bc	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _T$[ebp]
  000c1	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@322bcc77
  000c8	0f 86 df 00 00
	00		 jbe	 $LN6@GetOrienta
; Line 263
  000ce	51		 push	 ecx
  000cf	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _T$[ebp]
  000d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d9	e8 00 00 00 00	 call	 _sqrtf
  000de	83 c4 04	 add	 esp, 4
  000e1	d9 9d ec fe ff
	ff		 fstp	 DWORD PTR tv328[ebp]
  000e7	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR tv328[ebp]
  000ef	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  000f7	f3 0f 11 45 a4	 movss	 DWORD PTR _S$12[ebp], xmm0
; Line 264
  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00104	f3 0f 5e 45 a4	 divss	 xmm0, DWORD PTR _S$12[ebp]
  00109	f3 0f 11 45 a0	 movss	 DWORD PTR _invS$11[ebp], xmm0
; Line 269
  0010e	6a 01		 push	 1
  00110	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00118	f3 0f 59 45 a4	 mulss	 xmm0, DWORD PTR _S$12[ebp]
  0011d	51		 push	 ecx
  0011e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00123	b8 04 00 00 00	 mov	 eax, 4
  00128	c1 e0 00	 shl	 eax, 0
  0012b	b9 04 00 00 00	 mov	 ecx, 4
  00130	c1 e1 02	 shl	 ecx, 2
  00133	f3 0f 10 44 05
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+eax]
  00139	f3 0f 5c 44 0d
	b0		 subss	 xmm0, DWORD PTR _m$[ebp+ecx]
  0013f	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _invS$11[ebp]
  00144	51		 push	 ecx
  00145	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014a	ba 04 00 00 00	 mov	 edx, 4
  0014f	c1 e2 03	 shl	 edx, 3
  00152	b8 04 00 00 00	 mov	 eax, 4
  00157	d1 e0		 shl	 eax, 1
  00159	f3 0f 10 44 15
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+edx]
  0015f	f3 0f 5c 44 05
	b0		 subss	 xmm0, DWORD PTR _m$[ebp+eax]
  00165	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _invS$11[ebp]
  0016a	51		 push	 ecx
  0016b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00170	b9 04 00 00 00	 mov	 ecx, 4
  00175	6b d1 06	 imul	 edx, ecx, 6
  00178	b8 04 00 00 00	 mov	 eax, 4
  0017d	6b c8 09	 imul	 ecx, eax, 9
  00180	f3 0f 10 44 15
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+edx]
  00186	f3 0f 5c 44 0d
	b0		 subss	 xmm0, DWORD PTR _m$[ebp+ecx]
  0018c	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _invS$11[ebp]
  00191	51		 push	 ecx
  00192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00197	8d 4d 80	 lea	 ecx, DWORD PTR $T10[ebp]
  0019a	e8 00 00 00 00	 call	 ??0XQuaternion@Math@@QAE@MMMM@Z ; Math::XQuaternion::XQuaternion
  0019f	50		 push	 eax
  001a0	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  001a3	e8 00 00 00 00	 call	 ??4XQuaternion@Math@@QAEAAV01@ABV01@@Z
  001a8	e9 ca 03 00 00	 jmp	 $LN1@GetOrienta
$LN6@GetOrienta:
; Line 271
  001ad	ba 04 00 00 00	 mov	 edx, 4
  001b2	6b c2 00	 imul	 eax, edx, 0
  001b5	b9 04 00 00 00	 mov	 ecx, 4
  001ba	6b d1 05	 imul	 edx, ecx, 5
  001bd	f3 0f 10 44 05
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+eax]
  001c3	0f 2f 44 15 b0	 comiss	 xmm0, DWORD PTR _m$[ebp+edx]
  001c8	0f 86 45 01 00
	00		 jbe	 $LN4@GetOrienta
  001ce	b8 04 00 00 00	 mov	 eax, 4
  001d3	6b c8 00	 imul	 ecx, eax, 0
  001d6	ba 04 00 00 00	 mov	 edx, 4
  001db	6b c2 0a	 imul	 eax, edx, 10
  001de	f3 0f 10 44 0d
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+ecx]
  001e4	0f 2f 44 05 b0	 comiss	 xmm0, DWORD PTR _m$[ebp+eax]
  001e9	0f 86 24 01 00
	00		 jbe	 $LN4@GetOrienta
; Line 273
  001ef	b9 04 00 00 00	 mov	 ecx, 4
  001f4	6b d1 00	 imul	 edx, ecx, 0
  001f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001ff	f3 0f 58 44 15
	b0		 addss	 xmm0, DWORD PTR _m$[ebp+edx]
  00205	b8 04 00 00 00	 mov	 eax, 4
  0020a	6b c8 05	 imul	 ecx, eax, 5
  0020d	f3 0f 5c 44 0d
	b0		 subss	 xmm0, DWORD PTR _m$[ebp+ecx]
  00213	ba 04 00 00 00	 mov	 edx, 4
  00218	6b c2 0a	 imul	 eax, edx, 10
  0021b	f3 0f 5c 44 05
	b0		 subss	 xmm0, DWORD PTR _m$[ebp+eax]
  00221	51		 push	 ecx
  00222	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00227	e8 00 00 00 00	 call	 _sqrtf
  0022c	83 c4 04	 add	 esp, 4
  0022f	d9 9d e8 fe ff
	ff		 fstp	 DWORD PTR tv359[ebp]
  00235	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR tv359[ebp]
  0023d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00245	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR _S$9[ebp], xmm0
; Line 274
  0024d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00255	f3 0f 5e 85 7c
	ff ff ff	 divss	 xmm0, DWORD PTR _S$9[ebp]
  0025d	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _invS$8[ebp], xmm0
; Line 279
  00265	6a 01		 push	 1
  00267	b9 04 00 00 00	 mov	 ecx, 4
  0026c	6b d1 06	 imul	 edx, ecx, 6
  0026f	b8 04 00 00 00	 mov	 eax, 4
  00274	6b c8 09	 imul	 ecx, eax, 9
  00277	f3 0f 10 44 15
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+edx]
  0027d	f3 0f 5c 44 0d
	b0		 subss	 xmm0, DWORD PTR _m$[ebp+ecx]
  00283	f3 0f 59 85 78
	ff ff ff	 mulss	 xmm0, DWORD PTR _invS$8[ebp]
  0028b	51		 push	 ecx
  0028c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00291	ba 04 00 00 00	 mov	 edx, 4
  00296	c1 e2 03	 shl	 edx, 3
  00299	b8 04 00 00 00	 mov	 eax, 4
  0029e	d1 e0		 shl	 eax, 1
  002a0	f3 0f 10 44 15
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+edx]
  002a6	f3 0f 58 44 05
	b0		 addss	 xmm0, DWORD PTR _m$[ebp+eax]
  002ac	f3 0f 59 85 78
	ff ff ff	 mulss	 xmm0, DWORD PTR _invS$8[ebp]
  002b4	51		 push	 ecx
  002b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ba	b9 04 00 00 00	 mov	 ecx, 4
  002bf	c1 e1 00	 shl	 ecx, 0
  002c2	ba 04 00 00 00	 mov	 edx, 4
  002c7	c1 e2 02	 shl	 edx, 2
  002ca	f3 0f 10 44 0d
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+ecx]
  002d0	f3 0f 58 44 15
	b0		 addss	 xmm0, DWORD PTR _m$[ebp+edx]
  002d6	f3 0f 59 85 78
	ff ff ff	 mulss	 xmm0, DWORD PTR _invS$8[ebp]
  002de	51		 push	 ecx
  002df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  002ec	f3 0f 59 85 7c
	ff ff ff	 mulss	 xmm0, DWORD PTR _S$9[ebp]
  002f4	51		 push	 ecx
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00300	e8 00 00 00 00	 call	 ??0XQuaternion@Math@@QAE@MMMM@Z ; Math::XQuaternion::XQuaternion
  00305	50		 push	 eax
  00306	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00309	e8 00 00 00 00	 call	 ??4XQuaternion@Math@@QAEAAV01@ABV01@@Z
  0030e	e9 64 02 00 00	 jmp	 $LN1@GetOrienta
$LN4@GetOrienta:
; Line 281
  00313	b8 04 00 00 00	 mov	 eax, 4
  00318	6b c8 05	 imul	 ecx, eax, 5
  0031b	ba 04 00 00 00	 mov	 edx, 4
  00320	6b c2 0a	 imul	 eax, edx, 10
  00323	f3 0f 10 44 0d
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+ecx]
  00329	0f 2f 44 05 b0	 comiss	 xmm0, DWORD PTR _m$[ebp+eax]
  0032e	0f 86 24 01 00
	00		 jbe	 $LN2@GetOrienta
; Line 283
  00334	b9 04 00 00 00	 mov	 ecx, 4
  00339	6b d1 05	 imul	 edx, ecx, 5
  0033c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00344	f3 0f 58 44 15
	b0		 addss	 xmm0, DWORD PTR _m$[ebp+edx]
  0034a	b8 04 00 00 00	 mov	 eax, 4
  0034f	6b c8 00	 imul	 ecx, eax, 0
  00352	f3 0f 5c 44 0d
	b0		 subss	 xmm0, DWORD PTR _m$[ebp+ecx]
  00358	ba 04 00 00 00	 mov	 edx, 4
  0035d	6b c2 0a	 imul	 eax, edx, 10
  00360	f3 0f 5c 44 05
	b0		 subss	 xmm0, DWORD PTR _m$[ebp+eax]
  00366	51		 push	 ecx
  00367	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036c	e8 00 00 00 00	 call	 ?sqrt@@YAMM@Z		; sqrt
  00371	83 c4 04	 add	 esp, 4
  00374	d9 9d e4 fe ff
	ff		 fstp	 DWORD PTR tv387[ebp]
  0037a	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR tv387[ebp]
  00382	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0038a	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _S$6[ebp], xmm0
; Line 284
  00392	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0039a	f3 0f 5e 85 4c
	ff ff ff	 divss	 xmm0, DWORD PTR _S$6[ebp]
  003a2	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _invS$5[ebp], xmm0
; Line 289
  003aa	6a 01		 push	 1
  003ac	b9 04 00 00 00	 mov	 ecx, 4
  003b1	c1 e1 03	 shl	 ecx, 3
  003b4	ba 04 00 00 00	 mov	 edx, 4
  003b9	d1 e2		 shl	 edx, 1
  003bb	f3 0f 10 44 0d
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+ecx]
  003c1	f3 0f 5c 44 15
	b0		 subss	 xmm0, DWORD PTR _m$[ebp+edx]
  003c7	f3 0f 59 85 48
	ff ff ff	 mulss	 xmm0, DWORD PTR _invS$5[ebp]
  003cf	51		 push	 ecx
  003d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d5	b8 04 00 00 00	 mov	 eax, 4
  003da	6b c8 06	 imul	 ecx, eax, 6
  003dd	ba 04 00 00 00	 mov	 edx, 4
  003e2	6b c2 09	 imul	 eax, edx, 9
  003e5	f3 0f 10 44 0d
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+ecx]
  003eb	f3 0f 58 44 05
	b0		 addss	 xmm0, DWORD PTR _m$[ebp+eax]
  003f1	f3 0f 59 85 48
	ff ff ff	 mulss	 xmm0, DWORD PTR _invS$5[ebp]
  003f9	51		 push	 ecx
  003fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00407	f3 0f 59 85 4c
	ff ff ff	 mulss	 xmm0, DWORD PTR _S$6[ebp]
  0040f	51		 push	 ecx
  00410	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00415	b9 04 00 00 00	 mov	 ecx, 4
  0041a	c1 e1 00	 shl	 ecx, 0
  0041d	ba 04 00 00 00	 mov	 edx, 4
  00422	c1 e2 02	 shl	 edx, 2
  00425	f3 0f 10 44 0d
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+ecx]
  0042b	f3 0f 58 44 15
	b0		 addss	 xmm0, DWORD PTR _m$[ebp+edx]
  00431	f3 0f 59 85 48
	ff ff ff	 mulss	 xmm0, DWORD PTR _invS$5[ebp]
  00439	51		 push	 ecx
  0043a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043f	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00445	e8 00 00 00 00	 call	 ??0XQuaternion@Math@@QAE@MMMM@Z ; Math::XQuaternion::XQuaternion
  0044a	50		 push	 eax
  0044b	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  0044e	e8 00 00 00 00	 call	 ??4XQuaternion@Math@@QAEAAV01@ABV01@@Z
; Line 291
  00453	e9 1f 01 00 00	 jmp	 $LN1@GetOrienta
$LN2@GetOrienta:
; Line 293
  00458	b8 04 00 00 00	 mov	 eax, 4
  0045d	6b c8 0a	 imul	 ecx, eax, 10
  00460	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00468	f3 0f 58 44 0d
	b0		 addss	 xmm0, DWORD PTR _m$[ebp+ecx]
  0046e	ba 04 00 00 00	 mov	 edx, 4
  00473	6b c2 00	 imul	 eax, edx, 0
  00476	f3 0f 5c 44 05
	b0		 subss	 xmm0, DWORD PTR _m$[ebp+eax]
  0047c	b9 04 00 00 00	 mov	 ecx, 4
  00481	6b d1 05	 imul	 edx, ecx, 5
  00484	f3 0f 5c 44 15
	b0		 subss	 xmm0, DWORD PTR _m$[ebp+edx]
  0048a	51		 push	 ecx
  0048b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00490	e8 00 00 00 00	 call	 ?sqrt@@YAMM@Z		; sqrt
  00495	83 c4 04	 add	 esp, 4
  00498	d9 9d e0 fe ff
	ff		 fstp	 DWORD PTR tv412[ebp]
  0049e	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR tv412[ebp]
  004a6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  004ae	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _S$3[ebp], xmm0
; Line 294
  004b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004be	f3 0f 5e 85 1c
	ff ff ff	 divss	 xmm0, DWORD PTR _S$3[ebp]
  004c6	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _invS$2[ebp], xmm0
; Line 299
  004ce	6a 01		 push	 1
  004d0	b8 04 00 00 00	 mov	 eax, 4
  004d5	c1 e0 00	 shl	 eax, 0
  004d8	b9 04 00 00 00	 mov	 ecx, 4
  004dd	c1 e1 02	 shl	 ecx, 2
  004e0	f3 0f 10 44 05
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+eax]
  004e6	f3 0f 5c 44 0d
	b0		 subss	 xmm0, DWORD PTR _m$[ebp+ecx]
  004ec	f3 0f 59 85 18
	ff ff ff	 mulss	 xmm0, DWORD PTR _invS$2[ebp]
  004f4	51		 push	 ecx
  004f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  00502	f3 0f 59 85 1c
	ff ff ff	 mulss	 xmm0, DWORD PTR _S$3[ebp]
  0050a	51		 push	 ecx
  0050b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00510	ba 04 00 00 00	 mov	 edx, 4
  00515	6b c2 06	 imul	 eax, edx, 6
  00518	b9 04 00 00 00	 mov	 ecx, 4
  0051d	6b d1 09	 imul	 edx, ecx, 9
  00520	f3 0f 10 44 05
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+eax]
  00526	f3 0f 58 44 15
	b0		 addss	 xmm0, DWORD PTR _m$[ebp+edx]
  0052c	f3 0f 59 85 18
	ff ff ff	 mulss	 xmm0, DWORD PTR _invS$2[ebp]
  00534	51		 push	 ecx
  00535	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053a	b8 04 00 00 00	 mov	 eax, 4
  0053f	c1 e0 03	 shl	 eax, 3
  00542	b9 04 00 00 00	 mov	 ecx, 4
  00547	d1 e1		 shl	 ecx, 1
  00549	f3 0f 10 44 05
	b0		 movss	 xmm0, DWORD PTR _m$[ebp+eax]
  0054f	f3 0f 58 44 0d
	b0		 addss	 xmm0, DWORD PTR _m$[ebp+ecx]
  00555	f3 0f 59 85 18
	ff ff ff	 mulss	 xmm0, DWORD PTR _invS$2[ebp]
  0055d	51		 push	 ecx
  0055e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00563	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00569	e8 00 00 00 00	 call	 ??0XQuaternion@Math@@QAE@MMMM@Z ; Math::XQuaternion::XQuaternion
  0056e	50		 push	 eax
  0056f	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00572	e8 00 00 00 00	 call	 ??4XQuaternion@Math@@QAEAAV01@ABV01@@Z
$LN1@GetOrienta:
; Line 302
  00577	8b 43 08	 mov	 eax, DWORD PTR _Orientation$[ebx]
; Line 303
  0057a	52		 push	 edx
  0057b	8b cd		 mov	 ecx, ebp
  0057d	50		 push	 eax
  0057e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@GetOrienta
  00584	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00589	58		 pop	 eax
  0058a	5a		 pop	 edx
  0058b	5f		 pop	 edi
  0058c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0058f	33 cd		 xor	 ecx, ebp
  00591	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00596	8b e5		 mov	 esp, ebp
  00598	5d		 pop	 ebp
  00599	8b e3		 mov	 esp, ebx
  0059b	5b		 pop	 ebx
  0059c	c2 04 00	 ret	 4
  0059f	90		 npad	 1
$LN11@GetOrienta:
  005a0	01 00 00 00	 DD	 1
  005a4	00 00 00 00	 DD	 $LN10@GetOrienta
$LN10@GetOrienta:
  005a8	b0 ff ff ff	 DD	 -80			; ffffffb0H
  005ac	40 00 00 00	 DD	 64			; 00000040H
  005b0	00 00 00 00	 DD	 $LN9@GetOrienta
$LN9@GetOrienta:
  005b4	6d		 DB	 109			; 0000006dH
  005b5	00		 DB	 0
?GetOrientation@XMatrix4x4@Math@@QBEAAVXQuaternion@2@AAV32@@Z ENDP ; Math::XMatrix4x4::GetOrientation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv766 = -1200						; size = 16
tv764 = -1184						; size = 16
tv762 = -1168						; size = 16
tv760 = -1152						; size = 16
tv758 = -1136						; size = 16
tv756 = -1120						; size = 16
tv754 = -1104						; size = 16
tv752 = -1088						; size = 16
tv750 = -1072						; size = 16
tv748 = -1056						; size = 16
tv746 = -1040						; size = 16
tv744 = -1024						; size = 16
$T1 = -1008						; size = 16
$T2 = -992						; size = 16
$T3 = -976						; size = 16
$T4 = -960						; size = 16
$T5 = -944						; size = 16
$T6 = -928						; size = 16
$T7 = -912						; size = 16
$T8 = -896						; size = 16
$T9 = -880						; size = 16
$T10 = -864						; size = 16
$T11 = -848						; size = 16
$T12 = -832						; size = 16
$T13 = -816						; size = 16
$T14 = -800						; size = 16
$T15 = -784						; size = 16
$T16 = -768						; size = 16
$T17 = -752						; size = 16
$T18 = -736						; size = 16
$T19 = -720						; size = 16
$T20 = -704						; size = 16
$T21 = -688						; size = 16
$T22 = -672						; size = 16
$T23 = -656						; size = 16
$T24 = -640						; size = 16
$T25 = -624						; size = 16
$T26 = -608						; size = 16
$T27 = -592						; size = 16
$T28 = -576						; size = 16
$T29 = -560						; size = 16
$T30 = -544						; size = 16
$T31 = -528						; size = 16
$T32 = -512						; size = 16
$T33 = -496						; size = 16
$T34 = -480						; size = 16
$T35 = -464						; size = 16
$T36 = -448						; size = 16
$T37 = -432						; size = 16
$T38 = -416						; size = 16
$T39 = -400						; size = 16
$T40 = -384						; size = 16
$T41 = -368						; size = 16
$T42 = -352						; size = 16
$T43 = -336						; size = 16
$T44 = -320						; size = 16
$T45 = -304						; size = 16
$T46 = -288						; size = 16
$T47 = -272						; size = 16
$T48 = -256						; size = 16
$T49 = -240						; size = 16
$T50 = -224						; size = 16
$T51 = -208						; size = 16
$T52 = -192						; size = 16
$T53 = -176						; size = 16
$T54 = -160						; size = 16
$T55 = -144						; size = 16
$T56 = -128						; size = 16
$T57 = -112						; size = 16
$T58 = -96						; size = 16
$T59 = -80						; size = 16
$T60 = -64						; size = 16
_t1$ = -48						; size = 16
_t0$ = -32						; size = 16
_this$ = -4						; size = 4
_Orientation$ = 8					; size = 4
?SetOrientation@XMatrix4x4@Math@@QAEAAV12@ABVXQuaternion@2@@Z PROC ; Math::XMatrix4x4::SetOrientation
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\fluidcs11\mathx.cpp
; Line 310
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b0 04 00
	00		 sub	 esp, 1200		; 000004b0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 50 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1200]
  00024	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 319
  00034	8d 45 90	 lea	 eax, DWORD PTR $T57[ebp]
  00037	50		 push	 eax
  00038	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  0003b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003d	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00040	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00043	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  00048	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0004b	8d 45 80	 lea	 eax, DWORD PTR $T56[ebp]
  0004e	50		 push	 eax
  0004f	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00052	8b 11		 mov	 edx, DWORD PTR [ecx]
  00054	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00057	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0005a	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR tv744[ebp], xmm0
  00061	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  00066	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00069	0f 28 8d 00 fc
	ff ff		 movaps	 xmm1, XMMWORD PTR tv744[ebp]
  00070	0f c6 c1 e5	 shufps	 xmm0, xmm1, 229		; 000000e5H
  00074	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T55[ebp], xmm0
  0007b	8d 45 c0	 lea	 eax, DWORD PTR $T60[ebp]
  0007e	50		 push	 eax
  0007f	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00082	8b 11		 mov	 edx, DWORD PTR [ecx]
  00084	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00087	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0008a	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  0008f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00092	8d 45 b0	 lea	 eax, DWORD PTR $T59[ebp]
  00095	50		 push	 eax
  00096	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00099	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009b	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  0009e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000a1	0f 29 85 f0 fb
	ff ff		 movaps	 XMMWORD PTR tv746[ebp], xmm0
  000a8	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  000ad	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000b0	0f 28 8d f0 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv746[ebp]
  000b7	0f c6 c1 c1	 shufps	 xmm0, xmm1, 193		; 000000c1H
  000bb	0f 29 45 a0	 movaps	 XMMWORD PTR $T58[ebp], xmm0
  000bf	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T58[ebp]
  000c3	0f 59 85 70 ff
	ff ff		 mulps	 xmm0, XMMWORD PTR $T55[ebp]
  000ca	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T54[ebp], xmm0
  000d1	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T54[ebp]
  000d8	0f 29 45 e0	 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 321
  000dc	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR $T50[ebp]
  000e2	50		 push	 eax
  000e3	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  000e6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e8	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  000eb	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000ee	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  000f3	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000f6	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T49[ebp]
  000fc	50		 push	 eax
  000fd	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00100	8b 11		 mov	 edx, DWORD PTR [ecx]
  00102	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00105	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00108	0f 29 85 e0 fb
	ff ff		 movaps	 XMMWORD PTR tv748[ebp], xmm0
  0010f	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  00114	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00117	0f 28 8d e0 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv748[ebp]
  0011e	0f c6 c1 fe	 shufps	 xmm0, xmm1, 254		; 000000feH
  00122	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T48[ebp], xmm0
  00129	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR $T53[ebp]
  0012f	50		 push	 eax
  00130	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00133	8b 11		 mov	 edx, DWORD PTR [ecx]
  00135	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00138	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0013b	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  00140	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00143	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR $T52[ebp]
  00149	50		 push	 eax
  0014a	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  0014d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0014f	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00152	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00155	0f 29 85 d0 fb
	ff ff		 movaps	 XMMWORD PTR tv750[ebp], xmm0
  0015c	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  00161	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00164	0f 28 8d d0 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv750[ebp]
  0016b	0f c6 c1 da	 shufps	 xmm0, xmm1, 218		; 000000daH
  0016f	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T51[ebp], xmm0
  00176	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T51[ebp]
  0017d	0f 59 85 00 ff
	ff ff		 mulps	 xmm0, XMMWORD PTR $T48[ebp]
  00184	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T47[ebp], xmm0
  0018b	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T47[ebp]
  00192	0f 29 45 d0	 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 322
  00196	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _t1$[ebp]
  0019a	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR ?sm_kxNegateY@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxNegateY
  001a1	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T46[ebp], xmm0
  001a8	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T46[ebp]
  001af	0f 29 45 d0	 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 324
  001b3	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  001b7	0f 58 45 d0	 addps	 xmm0, XMMWORD PTR _t1$[ebp]
  001bb	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T45[ebp], xmm0
  001c2	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T45[ebp]
  001c9	0f 59 05 00 00
	00 00		 mulps	 xmm0, XMMWORD PTR ?sm_kxTwo@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxTwo
  001d0	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T44[ebp], xmm0
  001d7	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T44[ebp]
  001de	0f 29 45 e0	 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 325
  001e2	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  001e6	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR ?sm_kxNegateX@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxNegateX
  001ed	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T43[ebp], xmm0
  001f4	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T43[ebp]
  001fb	0f 58 05 00 00
	00 00		 addps	 xmm0, XMMWORD PTR ?sm_kxUnitX@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxUnitX
  00202	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T42[ebp], xmm0
  00209	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T42[ebp]
  00210	0f 29 45 e0	 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 327
  00214	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  00218	0f 54 05 00 00
	00 00		 andps	 xmm0, XMMWORD PTR ?sm_kxTranslationMask@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxTranslationMask
  0021f	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T41[ebp], xmm0
  00226	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0022b	6b c8 00	 imul	 ecx, eax, 0
  0022e	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  00231	0f 10 85 90 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T41[ebp]
  00238	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; Line 335
  0023b	8d 95 50 fe ff
	ff		 lea	 edx, DWORD PTR $T37[ebp]
  00241	52		 push	 edx
  00242	8b 43 08	 mov	 eax, DWORD PTR _Orientation$[ebx]
  00245	8b 08		 mov	 ecx, DWORD PTR [eax]
  00247	8b 53 08	 mov	 edx, DWORD PTR _Orientation$[ebx]
  0024a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0024d	8b ca		 mov	 ecx, edx
  0024f	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  00254	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00257	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR $T36[ebp]
  0025d	50		 push	 eax
  0025e	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00261	8b 11		 mov	 edx, DWORD PTR [ecx]
  00263	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00266	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00269	0f 29 85 c0 fb
	ff ff		 movaps	 XMMWORD PTR tv752[ebp], xmm0
  00270	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  00275	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00278	0f 28 8d c0 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv752[ebp]
  0027f	0f c6 c1 e1	 shufps	 xmm0, xmm1, 225		; 000000e1H
  00283	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T35[ebp], xmm0
  0028a	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR $T40[ebp]
  00290	50		 push	 eax
  00291	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00294	8b 11		 mov	 edx, DWORD PTR [ecx]
  00296	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00299	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0029c	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  002a1	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  002a4	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR $T39[ebp]
  002aa	50		 push	 eax
  002ab	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  002ae	8b 11		 mov	 edx, DWORD PTR [ecx]
  002b0	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  002b3	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  002b6	0f 29 85 b0 fb
	ff ff		 movaps	 XMMWORD PTR tv754[ebp], xmm0
  002bd	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  002c2	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  002c5	0f 28 8d b0 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv754[ebp]
  002cc	0f c6 c1 d0	 shufps	 xmm0, xmm1, 208		; 000000d0H
  002d0	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T38[ebp], xmm0
  002d7	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T38[ebp]
  002de	0f 59 85 30 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR $T35[ebp]
  002e5	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T34[ebp], xmm0
  002ec	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T34[ebp]
  002f3	0f 29 45 e0	 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 337
  002f7	8d 85 e0 fd ff
	ff		 lea	 eax, DWORD PTR $T30[ebp]
  002fd	50		 push	 eax
  002fe	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00301	8b 11		 mov	 edx, DWORD PTR [ecx]
  00303	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00306	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00309	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  0030e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00311	8d 85 d0 fd ff
	ff		 lea	 eax, DWORD PTR $T29[ebp]
  00317	50		 push	 eax
  00318	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  0031b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0031d	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00320	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00323	0f 29 85 a0 fb
	ff ff		 movaps	 XMMWORD PTR tv756[ebp], xmm0
  0032a	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  0032f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00332	0f 28 8d a0 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv756[ebp]
  00339	0f c6 c1 fb	 shufps	 xmm0, xmm1, 251		; 000000fbH
  0033d	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T28[ebp], xmm0
  00344	8d 85 10 fe ff
	ff		 lea	 eax, DWORD PTR $T33[ebp]
  0034a	50		 push	 eax
  0034b	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  0034e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00350	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00353	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00356	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  0035b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0035e	8d 85 00 fe ff
	ff		 lea	 eax, DWORD PTR $T32[ebp]
  00364	50		 push	 eax
  00365	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00368	8b 11		 mov	 edx, DWORD PTR [ecx]
  0036a	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  0036d	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00370	0f 29 85 90 fb
	ff ff		 movaps	 XMMWORD PTR tv758[ebp], xmm0
  00377	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  0037c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0037f	0f 28 8d 90 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv758[ebp]
  00386	0f c6 c1 ca	 shufps	 xmm0, xmm1, 202		; 000000caH
  0038a	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T31[ebp], xmm0
  00391	0f 28 85 f0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T31[ebp]
  00398	0f 59 85 c0 fd
	ff ff		 mulps	 xmm0, XMMWORD PTR $T28[ebp]
  0039f	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T27[ebp], xmm0
  003a6	0f 28 85 b0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T27[ebp]
  003ad	0f 29 45 d0	 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 338
  003b1	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _t1$[ebp]
  003b5	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR ?sm_kxNegateZ@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxNegateZ
  003bc	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T26[ebp], xmm0
  003c3	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  003ca	0f 29 45 d0	 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 340
  003ce	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  003d2	0f 58 45 d0	 addps	 xmm0, XMMWORD PTR _t1$[ebp]
  003d6	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm0
  003dd	0f 28 85 90 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  003e4	0f 59 05 00 00
	00 00		 mulps	 xmm0, XMMWORD PTR ?sm_kxTwo@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxTwo
  003eb	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  003f2	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  003f9	0f 29 45 e0	 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 341
  003fd	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  00401	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR ?sm_kxNegateY@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxNegateY
  00408	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T23[ebp], xmm0
  0040f	0f 28 85 70 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T23[ebp]
  00416	0f 58 05 00 00
	00 00		 addps	 xmm0, XMMWORD PTR ?sm_kxUnitY@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxUnitY
  0041d	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  00424	0f 28 85 60 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  0042b	0f 29 45 e0	 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 343
  0042f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  00433	0f 54 05 00 00
	00 00		 andps	 xmm0, XMMWORD PTR ?sm_kxTranslationMask@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxTranslationMask
  0043a	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR $T21[ebp], xmm0
  00441	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00446	c1 e0 00	 shl	 eax, 0
  00449	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  0044c	0f 10 85 50 fd
	ff ff		 movups	 xmm0, XMMWORD PTR $T21[ebp]
  00453	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; Line 351
  00456	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  0045c	51		 push	 ecx
  0045d	8b 53 08	 mov	 edx, DWORD PTR _Orientation$[ebx]
  00460	8b 02		 mov	 eax, DWORD PTR [edx]
  00462	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00465	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00468	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  0046d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00470	8d 8d 00 fd ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  00476	51		 push	 ecx
  00477	8b 53 08	 mov	 edx, DWORD PTR _Orientation$[ebx]
  0047a	8b 02		 mov	 eax, DWORD PTR [edx]
  0047c	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  0047f	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00482	0f 29 85 80 fb
	ff ff		 movaps	 XMMWORD PTR tv760[ebp], xmm0
  00489	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  0048e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00491	0f 28 8d 80 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv760[ebp]
  00498	0f c6 c1 ca	 shufps	 xmm0, xmm1, 202		; 000000caH
  0049c	0f 29 85 f0 fc
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  004a3	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  004a9	51		 push	 ecx
  004aa	8b 53 08	 mov	 edx, DWORD PTR _Orientation$[ebx]
  004ad	8b 02		 mov	 eax, DWORD PTR [edx]
  004af	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  004b2	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  004b5	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  004ba	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  004bd	8d 8d 30 fd ff
	ff		 lea	 ecx, DWORD PTR $T19[ebp]
  004c3	51		 push	 ecx
  004c4	8b 53 08	 mov	 edx, DWORD PTR _Orientation$[ebx]
  004c7	8b 02		 mov	 eax, DWORD PTR [edx]
  004c9	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  004cc	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  004cf	0f 29 85 70 fb
	ff ff		 movaps	 XMMWORD PTR tv762[ebp], xmm0
  004d6	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  004db	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  004de	0f 28 8d 70 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv762[ebp]
  004e5	0f c6 c1 c4	 shufps	 xmm0, xmm1, 196		; 000000c4H
  004e9	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  004f0	0f 28 85 20 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  004f7	0f 59 85 f0 fc
	ff ff		 mulps	 xmm0, XMMWORD PTR $T15[ebp]
  004fe	0f 29 85 e0 fc
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00505	0f 28 85 e0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  0050c	0f 29 45 e0	 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 353
  00510	8d 8d a0 fc ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00516	51		 push	 ecx
  00517	8b 53 08	 mov	 edx, DWORD PTR _Orientation$[ebx]
  0051a	8b 02		 mov	 eax, DWORD PTR [edx]
  0051c	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  0051f	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00522	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  00527	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0052a	8d 8d 90 fc ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00530	51		 push	 ecx
  00531	8b 53 08	 mov	 edx, DWORD PTR _Orientation$[ebx]
  00534	8b 02		 mov	 eax, DWORD PTR [edx]
  00536	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00539	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0053c	0f 29 85 60 fb
	ff ff		 movaps	 XMMWORD PTR tv764[ebp], xmm0
  00543	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  00548	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0054b	0f 28 8d 60 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv764[ebp]
  00552	0f c6 c1 df	 shufps	 xmm0, xmm1, 223		; 000000dfH
  00556	0f 29 85 80 fc
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  0055d	8d 8d d0 fc ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00563	51		 push	 ecx
  00564	8b 53 08	 mov	 edx, DWORD PTR _Orientation$[ebx]
  00567	8b 02		 mov	 eax, DWORD PTR [edx]
  00569	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  0056c	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0056f	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  00574	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00577	8d 8d c0 fc ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0057d	51		 push	 ecx
  0057e	8b 53 08	 mov	 edx, DWORD PTR _Orientation$[ebx]
  00581	8b 02		 mov	 eax, DWORD PTR [edx]
  00583	8b 4b 08	 mov	 ecx, DWORD PTR _Orientation$[ebx]
  00586	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00589	0f 29 85 50 fb
	ff ff		 movaps	 XMMWORD PTR tv766[ebp], xmm0
  00590	e8 00 00 00 00	 call	 ??BXVector@Math@@QBE?BT__m128@@XZ ; Math::XVector::operator __m128 const 
  00595	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00598	0f 28 8d 50 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv766[ebp]
  0059f	0f c6 c1 d1	 shufps	 xmm0, xmm1, 209		; 000000d1H
  005a3	0f 29 85 b0 fc
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  005aa	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  005b1	0f 59 85 80 fc
	ff ff		 mulps	 xmm0, XMMWORD PTR $T8[ebp]
  005b8	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  005bf	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  005c6	0f 29 45 d0	 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 354
  005ca	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _t1$[ebp]
  005ce	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR ?sm_kxNegateX@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxNegateX
  005d5	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  005dc	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  005e3	0f 29 45 d0	 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 356
  005e7	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  005eb	0f 58 45 d0	 addps	 xmm0, XMMWORD PTR _t1$[ebp]
  005ef	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  005f6	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  005fd	0f 59 05 00 00
	00 00		 mulps	 xmm0, XMMWORD PTR ?sm_kxTwo@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxTwo
  00604	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0060b	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00612	0f 29 45 e0	 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 357
  00616	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  0061a	0f 57 05 00 00
	00 00		 xorps	 xmm0, XMMWORD PTR ?sm_kxNegateZ@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxNegateZ
  00621	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00628	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0062f	0f 58 05 00 00
	00 00		 addps	 xmm0, XMMWORD PTR ?sm_kxUnitZ@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxUnitZ
  00636	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0063d	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00644	0f 29 45 e0	 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 359
  00648	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  0064c	0f 54 05 00 00
	00 00		 andps	 xmm0, XMMWORD PTR ?sm_kxTranslationMask@XVector@Math@@1T__m128@@B ; Math::XVector::sm_kxTranslationMask
  00653	0f 29 85 10 fc
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0065a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0065f	d1 e1		 shl	 ecx, 1
  00661	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  00664	0f 10 85 10 fc
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  0066b	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; Line 361
  0066e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; Line 362
  00671	5f		 pop	 edi
  00672	8b e5		 mov	 esp, ebp
  00674	5d		 pop	 ebp
  00675	8b e3		 mov	 esp, ebx
  00677	5b		 pop	 ebx
  00678	c2 04 00	 ret	 4
?SetOrientation@XMatrix4x4@Math@@QAEAAV12@ABVXQuaternion@2@@Z ENDP ; Math::XMatrix4x4::SetOrientation
_TEXT	ENDS
END
