; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	D:\Engine Class\Assignment 1\Scratch\DXSSE\DXUT\Optional\SDKmesh.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_D3DAUTHENTICATEDCONFIGURE_CRYPTOSESSION
PUBLIC	_D3DAUTHENTICATEDCONFIGURE_SHAREDRESOURCE
PUBLIC	_D3DAUTHENTICATEDCONFIGURE_ENCRYPTIONWHENACCESSIBLE
PUBLIC	?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR0
PUBLIC	?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR1
PUBLIC	?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR2
PUBLIC	?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR3
PUBLIC	?g_XMMask3@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMMask3
PUBLIC	?g_XMOne@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOne
PUBLIC	?g_XMZero@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMZero
PUBLIC	_D3DCRYPTOTYPE_AES128_CTR
PUBLIC	_D3DCRYPTOTYPE_PROPRIETARY
PUBLIC	_D3DKEYEXCHANGE_RSAES_OAEP
PUBLIC	_D3DKEYEXCHANGE_DXVA
PUBLIC	?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMEpsilon
PUBLIC	?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMInfinity
PUBLIC	?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMQNaN
PUBLIC	_IID_IDirect3D9
PUBLIC	_IID_IDirect3DDevice9
PUBLIC	_IID_IDirect3DResource9
PUBLIC	_IID_IDirect3DBaseTexture9
PUBLIC	_IID_IDirect3DTexture9
PUBLIC	_IID_IDirect3DCubeTexture9
PUBLIC	_IID_IDirect3DVolumeTexture9
PUBLIC	_IID_IDirect3DVertexBuffer9
PUBLIC	_IID_IDirect3DIndexBuffer9
PUBLIC	_IID_IDirect3DSurface9
PUBLIC	_IID_IDirect3DVolume9
PUBLIC	_IID_IDirect3DSwapChain9
PUBLIC	_IID_IDirect3DVertexDeclaration9
PUBLIC	_IID_IDirect3DVertexShader9
PUBLIC	_IID_IDirect3DPixelShader9
PUBLIC	_IID_IDirect3DStateBlock9
PUBLIC	_IID_IDirect3DQuery9
PUBLIC	_IID_HelperName
PUBLIC	_IID_IDirect3D9Ex
PUBLIC	_IID_IDirect3DDevice9Ex
PUBLIC	_IID_IDirect3DSwapChain9Ex
PUBLIC	_IID_IDirect3D9ExOverlayExtension
PUBLIC	_IID_IDirect3DDevice9Video
PUBLIC	_IID_IDirect3DAuthenticatedChannel9
PUBLIC	_IID_IDirect3DCryptoSession9
PUBLIC	_D3DAUTHENTICATEDQUERY_PROTECTION
PUBLIC	_D3DAUTHENTICATEDQUERY_CHANNELTYPE
PUBLIC	_D3DAUTHENTICATEDQUERY_DEVICEHANDLE
PUBLIC	_D3DAUTHENTICATEDQUERY_CRYPTOSESSION
PUBLIC	_D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESSCOUNT
PUBLIC	_D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESS
PUBLIC	_D3DAUTHENTICATEDQUERY_UNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT
PUBLIC	_D3DAUTHENTICATEDQUERY_OUTPUTIDCOUNT
PUBLIC	_D3DAUTHENTICATEDQUERY_OUTPUTID
PUBLIC	_D3DAUTHENTICATEDQUERY_ACCESSIBILITYATTRIBUTES
PUBLIC	_D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUIDCOUNT
PUBLIC	_D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUID
PUBLIC	_D3DAUTHENTICATEDQUERY_CURRENTENCRYPTIONWHENACCESSIBLE
PUBLIC	_WKPDID_D3DDebugObjectName
PUBLIC	_D3DAUTHENTICATEDCONFIGURE_INITIALIZE
PUBLIC	_D3DAUTHENTICATEDCONFIGURE_PROTECTION
;	COMDAT _D3DAUTHENTICATEDCONFIGURE_PROTECTION
CONST	SEGMENT
_D3DAUTHENTICATEDCONFIGURE_PROTECTION DD 050455658H
	DW	03f47H
	DW	04362H
	DB	0bfH
	DB	099H
	DB	0bfH
	DB	0dfH
	DB	0cdH
	DB	0e9H
	DB	0edH
	DB	029H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDCONFIGURE_INITIALIZE
CONST	SEGMENT
_D3DAUTHENTICATEDCONFIGURE_INITIALIZE DD 06114bdbH
	DW	03523H
	DW	0470aH
	DB	08dH
	DB	0caH
	DB	0fbH
	DB	0c2H
	DB	084H
	DB	051H
	DB	054H
	DB	0f0H
CONST	ENDS
;	COMDAT _WKPDID_D3DDebugObjectName
CONST	SEGMENT
_WKPDID_D3DDebugObjectName DD 0429b8c22H
	DW	09188H
	DW	04b0cH
	DB	087H
	DB	042H
	DB	0acH
	DB	0b0H
	DB	0bfH
	DB	085H
	DB	0c2H
	DB	00H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_CURRENTENCRYPTIONWHENACCESSIBLE
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_CURRENTENCRYPTIONWHENACCESSIBLE DD 0ec1791c7H
	DW	0dad3H
	DW	04f15H
	DB	09eH
	DB	0c3H
	DB	0faH
	DB	0a9H
	DB	03dH
	DB	060H
	DB	0d4H
	DB	0f0H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUID
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUID DD 0f83a5958H
	DW	0e986H
	DW	04bdaH
	DB	0beH
	DB	0b0H
	DB	041H
	DB	01fH
	DB	06aH
	DB	07aH
	DB	01H
	DB	0b7H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUIDCOUNT
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUIDCOUNT DD 0b30f7066H
	DW	0203cH
	DW	04b07H
	DB	093H
	DB	0fcH
	DB	0ceH
	DB	0aaH
	DB	0fdH
	DB	061H
	DB	024H
	DB	01eH
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_ACCESSIBILITYATTRIBUTES
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_ACCESSIBILITYATTRIBUTES DD 06214d9d2H
	DW	0432cH
	DW	04abbH
	DB	09fH
	DB	0ceH
	DB	021H
	DB	06eH
	DB	0eaH
	DB	026H
	DB	09eH
	DB	03bH
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_OUTPUTID
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_OUTPUTID DD 0839ddca3H
	DW	09b4eH
	DW	041e4H
	DB	0b0H
	DB	053H
	DB	089H
	DB	02bH
	DB	0d2H
	DB	0a1H
	DB	01eH
	DB	0e7H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_OUTPUTIDCOUNT
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_OUTPUTIDCOUNT DD 02c042b5eH
	DW	08c07H
	DW	046d5H
	DB	0aaH
	DB	0beH
	DB	08fH
	DB	075H
	DB	0cbH
	DB	0adH
	DB	04cH
	DB	031H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_UNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_UNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT DD 012f0bd6H
	DW	0e662H
	DW	04474H
	DB	0beH
	DB	0fdH
	DB	0aaH
	DB	053H
	DB	0e5H
	DB	014H
	DB	03cH
	DB	06dH
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESS
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESS DD 0649bbadbH
	DW	0f0f4H
	DW	04639H
	DB	0a1H
	DB	05bH
	DB	024H
	DB	039H
	DB	03fH
	DB	0c3H
	DB	0abH
	DB	0acH
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESSCOUNT
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESSCOUNT DD 0db207b3H
	DW	09450H
	DW	046a6H
	DB	082H
	DB	0deH
	DB	01bH
	DB	096H
	DB	0d4H
	DB	04fH
	DB	09cH
	DB	0f2H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_CRYPTOSESSION
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_CRYPTOSESSION DD 02634499eH
	DW	0d018H
	DW	04d74H
	DB	0acH
	DB	017H
	DB	07fH
	DB	072H
	DB	040H
	DB	059H
	DB	052H
	DB	08dH
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_DEVICEHANDLE
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_DEVICEHANDLE DD 0ec1c539dH
	DW	08cffH
	DW	04e2aH
	DB	0bcH
	DB	0c4H
	DB	0f5H
	DB	069H
	DB	02fH
	DB	099H
	DB	0f4H
	DB	080H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_CHANNELTYPE
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_CHANNELTYPE DD 0bc1b18a5H
	DW	0b1fbH
	DW	042abH
	DB	0bdH
	DB	094H
	DB	0b5H
	DB	082H
	DB	08bH
	DB	04bH
	DB	0f7H
	DB	0beH
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_PROTECTION
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_PROTECTION DD 0a84eb584H
	DW	0c495H
	DW	048aaH
	DB	0b9H
	DB	04dH
	DB	08bH
	DB	0d2H
	DB	0d6H
	DB	0fbH
	DB	0ceH
	DB	05H
CONST	ENDS
;	COMDAT _IID_IDirect3DCryptoSession9
CONST	SEGMENT
_IID_IDirect3DCryptoSession9 DD 0fa0ab799H
	DW	07a9cH
	DW	048caH
	DB	08cH
	DB	05bH
	DB	023H
	DB	07eH
	DB	071H
	DB	0a5H
	DB	044H
	DB	034H
CONST	ENDS
;	COMDAT _IID_IDirect3DAuthenticatedChannel9
CONST	SEGMENT
_IID_IDirect3DAuthenticatedChannel9 DD 0ff24beeeH
	DW	0da21H
	DW	04bebH
	DB	098H
	DB	0b5H
	DB	0d2H
	DB	0f8H
	DB	099H
	DB	0f9H
	DB	08aH
	DB	0f9H
CONST	ENDS
;	COMDAT _IID_IDirect3DDevice9Video
CONST	SEGMENT
_IID_IDirect3DDevice9Video DD 026dc4561H
	DW	0a1eeH
	DW	04ae7H
	DB	096H
	DB	0daH
	DB	011H
	DB	08aH
	DB	036H
	DB	0c0H
	DB	0ecH
	DB	095H
CONST	ENDS
;	COMDAT _IID_IDirect3D9ExOverlayExtension
CONST	SEGMENT
_IID_IDirect3D9ExOverlayExtension DD 0187aeb13H
	DW	0aaf5H
	DW	04c59H
	DB	087H
	DB	06dH
	DB	0e0H
	DB	059H
	DB	08H
	DB	08cH
	DB	0dH
	DB	0f8H
CONST	ENDS
;	COMDAT _IID_IDirect3DSwapChain9Ex
CONST	SEGMENT
_IID_IDirect3DSwapChain9Ex DD 091886cafH
	DW	01c3dH
	DW	04d2eH
	DB	0a0H
	DB	0abH
	DB	03eH
	DB	04cH
	DB	07dH
	DB	08dH
	DB	033H
	DB	03H
CONST	ENDS
;	COMDAT _IID_IDirect3DDevice9Ex
CONST	SEGMENT
_IID_IDirect3DDevice9Ex DD 0b18b10ceH
	DW	02649H
	DW	0405aH
	DB	087H
	DB	0fH
	DB	095H
	DB	0f7H
	DB	077H
	DB	0d4H
	DB	031H
	DB	03aH
CONST	ENDS
;	COMDAT _IID_IDirect3D9Ex
CONST	SEGMENT
_IID_IDirect3D9Ex DD 02177241H
	DW	069fcH
	DW	0400cH
	DB	08fH
	DB	0f1H
	DB	093H
	DB	0a4H
	DB	04dH
	DB	0f6H
	DB	086H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_HelperName
CONST	SEGMENT
_IID_HelperName DD 0e4a36723H
	DW	0fdfeH
	DW	04b22H
	DB	0b1H
	DB	046H
	DB	03cH
	DB	04H
	DB	0c0H
	DB	07fH
	DB	04cH
	DB	0c8H
CONST	ENDS
;	COMDAT _IID_IDirect3DQuery9
CONST	SEGMENT
_IID_IDirect3DQuery9 DD 0d9771460H
	DW	0a695H
	DW	04f26H
	DB	0bbH
	DB	0d3H
	DB	027H
	DB	0b8H
	DB	040H
	DB	0b5H
	DB	041H
	DB	0ccH
CONST	ENDS
;	COMDAT _IID_IDirect3DStateBlock9
CONST	SEGMENT
_IID_IDirect3DStateBlock9 DD 0b07c4fe5H
	DW	0310dH
	DW	04ba8H
	DB	0a2H
	DB	03cH
	DB	04fH
	DB	0fH
	DB	020H
	DB	06fH
	DB	021H
	DB	08bH
CONST	ENDS
;	COMDAT _IID_IDirect3DPixelShader9
CONST	SEGMENT
_IID_IDirect3DPixelShader9 DD 06d3bdbdcH
	DW	05b02H
	DW	04415H
	DB	0b8H
	DB	052H
	DB	0ceH
	DB	05eH
	DB	08bH
	DB	0ccH
	DB	0b2H
	DB	089H
CONST	ENDS
;	COMDAT _IID_IDirect3DVertexShader9
CONST	SEGMENT
_IID_IDirect3DVertexShader9 DD 0efc5557eH
	DW	06265H
	DW	04613H
	DB	08aH
	DB	094H
	DB	043H
	DB	085H
	DB	078H
	DB	089H
	DB	0ebH
	DB	036H
CONST	ENDS
;	COMDAT _IID_IDirect3DVertexDeclaration9
CONST	SEGMENT
_IID_IDirect3DVertexDeclaration9 DD 0dd13c59cH
	DW	036faH
	DW	04098H
	DB	0a8H
	DB	0fbH
	DB	0c7H
	DB	0edH
	DB	039H
	DB	0dcH
	DB	085H
	DB	046H
CONST	ENDS
;	COMDAT _IID_IDirect3DSwapChain9
CONST	SEGMENT
_IID_IDirect3DSwapChain9 DD 0794950f2H
	DW	0adfcH
	DW	0458aH
	DB	090H
	DB	05eH
	DB	010H
	DB	0a1H
	DB	0bH
	DB	0bH
	DB	050H
	DB	03bH
CONST	ENDS
;	COMDAT _IID_IDirect3DVolume9
CONST	SEGMENT
_IID_IDirect3DVolume9 DD 024f416e6H
	DW	01f67H
	DW	04aa7H
	DB	0b8H
	DB	08eH
	DB	0d3H
	DB	03fH
	DB	06fH
	DB	031H
	DB	028H
	DB	0a1H
CONST	ENDS
;	COMDAT _IID_IDirect3DSurface9
CONST	SEGMENT
_IID_IDirect3DSurface9 DD 0cfbaf3aH
	DW	09ff6H
	DW	0429aH
	DB	099H
	DB	0b3H
	DB	0a2H
	DB	079H
	DB	06aH
	DB	0f8H
	DB	0b8H
	DB	09bH
CONST	ENDS
;	COMDAT _IID_IDirect3DIndexBuffer9
CONST	SEGMENT
_IID_IDirect3DIndexBuffer9 DD 07c9dd65eH
	DW	0d3f7H
	DW	04529H
	DB	0acH
	DB	0eeH
	DB	078H
	DB	058H
	DB	030H
	DB	0acH
	DB	0deH
	DB	035H
CONST	ENDS
;	COMDAT _IID_IDirect3DVertexBuffer9
CONST	SEGMENT
_IID_IDirect3DVertexBuffer9 DD 0b64bb1b5H
	DW	0fd70H
	DW	04df6H
	DB	0bfH
	DB	091H
	DB	019H
	DB	0d0H
	DB	0a1H
	DB	024H
	DB	055H
	DB	0e3H
CONST	ENDS
;	COMDAT _IID_IDirect3DVolumeTexture9
CONST	SEGMENT
_IID_IDirect3DVolumeTexture9 DD 02518526cH
	DW	0e789H
	DW	04111H
	DB	0a7H
	DB	0b9H
	DB	047H
	DB	0efH
	DB	032H
	DB	08dH
	DB	013H
	DB	0e6H
CONST	ENDS
;	COMDAT _IID_IDirect3DCubeTexture9
CONST	SEGMENT
_IID_IDirect3DCubeTexture9 DD 0fff32f81H
	DW	0d953H
	DW	0473aH
	DB	092H
	DB	023H
	DB	093H
	DB	0d6H
	DB	052H
	DB	0abH
	DB	0a9H
	DB	03fH
CONST	ENDS
;	COMDAT _IID_IDirect3DTexture9
CONST	SEGMENT
_IID_IDirect3DTexture9 DD 085c31227H
	DW	03de5H
	DW	04f00H
	DB	09bH
	DB	03aH
	DB	0f1H
	DB	01aH
	DB	0c3H
	DB	08cH
	DB	018H
	DB	0b5H
CONST	ENDS
;	COMDAT _IID_IDirect3DBaseTexture9
CONST	SEGMENT
_IID_IDirect3DBaseTexture9 DD 0580ca87eH
	DW	01d3cH
	DW	04d54H
	DB	099H
	DB	01dH
	DB	0b7H
	DB	0d3H
	DB	0e3H
	DB	0c2H
	DB	098H
	DB	0ceH
CONST	ENDS
;	COMDAT _IID_IDirect3DResource9
CONST	SEGMENT
_IID_IDirect3DResource9 DD 05eec05dH
	DW	08f7dH
	DW	04362H
	DB	0b9H
	DB	099H
	DB	0d1H
	DB	0baH
	DB	0f3H
	DB	057H
	DB	0c7H
	DB	04H
CONST	ENDS
;	COMDAT _IID_IDirect3DDevice9
CONST	SEGMENT
_IID_IDirect3DDevice9 DD 0d0223b96H
	DW	0bf7aH
	DW	043fdH
	DB	092H
	DB	0bdH
	DB	0a4H
	DB	03bH
	DB	0dH
	DB	082H
	DB	0b9H
	DB	0ebH
CONST	ENDS
;	COMDAT _IID_IDirect3D9
CONST	SEGMENT
_IID_IDirect3D9 DD 081bdcbcaH
	DW	064d4H
	DW	0426dH
	DB	0aeH
	DB	08dH
	DB	0adH
	DB	01H
	DB	047H
	DB	0f4H
	DB	027H
	DB	05cH
CONST	ENDS
CONST	SEGMENT
$SG154787 DB	'%s%s', 00H
	ORG $+3
$SG154792 DB	'%s%s', 00H
	ORG $+3
$SG154797 DB	'%s%s', 00H
	ORG $+3
$SG154817 DB	'CDXUTSDKMesh', 00H
	ORG $+3
$SG154834 DB	'CDXUTSDKMesh', 00H
	ORG $+3
$SG154847 DB	'D', 00H, 'X', 00H, 'U', 00H, 'T', 00H, 'F', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'D', 00H, 'X', 00H, 'S', 00H, 'D', 00H, 'K'
	DB	00H, 'M', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 'F', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, 'C', 00H, 'c', 00H, 'h', 00H, '('
	DB	00H, ' ', 00H, 'm', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 'W', 00H, ',', 00H, ' '
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H
	DB	'(', 00H, ' ', 00H, 'm', 00H, '_', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 'W', 00H, ' ', 00H
	DB	')', 00H, ' ', 00H, '/', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, ' ', 00H, 'W', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, ' ', 00H, ')', 00H, ','
	DB	00H, ' ', 00H, 's', 00H, 'z', 00H, 'F', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, ')'
	DB	00H, 00H, 00H
$SG154848 DB	'SDKmesh.cpp', 00H
$SG154992 DB	'S', 00H, 'D', 00H, 'K', 00H, 'm', 00H, 'e', 00H, 's', 00H
	DB	'h', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG154993 DB	'P', 00H, 'r', 00H, 'i', 00H, 'm', 00H, 'T', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'D'
	DB	00H, '3', 00H, 'D', 00H, '1', 00H, '1', 00H, '_', 00H, 'P', 00H
	DB	'R', 00H, 'I', 00H, 'M', 00H, 'I', 00H, 'T', 00H, 'I', 00H, 'V'
	DB	00H, 'E', 00H, '_', 00H, 'T', 00H, 'O', 00H, 'P', 00H, 'O', 00H
	DB	'L', 00H, 'O', 00H, 'G', 00H, 'Y', 00H, '_', 00H, 'T', 00H, 'R'
	DB	00H, 'I', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'L', 00H, 'E', 00H
	DB	'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, 00H, 00H
$SG155005 DB	'S', 00H, 'D', 00H, 'K', 00H, 'm', 00H, 'e', 00H, 's', 00H
	DB	'h', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG155006 DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'd', 00H, 'e', 00H
	DB	' ', 00H, '%', 00H, ' ', 00H, '4', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+4
$SG155239 DB	'D', 00H, 'X', 00H, 'U', 00H, 'T', 00H, 'F', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'D', 00H, 'X', 00H, 'S', 00H, 'D', 00H, 'K'
	DB	00H, 'M', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 'F', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, 'C', 00H, 'c', 00H, 'h', 00H, '('
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'P', 00H, 'a', 00H
	DB	't', 00H, 'h', 00H, ',', 00H, ' ', 00H, 'M', 00H, 'A', 00H, 'X'
	DB	00H, '_', 00H, 'P', 00H, 'A', 00H, 'T', 00H, 'H', 00H, ',', 00H
	DB	' ', 00H, 's', 00H, 'z', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e'
	DB	00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, ')', 00H
	DB	00H, 00H
	ORG $+2
$SG155240 DB	'SDKmesh.cpp', 00H
$SG155481 DB	'S', 00H, 'D', 00H, 'K', 00H, 'm', 00H, 'e', 00H, 's', 00H
	DB	'h', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG155482 DB	'i', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'p', 00H, 'M'
	DB	00H, 'e', 00H, 's', 00H, 'h', 00H, 'H', 00H, 'e', 00H, 'a', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'N', 00H, 'u'
	DB	00H, 'm', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	's', 00H, 00H, 00H
CONST	ENDS
;	COMDAT ?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B DD 07fc00000H	; DirectX::g_XMQNaN
	DD	07fc00000H
	DD	07fc00000H
	DD	07fc00000H
CONST	ENDS
;	COMDAT ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B DD 07f800000H	; DirectX::g_XMInfinity
	DD	07f800000H
	DD	07f800000H
	DD	07f800000H
CONST	ENDS
;	COMDAT ?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B DD 034000000r ; 1.19209e-007 ; DirectX::g_XMEpsilon
	DD	034000000r			; 1.19209e-007
	DD	034000000r			; 1.19209e-007
	DD	034000000r			; 1.19209e-007
CONST	ENDS
;	COMDAT _D3DKEYEXCHANGE_DXVA
CONST	SEGMENT
_D3DKEYEXCHANGE_DXVA DD 043d3775cH
	DW	038e5H
	DW	04924H
	DB	08dH
	DB	086H
	DB	0d3H
	DB	0fcH
	DB	0cfH
	DB	015H
	DB	03eH
	DB	09bH
CONST	ENDS
;	COMDAT _D3DKEYEXCHANGE_RSAES_OAEP
CONST	SEGMENT
_D3DKEYEXCHANGE_RSAES_OAEP DD 0c1949895H
	DW	0d72aH
	DW	04a1dH
	DB	08eH
	DB	05dH
	DB	0edH
	DB	085H
	DB	07dH
	DB	017H
	DB	015H
	DB	020H
CONST	ENDS
;	COMDAT _D3DCRYPTOTYPE_PROPRIETARY
CONST	SEGMENT
_D3DCRYPTOTYPE_PROPRIETARY DD 0ab4e9afdH
	DW	01d1cH
	DW	046e6H
	DB	0a7H
	DB	02fH
	DB	08H
	DB	069H
	DB	091H
	DB	07bH
	DB	0dH
	DB	0e8H
CONST	ENDS
;	COMDAT _D3DCRYPTOTYPE_AES128_CTR
CONST	SEGMENT
_D3DCRYPTOTYPE_AES128_CTR DD 09b6bd711H
	DW	04f74H
	DW	041c9H
	DB	09eH
	DB	07bH
	DB	0bH
	DB	0e2H
	DB	0d7H
	DB	0d9H
	DB	03bH
	DB	04fH
CONST	ENDS
;	COMDAT ?g_XMZero@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMZero@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0	; DirectX::g_XMZero
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMOne@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOne@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1	; DirectX::g_XMOne
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMask3@DirectX@@3UXMVECTORI32@1@B DD 0ffffffffH	; DirectX::g_XMMask3
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR3
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR2
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMIdentityR0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDCONFIGURE_ENCRYPTIONWHENACCESSIBLE
CONST	SEGMENT
_D3DAUTHENTICATEDCONFIGURE_ENCRYPTIONWHENACCESSIBLE DD 041fff286H
	DW	06ae0H
	DW	04d43H
	DB	09dH
	DB	055H
	DB	0a4H
	DB	06eH
	DB	09eH
	DB	0fdH
	DB	015H
	DB	08aH
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDCONFIGURE_SHAREDRESOURCE
CONST	SEGMENT
_D3DAUTHENTICATEDCONFIGURE_SHAREDRESOURCE DD 0772d047H
	DW	01b40H
	DW	048e8H
	DB	09cH
	DB	0a6H
	DB	0b5H
	DB	0f5H
	DB	010H
	DB	0deH
	DB	09fH
	DB	01H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDCONFIGURE_CRYPTOSESSION
CONST	SEGMENT
_D3DAUTHENTICATEDCONFIGURE_CRYPTOSESSION DD 06346cc54H
	DW	02cfcH
	DW	04ad4H
	DB	082H
	DB	024H
	DB	0d1H
	DB	058H
	DB	037H
	DB	0deH
	DB	077H
	DB	00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?wcsrchr@@YAPA_WPA_W_W@Z			; wcsrchr
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ	; DirectX::XMVECTORF32::operator __m128
PUBLIC	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ	; DirectX::XMVECTORI32::operator __m128
PUBLIC	??0XMMATRIX@DirectX@@QAE@XZ			; DirectX::XMMATRIX::XMMATRIX
PUBLIC	??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z		; DirectX::XMMATRIX::operator=
PUBLIC	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z		; DirectX::XMMATRIX::operator*
PUBLIC	??0XMFLOAT3@DirectX@@QAE@XZ			; DirectX::XMFLOAT3::XMFLOAT3
PUBLIC	??0XMFLOAT3@DirectX@@QAE@MMM@Z			; DirectX::XMFLOAT3::XMFLOAT3
PUBLIC	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z		; DirectX::XMFLOAT3::operator=
PUBLIC	??0XMFLOAT4X4@DirectX@@QAE@XZ			; DirectX::XMFLOAT4X4::XMFLOAT4X4
PUBLIC	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
PUBLIC	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
PUBLIC	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
PUBLIC	?XMVectorZero@DirectX@@YQ?AT__m128@@XZ		; DirectX::XMVectorZero
PUBLIC	?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z	; DirectX::XMVectorSet
PUBLIC	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z	; DirectX::XMVectorSelect
PUBLIC	?XMVectorLessOrEqual@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorLessOrEqual
PUBLIC	?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVectorDivide
PUBLIC	?XMVector4Equal@DirectX@@YQ_NT__m128@@0@Z	; DirectX::XMVector4Equal
PUBLIC	?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVector4Dot
PUBLIC	?XMVector4LengthSq@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVector4LengthSq
PUBLIC	?XMVector4Normalize@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVector4Normalize
PUBLIC	?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
PUBLIC	?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z ; DirectX::XMMatrixTranspose
PUBLIC	?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
PUBLIC	?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
PUBLIC	?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationQuaternion
PUBLIC	?XMQuaternionNormalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionNormalize
PUBLIC	?XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionConjugate
PUBLIC	?XMQuaternionInverse@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionInverse
PUBLIC	?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ	; DirectX::XMQuaternionIdentity
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	?DXUT_SetDebugName@@YAXPAUID3D11DeviceChild@@PBD@Z ; DXUT_SetDebugName
PUBLIC	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	??0?$allocator@PAE@std@@QAE@XZ			; std::allocator<unsigned char *>::allocator<unsigned char *>
PUBLIC	?deallocate@?$allocator@PAE@std@@QAEXPAPAEI@Z	; std::allocator<unsigned char *>::deallocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<unsigned char *> >::_Wrap_alloc<std::allocator<unsigned char *> >
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAEXPAPAEI@Z ; std::_Wrap_alloc<std::allocator<unsigned char *> >::deallocate
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<unsigned char *> >::_Vector_val<std::_Simple_types<unsigned char *> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<unsigned char *> >::~_Vector_val<std::_Simple_types<unsigned char *> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >
PUBLIC	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::~_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Free_proxy
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAE@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
PUBLIC	??0?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::vector<unsigned char *,std::allocator<unsigned char *> >
PUBLIC	??1?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::~vector<unsigned char *,std::allocator<unsigned char *> >
PUBLIC	?_Destroy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXPAPAE0@Z ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Destroy
PUBLIC	?_Tidy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXXZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Tidy
PUBLIC	?LoadMaterials@CDXUTSDKMesh@@IAEXPAUID3D11Device@@PAUSDKMESH_MATERIAL@@IPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::LoadMaterials
PUBLIC	?CreateVertexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_VERTEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::CreateVertexBuffer
PUBLIC	?CreateIndexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_INDEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::CreateIndexBuffer
PUBLIC	?CreateFromFile@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::CreateFromFile
PUBLIC	?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::CreateFromMemory
PUBLIC	?TransformBindPoseFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@@Z ; CDXUTSDKMesh::TransformBindPoseFrame
PUBLIC	?TransformFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@N@Z ; CDXUTSDKMesh::TransformFrame
PUBLIC	?TransformFrameAbsolute@CDXUTSDKMesh@@IAEXIN@Z	; CDXUTSDKMesh::TransformFrameAbsolute
PUBLIC	?RenderMesh@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderMesh
PUBLIC	?RenderFrame@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderFrame
PUBLIC	??0CDXUTSDKMesh@@QAE@XZ				; CDXUTSDKMesh::CDXUTSDKMesh
PUBLIC	??1CDXUTSDKMesh@@UAE@XZ				; CDXUTSDKMesh::~CDXUTSDKMesh
PUBLIC	?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::Create
PUBLIC	?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::Create
PUBLIC	?LoadAnimation@CDXUTSDKMesh@@UAEJPB_W@Z		; CDXUTSDKMesh::LoadAnimation
PUBLIC	?Destroy@CDXUTSDKMesh@@UAEXXZ			; CDXUTSDKMesh::Destroy
PUBLIC	?TransformMesh@CDXUTSDKMesh@@QAEXABUXMMATRIX@DirectX@@N@Z ; CDXUTSDKMesh::TransformMesh
PUBLIC	?Render@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::Render
PUBLIC	?RenderAdjacent@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderAdjacent
PUBLIC	?GetPrimitiveType11@CDXUTSDKMesh@@SA?AW4D3D_PRIMITIVE_TOPOLOGY@@W4SDKMESH_PRIMITIVE_TYPE@@@Z ; CDXUTSDKMesh::GetPrimitiveType11
PUBLIC	?GetIBFormat11@CDXUTSDKMesh@@QBE?AW4DXGI_FORMAT@@I@Z ; CDXUTSDKMesh::GetIBFormat11
PUBLIC	?GetVB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@II@Z	; CDXUTSDKMesh::GetVB11
PUBLIC	?GetIB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z	; CDXUTSDKMesh::GetIB11
PUBLIC	?GetIndexType@CDXUTSDKMesh@@QBE?AW4SDKMESH_INDEX_TYPE@@I@Z ; CDXUTSDKMesh::GetIndexType
PUBLIC	?GetAdjIB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z ; CDXUTSDKMesh::GetAdjIB11
PUBLIC	?GetMeshPathA@CDXUTSDKMesh@@QBEPBDXZ		; CDXUTSDKMesh::GetMeshPathA
PUBLIC	?GetMeshPathW@CDXUTSDKMesh@@QBEPB_WXZ		; CDXUTSDKMesh::GetMeshPathW
PUBLIC	?GetNumMeshes@CDXUTSDKMesh@@QBEIXZ		; CDXUTSDKMesh::GetNumMeshes
PUBLIC	?GetNumMaterials@CDXUTSDKMesh@@QBEIXZ		; CDXUTSDKMesh::GetNumMaterials
PUBLIC	?GetNumVBs@CDXUTSDKMesh@@QBEIXZ			; CDXUTSDKMesh::GetNumVBs
PUBLIC	?GetNumIBs@CDXUTSDKMesh@@QBEIXZ			; CDXUTSDKMesh::GetNumIBs
PUBLIC	?GetVB11At@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z ; CDXUTSDKMesh::GetVB11At
PUBLIC	?GetIB11At@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z ; CDXUTSDKMesh::GetIB11At
PUBLIC	?GetRawVerticesAt@CDXUTSDKMesh@@QBEPAEI@Z	; CDXUTSDKMesh::GetRawVerticesAt
PUBLIC	?GetRawIndicesAt@CDXUTSDKMesh@@QBEPAEI@Z	; CDXUTSDKMesh::GetRawIndicesAt
PUBLIC	?GetMaterial@CDXUTSDKMesh@@QBEPAUSDKMESH_MATERIAL@@I@Z ; CDXUTSDKMesh::GetMaterial
PUBLIC	?GetMesh@CDXUTSDKMesh@@QBEPAUSDKMESH_MESH@@I@Z	; CDXUTSDKMesh::GetMesh
PUBLIC	?GetNumSubsets@CDXUTSDKMesh@@QBEII@Z		; CDXUTSDKMesh::GetNumSubsets
PUBLIC	?GetSubset@CDXUTSDKMesh@@QBEPAUSDKMESH_SUBSET@@II@Z ; CDXUTSDKMesh::GetSubset
PUBLIC	?GetVertexStride@CDXUTSDKMesh@@QBEIII@Z		; CDXUTSDKMesh::GetVertexStride
PUBLIC	?GetNumFrames@CDXUTSDKMesh@@QBEIXZ		; CDXUTSDKMesh::GetNumFrames
PUBLIC	?GetFrame@CDXUTSDKMesh@@QBEPAUSDKMESH_FRAME@@I@Z ; CDXUTSDKMesh::GetFrame
PUBLIC	?FindFrame@CDXUTSDKMesh@@QBEPAUSDKMESH_FRAME@@PBD@Z ; CDXUTSDKMesh::FindFrame
PUBLIC	?GetNumVertices@CDXUTSDKMesh@@QBE_KII@Z		; CDXUTSDKMesh::GetNumVertices
PUBLIC	?GetNumIndices@CDXUTSDKMesh@@QBE_KI@Z		; CDXUTSDKMesh::GetNumIndices
PUBLIC	?GetMeshBBoxCenter@CDXUTSDKMesh@@QBE?AT__m128@@I@Z ; CDXUTSDKMesh::GetMeshBBoxCenter
PUBLIC	?GetMeshBBoxExtents@CDXUTSDKMesh@@QBE?AT__m128@@I@Z ; CDXUTSDKMesh::GetMeshBBoxExtents
PUBLIC	?GetOutstandingResources@CDXUTSDKMesh@@QBEIXZ	; CDXUTSDKMesh::GetOutstandingResources
PUBLIC	?GetOutstandingBufferResources@CDXUTSDKMesh@@QBEIXZ ; CDXUTSDKMesh::GetOutstandingBufferResources
PUBLIC	?CheckLoadDone@CDXUTSDKMesh@@QAE_NXZ		; CDXUTSDKMesh::CheckLoadDone
PUBLIC	?IsLoaded@CDXUTSDKMesh@@QBE_NXZ			; CDXUTSDKMesh::IsLoaded
PUBLIC	?IsLoading@CDXUTSDKMesh@@QBE_NXZ		; CDXUTSDKMesh::IsLoading
PUBLIC	?SetLoading@CDXUTSDKMesh@@QAEX_N@Z		; CDXUTSDKMesh::SetLoading
PUBLIC	?HadLoadingError@CDXUTSDKMesh@@QBEHXZ		; CDXUTSDKMesh::HadLoadingError
PUBLIC	?GetNumInfluences@CDXUTSDKMesh@@QBEII@Z		; CDXUTSDKMesh::GetNumInfluences
PUBLIC	?GetMeshInfluenceMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@II@Z ; CDXUTSDKMesh::GetMeshInfluenceMatrix
PUBLIC	?GetAnimationKeyFromTime@CDXUTSDKMesh@@QBEIN@Z	; CDXUTSDKMesh::GetAnimationKeyFromTime
PUBLIC	?GetWorldMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@I@Z ; CDXUTSDKMesh::GetWorldMatrix
PUBLIC	?GetInfluenceMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@I@Z ; CDXUTSDKMesh::GetInfluenceMatrix
PUBLIC	?GetAnimationProperties@CDXUTSDKMesh@@QBE_NPAIPAM@Z ; CDXUTSDKMesh::GetAnimationProperties
PUBLIC	??_GCDXUTSDKMesh@@UAEPAXI@Z			; CDXUTSDKMesh::`scalar deleting destructor'
PUBLIC	??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >
PUBLIC	??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAE0@Z ; std::_Ptr_cat<unsigned char *,unsigned char *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >
PUBLIC	??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ ; `string'
PUBLIC	??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B ; `DirectX::XMMatrixRotationQuaternion'::`2'::Constant1110
PUBLIC	?NegativeOne3@?1??XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionConjugate'::`2'::NegativeOne3
PUBLIC	??_7CDXUTSDKMesh@@6B@				; CDXUTSDKMesh::`vftable'
PUBLIC	??_R4CDXUTSDKMesh@@6B@				; CDXUTSDKMesh::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDXUTSDKMesh@@@8			; CDXUTSDKMesh `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTSDKMesh@@8				; CDXUTSDKMesh::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTSDKMesh@@8				; CDXUTSDKMesh::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDXUTSDKMesh@@8			; CDXUTSDKMesh::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@7f7fffff
PUBLIC	__real@ff7fffff
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp___stricmp:PROC
EXTRN	__imp__wcsrchr:PROC
EXTRN	__imp__CreateFileW@28:PROC
EXTRN	__imp__GetFileSizeEx@8:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__SetFilePointerEx@20:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	__imp___wassert:PROC
EXTRN	??_U@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new[]
EXTRN	??_V@YAXPAXABUnothrow_t@std@@@Z:PROC		; operator delete[]
EXTRN	__imp__sprintf_s:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp_??0_Container_base12@std@@QAE@XZ:PROC
EXTRN	__imp_??1_Container_base12@std@@QAE@XZ:PROC
EXTRN	__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:PROC
EXTRN	__imp_?_Xbad_alloc@std@@YAXXZ:PROC
EXTRN	?DXUTGetD3D11DeviceContext@@YGPAUID3D11DeviceContext@@XZ:PROC ; DXUTGetD3D11DeviceContext
EXTRN	?DXUTTrace@@YGJPBDKJPB_W_N@Z:PROC		; DXUTTrace
EXTRN	??_ECDXUTSDKMesh@@UAEPAXI@Z:PROC		; CDXUTSDKMesh::`vector deleting destructor'
EXTRN	?CreateTextureFromFile@CDXUTResourceCache@@QAEJPAUID3D11Device@@PAUID3D11DeviceContext@@PBDPAPAUID3D11ShaderResourceView@@_N@Z:PROC ; CDXUTResourceCache::CreateTextureFromFile
EXTRN	?DXUTGetGlobalResourceCache@@YGAAVCDXUTResourceCache@@XZ:PROC ; DXUTGetGlobalResourceCache
EXTRN	?DXUTFindDXSDKMediaFileCch@@YGJPA_WHPB_W@Z:PROC	; DXUTFindDXSDKMediaFileCch
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__allmul:PROC
EXTRN	__dtoui3:PROC
EXTRN	_memcpy:PROC
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@ff7fffff
CONST	SEGMENT
__real@ff7fffff DD 0ff7fffffr			; -3.40282e+038
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTSDKMesh@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTSDKMesh@@8 DD FLAT:??_R0?AVCDXUTSDKMesh@@@8 ; CDXUTSDKMesh::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTSDKMesh@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTSDKMesh@@8
rdata$r	SEGMENT
??_R2CDXUTSDKMesh@@8 DD FLAT:??_R1A@?0A@EA@CDXUTSDKMesh@@8 ; CDXUTSDKMesh::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDXUTSDKMesh@@8
rdata$r	SEGMENT
??_R3CDXUTSDKMesh@@8 DD 00H				; CDXUTSDKMesh::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDXUTSDKMesh@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTSDKMesh@@@8
data$r	SEGMENT
??_R0?AVCDXUTSDKMesh@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTSDKMesh `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTSDKMesh@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDXUTSDKMesh@@6B@
rdata$r	SEGMENT
??_R4CDXUTSDKMesh@@6B@ DD 00H				; CDXUTSDKMesh::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTSDKMesh@@@8
	DD	FLAT:??_R3CDXUTSDKMesh@@8
rdata$r	ENDS
;	COMDAT ??_7CDXUTSDKMesh@@6B@
CONST	SEGMENT
??_7CDXUTSDKMesh@@6B@ DD FLAT:??_R4CDXUTSDKMesh@@6B@	; CDXUTSDKMesh::`vftable'
	DD	FLAT:?CreateFromFile@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z
	DD	FLAT:?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z
	DD	FLAT:??_ECDXUTSDKMesh@@UAEPAXI@Z
	DD	FLAT:?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z
	DD	FLAT:?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z
	DD	FLAT:?LoadAnimation@CDXUTSDKMesh@@UAEJPB_W@Z
	DD	FLAT:?Destroy@CDXUTSDKMesh@@UAEXXZ
	DD	FLAT:?Render@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z
	DD	FLAT:?RenderAdjacent@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z
CONST	ENDS
;	COMDAT ?NegativeOne3@?1??XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?NegativeOne3@?1??XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B DD 0bf800000r ; -1 ; `DirectX::XMQuaternionConjugate'::`2'::NegativeOne3
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B DD 03f800000r ; 1 ; `DirectX::XMMatrixRotationQuaternion'::`2'::Constant1110
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ DB 'p'
	DB	00H, 'D', 00H, 'e', 00H, 's', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ DB 'p', 00H
	DB	'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
CONST	SEGMENT
??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'k', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '8', 00H, '.', 00H, '1', 00H, '\'
	DB	00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H
	DB	'e', 00H, '\', 00H, 'u', 00H, 'm', 00H, '\', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'X', 00H, 'M', 00H
	DB	'a', 00H, 't', 00H, 'h', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'v'
	DB	00H, 'e', 00H, 'r', 00H, 't', 00H, '.', 00H, 'i', 00H, 'n', 00H
	DB	'l', 00H, 00H, 00H				; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??1CDXUTSDKMesh@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDXUTSDKMesh@@UAE@XZ$0
__unwindtable$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z$8
__ehfuncinfo$??1CDXUTSDKMesh@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CDXUTSDKMesh@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z$0
__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 89
	push	ebp
	mov	ebp, esp
; Line 90
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAE0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAE0@Z PROC ; std::_Ptr_cat<unsigned char *,unsigned char *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 446
	mov	al, BYTE PTR __Cat$[ebp]
; Line 447
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Ptr_cat:
	DD	1
	DD	$LN4@Ptr_cat
$LN4@Ptr_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat
$LN3@Ptr_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAE0@Z ENDP ; std::_Ptr_cat<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 96
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAE0@Z ; std::_Ptr_cat<unsigned char *,unsigned char *>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >
	add	esp, 16					; 00000010H
; Line 97
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z PROC ; IsErrorResource<ID3D11ShaderResourceView *>, COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.h
; Line 45
	push	ebp
	mov	ebp, esp
; Line 46
	cmp	DWORD PTR _data$[ebp], 1
	jne	SHORT $LN1@IsErrorRes
; Line 47
	mov	eax, 1
	jmp	SHORT $LN2@IsErrorRes
$LN1@IsErrorRes:
; Line 48
	xor	eax, eax
$LN2@IsErrorRes:
; Line 49
	pop	ebp
	ret	0
??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ENDP ; IsErrorResource<ID3D11ShaderResourceView *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCDXUTSDKMesh@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTSDKMesh@@UAEPAXI@Z PROC			; CDXUTSDKMesh::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDXUTSDKMesh@@UAE@XZ			; CDXUTSDKMesh::~CDXUTSDKMesh
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDXUTSDKMesh@@UAEPAXI@Z ENDP			; CDXUTSDKMesh::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv87 = -16						; size = 8
tv83 = -8						; size = 4
_this$ = -4						; size = 4
_pNumKeys$ = 8						; size = 4
_pFrameTime$ = 12					; size = 4
?GetAnimationProperties@CDXUTSDKMesh@@QBE_NPAIPAM@Z PROC ; CDXUTSDKMesh::GetAnimationProperties
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1303
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1304
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+876], 0
	jne	SHORT $LN1@GetAnimati
; Line 1306
	mov	ecx, DWORD PTR _pNumKeys$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 1307
	mov	edx, DWORD PTR _pFrameTime$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0
; Line 1308
	xor	al, al
	jmp	SHORT $LN2@GetAnimati
$LN1@GetAnimati:
; Line 1311
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+876]
	mov	edx, DWORD PTR _pNumKeys$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx], eax
; Line 1312
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+876]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR tv83[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv83[ebp]
	mov	ecx, DWORD PTR tv83[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv87[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv87[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	mov	edx, DWORD PTR _pFrameTime$[ebp]
	movss	DWORD PTR [edx], xmm1
; Line 1314
	mov	al, 1
$LN2@GetAnimati:
; Line 1315
	mov	esp, ebp
	pop	ebp
	ret	8
?GetAnimationProperties@CDXUTSDKMesh@@QBE_NPAIPAM@Z ENDP ; CDXUTSDKMesh::GetAnimationProperties
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -144						; size = 64
$T2 = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_iFrameIndex$ = 12					; size = 4
?GetInfluenceMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@I@Z PROC ; CDXUTSDKMesh::GetInfluenceMatrix
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1280
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-152]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1281
	mov	ecx, DWORD PTR _iFrameIndex$[ebx]
	shl	ecx, 6
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+888]
	call	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebx]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 1282
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?GetInfluenceMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@I@Z ENDP ; CDXUTSDKMesh::GetInfluenceMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -144						; size = 64
$T2 = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_iFrameIndex$ = 12					; size = 4
?GetWorldMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@I@Z PROC ; CDXUTSDKMesh::GetWorldMatrix
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1275
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-152]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1276
	mov	ecx, DWORD PTR _iFrameIndex$[ebx]
	shl	ecx, 6
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+892]
	call	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebx]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 1277
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?GetWorldMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@I@Z ENDP ; CDXUTSDKMesh::GetWorldMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv83 = -12						; size = 4
_iTick$ = -8						; size = 4
_this$ = -4						; size = 4
_fTime$ = 8						; size = 8
?GetAnimationKeyFromTime@CDXUTSDKMesh@@QBEIN@Z PROC	; CDXUTSDKMesh::GetAnimationKeyFromTime
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1287
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1288
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+876], 0
	jne	SHORT $LN1@GetAnimati
; Line 1290
	xor	eax, eax
	jmp	SHORT $LN2@GetAnimati
$LN1@GetAnimati:
; Line 1293
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+876]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR tv83[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv83[ebp]
	mov	ecx, DWORD PTR tv83[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	mulsd	xmm0, QWORD PTR _fTime$[ebp]
	call	__dtoui3
	mov	DWORD PTR _iTick$[ebp], eax
; Line 1295
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+876]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	eax, DWORD PTR _iTick$[ebp]
	xor	edx, edx
	div	ecx
	mov	DWORD PTR _iTick$[ebp], edx
; Line 1296
	mov	edx, DWORD PTR _iTick$[ebp]
	add	edx, 1
	mov	DWORD PTR _iTick$[ebp], edx
; Line 1298
	mov	eax, DWORD PTR _iTick$[ebp]
$LN2@GetAnimati:
; Line 1299
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetAnimationKeyFromTime@CDXUTSDKMesh@@QBEIN@Z ENDP	; CDXUTSDKMesh::GetAnimationKeyFromTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -144						; size = 64
$T2 = -80						; size = 64
_iFrame$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_iMesh$ = 12						; size = 4
_iInfluence$ = 16					; size = 4
?GetMeshInfluenceMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@II@Z PROC ; CDXUTSDKMesh::GetMeshInfluenceMatrix
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1269
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-152]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1270
	imul	eax, DWORD PTR _iMesh$[ebx], 224
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	mov	eax, DWORD PTR [edx+eax+216]
	mov	ecx, DWORD PTR _iInfluence$[ebx]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _iFrame$[ebp], edx
; Line 1271
	mov	ecx, DWORD PTR _iFrame$[ebp]
	shl	ecx, 6
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+888]
	call	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebx]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 1272
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
?GetMeshInfluenceMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@II@Z ENDP ; CDXUTSDKMesh::GetMeshInfluenceMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetNumInfluences@CDXUTSDKMesh@@QBEII@Z PROC		; CDXUTSDKMesh::GetNumInfluences
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1263
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1264
	imul	eax, DWORD PTR _iMesh$[ebp], 224
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	mov	eax, DWORD PTR [edx+eax+176]
; Line 1265
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNumInfluences@CDXUTSDKMesh@@QBEII@Z ENDP		; CDXUTSDKMesh::GetNumInfluences
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HadLoadingError@CDXUTSDKMesh@@QBEHXZ PROC		; CDXUTSDKMesh::HadLoadingError
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1257
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1258
	xor	eax, eax
; Line 1259
	mov	esp, ebp
	pop	ebp
	ret	0
?HadLoadingError@CDXUTSDKMesh@@QBEHXZ ENDP		; CDXUTSDKMesh::HadLoadingError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bLoading$ = 8						; size = 1
?SetLoading@CDXUTSDKMesh@@QAEX_N@Z PROC			; CDXUTSDKMesh::SetLoading
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1251
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1252
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bLoading$[ebp]
	mov	BYTE PTR [eax+8], cl
; Line 1253
	mov	esp, ebp
	pop	ebp
	ret	4
?SetLoading@CDXUTSDKMesh@@QAEX_N@Z ENDP			; CDXUTSDKMesh::SetLoading
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLoading@CDXUTSDKMesh@@QBE_NXZ PROC			; CDXUTSDKMesh::IsLoading
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1245
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1246
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+8]
; Line 1247
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLoading@CDXUTSDKMesh@@QBE_NXZ ENDP			; CDXUTSDKMesh::IsLoading
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLoaded@CDXUTSDKMesh@@QBE_NXZ PROC			; CDXUTSDKMesh::IsLoaded
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1235
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN1@IsLoaded
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	test	edx, edx
	jne	SHORT $LN1@IsLoaded
; Line 1237
	mov	al, 1
	jmp	SHORT $LN2@IsLoaded
$LN1@IsLoaded:
; Line 1240
	xor	al, al
$LN2@IsLoaded:
; Line 1241
	mov	esp, ebp
	pop	ebp
	ret	0
?IsLoaded@CDXUTSDKMesh@@QBE_NXZ ENDP			; CDXUTSDKMesh::IsLoaded
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CheckLoadDone@CDXUTSDKMesh@@QAE_NXZ PROC		; CDXUTSDKMesh::CheckLoadDone
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1222
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1223
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOutstandingResources@CDXUTSDKMesh@@QBEIXZ ; CDXUTSDKMesh::GetOutstandingResources
	test	eax, eax
	jne	SHORT $LN1@CheckLoadD
; Line 1225
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0
; Line 1226
	mov	al, 1
	jmp	SHORT $LN2@CheckLoadD
$LN1@CheckLoadD:
; Line 1229
	xor	al, al
$LN2@CheckLoadD:
; Line 1230
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckLoadDone@CDXUTSDKMesh@@QAE_NXZ ENDP		; CDXUTSDKMesh::CheckLoadDone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_outstandingResources$ = -8				; size = 4
_this$ = -4						; size = 4
?GetOutstandingBufferResources@CDXUTSDKMesh@@QBEIXZ PROC ; CDXUTSDKMesh::GetOutstandingBufferResources
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1212
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1213
	mov	DWORD PTR _outstandingResources$[ebp], 0
; Line 1214
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+844], 0
	jne	SHORT $LN1@GetOutstan
; Line 1215
	mov	eax, 1
	jmp	SHORT $LN2@GetOutstan
$LN1@GetOutstan:
; Line 1217
	mov	eax, DWORD PTR _outstandingResources$[ebp]
$LN2@GetOutstan:
; Line 1218
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOutstandingBufferResources@CDXUTSDKMesh@@QBEIXZ ENDP ; CDXUTSDKMesh::GetOutstandingBufferResources
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_outstandingResources$ = -8				; size = 4
_this$ = -4						; size = 4
?GetOutstandingResources@CDXUTSDKMesh@@QBEIXZ PROC	; CDXUTSDKMesh::GetOutstandingResources
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1176
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1177
	mov	DWORD PTR _outstandingResources$[ebp], 0
; Line 1178
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+844], 0
	jne	SHORT $LN11@GetOutstan
; Line 1179
	mov	eax, 1
	jmp	$LN12@GetOutstan
$LN11@GetOutstan:
; Line 1181
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOutstandingBufferResources@CDXUTSDKMesh@@QBEIXZ ; CDXUTSDKMesh::GetOutstandingBufferResources
	add	eax, DWORD PTR _outstandingResources$[ebp]
	mov	DWORD PTR _outstandingResources$[ebp], eax
; Line 1183
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	$LN10@GetOutstan
; Line 1185
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN9@GetOutstan
$LN8@GetOutstan:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN9@GetOutstan:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+844]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+52]
	jae	$LN10@GetOutstan
; Line 1187
	imul	eax, DWORD PTR _i$1[ebp], 1256
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	add	edx, eax
	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR [edx+ecx+360]
	test	edx, edx
	je	SHORT $LN6@GetOutstan
; Line 1189
	imul	eax, DWORD PTR _i$1[ebp], 1256
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	cmp	DWORD PTR [edx+eax+1232], 0
	jne	SHORT $LN6@GetOutstan
	imul	eax, DWORD PTR _i$1[ebp], 1256
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	mov	eax, DWORD PTR [edx+eax+1232]
	push	eax
	call	??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@GetOutstan
; Line 1190
	mov	ecx, DWORD PTR _outstandingResources$[ebp]
	add	ecx, 1
	mov	DWORD PTR _outstandingResources$[ebp], ecx
$LN6@GetOutstan:
; Line 1193
	imul	edx, DWORD PTR _i$1[ebp], 1256
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+868]
	add	ecx, edx
	mov	edx, 1
	imul	eax, edx, 0
	movsx	ecx, BYTE PTR [ecx+eax+620]
	test	ecx, ecx
	je	SHORT $LN4@GetOutstan
; Line 1195
	imul	edx, DWORD PTR _i$1[ebp], 1256
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+868]
	cmp	DWORD PTR [ecx+edx+1240], 0
	jne	SHORT $LN4@GetOutstan
	imul	edx, DWORD PTR _i$1[ebp], 1256
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+868]
	mov	edx, DWORD PTR [ecx+edx+1240]
	push	edx
	call	??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN4@GetOutstan
; Line 1196
	mov	eax, DWORD PTR _outstandingResources$[ebp]
	add	eax, 1
	mov	DWORD PTR _outstandingResources$[ebp], eax
$LN4@GetOutstan:
; Line 1199
	imul	ecx, DWORD PTR _i$1[ebp], 1256
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+868]
	add	eax, ecx
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	eax, BYTE PTR [eax+edx+880]
	test	eax, eax
	je	SHORT $LN2@GetOutstan
; Line 1201
	imul	ecx, DWORD PTR _i$1[ebp], 1256
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+868]
	cmp	DWORD PTR [eax+ecx+1248], 0
	jne	SHORT $LN2@GetOutstan
	imul	ecx, DWORD PTR _i$1[ebp], 1256
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+868]
	mov	ecx, DWORD PTR [eax+ecx+1248]
	push	ecx
	call	??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@GetOutstan
; Line 1202
	mov	edx, DWORD PTR _outstandingResources$[ebp]
	add	edx, 1
	mov	DWORD PTR _outstandingResources$[ebp], edx
$LN2@GetOutstan:
; Line 1204
	jmp	$LN8@GetOutstan
$LN10@GetOutstan:
; Line 1207
	mov	eax, DWORD PTR _outstandingResources$[ebp]
$LN12@GetOutstan:
; Line 1208
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOutstandingResources@CDXUTSDKMesh@@QBEIXZ ENDP	; CDXUTSDKMesh::GetOutstandingResources
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iMesh$ = 12						; size = 4
?GetMeshBBoxExtents@CDXUTSDKMesh@@QBE?AT__m128@@I@Z PROC ; CDXUTSDKMesh::GetMeshBBoxExtents
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1170
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1171
	imul	eax, DWORD PTR _iMesh$[ebx], 224
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	lea	ecx, DWORD PTR [edx+eax+192]
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 1172
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?GetMeshBBoxExtents@CDXUTSDKMesh@@QBE?AT__m128@@I@Z ENDP ; CDXUTSDKMesh::GetMeshBBoxExtents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iMesh$ = 12						; size = 4
?GetMeshBBoxCenter@CDXUTSDKMesh@@QBE?AT__m128@@I@Z PROC	; CDXUTSDKMesh::GetMeshBBoxCenter
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1164
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1165
	imul	eax, DWORD PTR _iMesh$[ebx], 224
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	lea	ecx, DWORD PTR [edx+eax+180]
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 1166
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?GetMeshBBoxCenter@CDXUTSDKMesh@@QBE?AT__m128@@I@Z ENDP	; CDXUTSDKMesh::GetMeshBBoxCenter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetNumIndices@CDXUTSDKMesh@@QBE_KI@Z PROC		; CDXUTSDKMesh::GetNumIndices
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1158
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1159
	imul	eax, DWORD PTR _iMesh$[ebp], 224
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	mov	ecx, DWORD PTR [edx+eax+168]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+852]
	mov	eax, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR [edx+ecx+4]
; Line 1160
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNumIndices@CDXUTSDKMesh@@QBE_KI@Z ENDP		; CDXUTSDKMesh::GetNumIndices
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
_iVB$ = 12						; size = 4
?GetNumVertices@CDXUTSDKMesh@@QBE_KII@Z PROC		; CDXUTSDKMesh::GetNumVertices
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1152
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1153
	imul	eax, DWORD PTR _iMesh$[ebp], 224
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	add	edx, eax
	mov	eax, DWORD PTR _iVB$[ebp]
	imul	ecx, DWORD PTR [edx+eax*4+104], 288
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+848]
	mov	eax, DWORD PTR [edx+ecx]
	mov	edx, DWORD PTR [edx+ecx+4]
; Line 1154
	mov	esp, ebp
	pop	ebp
	ret	8
?GetNumVertices@CDXUTSDKMesh@@QBE_KII@Z ENDP		; CDXUTSDKMesh::GetNumVertices
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_pszName$ = 8						; size = 4
?FindFrame@CDXUTSDKMesh@@QBEPAUSDKMESH_FRAME@@PBD@Z PROC ; CDXUTSDKMesh::FindFrame
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1139
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1140
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@FindFrame
$LN3@FindFrame:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@FindFrame:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR [edx+48]
	jae	SHORT $LN2@FindFrame
; Line 1142
	mov	esi, esp
	mov	ecx, DWORD PTR _pszName$[ebp]
	push	ecx
	imul	edx, DWORD PTR _i$1[ebp], 184
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+864]
	add	ecx, edx
	push	ecx
	call	DWORD PTR __imp___stricmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@FindFrame
; Line 1144
	imul	eax, DWORD PTR _i$1[ebp], 184
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+864]
	jmp	SHORT $LN5@FindFrame
$LN1@FindFrame:
; Line 1146
	jmp	SHORT $LN3@FindFrame
$LN2@FindFrame:
; Line 1147
	xor	eax, eax
$LN5@FindFrame:
; Line 1148
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindFrame@CDXUTSDKMesh@@QBEPAUSDKMESH_FRAME@@PBD@Z ENDP ; CDXUTSDKMesh::FindFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iFrame$ = 8						; size = 4
?GetFrame@CDXUTSDKMesh@@QBEPAUSDKMESH_FRAME@@I@Z PROC	; CDXUTSDKMesh::GetFrame
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1132
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1133
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+844]
	mov	edx, DWORD PTR _iFrame$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jb	SHORT $LN3@GetFrame
	mov	esi, esp
	push	1133					; 0000046dH
	push	OFFSET $SG155481
	push	OFFSET $SG155482
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@GetFrame:
; Line 1134
	imul	eax, DWORD PTR _iFrame$[ebp], 184
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+864]
; Line 1135
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetFrame@CDXUTSDKMesh@@QBEPAUSDKMESH_FRAME@@I@Z ENDP	; CDXUTSDKMesh::GetFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumFrames@CDXUTSDKMesh@@QBEIXZ PROC			; CDXUTSDKMesh::GetNumFrames
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1127
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+844]
	mov	eax, DWORD PTR [ecx+48]
; Line 1128
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumFrames@CDXUTSDKMesh@@QBEIXZ ENDP			; CDXUTSDKMesh::GetNumFrames
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
_iVB$ = 12						; size = 4
?GetVertexStride@CDXUTSDKMesh@@QBEIII@Z PROC		; CDXUTSDKMesh::GetVertexStride
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1120
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1121
	imul	eax, DWORD PTR _iMesh$[ebp], 224
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	add	edx, eax
	mov	eax, DWORD PTR _iVB$[ebp]
	imul	ecx, DWORD PTR [edx+eax*4+104], 288
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+848]
	mov	eax, DWORD PTR [eax+ecx+16]
; Line 1122
	mov	esp, ebp
	pop	ebp
	ret	8
?GetVertexStride@CDXUTSDKMesh@@QBEIII@Z ENDP		; CDXUTSDKMesh::GetVertexStride
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
_iSubset$ = 12						; size = 4
?GetSubset@CDXUTSDKMesh@@QBEPAUSDKMESH_SUBSET@@II@Z PROC ; CDXUTSDKMesh::GetSubset
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1115
	imul	eax, DWORD PTR _iMesh$[ebp], 224
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	mov	eax, DWORD PTR [edx+eax+208]
	mov	ecx, DWORD PTR _iSubset$[ebp]
	imul	eax, DWORD PTR [eax+ecx*4], 144
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+860]
; Line 1116
	mov	esp, ebp
	pop	ebp
	ret	8
?GetSubset@CDXUTSDKMesh@@QBEPAUSDKMESH_SUBSET@@II@Z ENDP ; CDXUTSDKMesh::GetSubset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetNumSubsets@CDXUTSDKMesh@@QBEII@Z PROC		; CDXUTSDKMesh::GetNumSubsets
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1108
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1109
	imul	eax, DWORD PTR _iMesh$[ebp], 224
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	mov	eax, DWORD PTR [edx+eax+172]
; Line 1110
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNumSubsets@CDXUTSDKMesh@@QBEII@Z ENDP		; CDXUTSDKMesh::GetNumSubsets
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetMesh@CDXUTSDKMesh@@QBEPAUSDKMESH_MESH@@I@Z PROC	; CDXUTSDKMesh::GetMesh
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1102
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1103
	imul	eax, DWORD PTR _iMesh$[ebp], 224
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+856]
; Line 1104
	mov	esp, ebp
	pop	ebp
	ret	4
?GetMesh@CDXUTSDKMesh@@QBEPAUSDKMESH_MESH@@I@Z ENDP	; CDXUTSDKMesh::GetMesh
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMaterial$ = 8						; size = 4
?GetMaterial@CDXUTSDKMesh@@QBEPAUSDKMESH_MATERIAL@@I@Z PROC ; CDXUTSDKMesh::GetMaterial
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1096
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1097
	imul	eax, DWORD PTR _iMaterial$[ebp], 1256
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+868]
; Line 1098
	mov	esp, ebp
	pop	ebp
	ret	4
?GetMaterial@CDXUTSDKMesh@@QBEPAUSDKMESH_MATERIAL@@I@Z ENDP ; CDXUTSDKMesh::GetMaterial
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIB$ = 8						; size = 4
?GetRawIndicesAt@CDXUTSDKMesh@@QBEPAEI@Z PROC		; CDXUTSDKMesh::GetRawIndicesAt
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1090
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1091
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _iIB$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
; Line 1092
	mov	esp, ebp
	pop	ebp
	ret	4
?GetRawIndicesAt@CDXUTSDKMesh@@QBEPAEI@Z ENDP		; CDXUTSDKMesh::GetRawIndicesAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iVB$ = 8						; size = 4
?GetRawVerticesAt@CDXUTSDKMesh@@QBEPAEI@Z PROC		; CDXUTSDKMesh::GetRawVerticesAt
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1084
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1085
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _iVB$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
; Line 1086
	mov	esp, ebp
	pop	ebp
	ret	4
?GetRawVerticesAt@CDXUTSDKMesh@@QBEPAEI@Z ENDP		; CDXUTSDKMesh::GetRawVerticesAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIB$ = 8						; size = 4
?GetIB11At@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z PROC	; CDXUTSDKMesh::GetIB11At
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1078
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1079
	mov	eax, DWORD PTR _iIB$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+852]
	mov	eax, DWORD PTR [edx+eax+24]
; Line 1080
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIB11At@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z ENDP	; CDXUTSDKMesh::GetIB11At
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iVB$ = 8						; size = 4
?GetVB11At@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z PROC	; CDXUTSDKMesh::GetVB11At
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1072
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1073
	imul	eax, DWORD PTR _iVB$[ebp], 288
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+848]
	mov	eax, DWORD PTR [edx+eax+280]
; Line 1074
	mov	esp, ebp
	pop	ebp
	ret	4
?GetVB11At@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z ENDP	; CDXUTSDKMesh::GetVB11At
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumIBs@CDXUTSDKMesh@@QBEIXZ PROC			; CDXUTSDKMesh::GetNumIBs
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1064
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1065
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+844], 0
	jne	SHORT $LN1@GetNumIBs
; Line 1066
	xor	eax, eax
	jmp	SHORT $LN2@GetNumIBs
$LN1@GetNumIBs:
; Line 1067
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	mov	eax, DWORD PTR [edx+36]
$LN2@GetNumIBs:
; Line 1068
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumIBs@CDXUTSDKMesh@@QBEIXZ ENDP			; CDXUTSDKMesh::GetNumIBs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumVBs@CDXUTSDKMesh@@QBEIXZ PROC			; CDXUTSDKMesh::GetNumVBs
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1056
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1057
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+844], 0
	jne	SHORT $LN1@GetNumVBs
; Line 1058
	xor	eax, eax
	jmp	SHORT $LN2@GetNumVBs
$LN1@GetNumVBs:
; Line 1059
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	mov	eax, DWORD PTR [edx+32]
$LN2@GetNumVBs:
; Line 1060
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumVBs@CDXUTSDKMesh@@QBEIXZ ENDP			; CDXUTSDKMesh::GetNumVBs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumMaterials@CDXUTSDKMesh@@QBEIXZ PROC		; CDXUTSDKMesh::GetNumMaterials
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1048
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1049
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+844], 0
	jne	SHORT $LN1@GetNumMate
; Line 1050
	xor	eax, eax
	jmp	SHORT $LN2@GetNumMate
$LN1@GetNumMate:
; Line 1051
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	mov	eax, DWORD PTR [edx+52]
$LN2@GetNumMate:
; Line 1052
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumMaterials@CDXUTSDKMesh@@QBEIXZ ENDP		; CDXUTSDKMesh::GetNumMaterials
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumMeshes@CDXUTSDKMesh@@QBEIXZ PROC			; CDXUTSDKMesh::GetNumMeshes
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1040
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1041
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+844], 0
	jne	SHORT $LN1@GetNumMesh
; Line 1042
	xor	eax, eax
	jmp	SHORT $LN2@GetNumMesh
$LN1@GetNumMesh:
; Line 1043
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	mov	eax, DWORD PTR [edx+40]
$LN2@GetNumMesh:
; Line 1044
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNumMeshes@CDXUTSDKMesh@@QBEIXZ ENDP			; CDXUTSDKMesh::GetNumMeshes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMeshPathW@CDXUTSDKMesh@@QBEPB_WXZ PROC		; CDXUTSDKMesh::GetMeshPathW
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1034
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1035
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
; Line 1036
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMeshPathW@CDXUTSDKMesh@@QBEPB_WXZ ENDP		; CDXUTSDKMesh::GetMeshPathW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMeshPathA@CDXUTSDKMesh@@QBEPBDXZ PROC		; CDXUTSDKMesh::GetMeshPathA
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1028
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1029
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 584				; 00000248H
; Line 1030
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMeshPathA@CDXUTSDKMesh@@QBEPBDXZ ENDP		; CDXUTSDKMesh::GetMeshPathA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetAdjIB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z PROC	; CDXUTSDKMesh::GetAdjIB11
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1022
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1023
	imul	eax, DWORD PTR _iMesh$[ebp], 224
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	mov	eax, DWORD PTR [edx+eax+168]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+872]
	mov	eax, DWORD PTR [edx+eax+24]
; Line 1024
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAdjIB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z ENDP	; CDXUTSDKMesh::GetAdjIB11
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetIndexType@CDXUTSDKMesh@@QBE?AW4SDKMESH_INDEX_TYPE@@I@Z PROC ; CDXUTSDKMesh::GetIndexType
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1017
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1018
	imul	eax, DWORD PTR _iMesh$[ebp], 224
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	mov	eax, DWORD PTR [edx+eax+168]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+852]
	mov	eax, DWORD PTR [edx+eax+16]
; Line 1019
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIndexType@CDXUTSDKMesh@@QBE?AW4SDKMESH_INDEX_TYPE@@I@Z ENDP ; CDXUTSDKMesh::GetIndexType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetIB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z PROC	; CDXUTSDKMesh::GetIB11
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1013
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1014
	imul	eax, DWORD PTR _iMesh$[ebp], 224
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	mov	eax, DWORD PTR [edx+eax+168]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+852]
	mov	eax, DWORD PTR [edx+eax+24]
; Line 1015
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z ENDP	; CDXUTSDKMesh::GetIB11
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
_iVB$ = 12						; size = 4
?GetVB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@II@Z PROC	; CDXUTSDKMesh::GetVB11
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 1007
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1008
	imul	eax, DWORD PTR _iMesh$[ebp], 224
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	add	edx, eax
	mov	eax, DWORD PTR _iVB$[ebp]
	imul	ecx, DWORD PTR [edx+eax*4+104], 288
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+848]
	mov	eax, DWORD PTR [eax+ecx+280]
; Line 1009
	mov	esp, ebp
	pop	ebp
	ret	8
?GetVB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@II@Z ENDP	; CDXUTSDKMesh::GetVB11
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetIBFormat11@CDXUTSDKMesh@@QBE?AW4DXGI_FORMAT@@I@Z PROC ; CDXUTSDKMesh::GetIBFormat11
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 994
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 995
	imul	eax, DWORD PTR _iMesh$[ebp], 224
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+856]
	mov	eax, DWORD PTR [edx+eax+168]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+852]
	mov	eax, DWORD PTR [edx+eax+16]
	mov	DWORD PTR tv73[ebp], eax
	cmp	DWORD PTR tv73[ebp], 0
	je	SHORT $LN2@GetIBForma
	cmp	DWORD PTR tv73[ebp], 1
	je	SHORT $LN1@GetIBForma
	jmp	SHORT $LN3@GetIBForma
$LN2@GetIBForma:
; Line 998
	mov	eax, 57					; 00000039H
	jmp	SHORT $LN5@GetIBForma
$LN1@GetIBForma:
; Line 1000
	mov	eax, 42					; 0000002aH
	jmp	SHORT $LN5@GetIBForma
$LN3@GetIBForma:
; Line 1002
	mov	eax, 57					; 00000039H
$LN5@GetIBForma:
; Line 1003
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIBFormat11@CDXUTSDKMesh@@QBE?AW4DXGI_FORMAT@@I@Z ENDP ; CDXUTSDKMesh::GetIBFormat11
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -8						; size = 4
_retType$ = -4						; size = 4
_PrimType$ = 8						; size = 4
?GetPrimitiveType11@CDXUTSDKMesh@@SA?AW4D3D_PRIMITIVE_TOPOLOGY@@W4SDKMESH_PRIMITIVE_TYPE@@@Z PROC ; CDXUTSDKMesh::GetPrimitiveType11
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 955
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 956
	mov	DWORD PTR _retType$[ebp], 4
; Line 958
	mov	eax, DWORD PTR _PrimType$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 8
	ja	SHORT $LN10@GetPrimiti
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN14@GetPrimiti[ecx*4]
$LN9@GetPrimiti:
; Line 961
	mov	DWORD PTR _retType$[ebp], 4
; Line 962
	jmp	SHORT $LN10@GetPrimiti
$LN8@GetPrimiti:
; Line 964
	mov	DWORD PTR _retType$[ebp], 5
; Line 965
	jmp	SHORT $LN10@GetPrimiti
$LN7@GetPrimiti:
; Line 967
	mov	DWORD PTR _retType$[ebp], 2
; Line 968
	jmp	SHORT $LN10@GetPrimiti
$LN6@GetPrimiti:
; Line 970
	mov	DWORD PTR _retType$[ebp], 3
; Line 971
	jmp	SHORT $LN10@GetPrimiti
$LN5@GetPrimiti:
; Line 973
	mov	DWORD PTR _retType$[ebp], 1
; Line 974
	jmp	SHORT $LN10@GetPrimiti
$LN4@GetPrimiti:
; Line 976
	mov	DWORD PTR _retType$[ebp], 12		; 0000000cH
; Line 977
	jmp	SHORT $LN10@GetPrimiti
$LN3@GetPrimiti:
; Line 979
	mov	DWORD PTR _retType$[ebp], 13		; 0000000dH
; Line 980
	jmp	SHORT $LN10@GetPrimiti
$LN2@GetPrimiti:
; Line 982
	mov	DWORD PTR _retType$[ebp], 10		; 0000000aH
; Line 983
	jmp	SHORT $LN10@GetPrimiti
$LN1@GetPrimiti:
; Line 985
	mov	DWORD PTR _retType$[ebp], 11		; 0000000bH
$LN10@GetPrimiti:
; Line 989
	mov	eax, DWORD PTR _retType$[ebp]
; Line 990
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@GetPrimiti:
	DD	$LN9@GetPrimiti
	DD	$LN8@GetPrimiti
	DD	$LN7@GetPrimiti
	DD	$LN6@GetPrimiti
	DD	$LN5@GetPrimiti
	DD	$LN4@GetPrimiti
	DD	$LN3@GetPrimiti
	DD	$LN2@GetPrimiti
	DD	$LN1@GetPrimiti
?GetPrimitiveType11@CDXUTSDKMesh@@SA?AW4D3D_PRIMITIVE_TOPOLOGY@@W4SDKMESH_PRIMITIVE_TYPE@@@Z ENDP ; CDXUTSDKMesh::GetPrimitiveType11
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pd3dDeviceContext$ = 8					; size = 4
_iDiffuseSlot$ = 12					; size = 4
_iNormalSlot$ = 16					; size = 4
_iSpecularSlot$ = 20					; size = 4
?RenderAdjacent@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z PROC ; CDXUTSDKMesh::RenderAdjacent
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 948
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 949
	mov	eax, DWORD PTR _iSpecularSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iNormalSlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iDiffuseSlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _pd3dDeviceContext$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderFrame@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderFrame
; Line 950
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?RenderAdjacent@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z ENDP ; CDXUTSDKMesh::RenderAdjacent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pd3dDeviceContext$ = 8					; size = 4
_iDiffuseSlot$ = 12					; size = 4
_iNormalSlot$ = 16					; size = 4
_iSpecularSlot$ = 20					; size = 4
?Render@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z PROC ; CDXUTSDKMesh::Render
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 938
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 939
	mov	eax, DWORD PTR _iSpecularSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iNormalSlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iDiffuseSlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _pd3dDeviceContext$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderFrame@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderFrame
; Line 940
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Render@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z ENDP ; CDXUTSDKMesh::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -672						; size = 64
$T2 = -608						; size = 64
$T3 = -544						; size = 64
_i$4 = -472						; size = 4
_mFinal$5 = -464					; size = 64
$T6 = -384						; size = 64
$T7 = -320						; size = 64
_mInvBindPose$8 = -240					; size = 64
$T9 = -160						; size = 64
_m$10 = -80						; size = 64
_i$11 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_world$ = 8						; size = 4
_fTime$ = 12						; size = 8
?TransformMesh@CDXUTSDKMesh@@QAEXABUXMMATRIX@DirectX@@N@Z PROC ; CDXUTSDKMesh::TransformMesh
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 908
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 680				; 000002a8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-680]
	mov	ecx, 170				; 000000aaH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 909
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+876], 0
	je	SHORT $LN9@TransformM
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+876]
	cmp	DWORD PTR [edx+8], 0
	jne	$LN10@TransformM
$LN9@TransformM:
; Line 911
	sub	esp, 8
	movsd	xmm0, QWORD PTR _fTime$[ebx]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _world$[ebx]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@N@Z ; CDXUTSDKMesh::TransformFrame
; Line 915
	mov	DWORD PTR _i$11[ebp], 0
	jmp	SHORT $LN8@TransformM
$LN7@TransformM:
	mov	ecx, DWORD PTR _i$11[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$11[ebp], ecx
$LN8@TransformM:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+844]
	mov	ecx, DWORD PTR _i$11[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jae	$LN6@TransformM
; Line 917
	mov	ecx, DWORD PTR _i$11[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+884]
	call	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
	movaps	XMMWORD PTR $T3[ebp+48], xmm3
	movaps	XMMWORD PTR $T3[ebp+32], xmm2
	movaps	XMMWORD PTR $T3[ebp+16], xmm1
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T3[ebp]
	lea	edi, DWORD PTR $T9[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T9[ebp]
	lea	edi, DWORD PTR _m$10[ebp]
	rep movsd
; Line 918
	xor	ecx, ecx
	movaps	xmm0, XMMWORD PTR _m$10[ebp]
	movaps	xmm1, XMMWORD PTR _m$10[ebp+16]
	movaps	xmm2, XMMWORD PTR _m$10[ebp+32]
	movaps	xmm3, XMMWORD PTR _m$10[ebp+48]
	call	?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
	movaps	XMMWORD PTR $T2[ebp+48], xmm3
	movaps	XMMWORD PTR $T2[ebp+32], xmm2
	movaps	XMMWORD PTR $T2[ebp+16], xmm1
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR $T7[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T7[ebp]
	lea	edi, DWORD PTR _mInvBindPose$8[ebp]
	rep movsd
; Line 919
	mov	ecx, DWORD PTR _i$11[ebp]
	shl	ecx, 6
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+888]
	call	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T6[ebp]
	rep movsd
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	lea	ecx, DWORD PTR _m$10[ebp]
	call	??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMMATRIX::operator=
; Line 920
	lea	edx, DWORD PTR _mFinal$5[ebp]
	lea	ecx, DWORD PTR _mInvBindPose$8[ebp]
	movaps	xmm0, XMMWORD PTR _m$10[ebp]
	movaps	xmm1, XMMWORD PTR _m$10[ebp+16]
	movaps	xmm2, XMMWORD PTR _m$10[ebp+32]
	movaps	xmm3, XMMWORD PTR _m$10[ebp+48]
	call	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z	; DirectX::XMMATRIX::operator*
; Line 921
	mov	ecx, DWORD PTR _i$11[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+888]
	movaps	xmm0, XMMWORD PTR _mFinal$5[ebp]
	movaps	xmm1, XMMWORD PTR _mFinal$5[ebp+16]
	movaps	xmm2, XMMWORD PTR _mFinal$5[ebp+32]
	movaps	xmm3, XMMWORD PTR _mFinal$5[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 922
	jmp	$LN7@TransformM
$LN6@TransformM:
; Line 924
	jmp	SHORT $LN1@TransformM
$LN10@TransformM:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+876]
	cmp	DWORD PTR [ecx+8], 1
	jne	SHORT $LN1@TransformM
; Line 926
	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN3@TransformM
$LN2@TransformM:
	mov	edx, DWORD PTR _i$4[ebp]
	add	edx, 1
	mov	DWORD PTR _i$4[ebp], edx
$LN3@TransformM:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+876]
	mov	edx, DWORD PTR _i$4[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jae	SHORT $LN1@TransformM
; Line 927
	sub	esp, 8
	movsd	xmm0, QWORD PTR _fTime$[ebx]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformFrameAbsolute@CDXUTSDKMesh@@IAEXIN@Z ; CDXUTSDKMesh::TransformFrameAbsolute
	jmp	SHORT $LN2@TransformM
$LN1@TransformM:
; Line 929
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@TransformM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
$LN17@TransformM:
	DD	3
	DD	$LN16@TransformM
$LN16@TransformM:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN13@TransformM
	DD	-240					; ffffff10H
	DD	64					; 00000040H
	DD	$LN14@TransformM
	DD	-464					; fffffe30H
	DD	64					; 00000040H
	DD	$LN15@TransformM
$LN15@TransformM:
	DB	109					; 0000006dH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN14@TransformM:
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
$LN13@TransformM:
	DB	109					; 0000006dH
	DB	0
?TransformMesh@CDXUTSDKMesh@@QAEXABUXMMATRIX@DirectX@@N@Z ENDP ; CDXUTSDKMesh::TransformMesh
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv887 = -100						; size = 8
tv811 = -92						; size = 8
tv736 = -84						; size = 8
tv452 = -76						; size = 8
$T1 = -68						; size = 4
$T2 = -64						; size = 4
$T3 = -60						; size = 4
$T4 = -56						; size = 4
$T5 = -52						; size = 4
$T6 = -48						; size = 4
$T7 = -44						; size = 4
$T8 = -40						; size = 4
_i$9 = -36						; size = 8
_i$10 = -28						; size = 8
_i$11 = -20						; size = 8
_m$12 = -12						; size = 8
_this$ = -4						; size = 4
?Destroy@CDXUTSDKMesh@@UAEXXZ PROC			; CDXUTSDKMesh::Destroy
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 823
	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 824
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckLoadDone@CDXUTSDKMesh@@QAE_NXZ	; CDXUTSDKMesh::CheckLoadDone
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN34@Destroy
; Line 825
	jmp	$LN35@Destroy
$LN34@Destroy:
; Line 827
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	$LN33@Destroy
; Line 829
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+868], 0
	je	$LN32@Destroy
; Line 831
	xorpd	xmm0, xmm0
	movlpd	QWORD PTR _m$12[ebp], xmm0
	jmp	SHORT $LN31@Destroy
$LN30@Destroy:
	mov	eax, DWORD PTR _m$12[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _m$12[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _m$12[ebp], eax
	mov	DWORD PTR _m$12[ebp+4], ecx
$LN31@Destroy:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+844]
	mov	ecx, DWORD PTR [eax+52]
	xor	edx, edx
	mov	DWORD PTR tv452[ebp], ecx
	mov	DWORD PTR tv452[ebp+4], edx
	mov	eax, DWORD PTR _m$12[ebp+4]
	cmp	eax, DWORD PTR tv452[ebp+4]
	ja	$LN32@Destroy
	jb	SHORT $LN37@Destroy
	mov	ecx, DWORD PTR _m$12[ebp]
	cmp	ecx, DWORD PTR tv452[ebp]
	jae	$LN32@Destroy
$LN37@Destroy:
; Line 833
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	$LN28@Destroy
; Line 835
	push	0
	push	1256					; 000004e8H
	mov	eax, DWORD PTR _m$12[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _m$12[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+868]
	cmp	DWORD PTR [ecx+eax+1232], 0
	je	$LN27@Destroy
	push	0
	push	1256					; 000004e8H
	mov	edx, DWORD PTR _m$12[ebp+4]
	push	edx
	mov	eax, DWORD PTR _m$12[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	mov	eax, DWORD PTR [edx+eax+1232]
	push	eax
	call	??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
	add	esp, 4
	test	eax, eax
	jne	$LN27@Destroy
; Line 840
	push	0
	push	1256					; 000004e8H
	mov	ecx, DWORD PTR _m$12[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _m$12[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	cmp	DWORD PTR [edx+eax+1232], 0
	je	$LN27@Destroy
	push	0
	push	1256					; 000004e8H
	mov	eax, DWORD PTR _m$12[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _m$12[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+868]
	mov	esi, DWORD PTR [ecx+eax+1232]
	push	0
	push	1256					; 000004e8H
	mov	edx, DWORD PTR _m$12[ebp+4]
	push	edx
	mov	eax, DWORD PTR _m$12[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	mov	eax, DWORD PTR [edx+eax+1232]
	mov	ecx, DWORD PTR [esi]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	0
	push	1256					; 000004e8H
	mov	eax, DWORD PTR _m$12[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _m$12[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+868]
	mov	DWORD PTR [ecx+eax+1232], 0
$LN27@Destroy:
; Line 842
	push	0
	push	1256					; 000004e8H
	mov	edx, DWORD PTR _m$12[ebp+4]
	push	edx
	mov	eax, DWORD PTR _m$12[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	cmp	DWORD PTR [edx+eax+1240], 0
	je	$LN25@Destroy
	push	0
	push	1256					; 000004e8H
	mov	eax, DWORD PTR _m$12[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _m$12[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+868]
	mov	edx, DWORD PTR [ecx+eax+1240]
	push	edx
	call	??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
	add	esp, 4
	test	eax, eax
	jne	$LN25@Destroy
; Line 847
	push	0
	push	1256					; 000004e8H
	mov	eax, DWORD PTR _m$12[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _m$12[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+868]
	cmp	DWORD PTR [ecx+eax+1240], 0
	je	$LN25@Destroy
	push	0
	push	1256					; 000004e8H
	mov	edx, DWORD PTR _m$12[ebp+4]
	push	edx
	mov	eax, DWORD PTR _m$12[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	mov	esi, DWORD PTR [edx+eax+1240]
	push	0
	push	1256					; 000004e8H
	mov	eax, DWORD PTR _m$12[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _m$12[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+868]
	mov	edx, DWORD PTR [ecx+eax+1240]
	mov	eax, DWORD PTR [esi]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	0
	push	1256					; 000004e8H
	mov	edx, DWORD PTR _m$12[ebp+4]
	push	edx
	mov	eax, DWORD PTR _m$12[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	mov	DWORD PTR [edx+eax+1240], 0
$LN25@Destroy:
; Line 849
	push	0
	push	1256					; 000004e8H
	mov	eax, DWORD PTR _m$12[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _m$12[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+868]
	cmp	DWORD PTR [ecx+eax+1248], 0
	je	$LN28@Destroy
	push	0
	push	1256					; 000004e8H
	mov	edx, DWORD PTR _m$12[ebp+4]
	push	edx
	mov	eax, DWORD PTR _m$12[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	mov	eax, DWORD PTR [edx+eax+1248]
	push	eax
	call	??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
	add	esp, 4
	test	eax, eax
	jne	$LN28@Destroy
; Line 854
	push	0
	push	1256					; 000004e8H
	mov	ecx, DWORD PTR _m$12[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _m$12[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	cmp	DWORD PTR [edx+eax+1248], 0
	je	$LN28@Destroy
	push	0
	push	1256					; 000004e8H
	mov	eax, DWORD PTR _m$12[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _m$12[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+868]
	mov	esi, DWORD PTR [ecx+eax+1248]
	push	0
	push	1256					; 000004e8H
	mov	edx, DWORD PTR _m$12[ebp+4]
	push	edx
	mov	eax, DWORD PTR _m$12[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+868]
	mov	eax, DWORD PTR [edx+eax+1248]
	mov	ecx, DWORD PTR [esi]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	0
	push	1256					; 000004e8H
	mov	eax, DWORD PTR _m$12[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _m$12[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+868]
	mov	DWORD PTR [ecx+eax+1248], 0
$LN28@Destroy:
; Line 857
	jmp	$LN30@Destroy
$LN32@Destroy:
; Line 859
	xorpd	xmm0, xmm0
	movlpd	QWORD PTR _i$11[ebp], xmm0
	jmp	SHORT $LN21@Destroy
$LN20@Destroy:
	mov	edx, DWORD PTR _i$11[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _i$11[ebp+4]
	adc	eax, 0
	mov	DWORD PTR _i$11[ebp], edx
	mov	DWORD PTR _i$11[ebp+4], eax
$LN21@Destroy:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	mov	eax, DWORD PTR [edx+32]
	xor	ecx, ecx
	mov	DWORD PTR tv736[ebp], eax
	mov	DWORD PTR tv736[ebp+4], ecx
	mov	edx, DWORD PTR _i$11[ebp+4]
	cmp	edx, DWORD PTR tv736[ebp+4]
	ja	$LN19@Destroy
	jb	SHORT $LN38@Destroy
	mov	eax, DWORD PTR _i$11[ebp]
	cmp	eax, DWORD PTR tv736[ebp]
	jae	$LN19@Destroy
$LN38@Destroy:
; Line 861
	push	0
	push	288					; 00000120H
	mov	ecx, DWORD PTR _i$11[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _i$11[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+848]
	cmp	DWORD PTR [edx+eax+280], 0
	je	$LN18@Destroy
	push	0
	push	288					; 00000120H
	mov	eax, DWORD PTR _i$11[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _i$11[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+848]
	mov	esi, DWORD PTR [ecx+eax+280]
	push	0
	push	288					; 00000120H
	mov	edx, DWORD PTR _i$11[ebp+4]
	push	edx
	mov	eax, DWORD PTR _i$11[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+848]
	mov	eax, DWORD PTR [edx+eax+280]
	mov	ecx, DWORD PTR [esi]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	0
	push	288					; 00000120H
	mov	eax, DWORD PTR _i$11[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _i$11[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+848]
	mov	DWORD PTR [ecx+eax+280], 0
$LN18@Destroy:
; Line 862
	jmp	$LN20@Destroy
$LN19@Destroy:
; Line 864
	xorpd	xmm0, xmm0
	movlpd	QWORD PTR _i$10[ebp], xmm0
	jmp	SHORT $LN17@Destroy
$LN16@Destroy:
	mov	edx, DWORD PTR _i$10[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _i$10[ebp+4]
	adc	eax, 0
	mov	DWORD PTR _i$10[ebp], edx
	mov	DWORD PTR _i$10[ebp+4], eax
$LN17@Destroy:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	mov	eax, DWORD PTR [edx+36]
	xor	ecx, ecx
	mov	DWORD PTR tv811[ebp], eax
	mov	DWORD PTR tv811[ebp+4], ecx
	mov	edx, DWORD PTR _i$10[ebp+4]
	cmp	edx, DWORD PTR tv811[ebp+4]
	ja	$LN33@Destroy
	jb	SHORT $LN39@Destroy
	mov	eax, DWORD PTR _i$10[ebp]
	cmp	eax, DWORD PTR tv811[ebp]
	jae	$LN33@Destroy
$LN39@Destroy:
; Line 866
	push	0
	push	32					; 00000020H
	mov	ecx, DWORD PTR _i$10[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _i$10[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+852]
	cmp	DWORD PTR [edx+eax+24], 0
	je	SHORT $LN14@Destroy
	push	0
	push	32					; 00000020H
	mov	eax, DWORD PTR _i$10[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _i$10[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+852]
	mov	esi, DWORD PTR [ecx+eax+24]
	push	0
	push	32					; 00000020H
	mov	edx, DWORD PTR _i$10[ebp+4]
	push	edx
	mov	eax, DWORD PTR _i$10[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+852]
	mov	eax, DWORD PTR [edx+eax+24]
	mov	ecx, DWORD PTR [esi]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	0
	push	32					; 00000020H
	mov	eax, DWORD PTR _i$10[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _i$10[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+852]
	mov	DWORD PTR [ecx+eax+24], 0
$LN14@Destroy:
; Line 867
	jmp	$LN16@Destroy
$LN33@Destroy:
; Line 870
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+872], 0
	je	$LN13@Destroy
; Line 872
	xorpd	xmm0, xmm0
	movlpd	QWORD PTR _i$9[ebp], xmm0
	jmp	SHORT $LN12@Destroy
$LN11@Destroy:
	mov	eax, DWORD PTR _i$9[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _i$9[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _i$9[ebp], eax
	mov	DWORD PTR _i$9[ebp+4], ecx
$LN12@Destroy:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+844]
	mov	ecx, DWORD PTR [eax+36]
	xor	edx, edx
	mov	DWORD PTR tv887[ebp], ecx
	mov	DWORD PTR tv887[ebp+4], edx
	mov	eax, DWORD PTR _i$9[ebp+4]
	cmp	eax, DWORD PTR tv887[ebp+4]
	ja	$LN13@Destroy
	jb	SHORT $LN40@Destroy
	mov	ecx, DWORD PTR _i$9[ebp]
	cmp	ecx, DWORD PTR tv887[ebp]
	jae	$LN13@Destroy
$LN40@Destroy:
; Line 874
	push	0
	push	32					; 00000020H
	mov	edx, DWORD PTR _i$9[ebp+4]
	push	edx
	mov	eax, DWORD PTR _i$9[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+872]
	cmp	DWORD PTR [edx+eax+24], 0
	je	SHORT $LN9@Destroy
	push	0
	push	32					; 00000020H
	mov	eax, DWORD PTR _i$9[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _i$9[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+872]
	mov	esi, DWORD PTR [ecx+eax+24]
	push	0
	push	32					; 00000020H
	mov	edx, DWORD PTR _i$9[ebp+4]
	push	edx
	mov	eax, DWORD PTR _i$9[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+872]
	mov	eax, DWORD PTR [edx+eax+24]
	mov	ecx, DWORD PTR [esi]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	0
	push	32					; 00000020H
	mov	eax, DWORD PTR _i$9[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _i$9[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+872]
	mov	DWORD PTR [ecx+eax+24], 0
$LN9@Destroy:
; Line 875
	jmp	$LN11@Destroy
$LN13@Destroy:
; Line 877
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+872], 0
	je	SHORT $LN8@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+872]
	mov	DWORD PTR $T8[ebp], ecx
	mov	edx, DWORD PTR $T8[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+872], 0
$LN8@Destroy:
; Line 879
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN7@Destroy
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR $T7[ebp], eax
	mov	ecx, DWORD PTR $T7[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], 0
$LN7@Destroy:
; Line 880
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 881
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN6@Destroy
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR $T6[ebp], eax
	mov	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], 0
$LN6@Destroy:
; Line 882
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+884], 0
	je	SHORT $LN5@Destroy
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+884]
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+884], 0
$LN5@Destroy:
; Line 883
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+888], 0
	je	SHORT $LN4@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+888]
	mov	DWORD PTR $T4[ebp], ecx
	mov	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+888], 0
$LN4@Destroy:
; Line 884
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+892], 0
	je	SHORT $LN3@Destroy
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+892]
	mov	DWORD PTR $T3[ebp], eax
	mov	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+892], 0
$LN3@Destroy:
; Line 886
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN2@Destroy
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], 0
$LN2@Destroy:
; Line 887
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+60], 0
	je	SHORT $LN1@Destroy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
$LN1@Destroy:
; Line 889
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+844], 0
; Line 890
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+848], 0
; Line 891
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+852], 0
; Line 892
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+856], 0
; Line 893
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+860], 0
; Line 894
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+864], 0
; Line 895
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+868], 0
; Line 897
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+876], 0
; Line 898
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+880], 0
$LN35@Destroy:
; Line 900
	pop	edi
	pop	esi
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Destroy@CDXUTSDKMesh@@UAEXXZ ENDP			; CDXUTSDKMesh::Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -640						; size = 4
_pFrame$2 = -636					; size = 4
_i$3 = -632						; size = 4
_BaseOffset$ = -628					; size = 8
_fileheader$ = -616					; size = 40
_hFile$ = -572						; size = 4
_strPath$ = -564					; size = 520
_liMove$ = -36						; size = 8
_dwBytesRead$ = -20					; size = 4
_hr$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_szFileName$ = 8					; size = 4
?LoadAnimation@CDXUTSDKMesh@@UAEJPB_W@Z PROC		; CDXUTSDKMesh::LoadAnimation
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 761
	push	ebp
	mov	ebp, esp
	sub	esp, 640				; 00000280H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-640]
	mov	ecx, 160				; 000000a0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 762
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
; Line 763
	mov	DWORD PTR _dwBytesRead$[ebp], 0
; Line 768
	mov	eax, DWORD PTR _szFileName$[ebp]
	push	eax
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strPath$[ebp]
	push	ecx
	call	?DXUTFindDXSDKMediaFileCch@@YGJPA_WHPB_W@Z ; DXUTFindDXSDKMediaFileCch
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN14@LoadAnimat
	push	1
	push	OFFSET $SG155239
	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	768					; 00000300H
	push	OFFSET $SG155240
	call	?DXUTTrace@@YGJPBDKJPB_W_N@Z		; DXUTTrace
	jmp	$LN15@LoadAnimat
$LN14@LoadAnimat:
; Line 772
	mov	esi, esp
	push	0
	push	134217728				; 08000000H
	push	3
	push	0
	push	1
	push	1
	lea	eax, DWORD PTR _strPath$[ebp]
	push	eax
	call	DWORD PTR __imp__CreateFileW@28
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hFile$[ebp], eax
; Line 773
	cmp	DWORD PTR _hFile$[ebp], -1
	jne	SHORT $LN13@LoadAnimat
; Line 774
	mov	eax, -2147219197			; 80040903H
	jmp	$LN15@LoadAnimat
$LN13@LoadAnimat:
; Line 779
	mov	esi, esp
	push	0
	lea	ecx, DWORD PTR _dwBytesRead$[ebp]
	push	ecx
	push	40					; 00000028H
	lea	edx, DWORD PTR _fileheader$[ebp]
	push	edx
	mov	eax, DWORD PTR _hFile$[ebp]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN12@LoadAnimat
; Line 780
	jmp	$Error$23
	jmp	$Error$23
$LN12@LoadAnimat:
; Line 783
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	ecx, DWORD PTR _fileheader$[ebp+24]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _fileheader$[ebp+28]
	adc	edx, 0
	push	ecx
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+52], ecx
; Line 784
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+52], 0
	jne	SHORT $LN10@LoadAnimat
; Line 786
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
; Line 787
	jmp	$Error$23
	jmp	$Error$23
$LN10@LoadAnimat:
; Line 791
	xorpd	xmm0, xmm0
	movlpd	QWORD PTR _liMove$[ebp], xmm0
; Line 792
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _liMove$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _liMove$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hFile$[ebp]
	push	edx
	call	DWORD PTR __imp__SetFilePointerEx@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN8@LoadAnimat
; Line 793
	jmp	$Error$23
	jmp	$Error$23
$LN8@LoadAnimat:
; Line 795
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _dwBytesRead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fileheader$[ebp+24]
	add	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _fileheader$[ebp+28]
	adc	edx, 0
	push	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _hFile$[ebp]
	push	edx
	call	DWORD PTR __imp__ReadFile@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN6@LoadAnimat
; Line 796
	jmp	$Error$23
	jmp	$Error$23
$LN6@LoadAnimat:
; Line 799
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+876], edx
; Line 800
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+876]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+52]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+880], edx
; Line 802
	mov	DWORD PTR _BaseOffset$[ebp], 40		; 00000028H
	mov	DWORD PTR _BaseOffset$[ebp+4], 0
; Line 803
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@LoadAnimat
$LN3@LoadAnimat:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN4@LoadAnimat:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+876]
	mov	edx, DWORD PTR _i$3[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jae	SHORT $LN2@LoadAnimat
; Line 807
	imul	eax, DWORD PTR _i$3[ebp], 112
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+880]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+52]
	add	ecx, DWORD PTR [edx+eax+104]
	add	ecx, DWORD PTR _BaseOffset$[ebp]
	imul	edx, DWORD PTR _i$3[ebp], 112
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+880]
	mov	DWORD PTR [eax+edx+104], ecx
; Line 808
	imul	ecx, DWORD PTR _i$3[ebp], 112
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+880]
	add	eax, ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindFrame@CDXUTSDKMesh@@QBEPAUSDKMESH_FRAME@@PBD@Z ; CDXUTSDKMesh::FindFrame
	mov	DWORD PTR _pFrame$2[ebp], eax
; Line 809
	cmp	DWORD PTR _pFrame$2[ebp], 0
	je	SHORT $LN1@LoadAnimat
; Line 811
	mov	ecx, DWORD PTR _pFrame$2[ebp]
	mov	edx, DWORD PTR _i$3[ebp]
	mov	DWORD PTR [ecx+180], edx
$LN1@LoadAnimat:
; Line 813
	jmp	$LN3@LoadAnimat
$LN2@LoadAnimat:
; Line 815
	mov	DWORD PTR _hr$[ebp], 0
$Error$23:
; Line 817
	mov	esi, esp
	mov	eax, DWORD PTR _hFile$[ebp]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 818
	mov	eax, DWORD PTR _hr$[ebp]
$LN15@LoadAnimat:
; Line 819
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@LoadAnimat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 640				; 00000280H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN22@LoadAnimat:
	DD	4
	DD	$LN21@LoadAnimat
$LN21@LoadAnimat:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN17@LoadAnimat
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN18@LoadAnimat
	DD	-564					; fffffdccH
	DD	520					; 00000208H
	DD	$LN19@LoadAnimat
	DD	-616					; fffffd98H
	DD	40					; 00000028H
	DD	$LN20@LoadAnimat
$LN20@LoadAnimat:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN19@LoadAnimat:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN18@LoadAnimat:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	0
$LN17@LoadAnimat:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	66					; 00000042H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
?LoadAnimation@CDXUTSDKMesh@@UAEJPB_W@Z ENDP		; CDXUTSDKMesh::LoadAnimation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDev11$ = 8						; size = 4
_pData$ = 12						; size = 4
_DataBytes$ = 16					; size = 4
_bCopyStatic$ = 20					; size = 1
_pLoaderCallbacks$ = 24					; size = 4
?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z PROC ; CDXUTSDKMesh::Create
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 754
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 755
	mov	esi, esp
	mov	eax, DWORD PTR _pLoaderCallbacks$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bCopyStatic$[ebp]
	push	ecx
	mov	edx, DWORD PTR _DataBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pDev11$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 756
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z ENDP ; CDXUTSDKMesh::Create
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDev11$ = 8						; size = 4
_szFileName$ = 12					; size = 4
_pLoaderCallbacks$ = 16					; size = 4
?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z PROC ; CDXUTSDKMesh::Create
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 747
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 748
	mov	esi, esp
	mov	eax, DWORD PTR _pLoaderCallbacks$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDev11$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 749
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z ENDP ; CDXUTSDKMesh::Create
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDXUTSDKMesh@@UAE@XZ PROC				; CDXUTSDKMesh::~CDXUTSDKMesh
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 740
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDXUTSDKMesh@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTSDKMesh@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 741
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Destroy@CDXUTSDKMesh@@UAEXXZ		; CDXUTSDKMesh::Destroy
; Line 742
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::~vector<unsigned char *,std::allocator<unsigned char *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CDXUTSDKMesh@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::~vector<unsigned char *,std::allocator<unsigned char *> >
__ehhandler$??1CDXUTSDKMesh@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDXUTSDKMesh@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDXUTSDKMesh@@UAE@XZ ENDP				; CDXUTSDKMesh::~CDXUTSDKMesh
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDXUTSDKMesh@@QAE@XZ PROC				; CDXUTSDKMesh::CDXUTSDKMesh
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 734
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDXUTSDKMesh@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::vector<unsigned char *,std::allocator<unsigned char *> >
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+52], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+844], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+872], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+876], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+884], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+888], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+892], 0
; Line 735
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDXUTSDKMesh@@QAE@XZ ENDP				; CDXUTSDKMesh::CDXUTSDKMesh
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iFrame$ = 8						; size = 4
_bAdjacent$ = 12					; size = 1
_pd3dDeviceContext$ = 16				; size = 4
_iDiffuseSlot$ = 20					; size = 4
_iNormalSlot$ = 24					; size = 4
_iSpecularSlot$ = 28					; size = 4
?RenderFrame@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z PROC ; CDXUTSDKMesh::RenderFrame
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 692
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 693
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN4@RenderFram
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+864], 0
	jne	SHORT $LN5@RenderFram
$LN4@RenderFram:
; Line 694
	jmp	$LN6@RenderFram
$LN5@RenderFram:
; Line 696
	imul	edx, DWORD PTR _iFrame$[ebp], 184
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+864]
	cmp	DWORD PTR [ecx+edx+100], -1
	je	SHORT $LN3@RenderFram
; Line 703
	mov	edx, DWORD PTR _iSpecularSlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _iNormalSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iDiffuseSlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDeviceContext$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bAdjacent$[ebp]
	push	eax
	imul	ecx, DWORD PTR _iFrame$[ebp], 184
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+864]
	mov	ecx, DWORD PTR [eax+ecx+100]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderMesh@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderMesh
$LN3@RenderFram:
; Line 707
	imul	edx, DWORD PTR _iFrame$[ebp], 184
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+864]
	cmp	DWORD PTR [ecx+edx+108], -1
	je	SHORT $LN2@RenderFram
; Line 709
	mov	edx, DWORD PTR _iSpecularSlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _iNormalSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iDiffuseSlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDeviceContext$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bAdjacent$[ebp]
	push	eax
	imul	ecx, DWORD PTR _iFrame$[ebp], 184
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+864]
	mov	ecx, DWORD PTR [eax+ecx+108]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderFrame@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderFrame
$LN2@RenderFram:
; Line 712
	imul	edx, DWORD PTR _iFrame$[ebp], 184
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+864]
	cmp	DWORD PTR [ecx+edx+112], -1
	je	SHORT $LN6@RenderFram
; Line 714
	mov	edx, DWORD PTR _iSpecularSlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _iNormalSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iDiffuseSlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDeviceContext$[ebp]
	push	edx
	movzx	eax, BYTE PTR _bAdjacent$[ebp]
	push	eax
	imul	ecx, DWORD PTR _iFrame$[ebp], 184
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+864]
	mov	ecx, DWORD PTR [eax+ecx+112]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RenderFrame@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderFrame
$LN6@RenderFram:
; Line 715
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?RenderFrame@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ENDP ; CDXUTSDKMesh::RenderFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv181 = -484						; size = 4
tv148 = -480						; size = 4
tv273 = -476						; size = 8
_VertexStart$1 = -468					; size = 4
_IndexStart$2 = -464					; size = 4
_IndexCount$3 = -460					; size = 4
_subset$4 = -456					; size = 4
_PrimType$ = -452					; size = 4
_pMat$ = -448						; size = 4
_pSubset$ = -444					; size = 4
_ibFormat$ = -440					; size = 4
_pIB$ = -436						; size = 4
_pIndexBufferArray$ = -432				; size = 4
_i$5 = -428						; size = 8
_pVB$ = -416						; size = 128
_Offsets$ = -280					; size = 128
_Strides$ = -144					; size = 128
_pMesh$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_iMesh$ = 8						; size = 4
_bAdjacent$ = 12					; size = 1
_pd3dDeviceContext$ = 16				; size = 4
_iDiffuseSlot$ = 20					; size = 4
_iNormalSlot$ = 24					; size = 4
_iSpecularSlot$ = 28					; size = 4
?RenderMesh@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z PROC ; CDXUTSDKMesh::RenderMesh
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 592
	push	ebp
	mov	ebp, esp
	sub	esp, 484				; 000001e4H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-484]
	mov	ecx, 121				; 00000079H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 593
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetOutstandingBufferResources@CDXUTSDKMesh@@QBEIXZ ; CDXUTSDKMesh::GetOutstandingBufferResources
	test	eax, eax
	jbe	SHORT $LN25@RenderMesh
; Line 594
	jmp	$LN26@RenderMesh
$LN25@RenderMesh:
; Line 596
	imul	eax, DWORD PTR _iMesh$[ebp], 224
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+856]
	mov	DWORD PTR _pMesh$[ebp], eax
; Line 602
	mov	edx, DWORD PTR _pMesh$[ebp]
	movzx	eax, BYTE PTR [edx+100]
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN24@RenderMesh
; Line 603
	jmp	$LN26@RenderMesh
$LN24@RenderMesh:
; Line 605
	xorpd	xmm0, xmm0
	movlpd	QWORD PTR _i$5[ebp], xmm0
	jmp	SHORT $LN23@RenderMesh
$LN22@RenderMesh:
	mov	ecx, DWORD PTR _i$5[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _i$5[ebp+4]
	adc	edx, 0
	mov	DWORD PTR _i$5[ebp], ecx
	mov	DWORD PTR _i$5[ebp+4], edx
$LN23@RenderMesh:
	mov	eax, DWORD PTR _pMesh$[ebp]
	movzx	eax, BYTE PTR [eax+100]
	cdq
	mov	DWORD PTR tv273[ebp], eax
	mov	DWORD PTR tv273[ebp+4], edx
	mov	ecx, DWORD PTR _i$5[ebp+4]
	cmp	ecx, DWORD PTR tv273[ebp+4]
	ja	$LN21@RenderMesh
	jb	SHORT $LN28@RenderMesh
	mov	edx, DWORD PTR _i$5[ebp]
	cmp	edx, DWORD PTR tv273[ebp]
	jae	$LN21@RenderMesh
$LN28@RenderMesh:
; Line 607
	push	0
	push	4
	mov	eax, DWORD PTR _i$5[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _i$5[ebp]
	push	ecx
	call	__allmul
	mov	edx, DWORD PTR _pMesh$[ebp]
	imul	esi, DWORD PTR [edx+eax+104], 288
	mov	eax, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [eax+848]
	push	0
	push	4
	mov	ecx, DWORD PTR _i$5[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _i$5[ebp]
	push	edx
	call	__allmul
	mov	ecx, DWORD PTR [edi+esi+280]
	mov	DWORD PTR _pVB$[ebp+eax], ecx
; Line 608
	push	0
	push	4
	mov	edx, DWORD PTR _i$5[ebp+4]
	push	edx
	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR _pMesh$[ebp]
	imul	edx, DWORD PTR [ecx+eax+104], 288
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+848]
	mov	esi, DWORD PTR [ecx+edx+16]
	push	0
	push	4
	mov	edx, DWORD PTR _i$5[ebp+4]
	push	edx
	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	call	__allmul
	mov	DWORD PTR _Strides$[ebp+eax], esi
; Line 609
	push	0
	push	4
	mov	ecx, DWORD PTR _i$5[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _i$5[ebp]
	push	edx
	call	__allmul
	mov	DWORD PTR _Offsets$[ebp+eax], 0
; Line 610
	jmp	$LN22@RenderMesh
$LN21@RenderMesh:
; Line 613
	movzx	eax, BYTE PTR _bAdjacent$[ebp]
	test	eax, eax
	je	SHORT $LN20@RenderMesh
; Line 614
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+872]
	mov	DWORD PTR _pIndexBufferArray$[ebp], edx
; Line 615
	jmp	SHORT $LN19@RenderMesh
$LN20@RenderMesh:
; Line 616
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+852]
	mov	DWORD PTR _pIndexBufferArray$[ebp], ecx
$LN19@RenderMesh:
; Line 618
	mov	edx, DWORD PTR _pMesh$[ebp]
	mov	eax, DWORD PTR [edx+168]
	shl	eax, 5
	mov	ecx, DWORD PTR _pIndexBufferArray$[ebp]
	mov	edx, DWORD PTR [ecx+eax+24]
	mov	DWORD PTR _pIB$[ebp], edx
; Line 619
	mov	DWORD PTR _ibFormat$[ebp], 57		; 00000039H
; Line 620
	mov	eax, DWORD PTR _pMesh$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	shl	ecx, 5
	mov	edx, DWORD PTR _pIndexBufferArray$[ebp]
	mov	eax, DWORD PTR [edx+ecx+16]
	mov	DWORD PTR tv148[ebp], eax
	cmp	DWORD PTR tv148[ebp], 0
	je	SHORT $LN16@RenderMesh
	cmp	DWORD PTR tv148[ebp], 1
	je	SHORT $LN15@RenderMesh
	jmp	SHORT $LN17@RenderMesh
$LN16@RenderMesh:
; Line 623
	mov	DWORD PTR _ibFormat$[ebp], 57		; 00000039H
; Line 624
	jmp	SHORT $LN17@RenderMesh
$LN15@RenderMesh:
; Line 626
	mov	DWORD PTR _ibFormat$[ebp], 42		; 0000002aH
$LN17@RenderMesh:
; Line 630
	mov	esi, esp
	lea	ecx, DWORD PTR _Offsets$[ebp]
	push	ecx
	lea	edx, DWORD PTR _Strides$[ebp]
	push	edx
	lea	eax, DWORD PTR _pVB$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pMesh$[ebp]
	movzx	edx, BYTE PTR [ecx+100]
	push	edx
	push	0
	mov	eax, DWORD PTR _pd3dDeviceContext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDeviceContext$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+72]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 631
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _ibFormat$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pIB$[ebp]
	push	edx
	mov	eax, DWORD PTR _pd3dDeviceContext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDeviceContext$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+76]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 633
	mov	DWORD PTR _pSubset$[ebp], 0
; Line 634
	mov	DWORD PTR _pMat$[ebp], 0
; Line 637
	mov	DWORD PTR _subset$4[ebp], 0
	jmp	SHORT $LN14@RenderMesh
$LN13@RenderMesh:
	mov	ecx, DWORD PTR _subset$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _subset$4[ebp], ecx
$LN14@RenderMesh:
	mov	edx, DWORD PTR _pMesh$[ebp]
	mov	eax, DWORD PTR _subset$4[ebp]
	cmp	eax, DWORD PTR [edx+172]
	jae	$LN26@RenderMesh
; Line 639
	mov	ecx, DWORD PTR _pMesh$[ebp]
	mov	edx, DWORD PTR [ecx+208]
	mov	eax, DWORD PTR _subset$4[ebp]
	imul	ecx, DWORD PTR [edx+eax*4], 144
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+860]
	mov	DWORD PTR _pSubset$[ebp], ecx
; Line 641
	mov	eax, DWORD PTR _pSubset$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	call	?GetPrimitiveType11@CDXUTSDKMesh@@SA?AW4D3D_PRIMITIVE_TOPOLOGY@@W4SDKMESH_PRIMITIVE_TYPE@@@Z ; CDXUTSDKMesh::GetPrimitiveType11
	add	esp, 4
	mov	DWORD PTR _PrimType$[ebp], eax
; Line 642
	movzx	edx, BYTE PTR _bAdjacent$[ebp]
	test	edx, edx
	je	SHORT $LN11@RenderMesh
; Line 644
	mov	eax, DWORD PTR _PrimType$[ebp]
	mov	DWORD PTR tv181[ebp], eax
	mov	ecx, DWORD PTR tv181[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv181[ebp], ecx
	cmp	DWORD PTR tv181[ebp], 3
	ja	SHORT $LN11@RenderMesh
	mov	edx, DWORD PTR tv181[ebp]
	jmp	DWORD PTR $LN34@RenderMesh[edx*4]
$LN8@RenderMesh:
; Line 647
	mov	DWORD PTR _PrimType$[ebp], 12		; 0000000cH
; Line 648
	jmp	SHORT $LN11@RenderMesh
$LN7@RenderMesh:
; Line 650
	mov	DWORD PTR _PrimType$[ebp], 13		; 0000000dH
; Line 651
	jmp	SHORT $LN11@RenderMesh
$LN6@RenderMesh:
; Line 653
	mov	DWORD PTR _PrimType$[ebp], 10		; 0000000aH
; Line 654
	jmp	SHORT $LN11@RenderMesh
$LN5@RenderMesh:
; Line 656
	mov	DWORD PTR _PrimType$[ebp], 11		; 0000000bH
$LN11@RenderMesh:
; Line 661
	mov	esi, esp
	mov	eax, DWORD PTR _PrimType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pd3dDeviceContext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDeviceContext$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+96]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 663
	mov	edx, DWORD PTR _pSubset$[ebp]
	imul	eax, DWORD PTR [edx+100], 1256
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+868]
	mov	DWORD PTR _pMat$[ebp], eax
; Line 664
	cmp	DWORD PTR _iDiffuseSlot$[ebp], -1
	je	SHORT $LN4@RenderMesh
	mov	edx, DWORD PTR _pMat$[ebp]
	mov	eax, DWORD PTR [edx+1232]
	push	eax
	call	??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN4@RenderMesh
; Line 665
	mov	ecx, DWORD PTR _pMat$[ebp]
	add	ecx, 1232				; 000004d0H
	mov	esi, esp
	push	ecx
	push	1
	mov	edx, DWORD PTR _iDiffuseSlot$[ebp]
	push	edx
	mov	eax, DWORD PTR _pd3dDeviceContext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDeviceContext$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@RenderMesh:
; Line 666
	cmp	DWORD PTR _iNormalSlot$[ebp], -1
	je	SHORT $LN3@RenderMesh
	mov	ecx, DWORD PTR _pMat$[ebp]
	mov	edx, DWORD PTR [ecx+1240]
	push	edx
	call	??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@RenderMesh
; Line 667
	mov	eax, DWORD PTR _pMat$[ebp]
	add	eax, 1240				; 000004d8H
	mov	esi, esp
	push	eax
	push	1
	mov	ecx, DWORD PTR _iNormalSlot$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDeviceContext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pd3dDeviceContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@RenderMesh:
; Line 668
	cmp	DWORD PTR _iSpecularSlot$[ebp], -1
	je	SHORT $LN2@RenderMesh
	mov	eax, DWORD PTR _pMat$[ebp]
	mov	ecx, DWORD PTR [eax+1248]
	push	ecx
	call	??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@RenderMesh
; Line 669
	mov	edx, DWORD PTR _pMat$[ebp]
	add	edx, 1248				; 000004e0H
	mov	esi, esp
	push	edx
	push	1
	mov	eax, DWORD PTR _iSpecularSlot$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pd3dDeviceContext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pd3dDeviceContext$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@RenderMesh:
; Line 671
	mov	edx, DWORD PTR _pSubset$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	DWORD PTR _IndexCount$3[ebp], eax
; Line 672
	mov	ecx, DWORD PTR _pSubset$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR _IndexStart$2[ebp], edx
; Line 673
	mov	eax, DWORD PTR _pSubset$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	DWORD PTR _VertexStart$1[ebp], ecx
; Line 674
	movzx	edx, BYTE PTR _bAdjacent$[ebp]
	test	edx, edx
	je	SHORT $LN1@RenderMesh
; Line 676
	mov	eax, DWORD PTR _IndexCount$3[ebp]
	shl	eax, 1
	mov	DWORD PTR _IndexCount$3[ebp], eax
; Line 677
	mov	ecx, DWORD PTR _IndexStart$2[ebp]
	shl	ecx, 1
	mov	DWORD PTR _IndexStart$2[ebp], ecx
$LN1@RenderMesh:
; Line 680
	mov	esi, esp
	mov	edx, DWORD PTR _VertexStart$1[ebp]
	push	edx
	mov	eax, DWORD PTR _IndexStart$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _IndexCount$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _pd3dDeviceContext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pd3dDeviceContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 681
	jmp	$LN13@RenderMesh
$LN26@RenderMesh:
; Line 682
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@RenderMesh
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 484				; 000001e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	3
$LN33@RenderMesh:
	DD	3
	DD	$LN32@RenderMesh
$LN32@RenderMesh:
	DD	-144					; ffffff70H
	DD	128					; 00000080H
	DD	$LN29@RenderMesh
	DD	-280					; fffffee8H
	DD	128					; 00000080H
	DD	$LN30@RenderMesh
	DD	-416					; fffffe60H
	DD	128					; 00000080H
	DD	$LN31@RenderMesh
$LN31@RenderMesh:
	DB	112					; 00000070H
	DB	86					; 00000056H
	DB	66					; 00000042H
	DB	0
$LN30@RenderMesh:
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN29@RenderMesh:
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN34@RenderMesh:
	DD	$LN6@RenderMesh
	DD	$LN5@RenderMesh
	DD	$LN8@RenderMesh
	DD	$LN7@RenderMesh
?RenderMesh@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ENDP ; CDXUTSDKMesh::RenderMesh
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -1264						; size = 64
$T2 = -1200						; size = 64
$T3 = -1136						; size = 64
$T4 = -1072						; size = 64
_mOutput$5 = -992					; size = 64
_mFrom$6 = -912						; size = 64
$T7 = -832						; size = 64
_mRot2$8 = -752						; size = 64
$T9 = -672						; size = 16
_quat2$10 = -656					; size = 16
_mInvTo$11 = -624					; size = 64
$T12 = -544						; size = 64
_mRot1$13 = -464					; size = 64
$T14 = -384						; size = 16
$T15 = -368						; size = 16
_quat1$16 = -352					; size = 16
$T17 = -336						; size = 64
_mTrans2$18 = -256					; size = 64
$T19 = -176						; size = 64
_mTrans1$20 = -96					; size = 64
_pDataOrig$21 = -24					; size = 4
_pData$22 = -20						; size = 4
_pFrameData$23 = -16					; size = 4
_iTick$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_iFrame$ = 8						; size = 4
_fTime$ = 12						; size = 8
?TransformFrameAbsolute@CDXUTSDKMesh@@IAEXIN@Z PROC	; CDXUTSDKMesh::TransformFrameAbsolute
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 556
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1272				; 000004f8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1272]
	mov	ecx, 318				; 0000013eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 557
	sub	esp, 8
	movsd	xmm0, QWORD PTR _fTime$[ebx]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAnimationKeyFromTime@CDXUTSDKMesh@@QBEIN@Z ; CDXUTSDKMesh::GetAnimationKeyFromTime
	mov	DWORD PTR _iTick$[ebp], eax
; Line 559
	imul	eax, DWORD PTR _iFrame$[ebx], 184
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+864]
	cmp	DWORD PTR [edx+eax+180], -1
	je	$LN1@TransformF
; Line 561
	imul	eax, DWORD PTR _iFrame$[ebx], 184
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+864]
	imul	eax, DWORD PTR [edx+eax+180], 112
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+880]
	mov	DWORD PTR _pFrameData$23[ebp], eax
; Line 562
	imul	edx, DWORD PTR _iTick$[ebp], 40
	mov	eax, DWORD PTR _pFrameData$23[ebp]
	add	edx, DWORD PTR [eax+104]
	mov	DWORD PTR _pData$22[ebp], edx
; Line 563
	mov	ecx, 40					; 00000028H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pFrameData$23[ebp]
	add	edx, DWORD PTR [eax+104]
	mov	DWORD PTR _pDataOrig$21[ebp], edx
; Line 565
	mov	ecx, DWORD PTR _pDataOrig$21[ebp]
	movss	xmm2, DWORD PTR [ecx+8]
	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _pDataOrig$21[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _pDataOrig$21[ebp]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	call	?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
	movaps	XMMWORD PTR $T4[ebp+48], xmm3
	movaps	XMMWORD PTR $T4[ebp+32], xmm2
	movaps	XMMWORD PTR $T4[ebp+16], xmm1
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T4[ebp]
	lea	edi, DWORD PTR $T19[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T19[ebp]
	lea	edi, DWORD PTR _mTrans1$20[ebp]
	rep movsd
; Line 566
	mov	ecx, DWORD PTR _pData$22[ebp]
	movss	xmm2, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pData$22[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _pData$22[ebp]
	movss	xmm0, DWORD PTR [eax]
	call	?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
	movaps	XMMWORD PTR $T3[ebp+48], xmm3
	movaps	XMMWORD PTR $T3[ebp+32], xmm2
	movaps	XMMWORD PTR $T3[ebp+16], xmm1
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T3[ebp]
	lea	edi, DWORD PTR $T17[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T17[ebp]
	lea	edi, DWORD PTR _mTrans2$18[ebp]
	rep movsd
; Line 568
	mov	ecx, DWORD PTR _pDataOrig$21[ebp]
	movss	xmm3, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _pDataOrig$21[ebp]
	movss	xmm2, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _pDataOrig$21[ebp]
	movss	xmm1, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _pDataOrig$21[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	call	?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	movaps	XMMWORD PTR _quat1$16[ebp], xmm0
; Line 569
	movaps	xmm0, XMMWORD PTR _quat1$16[ebp]
	call	?XMQuaternionInverse@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionInverse
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T14[ebp]
	movaps	XMMWORD PTR _quat1$16[ebp], xmm0
; Line 570
	movaps	xmm0, XMMWORD PTR _quat1$16[ebp]
	call	?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationQuaternion
	movaps	XMMWORD PTR $T2[ebp+48], xmm3
	movaps	XMMWORD PTR $T2[ebp+32], xmm2
	movaps	XMMWORD PTR $T2[ebp+16], xmm1
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR $T12[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T12[ebp]
	lea	edi, DWORD PTR _mRot1$13[ebp]
	rep movsd
; Line 571
	lea	edx, DWORD PTR _mInvTo$11[ebp]
	lea	ecx, DWORD PTR _mTrans1$20[ebp]
	movaps	xmm0, XMMWORD PTR _mRot1$13[ebp]
	movaps	xmm1, XMMWORD PTR _mRot1$13[ebp+16]
	movaps	xmm2, XMMWORD PTR _mRot1$13[ebp+32]
	movaps	xmm3, XMMWORD PTR _mRot1$13[ebp+48]
	call	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z	; DirectX::XMMATRIX::operator*
; Line 573
	mov	edx, DWORD PTR _pData$22[ebp]
	movss	xmm3, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _pData$22[ebp]
	movss	xmm2, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _pData$22[ebp]
	movss	xmm1, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _pData$22[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	call	?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _quat2$10[ebp], xmm0
; Line 574
	movaps	xmm0, XMMWORD PTR _quat2$10[ebp]
	call	?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationQuaternion
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T7[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T7[ebp]
	lea	edi, DWORD PTR _mRot2$8[ebp]
	rep movsd
; Line 575
	lea	edx, DWORD PTR _mFrom$6[ebp]
	lea	ecx, DWORD PTR _mRot2$8[ebp]
	movaps	xmm0, XMMWORD PTR _mTrans2$18[ebp]
	movaps	xmm1, XMMWORD PTR _mTrans2$18[ebp+16]
	movaps	xmm2, XMMWORD PTR _mTrans2$18[ebp+32]
	movaps	xmm3, XMMWORD PTR _mTrans2$18[ebp+48]
	call	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z	; DirectX::XMMATRIX::operator*
; Line 577
	lea	edx, DWORD PTR _mOutput$5[ebp]
	lea	ecx, DWORD PTR _mInvTo$11[ebp]
	movaps	xmm0, XMMWORD PTR _mFrom$6[ebp]
	movaps	xmm1, XMMWORD PTR _mFrom$6[ebp+16]
	movaps	xmm2, XMMWORD PTR _mFrom$6[ebp+32]
	movaps	xmm3, XMMWORD PTR _mFrom$6[ebp+48]
	call	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z	; DirectX::XMMATRIX::operator*
; Line 578
	mov	ecx, DWORD PTR _iFrame$[ebx]
	shl	ecx, 6
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+888]
	movaps	xmm0, XMMWORD PTR _mOutput$5[ebp]
	movaps	xmm1, XMMWORD PTR _mOutput$5[ebp+16]
	movaps	xmm2, XMMWORD PTR _mOutput$5[ebp+32]
	movaps	xmm3, XMMWORD PTR _mOutput$5[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
$LN1@TransformF:
; Line 580
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@TransformF
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
$LN12@TransformF:
	DD	7
	DD	$LN11@TransformF
$LN11@TransformF:
	DD	-96					; ffffffa0H
	DD	64					; 00000040H
	DD	$LN4@TransformF
	DD	-256					; ffffff00H
	DD	64					; 00000040H
	DD	$LN5@TransformF
	DD	-464					; fffffe30H
	DD	64					; 00000040H
	DD	$LN6@TransformF
	DD	-624					; fffffd90H
	DD	64					; 00000040H
	DD	$LN7@TransformF
	DD	-752					; fffffd10H
	DD	64					; 00000040H
	DD	$LN8@TransformF
	DD	-912					; fffffc70H
	DD	64					; 00000040H
	DD	$LN9@TransformF
	DD	-992					; fffffc20H
	DD	64					; 00000040H
	DD	$LN10@TransformF
$LN10@TransformF:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN9@TransformF:
	DB	109					; 0000006dH
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	0
$LN8@TransformF:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	50					; 00000032H
	DB	0
$LN7@TransformF:
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	0
$LN6@TransformF:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	49					; 00000031H
	DB	0
$LN5@TransformF:
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN4@TransformF:
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	49					; 00000031H
	DB	0
?TransformFrameAbsolute@CDXUTSDKMesh@@IAEXIN@Z ENDP	; CDXUTSDKMesh::TransformFrameAbsolute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -1056						; size = 64
$T2 = -992						; size = 64
$T3 = -928						; size = 64
$T4 = -864						; size = 64
$T5 = -800						; size = 64
_mLocalWorld$ = -720					; size = 64
$T6 = -640						; size = 64
$T7 = -576						; size = 64
$T8 = -512						; size = 64
_mQuat$9 = -432						; size = 64
$T10 = -352						; size = 16
$T11 = -336						; size = 16
$T12 = -320						; size = 16
$T13 = -304						; size = 16
_quat$14 = -288						; size = 16
$T15 = -272						; size = 64
_mTranslate$16 = -192					; size = 64
_parentPos$17 = -112					; size = 12
_pData$18 = -96						; size = 4
_pFrameData$19 = -92					; size = 4
_iTick$ = -88						; size = 4
_mLocalTransform$ = -80					; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_iFrame$ = 8						; size = 4
_parentWorld$ = 12					; size = 4
_fTime$ = 16						; size = 8
?TransformFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@N@Z PROC ; CDXUTSDKMesh::TransformFrame
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 505
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1064				; 00000428H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1064]
	mov	ecx, 266				; 0000010aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 507
	lea	ecx, DWORD PTR _mLocalTransform$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 509
	sub	esp, 8
	movsd	xmm0, QWORD PTR _fTime$[ebx]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAnimationKeyFromTime@CDXUTSDKMesh@@QBEIN@Z ; CDXUTSDKMesh::GetAnimationKeyFromTime
	mov	DWORD PTR _iTick$[ebp], eax
; Line 511
	imul	eax, DWORD PTR _iFrame$[ebx], 184
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+864]
	cmp	DWORD PTR [edx+eax+180], -1
	je	$LN5@TransformF
; Line 513
	imul	eax, DWORD PTR _iFrame$[ebx], 184
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+864]
	imul	eax, DWORD PTR [edx+eax+180], 112
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+880]
	mov	DWORD PTR _pFrameData$19[ebp], eax
; Line 514
	imul	edx, DWORD PTR _iTick$[ebp], 40
	mov	eax, DWORD PTR _pFrameData$19[ebp]
	add	edx, DWORD PTR [eax+104]
	mov	DWORD PTR _pData$18[ebp], edx
; Line 517
	mov	ecx, DWORD PTR _pData$18[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _parentPos$17[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _parentPos$17[ebp+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _parentPos$17[ebp+8], ecx
; Line 518
	movss	xmm2, DWORD PTR _parentPos$17[ebp+8]
	movss	xmm1, DWORD PTR _parentPos$17[ebp+4]
	movss	xmm0, DWORD PTR _parentPos$17[ebp]
	call	?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
	movaps	XMMWORD PTR $T4[ebp+48], xmm3
	movaps	XMMWORD PTR $T4[ebp+32], xmm2
	movaps	XMMWORD PTR $T4[ebp+16], xmm1
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T4[ebp]
	lea	edi, DWORD PTR $T15[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T15[ebp]
	lea	edi, DWORD PTR _mTranslate$16[ebp]
	rep movsd
; Line 520
	mov	edx, DWORD PTR _pData$18[ebp]
	movss	xmm3, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _pData$18[ebp]
	movss	xmm2, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _pData$18[ebp]
	movss	xmm1, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _pData$18[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	call	?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	movaps	XMMWORD PTR _quat$14[ebp], xmm0
; Line 521
	lea	eax, DWORD PTR $T12[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm1, XMMWORD PTR [eax]
	movaps	xmm0, XMMWORD PTR _quat$14[ebp]
	call	?XMVector4Equal@DirectX@@YQ_NT__m128@@0@Z ; DirectX::XMVector4Equal
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@TransformF
; Line 522
	call	?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ ; DirectX::XMQuaternionIdentity
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _quat$14[ebp], xmm0
$LN4@TransformF:
; Line 523
	movaps	xmm0, XMMWORD PTR _quat$14[ebp]
	call	?XMQuaternionNormalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionNormalize
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _quat$14[ebp], xmm0
; Line 524
	movaps	xmm0, XMMWORD PTR _quat$14[ebp]
	call	?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationQuaternion
	movaps	XMMWORD PTR $T3[ebp+48], xmm3
	movaps	XMMWORD PTR $T3[ebp+32], xmm2
	movaps	XMMWORD PTR $T3[ebp+16], xmm1
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T3[ebp]
	lea	edi, DWORD PTR $T8[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T8[ebp]
	lea	edi, DWORD PTR _mQuat$9[ebp]
	rep movsd
; Line 525
	lea	edx, DWORD PTR $T7[ebp]
	lea	ecx, DWORD PTR _mQuat$9[ebp]
	movaps	xmm0, XMMWORD PTR _mTranslate$16[ebp]
	movaps	xmm1, XMMWORD PTR _mTranslate$16[ebp+16]
	movaps	xmm2, XMMWORD PTR _mTranslate$16[ebp+32]
	movaps	xmm3, XMMWORD PTR _mTranslate$16[ebp+48]
	call	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z	; DirectX::XMMATRIX::operator*
	push	eax
	lea	ecx, DWORD PTR _mLocalTransform$[ebp]
	call	??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMMATRIX::operator=
; Line 527
	jmp	SHORT $LN3@TransformF
$LN5@TransformF:
; Line 529
	imul	edx, DWORD PTR _iFrame$[ebx], 184
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+864]
	lea	ecx, DWORD PTR [ecx+edx+116]
	call	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
	movaps	XMMWORD PTR $T2[ebp+48], xmm3
	movaps	XMMWORD PTR $T2[ebp+32], xmm2
	movaps	XMMWORD PTR $T2[ebp+16], xmm1
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR $T6[ebp]
	rep movsd
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	ecx, DWORD PTR _mLocalTransform$[ebp]
	call	??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMMATRIX::operator=
$LN3@TransformF:
; Line 533
	mov	ecx, DWORD PTR _parentWorld$[ebx]
	movaps	xmm0, XMMWORD PTR _mLocalTransform$[ebp]
	movaps	xmm1, XMMWORD PTR _mLocalTransform$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mLocalTransform$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mLocalTransform$[ebp+48]
	call	?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T5[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T5[ebp]
	lea	edi, DWORD PTR _mLocalWorld$[ebp]
	rep movsd
; Line 534
	mov	ecx, DWORD PTR _iFrame$[ebx]
	shl	ecx, 6
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+888]
	movaps	xmm0, XMMWORD PTR _mLocalWorld$[ebp]
	movaps	xmm1, XMMWORD PTR _mLocalWorld$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mLocalWorld$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mLocalWorld$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 535
	mov	ecx, DWORD PTR _iFrame$[ebx]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+892]
	movaps	xmm0, XMMWORD PTR _mLocalWorld$[ebp]
	movaps	xmm1, XMMWORD PTR _mLocalWorld$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mLocalWorld$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mLocalWorld$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 538
	imul	eax, DWORD PTR _iFrame$[ebx], 184
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+864]
	cmp	DWORD PTR [edx+eax+112], -1
	je	SHORT $LN2@TransformF
; Line 540
	sub	esp, 8
	movsd	xmm0, QWORD PTR _fTime$[ebx]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _parentWorld$[ebx]
	push	eax
	imul	ecx, DWORD PTR _iFrame$[ebx], 184
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+864]
	mov	ecx, DWORD PTR [eax+ecx+112]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@N@Z ; CDXUTSDKMesh::TransformFrame
$LN2@TransformF:
; Line 544
	imul	edx, DWORD PTR _iFrame$[ebx], 184
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+864]
	cmp	DWORD PTR [ecx+edx+108], -1
	je	SHORT $LN1@TransformF
; Line 546
	sub	esp, 8
	movsd	xmm0, QWORD PTR _fTime$[ebx]
	movsd	QWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _mLocalWorld$[ebp]
	push	edx
	imul	eax, DWORD PTR _iFrame$[ebx], 184
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+864]
	mov	eax, DWORD PTR [edx+eax+108]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@N@Z ; CDXUTSDKMesh::TransformFrame
$LN1@TransformF:
; Line 548
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@TransformF
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	16					; 00000010H
	npad	2
$LN14@TransformF:
	DD	5
	DD	$LN13@TransformF
$LN13@TransformF:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN8@TransformF
	DD	-112					; ffffff90H
	DD	12					; 0000000cH
	DD	$LN9@TransformF
	DD	-192					; ffffff40H
	DD	64					; 00000040H
	DD	$LN10@TransformF
	DD	-432					; fffffe50H
	DD	64					; 00000040H
	DD	$LN11@TransformF
	DD	-720					; fffffd30H
	DD	64					; 00000040H
	DD	$LN12@TransformF
$LN12@TransformF:
	DB	109					; 0000006dH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
$LN11@TransformF:
	DB	109					; 0000006dH
	DB	81					; 00000051H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
$LN10@TransformF:
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN9@TransformF:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN8@TransformF:
	DB	109					; 0000006dH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
?TransformFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@N@Z ENDP ; CDXUTSDKMesh::TransformFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -448						; size = 64
$T2 = -384						; size = 64
$T3 = -320						; size = 64
_mLocalWorld$ = -240					; size = 64
$T4 = -160						; size = 64
_m$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_iFrame$ = 8						; size = 4
_parentWorld$ = 12					; size = 4
?TransformBindPoseFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@@Z PROC ; CDXUTSDKMesh::TransformBindPoseFrame
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 477
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 456				; 000001c8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-456]
	mov	ecx, 114				; 00000072H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 478
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+884], 0
	jne	SHORT $LN3@TransformB
; Line 479
	jmp	$LN4@TransformB
$LN3@TransformB:
; Line 482
	imul	ecx, DWORD PTR _iFrame$[ebx], 184
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+864]
	lea	ecx, DWORD PTR [eax+ecx+116]
	call	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
	movaps	XMMWORD PTR $T2[ebp+48], xmm3
	movaps	XMMWORD PTR $T2[ebp+32], xmm2
	movaps	XMMWORD PTR $T2[ebp+16], xmm1
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR $T4[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T4[ebp]
	lea	edi, DWORD PTR _m$[ebp]
	rep movsd
; Line 483
	mov	ecx, DWORD PTR _parentWorld$[ebx]
	movaps	xmm0, XMMWORD PTR _m$[ebp]
	movaps	xmm1, XMMWORD PTR _m$[ebp+16]
	movaps	xmm2, XMMWORD PTR _m$[ebp+32]
	movaps	xmm3, XMMWORD PTR _m$[ebp+48]
	call	?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T3[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T3[ebp]
	lea	edi, DWORD PTR _mLocalWorld$[ebp]
	rep movsd
; Line 484
	mov	ecx, DWORD PTR _iFrame$[ebx]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+884]
	movaps	xmm0, XMMWORD PTR _mLocalWorld$[ebp]
	movaps	xmm1, XMMWORD PTR _mLocalWorld$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mLocalWorld$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mLocalWorld$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 487
	imul	eax, DWORD PTR _iFrame$[ebx], 184
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+864]
	cmp	DWORD PTR [edx+eax+112], -1
	je	SHORT $LN2@TransformB
; Line 489
	mov	eax, DWORD PTR _parentWorld$[ebx]
	push	eax
	imul	ecx, DWORD PTR _iFrame$[ebx], 184
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+864]
	mov	ecx, DWORD PTR [eax+ecx+112]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformBindPoseFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@@Z ; CDXUTSDKMesh::TransformBindPoseFrame
$LN2@TransformB:
; Line 493
	imul	edx, DWORD PTR _iFrame$[ebx], 184
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+864]
	cmp	DWORD PTR [ecx+edx+108], -1
	je	SHORT $LN4@TransformB
; Line 495
	lea	edx, DWORD PTR _mLocalWorld$[ebp]
	push	edx
	imul	eax, DWORD PTR _iFrame$[ebx], 184
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+864]
	mov	eax, DWORD PTR [edx+eax+108]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TransformBindPoseFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@@Z ; CDXUTSDKMesh::TransformBindPoseFrame
$LN4@TransformB:
; Line 497
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@TransformB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
	npad	1
$LN9@TransformB:
	DD	2
	DD	$LN8@TransformB
$LN8@TransformB:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN6@TransformB
	DD	-240					; ffffff10H
	DD	64					; 00000040H
	DD	$LN7@TransformB
$LN7@TransformB:
	DB	109					; 0000006dH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
$LN6@TransformB:
	DB	109					; 0000006dH
	DB	0
?TransformBindPoseFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@@Z ENDP ; CDXUTSDKMesh::TransformBindPoseFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv344 = -244						; size = 4
tv323 = -240						; size = 4
tv302 = -236						; size = 4
$T2 = -232						; size = 4
$T3 = -228						; size = 4
$T4 = -224						; size = 4
$T5 = -220						; size = 4
$T6 = -216						; size = 4
$T7 = -212						; size = 4
$T8 = -208						; size = 4
$T9 = -204						; size = 4
$T10 = -200						; size = 4
$T11 = -196						; size = 4
$T12 = -192						; size = 4
$T13 = -188						; size = 4
_half$14 = -180						; size = 12
_pt$15 = -164						; size = 4
_ind_div2$16 = -160					; size = 4
_current_ind$17 = -156					; size = 4
_vertind$18 = -152					; size = 4
_stride$19 = -148					; size = 4
_verts$20 = -144					; size = 4
_ind$21 = -140						; size = 4
_IndexStart$22 = -136					; size = 4
_IndexCount$23 = -132					; size = 4
_subset$24 = -128					; size = 4
_indsize$25 = -124					; size = 4
_meshi$26 = -120					; size = 4
_tris$ = -116						; size = 4
_currentMesh$ = -112					; size = 4
_PrimType$ = -108					; size = 4
_pSubset$ = -104					; size = 4
_pIndices$27 = -100					; size = 4
_i$28 = -96						; size = 4
_pVertices$29 = -92					; size = 4
_i$30 = -88						; size = 4
_BufferDataStart$ = -84					; size = 8
_pBufferData$ = -76					; size = 4
_i$31 = -72						; size = 4
_StaticSize$32 = -68					; size = 4
_pHeader$33 = -64					; size = 4
_upper$ = -56						; size = 12
_lower$ = -36						; size = 12
_hr$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pDev11$ = 8						; size = 4
_pData$ = 12						; size = 4
_DataBytes$ = 16					; size = 4
_bCopyStatic$ = 20					; size = 1
_pLoaderCallbacks11$ = 24				; size = 4
?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z PROC ; CDXUTSDKMesh::CreateFromMemory
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 240
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 241
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
; Line 242
	lea	ecx, DWORD PTR _lower$[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
; Line 243
	lea	ecx, DWORD PTR _upper$[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
; Line 245
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDev11$[ebp]
	mov	DWORD PTR [eax+36], ecx
; Line 247
	cmp	DWORD PTR _DataBytes$[ebp], 104		; 00000068H
	jae	SHORT $LN50@CreateFrom
; Line 248
	mov	eax, -2147467259			; 80004005H
	jmp	$LN51@CreateFrom
$LN50@CreateFrom:
; Line 251
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 253
	movzx	eax, BYTE PTR _bCopyStatic$[ebp]
	test	eax, eax
	je	$LN49@CreateFrom
; Line 255
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pHeader$33[ebp], ecx
; Line 257
	mov	edx, DWORD PTR _pHeader$33[ebp]
	mov	eax, DWORD PTR _pHeader$33[ebp]
	mov	ecx, DWORD PTR [edx+8]
	add	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [edx+12]
	adc	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _StaticSize$32[ebp], ecx
; Line 258
	mov	eax, DWORD PTR _DataBytes$[ebp]
	cmp	eax, DWORD PTR _StaticSize$32[ebp]
	jae	SHORT $LN48@CreateFrom
; Line 259
	mov	eax, -2147467259			; 80004005H
	jmp	$LN51@CreateFrom
$LN48@CreateFrom:
; Line 261
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	ecx, DWORD PTR _StaticSize$32[ebp]
	push	ecx
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T13[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T13[ebp]
	mov	DWORD PTR [edx+48], eax
; Line 262
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN47@CreateFrom
; Line 263
	mov	eax, -2147024882			; 8007000eH
	jmp	$LN51@CreateFrom
$LN47@CreateFrom:
; Line 265
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+44], ecx
; Line 267
	mov	edx, DWORD PTR _StaticSize$32[ebp]
	push	edx
	mov	eax, DWORD PTR _pData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 269
	jmp	SHORT $LN46@CreateFrom
$LN49@CreateFrom:
; Line 271
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 272
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [edx+44], eax
$LN46@CreateFrom:
; Line 276
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+844], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+848], eax
; Line 281
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+844]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+852], edx
; Line 282
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+844]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+856], ecx
; Line 283
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+44]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+860], eax
; Line 284
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+844]
	mov	edx, DWORD PTR [ecx+88]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+864], edx
; Line 285
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+844]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+868], ecx
; Line 288
	mov	DWORD PTR _i$31[ebp], 0
	jmp	SHORT $LN45@CreateFrom
$LN44@CreateFrom:
	mov	ecx, DWORD PTR _i$31[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$31[ebp], ecx
$LN45@CreateFrom:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+844]
	mov	ecx, DWORD PTR _i$31[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jae	SHORT $LN43@CreateFrom
; Line 290
	imul	edx, DWORD PTR _i$31[ebp], 224
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+856]
	mov	edx, DWORD PTR [ecx+edx+208]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+44]
	imul	ecx, DWORD PTR _i$31[ebp], 224
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+856]
	mov	DWORD PTR [eax+ecx+208], edx
; Line 291
	imul	ecx, DWORD PTR _i$31[ebp], 224
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+856]
	mov	ecx, DWORD PTR [eax+ecx+216]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+44]
	imul	eax, DWORD PTR _i$31[ebp], 224
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+856]
	mov	DWORD PTR [edx+eax+216], ecx
; Line 292
	jmp	$LN44@CreateFrom
$LN43@CreateFrom:
; Line 295
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+844]
	cmp	DWORD PTR [ecx], 101			; 00000065H
	je	SHORT $LN42@CreateFrom
; Line 297
	mov	DWORD PTR _hr$[ebp], -2147467262	; 80004002H
; Line 298
	jmp	$Error$70
$LN42@CreateFrom:
; Line 302
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+844]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _pData$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+844]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pBufferData$[ebp], ecx
; Line 305
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+844]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [edx+12]
	adc	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _BufferDataStart$[ebp], eax
	mov	DWORD PTR _BufferDataStart$[ebp+4], edx
; Line 308
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+844]
	xor	ebx, ebx
	mov	eax, DWORD PTR [ecx+32]
	mov	edx, 4
	mul	edx
	seto	bl
	neg	ebx
	or	ebx, eax
	push	ebx
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T12[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T12[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 309
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN40@CreateFrom
; Line 311
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
; Line 312
	jmp	$Error$70
$LN40@CreateFrom:
; Line 314
	mov	DWORD PTR _i$30[ebp], 0
	jmp	SHORT $LN38@CreateFrom
$LN37@CreateFrom:
	mov	eax, DWORD PTR _i$30[ebp]
	add	eax, 1
	mov	DWORD PTR _i$30[ebp], eax
$LN38@CreateFrom:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	mov	eax, DWORD PTR _i$30[ebp]
	cmp	eax, DWORD PTR [edx+32]
	jae	SHORT $LN36@CreateFrom
; Line 316
	mov	DWORD PTR _pVertices$29[ebp], 0
; Line 317
	imul	ecx, DWORD PTR _i$30[ebp], 288
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+848]
	mov	edx, DWORD PTR [eax+ecx+280]
	sub	edx, DWORD PTR _BufferDataStart$[ebp]
	mov	eax, DWORD PTR [eax+ecx+284]
	sbb	eax, DWORD PTR _BufferDataStart$[ebp+4]
	add	edx, DWORD PTR _pBufferData$[ebp]
	mov	DWORD PTR _pVertices$29[ebp], edx
; Line 319
	cmp	DWORD PTR _pDev11$[ebp], 0
	je	SHORT $LN35@CreateFrom
; Line 320
	mov	ecx, DWORD PTR _pLoaderCallbacks11$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pVertices$29[ebp]
	push	edx
	imul	eax, DWORD PTR _i$30[ebp], 288
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+848]
	push	eax
	mov	edx, DWORD PTR _pDev11$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateVertexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_VERTEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::CreateVertexBuffer
$LN35@CreateFrom:
; Line 322
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _i$30[ebp]
	mov	eax, DWORD PTR _pVertices$29[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 323
	jmp	$LN37@CreateFrom
$LN36@CreateFrom:
; Line 326
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	xor	ecx, ecx
	mov	eax, DWORD PTR [edx+36]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T11[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T11[ebp]
	mov	DWORD PTR [eax+60], ecx
; Line 327
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+60], 0
	jne	SHORT $LN34@CreateFrom
; Line 329
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
; Line 330
	jmp	$Error$70
$LN34@CreateFrom:
; Line 333
	mov	DWORD PTR _i$28[ebp], 0
	jmp	SHORT $LN32@CreateFrom
$LN31@CreateFrom:
	mov	eax, DWORD PTR _i$28[ebp]
	add	eax, 1
	mov	DWORD PTR _i$28[ebp], eax
$LN32@CreateFrom:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	mov	eax, DWORD PTR _i$28[ebp]
	cmp	eax, DWORD PTR [edx+36]
	jae	SHORT $LN30@CreateFrom
; Line 335
	mov	DWORD PTR _pIndices$27[ebp], 0
; Line 336
	mov	ecx, DWORD PTR _i$28[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+852]
	mov	edx, DWORD PTR [eax+ecx+24]
	sub	edx, DWORD PTR _BufferDataStart$[ebp]
	mov	eax, DWORD PTR [eax+ecx+28]
	sbb	eax, DWORD PTR _BufferDataStart$[ebp+4]
	add	edx, DWORD PTR _pBufferData$[ebp]
	mov	DWORD PTR _pIndices$27[ebp], edx
; Line 338
	cmp	DWORD PTR _pDev11$[ebp], 0
	je	SHORT $LN29@CreateFrom
; Line 339
	mov	ecx, DWORD PTR _pLoaderCallbacks11$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pIndices$27[ebp]
	push	edx
	mov	eax, DWORD PTR _i$28[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+852]
	push	eax
	mov	edx, DWORD PTR _pDev11$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateIndexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_INDEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::CreateIndexBuffer
$LN29@CreateFrom:
; Line 341
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _i$28[ebp]
	mov	eax, DWORD PTR _pIndices$27[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 342
	jmp	SHORT $LN31@CreateFrom
$LN30@CreateFrom:
; Line 345
	cmp	DWORD PTR _pDev11$[ebp], 0
	je	SHORT $LN28@CreateFrom
; Line 346
	mov	ecx, DWORD PTR _pLoaderCallbacks11$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+844]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+868]
	push	eax
	mov	ecx, DWORD PTR _pDev11$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadMaterials@CDXUTSDKMesh@@IAEXPAUID3D11Device@@PAUSDKMESH_MATERIAL@@IPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::LoadMaterials
$LN28@CreateFrom:
; Line 349
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+844]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR $T10[ebp], ecx
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	xor	ecx, ecx
	mov	eax, DWORD PTR $T10[ebp]
	mov	edx, 64					; 00000040H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN53@CreateFrom
	push	OFFSET ??0XMFLOAT4X4@DirectX@@QAE@XZ	; DirectX::XMFLOAT4X4::XMFLOAT4X4
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR $T8[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR tv302[ebp], edx
	jmp	SHORT $LN54@CreateFrom
$LN53@CreateFrom:
	mov	DWORD PTR tv302[ebp], 0
$LN54@CreateFrom:
	mov	eax, DWORD PTR tv302[ebp]
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T9[ebp]
	mov	DWORD PTR [ecx+884], edx
; Line 350
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+884], 0
	jne	SHORT $LN27@CreateFrom
; Line 352
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
; Line 353
	jmp	$Error$70
$LN27@CreateFrom:
; Line 357
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR $T7[ebp], eax
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	xor	ecx, ecx
	mov	eax, DWORD PTR $T7[ebp]
	mov	edx, 64					; 00000040H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T5[ebp], 0
	je	SHORT $LN55@CreateFrom
	push	OFFSET ??0XMFLOAT4X4@DirectX@@QAE@XZ	; DirectX::XMFLOAT4X4::XMFLOAT4X4
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR tv323[ebp], edx
	jmp	SHORT $LN56@CreateFrom
$LN55@CreateFrom:
	mov	DWORD PTR tv323[ebp], 0
$LN56@CreateFrom:
	mov	eax, DWORD PTR tv323[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [ecx+888], edx
; Line 358
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+888], 0
	jne	SHORT $LN25@CreateFrom
; Line 360
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
; Line 361
	jmp	$Error$70
$LN25@CreateFrom:
; Line 364
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+844]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR $T4[ebp], eax
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	xor	ecx, ecx
	mov	eax, DWORD PTR $T4[ebp]
	mov	edx, 64					; 00000040H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN57@CreateFrom
	push	OFFSET ??0XMFLOAT4X4@DirectX@@QAE@XZ	; DirectX::XMFLOAT4X4::XMFLOAT4X4
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv344[ebp], edx
	jmp	SHORT $LN58@CreateFrom
$LN57@CreateFrom:
	mov	DWORD PTR tv344[ebp], 0
$LN58@CreateFrom:
	mov	eax, DWORD PTR tv344[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+892], edx
; Line 365
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+892], 0
	jne	SHORT $LN23@CreateFrom
; Line 367
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
; Line 368
	jmp	$Error$70
$LN23@CreateFrom:
; Line 371
	mov	DWORD PTR _pSubset$[ebp], 0
; Line 375
	mov	ecx, 224				; 000000e0H
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+856]
	mov	DWORD PTR _currentMesh$[ebp], edx
; Line 376
	mov	DWORD PTR _tris$[ebp], 0
; Line 377
	mov	DWORD PTR _meshi$26[ebp], 0
	jmp	SHORT $LN21@CreateFrom
$LN20@CreateFrom:
	mov	ecx, DWORD PTR _meshi$26[ebp]
	add	ecx, 1
	mov	DWORD PTR _meshi$26[ebp], ecx
$LN21@CreateFrom:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+844]
	mov	ecx, DWORD PTR _meshi$26[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jae	$LN19@CreateFrom
; Line 378
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR _lower$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR _lower$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR _lower$[ebp+8], xmm0
; Line 379
	movss	xmm0, DWORD PTR __real@ff7fffff
	movss	DWORD PTR _upper$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@ff7fffff
	movss	DWORD PTR _upper$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@ff7fffff
	movss	DWORD PTR _upper$[ebp+8], xmm0
; Line 380
	mov	edx, DWORD PTR _meshi$26[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMesh@CDXUTSDKMesh@@QBEPAUSDKMESH_MESH@@I@Z ; CDXUTSDKMesh::GetMesh
	mov	DWORD PTR _currentMesh$[ebp], eax
; Line 382
	mov	eax, DWORD PTR _currentMesh$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+852]
	cmp	DWORD PTR [eax+ecx+16], 0
	jne	SHORT $LN18@CreateFrom
; Line 383
	mov	DWORD PTR _indsize$25[ebp], 2
; Line 384
	jmp	SHORT $LN17@CreateFrom
$LN18@CreateFrom:
; Line 385
	mov	DWORD PTR _indsize$25[ebp], 4
$LN17@CreateFrom:
; Line 388
	mov	DWORD PTR _subset$24[ebp], 0
	jmp	SHORT $LN16@CreateFrom
$LN15@CreateFrom:
	mov	ecx, DWORD PTR _subset$24[ebp]
	add	ecx, 1
	mov	DWORD PTR _subset$24[ebp], ecx
$LN16@CreateFrom:
	mov	edx, DWORD PTR _currentMesh$[ebp]
	mov	eax, DWORD PTR _subset$24[ebp]
	cmp	eax, DWORD PTR [edx+172]
	jae	$LN14@CreateFrom
; Line 390
	mov	ecx, DWORD PTR _subset$24[ebp]
	push	ecx
	mov	edx, DWORD PTR _meshi$26[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSubset@CDXUTSDKMesh@@QBEPAUSDKMESH_SUBSET@@II@Z ; CDXUTSDKMesh::GetSubset
	mov	DWORD PTR _pSubset$[ebp], eax
; Line 392
	mov	eax, DWORD PTR _pSubset$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	call	?GetPrimitiveType11@CDXUTSDKMesh@@SA?AW4D3D_PRIMITIVE_TOPOLOGY@@W4SDKMESH_PRIMITIVE_TYPE@@@Z ; CDXUTSDKMesh::GetPrimitiveType11
	add	esp, 4
	mov	DWORD PTR _PrimType$[ebp], eax
; Line 393
	cmp	DWORD PTR _PrimType$[ebp], 4
	je	SHORT $LN59@CreateFrom
	mov	esi, esp
	push	393					; 00000189H
	push	OFFSET $SG154992
	push	OFFSET $SG154993
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN59@CreateFrom:
; Line 395
	mov	eax, DWORD PTR _pSubset$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	mov	DWORD PTR _IndexCount$23[ebp], ecx
; Line 396
	mov	edx, DWORD PTR _pSubset$[ebp]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR _IndexStart$22[ebp], eax
; Line 406
	mov	ecx, DWORD PTR _currentMesh$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _ind$21[ebp], edx
; Line 407
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _currentMesh$[ebp]
	mov	eax, DWORD PTR [edx+ecx+104]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _verts$20[ebp], eax
; Line 408
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _currentMesh$[ebp]
	imul	ecx, DWORD PTR [eax+edx+104], 288
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+848]
	mov	ecx, DWORD PTR [eax+ecx+16]
	mov	DWORD PTR _stride$19[ebp], ecx
; Line 409
	mov	eax, DWORD PTR _stride$19[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	je	SHORT $LN60@CreateFrom
	mov	esi, esp
	push	409					; 00000199H
	push	OFFSET $SG155005
	push	OFFSET $SG155006
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN60@CreateFrom:
; Line 410
	mov	eax, DWORD PTR _stride$19[ebp]
	shr	eax, 2
	mov	DWORD PTR _stride$19[ebp], eax
; Line 411
	mov	ecx, DWORD PTR _IndexStart$22[ebp]
	mov	DWORD PTR _vertind$18[ebp], ecx
	jmp	SHORT $LN13@CreateFrom
$LN12@CreateFrom:
	mov	edx, DWORD PTR _vertind$18[ebp]
	add	edx, 1
	mov	DWORD PTR _vertind$18[ebp], edx
$LN13@CreateFrom:
	mov	eax, DWORD PTR _IndexStart$22[ebp]
	add	eax, DWORD PTR _IndexCount$23[ebp]
	cmp	DWORD PTR _vertind$18[ebp], eax
	jae	$LN11@CreateFrom
; Line 412
	mov	DWORD PTR _current_ind$17[ebp], 0
; Line 413
	cmp	DWORD PTR _indsize$25[ebp], 2
	jne	SHORT $LN10@CreateFrom
; Line 414
	mov	ecx, DWORD PTR _vertind$18[ebp]
	shr	ecx, 1
	mov	DWORD PTR _ind_div2$16[ebp], ecx
; Line 415
	mov	edx, DWORD PTR _ind_div2$16[ebp]
	mov	eax, DWORD PTR _ind$21[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _current_ind$17[ebp], ecx
; Line 416
	mov	eax, DWORD PTR _vertind$18[ebp]
	xor	edx, edx
	mov	ecx, 2
	div	ecx
	test	edx, edx
	jne	SHORT $LN9@CreateFrom
; Line 417
	mov	edx, DWORD PTR _current_ind$17[ebp]
	shl	edx, 16					; 00000010H
	mov	DWORD PTR _current_ind$17[ebp], edx
; Line 418
	mov	eax, DWORD PTR _current_ind$17[ebp]
	shr	eax, 16					; 00000010H
	mov	DWORD PTR _current_ind$17[ebp], eax
; Line 419
	jmp	SHORT $LN8@CreateFrom
$LN9@CreateFrom:
; Line 420
	mov	ecx, DWORD PTR _current_ind$17[ebp]
	shr	ecx, 16					; 00000010H
	mov	DWORD PTR _current_ind$17[ebp], ecx
$LN8@CreateFrom:
; Line 422
	jmp	SHORT $LN7@CreateFrom
$LN10@CreateFrom:
; Line 423
	mov	edx, DWORD PTR _vertind$18[ebp]
	mov	eax, DWORD PTR _ind$21[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _current_ind$17[ebp], ecx
$LN7@CreateFrom:
; Line 425
	mov	edx, DWORD PTR _tris$[ebp]
	add	edx, 1
	mov	DWORD PTR _tris$[ebp], edx
; Line 426
	mov	eax, DWORD PTR _stride$19[ebp]
	imul	eax, DWORD PTR _current_ind$17[ebp]
	mov	ecx, DWORD PTR _verts$20[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pt$15[ebp], edx
; Line 427
	mov	eax, DWORD PTR _pt$15[ebp]
	movss	xmm0, DWORD PTR _lower$[ebp]
	comiss	xmm0, DWORD PTR [eax]
	jbe	SHORT $LN6@CreateFrom
; Line 428
	mov	ecx, DWORD PTR _pt$15[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _lower$[ebp], xmm0
$LN6@CreateFrom:
; Line 430
	mov	edx, DWORD PTR _pt$15[ebp]
	movss	xmm0, DWORD PTR _lower$[ebp+4]
	comiss	xmm0, DWORD PTR [edx+4]
	jbe	SHORT $LN5@CreateFrom
; Line 431
	mov	eax, DWORD PTR _pt$15[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _lower$[ebp+4], xmm0
$LN5@CreateFrom:
; Line 433
	mov	ecx, DWORD PTR _pt$15[ebp]
	movss	xmm0, DWORD PTR _lower$[ebp+8]
	comiss	xmm0, DWORD PTR [ecx+8]
	jbe	SHORT $LN4@CreateFrom
; Line 434
	mov	edx, DWORD PTR _pt$15[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _lower$[ebp+8], xmm0
$LN4@CreateFrom:
; Line 436
	mov	eax, DWORD PTR _pt$15[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR _upper$[ebp]
	jbe	SHORT $LN3@CreateFrom
; Line 437
	mov	ecx, DWORD PTR _pt$15[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR _upper$[ebp], xmm0
$LN3@CreateFrom:
; Line 439
	mov	edx, DWORD PTR _pt$15[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	comiss	xmm0, DWORD PTR _upper$[ebp+4]
	jbe	SHORT $LN2@CreateFrom
; Line 440
	mov	eax, DWORD PTR _pt$15[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _upper$[ebp+4], xmm0
$LN2@CreateFrom:
; Line 442
	mov	ecx, DWORD PTR _pt$15[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	comiss	xmm0, DWORD PTR _upper$[ebp+8]
	jbe	SHORT $LN1@CreateFrom
; Line 443
	mov	edx, DWORD PTR _pt$15[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR _upper$[ebp+8], xmm0
$LN1@CreateFrom:
; Line 447
	jmp	$LN12@CreateFrom
$LN11@CreateFrom:
; Line 449
	jmp	$LN15@CreateFrom
$LN14@CreateFrom:
; Line 453
	movss	xmm0, DWORD PTR _upper$[ebp+8]
	subss	xmm0, DWORD PTR _lower$[ebp+8]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _upper$[ebp+4]
	subss	xmm0, DWORD PTR _lower$[ebp+4]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _upper$[ebp]
	subss	xmm0, DWORD PTR _lower$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _half$14[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@MMM@Z		; DirectX::XMFLOAT3::XMFLOAT3
; Line 455
	movss	xmm0, DWORD PTR _lower$[ebp]
	addss	xmm0, DWORD PTR _half$14[ebp]
	mov	eax, DWORD PTR _currentMesh$[ebp]
	movss	DWORD PTR [eax+180], xmm0
; Line 456
	movss	xmm0, DWORD PTR _lower$[ebp+4]
	addss	xmm0, DWORD PTR _half$14[ebp+4]
	mov	ecx, DWORD PTR _currentMesh$[ebp]
	movss	DWORD PTR [ecx+184], xmm0
; Line 457
	movss	xmm0, DWORD PTR _lower$[ebp+8]
	addss	xmm0, DWORD PTR _half$14[ebp+8]
	mov	edx, DWORD PTR _currentMesh$[ebp]
	movss	DWORD PTR [edx+188], xmm0
; Line 459
	lea	eax, DWORD PTR _half$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _currentMesh$[ebp]
	add	ecx, 192				; 000000c0H
	call	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT3::operator=
; Line 461
	jmp	$LN20@CreateFrom
$LN19@CreateFrom:
; Line 466
	mov	DWORD PTR _hr$[ebp], 0
$Error$70:
; Line 468
	mov	eax, DWORD PTR _hr$[ebp]
$LN51@CreateFrom:
; Line 469
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN69@CreateFrom
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN69@CreateFrom:
	DD	3
	DD	$LN68@CreateFrom
$LN68@CreateFrom:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN64@CreateFrom
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN65@CreateFrom
	DD	-180					; ffffff4cH
	DD	12					; 0000000cH
	DD	$LN66@CreateFrom
$LN66@CreateFrom:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	102					; 00000066H
	DB	0
$LN65@CreateFrom:
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN64@CreateFrom:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z$6:
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??_V@YAXPAXABUnothrow_t@std@@@Z		; operator delete[]
	add	esp, 8
	ret	0
__unwindfunclet$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z$7:
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??_V@YAXPAXABUnothrow_t@std@@@Z		; operator delete[]
	add	esp, 8
	ret	0
__unwindfunclet$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z$8:
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??_V@YAXPAXABUnothrow_t@std@@@Z		; operator delete[]
	add	esp, 8
	ret	0
__ehhandler$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z ENDP ; CDXUTSDKMesh::CreateFromMemory
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
_dwBytesRead$ = -40					; size = 4
_cBytes$ = -32						; size = 4
_FileSize$ = -24					; size = 8
_pLastBSlash$ = -12					; size = 4
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_pDev11$ = 8						; size = 4
_szFileName$ = 12					; size = 4
_pLoaderCallbacks11$ = 16				; size = 4
?CreateFromFile@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z PROC ; CDXUTSDKMesh::CreateFromFile
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 179
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 180
	mov	DWORD PTR _hr$[ebp], 0
; Line 183
	mov	eax, DWORD PTR _szFileName$[ebp]
	push	eax
	push	260					; 00000104H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	call	?DXUTFindDXSDKMediaFileCch@@YGJPA_WHPB_W@Z ; DXUTFindDXSDKMediaFileCch
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN8@CreateFrom
	push	1
	push	OFFSET $SG154847
	mov	edx, DWORD PTR _hr$[ebp]
	push	edx
	push	183					; 000000b7H
	push	OFFSET $SG154848
	call	?DXUTTrace@@YGJPBDKJPB_W_N@Z		; DXUTTrace
	jmp	$LN9@CreateFrom
$LN8@CreateFrom:
; Line 187
	mov	esi, esp
	push	0
	push	134217728				; 08000000H
	push	3
	push	0
	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__CreateFileW@28
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 188
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], -1
	jne	SHORT $LN7@CreateFrom
; Line 189
	mov	eax, -2147219197			; 80040903H
	jmp	$LN9@CreateFrom
$LN7@CreateFrom:
; Line 192
	push	92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	?wcsrchr@@YAPA_WPA_W_W@Z		; wcsrchr
	add	esp, 8
	mov	DWORD PTR _pLastBSlash$[ebp], eax
; Line 193
	cmp	DWORD PTR _pLastBSlash$[ebp], 0
	je	SHORT $LN6@CreateFrom
; Line 194
	xor	ecx, ecx
	mov	edx, DWORD PTR _pLastBSlash$[ebp]
	mov	WORD PTR [edx+2], cx
; Line 195
	jmp	SHORT $LN5@CreateFrom
$LN6@CreateFrom:
; Line 196
	mov	eax, 2
	imul	ecx, eax, 0
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+ecx+64], dx
$LN5@CreateFrom:
; Line 198
	mov	esi, esp
	push	0
	push	0
	push	260					; 00000104H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 584				; 00000248H
	push	ecx
	push	-1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	push	0
	push	0
	call	DWORD PTR __imp__WideCharToMultiByte@32
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 202
	mov	esi, esp
	lea	eax, DWORD PTR _FileSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__GetFileSizeEx@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 203
	mov	eax, DWORD PTR _FileSize$[ebp]
	mov	DWORD PTR _cBytes$[ebp], eax
; Line 206
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	ecx, DWORD PTR _cBytes$[ebp]
	push	ecx
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+44], eax
; Line 207
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	jne	SHORT $LN4@CreateFrom
; Line 209
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 210
	mov	eax, -2147024882			; 8007000eH
	jmp	$LN9@CreateFrom
$LN4@CreateFrom:
; Line 215
	mov	esi, esp
	push	0
	lea	ecx, DWORD PTR _dwBytesRead$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR __imp__ReadFile@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@CreateFrom
; Line 216
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
$LN3@CreateFrom:
; Line 218
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 220
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN2@CreateFrom
; Line 226
	mov	esi, esp
	mov	eax, DWORD PTR _pLoaderCallbacks11$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _cBytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _pDev11$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 227
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@CreateFrom
; Line 228
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@CreateFrom:
; Line 231
	mov	eax, DWORD PTR _hr$[ebp]
$LN9@CreateFrom:
; Line 232
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@CreateFrom
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN14@CreateFrom:
	DD	2
	DD	$LN13@CreateFrom
$LN13@CreateFrom:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN11@CreateFrom
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN12@CreateFrom
$LN12@CreateFrom:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	66					; 00000042H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN11@CreateFrom:
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
?CreateFromFile@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z ENDP ; CDXUTSDKMesh::CreateFromFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_InitData$1 = -60					; size = 12
_bufferDesc$ = -40					; size = 24
_hr$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_pHeader$ = 12						; size = 4
_pIndices$ = 16						; size = 4
_pLoaderCallbacks$ = 20					; size = 4
?CreateIndexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_INDEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z PROC ; CDXUTSDKMesh::CreateIndexBuffer
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 144
	mov	DWORD PTR _hr$[ebp], 0
; Line 145
	mov	eax, DWORD PTR _pHeader$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 148
	mov	ecx, DWORD PTR _pHeader$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _bufferDesc$[ebp], edx
; Line 149
	mov	DWORD PTR _bufferDesc$[ebp+4], 0
; Line 150
	mov	DWORD PTR _bufferDesc$[ebp+8], 2
; Line 151
	mov	DWORD PTR _bufferDesc$[ebp+12], 0
; Line 152
	mov	DWORD PTR _bufferDesc$[ebp+16], 0
; Line 154
	cmp	DWORD PTR _pLoaderCallbacks$[ebp], 0
	je	SHORT $LN3@CreateInde
	mov	eax, DWORD PTR _pLoaderCallbacks$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@CreateInde
; Line 157
	mov	esi, esp
	mov	ecx, DWORD PTR _pLoaderCallbacks$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pIndices$[ebp]
	push	eax
	sub	esp, 24					; 00000018H
	mov	ecx, esp
	mov	edx, DWORD PTR _bufferDesc$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bufferDesc$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bufferDesc$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bufferDesc$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	edx, DWORD PTR _bufferDesc$[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR _bufferDesc$[ebp+20]
	mov	DWORD PTR [ecx+20], eax
	mov	ecx, DWORD PTR _pHeader$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pLoaderCallbacks$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 159
	jmp	SHORT $LN2@CreateInde
$LN3@CreateInde:
; Line 162
	mov	edx, DWORD PTR _pIndices$[ebp]
	mov	DWORD PTR _InitData$1[ebp], edx
; Line 163
	mov	eax, DWORD PTR _pHeader$[ebp]
	add	eax, 24					; 00000018H
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _InitData$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _bufferDesc$[ebp]
	push	edx
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 164
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN2@CreateInde
; Line 166
	push	OFFSET $SG154834
	mov	ecx, DWORD PTR _pHeader$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	?DXUT_SetDebugName@@YAXPAUID3D11DeviceChild@@PBD@Z ; DXUT_SetDebugName
	add	esp, 8
$LN2@CreateInde:
; Line 170
	mov	eax, DWORD PTR _hr$[ebp]
; Line 171
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@CreateInde
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN9@CreateInde:
	DD	2
	DD	$LN8@CreateInde
$LN8@CreateInde:
	DD	-40					; ffffffd8H
	DD	24					; 00000018H
	DD	$LN6@CreateInde
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN7@CreateInde
$LN7@CreateInde:
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN6@CreateInde:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	0
?CreateIndexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_INDEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z ENDP ; CDXUTSDKMesh::CreateIndexBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_InitData$1 = -60					; size = 12
_bufferDesc$ = -40					; size = 24
_hr$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_pHeader$ = 12						; size = 4
_pVertices$ = 16					; size = 4
_pLoaderCallbacks$ = 20					; size = 4
?CreateVertexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_VERTEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z PROC ; CDXUTSDKMesh::CreateVertexBuffer
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 108
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 109
	mov	DWORD PTR _hr$[ebp], 0
; Line 110
	mov	eax, DWORD PTR _pHeader$[ebp]
	mov	DWORD PTR [eax+280], 0
	mov	DWORD PTR [eax+284], 0
; Line 113
	mov	ecx, DWORD PTR _pHeader$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _bufferDesc$[ebp], edx
; Line 114
	mov	DWORD PTR _bufferDesc$[ebp+4], 0
; Line 115
	mov	DWORD PTR _bufferDesc$[ebp+8], 1
; Line 116
	mov	DWORD PTR _bufferDesc$[ebp+12], 0
; Line 117
	mov	DWORD PTR _bufferDesc$[ebp+16], 0
; Line 119
	cmp	DWORD PTR _pLoaderCallbacks$[ebp], 0
	je	SHORT $LN3@CreateVert
	mov	eax, DWORD PTR _pLoaderCallbacks$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@CreateVert
; Line 122
	mov	esi, esp
	mov	ecx, DWORD PTR _pLoaderCallbacks$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _pVertices$[ebp]
	push	eax
	sub	esp, 24					; 00000018H
	mov	ecx, esp
	mov	edx, DWORD PTR _bufferDesc$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bufferDesc$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bufferDesc$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _bufferDesc$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	edx, DWORD PTR _bufferDesc$[ebp+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR _bufferDesc$[ebp+20]
	mov	DWORD PTR [ecx+20], eax
	mov	ecx, DWORD PTR _pHeader$[ebp]
	add	ecx, 280				; 00000118H
	push	ecx
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _pLoaderCallbacks$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 124
	jmp	SHORT $LN2@CreateVert
$LN3@CreateVert:
; Line 127
	mov	edx, DWORD PTR _pVertices$[ebp]
	mov	DWORD PTR _InitData$1[ebp], edx
; Line 128
	mov	eax, DWORD PTR _pHeader$[ebp]
	add	eax, 280				; 00000118H
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _InitData$1[ebp]
	push	ecx
	lea	edx, DWORD PTR _bufferDesc$[ebp]
	push	edx
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 129
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN2@CreateVert
; Line 131
	push	OFFSET $SG154817
	mov	ecx, DWORD PTR _pHeader$[ebp]
	mov	edx, DWORD PTR [ecx+280]
	push	edx
	call	?DXUT_SetDebugName@@YAXPAUID3D11DeviceChild@@PBD@Z ; DXUT_SetDebugName
	add	esp, 8
$LN2@CreateVert:
; Line 135
	mov	eax, DWORD PTR _hr$[ebp]
; Line 136
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@CreateVert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN9@CreateVert:
	DD	2
	DD	$LN8@CreateVert
$LN8@CreateVert:
	DD	-40					; ffffffd8H
	DD	24					; 00000018H
	DD	$LN6@CreateVert
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN7@CreateVert
$LN7@CreateVert:
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN6@CreateVert:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	0
?CreateVertexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_VERTEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z ENDP ; CDXUTSDKMesh::CreateVertexBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_m$1 = -284						; size = 4
_m$2 = -280						; size = 4
_strPath$ = -272					; size = 260
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_pMaterials$ = 12					; size = 4
_numMaterials$ = 16					; size = 4
_pLoaderCallbacks$ = 20					; size = 4
?LoadMaterials@CDXUTSDKMesh@@IAEXPAUID3D11Device@@PAUSDKMESH_MATERIAL@@IPAUSDKMESH_CALLBACKS11@@@Z PROC ; CDXUTSDKMesh::LoadMaterials
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\sdkmesh.cpp
; Line 28
	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 71					; 00000047H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 31
	cmp	DWORD PTR _pLoaderCallbacks$[ebp], 0
	je	$LN17@LoadMateri
	mov	eax, DWORD PTR _pLoaderCallbacks$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN17@LoadMateri
; Line 33
	mov	DWORD PTR _m$2[ebp], 0
	jmp	SHORT $LN16@LoadMateri
$LN15@LoadMateri:
	mov	ecx, DWORD PTR _m$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _m$2[ebp], ecx
$LN16@LoadMateri:
	mov	edx, DWORD PTR _m$2[ebp]
	cmp	edx, DWORD PTR _numMaterials$[ebp]
	jae	$LN14@LoadMateri
; Line 35
	imul	eax, DWORD PTR _m$2[ebp], 1256
	mov	ecx, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [ecx+eax+1208], 0
; Line 36
	imul	edx, DWORD PTR _m$2[ebp], 1256
	mov	eax, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [eax+edx+1216], 0
; Line 37
	imul	ecx, DWORD PTR _m$2[ebp], 1256
	mov	edx, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [edx+ecx+1224], 0
; Line 38
	imul	eax, DWORD PTR _m$2[ebp], 1256
	mov	ecx, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [ecx+eax+1232], 0
; Line 39
	imul	edx, DWORD PTR _m$2[ebp], 1256
	mov	eax, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [eax+edx+1240], 0
; Line 40
	imul	ecx, DWORD PTR _m$2[ebp], 1256
	mov	edx, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [edx+ecx+1248], 0
; Line 43
	imul	eax, DWORD PTR _m$2[ebp], 1256
	add	eax, DWORD PTR _pMaterials$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	eax, BYTE PTR [eax+edx+360]
	test	eax, eax
	je	SHORT $LN13@LoadMateri
; Line 47
	mov	esi, esp
	mov	ecx, DWORD PTR _pLoaderCallbacks$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	imul	eax, DWORD PTR _m$2[ebp], 1256
	mov	ecx, DWORD PTR _pMaterials$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1232]
	push	edx
	imul	eax, DWORD PTR _m$2[ebp], 1256
	mov	ecx, DWORD PTR _pMaterials$[ebp]
	lea	edx, DWORD PTR [ecx+eax+360]
	push	edx
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLoaderCallbacks$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@LoadMateri:
; Line 49
	imul	eax, DWORD PTR _m$2[ebp], 1256
	add	eax, DWORD PTR _pMaterials$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	eax, BYTE PTR [eax+edx+620]
	test	eax, eax
	je	SHORT $LN12@LoadMateri
; Line 53
	mov	esi, esp
	mov	ecx, DWORD PTR _pLoaderCallbacks$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	imul	eax, DWORD PTR _m$2[ebp], 1256
	mov	ecx, DWORD PTR _pMaterials$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1240]
	push	edx
	imul	eax, DWORD PTR _m$2[ebp], 1256
	mov	ecx, DWORD PTR _pMaterials$[ebp]
	lea	edx, DWORD PTR [ecx+eax+620]
	push	edx
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLoaderCallbacks$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@LoadMateri:
; Line 55
	imul	eax, DWORD PTR _m$2[ebp], 1256
	add	eax, DWORD PTR _pMaterials$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	eax, BYTE PTR [eax+edx+880]
	test	eax, eax
	je	SHORT $LN11@LoadMateri
; Line 59
	mov	esi, esp
	mov	ecx, DWORD PTR _pLoaderCallbacks$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	imul	eax, DWORD PTR _m$2[ebp], 1256
	mov	ecx, DWORD PTR _pMaterials$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1248]
	push	edx
	imul	eax, DWORD PTR _m$2[ebp], 1256
	mov	ecx, DWORD PTR _pMaterials$[ebp]
	lea	edx, DWORD PTR [ecx+eax+880]
	push	edx
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLoaderCallbacks$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@LoadMateri:
; Line 61
	jmp	$LN15@LoadMateri
$LN14@LoadMateri:
; Line 63
	jmp	$LN18@LoadMateri
$LN17@LoadMateri:
; Line 65
	mov	DWORD PTR _m$1[ebp], 0
	jmp	SHORT $LN9@LoadMateri
$LN8@LoadMateri:
	mov	eax, DWORD PTR _m$1[ebp]
	add	eax, 1
	mov	DWORD PTR _m$1[ebp], eax
$LN9@LoadMateri:
	mov	ecx, DWORD PTR _m$1[ebp]
	cmp	ecx, DWORD PTR _numMaterials$[ebp]
	jae	$LN18@LoadMateri
; Line 67
	imul	edx, DWORD PTR _m$1[ebp], 1256
	mov	eax, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [eax+edx+1208], 0
; Line 68
	imul	ecx, DWORD PTR _m$1[ebp], 1256
	mov	edx, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [edx+ecx+1216], 0
; Line 69
	imul	eax, DWORD PTR _m$1[ebp], 1256
	mov	ecx, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [ecx+eax+1224], 0
; Line 70
	imul	edx, DWORD PTR _m$1[ebp], 1256
	mov	eax, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [eax+edx+1232], 0
; Line 71
	imul	ecx, DWORD PTR _m$1[ebp], 1256
	mov	edx, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [edx+ecx+1240], 0
; Line 72
	imul	eax, DWORD PTR _m$1[ebp], 1256
	mov	ecx, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [ecx+eax+1248], 0
; Line 75
	imul	edx, DWORD PTR _m$1[ebp], 1256
	add	edx, DWORD PTR _pMaterials$[ebp]
	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR [edx+ecx+360]
	test	edx, edx
	je	$LN6@LoadMateri
; Line 77
	imul	eax, DWORD PTR _m$1[ebp], 1256
	mov	ecx, DWORD PTR _pMaterials$[ebp]
	lea	edx, DWORD PTR [ecx+eax+360]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 584				; 00000248H
	push	eax
	push	OFFSET $SG154787
	push	260					; 00000104H
	lea	ecx, DWORD PTR _strPath$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf_s
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 80
	push	1
	imul	edx, DWORD PTR _m$1[ebp], 1256
	mov	eax, DWORD PTR _pMaterials$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1232]
	push	ecx
	lea	edx, DWORD PTR _strPath$[ebp]
	push	edx
	call	?DXUTGetD3D11DeviceContext@@YGPAUID3D11DeviceContext@@XZ ; DXUTGetD3D11DeviceContext
	push	eax
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	call	?DXUTGetGlobalResourceCache@@YGAAVCDXUTResourceCache@@XZ ; DXUTGetGlobalResourceCache
	mov	ecx, eax
	call	?CreateTextureFromFile@CDXUTResourceCache@@QAEJPAUID3D11Device@@PAUID3D11DeviceContext@@PBDPAPAUID3D11ShaderResourceView@@_N@Z ; CDXUTResourceCache::CreateTextureFromFile
	test	eax, eax
	jge	SHORT $LN6@LoadMateri
; Line 81
	imul	ecx, DWORD PTR _m$1[ebp], 1256
	mov	edx, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [edx+ecx+1232], 1
$LN6@LoadMateri:
; Line 84
	imul	eax, DWORD PTR _m$1[ebp], 1256
	add	eax, DWORD PTR _pMaterials$[ebp]
	mov	ecx, 1
	imul	edx, ecx, 0
	movsx	eax, BYTE PTR [eax+edx+620]
	test	eax, eax
	je	$LN4@LoadMateri
; Line 86
	imul	ecx, DWORD PTR _m$1[ebp], 1256
	mov	edx, DWORD PTR _pMaterials$[ebp]
	lea	eax, DWORD PTR [edx+ecx+620]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 584				; 00000248H
	push	ecx
	push	OFFSET $SG154792
	push	260					; 00000104H
	lea	edx, DWORD PTR _strPath$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf_s
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 89
	push	0
	imul	eax, DWORD PTR _m$1[ebp], 1256
	mov	ecx, DWORD PTR _pMaterials$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1240]
	push	edx
	lea	eax, DWORD PTR _strPath$[ebp]
	push	eax
	call	?DXUTGetD3D11DeviceContext@@YGPAUID3D11DeviceContext@@XZ ; DXUTGetD3D11DeviceContext
	push	eax
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	push	ecx
	call	?DXUTGetGlobalResourceCache@@YGAAVCDXUTResourceCache@@XZ ; DXUTGetGlobalResourceCache
	mov	ecx, eax
	call	?CreateTextureFromFile@CDXUTResourceCache@@QAEJPAUID3D11Device@@PAUID3D11DeviceContext@@PBDPAPAUID3D11ShaderResourceView@@_N@Z ; CDXUTResourceCache::CreateTextureFromFile
	test	eax, eax
	jge	SHORT $LN4@LoadMateri
; Line 90
	imul	edx, DWORD PTR _m$1[ebp], 1256
	mov	eax, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [eax+edx+1240], 1
$LN4@LoadMateri:
; Line 92
	imul	ecx, DWORD PTR _m$1[ebp], 1256
	add	ecx, DWORD PTR _pMaterials$[ebp]
	mov	edx, 1
	imul	eax, edx, 0
	movsx	ecx, BYTE PTR [ecx+eax+880]
	test	ecx, ecx
	je	$LN2@LoadMateri
; Line 94
	imul	edx, DWORD PTR _m$1[ebp], 1256
	mov	eax, DWORD PTR _pMaterials$[ebp]
	lea	ecx, DWORD PTR [eax+edx+880]
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 584				; 00000248H
	push	edx
	push	OFFSET $SG154797
	push	260					; 00000104H
	lea	eax, DWORD PTR _strPath$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf_s
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 97
	push	0
	imul	ecx, DWORD PTR _m$1[ebp], 1256
	mov	edx, DWORD PTR _pMaterials$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1248]
	push	eax
	lea	ecx, DWORD PTR _strPath$[ebp]
	push	ecx
	call	?DXUTGetD3D11DeviceContext@@YGPAUID3D11DeviceContext@@XZ ; DXUTGetD3D11DeviceContext
	push	eax
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	call	?DXUTGetGlobalResourceCache@@YGAAVCDXUTResourceCache@@XZ ; DXUTGetGlobalResourceCache
	mov	ecx, eax
	call	?CreateTextureFromFile@CDXUTResourceCache@@QAEJPAUID3D11Device@@PAUID3D11DeviceContext@@PBDPAPAUID3D11ShaderResourceView@@_N@Z ; CDXUTResourceCache::CreateTextureFromFile
	test	eax, eax
	jge	SHORT $LN2@LoadMateri
; Line 98
	imul	eax, DWORD PTR _m$1[ebp], 1256
	mov	ecx, DWORD PTR _pMaterials$[ebp]
	mov	DWORD PTR [ecx+eax+1248], 1
$LN2@LoadMateri:
; Line 100
	jmp	$LN8@LoadMateri
$LN18@LoadMateri:
; Line 102
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@LoadMateri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN22@LoadMateri:
	DD	1
	DD	$LN21@LoadMateri
$LN21@LoadMateri:
	DD	-272					; fffffef0H
	DD	260					; 00000104H
	DD	$LN20@LoadMateri
$LN20@LoadMateri:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
?LoadMaterials@CDXUTSDKMesh@@IAEXPAUID3D11Device@@PAUSDKMESH_MATERIAL@@IPAUSDKMESH_CALLBACKS11@@@Z ENDP ; CDXUTSDKMesh::LoadMaterials
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_Tidy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
?_Tidy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXXZ PROC ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1622
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1623
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Tidy
; Line 1625
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXPAPAE0@Z ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Destroy
; Line 1628
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	sar	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAE@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAEXPAPAEI@Z ; std::_Wrap_alloc<std::allocator<unsigned char *> >::deallocate
; Line 1629
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 1630
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 1631
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN2@Tidy:
; Line 1633
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXXZ ENDP ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_Destroy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXPAPAE0@Z
_TEXT	SEGMENT
__Alval$ = -9						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXPAPAE0@Z PROC ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1566
	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAE@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
; Line 1567
	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >
	add	esp, 12					; 0000000cH
; Line 1568
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Destroy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN5@Destroy:
	DD	1
	DD	$LN4@Destroy
$LN4@Destroy:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Destroy
$LN3@Destroy:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
?_Destroy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXPAPAE0@Z ENDP ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char *,std::allocator<unsigned char *> >::~vector<unsigned char *,std::allocator<unsigned char *> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 944
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXXZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Tidy
; Line 946
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::~_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char *,std::allocator<unsigned char *> >::~vector<unsigned char *,std::allocator<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
??0?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char *,std::allocator<unsigned char *> >::vector<unsigned char *,std::allocator<unsigned char *> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 680
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@PAE@std@@QAE@XZ		; std::allocator<unsigned char *>::allocator<unsigned char *>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >
; Line 681
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char *,std::allocator<unsigned char *> >::vector<unsigned char *,std::allocator<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAE@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAE@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<unsigned char *> >::_Wrap_alloc<std::allocator<unsigned char *> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAE@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Alproxy$ = -9						; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 630
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 632
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 633
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 634
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 635
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
; Line 636
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 637
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Free_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Free_proxy:
	DD	1
	DD	$LN4@Free_proxy
$LN4@Free_proxy:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Free_proxy
$LN3@Free_proxy:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 8
__Alproxy$ = -9						; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 623
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 624
	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 625
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
; Line 627
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Alloc_prox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Alloc_prox:
	DD	1
	DD	$LN4@Alloc_prox
$LN4@Alloc_prox:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@Alloc_prox
$LN3@Alloc_prox:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::~_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 607
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Free_proxy
; Line 609
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::~_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 601
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<unsigned char *> >::_Vector_val<std::_Simple_types<unsigned char *> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 603
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Alloc_proxy
; Line 604
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned char *> >::~_Vector_val<std::_Simple_types<unsigned char *> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned char *> >::~_Vector_val<std::_Simple_types<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned char *> >::_Vector_val<std::_Simple_types<unsigned char *> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 480
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 482
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 483
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 484
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 485
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned char *> >::_Vector_val<std::_Simple_types<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAEXPAPAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAEXPAPAEI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned char *> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@PAE@std@@QAEXPAPAEI@Z ; std::allocator<unsigned char *>::deallocate
; Line 859
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAEXPAPAEI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned char *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<unsigned char *> >::_Wrap_alloc<std::allocator<unsigned char *> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAE@std@@QAE@XZ		; std::allocator<unsigned char *>::allocator<unsigned char *>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<unsigned char *> >::_Wrap_alloc<std::allocator<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$allocator@PAE@std@@QAEXPAPAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAE@std@@QAEXPAPAEI@Z PROC	; std::allocator<unsigned char *>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAE@std@@QAEXPAPAEI@Z ENDP	; std::allocator<unsigned char *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$allocator@PAE@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAE@std@@QAE@XZ PROC			; std::allocator<unsigned char *>::allocator<unsigned char *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAE@std@@QAE@XZ ENDP			; std::allocator<unsigned char *>::allocator<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 608
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 600
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
	push	ebp
	mov	ebp, esp
; Line 730
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
; Line 731
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
	push	ebp
	mov	ebp, esp
; Line 723
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Line 724
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 23
	mov	DWORD PTR __Ptr$[ebp], 0
; Line 25
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate
; Line 27
	jmp	SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
	mov	esi, esp
	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Allocate:
; Line 31
	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 879
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8
; Line 880
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 872
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH
; Line 873
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 858
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
; Line 859
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 847
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
; Line 848
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 802
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 578
	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
	add	esp, 8
; Line 579
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 573
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 574
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ PROC	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ENDP	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DXUT_SetDebugName@@YAXPAUID3D11DeviceChild@@PBD@Z
_TEXT	SEGMENT
tv72 = -16						; size = 4
tv82 = -9						; size = 1
tv79 = -8						; size = 4
tv76 = -4						; size = 4
_pObj$ = 8						; size = 4
_pstrName$ = 12						; size = 4
?DXUT_SetDebugName@@YAXPAUID3D11DeviceChild@@PBD@Z PROC	; DXUT_SetDebugName, COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\dxut\core\dxutmisc.h
; Line 197
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 198
	cmp	DWORD PTR _pObj$[ebp], 0
	je	SHORT $LN2@DXUT_SetDe
; Line 199
	mov	eax, DWORD PTR _pstrName$[ebp]
	mov	DWORD PTR tv76[ebp], eax
	mov	ecx, DWORD PTR tv76[ebp]
	add	ecx, 1
	mov	DWORD PTR tv79[ebp], ecx
$LL4@DXUT_SetDe:
	mov	edx, DWORD PTR tv76[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv82[ebp], al
	add	DWORD PTR tv76[ebp], 1
	cmp	BYTE PTR tv82[ebp], 0
	jne	SHORT $LL4@DXUT_SetDe
	mov	ecx, DWORD PTR tv76[ebp]
	sub	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR tv72[ebp], ecx
	mov	esi, esp
	mov	edx, DWORD PTR _pstrName$[ebp]
	push	edx
	mov	eax, DWORD PTR tv72[ebp]
	push	eax
	push	OFFSET _WKPDID_D3DDebugObjectName
	mov	ecx, DWORD PTR _pObj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DXUT_SetDe:
; Line 200
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DXUT_SetDebugName@@YAXPAUID3D11DeviceChild@@PBD@Z ENDP	; DXUT_SetDebugName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ
_TEXT	SEGMENT
?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ PROC	; DirectX::XMQuaternionIdentity, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 635
	push	ebp
	mov	ebp, esp
; Line 637
	movaps	xmm0, XMMWORD PTR ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
; Line 640
	pop	ebp
	ret	0
?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ ENDP	; DirectX::XMQuaternionIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionInverse@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -192						; size = 16
$T2 = -176						; size = 16
_Result$ = -160						; size = 16
$T3 = -144						; size = 16
_Control$ = -128					; size = 16
$T4 = -112						; size = 16
_Conjugate$ = -96					; size = 16
$T5 = -80						; size = 16
_L$ = -64						; size = 16
$T6 = -48						; size = 16
_Zero$ = -32						; size = 16
_Q$ = -16						; size = 16
?XMQuaternionInverse@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMQuaternionInverse, COMDAT
; _Q$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 270
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _Q$[ebp], xmm0
; Line 273
	call	?XMVectorZero@DirectX@@YQ?AT__m128@@XZ	; DirectX::XMVectorZero
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _Zero$[ebp], xmm0
; Line 275
	movaps	xmm0, XMMWORD PTR _Q$[ebp]
	call	?XMVector4LengthSq@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector4LengthSq
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _L$[ebp], xmm0
; Line 276
	movaps	xmm0, XMMWORD PTR _Q$[ebp]
	call	?XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionConjugate
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _Conjugate$[ebp], xmm0
; Line 278
	movaps	xmm1, XMMWORD PTR ?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B
	movaps	xmm0, XMMWORD PTR _L$[ebp]
	call	?XMVectorLessOrEqual@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorLessOrEqual
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _Control$[ebp], xmm0
; Line 280
	movaps	xmm1, XMMWORD PTR _L$[ebp]
	movaps	xmm0, XMMWORD PTR _Conjugate$[ebp]
	call	?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorDivide
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 282
	movaps	xmm2, XMMWORD PTR _Control$[ebp]
	movaps	xmm1, XMMWORD PTR _Zero$[ebp]
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	call	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 284
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
; Line 288
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMQuaternionInverse@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMQuaternionInverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
$T2 = -32						; size = 16
_Q$ = -16						; size = 16
?XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMQuaternionConjugate, COMDAT
; _Q$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 245
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _Q$[ebp], xmm0
; Line 259
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, OFFSET ?NegativeOne3@?1??XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionConjugate'::`2'::NegativeOne3
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _Q$[ebp]
	mulps	xmm1, xmm0
	movaps	XMMWORD PTR $T1[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 262
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMQuaternionConjugate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionNormalize@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_Q$ = -16						; size = 16
?XMQuaternionNormalize@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMQuaternionNormalize, COMDAT
; _Q$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 235
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	movaps	XMMWORD PTR _Q$[ebp], xmm0
; Line 236
	movaps	xmm0, XMMWORD PTR _Q$[ebp]
	call	?XMVector4Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector4Normalize
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 237
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMQuaternionNormalize@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMQuaternionNormalize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z
_TEXT	SEGMENT
tv283 = -736						; size = 16
$T1 = -720						; size = 16
$T2 = -704						; size = 16
$T3 = -688						; size = 16
$T4 = -672						; size = 16
_M$ = -640						; size = 64
$T5 = -560						; size = 16
$T6 = -544						; size = 16
$T7 = -528						; size = 16
$T8 = -512						; size = 16
$T9 = -496						; size = 16
$T10 = -480						; size = 16
$T11 = -464						; size = 16
_R2$ = -448						; size = 16
$T12 = -432						; size = 16
_R1$ = -416						; size = 16
$T13 = -400						; size = 16
$T14 = -384						; size = 16
_V2$ = -368						; size = 16
$T15 = -352						; size = 16
$T16 = -336						; size = 16
$T17 = -320						; size = 16
$T18 = -304						; size = 16
$T19 = -288						; size = 16
$T20 = -272						; size = 16
$T21 = -256						; size = 16
_R0$ = -240						; size = 16
$T22 = -224						; size = 16
$T23 = -208						; size = 16
$T24 = -192						; size = 16
_V1$ = -176						; size = 16
$T25 = -160						; size = 16
$T26 = -144						; size = 16
$T27 = -128						; size = 16
_V0$ = -112						; size = 16
$T28 = -96						; size = 16
_Q1$ = -80						; size = 16
$T29 = -64						; size = 16
_Q0$ = -48						; size = 16
_Quaternion$ = -32					; size = 16
__$ArrayPad$ = -4					; size = 4
?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z PROC ; DirectX::XMMatrixRotationQuaternion, COMDAT
; _Quaternion$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1631
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 736				; 000002e0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-736]
	mov	ecx, 184				; 000000b8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _Quaternion$[ebp], xmm0
; Line 1668
	movaps	xmm0, XMMWORD PTR _Quaternion$[ebp]
	addps	xmm0, XMMWORD PTR _Quaternion$[ebp]
	movaps	XMMWORD PTR $T29[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T29[ebp]
	movaps	XMMWORD PTR _Q0$[ebp], xmm0
; Line 1669
	movaps	xmm0, XMMWORD PTR _Quaternion$[ebp]
	mulps	xmm0, XMMWORD PTR _Q0$[ebp]
	movaps	XMMWORD PTR $T28[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T28[ebp]
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 1671
	movaps	xmm0, XMMWORD PTR _Q1$[ebp]
	shufps	xmm0, XMMWORD PTR _Q1$[ebp], 193	; 000000c1H
	movaps	XMMWORD PTR $T27[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T27[ebp]
	movaps	XMMWORD PTR _V0$[ebp], xmm0
; Line 1672
	lea	eax, DWORD PTR $T26[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMMask3
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _V0$[ebp]
	andps	xmm1, xmm0
	movaps	XMMWORD PTR $T25[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T25[ebp]
	movaps	XMMWORD PTR _V0$[ebp], xmm0
; Line 1673
	movaps	xmm0, XMMWORD PTR _Q1$[ebp]
	shufps	xmm0, XMMWORD PTR _Q1$[ebp], 218	; 000000daH
	movaps	XMMWORD PTR $T24[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T24[ebp]
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1674
	lea	ecx, DWORD PTR $T23[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMMask3
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _V1$[ebp]
	andps	xmm1, xmm0
	movaps	XMMWORD PTR $T22[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T22[ebp]
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1675
	movaps	xmm0, XMMWORD PTR _V0$[ebp]
	lea	edx, DWORD PTR $T21[ebp]
	push	edx
	mov	ecx, OFFSET ?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B ; `DirectX::XMMatrixRotationQuaternion'::`2'::Constant1110
	movaps	XMMWORD PTR tv283[ebp], xmm0
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv283[ebp]
	subps	xmm0, xmm1
	movaps	XMMWORD PTR $T20[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T20[ebp]
	movaps	XMMWORD PTR _R0$[ebp], xmm0
; Line 1676
	movaps	xmm0, XMMWORD PTR _R0$[ebp]
	subps	xmm0, XMMWORD PTR _V1$[ebp]
	movaps	XMMWORD PTR $T19[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T19[ebp]
	movaps	XMMWORD PTR _R0$[ebp], xmm0
; Line 1678
	movaps	xmm0, XMMWORD PTR _Quaternion$[ebp]
	shufps	xmm0, XMMWORD PTR _Quaternion$[ebp], 208 ; 000000d0H
	movaps	XMMWORD PTR $T18[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T18[ebp]
	movaps	XMMWORD PTR _V0$[ebp], xmm0
; Line 1679
	movaps	xmm0, XMMWORD PTR _Q0$[ebp]
	shufps	xmm0, XMMWORD PTR _Q0$[ebp], 230	; 000000e6H
	movaps	XMMWORD PTR $T17[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T17[ebp]
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1680
	movaps	xmm0, XMMWORD PTR _V0$[ebp]
	mulps	xmm0, XMMWORD PTR _V1$[ebp]
	movaps	XMMWORD PTR $T16[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T16[ebp]
	movaps	XMMWORD PTR _V0$[ebp], xmm0
; Line 1682
	movaps	xmm0, XMMWORD PTR _Quaternion$[ebp]
	shufps	xmm0, XMMWORD PTR _Quaternion$[ebp], 255 ; 000000ffH
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1683
	movaps	xmm0, XMMWORD PTR _Q0$[ebp]
	shufps	xmm0, XMMWORD PTR _Q0$[ebp], 201	; 000000c9H
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T14[ebp]
	movaps	XMMWORD PTR _V2$[ebp], xmm0
; Line 1684
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	mulps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1686
	movaps	xmm0, XMMWORD PTR _V0$[ebp]
	addps	xmm0, XMMWORD PTR _V1$[ebp]
	movaps	XMMWORD PTR $T12[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T12[ebp]
	movaps	XMMWORD PTR _R1$[ebp], xmm0
; Line 1687
	movaps	xmm0, XMMWORD PTR _V0$[ebp]
	subps	xmm0, XMMWORD PTR _V1$[ebp]
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _R2$[ebp], xmm0
; Line 1689
	movaps	xmm0, XMMWORD PTR _R1$[ebp]
	shufps	xmm0, XMMWORD PTR _R2$[ebp], 73		; 00000049H
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _V0$[ebp], xmm0
; Line 1690
	movaps	xmm0, XMMWORD PTR _V0$[ebp]
	shufps	xmm0, XMMWORD PTR _V0$[ebp], 120	; 00000078H
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _V0$[ebp], xmm0
; Line 1691
	movaps	xmm0, XMMWORD PTR _R1$[ebp]
	shufps	xmm0, XMMWORD PTR _R2$[ebp], 160	; 000000a0H
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1692
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	shufps	xmm0, XMMWORD PTR _V1$[ebp], 136	; 00000088H
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1694
	movaps	xmm0, XMMWORD PTR _R0$[ebp]
	shufps	xmm0, XMMWORD PTR _V0$[ebp], 76		; 0000004cH
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 1695
	movaps	xmm0, XMMWORD PTR _Q1$[ebp]
	shufps	xmm0, XMMWORD PTR _Q1$[ebp], 120	; 00000078H
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 1697
	lea	ecx, DWORD PTR _M$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 1698
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movups	xmm0, XMMWORD PTR _Q1$[ebp]
	movups	XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1700
	movaps	xmm0, XMMWORD PTR _R0$[ebp]
	shufps	xmm0, XMMWORD PTR _V0$[ebp], 237	; 000000edH
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 1701
	movaps	xmm0, XMMWORD PTR _Q1$[ebp]
	shufps	xmm0, XMMWORD PTR _Q1$[ebp], 114	; 00000072H
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 1702
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR _Q1$[ebp]
	movups	XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1704
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	shufps	xmm0, XMMWORD PTR _R0$[ebp], 228	; 000000e4H
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 1705
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR _Q1$[ebp]
	movups	XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1706
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR3
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1707
	movaps	xmm0, XMMWORD PTR _M$[ebp]
	movaps	xmm1, XMMWORD PTR _M$[ebp+16]
	movaps	xmm2, XMMWORD PTR _M$[ebp+32]
	movaps	xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1710
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@XMMatrixRo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN5@XMMatrixRo:
	DD	1
	DD	$LN4@XMMatrixRo
$LN4@XMMatrixRo:
	DD	-640					; fffffd80H
	DD	64					; 00000040H
	DD	$LN3@XMMatrixRo
$LN3@XMMatrixRo:
	DB	77					; 0000004dH
	DB	0
?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ENDP ; DirectX::XMMatrixRotationQuaternion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z
_TEXT	SEGMENT
$T1 = -128						; size = 16
_M$ = -96						; size = 64
_OffsetZ$ = -16						; size = 4
_OffsetY$ = -12						; size = 4
_OffsetX$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z PROC ; DirectX::XMMatrixTranslation, COMDAT
; _OffsetX$ = xmm0s
; _OffsetY$ = xmm1s
; _OffsetZ$ = xmm2s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1079
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movss	DWORD PTR _OffsetZ$[ebp], xmm2
	movss	DWORD PTR _OffsetY$[ebp], xmm1
	movss	DWORD PTR _OffsetX$[ebp], xmm0
; Line 1105
	lea	ecx, DWORD PTR _M$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 1106
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movups	xmm0, XMMWORD PTR ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
	movups	XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1107
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
	movups	XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1108
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
	movups	XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1109
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR _OffsetZ$[ebp]
	movss	xmm1, DWORD PTR _OffsetY$[ebp]
	movss	xmm0, DWORD PTR _OffsetX$[ebp]
	call	?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1110
	movaps	xmm0, XMMWORD PTR _M$[ebp]
	movaps	xmm1, XMMWORD PTR _M$[ebp+16]
	movaps	xmm2, XMMWORD PTR _M$[ebp+32]
	movaps	xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1113
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@XMMatrixTr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN5@XMMatrixTr:
	DD	1
	DD	$LN4@XMMatrixTr
$LN4@XMMatrixTr:
	DD	-96					; ffffffa0H
	DD	64					; 00000040H
	DD	$LN3@XMMatrixTr
$LN3@XMMatrixTr:
	DB	77					; 0000004dH
	DB	0
?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ENDP ; DirectX::XMMatrixTranslation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z
_TEXT	SEGMENT
tv806 = -2208						; size = 16
$T1 = -2192						; size = 64
$T2 = -2128						; size = 16
$T3 = -2112						; size = 16
$T4 = -2096						; size = 16
$T5 = -2080						; size = 16
_mResult$ = -2048					; size = 64
$T6 = -1968						; size = 16
$T7 = -1952						; size = 16
$T8 = -1936						; size = 16
_vTemp$ = -1920						; size = 16
$T9 = -1904						; size = 16
$T10 = -1888						; size = 16
$T11 = -1872						; size = 16
$T12 = -1856						; size = 16
$T13 = -1840						; size = 16
$T14 = -1824						; size = 16
$T15 = -1808						; size = 16
$T16 = -1792						; size = 16
$T17 = -1776						; size = 16
$T18 = -1760						; size = 16
_C7$ = -1744						; size = 16
$T19 = -1728						; size = 16
$T20 = -1712						; size = 16
_C5$ = -1696						; size = 16
$T21 = -1680						; size = 16
$T22 = -1664						; size = 16
_C3$ = -1648						; size = 16
$T23 = -1632						; size = 16
$T24 = -1616						; size = 16
_C1$ = -1600						; size = 16
$T25 = -1584						; size = 16
$T26 = -1568						; size = 16
$T27 = -1552						; size = 16
$T28 = -1536						; size = 16
$T29 = -1520						; size = 16
$T30 = -1504						; size = 16
$T31 = -1488						; size = 16
$T32 = -1472						; size = 16
$T33 = -1456						; size = 16
$T34 = -1440						; size = 16
$T35 = -1424						; size = 16
$T36 = -1408						; size = 16
$T37 = -1392						; size = 16
$T38 = -1376						; size = 16
$T39 = -1360						; size = 16
$T40 = -1344						; size = 16
$T41 = -1328						; size = 16
$T42 = -1312						; size = 16
$T43 = -1296						; size = 16
$T44 = -1280						; size = 16
$T45 = -1264						; size = 16
$T46 = -1248						; size = 16
$T47 = -1232						; size = 16
$T48 = -1216						; size = 16
$T49 = -1200						; size = 16
$T50 = -1184						; size = 16
$T51 = -1168						; size = 16
$T52 = -1152						; size = 16
$T53 = -1136						; size = 16
$T54 = -1120						; size = 16
$T55 = -1104						; size = 16
$T56 = -1088						; size = 16
$T57 = -1072						; size = 16
$T58 = -1056						; size = 16
$T59 = -1040						; size = 16
_C6$ = -1024						; size = 16
$T60 = -1008						; size = 16
_C4$ = -992						; size = 16
$T61 = -976						; size = 16
_C2$ = -960						; size = 16
$T62 = -944						; size = 16
_C0$ = -928						; size = 16
$T63 = -912						; size = 16
$T64 = -896						; size = 16
_V03$ = -880						; size = 16
$T65 = -864						; size = 16
$T66 = -848						; size = 16
$T67 = -832						; size = 16
_V13$ = -816						; size = 16
$T68 = -800						; size = 16
$T69 = -784						; size = 16
$T70 = -768						; size = 16
$T71 = -752						; size = 16
$T72 = -736						; size = 16
$T73 = -720						; size = 16
$T74 = -704						; size = 16
$T75 = -688						; size = 16
$T76 = -672						; size = 16
$T77 = -656						; size = 16
$T78 = -640						; size = 16
$T79 = -624						; size = 16
$T80 = -608						; size = 16
$T81 = -592						; size = 16
$T82 = -576						; size = 16
$T83 = -560						; size = 16
$T84 = -544						; size = 16
$T85 = -528						; size = 16
_D2$ = -512						; size = 16
$T86 = -496						; size = 16
_D1$ = -480						; size = 16
$T87 = -464						; size = 16
_D0$ = -448						; size = 16
$T88 = -432						; size = 16
_V12$ = -416						; size = 16
$T89 = -400						; size = 16
_V02$ = -384						; size = 16
$T90 = -368						; size = 16
_V11$ = -352						; size = 16
$T91 = -336						; size = 16
_V01$ = -320						; size = 16
$T92 = -304						; size = 16
_V10$ = -288						; size = 16
$T93 = -272						; size = 16
_V00$ = -256						; size = 16
$T94 = -240						; size = 64
_MT$ = -160						; size = 64
_M$ = -80						; size = 64
_pDeterminant$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z PROC ; DirectX::XMMatrixInverse, COMDAT
; _pDeterminant$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 611
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 2216				; 000008a8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-2216]
	mov	ecx, 554				; 0000022aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _M$[ebp+48], xmm3
	movaps	XMMWORD PTR _M$[ebp+32], xmm2
	movaps	XMMWORD PTR _M$[ebp+16], xmm1
	movaps	XMMWORD PTR _M$[ebp], xmm0
	mov	DWORD PTR _pDeterminant$[ebp], ecx
; Line 706
	movaps	xmm0, XMMWORD PTR _M$[ebp]
	movaps	xmm1, XMMWORD PTR _M$[ebp+16]
	movaps	xmm2, XMMWORD PTR _M$[ebp+32]
	movaps	xmm3, XMMWORD PTR _M$[ebp+48]
	call	?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z ; DirectX::XMMatrixTranspose
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T94[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T94[ebp]
	lea	edi, DWORD PTR _MT$[ebp]
	rep movsd
; Line 707
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR _MT$[ebp+ecx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 80	; 00000050H
	movaps	XMMWORD PTR $T93[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T93[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 708
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 238	; 000000eeH
	movaps	XMMWORD PTR $T92[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T92[ebp]
	movaps	XMMWORD PTR _V10$[ebp], xmm0
; Line 709
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+eax]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 80	; 00000050H
	movaps	XMMWORD PTR $T91[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T91[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 710
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 238	; 000000eeH
	movaps	XMMWORD PTR $T90[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T90[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 711
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 136	; 00000088H
	movaps	XMMWORD PTR $T89[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T89[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 712
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 221	; 000000ddH
	movaps	XMMWORD PTR $T88[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T88[ebp]
	movaps	XMMWORD PTR _V12$[ebp], xmm0
; Line 714
	movaps	xmm0, XMMWORD PTR _V00$[ebp]
	mulps	xmm0, XMMWORD PTR _V10$[ebp]
	movaps	XMMWORD PTR $T87[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T87[ebp]
	movaps	XMMWORD PTR _D0$[ebp], xmm0
; Line 715
	movaps	xmm0, XMMWORD PTR _V01$[ebp]
	mulps	xmm0, XMMWORD PTR _V11$[ebp]
	movaps	XMMWORD PTR $T86[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T86[ebp]
	movaps	XMMWORD PTR _D1$[ebp], xmm0
; Line 716
	movaps	xmm0, XMMWORD PTR _V02$[ebp]
	mulps	xmm0, XMMWORD PTR _V12$[ebp]
	movaps	XMMWORD PTR $T85[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T85[ebp]
	movaps	XMMWORD PTR _D2$[ebp], xmm0
; Line 718
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR _MT$[ebp+ecx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 238	; 000000eeH
	movaps	XMMWORD PTR $T84[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T84[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 719
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 80	; 00000050H
	movaps	XMMWORD PTR $T83[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T83[ebp]
	movaps	XMMWORD PTR _V10$[ebp], xmm0
; Line 720
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+eax]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 238	; 000000eeH
	movaps	XMMWORD PTR $T82[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T82[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 721
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 80	; 00000050H
	movaps	XMMWORD PTR $T81[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T81[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 722
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 221	; 000000ddH
	movaps	XMMWORD PTR $T80[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T80[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 723
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 136	; 00000088H
	movaps	XMMWORD PTR $T79[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T79[ebp]
	movaps	XMMWORD PTR _V12$[ebp], xmm0
; Line 725
	movaps	xmm0, XMMWORD PTR _V00$[ebp]
	mulps	xmm0, XMMWORD PTR _V10$[ebp]
	movaps	XMMWORD PTR $T78[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T78[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 726
	movaps	xmm0, XMMWORD PTR _V01$[ebp]
	mulps	xmm0, XMMWORD PTR _V11$[ebp]
	movaps	XMMWORD PTR $T77[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T77[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 727
	movaps	xmm0, XMMWORD PTR _V02$[ebp]
	mulps	xmm0, XMMWORD PTR _V12$[ebp]
	movaps	XMMWORD PTR $T76[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T76[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 728
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	subps	xmm0, XMMWORD PTR _V00$[ebp]
	movaps	XMMWORD PTR $T75[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T75[ebp]
	movaps	XMMWORD PTR _D0$[ebp], xmm0
; Line 729
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	subps	xmm0, XMMWORD PTR _V01$[ebp]
	movaps	XMMWORD PTR $T74[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T74[ebp]
	movaps	XMMWORD PTR _D1$[ebp], xmm0
; Line 730
	movaps	xmm0, XMMWORD PTR _D2$[ebp]
	subps	xmm0, XMMWORD PTR _V02$[ebp]
	movaps	XMMWORD PTR $T73[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T73[ebp]
	movaps	XMMWORD PTR _D2$[ebp], xmm0
; Line 732
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 93		; 0000005dH
	movaps	XMMWORD PTR $T72[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T72[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 733
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+ecx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 73	; 00000049H
	movaps	XMMWORD PTR $T71[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T71[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 734
	movaps	xmm0, XMMWORD PTR _V11$[ebp]
	shufps	xmm0, XMMWORD PTR _D0$[ebp], 50		; 00000032H
	movaps	XMMWORD PTR $T70[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T70[ebp]
	movaps	XMMWORD PTR _V10$[ebp], xmm0
; Line 735
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 18	; 00000012H
	movaps	XMMWORD PTR $T69[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T69[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 736
	movaps	xmm0, XMMWORD PTR _V11$[ebp]
	shufps	xmm0, XMMWORD PTR _D0$[ebp], 153	; 00000099H
	movaps	XMMWORD PTR $T68[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T68[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 738
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 253	; 000000fdH
	movaps	XMMWORD PTR $T67[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T67[ebp]
	movaps	XMMWORD PTR _V13$[ebp], xmm0
; Line 739
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR _MT$[ebp+eax]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 73	; 00000049H
	movaps	XMMWORD PTR $T66[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T66[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 740
	movaps	xmm0, XMMWORD PTR _V13$[ebp]
	shufps	xmm0, XMMWORD PTR _D1$[ebp], 50		; 00000032H
	movaps	XMMWORD PTR $T65[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T65[ebp]
	movaps	XMMWORD PTR _V12$[ebp], xmm0
; Line 741
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 18	; 00000012H
	movaps	XMMWORD PTR $T64[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T64[ebp]
	movaps	XMMWORD PTR _V03$[ebp], xmm0
; Line 742
	movaps	xmm0, XMMWORD PTR _V13$[ebp]
	shufps	xmm0, XMMWORD PTR _D1$[ebp], 153	; 00000099H
	movaps	XMMWORD PTR $T63[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T63[ebp]
	movaps	XMMWORD PTR _V13$[ebp], xmm0
; Line 744
	movaps	xmm0, XMMWORD PTR _V00$[ebp]
	mulps	xmm0, XMMWORD PTR _V10$[ebp]
	movaps	XMMWORD PTR $T62[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T62[ebp]
	movaps	XMMWORD PTR _C0$[ebp], xmm0
; Line 745
	movaps	xmm0, XMMWORD PTR _V01$[ebp]
	mulps	xmm0, XMMWORD PTR _V11$[ebp]
	movaps	XMMWORD PTR $T61[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T61[ebp]
	movaps	XMMWORD PTR _C2$[ebp], xmm0
; Line 746
	movaps	xmm0, XMMWORD PTR _V02$[ebp]
	mulps	xmm0, XMMWORD PTR _V12$[ebp]
	movaps	XMMWORD PTR $T60[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T60[ebp]
	movaps	XMMWORD PTR _C4$[ebp], xmm0
; Line 747
	movaps	xmm0, XMMWORD PTR _V03$[ebp]
	mulps	xmm0, XMMWORD PTR _V13$[ebp]
	movaps	XMMWORD PTR $T59[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T59[ebp]
	movaps	XMMWORD PTR _C6$[ebp], xmm0
; Line 750
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 4
	movaps	XMMWORD PTR $T58[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T58[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 751
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+ecx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 158	; 0000009eH
	movaps	XMMWORD PTR $T57[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T57[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 752
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	shufps	xmm0, XMMWORD PTR _V11$[ebp], 147	; 00000093H
	movaps	XMMWORD PTR $T56[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T56[ebp]
	movaps	XMMWORD PTR _V10$[ebp], xmm0
; Line 753
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 123	; 0000007bH
	movaps	XMMWORD PTR $T55[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T55[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 754
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	shufps	xmm0, XMMWORD PTR _V11$[ebp], 38	; 00000026H
	movaps	XMMWORD PTR $T54[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T54[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 756
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 164	; 000000a4H
	movaps	XMMWORD PTR $T53[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T53[ebp]
	movaps	XMMWORD PTR _V13$[ebp], xmm0
; Line 757
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR _MT$[ebp+eax]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 158	; 0000009eH
	movaps	XMMWORD PTR $T52[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T52[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 758
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	shufps	xmm0, XMMWORD PTR _V13$[ebp], 147	; 00000093H
	movaps	XMMWORD PTR $T51[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T51[ebp]
	movaps	XMMWORD PTR _V12$[ebp], xmm0
; Line 759
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 123	; 0000007bH
	movaps	XMMWORD PTR $T50[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T50[ebp]
	movaps	XMMWORD PTR _V03$[ebp], xmm0
; Line 760
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	shufps	xmm0, XMMWORD PTR _V13$[ebp], 38	; 00000026H
	movaps	XMMWORD PTR $T49[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T49[ebp]
	movaps	XMMWORD PTR _V13$[ebp], xmm0
; Line 762
	movaps	xmm0, XMMWORD PTR _V00$[ebp]
	mulps	xmm0, XMMWORD PTR _V10$[ebp]
	movaps	XMMWORD PTR $T48[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T48[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 763
	movaps	xmm0, XMMWORD PTR _V01$[ebp]
	mulps	xmm0, XMMWORD PTR _V11$[ebp]
	movaps	XMMWORD PTR $T47[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T47[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 764
	movaps	xmm0, XMMWORD PTR _V02$[ebp]
	mulps	xmm0, XMMWORD PTR _V12$[ebp]
	movaps	XMMWORD PTR $T46[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T46[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 765
	movaps	xmm0, XMMWORD PTR _V03$[ebp]
	mulps	xmm0, XMMWORD PTR _V13$[ebp]
	movaps	XMMWORD PTR $T45[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T45[ebp]
	movaps	XMMWORD PTR _V03$[ebp], xmm0
; Line 766
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	subps	xmm0, XMMWORD PTR _V00$[ebp]
	movaps	XMMWORD PTR $T44[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T44[ebp]
	movaps	XMMWORD PTR _C0$[ebp], xmm0
; Line 767
	movaps	xmm0, XMMWORD PTR _C2$[ebp]
	subps	xmm0, XMMWORD PTR _V01$[ebp]
	movaps	XMMWORD PTR $T43[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T43[ebp]
	movaps	XMMWORD PTR _C2$[ebp], xmm0
; Line 768
	movaps	xmm0, XMMWORD PTR _C4$[ebp]
	subps	xmm0, XMMWORD PTR _V02$[ebp]
	movaps	XMMWORD PTR $T42[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T42[ebp]
	movaps	XMMWORD PTR _C4$[ebp], xmm0
; Line 769
	movaps	xmm0, XMMWORD PTR _C6$[ebp]
	subps	xmm0, XMMWORD PTR _V03$[ebp]
	movaps	XMMWORD PTR $T41[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T41[ebp]
	movaps	XMMWORD PTR _C6$[ebp], xmm0
; Line 771
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+ecx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 51	; 00000033H
	movaps	XMMWORD PTR $T40[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T40[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 773
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 74		; 0000004aH
	movaps	XMMWORD PTR $T39[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T39[ebp]
	movaps	XMMWORD PTR _V10$[ebp], xmm0
; Line 774
	movaps	xmm0, XMMWORD PTR _V10$[ebp]
	shufps	xmm0, XMMWORD PTR _V10$[ebp], 44	; 0000002cH
	movaps	XMMWORD PTR $T38[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T38[ebp]
	movaps	XMMWORD PTR _V10$[ebp], xmm0
; Line 775
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 141	; 0000008dH
	movaps	XMMWORD PTR $T37[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T37[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 777
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 76		; 0000004cH
	movaps	XMMWORD PTR $T36[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T36[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 778
	movaps	xmm0, XMMWORD PTR _V11$[ebp]
	shufps	xmm0, XMMWORD PTR _V11$[ebp], 147	; 00000093H
	movaps	XMMWORD PTR $T35[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T35[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 779
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR _MT$[ebp+eax]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 51	; 00000033H
	movaps	XMMWORD PTR $T34[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T34[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 781
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 234	; 000000eaH
	movaps	XMMWORD PTR $T33[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T33[ebp]
	movaps	XMMWORD PTR _V12$[ebp], xmm0
; Line 782
	movaps	xmm0, XMMWORD PTR _V12$[ebp]
	shufps	xmm0, XMMWORD PTR _V12$[ebp], 44	; 0000002cH
	movaps	XMMWORD PTR $T32[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T32[ebp]
	movaps	XMMWORD PTR _V12$[ebp], xmm0
; Line 783
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 141	; 0000008dH
	movaps	XMMWORD PTR $T31[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T31[ebp]
	movaps	XMMWORD PTR _V03$[ebp], xmm0
; Line 785
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 236	; 000000ecH
	movaps	XMMWORD PTR $T30[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T30[ebp]
	movaps	XMMWORD PTR _V13$[ebp], xmm0
; Line 786
	movaps	xmm0, XMMWORD PTR _V13$[ebp]
	shufps	xmm0, XMMWORD PTR _V13$[ebp], 147	; 00000093H
	movaps	XMMWORD PTR $T29[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T29[ebp]
	movaps	XMMWORD PTR _V13$[ebp], xmm0
; Line 788
	movaps	xmm0, XMMWORD PTR _V00$[ebp]
	mulps	xmm0, XMMWORD PTR _V10$[ebp]
	movaps	XMMWORD PTR $T28[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T28[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 789
	movaps	xmm0, XMMWORD PTR _V01$[ebp]
	mulps	xmm0, XMMWORD PTR _V11$[ebp]
	movaps	XMMWORD PTR $T27[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T27[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 790
	movaps	xmm0, XMMWORD PTR _V02$[ebp]
	mulps	xmm0, XMMWORD PTR _V12$[ebp]
	movaps	XMMWORD PTR $T26[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T26[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 791
	movaps	xmm0, XMMWORD PTR _V03$[ebp]
	mulps	xmm0, XMMWORD PTR _V13$[ebp]
	movaps	XMMWORD PTR $T25[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T25[ebp]
	movaps	XMMWORD PTR _V03$[ebp], xmm0
; Line 792
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	subps	xmm0, XMMWORD PTR _V00$[ebp]
	movaps	XMMWORD PTR $T24[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T24[ebp]
	movaps	XMMWORD PTR _C1$[ebp], xmm0
; Line 793
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	addps	xmm0, XMMWORD PTR _V00$[ebp]
	movaps	XMMWORD PTR $T23[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T23[ebp]
	movaps	XMMWORD PTR _C0$[ebp], xmm0
; Line 794
	movaps	xmm0, XMMWORD PTR _C2$[ebp]
	addps	xmm0, XMMWORD PTR _V01$[ebp]
	movaps	XMMWORD PTR $T22[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T22[ebp]
	movaps	XMMWORD PTR _C3$[ebp], xmm0
; Line 795
	movaps	xmm0, XMMWORD PTR _C2$[ebp]
	subps	xmm0, XMMWORD PTR _V01$[ebp]
	movaps	XMMWORD PTR $T21[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T21[ebp]
	movaps	XMMWORD PTR _C2$[ebp], xmm0
; Line 796
	movaps	xmm0, XMMWORD PTR _C4$[ebp]
	subps	xmm0, XMMWORD PTR _V02$[ebp]
	movaps	XMMWORD PTR $T20[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T20[ebp]
	movaps	XMMWORD PTR _C5$[ebp], xmm0
; Line 797
	movaps	xmm0, XMMWORD PTR _C4$[ebp]
	addps	xmm0, XMMWORD PTR _V02$[ebp]
	movaps	XMMWORD PTR $T19[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T19[ebp]
	movaps	XMMWORD PTR _C4$[ebp], xmm0
; Line 798
	movaps	xmm0, XMMWORD PTR _C6$[ebp]
	addps	xmm0, XMMWORD PTR _V03$[ebp]
	movaps	XMMWORD PTR $T18[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T18[ebp]
	movaps	XMMWORD PTR _C7$[ebp], xmm0
; Line 799
	movaps	xmm0, XMMWORD PTR _C6$[ebp]
	subps	xmm0, XMMWORD PTR _V03$[ebp]
	movaps	XMMWORD PTR $T17[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T17[ebp]
	movaps	XMMWORD PTR _C6$[ebp], xmm0
; Line 801
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	shufps	xmm0, XMMWORD PTR _C1$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T16[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T16[ebp]
	movaps	XMMWORD PTR _C0$[ebp], xmm0
; Line 802
	movaps	xmm0, XMMWORD PTR _C2$[ebp]
	shufps	xmm0, XMMWORD PTR _C3$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	movaps	XMMWORD PTR _C2$[ebp], xmm0
; Line 803
	movaps	xmm0, XMMWORD PTR _C4$[ebp]
	shufps	xmm0, XMMWORD PTR _C5$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T14[ebp]
	movaps	XMMWORD PTR _C4$[ebp], xmm0
; Line 804
	movaps	xmm0, XMMWORD PTR _C6$[ebp]
	shufps	xmm0, XMMWORD PTR _C7$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	movaps	XMMWORD PTR _C6$[ebp], xmm0
; Line 805
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	shufps	xmm0, XMMWORD PTR _C0$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T12[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T12[ebp]
	movaps	XMMWORD PTR _C0$[ebp], xmm0
; Line 806
	movaps	xmm0, XMMWORD PTR _C2$[ebp]
	shufps	xmm0, XMMWORD PTR _C2$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _C2$[ebp], xmm0
; Line 807
	movaps	xmm0, XMMWORD PTR _C4$[ebp]
	shufps	xmm0, XMMWORD PTR _C4$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _C4$[ebp], xmm0
; Line 808
	movaps	xmm0, XMMWORD PTR _C6$[ebp]
	shufps	xmm0, XMMWORD PTR _C6$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _C6$[ebp], xmm0
; Line 810
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movups	xmm1, XMMWORD PTR _MT$[ebp+ecx]
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	call	?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector4Dot
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 811
	cmp	DWORD PTR _pDeterminant$[ebp], 0
	je	SHORT $LN1@XMMatrixIn
; Line 812
	mov	edx, DWORD PTR _pDeterminant$[ebp]
	movups	xmm0, XMMWORD PTR _vTemp$[ebp]
	movups	XMMWORD PTR [edx], xmm0
$LN1@XMMatrixIn:
; Line 813
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
	movaps	XMMWORD PTR tv806[ebp], xmm0
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv806[ebp]
	divps	xmm0, xmm1
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 814
	lea	ecx, DWORD PTR _mResult$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 815
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	mulps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR $T5[ebp]
	movups	XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 816
	movaps	xmm0, XMMWORD PTR _C2$[ebp]
	mulps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movups	xmm0, XMMWORD PTR $T4[ebp]
	movups	XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 817
	movaps	xmm0, XMMWORD PTR _C4$[ebp]
	mulps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR $T3[ebp]
	movups	XMMWORD PTR _mResult$[ebp+ecx], xmm0
; Line 818
	movaps	xmm0, XMMWORD PTR _C6$[ebp]
	mulps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 819
	movaps	xmm0, XMMWORD PTR _mResult$[ebp]
	movaps	xmm1, XMMWORD PTR _mResult$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mResult$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mResult$[ebp+48]
; Line 822
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@XMMatrixIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN8@XMMatrixIn:
	DD	3
	DD	$LN7@XMMatrixIn
$LN7@XMMatrixIn:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN4@XMMatrixIn
	DD	-160					; ffffff60H
	DD	64					; 00000040H
	DD	$LN5@XMMatrixIn
	DD	-2048					; fffff800H
	DD	64					; 00000040H
	DD	$LN6@XMMatrixIn
$LN6@XMMatrixIn:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN5@XMMatrixIn:
	DB	77					; 0000004dH
	DB	84					; 00000054H
	DB	0
$LN4@XMMatrixIn:
	DB	77					; 0000004dH
	DB	0
?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ENDP ; DirectX::XMMatrixInverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z
_TEXT	SEGMENT
$T1 = -384						; size = 16
$T2 = -368						; size = 16
$T3 = -352						; size = 16
$T4 = -336						; size = 16
_mResult$ = -304					; size = 64
$T5 = -224						; size = 16
_vTemp4$ = -208						; size = 16
$T6 = -192						; size = 16
_vTemp2$ = -176						; size = 16
$T7 = -160						; size = 16
_vTemp3$ = -144						; size = 16
$T8 = -128						; size = 16
_vTemp1$ = -112						; size = 16
_M$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z PROC	; DirectX::XMMatrixTranspose, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 543
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _M$[ebp+48], xmm3
	movaps	XMMWORD PTR _M$[ebp+32], xmm2
	movaps	XMMWORD PTR _M$[ebp+16], xmm1
	movaps	XMMWORD PTR _M$[ebp], xmm0
; Line 581
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR _M$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _M$[ebp+eax], 68	; 00000044H
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 583
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR _M$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _M$[ebp+eax], 238	; 000000eeH
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _vTemp3$[ebp], xmm0
; Line 585
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _M$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _M$[ebp+ecx], 68	; 00000044H
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 587
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _M$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _M$[ebp+ecx], 238	; 000000eeH
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vTemp4$[ebp], xmm0
; Line 588
	lea	ecx, DWORD PTR _mResult$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 591
	movaps	xmm0, XMMWORD PTR _vTemp1$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp2$[ebp], 136	; 00000088H
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movups	xmm0, XMMWORD PTR $T4[ebp]
	movups	XMMWORD PTR _mResult$[ebp+ecx], xmm0
; Line 593
	movaps	xmm0, XMMWORD PTR _vTemp1$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp2$[ebp], 221	; 000000ddH
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR $T3[ebp]
	movups	XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 595
	movaps	xmm0, XMMWORD PTR _vTemp3$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp4$[ebp], 136	; 00000088H
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 597
	movaps	xmm0, XMMWORD PTR _vTemp3$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp4$[ebp], 221	; 000000ddH
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 598
	movaps	xmm0, XMMWORD PTR _mResult$[ebp]
	movaps	xmm1, XMMWORD PTR _mResult$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mResult$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mResult$[ebp+48]
; Line 601
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XMMatrixTr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN6@XMMatrixTr:
	DD	2
	DD	$LN5@XMMatrixTr
$LN5@XMMatrixTr:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@XMMatrixTr
	DD	-304					; fffffed0H
	DD	64					; 00000040H
	DD	$LN4@XMMatrixTr
$LN4@XMMatrixTr:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN3@XMMatrixTr:
	DB	77					; 0000004dH
	DB	0
?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z ENDP	; DirectX::XMMatrixTranspose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z
_TEXT	SEGMENT
$T1 = -944						; size = 16
$T2 = -928						; size = 16
$T3 = -912						; size = 16
$T4 = -896						; size = 16
$T5 = -880						; size = 16
$T6 = -864						; size = 16
$T7 = -848						; size = 16
$T8 = -832						; size = 16
$T9 = -816						; size = 16
$T10 = -800						; size = 16
$T11 = -784						; size = 16
$T12 = -768						; size = 16
$T13 = -752						; size = 16
$T14 = -736						; size = 16
$T15 = -720						; size = 16
$T16 = -704						; size = 16
$T17 = -688						; size = 16
$T18 = -672						; size = 16
$T19 = -656						; size = 16
$T20 = -640						; size = 16
$T21 = -624						; size = 16
$T22 = -608						; size = 16
$T23 = -592						; size = 16
$T24 = -576						; size = 16
$T25 = -560						; size = 16
$T26 = -544						; size = 16
$T27 = -528						; size = 16
$T28 = -512						; size = 16
$T29 = -496						; size = 16
$T30 = -480						; size = 16
$T31 = -464						; size = 16
$T32 = -448						; size = 16
$T33 = -432						; size = 16
$T34 = -416						; size = 16
$T35 = -400						; size = 16
$T36 = -384						; size = 16
$T37 = -368						; size = 16
$T38 = -352						; size = 16
$T39 = -336						; size = 16
$T40 = -320						; size = 16
$T41 = -304						; size = 16
$T42 = -288						; size = 16
_vZ$ = -272						; size = 16
$T43 = -256						; size = 16
_vY$ = -240						; size = 16
$T44 = -224						; size = 16
_vX$ = -208						; size = 16
_vW$ = -192						; size = 16
_mResult$ = -160					; size = 64
_M2$ = -88						; size = 4
_M1$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z PROC ; DirectX::XMMatrixMultiply, COMDAT
; _M2$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 228
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 944				; 000003b0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-944]
	mov	ecx, 236				; 000000ecH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _M2$[ebp], ecx
	movaps	XMMWORD PTR _M1$[ebp+48], xmm3
	movaps	XMMWORD PTR _M1$[ebp+32], xmm2
	movaps	XMMWORD PTR _M1$[ebp+16], xmm1
	movaps	XMMWORD PTR _M1$[ebp], xmm0
; Line 301
	lea	ecx, DWORD PTR _mResult$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 303
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movups	xmm0, XMMWORD PTR _M1$[ebp+ecx]
	movups	XMMWORD PTR _vW$[ebp], xmm0
; Line 305
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 0
	movaps	XMMWORD PTR $T44[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T44[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 306
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T43[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T43[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 307
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T42[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T42[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 308
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 255	; 000000ffH
	movaps	XMMWORD PTR $T41[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T41[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 310
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	mulps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T40[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T40[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 311
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	mulps	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T39[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T39[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 312
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vZ$[ebp]
	mulps	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T38[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T38[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 313
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	mulps	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T37[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T37[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 315
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vZ$[ebp]
	movaps	XMMWORD PTR $T36[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T36[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 316
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	addps	xmm0, XMMWORD PTR _vW$[ebp]
	movaps	XMMWORD PTR $T35[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T35[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 317
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vY$[ebp]
	movaps	XMMWORD PTR $T34[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T34[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 318
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	movups	xmm0, XMMWORD PTR _vX$[ebp]
	movups	XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 320
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	movups	xmm0, XMMWORD PTR _M1$[ebp+ecx]
	movups	XMMWORD PTR _vW$[ebp], xmm0
; Line 321
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 0
	movaps	XMMWORD PTR $T33[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T33[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 322
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T32[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T32[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 323
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T31[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T31[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 324
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 255	; 000000ffH
	movaps	XMMWORD PTR $T30[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T30[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 325
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	mulps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T29[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T29[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 326
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	mulps	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T28[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T28[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 327
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vZ$[ebp]
	mulps	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T27[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T27[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 328
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	mulps	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T26[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T26[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 329
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vZ$[ebp]
	movaps	XMMWORD PTR $T25[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T25[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 330
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	addps	xmm0, XMMWORD PTR _vW$[ebp]
	movaps	XMMWORD PTR $T24[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T24[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 331
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vY$[ebp]
	movaps	XMMWORD PTR $T23[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T23[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 332
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR _vX$[ebp]
	movups	XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 333
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR _M1$[ebp+eax]
	movups	XMMWORD PTR _vW$[ebp], xmm0
; Line 334
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 0
	movaps	XMMWORD PTR $T22[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T22[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 335
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T21[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T21[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 336
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T20[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T20[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 337
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 255	; 000000ffH
	movaps	XMMWORD PTR $T19[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T19[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 338
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	mulps	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T18[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T18[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 339
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	mulps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T17[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T17[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 340
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vZ$[ebp]
	mulps	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T16[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T16[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 341
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	mulps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 342
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vZ$[ebp]
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T14[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 343
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	addps	xmm0, XMMWORD PTR _vW$[ebp]
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 344
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vY$[ebp]
	movaps	XMMWORD PTR $T12[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T12[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 345
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR _vX$[ebp]
	movups	XMMWORD PTR _mResult$[ebp+ecx], xmm0
; Line 346
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR _M1$[ebp+eax]
	movups	XMMWORD PTR _vW$[ebp], xmm0
; Line 347
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 0
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 348
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 349
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 350
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 255	; 000000ffH
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 351
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	mulps	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 352
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	mulps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 353
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vZ$[ebp]
	mulps	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 354
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	mulps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 355
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vZ$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 356
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	addps	xmm0, XMMWORD PTR _vW$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 357
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vY$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 358
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR _vX$[ebp]
	movups	XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 359
	movaps	xmm0, XMMWORD PTR _mResult$[ebp]
	movaps	xmm1, XMMWORD PTR _mResult$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mResult$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mResult$[ebp+48]
; Line 362
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XMMatrixMu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN6@XMMatrixMu:
	DD	2
	DD	$LN5@XMMatrixMu
$LN5@XMMatrixMu:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@XMMatrixMu
	DD	-160					; ffffff60H
	DD	64					; 00000040H
	DD	$LN4@XMMatrixMu
$LN4@XMMatrixMu:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN3@XMMatrixMu:
	DB	77					; 0000004dH
	DB	49					; 00000031H
	DB	0
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ENDP ; DirectX::XMMatrixMultiply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector4Normalize@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -400						; size = 16
$T2 = -384						; size = 16
_vTemp2$ = -368						; size = 16
$T3 = -352						; size = 16
$T4 = -336						; size = 16
_vTemp1$ = -320						; size = 16
$T5 = -304						; size = 16
$T6 = -288						; size = 16
$T7 = -272						; size = 16
$T8 = -256						; size = 16
$T9 = -240						; size = 16
$T10 = -224						; size = 16
_vZeroMask$ = -208					; size = 16
$T11 = -192						; size = 16
_vResult$ = -176					; size = 16
$T12 = -160						; size = 16
$T13 = -144						; size = 16
$T14 = -128						; size = 16
$T15 = -112						; size = 16
$T16 = -96						; size = 16
$T17 = -80						; size = 16
_vTemp$ = -64						; size = 16
$T18 = -48						; size = 16
_vLengthSq$ = -32					; size = 16
_V$ = -16						; size = 16
?XMVector4Normalize@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVector4Normalize, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 13406
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 13449
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	mulps	xmm0, XMMWORD PTR _V$[ebp]
	movaps	XMMWORD PTR $T18[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T18[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13451
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	shufps	xmm0, XMMWORD PTR _vLengthSq$[ebp], 238	; 000000eeH
	movaps	XMMWORD PTR $T17[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T17[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 13453
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	addps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T16[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T16[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13455
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	shufps	xmm0, XMMWORD PTR _vLengthSq$[ebp], 64	; 00000040H
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13457
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	shufps	xmm0, XMMWORD PTR _vLengthSq$[ebp], 240	; 000000f0H
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T14[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 13459
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	addps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13461
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	shufps	xmm0, XMMWORD PTR _vLengthSq$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T12[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T12[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13463
	sqrtps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 13465
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _vZeroMask$[ebp], xmm0
; Line 13467
	movaps	xmm0, XMMWORD PTR _vZeroMask$[ebp]
	cmpneqps xmm0, XMMWORD PTR _vResult$[ebp]
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _vZeroMask$[ebp], xmm0
; Line 13470
	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMInfinity
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _vLengthSq$[ebp]
	cmpneqps xmm1, xmm0
	movaps	XMMWORD PTR $T7[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13472
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	divps	xmm0, XMMWORD PTR _vResult$[ebp]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 13474
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	andps	xmm0, XMMWORD PTR _vZeroMask$[ebp]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 13476
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMQNaN
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _vLengthSq$[ebp]
	andnps	xmm1, xmm0
	movaps	XMMWORD PTR $T3[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 13477
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	andps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 13478
	movaps	xmm0, XMMWORD PTR _vTemp1$[ebp]
	orps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 13479
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
; Line 13482
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVector4Normalize@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVector4Normalize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector4LengthSq@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_V$ = -16						; size = 16
?XMVector4LengthSq@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVector4LengthSq, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 13126
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 13127
	movaps	xmm1, XMMWORD PTR _V$[ebp]
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	call	?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector4Dot
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 13128
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVector4LengthSq@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVector4LengthSq
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
$T3 = -128						; size = 16
$T4 = -112						; size = 16
$T5 = -96						; size = 16
$T6 = -80						; size = 16
_vTemp$ = -64						; size = 16
_vTemp2$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z PROC		; DirectX::XMVector4Dot, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 12940
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 12959
	movaps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 12960
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	mulps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12961
	movaps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp$[ebp], 64	; 00000040H
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 12962
	movaps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	addps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 12963
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp2$[ebp], 48	; 00000030H
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12964
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	addps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12965
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 12968
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z ENDP		; DirectX::XMVector4Dot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector4Equal@DirectX@@YQ_NT__m128@@0@Z
_TEXT	SEGMENT
tv72 = -72						; size = 4
tv70 = -68						; size = 4
$T1 = -64						; size = 16
_vTemp$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector4Equal@DirectX@@YQ_NT__m128@@0@Z PROC		; DirectX::XMVector4Equal, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 12373
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 12382
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	cmpeqps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12383
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movmskps eax, xmm0
	cmp	eax, 15					; 0000000fH
	jne	SHORT $LN3@XMVector4E
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@XMVector4E
$LN3@XMVector4E:
	mov	DWORD PTR tv70[ebp], 0
$LN4@XMVector4E:
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN5@XMVector4E
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN6@XMVector4E
$LN5@XMVector4E:
	mov	DWORD PTR tv72[ebp], 0
$LN6@XMVector4E:
	mov	al, BYTE PTR tv72[ebp]
; Line 12387
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVector4Equal@DirectX@@YQ_NT__m128@@0@Z ENDP		; DirectX::XMVector4Equal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMVectorDivide, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 3005
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 3022
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	divps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 3025
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMVectorDivide
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorLessOrEqual@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorLessOrEqual@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMVectorLessOrEqual, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2075
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 2088
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	cmpleps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 2091
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorLessOrEqual@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMVectorLessOrEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z
_TEXT	SEGMENT
$T1 = -128						; size = 16
$T2 = -112						; size = 16
_vTemp2$ = -96						; size = 16
$T3 = -80						; size = 16
_vTemp1$ = -64						; size = 16
_Control$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z PROC	; DirectX::XMVectorSelect, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; _Control$ = xmm2
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 1448
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _Control$[ebp], xmm2
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1461
	movaps	xmm0, XMMWORD PTR _Control$[ebp]
	andnps	xmm0, XMMWORD PTR _V1$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 1462
	movaps	xmm0, XMMWORD PTR _V2$[ebp]
	andps	xmm0, XMMWORD PTR _Control$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 1463
	movaps	xmm0, XMMWORD PTR _vTemp1$[ebp]
	orps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 1466
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ENDP	; DirectX::XMVectorSelect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_w$ = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z PROC		; DirectX::XMVectorSet, COMDAT
; _x$ = xmm0s
; _y$ = xmm1s
; _z$ = xmm2s
; _w$ = xmm3s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 72
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	movss	DWORD PTR _w$[ebp], xmm3
	movss	DWORD PTR _z$[ebp], xmm2
	movss	DWORD PTR _y$[ebp], xmm1
	movss	DWORD PTR _x$[ebp], xmm0
; Line 81
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	movss	xmm2, DWORD PTR _z$[ebp]
	movss	xmm3, DWORD PTR _w$[ebp]
	unpcklps xmm0, xmm2
	unpcklps xmm1, xmm3
	unpcklps xmm0, xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 84
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ENDP		; DirectX::XMVectorSet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorZero@DirectX@@YQ?AT__m128@@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
?XMVectorZero@DirectX@@YQ?AT__m128@@XZ PROC		; DirectX::XMVectorZero, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 51
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 58
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 61
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorZero@DirectX@@YQ?AT__m128@@XZ ENDP		; DirectX::XMVectorZero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z
_TEXT	SEGMENT
_M$ = -80						; size = 64
_pDestination$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z PROC ; DirectX::XMStoreFloat4x4, COMDAT
; _pDestination$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 1875
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _M$[ebp+48], xmm3
	movaps	XMMWORD PTR _M$[ebp+32], xmm2
	movaps	XMMWORD PTR _M$[ebp+16], xmm1
	movaps	XMMWORD PTR _M$[ebp], xmm0
	mov	DWORD PTR _pDestination$[ebp], ecx
; Line 1876
	cmp	DWORD PTR _pDestination$[ebp], 0
	jne	SHORT $LN3@XMStoreFlo
	mov	esi, esp
	push	1876					; 00000754H
	push	OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMStoreFlo:
; Line 1905
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR _M$[ebp+edx]
	mov	eax, DWORD PTR _pDestination$[ebp]
	movups	XMMWORD PTR [eax], xmm0
; Line 1906
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	movups	xmm0, XMMWORD PTR _M$[ebp+ecx]
	mov	edx, DWORD PTR _pDestination$[ebp]
	add	edx, 16					; 00000010H
	movups	XMMWORD PTR [edx], xmm0
; Line 1907
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR _M$[ebp+eax]
	mov	ecx, DWORD PTR _pDestination$[ebp]
	add	ecx, 32					; 00000020H
	movups	XMMWORD PTR [ecx], xmm0
; Line 1908
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR _M$[ebp+eax]
	mov	ecx, DWORD PTR _pDestination$[ebp]
	add	ecx, 48					; 00000030H
	movups	XMMWORD PTR [ecx], xmm0
; Line 1911
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XMStoreFlo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN6@XMStoreFlo:
	DD	1
	DD	$LN5@XMStoreFlo
$LN5@XMStoreFlo:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN4@XMStoreFlo
$LN4@XMStoreFlo:
	DB	77					; 0000004dH
	DB	0
?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ENDP ; DirectX::XMStoreFloat4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
$T3 = -128						; size = 16
$T4 = -112						; size = 16
_M$ = -80						; size = 64
_pSource$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z PROC ; DirectX::XMLoadFloat4x4, COMDAT
; _pSource$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 1041
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-172]
	mov	ecx, 43					; 0000002bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _pSource$[ebp], ecx
; Line 1042
	cmp	DWORD PTR _pSource$[ebp], 0
	jne	SHORT $LN3@XMLoadFloa
	mov	esi, esp
	push	1042					; 00000412H
	push	OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMLoadFloa:
; Line 1075
	lea	ecx, DWORD PTR _M$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 1076
	mov	ecx, DWORD PTR _pSource$[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	movups	xmm0, XMMWORD PTR $T4[ebp]
	movups	XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1077
	mov	ecx, DWORD PTR _pSource$[ebp]
	add	ecx, 16					; 00000010H
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR $T3[ebp]
	movups	XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1078
	mov	eax, DWORD PTR _pSource$[ebp]
	add	eax, 32					; 00000020H
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1079
	mov	edx, DWORD PTR _pSource$[ebp]
	add	edx, 48					; 00000030H
	movups	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1080
	movaps	xmm0, XMMWORD PTR _M$[ebp]
	movaps	xmm1, XMMWORD PTR _M$[ebp+16]
	movaps	xmm2, XMMWORD PTR _M$[ebp+32]
	movaps	xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1083
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XMLoadFloa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN6@XMLoadFloa:
	DD	1
	DD	$LN5@XMLoadFloa
$LN5@XMLoadFloa:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN4@XMLoadFloa
$LN4@XMLoadFloa:
	DB	77					; 0000004dH
	DB	0
?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ENDP ; DirectX::XMLoadFloat4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
_xy$ = -128						; size = 16
$T3 = -112						; size = 16
_z$ = -96						; size = 16
$T4 = -80						; size = 16
_y$ = -64						; size = 16
$T5 = -48						; size = 16
_x$ = -32						; size = 16
_pSource$ = -4						; size = 4
?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z PROC ; DirectX::XMLoadFloat3, COMDAT
; _pSource$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 514
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-172]
	mov	ecx, 43					; 0000002bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _pSource$[ebp], ecx
; Line 515
	cmp	DWORD PTR _pSource$[ebp], 0
	jne	SHORT $LN3@XMLoadFloa
	mov	esi, esp
	push	515					; 00000203H
	push	OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMLoadFloa:
; Line 529
	mov	ecx, DWORD PTR _pSource$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _x$[ebp], xmm0
; Line 530
	mov	edx, DWORD PTR _pSource$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _y$[ebp], xmm0
; Line 531
	mov	eax, DWORD PTR _pSource$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _z$[ebp], xmm0
; Line 532
	movaps	xmm0, XMMWORD PTR _x$[ebp]
	unpcklps xmm0, XMMWORD PTR _y$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _xy$[ebp], xmm0
; Line 533
	movaps	xmm0, XMMWORD PTR _z$[ebp]
	movaps	xmm1, XMMWORD PTR _xy$[ebp]
	movlhps	xmm1, xmm0
	movaps	XMMWORD PTR $T1[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 536
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ENDP ; DirectX::XMLoadFloat3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT4X4@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMFLOAT4X4@DirectX@@QAE@XZ PROC			; DirectX::XMFLOAT4X4::XMFLOAT4X4, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 716
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0XMFLOAT4X4@DirectX@@QAE@XZ ENDP			; DirectX::XMFLOAT4X4::XMFLOAT4X4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Float3$ = 8						; size = 4
??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z PROC		; DirectX::XMFLOAT3::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 527
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Float3$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Float3$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Float3$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ENDP		; DirectX::XMFLOAT3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT3@DirectX@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0XMFLOAT3@DirectX@@QAE@MMM@Z PROC			; DirectX::XMFLOAT3::XMFLOAT3, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 524
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __y$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __z$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0XMFLOAT3@DirectX@@QAE@MMM@Z ENDP			; DirectX::XMFLOAT3::XMFLOAT3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT3@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMFLOAT3@DirectX@@QAE@XZ PROC			; DirectX::XMFLOAT3::XMFLOAT3, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 523
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0XMFLOAT3@DirectX@@QAE@XZ ENDP			; DirectX::XMFLOAT3::XMFLOAT3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 64
$T2 = -160						; size = 64
_this$ = -92						; size = 4
___$ReturnUdt$ = -88					; size = 4
_M$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z PROC		; DirectX::XMMATRIX::operator*, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = edx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 3091
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _M$[ebp+48], xmm3
	movaps	XMMWORD PTR _M$[ebp+32], xmm2
	movaps	XMMWORD PTR _M$[ebp+16], xmm1
	movaps	XMMWORD PTR _M$[ebp], xmm0
	mov	DWORD PTR ___$ReturnUdt$[ebp], edx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3092
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR _M$[ebp]
	movaps	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR [eax+16]
	movaps	xmm2, XMMWORD PTR [eax+32]
	movaps	xmm3, XMMWORD PTR [eax+48]
	call	?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 3093
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@operator
$LN3@operator:
	DB	77					; 0000004dH
	DB	0
??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ENDP		; DirectX::XMMATRIX::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_M$ = 8							; size = 4
??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z PROC		; DirectX::XMMATRIX::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _M$[ebp]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _this$[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movups	XMMWORD PTR [eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _M$[ebp]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _this$[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movups	XMMWORD PTR [edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _M$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _M$[ebp]
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	add	edx, DWORD PTR _this$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z ENDP		; DirectX::XMMATRIX::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMMATRIX@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMMATRIX@DirectX@@QAE@XZ PROC			; DirectX::XMMATRIX::XMMATRIX, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 431
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0XMMATRIX@DirectX@@QAE@XZ ENDP			; DirectX::XMMATRIX::XMMATRIX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ PROC		; DirectX::XMVECTORI32::operator __m128, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 330
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ENDP		; DirectX::XMVECTORI32::operator __m128
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ PROC		; DirectX::XMVECTORF32::operator __m128, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 314
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ENDP		; DirectX::XMVECTORF32::operator __m128
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new.h
; Line 105
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new.h
; Line 103
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Where$[ebp]
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?wcsrchr@@YAPA_WPA_W_W@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 2
?wcsrchr@@YAPA_WPA_W_W@Z PROC				; wcsrchr, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\string.h
; Line 387
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	movzx	eax, WORD PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	DWORD PTR __imp__wcsrchr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?wcsrchr@@YAPA_WPA_W_W@Z ENDP				; wcsrchr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
