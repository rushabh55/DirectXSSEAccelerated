; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	D:\Engine Class\Assignment 1\New Scratch\DXUT\Optional\DXUTcamera.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients0
PUBLIC	?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients1
PUBLIC	?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients0
PUBLIC	?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients1
PUBLIC	?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR0
PUBLIC	?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR1
PUBLIC	?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR2
PUBLIC	?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR3
PUBLIC	?g_XMNegativeZero@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMNegativeZero
PUBLIC	?g_XMMask3@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMMask3
PUBLIC	?g_XMMaskY@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMMaskY
PUBLIC	?g_XMOne@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOne
PUBLIC	?g_XMZero@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMZero
PUBLIC	?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegativeOne
PUBLIC	?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOneHalf
PUBLIC	?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMInfinity
PUBLIC	?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMQNaN
PUBLIC	?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMAbsMask
PUBLIC	?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMSelect1110
CONST	SEGMENT
_XM_PI	DD	040490fdbr			; 3.14159
_XM_2PI	DD	040c90fdbr			; 6.28319
_XM_1DIV2PI DD	03e22f983r			; 0.159155
_XM_PIDIV2 DD	03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1110
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B DD 07fffffffH	; DirectX::g_XMAbsMask
	DD	07fffffffH
	DD	07fffffffH
	DD	07fffffffH
CONST	ENDS
;	COMDAT ?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B DD 07fc00000H	; DirectX::g_XMQNaN
	DD	07fc00000H
	DD	07fc00000H
	DD	07fc00000H
CONST	ENDS
;	COMDAT ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B DD 07f800000H	; DirectX::g_XMInfinity
	DD	07f800000H
	DD	07f800000H
	DD	07f800000H
CONST	ENDS
;	COMDAT ?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B DD 03f000000r ; 0.5 ; DirectX::g_XMOneHalf
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
CONST	ENDS
;	COMDAT ?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B DD 0bf800000r ; -1 ; DirectX::g_XMNegativeOne
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?g_XMZero@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMZero@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0	; DirectX::g_XMZero
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMOne@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOne@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1	; DirectX::g_XMOne
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMMaskY@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskY@DirectX@@3UXMVECTORI32@1@B DD 00H		; DirectX::g_XMMaskY
	DD	0ffffffffH
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMask3@DirectX@@3UXMVECTORI32@1@B DD 0ffffffffH	; DirectX::g_XMMask3
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMNegativeZero@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMNegativeZero@DirectX@@3UXMVECTORI32@1@B DD 080000000H ; DirectX::g_XMNegativeZero
	DD	080000000H
	DD	080000000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR3
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR2
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMIdentityR0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0b48bdd11r ; -2.60516e-007 ; DirectX::g_XMCosCoefficients1
	DD	0befff67er			; -0.499927
	DD	03d29f587r			; 0.0414939
	DD	0baa69fdbr			; -0.00127124
CONST	ENDS
;	COMDAT ?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 0bf000000r ; -0.5 ; DirectX::g_XMCosCoefficients0
	DD	03d2aaaa3r			; 0.0416666
	DD	0bab609aar			; -0.00138884
	DD	037cfb4c2r			; 2.47605e-005
CONST	ENDS
;	COMDAT ?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0b2cd365br ; -2.38899e-008 ; DirectX::g_XMSinCoefficients1
	DD	0be2aa888r			; -0.166659
	DD	03c08373cr			; 0.00831395
	DD	0b9423ec8r			; -0.000185247
CONST	ENDS
;	COMDAT ?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 0be2aaaabr ; -0.166667 ; DirectX::g_XMSinCoefficients0
	DD	03c088886r			; 0.00833333
	DD	0b9500bf1r			; -0.000198409
	DD	03638b88er			; 2.75256e-006
CONST	ENDS
PUBLIC	_atan2f
PUBLIC	_fabsf
PUBLIC	_sqrtf
PUBLIC	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ	; DirectX::XMVECTORF32::operator __m128
PUBLIC	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ	; DirectX::XMVECTORI32::operator __m128
PUBLIC	??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ	; DirectX::XMVECTORU32::operator __m128
PUBLIC	??YDirectX@@YQAAT__m128@@AAT1@T1@@Z		; DirectX::operator+=
PUBLIC	??ZDirectX@@YQAAT__m128@@AAT1@T1@@Z		; DirectX::operator-=
PUBLIC	??XDirectX@@YAAAT__m128@@AAT1@M@Z		; DirectX::operator*=
PUBLIC	??HDirectX@@YQ?AT__m128@@T1@0@Z			; DirectX::operator+
PUBLIC	??GDirectX@@YQ?AT__m128@@T1@0@Z			; DirectX::operator-
PUBLIC	??DDirectX@@YQ?AT__m128@@T1@M@Z			; DirectX::operator*
PUBLIC	??KDirectX@@YQ?AT__m128@@T1@M@Z			; DirectX::operator/
PUBLIC	??0XMMATRIX@DirectX@@QAE@XZ			; DirectX::XMMATRIX::XMMATRIX
PUBLIC	??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z		; DirectX::XMMATRIX::operator=
PUBLIC	??XXMMATRIX@DirectX@@QAQAAU01@U01@@Z		; DirectX::XMMATRIX::operator*=
PUBLIC	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z		; DirectX::XMMATRIX::operator*
PUBLIC	??0XMFLOAT2@DirectX@@QAE@XZ			; DirectX::XMFLOAT2::XMFLOAT2
PUBLIC	??0XMFLOAT2@DirectX@@QAE@MM@Z			; DirectX::XMFLOAT2::XMFLOAT2
PUBLIC	??4XMFLOAT2@DirectX@@QAEAAU01@ABU01@@Z		; DirectX::XMFLOAT2::operator=
PUBLIC	??0XMFLOAT3@DirectX@@QAE@XZ			; DirectX::XMFLOAT3::XMFLOAT3
PUBLIC	??0XMFLOAT3@DirectX@@QAE@MMM@Z			; DirectX::XMFLOAT3::XMFLOAT3
PUBLIC	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z		; DirectX::XMFLOAT3::operator=
PUBLIC	??0XMFLOAT4@DirectX@@QAE@XZ			; DirectX::XMFLOAT4::XMFLOAT4
PUBLIC	??4XMFLOAT4@DirectX@@QAEAAU01@ABU01@@Z		; DirectX::XMFLOAT4::operator=
PUBLIC	??0XMFLOAT4X4@DirectX@@QAE@XZ			; DirectX::XMFLOAT4X4::XMFLOAT4X4
PUBLIC	?XMLoadFloat2@DirectX@@YQ?AT__m128@@PBUXMFLOAT2@1@@Z ; DirectX::XMLoadFloat2
PUBLIC	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
PUBLIC	?XMLoadFloat4@DirectX@@YQ?AT__m128@@PBUXMFLOAT4@1@@Z ; DirectX::XMLoadFloat4
PUBLIC	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
PUBLIC	?XMStoreFloat2@DirectX@@YQXPAUXMFLOAT2@1@T__m128@@@Z ; DirectX::XMStoreFloat2
PUBLIC	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
PUBLIC	?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z ; DirectX::XMStoreFloat4
PUBLIC	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
PUBLIC	?XMVectorZero@DirectX@@YQ?AT__m128@@XZ		; DirectX::XMVectorZero
PUBLIC	?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z	; DirectX::XMVectorSet
PUBLIC	?XMVectorReplicate@DirectX@@YQ?AT__m128@@M@Z	; DirectX::XMVectorReplicate
PUBLIC	?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorSplatX
PUBLIC	?XMVectorSplatY@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorSplatY
PUBLIC	?XMVectorSplatZ@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorSplatZ
PUBLIC	?XMVectorSplatW@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorSplatW
PUBLIC	?XMVectorGetX@DirectX@@YQMT__m128@@@Z		; DirectX::XMVectorGetX
PUBLIC	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z	; DirectX::XMVectorSelect
PUBLIC	?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorRound
PUBLIC	?XMVectorClamp@DirectX@@YQ?AT__m128@@T2@00@Z	; DirectX::XMVectorClamp
PUBLIC	?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorNegate
PUBLIC	?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVectorAdd
PUBLIC	?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVectorSubtract
PUBLIC	?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVectorMultiply
PUBLIC	?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorMultiplyAdd
PUBLIC	?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVectorDivide
PUBLIC	?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z	; DirectX::XMVectorScale
PUBLIC	?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorModAngles
PUBLIC	?XMVectorSinCos@DirectX@@YQXPAT__m128@@0T2@@Z	; DirectX::XMVectorSinCos
PUBLIC	?XMVector3Equal@DirectX@@YQ_NT__m128@@0@Z	; DirectX::XMVector3Equal
PUBLIC	?XMVector3IsInfinite@DirectX@@YQ_NT__m128@@@Z	; DirectX::XMVector3IsInfinite
PUBLIC	?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVector3Dot
PUBLIC	?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVector3Cross
PUBLIC	?XMVector3LengthSq@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVector3LengthSq
PUBLIC	?XMVector3Length@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVector3Length
PUBLIC	?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVector3Normalize
PUBLIC	?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformCoord
PUBLIC	?XMVector3TransformNormal@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformNormal
PUBLIC	?XMVector4LessOrEqual@DirectX@@YQ_NT__m128@@0@Z	; DirectX::XMVector4LessOrEqual
PUBLIC	?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVector4Dot
PUBLIC	?XMVector4Length@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVector4Length
PUBLIC	?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
PUBLIC	?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z ; DirectX::XMMatrixTranspose
PUBLIC	?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
PUBLIC	?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ	; DirectX::XMMatrixIdentity
PUBLIC	?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
PUBLIC	?XMMatrixRotationRollPitchYaw@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixRotationRollPitchYaw
PUBLIC	?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationRollPitchYawFromVector
PUBLIC	?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationQuaternion
PUBLIC	?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ; DirectX::XMMatrixLookAtLH
PUBLIC	?XMMatrixLookToLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ; DirectX::XMMatrixLookToLH
PUBLIC	?XMMatrixPerspectiveFovLH@DirectX@@YQ?AUXMMATRIX@1@MMMM@Z ; DirectX::XMMatrixPerspectiveFovLH
PUBLIC	?XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMQuaternionMultiply
PUBLIC	?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ	; DirectX::XMQuaternionIdentity
PUBLIC	?XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionRotationRollPitchYawFromVector
PUBLIC	?XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@1@@Z ; DirectX::XMQuaternionRotationMatrix
PUBLIC	?XMScalarNearEqual@DirectX@@YA_NMMM@Z		; DirectX::XMScalarNearEqual
PUBLIC	?XMScalarSinCos@DirectX@@YAXPAM0M@Z		; DirectX::XMScalarSinCos
PUBLIC	??$XMVectorPermute@$0A@$03$03$03@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<0,4,4,4>
PUBLIC	??$XMVectorPermute@$04$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<5,1,5,5>
PUBLIC	??$XMVectorPermute@$05$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<6,6,2,6>
PUBLIC	?IsStopped@CDXUTTimer@@QBE_NXZ			; CDXUTTimer::IsStopped
PUBLIC	?Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute
PUBLIC	?Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute
PUBLIC	?Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute
PUBLIC	??0CD3DArcBall@@QAE@XZ				; CD3DArcBall::CD3DArcBall
PUBLIC	?Reset@CD3DArcBall@@QAEXXZ			; CD3DArcBall::Reset
PUBLIC	?SetWindow@CD3DArcBall@@QAEXHHM@Z		; CD3DArcBall::SetWindow
PUBLIC	?SetOffset@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::SetOffset
PUBLIC	?OnBegin@CD3DArcBall@@QAEXHH@Z			; CD3DArcBall::OnBegin
PUBLIC	?OnMove@CD3DArcBall@@QAEXHH@Z			; CD3DArcBall::OnMove
PUBLIC	?OnEnd@CD3DArcBall@@QAEXXZ			; CD3DArcBall::OnEnd
PUBLIC	?HandleMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z ; CD3DArcBall::HandleMessages
PUBLIC	?GetRotationMatrix@CD3DArcBall@@QBE?AUXMMATRIX@DirectX@@XZ ; CD3DArcBall::GetRotationMatrix
PUBLIC	?IsBeingDragged@CD3DArcBall@@QBE_NXZ		; CD3DArcBall::IsBeingDragged
PUBLIC	?SetQuatNow@CD3DArcBall@@QAEXABT__m128@@@Z	; CD3DArcBall::SetQuatNow
PUBLIC	?QuatFromBallPoints@CD3DArcBall@@SA?AT__m128@@T2@0@Z ; CD3DArcBall::QuatFromBallPoints
PUBLIC	?ScreenToVector@CD3DArcBall@@IAE?AT__m128@@MM@Z	; CD3DArcBall::ScreenToVector
PUBLIC	??0CBaseCamera@@QAE@XZ				; CBaseCamera::CBaseCamera
PUBLIC	?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z ; CBaseCamera::HandleMessages
PUBLIC	?Reset@CBaseCamera@@UAEXXZ			; CBaseCamera::Reset
PUBLIC	?SetViewParams@CBaseCamera@@UAEXT__m128@@0@Z	; CBaseCamera::SetViewParams
PUBLIC	?SetProjParams@CBaseCamera@@UAEXMMMM@Z		; CBaseCamera::SetProjParams
PUBLIC	?SetDragRect@CBaseCamera@@UAEXABUtagRECT@@@Z	; CBaseCamera::SetDragRect
PUBLIC	?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z ; CBaseCamera::MapKey
PUBLIC	?IsKeyDown@CBaseCamera@@IBE_NE@Z		; CBaseCamera::IsKeyDown
PUBLIC	?ConstrainToBoundary@CBaseCamera@@IAE?AT__m128@@T2@@Z ; CBaseCamera::ConstrainToBoundary
PUBLIC	?UpdateMouseDelta@CBaseCamera@@IAEXXZ		; CBaseCamera::UpdateMouseDelta
PUBLIC	?UpdateVelocity@CBaseCamera@@IAEXM@Z		; CBaseCamera::UpdateVelocity
PUBLIC	?GetInput@CBaseCamera@@IAEX_N00@Z		; CBaseCamera::GetInput
PUBLIC	??0CFirstPersonCamera@@QAE@XZ			; CFirstPersonCamera::CFirstPersonCamera
PUBLIC	?FrameMove@CFirstPersonCamera@@UAEXM@Z		; CFirstPersonCamera::FrameMove
PUBLIC	?SetRotateButtons@CFirstPersonCamera@@QAEX_N000@Z ; CFirstPersonCamera::SetRotateButtons
PUBLIC	??0CModelViewerCamera@@QAE@XZ			; CModelViewerCamera::CModelViewerCamera
PUBLIC	?HandleMessages@CModelViewerCamera@@UAEJPAUHWND__@@IIJ@Z ; CModelViewerCamera::HandleMessages
PUBLIC	?FrameMove@CModelViewerCamera@@UAEXM@Z		; CModelViewerCamera::FrameMove
PUBLIC	?SetDragRect@CModelViewerCamera@@UAEXABUtagRECT@@@Z ; CModelViewerCamera::SetDragRect
PUBLIC	?Reset@CModelViewerCamera@@UAEXXZ		; CModelViewerCamera::Reset
PUBLIC	?SetViewParams@CModelViewerCamera@@UAEXT__m128@@0@Z ; CModelViewerCamera::SetViewParams
PUBLIC	?SetWindow@CModelViewerCamera@@QAEXHHM@Z	; CModelViewerCamera::SetWindow
PUBLIC	?SetRadius@CModelViewerCamera@@QAEXMMM@Z	; CModelViewerCamera::SetRadius
PUBLIC	??0CDXUTDirectionWidget@@QAE@XZ			; CDXUTDirectionWidget::CDXUTDirectionWidget
PUBLIC	?HandleMessages@CDXUTDirectionWidget@@QAEJPAUHWND__@@IIJ@Z ; CDXUTDirectionWidget::HandleMessages
PUBLIC	?OnRender@CDXUTDirectionWidget@@QAEJT__m128@@ABUXMMATRIX@DirectX@@10@Z ; CDXUTDirectionWidget::OnRender
PUBLIC	?StaticOnD3D11CreateDevice@CDXUTDirectionWidget@@SGJPAUID3D11Device@@PAUID3D11DeviceContext@@@Z ; CDXUTDirectionWidget::StaticOnD3D11CreateDevice
PUBLIC	?StaticOnD3D11DestroyDevice@CDXUTDirectionWidget@@SGXXZ ; CDXUTDirectionWidget::StaticOnD3D11DestroyDevice
PUBLIC	?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ	; CDXUTDirectionWidget::UpdateLightDir
PUBLIC	??$max@M@std@@YAABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YAABMABM0@Z			; std::min<float>
PUBLIC	??$_Debug_lt@ABMABM@std@@YA_NABM0PB_WI@Z	; std::_Debug_lt<float const &,float const &>
PUBLIC	??$forward@ABM@std@@YAABMABM@Z			; std::forward<float const &>
PUBLIC	??$_Debug_lt_pred@U?$less@X@std@@ABMABM@std@@YA_NU?$less@X@0@ABM1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,float const &,float const &>
PUBLIC	??$?RABMABM@?$less@X@std@@QBE_NABM0@Z		; std::less<void>::operator()<float const &,float const &>
PUBLIC	?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMHalfPi
PUBLIC	?g_XMPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMPi
PUBLIC	?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMTwoPi
PUBLIC	?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMReciprocalTwoPi
PUBLIC	??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ ; `string'
PUBLIC	??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JC@LGEHDEBK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ ; `string'
PUBLIC	?magic@?1??XMVectorRound@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORI32@2@B ; `DirectX::XMVectorRound'::`2'::magic
PUBLIC	??_C@_1DO@HJELAGIP@?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA4?$AAL?$AAe?$AAs?$AAs?$AAO?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAM?$AAi?$AAn?$AA?0?$AA?5?$AAM?$AAa?$AAx?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@PCMAADPN@?$AAp?$AAS?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@LFGCHHDM@?$AAp?$AAC?$AAo?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ ; `string'
PUBLIC	?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B ; `DirectX::XMMatrixRotationQuaternion'::`2'::Constant1110
PUBLIC	??_C@_1FM@KOIPKFLA@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM@ ; `string'
PUBLIC	??_C@_1EG@DOFHPLOD@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo@ ; `string'
PUBLIC	??_C@_1FK@IBPGMKAB@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM?$AAV@ ; `string'
PUBLIC	??_C@_1EE@JAOFAOOK@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn@ ; `string'
PUBLIC	??_C@_1FE@IMEJOJAH@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAa?$AAr?$AAZ?$AA?0?$AA?5?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?0?$AA?5@ ; `string'
PUBLIC	??_C@_1GK@EFPMNDEN@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAo?$AAv?$AAA?$AAn?$AAg?$AAl?$AAe?$AAY?$AA?0?$AA?5?$AA0?$AA?4@ ; `string'
PUBLIC	??_C@_1FO@IACFEINC@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAH?$AAB?$AAy?$AAW?$AA?0?$AA?5?$AA0@ ; `string'
PUBLIC	?ControlWZYX@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionMultiply'::`2'::ControlWZYX
PUBLIC	?ControlZWXY@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionMultiply'::`2'::ControlZWXY
PUBLIC	?ControlYXWZ@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionMultiply'::`2'::ControlYXWZ
PUBLIC	??_C@_1IO@PAPJGEKF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ ; `string'
PUBLIC	?Sign@?1??XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationRollPitchYawFromVector'::`2'::Sign
PUBLIC	?XMPMMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMPMMP
PUBLIC	?XMMPMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMMPMP
PUBLIC	?XMMMPP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMMMPP
PUBLIC	??_C@_19MFJHDIJG@?$AAp?$AAS?$AAi?$AAn?$AA?$AA@	; `string'
PUBLIC	??_C@_19MNAGGFOC@?$AAp?$AAC?$AAo?$AAs?$AA?$AA@	; `string'
PUBLIC	?selectMask@?1??Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute'::`2'::selectMask
PUBLIC	?selectMask@?1??Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute'::`2'::selectMask
PUBLIC	?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute'::`2'::selectMask
PUBLIC	??_7CBaseCamera@@6B@				; CBaseCamera::`vftable'
PUBLIC	??_7CFirstPersonCamera@@6B@			; CFirstPersonCamera::`vftable'
PUBLIC	??_7CModelViewerCamera@@6B@			; CModelViewerCamera::`vftable'
PUBLIC	??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ ; `string'
PUBLIC	??_R4CBaseCamera@@6B@				; CBaseCamera::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBaseCamera@@@8				; CBaseCamera `RTTI Type Descriptor'
PUBLIC	??_R3CBaseCamera@@8				; CBaseCamera::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseCamera@@8				; CBaseCamera::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseCamera@@8			; CBaseCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CFirstPersonCamera@@6B@			; CFirstPersonCamera::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFirstPersonCamera@@@8			; CFirstPersonCamera `RTTI Type Descriptor'
PUBLIC	??_R3CFirstPersonCamera@@8			; CFirstPersonCamera::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFirstPersonCamera@@8			; CFirstPersonCamera::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFirstPersonCamera@@8		; CFirstPersonCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CModelViewerCamera@@6B@			; CModelViewerCamera::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCModelViewerCamera@@@8			; CModelViewerCamera `RTTI Type Descriptor'
PUBLIC	??_R3CModelViewerCamera@@8			; CModelViewerCamera::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CModelViewerCamera@@8			; CModelViewerCamera::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CModelViewerCamera@@8		; CModelViewerCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3638b88e
PUBLIC	__real@3727c5ac
PUBLIC	__real@37a7c5ac
PUBLIC	__real@37cfb4c2
PUBLIC	__real@39500bf1
PUBLIC	__real@3ab609aa
PUBLIC	__real@3c088886
PUBLIC	__real@3c23d70a
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3d2aaaa3
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e2aaaab
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@42f00000
PUBLIC	__real@447a0000
PUBLIC	__real@7f7fffff
PUBLIC	__real@b2cd365b
PUBLIC	__real@b48bdd11
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	__imp__SetCapture@4:PROC
EXTRN	__imp__ReleaseCapture@0:PROC
EXTRN	__imp__GetForegroundWindow@0:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__SetCursorPos@8:PROC
EXTRN	__imp__GetCursorPos@4:PROC
EXTRN	__imp__SetRect@20:PROC
EXTRN	__imp__PtInRect@12:PROC
EXTRN	__imp___wassert:PROC
EXTRN	__imp_?_Debug_message@std@@YAXPB_W0I@Z:PROC
EXTRN	?DXUTGetHWND@@YGPAUHWND__@@XZ:PROC		; DXUTGetHWND
EXTRN	?DXUTGetTime@@YGNXZ:PROC			; DXUTGetTime
EXTRN	?DXUTGetFPS@@YGMXZ:PROC				; DXUTGetFPS
EXTRN	?DXUTIsActive@@YG_NXZ:PROC			; DXUTIsActive
EXTRN	?DXUTGetGamepadState@@YAJKPAUDXUT_GAMEPAD@@_N1@Z:PROC ; DXUTGetGamepadState
EXTRN	?DXUTGetGlobalTimer@@YGPAVCDXUTTimer@@XZ:PROC	; DXUTGetGlobalTimer
EXTRN	?DXUTMonitorFromWindow@@YGPAUHMONITOR__@@PAUHWND__@@K@Z:PROC ; DXUTMonitorFromWindow
EXTRN	?DXUTGetMonitorInfo@@YGHPAUHMONITOR__@@PAUtagMONITORINFO@@@Z:PROC ; DXUTGetMonitorInfo
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___libm_sse2_atan2:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMHalfPi$initializer$ DD FLAT:??__Eg_XMHalfPi@DirectX@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@b48bdd11
CONST	SEGMENT
__real@b48bdd11 DD 0b48bdd11r			; -2.60516e-007
CONST	ENDS
;	COMDAT __real@b2cd365b
CONST	SEGMENT
__real@b2cd365b DD 0b2cd365br			; -2.38899e-008
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e2aaaab
CONST	SEGMENT
__real@3e2aaaab DD 03e2aaaabr			; 0.166667
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d2aaaa3
CONST	SEGMENT
__real@3d2aaaa3 DD 03d2aaaa3r			; 0.0416666
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3c088886
CONST	SEGMENT
__real@3c088886 DD 03c088886r			; 0.00833333
CONST	ENDS
;	COMDAT __real@3ab609aa
CONST	SEGMENT
__real@3ab609aa DD 03ab609aar			; 0.00138884
CONST	ENDS
;	COMDAT __real@39500bf1
CONST	SEGMENT
__real@39500bf1 DD 039500bf1r			; 0.000198409
CONST	ENDS
;	COMDAT __real@37cfb4c2
CONST	SEGMENT
__real@37cfb4c2 DD 037cfb4c2r			; 2.47605e-005
CONST	ENDS
;	COMDAT __real@37a7c5ac
CONST	SEGMENT
__real@37a7c5ac DD 037a7c5acr			; 2e-005
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-005
CONST	ENDS
;	COMDAT __real@3638b88e
CONST	SEGMENT
__real@3638b88e DD 03638b88er			; 2.75256e-006
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CModelViewerCamera@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CModelViewerCamera@@8 DD FLAT:??_R0?AVCModelViewerCamera@@@8 ; CModelViewerCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CModelViewerCamera@@8
rdata$r	ENDS
;	COMDAT ??_R2CModelViewerCamera@@8
rdata$r	SEGMENT
??_R2CModelViewerCamera@@8 DD FLAT:??_R1A@?0A@EA@CModelViewerCamera@@8 ; CModelViewerCamera::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_R3CModelViewerCamera@@8
rdata$r	SEGMENT
??_R3CModelViewerCamera@@8 DD 00H			; CModelViewerCamera::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CModelViewerCamera@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCModelViewerCamera@@@8
data$r	SEGMENT
??_R0?AVCModelViewerCamera@@@8 DD FLAT:??_7type_info@@6B@ ; CModelViewerCamera `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCModelViewerCamera@@', 00H
data$r	ENDS
;	COMDAT ??_R4CModelViewerCamera@@6B@
rdata$r	SEGMENT
??_R4CModelViewerCamera@@6B@ DD 00H			; CModelViewerCamera::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCModelViewerCamera@@@8
	DD	FLAT:??_R3CModelViewerCamera@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFirstPersonCamera@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFirstPersonCamera@@8 DD FLAT:??_R0?AVCFirstPersonCamera@@@8 ; CFirstPersonCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFirstPersonCamera@@8
rdata$r	ENDS
;	COMDAT ??_R2CFirstPersonCamera@@8
rdata$r	SEGMENT
??_R2CFirstPersonCamera@@8 DD FLAT:??_R1A@?0A@EA@CFirstPersonCamera@@8 ; CFirstPersonCamera::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_R3CFirstPersonCamera@@8
rdata$r	SEGMENT
??_R3CFirstPersonCamera@@8 DD 00H			; CFirstPersonCamera::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CFirstPersonCamera@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFirstPersonCamera@@@8
data$r	SEGMENT
??_R0?AVCFirstPersonCamera@@@8 DD FLAT:??_7type_info@@6B@ ; CFirstPersonCamera `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFirstPersonCamera@@', 00H
data$r	ENDS
;	COMDAT ??_R4CFirstPersonCamera@@6B@
rdata$r	SEGMENT
??_R4CFirstPersonCamera@@6B@ DD 00H			; CFirstPersonCamera::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFirstPersonCamera@@@8
	DD	FLAT:??_R3CFirstPersonCamera@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseCamera@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseCamera@@8 DD FLAT:??_R0?AVCBaseCamera@@@8 ; CBaseCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseCamera@@8
rdata$r	SEGMENT
??_R2CBaseCamera@@8 DD FLAT:??_R1A@?0A@EA@CBaseCamera@@8 ; CBaseCamera::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBaseCamera@@8
rdata$r	SEGMENT
??_R3CBaseCamera@@8 DD 00H				; CBaseCamera::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseCamera@@@8
data$r	SEGMENT
??_R0?AVCBaseCamera@@@8 DD FLAT:??_7type_info@@6B@	; CBaseCamera `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseCamera@@', 00H
data$r	ENDS
;	COMDAT ??_R4CBaseCamera@@6B@
rdata$r	SEGMENT
??_R4CBaseCamera@@6B@ DD 00H				; CBaseCamera::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBaseCamera@@@8
	DD	FLAT:??_R3CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H, 'g'
	DB	00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_7CModelViewerCamera@@6B@
CONST	SEGMENT
??_7CModelViewerCamera@@6B@ DD FLAT:??_R4CModelViewerCamera@@6B@ ; CModelViewerCamera::`vftable'
	DD	FLAT:?HandleMessages@CModelViewerCamera@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?FrameMove@CModelViewerCamera@@UAEXM@Z
	DD	FLAT:?Reset@CModelViewerCamera@@UAEXXZ
	DD	FLAT:?SetViewParams@CModelViewerCamera@@UAEXT__m128@@0@Z
	DD	FLAT:?SetProjParams@CBaseCamera@@UAEXMMMM@Z
	DD	FLAT:?SetDragRect@CModelViewerCamera@@UAEXABUtagRECT@@@Z
	DD	FLAT:?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z
CONST	ENDS
;	COMDAT ??_7CFirstPersonCamera@@6B@
CONST	SEGMENT
??_7CFirstPersonCamera@@6B@ DD FLAT:??_R4CFirstPersonCamera@@6B@ ; CFirstPersonCamera::`vftable'
	DD	FLAT:?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?FrameMove@CFirstPersonCamera@@UAEXM@Z
	DD	FLAT:?Reset@CBaseCamera@@UAEXXZ
	DD	FLAT:?SetViewParams@CBaseCamera@@UAEXT__m128@@0@Z
	DD	FLAT:?SetProjParams@CBaseCamera@@UAEXMMMM@Z
	DD	FLAT:?SetDragRect@CBaseCamera@@UAEXABUtagRECT@@@Z
	DD	FLAT:?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z
CONST	ENDS
;	COMDAT ??_7CBaseCamera@@6B@
CONST	SEGMENT
??_7CBaseCamera@@6B@ DD FLAT:??_R4CBaseCamera@@6B@	; CBaseCamera::`vftable'
	DD	FLAT:?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:__purecall
	DD	FLAT:?Reset@CBaseCamera@@UAEXXZ
	DD	FLAT:?SetViewParams@CBaseCamera@@UAEXT__m128@@0@Z
	DD	FLAT:?SetProjParams@CBaseCamera@@UAEXMMMM@Z
	DD	FLAT:?SetDragRect@CBaseCamera@@UAEXABUtagRECT@@@Z
	DD	FLAT:?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z
CONST	ENDS
;	COMDAT ?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B
CONST	SEGMENT
?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B DD 0ffffffffH ; `DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute'::`2'::selectMask
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?selectMask@?1??Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B
CONST	SEGMENT
?selectMask@?1??Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B DD 0ffffffffH ; `DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute'::`2'::selectMask
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?selectMask@?1??Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B
CONST	SEGMENT
?selectMask@?1??Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B DD 00H ; `DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute'::`2'::selectMask
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ??_C@_19MNAGGFOC@?$AAp?$AAC?$AAo?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_19MNAGGFOC@?$AAp?$AAC?$AAo?$AAs?$AA?$AA@ DB 'p', 00H, 'C', 00H, 'o', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19MFJHDIJG@?$AAp?$AAS?$AAi?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_19MFJHDIJG@?$AAp?$AAS?$AAi?$AAn?$AA?$AA@ DB 'p', 00H, 'S', 00H, 'i', 00H
	DB	'n', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?XMMMPP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?XMMMPP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B DD 0bf800000r ; -1 ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMMMPP
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?XMMPMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?XMMPMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B DD 0bf800000r ; -1 ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMMPMP
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?XMPMMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?XMPMMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B DD 03f800000r ; 1 ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMPMMP
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Sign@?1??XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?Sign@?1??XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B DD 03f800000r ; 1 ; `DirectX::XMQuaternionRotationRollPitchYawFromVector'::`2'::Sign
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_1IO@PAPJGEKF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
CONST	SEGMENT
??_C@_1IO@PAPJGEKF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'k', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '8', 00H, '.', 00H, '1', 00H, '\'
	DB	00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H
	DB	'e', 00H, '\', 00H, 'u', 00H, 'm', 00H, '\', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'X', 00H, 'M', 00H
	DB	'a', 00H, 't', 00H, 'h', 00H, 'M', 00H, 'i', 00H, 's', 00H, 'c'
	DB	00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?ControlYXWZ@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?ControlYXWZ@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B DD 0bf800000r ; -1 ; `DirectX::XMQuaternionMultiply'::`2'::ControlYXWZ
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?ControlZWXY@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?ControlZWXY@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B DD 03f800000r ; 1 ; `DirectX::XMQuaternionMultiply'::`2'::ControlZWXY
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?ControlWZYX@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?ControlWZYX@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B DD 03f800000r ; 1 ; `DirectX::XMQuaternionMultiply'::`2'::ControlWZYX
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ??_C@_1FO@IACFEINC@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAH?$AAB?$AAy?$AAW?$AA?0?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1FO@IACFEINC@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAH?$AAB?$AAy?$AAW?$AA?0?$AA?5?$AA0@ DB '!'
	DB	00H, 'X', 00H, 'M', 00H, 'S', 00H, 'c', 00H, 'a', 00H, 'l', 00H
	DB	'a', 00H, 'r', 00H, 'N', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, '(', 00H, 'A', 00H
	DB	's', 00H, 'p', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'H', 00H, 'B'
	DB	00H, 'y', 00H, 'W', 00H, ',', 00H, ' ', 00H, '0', 00H, '.', 00H
	DB	'0', 00H, 'f', 00H, ',', 00H, ' ', 00H, '0', 00H, '.', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, '1', 00H, 'f', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@EFPMNDEN@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAo?$AAv?$AAA?$AAn?$AAg?$AAl?$AAe?$AAY?$AA?0?$AA?5?$AA0?$AA?4@
CONST	SEGMENT
??_C@_1GK@EFPMNDEN@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAo?$AAv?$AAA?$AAn?$AAg?$AAl?$AAe?$AAY?$AA?0?$AA?5?$AA0?$AA?4@ DB '!'
	DB	00H, 'X', 00H, 'M', 00H, 'S', 00H, 'c', 00H, 'a', 00H, 'l', 00H
	DB	'a', 00H, 'r', 00H, 'N', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, '(', 00H, 'F', 00H
	DB	'o', 00H, 'v', 00H, 'A', 00H, 'n', 00H, 'g', 00H, 'l', 00H, 'e'
	DB	00H, 'Y', 00H, ',', 00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H
	DB	'f', 00H, ',', 00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, '1', 00H, 'f', 00H, ' ', 00H, '*', 00H
	DB	' ', 00H, '2', 00H, '.', 00H, '0', 00H, 'f', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@IMEJOJAH@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAa?$AAr?$AAZ?$AA?0?$AA?5?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?0?$AA?5@
CONST	SEGMENT
??_C@_1FE@IMEJOJAH@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAa?$AAr?$AAZ?$AA?0?$AA?5?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?0?$AA?5@ DB '!'
	DB	00H, 'X', 00H, 'M', 00H, 'S', 00H, 'c', 00H, 'a', 00H, 'l', 00H
	DB	'a', 00H, 'r', 00H, 'N', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, '(', 00H, 'F', 00H
	DB	'a', 00H, 'r', 00H, 'Z', 00H, ',', 00H, ' ', 00H, 'N', 00H, 'e'
	DB	00H, 'a', 00H, 'r', 00H, 'Z', 00H, ',', 00H, ' ', 00H, '0', 00H
	DB	'.', 00H, '0', 00H, '0', 00H, '0', 00H, '0', 00H, '1', 00H, 'f'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@JAOFAOOK@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn@
CONST	SEGMENT
??_C@_1EE@JAOFAOOK@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn@ DB '!'
	DB	00H, 'X', 00H, 'M', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '3', 00H, 'I', 00H, 's', 00H, 'I', 00H, 'n'
	DB	00H, 'f', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'(', 00H, 'U', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@IBPGMKAB@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM?$AAV@
CONST	SEGMENT
??_C@_1FK@IBPGMKAB@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM?$AAV@ DB '!'
	DB	00H, 'X', 00H, 'M', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '3', 00H, 'E', 00H, 'q', 00H, 'u', 00H, 'a'
	DB	00H, 'l', 00H, '(', 00H, 'U', 00H, 'p', 00H, 'D', 00H, 'i', 00H
	DB	'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, ',', 00H, ' ', 00H, 'X', 00H, 'M', 00H, 'V', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'Z', 00H, 'e', 00H, 'r'
	DB	00H, 'o', 00H, '(', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@DOFHPLOD@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo@
CONST	SEGMENT
??_C@_1EG@DOFHPLOD@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo@ DB '!'
	DB	00H, 'X', 00H, 'M', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '3', 00H, 'I', 00H, 's', 00H, 'I', 00H, 'n'
	DB	00H, 'f', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'(', 00H, 'E', 00H, 'y', 00H, 'e', 00H, 'D', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@KOIPKFLA@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM@
CONST	SEGMENT
??_C@_1FM@KOIPKFLA@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM@ DB '!'
	DB	00H, 'X', 00H, 'M', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '3', 00H, 'E', 00H, 'q', 00H, 'u', 00H, 'a'
	DB	00H, 'l', 00H, '(', 00H, 'E', 00H, 'y', 00H, 'e', 00H, 'D', 00H
	DB	'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, ',', 00H, ' ', 00H, 'X', 00H, 'M', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'Z', 00H, 'e'
	DB	00H, 'r', 00H, 'o', 00H, '(', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B DD 03f800000r ; 1 ; `DirectX::XMMatrixRotationQuaternion'::`2'::Constant1110
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
CONST	SEGMENT
??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'k', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '8', 00H, '.', 00H, '1', 00H, '\'
	DB	00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H
	DB	'e', 00H, '\', 00H, 'u', 00H, 'm', 00H, '\', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'X', 00H, 'M', 00H
	DB	'a', 00H, 't', 00H, 'h', 00H, 'M', 00H, 'a', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'x', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@LFGCHHDM@?$AAp?$AAC?$AAo?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@LFGCHHDM@?$AAp?$AAC?$AAo?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@ DB 'p'
	DB	00H, 'C', 00H, 'o', 00H, 's', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't'
	DB	00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@PCMAADPN@?$AAp?$AAS?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@PCMAADPN@?$AAp?$AAS?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@ DB 'p'
	DB	00H, 'S', 00H, 'i', 00H, 'n', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't'
	DB	00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@HJELAGIP@?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA4?$AAL?$AAe?$AAs?$AAs?$AAO?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAM?$AAi?$AAn?$AA?0?$AA?5?$AAM?$AAa?$AAx?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@HJELAGIP@?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA4?$AAL?$AAe?$AAs?$AAs?$AAO?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAM?$AAi?$AAn?$AA?0?$AA?5?$AAM?$AAa?$AAx?$AA?$CJ?$AA?$AA@ DB 'X'
	DB	00H, 'M', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '4', 00H, 'L', 00H, 'e', 00H, 's', 00H, 's', 00H, 'O'
	DB	00H, 'r', 00H, 'E', 00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	'(', 00H, 'M', 00H, 'i', 00H, 'n', 00H, ',', 00H, ' ', 00H, 'M'
	DB	00H, 'a', 00H, 'x', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?magic@?1??XMVectorRound@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORI32@2@B
CONST	SEGMENT
?magic@?1??XMVectorRound@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORI32@2@B DD 04b000000H ; `DirectX::XMVectorRound'::`2'::magic
	DD	04b000000H
	DD	04b000000H
	DD	04b000000H
CONST	ENDS
;	COMDAT ??_C@_1JC@LGEHDEBK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
CONST	SEGMENT
??_C@_1JC@LGEHDEBK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'k', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '8', 00H, '.', 00H, '1', 00H, '\'
	DB	00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H
	DB	'e', 00H, '\', 00H, 'u', 00H, 'm', 00H, '\', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'X', 00H, 'M', 00H
	DB	'a', 00H, 't', 00H, 'h', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ DB 'p'
	DB	00H, 'D', 00H, 'e', 00H, 's', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ DB 'p', 00H
	DB	'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
CONST	SEGMENT
??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'k', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '8', 00H, '.', 00H, '1', 00H, '\'
	DB	00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H
	DB	'e', 00H, '\', 00H, 'u', 00H, 'm', 00H, '\', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'X', 00H, 'M', 00H
	DB	'a', 00H, 't', 00H, 'h', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'v'
	DB	00H, 'e', 00H, 'r', 00H, 't', 00H, '.', 00H, 'i', 00H, 'n', 00H
	DB	'l', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B	ORG $+16 ; DirectX::g_XMReciprocalTwoPi
_DATA	ENDS
;	COMDAT ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B	ORG $+16		; DirectX::g_XMTwoPi
_DATA	ENDS
;	COMDAT ?g_XMPi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMPi@DirectX@@3UXMVECTORF32@1@B	ORG $+16		; DirectX::g_XMPi
_DATA	ENDS
;	COMDAT ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B	ORG $+16		; DirectX::g_XMHalfPi
_DATA	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMPi$initializer$ DD FLAT:??__Eg_XMPi@DirectX@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMTwoPi$initializer$ DD FLAT:??__Eg_XMTwoPi@DirectX@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMReciprocalTwoPi$initializer$ DD FLAT:??__Eg_XMReciprocalTwoPi@DirectX@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$?RABMABM@?$less@X@std@@QBE_NABM0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RABMABM@?$less@X@std@@QBE_NABM0@Z PROC		; std::less<void>::operator()<float const &,float const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 263
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 268
  00017	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  0001d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00021	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00024	76 09		 jbe	 SHORT $LN3@operator
  00026	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  0002d	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0002f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@operator:
  00036	8a 45 f8	 mov	 al, BYTE PTR tv65[ebp]
; Line 269
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
??$?RABMABM@?$less@X@std@@QBE_NABM0@Z ENDP		; std::less<void>::operator()<float const &,float const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Debug_lt_pred@U?$less@X@std@@ABMABM@std@@YA_NU?$less@X@0@ABM1PB_WI@Z
_TEXT	SEGMENT
__Pred$ = 8						; size = 1
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
__File$ = 20						; size = 4
__Line$ = 24						; size = 4
??$_Debug_lt_pred@U?$less@X@std@@ABMABM@std@@YA_NU?$less@X@0@ABM1PB_WI@Z PROC ; std::_Debug_lt_pred<std::less<void>,float const &,float const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 520
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 521
  00004	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??$forward@ABM@std@@YAABMABM@Z ; std::forward<float const &>
  0000d	83 c4 04	 add	 esp, 4
  00010	50		 push	 eax
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??$forward@ABM@std@@YAABMABM@Z ; std::forward<float const &>
  0001a	83 c4 04	 add	 esp, 4
  0001d	50		 push	 eax
  0001e	8d 4d 08	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00021	e8 00 00 00 00	 call	 ??$?RABMABM@?$less@X@std@@QBE_NABM0@Z ; std::less<void>::operator()<float const &,float const &>
  00026	0f b6 d0	 movzx	 edx, al
  00029	85 d2		 test	 edx, edx
  0002b	75 06		 jne	 SHORT $LN3@Debug_lt_p
; Line 522
  0002d	32 c0		 xor	 al, al
  0002f	eb 4c		 jmp	 SHORT $LN4@Debug_lt_p
  00031	eb 48		 jmp	 SHORT $LN2@Debug_lt_p
$LN3@Debug_lt_p:
; Line 523
  00033	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$forward@ABM@std@@YAABMABM@Z ; std::forward<float const &>
  0003c	83 c4 04	 add	 esp, 4
  0003f	50		 push	 eax
  00040	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 ??$forward@ABM@std@@YAABMABM@Z ; std::forward<float const &>
  00049	83 c4 04	 add	 esp, 4
  0004c	50		 push	 eax
  0004d	8d 4d 08	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00050	e8 00 00 00 00	 call	 ??$?RABMABM@?$less@X@std@@QBE_NABM0@Z ; std::less<void>::operator()<float const &,float const &>
  00055	0f b6 d0	 movzx	 edx, al
  00058	85 d2		 test	 edx, edx
  0005a	74 1f		 je	 SHORT $LN2@Debug_lt_p
; Line 524
  0005c	8b f4		 mov	 esi, esp
  0005e	8b 45 18	 mov	 eax, DWORD PTR __Line$[ebp]
  00061	50		 push	 eax
  00062	8b 4d 14	 mov	 ecx, DWORD PTR __File$[ebp]
  00065	51		 push	 ecx
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Debug_lt_p:
; Line 525
  0007b	b0 01		 mov	 al, 1
$LN4@Debug_lt_p:
; Line 526
  0007d	5e		 pop	 esi
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
??$_Debug_lt_pred@U?$less@X@std@@ABMABM@std@@YA_NU?$less@X@0@ABM1PB_WI@Z ENDP ; std::_Debug_lt_pred<std::less<void>,float const &,float const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$forward@ABM@std@@YAABMABM@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABM@std@@YAABMABM@Z PROC			; std::forward<float const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1505
  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]
; Line 1506
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABM@std@@YAABMABM@Z ENDP			; std::forward<float const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Debug_lt@ABMABM@std@@YA_NABM0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_lt@ABMABM@std@@YA_NABM0PB_WI@Z PROC		; std::_Debug_lt<float const &,float const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 532
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 534
  0000b	33 c0		 xor	 eax, eax
  0000d	88 45 ff	 mov	 BYTE PTR $T1[ebp], al
  00010	8b 4d 14	 mov	 ecx, DWORD PTR __Line$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 10	 mov	 edx, DWORD PTR __File$[ebp]
  00017	52		 push	 edx
  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$forward@ABM@std@@YAABMABM@Z ; std::forward<float const &>
  00021	83 c4 04	 add	 esp, 4
  00024	50		 push	 eax
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$forward@ABM@std@@YAABMABM@Z ; std::forward<float const &>
  0002e	83 c4 04	 add	 esp, 4
  00031	50		 push	 eax
  00032	0f b6 55 ff	 movzx	 edx, BYTE PTR $T1[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@X@std@@ABMABM@std@@YA_NU?$less@X@0@ABM1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,float const &,float const &>
  0003c	83 c4 14	 add	 esp, 20			; 00000014H
; Line 535
  0003f	83 c4 04	 add	 esp, 4
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Debug_lt@ABMABM@std@@YA_NABM0PB_WI@Z ENDP		; std::_Debug_lt<float const &,float const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$min@M@std@@YAABMABM0@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YAABMABM0@Z PROC				; std::min<float>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 4120
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 4121
  00014	68 19 10 00 00	 push	 4121			; 00001019H
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??$_Debug_lt@ABMABM@std@@YA_NABM0PB_WI@Z ; std::_Debug_lt<float const &,float const &>
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	0f b6 d0	 movzx	 edx, al
  00031	85 d2		 test	 edx, edx
  00033	74 08		 je	 SHORT $LN3@min
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00038	89 45 f8	 mov	 DWORD PTR tv71[ebp], eax
  0003b	eb 06		 jmp	 SHORT $LN4@min
$LN3@min:
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00040	89 4d f8	 mov	 DWORD PTR tv71[ebp], ecx
$LN4@min:
  00043	8b 55 f8	 mov	 edx, DWORD PTR tv71[ebp]
  00046	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00049	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; Line 4122
  0004c	83 c4 08	 add	 esp, 8
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??$min@M@std@@YAABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$max@M@std@@YAABMABM0@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YAABMABM0@Z PROC				; std::max<float>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 4087
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 4088
  00014	68 f8 0f 00 00	 push	 4088			; 00000ff8H
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??$_Debug_lt@ABMABM@std@@YA_NABM0PB_WI@Z ; std::_Debug_lt<float const &,float const &>
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	0f b6 d0	 movzx	 edx, al
  00031	85 d2		 test	 edx, edx
  00033	74 08		 je	 SHORT $LN3@max
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00038	89 45 f8	 mov	 DWORD PTR tv71[ebp], eax
  0003b	eb 06		 jmp	 SHORT $LN4@max
$LN3@max:
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00040	89 4d f8	 mov	 DWORD PTR tv71[ebp], ecx
$LN4@max:
  00043	8b 55 f8	 mov	 edx, DWORD PTR tv71[ebp]
  00046	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00049	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; Line 4089
  0004c	83 c4 08	 add	 esp, 8
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??$max@M@std@@YAABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv397 = -1728						; size = 16
$T1 = -1712						; size = 64
$T2 = -1648						; size = 64
$T3 = -1584						; size = 64
$T4 = -1520						; size = 64
$T5 = -1456						; size = 64
$T6 = -1392						; size = 16
_vCurrentDir$ = -1376					; size = 16
$T7 = -1360						; size = 16
_vDefaultDir$ = -1344					; size = 16
$T8 = -1328						; size = 16
$T9 = -1312						; size = 16
$T10 = -1296						; size = 16
$T11 = -1280						; size = 16
$T12 = -1264						; size = 16
$T13 = -1248						; size = 16
$T14 = -1232						; size = 16
_zBasis$ = -1216					; size = 16
$T15 = -1200						; size = 16
$T16 = -1184						; size = 16
_yBasis$ = -1168					; size = 16
$T17 = -1152						; size = 16
_xBasis$ = -1136					; size = 16
$T18 = -1120						; size = 64
$T19 = -1056						; size = 64
$T20 = -992						; size = 64
$T21 = -928						; size = 64
_mRot$ = -848						; size = 64
_mRot0$ = -768						; size = 64
$T22 = -688						; size = 64
_mLastRotInv$ = -608					; size = 64
$T23 = -528						; size = 64
_mRotSnapshot$ = -448					; size = 64
$T24 = -368						; size = 16
$T25 = -352						; size = 16
$T26 = -336						; size = 16
$T27 = -320						; size = 64
_mInvView$ = -240					; size = 64
$T28 = -160						; size = 64
_mView$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ PROC	; CDXUTDirectionWidget::UpdateLightDir
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 1163
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c8 06 00
	00		 sub	 esp, 1736		; 000006c8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 38 f9 ff
	ff		 lea	 edi, DWORD PTR [ebp-1736]
  00025	b9 b2 01 00 00	 mov	 ecx, 434		; 000001b2H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1164
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	81 c1 c4 01 00
	00		 add	 ecx, 452		; 000001c4H
  00048	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  0004d	0f 29 9d 80 fa
	ff ff		 movaps	 XMMWORD PTR $T5[ebp+48], xmm3
  00054	0f 29 95 70 fa
	ff ff		 movaps	 XMMWORD PTR $T5[ebp+32], xmm2
  0005b	0f 29 8d 60 fa
	ff ff		 movaps	 XMMWORD PTR $T5[ebp+16], xmm1
  00062	0f 29 85 50 fa
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00069	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0006e	8d b5 50 fa ff
	ff		 lea	 esi, DWORD PTR $T5[ebp]
  00074	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR $T28[ebp]
  0007a	f3 a5		 rep movsd
  0007c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00081	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR $T28[ebp]
  00087	8d 7d b0	 lea	 edi, DWORD PTR _mView$[ebp]
  0008a	f3 a5		 rep movsd
; Line 1166
  0008c	33 c9		 xor	 ecx, ecx
  0008e	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _mView$[ebp]
  00092	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _mView$[ebp+16]
  00096	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _mView$[ebp+32]
  0009a	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _mView$[ebp+48]
  0009e	e8 00 00 00 00	 call	 ?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
  000a3	0f 29 9d 40 fa
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+48], xmm3
  000aa	0f 29 95 30 fa
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+32], xmm2
  000b1	0f 29 8d 20 fa
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+16], xmm1
  000b8	0f 29 85 10 fa
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  000bf	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000c4	8d b5 10 fa ff
	ff		 lea	 esi, DWORD PTR $T4[ebp]
  000ca	8d bd c0 fe ff
	ff		 lea	 edi, DWORD PTR $T27[ebp]
  000d0	f3 a5		 rep movsd
  000d2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000d7	8d b5 c0 fe ff
	ff		 lea	 esi, DWORD PTR $T27[ebp]
  000dd	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR _mInvView$[ebp]
  000e3	f3 a5		 rep movsd
; Line 1167
  000e5	8d 85 b0 fe ff
	ff		 lea	 eax, DWORD PTR $T26[ebp]
  000eb	50		 push	 eax
  000ec	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
  000f1	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  000f6	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000f9	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T25[ebp]
  000ff	51		 push	 ecx
  00100	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
  00105	0f 29 85 40 f9
	ff ff		 movaps	 XMMWORD PTR tv397[ebp], xmm0
  0010c	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00111	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  00114	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00119	6b c2 03	 imul	 eax, edx, 3
  0011c	0f 10 84 05 10
	ff ff ff	 movups	 xmm0, XMMWORD PTR _mInvView$[ebp+eax]
  00124	0f 28 95 40 f9
	ff ff		 movaps	 xmm2, XMMWORD PTR tv397[ebp]
  0012b	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  00130	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  00137	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0013c	6b d1 03	 imul	 edx, ecx, 3
  0013f	0f 10 85 90 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T24[ebp]
  00146	0f 11 84 15 10
	ff ff ff	 movups	 XMMWORD PTR _mInvView$[ebp+edx], xmm0
; Line 1169
  0014e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00151	83 c1 40	 add	 ecx, 64			; 00000040H
  00154	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  00159	0f 29 9d 00 fa
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+48], xmm3
  00160	0f 29 95 f0 f9
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+32], xmm2
  00167	0f 29 8d e0 f9
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+16], xmm1
  0016e	0f 29 85 d0 f9
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00175	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0017a	8d b5 d0 f9 ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  00180	8d bd f0 fd ff
	ff		 lea	 edi, DWORD PTR $T23[ebp]
  00186	f3 a5		 rep movsd
  00188	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0018d	8d b5 f0 fd ff
	ff		 lea	 esi, DWORD PTR $T23[ebp]
  00193	8d bd 40 fe ff
	ff		 lea	 edi, DWORD PTR _mRotSnapshot$[ebp]
  00199	f3 a5		 rep movsd
; Line 1170
  0019b	33 c9		 xor	 ecx, ecx
  0019d	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _mRotSnapshot$[ebp]
  001a4	0f 28 8d 50 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _mRotSnapshot$[ebp+16]
  001ab	0f 28 95 60 fe
	ff ff		 movaps	 xmm2, XMMWORD PTR _mRotSnapshot$[ebp+32]
  001b2	0f 28 9d 70 fe
	ff ff		 movaps	 xmm3, XMMWORD PTR _mRotSnapshot$[ebp+48]
  001b9	e8 00 00 00 00	 call	 ?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
  001be	0f 29 9d c0 f9
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+48], xmm3
  001c5	0f 29 95 b0 f9
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+32], xmm2
  001cc	0f 29 8d a0 f9
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+16], xmm1
  001d3	0f 29 85 90 f9
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  001da	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001df	8d b5 90 f9 ff
	ff		 lea	 esi, DWORD PTR $T2[ebp]
  001e5	8d bd 50 fd ff
	ff		 lea	 edi, DWORD PTR $T22[ebp]
  001eb	f3 a5		 rep movsd
  001ed	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001f2	8d b5 50 fd ff
	ff		 lea	 esi, DWORD PTR $T22[ebp]
  001f8	8d bd a0 fd ff
	ff		 lea	 edi, DWORD PTR _mLastRotInv$[ebp]
  001fe	f3 a5		 rep movsd
; Line 1172
  00200	8d 85 00 fd ff
	ff		 lea	 eax, DWORD PTR _mRot0$[ebp]
  00206	50		 push	 eax
  00207	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0020a	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00210	e8 00 00 00 00	 call	 ?GetRotationMatrix@CD3DArcBall@@QBE?AUXMMATRIX@DirectX@@XZ ; CD3DArcBall::GetRotationMatrix
; Line 1173
  00215	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00218	83 c1 40	 add	 ecx, 64			; 00000040H
  0021b	0f 28 85 00 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _mRot0$[ebp]
  00222	0f 28 8d 10 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _mRot0$[ebp+16]
  00229	0f 28 95 20 fd
	ff ff		 movaps	 xmm2, XMMWORD PTR _mRot0$[ebp+32]
  00230	0f 28 9d 30 fd
	ff ff		 movaps	 xmm3, XMMWORD PTR _mRot0$[ebp+48]
  00237	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 1177
  0023c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0023f	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  00244	0f 29 9d 80 f9
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  0024b	0f 29 95 70 f9
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  00252	0f 29 8d 60 f9
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  00259	0f 29 85 50 f9
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00260	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00265	8d b5 50 f9 ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  0026b	8d bd 60 fc ff
	ff		 lea	 edi, DWORD PTR $T21[ebp]
  00271	f3 a5		 rep movsd
  00273	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00278	8d b5 60 fc ff
	ff		 lea	 esi, DWORD PTR $T21[ebp]
  0027e	8d bd b0 fc ff
	ff		 lea	 edi, DWORD PTR _mRot$[ebp]
  00284	f3 a5		 rep movsd
; Line 1178
  00286	8d 95 20 fc ff
	ff		 lea	 edx, DWORD PTR $T20[ebp]
  0028c	8d 4d b0	 lea	 ecx, DWORD PTR _mView$[ebp]
  0028f	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _mLastRotInv$[ebp]
  00296	0f 28 8d b0 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _mLastRotInv$[ebp+16]
  0029d	0f 28 95 c0 fd
	ff ff		 movaps	 xmm2, XMMWORD PTR _mLastRotInv$[ebp+32]
  002a4	0f 28 9d d0 fd
	ff ff		 movaps	 xmm3, XMMWORD PTR _mLastRotInv$[ebp+48]
  002ab	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
  002b0	8d 95 e0 fb ff
	ff		 lea	 edx, DWORD PTR $T19[ebp]
  002b6	8b c8		 mov	 ecx, eax
  002b8	0f 28 85 00 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _mRot0$[ebp]
  002bf	0f 28 8d 10 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _mRot0$[ebp+16]
  002c6	0f 28 95 20 fd
	ff ff		 movaps	 xmm2, XMMWORD PTR _mRot0$[ebp+32]
  002cd	0f 28 9d 30 fd
	ff ff		 movaps	 xmm3, XMMWORD PTR _mRot0$[ebp+48]
  002d4	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
  002d9	8d 95 a0 fb ff
	ff		 lea	 edx, DWORD PTR $T18[ebp]
  002df	8b c8		 mov	 ecx, eax
  002e1	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _mInvView$[ebp]
  002e8	0f 28 8d 20 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mInvView$[ebp+16]
  002ef	0f 28 95 30 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _mInvView$[ebp+32]
  002f6	0f 28 9d 40 ff
	ff ff		 movaps	 xmm3, XMMWORD PTR _mInvView$[ebp+48]
  002fd	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
  00302	8d 8d b0 fc ff
	ff		 lea	 ecx, DWORD PTR _mRot$[ebp]
  00308	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  0030b	0f 28 48 10	 movaps	 xmm1, XMMWORD PTR [eax+16]
  0030f	0f 28 50 20	 movaps	 xmm2, XMMWORD PTR [eax+32]
  00313	0f 28 58 30	 movaps	 xmm3, XMMWORD PTR [eax+48]
  00317	e8 00 00 00 00	 call	 ??XXMMATRIX@DirectX@@QAQAAU01@U01@@Z ; DirectX::XMMATRIX::operator*=
; Line 1182
  0031c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00321	6b d1 00	 imul	 edx, ecx, 0
  00324	0f 10 84 15 b0
	fc ff ff	 movups	 xmm0, XMMWORD PTR _mRot$[ebp+edx]
  0032c	e8 00 00 00 00	 call	 ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
  00331	0f 29 85 80 fb
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00338	0f 28 85 80 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  0033f	0f 29 85 90 fb
	ff ff		 movaps	 XMMWORD PTR _xBasis$[ebp], xmm0
; Line 1183
  00346	0f 28 8d 90 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR _xBasis$[ebp]
  0034d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00352	d1 e0		 shl	 eax, 1
  00354	0f 10 84 05 b0
	fc ff ff	 movups	 xmm0, XMMWORD PTR _mRot$[ebp+eax]
  0035c	e8 00 00 00 00	 call	 ?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Cross
  00361	0f 29 85 60 fb
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  00368	0f 28 85 60 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  0036f	0f 29 85 70 fb
	ff ff		 movaps	 XMMWORD PTR _yBasis$[ebp], xmm0
; Line 1184
  00376	0f 28 85 70 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR _yBasis$[ebp]
  0037d	e8 00 00 00 00	 call	 ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
  00382	0f 29 85 50 fb
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00389	0f 28 85 50 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  00390	0f 29 85 70 fb
	ff ff		 movaps	 XMMWORD PTR _yBasis$[ebp], xmm0
; Line 1185
  00397	0f 28 8d 70 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR _yBasis$[ebp]
  0039e	0f 28 85 90 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR _xBasis$[ebp]
  003a5	e8 00 00 00 00	 call	 ?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Cross
  003aa	0f 29 85 30 fb
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  003b1	0f 28 85 30 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  003b8	0f 29 85 40 fb
	ff ff		 movaps	 XMMWORD PTR _zBasis$[ebp], xmm0
; Line 1186
  003bf	8d 8d 20 fb ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  003c5	51		 push	 ecx
  003c6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
  003cb	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  003d0	0f 10 10	 movups	 xmm2, XMMWORD PTR [eax]
  003d3	0f 28 8d 90 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR _xBasis$[ebp]
  003da	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  003df	6b c2 00	 imul	 eax, edx, 0
  003e2	0f 10 84 05 b0
	fc ff ff	 movups	 xmm0, XMMWORD PTR _mRot$[ebp+eax]
  003ea	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  003ef	0f 29 85 10 fb
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  003f6	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003fb	6b d1 00	 imul	 edx, ecx, 0
  003fe	0f 10 85 10 fb
	ff ff		 movups	 xmm0, XMMWORD PTR $T12[ebp]
  00405	0f 11 84 15 b0
	fc ff ff	 movups	 XMMWORD PTR _mRot$[ebp+edx], xmm0
; Line 1187
  0040d	8d 85 00 fb ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  00413	50		 push	 eax
  00414	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
  00419	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  0041e	0f 10 10	 movups	 xmm2, XMMWORD PTR [eax]
  00421	0f 28 8d 70 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR _yBasis$[ebp]
  00428	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0042d	c1 e1 00	 shl	 ecx, 0
  00430	0f 10 84 0d b0
	fc ff ff	 movups	 xmm0, XMMWORD PTR _mRot$[ebp+ecx]
  00438	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  0043d	0f 29 85 f0 fa
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00444	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00449	c1 e2 00	 shl	 edx, 0
  0044c	0f 10 85 f0 fa
	ff ff		 movups	 xmm0, XMMWORD PTR $T10[ebp]
  00453	0f 11 84 15 b0
	fc ff ff	 movups	 XMMWORD PTR _mRot$[ebp+edx], xmm0
; Line 1188
  0045b	8d 85 e0 fa ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  00461	50		 push	 eax
  00462	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
  00467	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  0046c	0f 10 10	 movups	 xmm2, XMMWORD PTR [eax]
  0046f	0f 28 8d 40 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR _zBasis$[ebp]
  00476	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0047b	d1 e1		 shl	 ecx, 1
  0047d	0f 10 84 0d b0
	fc ff ff	 movups	 xmm0, XMMWORD PTR _mRot$[ebp+ecx]
  00485	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  0048a	0f 29 85 d0 fa
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00491	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00496	d1 e2		 shl	 edx, 1
  00498	0f 10 85 d0 fa
	ff ff		 movups	 xmm0, XMMWORD PTR $T8[ebp]
  0049f	0f 11 84 15 b0
	fc ff ff	 movups	 XMMWORD PTR _mRot$[ebp+edx], xmm0
; Line 1189
  004a7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004aa	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _mRot$[ebp]
  004b1	0f 28 8d c0 fc
	ff ff		 movaps	 xmm1, XMMWORD PTR _mRot$[ebp+16]
  004b8	0f 28 95 d0 fc
	ff ff		 movaps	 xmm2, XMMWORD PTR _mRot$[ebp+32]
  004bf	0f 28 9d e0 fc
	ff ff		 movaps	 xmm3, XMMWORD PTR _mRot$[ebp+48]
  004c6	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 1192
  004cb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004ce	81 c1 ac 01 00
	00		 add	 ecx, 428		; 000001acH
  004d4	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  004d9	0f 29 85 b0 fa
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  004e0	0f 28 85 b0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  004e7	0f 29 85 c0 fa
	ff ff		 movaps	 XMMWORD PTR _vDefaultDir$[ebp], xmm0
; Line 1193
  004ee	0f 28 85 c0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR _vDefaultDir$[ebp]
  004f5	0f 28 8d b0 fc
	ff ff		 movaps	 xmm1, XMMWORD PTR _mRot$[ebp]
  004fc	0f 28 95 c0 fc
	ff ff		 movaps	 xmm2, XMMWORD PTR _mRot$[ebp+16]
  00503	0f 28 9d d0 fc
	ff ff		 movaps	 xmm3, XMMWORD PTR _mRot$[ebp+32]
  0050a	0f 28 a5 e0 fc
	ff ff		 movaps	 xmm4, XMMWORD PTR _mRot$[ebp+48]
  00511	e8 00 00 00 00	 call	 ?XMVector3TransformNormal@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformNormal
  00516	0f 29 85 90 fa
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0051d	0f 28 85 90 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  00524	0f 29 85 a0 fa
	ff ff		 movaps	 XMMWORD PTR _vCurrentDir$[ebp], xmm0
; Line 1194
  0052b	0f 28 85 a0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR _vCurrentDir$[ebp]
  00532	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00535	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  0053b	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 1196
  00540	33 c0		 xor	 eax, eax
; Line 1197
  00542	52		 push	 edx
  00543	8b cd		 mov	 ecx, ebp
  00545	50		 push	 eax
  00546	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@UpdateLigh
  0054c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00551	58		 pop	 eax
  00552	5a		 pop	 edx
  00553	5f		 pop	 edi
  00554	5e		 pop	 esi
  00555	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00558	33 cd		 xor	 ecx, ebp
  0055a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0055f	8b e5		 mov	 esp, ebp
  00561	5d		 pop	 ebp
  00562	8b e3		 mov	 esp, ebx
  00564	5b		 pop	 ebx
  00565	c3		 ret	 0
  00566	8b ff		 npad	 2
$LN10@UpdateLigh:
  00568	06 00 00 00	 DD	 6
  0056c	00 00 00 00	 DD	 $LN9@UpdateLigh
$LN9@UpdateLigh:
  00570	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00574	40 00 00 00	 DD	 64			; 00000040H
  00578	00 00 00 00	 DD	 $LN3@UpdateLigh
  0057c	10 ff ff ff	 DD	 -240			; ffffff10H
  00580	40 00 00 00	 DD	 64			; 00000040H
  00584	00 00 00 00	 DD	 $LN4@UpdateLigh
  00588	40 fe ff ff	 DD	 -448			; fffffe40H
  0058c	40 00 00 00	 DD	 64			; 00000040H
  00590	00 00 00 00	 DD	 $LN5@UpdateLigh
  00594	a0 fd ff ff	 DD	 -608			; fffffda0H
  00598	40 00 00 00	 DD	 64			; 00000040H
  0059c	00 00 00 00	 DD	 $LN6@UpdateLigh
  005a0	00 fd ff ff	 DD	 -768			; fffffd00H
  005a4	40 00 00 00	 DD	 64			; 00000040H
  005a8	00 00 00 00	 DD	 $LN7@UpdateLigh
  005ac	b0 fc ff ff	 DD	 -848			; fffffcb0H
  005b0	40 00 00 00	 DD	 64			; 00000040H
  005b4	00 00 00 00	 DD	 $LN8@UpdateLigh
$LN8@UpdateLigh:
  005b8	6d		 DB	 109			; 0000006dH
  005b9	52		 DB	 82			; 00000052H
  005ba	6f		 DB	 111			; 0000006fH
  005bb	74		 DB	 116			; 00000074H
  005bc	00		 DB	 0
$LN7@UpdateLigh:
  005bd	6d		 DB	 109			; 0000006dH
  005be	52		 DB	 82			; 00000052H
  005bf	6f		 DB	 111			; 0000006fH
  005c0	74		 DB	 116			; 00000074H
  005c1	30		 DB	 48			; 00000030H
  005c2	00		 DB	 0
$LN6@UpdateLigh:
  005c3	6d		 DB	 109			; 0000006dH
  005c4	4c		 DB	 76			; 0000004cH
  005c5	61		 DB	 97			; 00000061H
  005c6	73		 DB	 115			; 00000073H
  005c7	74		 DB	 116			; 00000074H
  005c8	52		 DB	 82			; 00000052H
  005c9	6f		 DB	 111			; 0000006fH
  005ca	74		 DB	 116			; 00000074H
  005cb	49		 DB	 73			; 00000049H
  005cc	6e		 DB	 110			; 0000006eH
  005cd	76		 DB	 118			; 00000076H
  005ce	00		 DB	 0
$LN5@UpdateLigh:
  005cf	6d		 DB	 109			; 0000006dH
  005d0	52		 DB	 82			; 00000052H
  005d1	6f		 DB	 111			; 0000006fH
  005d2	74		 DB	 116			; 00000074H
  005d3	53		 DB	 83			; 00000053H
  005d4	6e		 DB	 110			; 0000006eH
  005d5	61		 DB	 97			; 00000061H
  005d6	70		 DB	 112			; 00000070H
  005d7	73		 DB	 115			; 00000073H
  005d8	68		 DB	 104			; 00000068H
  005d9	6f		 DB	 111			; 0000006fH
  005da	74		 DB	 116			; 00000074H
  005db	00		 DB	 0
$LN4@UpdateLigh:
  005dc	6d		 DB	 109			; 0000006dH
  005dd	49		 DB	 73			; 00000049H
  005de	6e		 DB	 110			; 0000006eH
  005df	76		 DB	 118			; 00000076H
  005e0	56		 DB	 86			; 00000056H
  005e1	69		 DB	 105			; 00000069H
  005e2	65		 DB	 101			; 00000065H
  005e3	77		 DB	 119			; 00000077H
  005e4	00		 DB	 0
$LN3@UpdateLigh:
  005e5	6d		 DB	 109			; 0000006dH
  005e6	56		 DB	 86			; 00000056H
  005e7	69		 DB	 105			; 00000069H
  005e8	65		 DB	 101			; 00000065H
  005e9	77		 DB	 119			; 00000077H
  005ea	00		 DB	 0
?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ ENDP	; CDXUTDirectionWidget::UpdateLightDir
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?StaticOnD3D11DestroyDevice@CDXUTDirectionWidget@@SGXXZ PROC ; CDXUTDirectionWidget::StaticOnD3D11DestroyDevice
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 1226
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1228
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?StaticOnD3D11DestroyDevice@CDXUTDirectionWidget@@SGXXZ ENDP ; CDXUTDirectionWidget::StaticOnD3D11DestroyDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pd3dDevice$ = 8					; size = 4
_pd3dImmediateContext$ = 12				; size = 4
?StaticOnD3D11CreateDevice@CDXUTDirectionWidget@@SGJPAUID3D11Device@@PAUID3D11DeviceContext@@@Z PROC ; CDXUTDirectionWidget::StaticOnD3D11CreateDevice
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 1216
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1220
  00003	33 c0		 xor	 eax, eax
; Line 1221
  00005	5d		 pop	 ebp
  00006	c2 08 00	 ret	 8
?StaticOnD3D11CreateDevice@CDXUTDirectionWidget@@SGJPAUID3D11Device@@PAUID3D11DeviceContext@@@Z ENDP ; CDXUTDirectionWidget::StaticOnD3D11CreateDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -36						; size = 4
_vEyePt$ = -32						; size = 16
_color$ = -16						; size = 16
_mView$ = 8						; size = 4
_mProj$ = 12						; size = 4
?OnRender@CDXUTDirectionWidget@@QAEJT__m128@@ABUXMMATRIX@DirectX@@10@Z PROC ; CDXUTDirectionWidget::OnRender
; _this$ = ecx
; _color$ = xmm0
; _vEyePt$ = xmm1
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 1203
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _vEyePt$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _color$[ebp], xmm0
  00033	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1209
  00036	33 c0		 xor	 eax, eax
; Line 1210
  00038	5f		 pop	 edi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	8b e3		 mov	 esp, ebx
  0003e	5b		 pop	 ebx
  0003f	c2 08 00	 ret	 8
?OnRender@CDXUTDirectionWidget@@QAEJT__m128@@ABUXMMATRIX@DirectX@@10@Z ENDP ; CDXUTDirectionWidget::OnRender
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -24						; size = 4
_iMouseY$1 = -20					; size = 4
_iMouseX$2 = -16					; size = 4
_iMouseY$3 = -12					; size = 4
_iMouseX$4 = -8						; size = 4
_this$ = -4						; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HandleMessages@CDXUTDirectionWidget@@QAEJPAUHWND__@@IIJ@Z PROC ; CDXUTDirectionWidget::HandleMessages
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 1092
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1095
  00021	8b 45 0c	 mov	 eax, DWORD PTR _uMsg$[ebp]
  00024	89 45 e8	 mov	 DWORD PTR tv64[ebp], eax
  00027	8b 4d e8	 mov	 ecx, DWORD PTR tv64[ebp]
  0002a	81 e9 00 02 00
	00		 sub	 ecx, 512		; 00000200H
  00030	89 4d e8	 mov	 DWORD PTR tv64[ebp], ecx
  00033	83 7d e8 15	 cmp	 DWORD PTR tv64[ebp], 21	; 00000015H
  00037	0f 87 cd 01 00
	00		 ja	 $LN17@HandleMess
  0003d	8b 55 e8	 mov	 edx, DWORD PTR tv64[ebp]
  00040	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN21@HandleMess[edx]
  00047	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN22@HandleMess[eax*4]
$LN16@HandleMess:
; Line 1103
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00057	83 e2 01	 and	 edx, 1
  0005a	74 09		 je	 SHORT $LN13@HandleMess
  0005c	81 7d 0c 01 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 513 ; 00000201H
  00063	74 2e		 je	 SHORT $LN14@HandleMess
$LN13@HandleMess:
  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0006e	83 e1 02	 and	 ecx, 2
  00071	74 09		 je	 SHORT $LN12@HandleMess
  00073	81 7d 0c 07 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 519 ; 00000207H
  0007a	74 17		 je	 SHORT $LN14@HandleMess
$LN12@HandleMess:
  0007c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007f	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  00085	83 e0 04	 and	 eax, 4
  00088	74 52		 je	 SHORT $LN15@HandleMess
  0008a	81 7d 0c 04 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 516 ; 00000204H
  00091	75 49		 jne	 SHORT $LN15@HandleMess
$LN14@HandleMess:
; Line 1105
  00093	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00096	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0009c	0f bf d1	 movsx	 edx, cx
  0009f	89 55 f8	 mov	 DWORD PTR _iMouseX$4[ebp], edx
; Line 1106
  000a2	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  000a5	c1 e8 10	 shr	 eax, 16			; 00000010H
  000a8	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000ad	0f bf c8	 movsx	 ecx, ax
  000b0	89 4d f4	 mov	 DWORD PTR _iMouseY$3[ebp], ecx
; Line 1107
  000b3	8b 55 f4	 mov	 edx, DWORD PTR _iMouseY$3[ebp]
  000b6	52		 push	 edx
  000b7	8b 45 f8	 mov	 eax, DWORD PTR _iMouseX$4[ebp]
  000ba	50		 push	 eax
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  000c4	e8 00 00 00 00	 call	 ?OnBegin@CD3DArcBall@@QAEXHH@Z ; CD3DArcBall::OnBegin
; Line 1108
  000c9	8b f4		 mov	 esi, esp
  000cb	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  000ce	51		 push	 ecx
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCapture@4
  000d5	3b f4		 cmp	 esi, esp
  000d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN15@HandleMess:
; Line 1110
  000dc	b8 01 00 00 00	 mov	 eax, 1
  000e1	e9 26 01 00 00	 jmp	 $LN19@HandleMess
$LN11@HandleMess:
; Line 1115
  000e6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  000ef	e8 00 00 00 00	 call	 ?IsBeingDragged@CD3DArcBall@@QBE_NXZ ; CD3DArcBall::IsBeingDragged
  000f4	0f b6 d0	 movzx	 edx, al
  000f7	85 d2		 test	 edx, edx
  000f9	74 3e		 je	 SHORT $LN10@HandleMess
; Line 1117
  000fb	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  000fe	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00103	0f bf c8	 movsx	 ecx, ax
  00106	89 4d f0	 mov	 DWORD PTR _iMouseX$2[ebp], ecx
; Line 1118
  00109	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  0010c	c1 ea 10	 shr	 edx, 16			; 00000010H
  0010f	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00115	0f bf c2	 movsx	 eax, dx
  00118	89 45 ec	 mov	 DWORD PTR _iMouseY$1[ebp], eax
; Line 1119
  0011b	8b 4d ec	 mov	 ecx, DWORD PTR _iMouseY$1[ebp]
  0011e	51		 push	 ecx
  0011f	8b 55 f0	 mov	 edx, DWORD PTR _iMouseX$2[ebp]
  00122	52		 push	 edx
  00123	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00126	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0012c	e8 00 00 00 00	 call	 ?OnMove@CD3DArcBall@@QAEXHH@Z ; CD3DArcBall::OnMove
; Line 1120
  00131	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	e8 00 00 00 00	 call	 ?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ ; CDXUTDirectionWidget::UpdateLightDir
$LN10@HandleMess:
; Line 1122
  00139	b8 01 00 00 00	 mov	 eax, 1
  0013e	e9 c9 00 00 00	 jmp	 $LN19@HandleMess
$LN9@HandleMess:
; Line 1131
  00143	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00146	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  0014c	83 e1 01	 and	 ecx, 1
  0014f	74 09		 je	 SHORT $LN6@HandleMess
  00151	81 7d 0c 02 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 514 ; 00000202H
  00158	74 2e		 je	 SHORT $LN7@HandleMess
$LN6@HandleMess:
  0015a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0015d	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  00163	83 e0 02	 and	 eax, 2
  00166	74 09		 je	 SHORT $LN5@HandleMess
  00168	81 7d 0c 08 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 520 ; 00000208H
  0016f	74 17		 je	 SHORT $LN7@HandleMess
$LN5@HandleMess:
  00171	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00174	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  0017a	83 e2 04	 and	 edx, 4
  0017d	74 26		 je	 SHORT $LN8@HandleMess
  0017f	81 7d 0c 05 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 517 ; 00000205H
  00186	75 1d		 jne	 SHORT $LN8@HandleMess
$LN7@HandleMess:
; Line 1133
  00188	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018b	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00191	e8 00 00 00 00	 call	 ?OnEnd@CD3DArcBall@@QAEXXZ ; CD3DArcBall::OnEnd
; Line 1134
  00196	8b f4		 mov	 esi, esp
  00198	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseCapture@0
  0019e	3b f4		 cmp	 esi, esp
  001a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN8@HandleMess:
; Line 1137
  001a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a8	e8 00 00 00 00	 call	 ?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ ; CDXUTDirectionWidget::UpdateLightDir
; Line 1138
  001ad	b8 01 00 00 00	 mov	 eax, 1
  001b2	eb 58		 jmp	 SHORT $LN19@HandleMess
$LN4@HandleMess:
; Line 1143
  001b4	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  001b7	3b 45 08	 cmp	 eax, DWORD PTR _hWnd$[ebp]
  001ba	74 47		 je	 SHORT $LN3@HandleMess
; Line 1147
  001bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001bf	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  001c5	83 e2 01	 and	 edx, 1
  001c8	75 1c		 jne	 SHORT $LN1@HandleMess
  001ca	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001cd	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [eax+132]
  001d3	83 e1 02	 and	 ecx, 2
  001d6	75 0e		 jne	 SHORT $LN1@HandleMess
  001d8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001db	8b 82 84 00 00
	00		 mov	 eax, DWORD PTR [edx+132]
  001e1	83 e0 04	 and	 eax, 4
  001e4	74 1d		 je	 SHORT $LN3@HandleMess
$LN1@HandleMess:
; Line 1149
  001e6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e9	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  001ef	e8 00 00 00 00	 call	 ?OnEnd@CD3DArcBall@@QAEXXZ ; CD3DArcBall::OnEnd
; Line 1150
  001f4	8b f4		 mov	 esi, esp
  001f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseCapture@0
  001fc	3b f4		 cmp	 esi, esp
  001fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@HandleMess:
; Line 1153
  00203	b8 01 00 00 00	 mov	 eax, 1
  00208	eb 02		 jmp	 SHORT $LN19@HandleMess
$LN17@HandleMess:
; Line 1157
  0020a	33 c0		 xor	 eax, eax
$LN19@HandleMess:
; Line 1158
  0020c	5e		 pop	 esi
  0020d	83 c4 18	 add	 esp, 24			; 00000018H
  00210	3b ec		 cmp	 ebp, esp
  00212	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00217	8b e5		 mov	 esp, ebp
  00219	5d		 pop	 ebp
  0021a	c2 10 00	 ret	 16			; 00000010H
  0021d	8d 49 00	 npad	 3
$LN22@HandleMess:
  00220	00 00 00 00	 DD	 $LN11@HandleMess
  00224	00 00 00 00	 DD	 $LN16@HandleMess
  00228	00 00 00 00	 DD	 $LN9@HandleMess
  0022c	00 00 00 00	 DD	 $LN4@HandleMess
  00230	00 00 00 00	 DD	 $LN17@HandleMess
$LN21@HandleMess:
  00234	00		 DB	 0
  00235	01		 DB	 1
  00236	02		 DB	 2
  00237	04		 DB	 4
  00238	01		 DB	 1
  00239	02		 DB	 2
  0023a	04		 DB	 4
  0023b	01		 DB	 1
  0023c	02		 DB	 2
  0023d	04		 DB	 4
  0023e	04		 DB	 4
  0023f	04		 DB	 4
  00240	04		 DB	 4
  00241	04		 DB	 4
  00242	04		 DB	 4
  00243	04		 DB	 4
  00244	04		 DB	 4
  00245	04		 DB	 4
  00246	04		 DB	 4
  00247	04		 DB	 4
  00248	04		 DB	 4
  00249	03		 DB	 3
?HandleMessages@CDXUTDirectionWidget@@QAEJPAUHWND__@@IIJ@Z ENDP ; CDXUTDirectionWidget::HandleMessages
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -240						; size = 64
$T2 = -172						; size = 12
$T3 = -160						; size = 64
_id$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
??0CDXUTDirectionWidget@@QAE@XZ PROC			; CDXUTDirectionWidget::CDXUTDirectionWidget
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 1076
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 08 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-248]
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	83 c1 40	 add	 ecx, 64			; 00000040H
  0004d	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
  00052	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00055	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005d	f3 0f 11 80 80
	00 00 00	 movss	 DWORD PTR [eax+128], xmm0
  00065	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	c7 81 84 00 00
	00 04 00 00 00	 mov	 DWORD PTR [ecx+132], 4
  00072	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0007b	e8 00 00 00 00	 call	 ??0CD3DArcBall@@QAE@XZ	; CD3DArcBall::CD3DArcBall
  00080	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	81 c1 ac 01 00
	00		 add	 ecx, 428		; 000001acH
  00089	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00097	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
  0009c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	81 c1 c4 01 00
	00		 add	 ecx, 452		; 000001c4H
  000a5	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
; Line 1077
  000aa	51		 push	 ecx
  000ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b8	51		 push	 ecx
  000b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c6	51		 push	 ecx
  000c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d4	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000da	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@MMM@Z ; DirectX::XMFLOAT3::XMFLOAT3
  000df	50		 push	 eax
  000e0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e3	81 c1 ac 01 00
	00		 add	 ecx, 428		; 000001acH
  000e9	e8 00 00 00 00	 call	 ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT3::operator=
; Line 1078
  000ee	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000f1	81 c2 ac 01 00
	00		 add	 edx, 428		; 000001acH
  000f7	52		 push	 edx
  000f8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fb	81 c1 b8 01 00
	00		 add	 ecx, 440		; 000001b8H
  00101	e8 00 00 00 00	 call	 ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT3::operator=
; Line 1080
  00106	e8 00 00 00 00	 call	 ?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ ; DirectX::XMMatrixIdentity
  0010b	0f 29 9d 40 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00112	0f 29 95 30 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  00119	0f 29 8d 20 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  00120	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00127	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0012c	8d b5 10 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00132	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR $T3[ebp]
  00138	f3 a5		 rep movsd
  0013a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0013f	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  00145	8d 7d b0	 lea	 edi, DWORD PTR _id$[ebp]
  00148	f3 a5		 rep movsd
; Line 1082
  0014a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0014d	81 c1 c4 01 00
	00		 add	 ecx, 452		; 000001c4H
  00153	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _id$[ebp]
  00157	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _id$[ebp+16]
  0015b	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _id$[ebp+32]
  0015f	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _id$[ebp+48]
  00163	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 1083
  00168	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016b	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _id$[ebp]
  0016f	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _id$[ebp+16]
  00173	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _id$[ebp+32]
  00177	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _id$[ebp+48]
  0017b	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 1084
  00180	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00183	83 c1 40	 add	 ecx, 64			; 00000040H
  00186	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _id$[ebp]
  0018a	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _id$[ebp+16]
  0018e	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _id$[ebp+32]
  00192	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _id$[ebp+48]
  00196	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 1085
  0019b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0019e	52		 push	 edx
  0019f	8b cd		 mov	 ecx, ebp
  001a1	50		 push	 eax
  001a2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@CDXUTDirec
  001a8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001ad	58		 pop	 eax
  001ae	5a		 pop	 edx
  001af	5f		 pop	 edi
  001b0	5e		 pop	 esi
  001b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b4	33 cd		 xor	 ecx, ebp
  001b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	8b e3		 mov	 esp, ebx
  001c0	5b		 pop	 ebx
  001c1	c3		 ret	 0
  001c2	8b ff		 npad	 2
$LN5@CDXUTDirec:
  001c4	01 00 00 00	 DD	 1
  001c8	00 00 00 00	 DD	 $LN4@CDXUTDirec
$LN4@CDXUTDirec:
  001cc	b0 ff ff ff	 DD	 -80			; ffffffb0H
  001d0	40 00 00 00	 DD	 64			; 00000040H
  001d4	00 00 00 00	 DD	 $LN3@CDXUTDirec
$LN3@CDXUTDirec:
  001d8	69		 DB	 105			; 00000069H
  001d9	64		 DB	 100			; 00000064H
  001da	00		 DB	 0
??0CDXUTDirectionWidget@@QAE@XZ ENDP			; CDXUTDirectionWidget::CDXUTDirectionWidget
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetRadius@CModelViewerCamera@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fDefaultRadius$ = 8					; size = 4
_fMinRadius$ = 12					; size = 4
_fMaxRadius$ = 16					; size = 4
?SetRadius@CModelViewerCamera@@QAEXMMM@Z PROC		; CModelViewerCamera::SetRadius, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.h
; Line 331
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 332
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDefaultRadius$[ebp]
  00016	f3 0f 11 80 b4
	05 00 00	 movss	 DWORD PTR [eax+1460], xmm0
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDefaultRadius$[ebp]
  00026	f3 0f 11 81 b8
	05 00 00	 movss	 DWORD PTR [ecx+1464], xmm0
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00031	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fMinRadius$[ebp]
  00036	f3 0f 11 82 bc
	05 00 00	 movss	 DWORD PTR [edx+1468], xmm0
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fMaxRadius$[ebp]
  00046	f3 0f 11 80 c0
	05 00 00	 movss	 DWORD PTR [eax+1472], xmm0
; Line 333
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	c6 81 b2 05 00
	00 01		 mov	 BYTE PTR [ecx+1458], 1
; Line 334
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
?SetRadius@CModelViewerCamera@@QAEXMMM@Z ENDP		; CModelViewerCamera::SetRadius
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetWindow@CModelViewerCamera@@QAEXHHM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nWidth$ = 8						; size = 4
_nHeight$ = 12						; size = 4
_fArcballRadius$ = 16					; size = 4
?SetWindow@CModelViewerCamera@@QAEXHHM@Z PROC		; CModelViewerCamera::SetWindow, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.h
; Line 326
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 327
  0000e	51		 push	 ecx
  0000f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fArcballRadius$[ebp]
  00014	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00019	8b 45 0c	 mov	 eax, DWORD PTR _nHeight$[ebp]
  0001c	50		 push	 eax
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  00020	51		 push	 ecx
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  0002a	e8 00 00 00 00	 call	 ?SetWindow@CD3DArcBall@@QAEXHHM@Z ; CD3DArcBall::SetWindow
; Line 328
  0002f	51		 push	 ecx
  00030	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fArcballRadius$[ebp]
  00035	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003a	8b 55 0c	 mov	 edx, DWORD PTR _nHeight$[ebp]
  0003d	52		 push	 edx
  0003e	8b 45 08	 mov	 eax, DWORD PTR _nWidth$[ebp]
  00041	50		 push	 eax
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 b4 03 00
	00		 add	 ecx, 948		; 000003b4H
  0004b	e8 00 00 00 00	 call	 ?SetWindow@CD3DArcBall@@QAEXHHM@Z ; CD3DArcBall::SetWindow
; Line 329
  00050	83 c4 04	 add	 esp, 4
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
?SetWindow@CModelViewerCamera@@QAEXHHM@Z ENDP		; CModelViewerCamera::SetWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -416						; size = 64
$T2 = -352						; size = 16
_len$ = -324						; size = 4
$T3 = -320						; size = 16
_vEyeToPoint$ = -304					; size = 16
$T4 = -288						; size = 16
_quat$ = -256						; size = 16
$T5 = -224						; size = 64
$T6 = -160						; size = 16
_mRotation$ = -128					; size = 64
_this$ = -52						; size = 4
_vLookatPt$ = -48					; size = 16
_vEyePt$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
?SetViewParams@CModelViewerCamera@@UAEXT__m128@@0@Z PROC ; CModelViewerCamera::SetViewParams
; _this$ = ecx
; _vEyePt$ = xmm0
; _vLookatPt$ = xmm1
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 963
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec a8 01 00
	00		 sub	 esp, 424		; 000001a8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 58 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-424]
  00025	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	0f 29 4d d0	 movaps	 XMMWORD PTR _vLookatPt$[ebp], xmm1
  00040	0f 29 45 e0	 movaps	 XMMWORD PTR _vEyePt$[ebp], xmm0
  00044	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 964
  00047	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _vLookatPt$[ebp]
  0004b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vEyePt$[ebp]
  0004f	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?SetViewParams@CBaseCamera@@UAEXT__m128@@0@Z ; CBaseCamera::SetViewParams
; Line 967
  00057	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  0005d	50		 push	 eax
  0005e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR1
  00063	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00068	0f 10 10	 movups	 xmm2, XMMWORD PTR [eax]
  0006b	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _vLookatPt$[ebp]
  0006f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vEyePt$[ebp]
  00073	e8 00 00 00 00	 call	 ?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ; DirectX::XMMatrixLookAtLH
  00078	0f 29 9d 90 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  0007f	0f 29 95 80 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  00086	0f 29 8d 70 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  0008d	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00094	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00099	8d b5 60 fe ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  0009f	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR $T5[ebp]
  000a5	f3 a5		 rep movsd
  000a7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000ac	8d b5 20 ff ff
	ff		 lea	 esi, DWORD PTR $T5[ebp]
  000b2	8d 7d 80	 lea	 edi, DWORD PTR _mRotation$[ebp]
  000b5	f3 a5		 rep movsd
; Line 968
  000b7	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _mRotation$[ebp]
  000bb	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _mRotation$[ebp+16]
  000bf	0f 28 55 a0	 movaps	 xmm2, XMMWORD PTR _mRotation$[ebp+32]
  000c3	0f 28 5d b0	 movaps	 xmm3, XMMWORD PTR _mRotation$[ebp+48]
  000c7	e8 00 00 00 00	 call	 ?XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@1@@Z ; DirectX::XMQuaternionRotationMatrix
  000cc	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  000d3	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  000da	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _quat$[ebp], xmm0
; Line 969
  000e1	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR _quat$[ebp]
  000e7	51		 push	 ecx
  000e8	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	81 c1 b4 03 00
	00		 add	 ecx, 948		; 000003b4H
  000f1	e8 00 00 00 00	 call	 ?SetQuatNow@CD3DArcBall@@QAEXABT__m128@@@Z ; CD3DArcBall::SetQuatNow
; Line 972
  000f6	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vEyePt$[ebp]
  000fa	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vLookatPt$[ebp]
  000fe	e8 00 00 00 00	 call	 ?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorSubtract
  00103	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0010a	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00111	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR _vEyeToPoint$[ebp], xmm0
; Line 973
  00118	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vEyeToPoint$[ebp]
  0011f	e8 00 00 00 00	 call	 ?XMVector3Length@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Length
  00124	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0012b	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00132	e8 00 00 00 00	 call	 ?XMVectorGetX@DirectX@@YQMT__m128@@@Z ; DirectX::XMVectorGetX
  00137	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _len$[ebp], xmm0
; Line 974
  0013f	51		 push	 ecx
  00140	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  00148	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014d	51		 push	 ecx
  0014e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00156	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015b	51		 push	 ecx
  0015c	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _len$[ebp]
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016c	e8 00 00 00 00	 call	 ?SetRadius@CModelViewerCamera@@QAEXMMM@Z ; CModelViewerCamera::SetRadius
; Line 977
  00171	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  00174	c6 82 b2 05 00
	00 01		 mov	 BYTE PTR [edx+1458], 1
; Line 978
  0017b	52		 push	 edx
  0017c	8b cd		 mov	 ecx, ebp
  0017e	50		 push	 eax
  0017f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@SetViewPar
  00185	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0018a	58		 pop	 eax
  0018b	5a		 pop	 edx
  0018c	5f		 pop	 edi
  0018d	5e		 pop	 esi
  0018e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00191	33 cd		 xor	 ecx, ebp
  00193	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00198	8b e5		 mov	 esp, ebp
  0019a	5d		 pop	 ebp
  0019b	8b e3		 mov	 esp, ebx
  0019d	5b		 pop	 ebx
  0019e	c3		 ret	 0
  0019f	90		 npad	 1
$LN6@SetViewPar:
  001a0	02 00 00 00	 DD	 2
  001a4	00 00 00 00	 DD	 $LN5@SetViewPar
$LN5@SetViewPar:
  001a8	80 ff ff ff	 DD	 -128			; ffffff80H
  001ac	40 00 00 00	 DD	 64			; 00000040H
  001b0	00 00 00 00	 DD	 $LN3@SetViewPar
  001b4	00 ff ff ff	 DD	 -256			; ffffff00H
  001b8	10 00 00 00	 DD	 16			; 00000010H
  001bc	00 00 00 00	 DD	 $LN4@SetViewPar
$LN4@SetViewPar:
  001c0	71		 DB	 113			; 00000071H
  001c1	75		 DB	 117			; 00000075H
  001c2	61		 DB	 97			; 00000061H
  001c3	74		 DB	 116			; 00000074H
  001c4	00		 DB	 0
$LN3@SetViewPar:
  001c5	6d		 DB	 109			; 0000006dH
  001c6	52		 DB	 82			; 00000052H
  001c7	6f		 DB	 111			; 0000006fH
  001c8	74		 DB	 116			; 00000074H
  001c9	61		 DB	 97			; 00000061H
  001ca	74		 DB	 116			; 00000074H
  001cb	69		 DB	 105			; 00000069H
  001cc	6f		 DB	 111			; 0000006fH
  001cd	6e		 DB	 110			; 0000006eH
  001ce	00		 DB	 0
?SetViewParams@CModelViewerCamera@@UAEXT__m128@@0@Z ENDP ; CModelViewerCamera::SetViewParams
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -224						; size = 64
$T2 = -160						; size = 64
_id$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Reset@CModelViewerCamera@@UAEXXZ PROC			; CModelViewerCamera::Reset
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 943
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 944
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?Reset@CBaseCamera@@UAEXXZ ; CBaseCamera::Reset
; Line 946
  00047	e8 00 00 00 00	 call	 ?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ ; DirectX::XMMatrixIdentity
  0004c	0f 29 9d 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00053	0f 29 95 40 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  0005a	0f 29 8d 30 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  00061	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00068	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0006d	8d b5 20 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00073	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR $T2[ebp]
  00079	f3 a5		 rep movsd
  0007b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00080	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR $T2[ebp]
  00086	8d 7d b0	 lea	 edi, DWORD PTR _id$[ebp]
  00089	f3 a5		 rep movsd
; Line 947
  0008b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	81 c1 64 05 00
	00		 add	 ecx, 1380		; 00000564H
  00094	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _id$[ebp]
  00098	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _id$[ebp+16]
  0009c	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _id$[ebp+32]
  000a0	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _id$[ebp+48]
  000a4	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 948
  000a9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ac	81 c1 24 05 00
	00		 add	 ecx, 1316		; 00000524H
  000b2	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _id$[ebp]
  000b6	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _id$[ebp+16]
  000ba	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _id$[ebp+32]
  000be	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _id$[ebp+48]
  000c2	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 949
  000c7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	81 c1 e4 04 00
	00		 add	 ecx, 1252		; 000004e4H
  000d0	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _id$[ebp]
  000d4	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _id$[ebp+16]
  000d8	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _id$[ebp+32]
  000dc	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _id$[ebp+48]
  000e0	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 950
  000e5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e8	81 c1 c4 05 00
	00		 add	 ecx, 1476		; 000005c4H
  000ee	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _id$[ebp]
  000f2	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _id$[ebp+16]
  000f6	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _id$[ebp+32]
  000fa	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _id$[ebp+48]
  000fe	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 952
  00103	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00106	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00109	8b 91 b8 05 00
	00		 mov	 edx, DWORD PTR [ecx+1464]
  0010f	89 90 b4 05 00
	00		 mov	 DWORD PTR [eax+1460], edx
; Line 953
  00115	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00118	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  0011e	e8 00 00 00 00	 call	 ?Reset@CD3DArcBall@@QAEXXZ ; CD3DArcBall::Reset
; Line 954
  00123	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00126	81 c1 b4 03 00
	00		 add	 ecx, 948		; 000003b4H
  0012c	e8 00 00 00 00	 call	 ?Reset@CD3DArcBall@@QAEXXZ ; CD3DArcBall::Reset
; Line 955
  00131	52		 push	 edx
  00132	8b cd		 mov	 ecx, ebp
  00134	50		 push	 eax
  00135	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Reset
  0013b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00140	58		 pop	 eax
  00141	5a		 pop	 edx
  00142	5f		 pop	 edi
  00143	5e		 pop	 esi
  00144	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00147	33 cd		 xor	 ecx, ebp
  00149	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	8b e3		 mov	 esp, ebx
  00153	5b		 pop	 ebx
  00154	c3		 ret	 0
  00155	8d 49 00	 npad	 3
$LN5@Reset:
  00158	01 00 00 00	 DD	 1
  0015c	00 00 00 00	 DD	 $LN4@Reset
$LN4@Reset:
  00160	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00164	40 00 00 00	 DD	 64			; 00000040H
  00168	00 00 00 00	 DD	 $LN3@Reset
$LN3@Reset:
  0016c	69		 DB	 105			; 00000069H
  0016d	64		 DB	 100			; 00000064H
  0016e	00		 DB	 0
?Reset@CModelViewerCamera@@UAEXXZ ENDP			; CModelViewerCamera::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rc$ = 8						; size = 4
?SetDragRect@CModelViewerCamera@@UAEXABUtagRECT@@@Z PROC ; CModelViewerCamera::SetDragRect
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 929
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 930
  0000e	8b 45 08	 mov	 eax, DWORD PTR _rc$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?SetDragRect@CBaseCamera@@UAEXABUtagRECT@@@Z ; CBaseCamera::SetDragRect
; Line 932
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _rc$[ebp]
  0001d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00020	52		 push	 edx
  00021	8b 45 08	 mov	 eax, DWORD PTR _rc$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	51		 push	 ecx
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  00030	e8 00 00 00 00	 call	 ?SetOffset@CD3DArcBall@@QAEXHH@Z ; CD3DArcBall::SetOffset
; Line 933
  00035	8b 55 08	 mov	 edx, DWORD PTR _rc$[ebp]
  00038	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003b	50		 push	 eax
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _rc$[ebp]
  0003f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00041	52		 push	 edx
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	81 c1 b4 03 00
	00		 add	 ecx, 948		; 000003b4H
  0004b	e8 00 00 00 00	 call	 ?SetOffset@CD3DArcBall@@QAEXHH@Z ; CD3DArcBall::SetOffset
; Line 935
  00050	51		 push	 ecx
  00051	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  00059	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005e	8b 45 08	 mov	 eax, DWORD PTR _rc$[ebp]
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _rc$[ebp]
  00064	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00067	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  0006a	52		 push	 edx
  0006b	8b 45 08	 mov	 eax, DWORD PTR _rc$[ebp]
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _rc$[ebp]
  00071	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00074	2b 11		 sub	 edx, DWORD PTR [ecx]
  00076	52		 push	 edx
  00077	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?SetWindow@CModelViewerCamera@@QAEXHHM@Z ; CModelViewerCamera::SetWindow
; Line 936
  0007f	83 c4 04	 add	 esp, 4
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?SetDragRect@CModelViewerCamera@@UAEXABUtagRECT@@@Z ENDP ; CModelViewerCamera::SetDragRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv887 = -3184						; size = 16
tv141 = -3153						; size = 1
$T1 = -3152						; size = 64
$T2 = -3088						; size = 64
$T3 = -3024						; size = 64
$T4 = -2960						; size = 64
$T5 = -2896						; size = 64
$T6 = -2832						; size = 64
$T7 = -2768						; size = 64
$T8 = -2704						; size = 64
$T9 = -2640						; size = 64
_mWorld$ = -2560					; size = 64
$T10 = -2480						; size = 64
_mTrans$ = -2400					; size = 64
$T11 = -2320						; size = 16
$T12 = -2304						; size = 16
$T13 = -2288						; size = 16
$T14 = -2272						; size = 16
$T15 = -2256						; size = 16
$T16 = -2240						; size = 16
$T17 = -2224						; size = 16
$T18 = -2208						; size = 16
$T19 = -2192						; size = 16
_zBasis$ = -2176					; size = 16
$T20 = -2160						; size = 16
$T21 = -2144						; size = 16
_yBasis$ = -2128					; size = 16
$T22 = -2112						; size = 16
_xBasis$ = -2096					; size = 16
_mCameraRotDelta$23 = -2064				; size = 64
$T24 = -1984						; size = 64
_mCameraLastRotInv$25 = -1904				; size = 64
$T26 = -1824						; size = 64
_mCameraRotLast$27 = -1744				; size = 64
$T28 = -1664						; size = 64
$T29 = -1600						; size = 64
$T30 = -1536						; size = 64
$T31 = -1472						; size = 64
_mModelRot$ = -1392					; size = 64
_mModelRot0$ = -1312					; size = 64
$T32 = -1232						; size = 64
_mModelLastRotInv$ = -1152				; size = 64
$T33 = -1072						; size = 64
_mModelLastRot$ = -992					; size = 64
$T34 = -912						; size = 16
$T35 = -896						; size = 16
$T36 = -880						; size = 16
$T37 = -864						; size = 64
_mInvView$ = -784					; size = 64
$T38 = -704						; size = 64
_mView$ = -624						; size = 64
$T39 = -544						; size = 16
$T40 = -528						; size = 16
_vEye$ = -512						; size = 16
$T41 = -496						; size = 16
$T42 = -480						; size = 16
_vLookAt$ = -448					; size = 16
$T43 = -416						; size = 16
_vPosDeltaWorld$ = -400					; size = 16
$T44 = -384						; size = 16
$T45 = -368						; size = 16
_vWorldAhead$ = -352					; size = 16
$T46 = -336						; size = 16
$T47 = -320						; size = 16
_vWorldUp$ = -304					; size = 16
$T48 = -288						; size = 64
$T49 = -224						; size = 64
_mCameraRot$ = -144					; size = 64
$T50 = -64						; size = 16
$T51 = -48						; size = 16
_vPosDelta$ = -32					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_fElapsedTime$ = 8					; size = 4
?FrameMove@CModelViewerCamera@@UAEXM@Z PROC		; CModelViewerCamera::FrameMove
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 824
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 78 0c 00
	00		 sub	 esp, 3192		; 00000c78H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 88 f3 ff
	ff		 lea	 edi, DWORD PTR [ebp-3192]
  00025	b9 1e 03 00 00	 mov	 ecx, 798		; 0000031eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 825
  0003f	b8 01 00 00 00	 mov	 eax, 1
  00044	6b c8 06	 imul	 ecx, eax, 6
  00047	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	0f b6 84 0a b4
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+436]
  00052	50		 push	 eax
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?IsKeyDown@CBaseCamera@@IBE_NE@Z ; CBaseCamera::IsKeyDown
  0005b	0f b6 c8	 movzx	 ecx, al
  0005e	85 c9		 test	 ecx, ecx
  00060	74 16		 je	 SHORT $LN5@FrameMove
; Line 826
  00062	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 02		 mov	 eax, DWORD PTR [edx]
  00067	8b f4		 mov	 esi, esp
  00069	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0006f	ff d2		 call	 edx
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@FrameMove:
; Line 830
  00078	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	0f b6 88 b2 05
	00 00		 movzx	 ecx, BYTE PTR [eax+1458]
  00082	85 c9		 test	 ecx, ecx
  00084	75 11		 jne	 SHORT $LN4@FrameMove
  00086	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00089	83 ba b0 01 00
	00 00		 cmp	 DWORD PTR [edx+432], 0
  00090	75 05		 jne	 SHORT $LN4@FrameMove
; Line 831
  00092	e9 9e 0a 00 00	 jmp	 $LN6@FrameMove
$LN4@FrameMove:
; Line 833
  00097	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	c6 80 b2 05 00
	00 00		 mov	 BYTE PTR [eax+1458], 0
; Line 840
  000a1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	83 b9 d0 01 00
	00 00		 cmp	 DWORD PTR [ecx+464], 0
  000ab	74 09		 je	 SHORT $LN8@FrameMove
  000ad	c6 85 af f3 ff
	ff 01		 mov	 BYTE PTR tv141[ebp], 1
  000b4	eb 07		 jmp	 SHORT $LN9@FrameMove
$LN8@FrameMove:
  000b6	c6 85 af f3 ff
	ff 00		 mov	 BYTE PTR tv141[ebp], 0
$LN9@FrameMove:
  000bd	6a 01		 push	 1
  000bf	0f b6 95 af f3
	ff ff		 movzx	 edx, BYTE PTR tv141[ebp]
  000c6	52		 push	 edx
  000c7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	0f b6 88 71 02
	00 00		 movzx	 ecx, BYTE PTR [eax+625]
  000d1	51		 push	 ecx
  000d2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	e8 00 00 00 00	 call	 ?GetInput@CBaseCamera@@IAEX_N00@Z ; CBaseCamera::GetInput
; Line 843
  000da	51		 push	 ecx
  000db	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebx]
  000e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e8	e8 00 00 00 00	 call	 ?UpdateVelocity@CBaseCamera@@IAEXM@Z ; CBaseCamera::UpdateVelocity
; Line 846
  000ed	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f0	81 c1 2c 02 00
	00		 add	 ecx, 556		; 0000022cH
  000f6	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  000fb	0f 29 45 d0	 movaps	 XMMWORD PTR $T51[ebp], xmm0
  000ff	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T51[ebp]
  00103	f3 0f 10 4b 08	 movss	 xmm1, DWORD PTR _fElapsedTime$[ebx]
  00108	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  0010d	0f 29 45 c0	 movaps	 XMMWORD PTR $T50[ebp], xmm0
  00111	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T50[ebp]
  00115	0f 29 45 e0	 movaps	 XMMWORD PTR _vPosDelta$[ebp], xmm0
; Line 849
  00119	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0011c	83 ba d4 01 00
	00 00		 cmp	 DWORD PTR [edx+468], 0
  00123	74 4c		 je	 SHORT $LN3@FrameMove
  00125	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00128	83 b8 a8 05 00
	00 08		 cmp	 DWORD PTR [eax+1448], 8
  0012f	75 40		 jne	 SHORT $LN3@FrameMove
; Line 850
  00131	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	f3 0f 2a 81 d4
	01 00 00	 cvtsi2ss xmm0, DWORD PTR [ecx+468]
  0013c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0013f	f3 0f 59 82 b4
	05 00 00	 mulss	 xmm0, DWORD PTR [edx+1460]
  00147	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3dcccccd
  0014f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42f00000
  00157	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0015a	f3 0f 10 88 b4
	05 00 00	 movss	 xmm1, DWORD PTR [eax+1460]
  00162	f3 0f 5c c8	 subss	 xmm1, xmm0
  00166	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00169	f3 0f 11 89 b4
	05 00 00	 movss	 DWORD PTR [ecx+1460], xmm1
$LN3@FrameMove:
; Line 851
  00171	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00174	81 c2 b4 05 00
	00		 add	 edx, 1460		; 000005b4H
  0017a	52		 push	 edx
  0017b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0017e	05 c0 05 00 00	 add	 eax, 1472		; 000005c0H
  00183	50		 push	 eax
  00184	e8 00 00 00 00	 call	 ??$min@M@std@@YAABMABM0@Z ; std::min<float>
  00189	83 c4 08	 add	 esp, 8
  0018c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0018f	8b 10		 mov	 edx, DWORD PTR [eax]
  00191	89 91 b4 05 00
	00		 mov	 DWORD PTR [ecx+1460], edx
; Line 852
  00197	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0019a	05 b4 05 00 00	 add	 eax, 1460		; 000005b4H
  0019f	50		 push	 eax
  001a0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a3	81 c1 bc 05 00
	00		 add	 ecx, 1468		; 000005bcH
  001a9	51		 push	 ecx
  001aa	e8 00 00 00 00	 call	 ??$max@M@std@@YAABMABM0@Z ; std::max<float>
  001af	83 c4 08	 add	 esp, 8
  001b2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001b5	8b 00		 mov	 eax, DWORD PTR [eax]
  001b7	89 82 b4 05 00
	00		 mov	 DWORD PTR [edx+1460], eax
; Line 853
  001bd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c0	c7 81 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+468], 0
; Line 856
  001ca	8d 95 20 ff ff
	ff		 lea	 edx, DWORD PTR $T49[ebp]
  001d0	52		 push	 edx
  001d1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d4	81 c1 b4 03 00
	00		 add	 ecx, 948		; 000003b4H
  001da	e8 00 00 00 00	 call	 ?GetRotationMatrix@CD3DArcBall@@QBE?AUXMMATRIX@DirectX@@XZ ; CD3DArcBall::GetRotationMatrix
  001df	33 c9		 xor	 ecx, ecx
  001e1	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  001e4	0f 28 48 10	 movaps	 xmm1, XMMWORD PTR [eax+16]
  001e8	0f 28 50 20	 movaps	 xmm2, XMMWORD PTR [eax+32]
  001ec	0f 28 58 30	 movaps	 xmm3, XMMWORD PTR [eax+48]
  001f0	e8 00 00 00 00	 call	 ?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
  001f5	0f 29 9d e0 f5
	ff ff		 movaps	 XMMWORD PTR $T9[ebp+48], xmm3
  001fc	0f 29 95 d0 f5
	ff ff		 movaps	 XMMWORD PTR $T9[ebp+32], xmm2
  00203	0f 29 8d c0 f5
	ff ff		 movaps	 XMMWORD PTR $T9[ebp+16], xmm1
  0020a	0f 29 85 b0 f5
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00211	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00216	8d b5 b0 f5 ff
	ff		 lea	 esi, DWORD PTR $T9[ebp]
  0021c	8d bd e0 fe ff
	ff		 lea	 edi, DWORD PTR $T48[ebp]
  00222	f3 a5		 rep movsd
  00224	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00229	8d b5 e0 fe ff
	ff		 lea	 esi, DWORD PTR $T48[ebp]
  0022f	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR _mCameraRot$[ebp]
  00235	f3 a5		 rep movsd
; Line 859
  00237	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR $T47[ebp]
  0023d	50		 push	 eax
  0023e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR1
  00243	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00248	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0024b	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mCameraRot$[ebp]
  00252	0f 28 55 80	 movaps	 xmm2, XMMWORD PTR _mCameraRot$[ebp+16]
  00256	0f 28 5d 90	 movaps	 xmm3, XMMWORD PTR _mCameraRot$[ebp+32]
  0025a	0f 28 65 a0	 movaps	 xmm4, XMMWORD PTR _mCameraRot$[ebp+48]
  0025e	e8 00 00 00 00	 call	 ?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformCoord
  00263	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T46[ebp], xmm0
  0026a	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T46[ebp]
  00271	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR _vWorldUp$[ebp], xmm0
; Line 860
  00278	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR $T45[ebp]
  0027e	51		 push	 ecx
  0027f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR2
  00284	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00289	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0028c	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mCameraRot$[ebp]
  00293	0f 28 55 80	 movaps	 xmm2, XMMWORD PTR _mCameraRot$[ebp+16]
  00297	0f 28 5d 90	 movaps	 xmm3, XMMWORD PTR _mCameraRot$[ebp+32]
  0029b	0f 28 65 a0	 movaps	 xmm4, XMMWORD PTR _mCameraRot$[ebp+48]
  0029f	e8 00 00 00 00	 call	 ?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformCoord
  002a4	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T44[ebp], xmm0
  002ab	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T44[ebp]
  002b2	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _vWorldAhead$[ebp], xmm0
; Line 863
  002b9	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vPosDelta$[ebp]
  002bd	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mCameraRot$[ebp]
  002c4	0f 28 55 80	 movaps	 xmm2, XMMWORD PTR _mCameraRot$[ebp+16]
  002c8	0f 28 5d 90	 movaps	 xmm3, XMMWORD PTR _mCameraRot$[ebp+32]
  002cc	0f 28 65 a0	 movaps	 xmm4, XMMWORD PTR _mCameraRot$[ebp+48]
  002d0	e8 00 00 00 00	 call	 ?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformCoord
  002d5	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T43[ebp], xmm0
  002dc	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T43[ebp]
  002e3	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR _vPosDeltaWorld$[ebp], xmm0
; Line 866
  002ea	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002ed	81 c1 08 02 00
	00		 add	 ecx, 520		; 00000208H
  002f3	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  002f8	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T42[ebp], xmm0
  002ff	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T42[ebp]
  00306	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _vLookAt$[ebp], xmm0
; Line 867
  0030d	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vPosDeltaWorld$[ebp]
  00314	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR _vLookAt$[ebp]
  0031a	e8 00 00 00 00	 call	 ??YDirectX@@YQAAT__m128@@AAT1@T1@@Z ; DirectX::operator+=
; Line 868
  0031f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00322	0f b6 82 73 02
	00 00		 movzx	 eax, BYTE PTR [edx+627]
  00329	85 c0		 test	 eax, eax
  0032b	74 20		 je	 SHORT $LN2@FrameMove
; Line 869
  0032d	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vLookAt$[ebp]
  00334	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR $T41[ebp]
  0033a	51		 push	 ecx
  0033b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0033e	e8 00 00 00 00	 call	 ?ConstrainToBoundary@CBaseCamera@@IAE?AT__m128@@T2@@Z ; CBaseCamera::ConstrainToBoundary
  00343	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00346	0f 11 85 40 fe
	ff ff		 movups	 XMMWORD PTR _vLookAt$[ebp], xmm0
$LN2@FrameMove:
; Line 870
  0034d	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vLookAt$[ebp]
  00354	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00357	81 c1 08 02 00
	00		 add	 ecx, 520		; 00000208H
  0035d	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 873
  00362	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vWorldAhead$[ebp]
  00369	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0036c	f3 0f 10 8a b4
	05 00 00	 movss	 xmm1, DWORD PTR [edx+1460]
  00374	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  00379	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T40[ebp], xmm0
  00380	0f 28 8d f0 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR $T40[ebp]
  00387	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vLookAt$[ebp]
  0038e	e8 00 00 00 00	 call	 ??GDirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::operator-
  00393	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T39[ebp], xmm0
  0039a	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T39[ebp]
  003a1	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _vEye$[ebp], xmm0
; Line 874
  003a8	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vEye$[ebp]
  003af	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003b2	81 c1 fc 01 00
	00		 add	 ecx, 508		; 000001fcH
  003b8	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 877
  003bd	0f 28 95 d0 fe
	ff ff		 movaps	 xmm2, XMMWORD PTR _vWorldUp$[ebp]
  003c4	0f 28 8d 40 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _vLookAt$[ebp]
  003cb	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vEye$[ebp]
  003d2	e8 00 00 00 00	 call	 ?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ; DirectX::XMMatrixLookAtLH
  003d7	0f 29 9d a0 f5
	ff ff		 movaps	 XMMWORD PTR $T8[ebp+48], xmm3
  003de	0f 29 95 90 f5
	ff ff		 movaps	 XMMWORD PTR $T8[ebp+32], xmm2
  003e5	0f 29 8d 80 f5
	ff ff		 movaps	 XMMWORD PTR $T8[ebp+16], xmm1
  003ec	0f 29 85 70 f5
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  003f3	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003f8	8d b5 70 f5 ff
	ff		 lea	 esi, DWORD PTR $T8[ebp]
  003fe	8d bd 40 fd ff
	ff		 lea	 edi, DWORD PTR $T38[ebp]
  00404	f3 a5		 rep movsd
  00406	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0040b	8d b5 40 fd ff
	ff		 lea	 esi, DWORD PTR $T38[ebp]
  00411	8d bd 90 fd ff
	ff		 lea	 edi, DWORD PTR _mView$[ebp]
  00417	f3 a5		 rep movsd
; Line 878
  00419	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0041c	83 c1 08	 add	 ecx, 8
  0041f	0f 28 85 90 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _mView$[ebp]
  00426	0f 28 8d a0 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _mView$[ebp+16]
  0042d	0f 28 95 b0 fd
	ff ff		 movaps	 xmm2, XMMWORD PTR _mView$[ebp+32]
  00434	0f 28 9d c0 fd
	ff ff		 movaps	 xmm3, XMMWORD PTR _mView$[ebp+48]
  0043b	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 880
  00440	33 c9		 xor	 ecx, ecx
  00442	0f 28 85 90 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _mView$[ebp]
  00449	0f 28 8d a0 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _mView$[ebp+16]
  00450	0f 28 95 b0 fd
	ff ff		 movaps	 xmm2, XMMWORD PTR _mView$[ebp+32]
  00457	0f 28 9d c0 fd
	ff ff		 movaps	 xmm3, XMMWORD PTR _mView$[ebp+48]
  0045e	e8 00 00 00 00	 call	 ?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
  00463	0f 29 9d 60 f5
	ff ff		 movaps	 XMMWORD PTR $T7[ebp+48], xmm3
  0046a	0f 29 95 50 f5
	ff ff		 movaps	 XMMWORD PTR $T7[ebp+32], xmm2
  00471	0f 29 8d 40 f5
	ff ff		 movaps	 XMMWORD PTR $T7[ebp+16], xmm1
  00478	0f 29 85 30 f5
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0047f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00484	8d b5 30 f5 ff
	ff		 lea	 esi, DWORD PTR $T7[ebp]
  0048a	8d bd a0 fc ff
	ff		 lea	 edi, DWORD PTR $T37[ebp]
  00490	f3 a5		 rep movsd
  00492	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00497	8d b5 a0 fc ff
	ff		 lea	 esi, DWORD PTR $T37[ebp]
  0049d	8d bd f0 fc ff
	ff		 lea	 edi, DWORD PTR _mInvView$[ebp]
  004a3	f3 a5		 rep movsd
; Line 881
  004a5	8d 85 90 fc ff
	ff		 lea	 eax, DWORD PTR $T36[ebp]
  004ab	50		 push	 eax
  004ac	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
  004b1	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  004b6	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  004b9	8d 8d 80 fc ff
	ff		 lea	 ecx, DWORD PTR $T35[ebp]
  004bf	51		 push	 ecx
  004c0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
  004c5	0f 29 85 90 f3
	ff ff		 movaps	 XMMWORD PTR tv887[ebp], xmm0
  004cc	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  004d1	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  004d4	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  004d9	6b c2 03	 imul	 eax, edx, 3
  004dc	0f 10 84 05 f0
	fc ff ff	 movups	 xmm0, XMMWORD PTR _mInvView$[ebp+eax]
  004e4	0f 28 95 90 f3
	ff ff		 movaps	 xmm2, XMMWORD PTR tv887[ebp]
  004eb	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  004f0	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR $T34[ebp], xmm0
  004f7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  004fc	6b d1 03	 imul	 edx, ecx, 3
  004ff	0f 10 85 70 fc
	ff ff		 movups	 xmm0, XMMWORD PTR $T34[ebp]
  00506	0f 11 84 15 f0
	fc ff ff	 movups	 XMMWORD PTR _mInvView$[ebp+edx], xmm0
; Line 883
  0050e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00511	81 c1 e4 04 00
	00		 add	 ecx, 1252		; 000004e4H
  00517	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  0051c	0f 29 9d 20 f5
	ff ff		 movaps	 XMMWORD PTR $T6[ebp+48], xmm3
  00523	0f 29 95 10 f5
	ff ff		 movaps	 XMMWORD PTR $T6[ebp+32], xmm2
  0052a	0f 29 8d 00 f5
	ff ff		 movaps	 XMMWORD PTR $T6[ebp+16], xmm1
  00531	0f 29 85 f0 f4
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00538	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0053d	8d b5 f0 f4 ff
	ff		 lea	 esi, DWORD PTR $T6[ebp]
  00543	8d bd d0 fb ff
	ff		 lea	 edi, DWORD PTR $T33[ebp]
  00549	f3 a5		 rep movsd
  0054b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00550	8d b5 d0 fb ff
	ff		 lea	 esi, DWORD PTR $T33[ebp]
  00556	8d bd 20 fc ff
	ff		 lea	 edi, DWORD PTR _mModelLastRot$[ebp]
  0055c	f3 a5		 rep movsd
; Line 884
  0055e	33 c9		 xor	 ecx, ecx
  00560	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _mModelLastRot$[ebp]
  00567	0f 28 8d 30 fc
	ff ff		 movaps	 xmm1, XMMWORD PTR _mModelLastRot$[ebp+16]
  0056e	0f 28 95 40 fc
	ff ff		 movaps	 xmm2, XMMWORD PTR _mModelLastRot$[ebp+32]
  00575	0f 28 9d 50 fc
	ff ff		 movaps	 xmm3, XMMWORD PTR _mModelLastRot$[ebp+48]
  0057c	e8 00 00 00 00	 call	 ?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
  00581	0f 29 9d e0 f4
	ff ff		 movaps	 XMMWORD PTR $T5[ebp+48], xmm3
  00588	0f 29 95 d0 f4
	ff ff		 movaps	 XMMWORD PTR $T5[ebp+32], xmm2
  0058f	0f 29 8d c0 f4
	ff ff		 movaps	 XMMWORD PTR $T5[ebp+16], xmm1
  00596	0f 29 85 b0 f4
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0059d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  005a2	8d b5 b0 f4 ff
	ff		 lea	 esi, DWORD PTR $T5[ebp]
  005a8	8d bd 30 fb ff
	ff		 lea	 edi, DWORD PTR $T32[ebp]
  005ae	f3 a5		 rep movsd
  005b0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  005b5	8d b5 30 fb ff
	ff		 lea	 esi, DWORD PTR $T32[ebp]
  005bb	8d bd 80 fb ff
	ff		 lea	 edi, DWORD PTR _mModelLastRotInv$[ebp]
  005c1	f3 a5		 rep movsd
; Line 888
  005c3	8d 85 e0 fa ff
	ff		 lea	 eax, DWORD PTR _mModelRot0$[ebp]
  005c9	50		 push	 eax
  005ca	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005cd	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  005d3	e8 00 00 00 00	 call	 ?GetRotationMatrix@CD3DArcBall@@QBE?AUXMMATRIX@DirectX@@XZ ; CD3DArcBall::GetRotationMatrix
; Line 889
  005d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005db	81 c1 24 05 00
	00		 add	 ecx, 1316		; 00000524H
  005e1	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  005e6	0f 29 9d a0 f4
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+48], xmm3
  005ed	0f 29 95 90 f4
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+32], xmm2
  005f4	0f 29 8d 80 f4
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+16], xmm1
  005fb	0f 29 85 70 f4
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00602	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00607	8d b5 70 f4 ff
	ff		 lea	 esi, DWORD PTR $T4[ebp]
  0060d	8d bd 40 fa ff
	ff		 lea	 edi, DWORD PTR $T31[ebp]
  00613	f3 a5		 rep movsd
  00615	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0061a	8d b5 40 fa ff
	ff		 lea	 esi, DWORD PTR $T31[ebp]
  00620	8d bd 90 fa ff
	ff		 lea	 edi, DWORD PTR _mModelRot$[ebp]
  00626	f3 a5		 rep movsd
; Line 890
  00628	8d 95 00 fa ff
	ff		 lea	 edx, DWORD PTR $T30[ebp]
  0062e	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR _mView$[ebp]
  00634	0f 28 85 80 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR _mModelLastRotInv$[ebp]
  0063b	0f 28 8d 90 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR _mModelLastRotInv$[ebp+16]
  00642	0f 28 95 a0 fb
	ff ff		 movaps	 xmm2, XMMWORD PTR _mModelLastRotInv$[ebp+32]
  00649	0f 28 9d b0 fb
	ff ff		 movaps	 xmm3, XMMWORD PTR _mModelLastRotInv$[ebp+48]
  00650	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
  00655	8d 95 c0 f9 ff
	ff		 lea	 edx, DWORD PTR $T29[ebp]
  0065b	8b c8		 mov	 ecx, eax
  0065d	0f 28 85 e0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR _mModelRot0$[ebp]
  00664	0f 28 8d f0 fa
	ff ff		 movaps	 xmm1, XMMWORD PTR _mModelRot0$[ebp+16]
  0066b	0f 28 95 00 fb
	ff ff		 movaps	 xmm2, XMMWORD PTR _mModelRot0$[ebp+32]
  00672	0f 28 9d 10 fb
	ff ff		 movaps	 xmm3, XMMWORD PTR _mModelRot0$[ebp+48]
  00679	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
  0067e	8d 95 80 f9 ff
	ff		 lea	 edx, DWORD PTR $T28[ebp]
  00684	8b c8		 mov	 ecx, eax
  00686	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _mInvView$[ebp]
  0068d	0f 28 8d 00 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _mInvView$[ebp+16]
  00694	0f 28 95 10 fd
	ff ff		 movaps	 xmm2, XMMWORD PTR _mInvView$[ebp+32]
  0069b	0f 28 9d 20 fd
	ff ff		 movaps	 xmm3, XMMWORD PTR _mInvView$[ebp+48]
  006a2	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
  006a7	8d 8d 90 fa ff
	ff		 lea	 ecx, DWORD PTR _mModelRot$[ebp]
  006ad	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  006b0	0f 28 48 10	 movaps	 xmm1, XMMWORD PTR [eax+16]
  006b4	0f 28 50 20	 movaps	 xmm2, XMMWORD PTR [eax+32]
  006b8	0f 28 58 30	 movaps	 xmm3, XMMWORD PTR [eax+48]
  006bc	e8 00 00 00 00	 call	 ??XXMMATRIX@DirectX@@QAQAAU01@U01@@Z ; DirectX::XMMATRIX::operator*=
; Line 892
  006c1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  006c4	81 c1 b4 03 00
	00		 add	 ecx, 948		; 000003b4H
  006ca	e8 00 00 00 00	 call	 ?IsBeingDragged@CD3DArcBall@@QBE_NXZ ; CD3DArcBall::IsBeingDragged
  006cf	0f b6 c8	 movzx	 ecx, al
  006d2	85 c9		 test	 ecx, ecx
  006d4	0f 84 39 01 00
	00		 je	 $LN1@FrameMove
  006da	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  006dd	0f b6 82 b0 05
	00 00		 movzx	 eax, BYTE PTR [edx+1456]
  006e4	85 c0		 test	 eax, eax
  006e6	0f 84 27 01 00
	00		 je	 $LN1@FrameMove
  006ec	b9 01 00 00 00	 mov	 ecx, 1
  006f1	6b d1 07	 imul	 edx, ecx, 7
  006f4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  006f7	0f b6 8c 10 b4
	01 00 00	 movzx	 ecx, BYTE PTR [eax+edx+436]
  006ff	51		 push	 ecx
  00700	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00703	e8 00 00 00 00	 call	 ?IsKeyDown@CBaseCamera@@IBE_NE@Z ; CBaseCamera::IsKeyDown
  00708	0f b6 d0	 movzx	 edx, al
  0070b	85 d2		 test	 edx, edx
  0070d	0f 85 00 01 00
	00		 jne	 $LN1@FrameMove
; Line 895
  00713	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00716	81 c1 c4 05 00
	00		 add	 ecx, 1476		; 000005c4H
  0071c	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  00721	0f 29 9d 60 f4
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+48], xmm3
  00728	0f 29 95 50 f4
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+32], xmm2
  0072f	0f 29 8d 40 f4
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+16], xmm1
  00736	0f 29 85 30 f4
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0073d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00742	8d b5 30 f4 ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  00748	8d bd e0 f8 ff
	ff		 lea	 edi, DWORD PTR $T26[ebp]
  0074e	f3 a5		 rep movsd
  00750	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00755	8d b5 e0 f8 ff
	ff		 lea	 esi, DWORD PTR $T26[ebp]
  0075b	8d bd 30 f9 ff
	ff		 lea	 edi, DWORD PTR _mCameraRotLast$27[ebp]
  00761	f3 a5		 rep movsd
; Line 896
  00763	33 c9		 xor	 ecx, ecx
  00765	0f 28 85 30 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR _mCameraRotLast$27[ebp]
  0076c	0f 28 8d 40 f9
	ff ff		 movaps	 xmm1, XMMWORD PTR _mCameraRotLast$27[ebp+16]
  00773	0f 28 95 50 f9
	ff ff		 movaps	 xmm2, XMMWORD PTR _mCameraRotLast$27[ebp+32]
  0077a	0f 28 9d 60 f9
	ff ff		 movaps	 xmm3, XMMWORD PTR _mCameraRotLast$27[ebp+48]
  00781	e8 00 00 00 00	 call	 ?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
  00786	0f 29 9d 20 f4
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+48], xmm3
  0078d	0f 29 95 10 f4
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+32], xmm2
  00794	0f 29 8d 00 f4
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+16], xmm1
  0079b	0f 29 85 f0 f3
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  007a2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  007a7	8d b5 f0 f3 ff
	ff		 lea	 esi, DWORD PTR $T2[ebp]
  007ad	8d bd 40 f8 ff
	ff		 lea	 edi, DWORD PTR $T24[ebp]
  007b3	f3 a5		 rep movsd
  007b5	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  007ba	8d b5 40 f8 ff
	ff		 lea	 esi, DWORD PTR $T24[ebp]
  007c0	8d bd 90 f8 ff
	ff		 lea	 edi, DWORD PTR _mCameraLastRotInv$25[ebp]
  007c6	f3 a5		 rep movsd
; Line 897
  007c8	8d 95 f0 f7 ff
	ff		 lea	 edx, DWORD PTR _mCameraRotDelta$23[ebp]
  007ce	8d 8d 90 f8 ff
	ff		 lea	 ecx, DWORD PTR _mCameraLastRotInv$25[ebp]
  007d4	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _mCameraRot$[ebp]
  007db	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _mCameraRot$[ebp+16]
  007df	0f 28 55 90	 movaps	 xmm2, XMMWORD PTR _mCameraRot$[ebp+32]
  007e3	0f 28 5d a0	 movaps	 xmm3, XMMWORD PTR _mCameraRot$[ebp+48]
  007e7	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
; Line 898
  007ec	8d 8d 90 fa ff
	ff		 lea	 ecx, DWORD PTR _mModelRot$[ebp]
  007f2	0f 28 85 f0 f7
	ff ff		 movaps	 xmm0, XMMWORD PTR _mCameraRotDelta$23[ebp]
  007f9	0f 28 8d 00 f8
	ff ff		 movaps	 xmm1, XMMWORD PTR _mCameraRotDelta$23[ebp+16]
  00800	0f 28 95 10 f8
	ff ff		 movaps	 xmm2, XMMWORD PTR _mCameraRotDelta$23[ebp+32]
  00807	0f 28 9d 20 f8
	ff ff		 movaps	 xmm3, XMMWORD PTR _mCameraRotDelta$23[ebp+48]
  0080e	e8 00 00 00 00	 call	 ??XXMMATRIX@DirectX@@QAQAAU01@U01@@Z ; DirectX::XMMATRIX::operator*=
$LN1@FrameMove:
; Line 901
  00813	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00816	81 c1 e4 04 00
	00		 add	 ecx, 1252		; 000004e4H
  0081c	0f 28 85 e0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR _mModelRot0$[ebp]
  00823	0f 28 8d f0 fa
	ff ff		 movaps	 xmm1, XMMWORD PTR _mModelRot0$[ebp+16]
  0082a	0f 28 95 00 fb
	ff ff		 movaps	 xmm2, XMMWORD PTR _mModelRot0$[ebp+32]
  00831	0f 28 9d 10 fb
	ff ff		 movaps	 xmm3, XMMWORD PTR _mModelRot0$[ebp+48]
  00838	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 902
  0083d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00840	81 c1 c4 05 00
	00		 add	 ecx, 1476		; 000005c4H
  00846	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _mCameraRot$[ebp]
  0084d	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _mCameraRot$[ebp+16]
  00851	0f 28 55 90	 movaps	 xmm2, XMMWORD PTR _mCameraRot$[ebp+32]
  00855	0f 28 5d a0	 movaps	 xmm3, XMMWORD PTR _mCameraRot$[ebp+48]
  00859	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 906
  0085e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00863	6b c8 00	 imul	 ecx, eax, 0
  00866	0f 10 84 0d 90
	fa ff ff	 movups	 xmm0, XMMWORD PTR _mModelRot$[ebp+ecx]
  0086e	e8 00 00 00 00	 call	 ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
  00873	0f 29 85 c0 f7
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  0087a	0f 28 85 c0 f7
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  00881	0f 29 85 d0 f7
	ff ff		 movaps	 XMMWORD PTR _xBasis$[ebp], xmm0
; Line 907
  00888	0f 28 8d d0 f7
	ff ff		 movaps	 xmm1, XMMWORD PTR _xBasis$[ebp]
  0088f	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00894	d1 e2		 shl	 edx, 1
  00896	0f 10 84 15 90
	fa ff ff	 movups	 xmm0, XMMWORD PTR _mModelRot$[ebp+edx]
  0089e	e8 00 00 00 00	 call	 ?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Cross
  008a3	0f 29 85 a0 f7
	ff ff		 movaps	 XMMWORD PTR $T21[ebp], xmm0
  008aa	0f 28 85 a0 f7
	ff ff		 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  008b1	0f 29 85 b0 f7
	ff ff		 movaps	 XMMWORD PTR _yBasis$[ebp], xmm0
; Line 908
  008b8	0f 28 85 b0 f7
	ff ff		 movaps	 xmm0, XMMWORD PTR _yBasis$[ebp]
  008bf	e8 00 00 00 00	 call	 ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
  008c4	0f 29 85 90 f7
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  008cb	0f 28 85 90 f7
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  008d2	0f 29 85 b0 f7
	ff ff		 movaps	 XMMWORD PTR _yBasis$[ebp], xmm0
; Line 909
  008d9	0f 28 8d b0 f7
	ff ff		 movaps	 xmm1, XMMWORD PTR _yBasis$[ebp]
  008e0	0f 28 85 d0 f7
	ff ff		 movaps	 xmm0, XMMWORD PTR _xBasis$[ebp]
  008e7	e8 00 00 00 00	 call	 ?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Cross
  008ec	0f 29 85 70 f7
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  008f3	0f 28 85 70 f7
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  008fa	0f 29 85 80 f7
	ff ff		 movaps	 XMMWORD PTR _zBasis$[ebp], xmm0
; Line 911
  00901	8d 85 60 f7 ff
	ff		 lea	 eax, DWORD PTR $T18[ebp]
  00907	50		 push	 eax
  00908	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
  0090d	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  00912	0f 10 10	 movups	 xmm2, XMMWORD PTR [eax]
  00915	0f 28 8d d0 f7
	ff ff		 movaps	 xmm1, XMMWORD PTR _xBasis$[ebp]
  0091c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00921	6b d1 00	 imul	 edx, ecx, 0
  00924	0f 10 84 15 90
	fa ff ff	 movups	 xmm0, XMMWORD PTR _mModelRot$[ebp+edx]
  0092c	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  00931	0f 29 85 50 f7
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00938	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0093d	6b c8 00	 imul	 ecx, eax, 0
  00940	0f 10 85 50 f7
	ff ff		 movups	 xmm0, XMMWORD PTR $T17[ebp]
  00947	0f 11 84 0d 90
	fa ff ff	 movups	 XMMWORD PTR _mModelRot$[ebp+ecx], xmm0
; Line 912
  0094f	8d 95 40 f7 ff
	ff		 lea	 edx, DWORD PTR $T16[ebp]
  00955	52		 push	 edx
  00956	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
  0095b	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  00960	0f 10 10	 movups	 xmm2, XMMWORD PTR [eax]
  00963	0f 28 8d b0 f7
	ff ff		 movaps	 xmm1, XMMWORD PTR _yBasis$[ebp]
  0096a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0096f	c1 e0 00	 shl	 eax, 0
  00972	0f 10 84 05 90
	fa ff ff	 movups	 xmm0, XMMWORD PTR _mModelRot$[ebp+eax]
  0097a	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  0097f	0f 29 85 30 f7
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00986	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0098b	c1 e1 00	 shl	 ecx, 0
  0098e	0f 10 85 30 f7
	ff ff		 movups	 xmm0, XMMWORD PTR $T15[ebp]
  00995	0f 11 84 0d 90
	fa ff ff	 movups	 XMMWORD PTR _mModelRot$[ebp+ecx], xmm0
; Line 913
  0099d	8d 95 20 f7 ff
	ff		 lea	 edx, DWORD PTR $T14[ebp]
  009a3	52		 push	 edx
  009a4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
  009a9	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  009ae	0f 10 10	 movups	 xmm2, XMMWORD PTR [eax]
  009b1	0f 28 8d 80 f7
	ff ff		 movaps	 xmm1, XMMWORD PTR _zBasis$[ebp]
  009b8	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  009bd	d1 e0		 shl	 eax, 1
  009bf	0f 10 84 05 90
	fa ff ff	 movups	 xmm0, XMMWORD PTR _mModelRot$[ebp+eax]
  009c7	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  009cc	0f 29 85 10 f7
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  009d3	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  009d8	d1 e1		 shl	 ecx, 1
  009da	0f 10 85 10 f7
	ff ff		 movups	 xmm0, XMMWORD PTR $T13[ebp]
  009e1	0f 11 84 0d 90
	fa ff ff	 movups	 XMMWORD PTR _mModelRot$[ebp+ecx], xmm0
; Line 916
  009e9	8d 95 00 f7 ff
	ff		 lea	 edx, DWORD PTR $T12[ebp]
  009ef	52		 push	 edx
  009f0	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
  009f5	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  009fa	0f 10 10	 movups	 xmm2, XMMWORD PTR [eax]
  009fd	0f 28 8d 40 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _vLookAt$[ebp]
  00a04	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00a09	6b c8 03	 imul	 ecx, eax, 3
  00a0c	0f 10 84 0d 90
	fa ff ff	 movups	 xmm0, XMMWORD PTR _mModelRot$[ebp+ecx]
  00a14	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  00a19	0f 29 85 f0 f6
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00a20	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00a25	6b c2 03	 imul	 eax, edx, 3
  00a28	0f 10 85 f0 f6
	ff ff		 movups	 xmm0, XMMWORD PTR $T11[ebp]
  00a2f	0f 11 84 05 90
	fa ff ff	 movups	 XMMWORD PTR _mModelRot$[ebp+eax], xmm0
; Line 918
  00a37	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a3a	81 c1 24 05 00
	00		 add	 ecx, 1316		; 00000524H
  00a40	0f 28 85 90 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR _mModelRot$[ebp]
  00a47	0f 28 8d a0 fa
	ff ff		 movaps	 xmm1, XMMWORD PTR _mModelRot$[ebp+16]
  00a4e	0f 28 95 b0 fa
	ff ff		 movaps	 xmm2, XMMWORD PTR _mModelRot$[ebp+32]
  00a55	0f 28 9d c0 fa
	ff ff		 movaps	 xmm3, XMMWORD PTR _mModelRot$[ebp+48]
  00a5c	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 921
  00a61	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a64	f3 0f 10 91 e0
	04 00 00	 movss	 xmm2, DWORD PTR [ecx+1248]
  00a6c	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  00a73	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00a76	f3 0f 10 8a dc
	04 00 00	 movss	 xmm1, DWORD PTR [edx+1244]
  00a7e	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00a85	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00a88	f3 0f 10 80 d8
	04 00 00	 movss	 xmm0, DWORD PTR [eax+1240]
  00a90	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00a97	e8 00 00 00 00	 call	 ?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
  00a9c	0f 29 9d e0 f3
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00aa3	0f 29 95 d0 f3
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  00aaa	0f 29 8d c0 f3
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  00ab1	0f 29 85 b0 f3
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00ab8	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00abd	8d b5 b0 f3 ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00ac3	8d bd 50 f6 ff
	ff		 lea	 edi, DWORD PTR $T10[ebp]
  00ac9	f3 a5		 rep movsd
  00acb	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00ad0	8d b5 50 f6 ff
	ff		 lea	 esi, DWORD PTR $T10[ebp]
  00ad6	8d bd a0 f6 ff
	ff		 lea	 edi, DWORD PTR _mTrans$[ebp]
  00adc	f3 a5		 rep movsd
; Line 922
  00ade	8d 95 00 f6 ff
	ff		 lea	 edx, DWORD PTR _mWorld$[ebp]
  00ae4	8d 8d a0 f6 ff
	ff		 lea	 ecx, DWORD PTR _mTrans$[ebp]
  00aea	0f 28 85 90 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR _mModelRot$[ebp]
  00af1	0f 28 8d a0 fa
	ff ff		 movaps	 xmm1, XMMWORD PTR _mModelRot$[ebp+16]
  00af8	0f 28 95 b0 fa
	ff ff		 movaps	 xmm2, XMMWORD PTR _mModelRot$[ebp+32]
  00aff	0f 28 9d c0 fa
	ff ff		 movaps	 xmm3, XMMWORD PTR _mModelRot$[ebp+48]
  00b06	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
; Line 923
  00b0b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00b0e	81 c1 64 05 00
	00		 add	 ecx, 1380		; 00000564H
  00b14	0f 28 85 00 f6
	ff ff		 movaps	 xmm0, XMMWORD PTR _mWorld$[ebp]
  00b1b	0f 28 8d 10 f6
	ff ff		 movaps	 xmm1, XMMWORD PTR _mWorld$[ebp+16]
  00b22	0f 28 95 20 f6
	ff ff		 movaps	 xmm2, XMMWORD PTR _mWorld$[ebp+32]
  00b29	0f 28 9d 30 f6
	ff ff		 movaps	 xmm3, XMMWORD PTR _mWorld$[ebp+48]
  00b30	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
$LN6@FrameMove:
; Line 924
  00b35	52		 push	 edx
  00b36	8b cd		 mov	 ecx, ebp
  00b38	50		 push	 eax
  00b39	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@FrameMove
  00b3f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00b44	58		 pop	 eax
  00b45	5a		 pop	 edx
  00b46	5f		 pop	 edi
  00b47	5e		 pop	 esi
  00b48	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b4b	33 cd		 xor	 ecx, ebp
  00b4d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b52	8b e5		 mov	 esp, ebp
  00b54	5d		 pop	 ebp
  00b55	8b e3		 mov	 esp, ebx
  00b57	5b		 pop	 ebx
  00b58	c2 04 00	 ret	 4
  00b5b	90		 npad	 1
$LN24@FrameMove:
  00b5c	0d 00 00 00	 DD	 13			; 0000000dH
  00b60	00 00 00 00	 DD	 $LN23@FrameMove
$LN23@FrameMove:
  00b64	70 ff ff ff	 DD	 -144			; ffffff70H
  00b68	40 00 00 00	 DD	 64			; 00000040H
  00b6c	00 00 00 00	 DD	 $LN10@FrameMove
  00b70	40 fe ff ff	 DD	 -448			; fffffe40H
  00b74	10 00 00 00	 DD	 16			; 00000010H
  00b78	00 00 00 00	 DD	 $LN11@FrameMove
  00b7c	90 fd ff ff	 DD	 -624			; fffffd90H
  00b80	40 00 00 00	 DD	 64			; 00000040H
  00b84	00 00 00 00	 DD	 $LN12@FrameMove
  00b88	f0 fc ff ff	 DD	 -784			; fffffcf0H
  00b8c	40 00 00 00	 DD	 64			; 00000040H
  00b90	00 00 00 00	 DD	 $LN13@FrameMove
  00b94	20 fc ff ff	 DD	 -992			; fffffc20H
  00b98	40 00 00 00	 DD	 64			; 00000040H
  00b9c	00 00 00 00	 DD	 $LN14@FrameMove
  00ba0	80 fb ff ff	 DD	 -1152			; fffffb80H
  00ba4	40 00 00 00	 DD	 64			; 00000040H
  00ba8	00 00 00 00	 DD	 $LN15@FrameMove
  00bac	e0 fa ff ff	 DD	 -1312			; fffffae0H
  00bb0	40 00 00 00	 DD	 64			; 00000040H
  00bb4	00 00 00 00	 DD	 $LN16@FrameMove
  00bb8	90 fa ff ff	 DD	 -1392			; fffffa90H
  00bbc	40 00 00 00	 DD	 64			; 00000040H
  00bc0	00 00 00 00	 DD	 $LN17@FrameMove
  00bc4	30 f9 ff ff	 DD	 -1744			; fffff930H
  00bc8	40 00 00 00	 DD	 64			; 00000040H
  00bcc	00 00 00 00	 DD	 $LN18@FrameMove
  00bd0	90 f8 ff ff	 DD	 -1904			; fffff890H
  00bd4	40 00 00 00	 DD	 64			; 00000040H
  00bd8	00 00 00 00	 DD	 $LN19@FrameMove
  00bdc	f0 f7 ff ff	 DD	 -2064			; fffff7f0H
  00be0	40 00 00 00	 DD	 64			; 00000040H
  00be4	00 00 00 00	 DD	 $LN20@FrameMove
  00be8	a0 f6 ff ff	 DD	 -2400			; fffff6a0H
  00bec	40 00 00 00	 DD	 64			; 00000040H
  00bf0	00 00 00 00	 DD	 $LN21@FrameMove
  00bf4	00 f6 ff ff	 DD	 -2560			; fffff600H
  00bf8	40 00 00 00	 DD	 64			; 00000040H
  00bfc	00 00 00 00	 DD	 $LN22@FrameMove
$LN22@FrameMove:
  00c00	6d		 DB	 109			; 0000006dH
  00c01	57		 DB	 87			; 00000057H
  00c02	6f		 DB	 111			; 0000006fH
  00c03	72		 DB	 114			; 00000072H
  00c04	6c		 DB	 108			; 0000006cH
  00c05	64		 DB	 100			; 00000064H
  00c06	00		 DB	 0
$LN21@FrameMove:
  00c07	6d		 DB	 109			; 0000006dH
  00c08	54		 DB	 84			; 00000054H
  00c09	72		 DB	 114			; 00000072H
  00c0a	61		 DB	 97			; 00000061H
  00c0b	6e		 DB	 110			; 0000006eH
  00c0c	73		 DB	 115			; 00000073H
  00c0d	00		 DB	 0
$LN20@FrameMove:
  00c0e	6d		 DB	 109			; 0000006dH
  00c0f	43		 DB	 67			; 00000043H
  00c10	61		 DB	 97			; 00000061H
  00c11	6d		 DB	 109			; 0000006dH
  00c12	65		 DB	 101			; 00000065H
  00c13	72		 DB	 114			; 00000072H
  00c14	61		 DB	 97			; 00000061H
  00c15	52		 DB	 82			; 00000052H
  00c16	6f		 DB	 111			; 0000006fH
  00c17	74		 DB	 116			; 00000074H
  00c18	44		 DB	 68			; 00000044H
  00c19	65		 DB	 101			; 00000065H
  00c1a	6c		 DB	 108			; 0000006cH
  00c1b	74		 DB	 116			; 00000074H
  00c1c	61		 DB	 97			; 00000061H
  00c1d	00		 DB	 0
$LN19@FrameMove:
  00c1e	6d		 DB	 109			; 0000006dH
  00c1f	43		 DB	 67			; 00000043H
  00c20	61		 DB	 97			; 00000061H
  00c21	6d		 DB	 109			; 0000006dH
  00c22	65		 DB	 101			; 00000065H
  00c23	72		 DB	 114			; 00000072H
  00c24	61		 DB	 97			; 00000061H
  00c25	4c		 DB	 76			; 0000004cH
  00c26	61		 DB	 97			; 00000061H
  00c27	73		 DB	 115			; 00000073H
  00c28	74		 DB	 116			; 00000074H
  00c29	52		 DB	 82			; 00000052H
  00c2a	6f		 DB	 111			; 0000006fH
  00c2b	74		 DB	 116			; 00000074H
  00c2c	49		 DB	 73			; 00000049H
  00c2d	6e		 DB	 110			; 0000006eH
  00c2e	76		 DB	 118			; 00000076H
  00c2f	00		 DB	 0
$LN18@FrameMove:
  00c30	6d		 DB	 109			; 0000006dH
  00c31	43		 DB	 67			; 00000043H
  00c32	61		 DB	 97			; 00000061H
  00c33	6d		 DB	 109			; 0000006dH
  00c34	65		 DB	 101			; 00000065H
  00c35	72		 DB	 114			; 00000072H
  00c36	61		 DB	 97			; 00000061H
  00c37	52		 DB	 82			; 00000052H
  00c38	6f		 DB	 111			; 0000006fH
  00c39	74		 DB	 116			; 00000074H
  00c3a	4c		 DB	 76			; 0000004cH
  00c3b	61		 DB	 97			; 00000061H
  00c3c	73		 DB	 115			; 00000073H
  00c3d	74		 DB	 116			; 00000074H
  00c3e	00		 DB	 0
$LN17@FrameMove:
  00c3f	6d		 DB	 109			; 0000006dH
  00c40	4d		 DB	 77			; 0000004dH
  00c41	6f		 DB	 111			; 0000006fH
  00c42	64		 DB	 100			; 00000064H
  00c43	65		 DB	 101			; 00000065H
  00c44	6c		 DB	 108			; 0000006cH
  00c45	52		 DB	 82			; 00000052H
  00c46	6f		 DB	 111			; 0000006fH
  00c47	74		 DB	 116			; 00000074H
  00c48	00		 DB	 0
$LN16@FrameMove:
  00c49	6d		 DB	 109			; 0000006dH
  00c4a	4d		 DB	 77			; 0000004dH
  00c4b	6f		 DB	 111			; 0000006fH
  00c4c	64		 DB	 100			; 00000064H
  00c4d	65		 DB	 101			; 00000065H
  00c4e	6c		 DB	 108			; 0000006cH
  00c4f	52		 DB	 82			; 00000052H
  00c50	6f		 DB	 111			; 0000006fH
  00c51	74		 DB	 116			; 00000074H
  00c52	30		 DB	 48			; 00000030H
  00c53	00		 DB	 0
$LN15@FrameMove:
  00c54	6d		 DB	 109			; 0000006dH
  00c55	4d		 DB	 77			; 0000004dH
  00c56	6f		 DB	 111			; 0000006fH
  00c57	64		 DB	 100			; 00000064H
  00c58	65		 DB	 101			; 00000065H
  00c59	6c		 DB	 108			; 0000006cH
  00c5a	4c		 DB	 76			; 0000004cH
  00c5b	61		 DB	 97			; 00000061H
  00c5c	73		 DB	 115			; 00000073H
  00c5d	74		 DB	 116			; 00000074H
  00c5e	52		 DB	 82			; 00000052H
  00c5f	6f		 DB	 111			; 0000006fH
  00c60	74		 DB	 116			; 00000074H
  00c61	49		 DB	 73			; 00000049H
  00c62	6e		 DB	 110			; 0000006eH
  00c63	76		 DB	 118			; 00000076H
  00c64	00		 DB	 0
$LN14@FrameMove:
  00c65	6d		 DB	 109			; 0000006dH
  00c66	4d		 DB	 77			; 0000004dH
  00c67	6f		 DB	 111			; 0000006fH
  00c68	64		 DB	 100			; 00000064H
  00c69	65		 DB	 101			; 00000065H
  00c6a	6c		 DB	 108			; 0000006cH
  00c6b	4c		 DB	 76			; 0000004cH
  00c6c	61		 DB	 97			; 00000061H
  00c6d	73		 DB	 115			; 00000073H
  00c6e	74		 DB	 116			; 00000074H
  00c6f	52		 DB	 82			; 00000052H
  00c70	6f		 DB	 111			; 0000006fH
  00c71	74		 DB	 116			; 00000074H
  00c72	00		 DB	 0
$LN13@FrameMove:
  00c73	6d		 DB	 109			; 0000006dH
  00c74	49		 DB	 73			; 00000049H
  00c75	6e		 DB	 110			; 0000006eH
  00c76	76		 DB	 118			; 00000076H
  00c77	56		 DB	 86			; 00000056H
  00c78	69		 DB	 105			; 00000069H
  00c79	65		 DB	 101			; 00000065H
  00c7a	77		 DB	 119			; 00000077H
  00c7b	00		 DB	 0
$LN12@FrameMove:
  00c7c	6d		 DB	 109			; 0000006dH
  00c7d	56		 DB	 86			; 00000056H
  00c7e	69		 DB	 105			; 00000069H
  00c7f	65		 DB	 101			; 00000065H
  00c80	77		 DB	 119			; 00000077H
  00c81	00		 DB	 0
$LN11@FrameMove:
  00c82	76		 DB	 118			; 00000076H
  00c83	4c		 DB	 76			; 0000004cH
  00c84	6f		 DB	 111			; 0000006fH
  00c85	6f		 DB	 111			; 0000006fH
  00c86	6b		 DB	 107			; 0000006bH
  00c87	41		 DB	 65			; 00000041H
  00c88	74		 DB	 116			; 00000074H
  00c89	00		 DB	 0
$LN10@FrameMove:
  00c8a	6d		 DB	 109			; 0000006dH
  00c8b	43		 DB	 67			; 00000043H
  00c8c	61		 DB	 97			; 00000061H
  00c8d	6d		 DB	 109			; 0000006dH
  00c8e	65		 DB	 101			; 00000065H
  00c8f	72		 DB	 114			; 00000072H
  00c90	61		 DB	 97			; 00000061H
  00c91	52		 DB	 82			; 00000052H
  00c92	6f		 DB	 111			; 0000006fH
  00c93	74		 DB	 116			; 00000074H
  00c94	00		 DB	 0
?FrameMove@CModelViewerCamera@@UAEXM@Z ENDP		; CModelViewerCamera::FrameMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_iMouseY$1 = -28					; size = 4
_iMouseX$2 = -24					; size = 4
_iMouseY$3 = -20					; size = 4
_iMouseX$4 = -16					; size = 4
_iMouseY$5 = -12					; size = 4
_iMouseX$6 = -8						; size = 4
_this$ = -4						; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HandleMessages@CModelViewerCamera@@UAEJPAUHWND__@@IIJ@Z PROC ; CModelViewerCamera::HandleMessages
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 986
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 987
  00023	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 0c	 mov	 edx, DWORD PTR _uMsg$[ebp]
  0002e	52		 push	 edx
  0002f	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  00032	50		 push	 eax
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z ; CBaseCamera::HandleMessages
; Line 991
  0003b	81 7d 0c 01 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 513 ; 00000201H
  00042	74 09		 je	 SHORT $LN28@HandleMess
  00044	81 7d 0c 03 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 515 ; 00000203H
  0004b	75 0e		 jne	 SHORT $LN29@HandleMess
$LN28@HandleMess:
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	8b 91 a4 05 00
	00		 mov	 edx, DWORD PTR [ecx+1444]
  00056	83 e2 01	 and	 edx, 1
  00059	75 40		 jne	 SHORT $LN30@HandleMess
$LN29@HandleMess:
  0005b	81 7d 0c 07 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 519 ; 00000207H
  00062	74 09		 je	 SHORT $LN26@HandleMess
  00064	81 7d 0c 09 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 521 ; 00000209H
  0006b	75 0e		 jne	 SHORT $LN27@HandleMess
$LN26@HandleMess:
  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 88 a4 05 00
	00		 mov	 ecx, DWORD PTR [eax+1444]
  00076	83 e1 02	 and	 ecx, 2
  00079	75 20		 jne	 SHORT $LN30@HandleMess
$LN27@HandleMess:
  0007b	81 7d 0c 04 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 516 ; 00000204H
  00082	74 09		 je	 SHORT $LN25@HandleMess
  00084	81 7d 0c 06 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 518 ; 00000206H
  0008b	75 44		 jne	 SHORT $LN31@HandleMess
$LN25@HandleMess:
  0008d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00090	8b 82 a4 05 00
	00		 mov	 eax, DWORD PTR [edx+1444]
  00096	83 e0 04	 and	 eax, 4
  00099	74 36		 je	 SHORT $LN31@HandleMess
$LN30@HandleMess:
; Line 993
  0009b	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  0009e	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  000a4	0f bf d1	 movsx	 edx, cx
  000a7	89 55 f8	 mov	 DWORD PTR _iMouseX$6[ebp], edx
; Line 994
  000aa	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  000ad	c1 e8 10	 shr	 eax, 16			; 00000010H
  000b0	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000b5	0f bf c8	 movsx	 ecx, ax
  000b8	89 4d f4	 mov	 DWORD PTR _iMouseY$5[ebp], ecx
; Line 995
  000bb	8b 55 f4	 mov	 edx, DWORD PTR _iMouseY$5[ebp]
  000be	52		 push	 edx
  000bf	8b 45 f8	 mov	 eax, DWORD PTR _iMouseX$6[ebp]
  000c2	50		 push	 eax
  000c3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c6	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  000cc	e8 00 00 00 00	 call	 ?OnBegin@CD3DArcBall@@QAEXHH@Z ; CD3DArcBall::OnBegin
$LN31@HandleMess:
; Line 1001
  000d1	81 7d 0c 01 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 513 ; 00000201H
  000d8	74 09		 je	 SHORT $LN21@HandleMess
  000da	81 7d 0c 03 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 515 ; 00000203H
  000e1	75 0e		 jne	 SHORT $LN22@HandleMess
$LN21@HandleMess:
  000e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	8b 91 ac 05 00
	00		 mov	 edx, DWORD PTR [ecx+1452]
  000ec	83 e2 01	 and	 edx, 1
  000ef	75 40		 jne	 SHORT $LN23@HandleMess
$LN22@HandleMess:
  000f1	81 7d 0c 07 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 519 ; 00000207H
  000f8	74 09		 je	 SHORT $LN19@HandleMess
  000fa	81 7d 0c 09 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 521 ; 00000209H
  00101	75 0e		 jne	 SHORT $LN20@HandleMess
$LN19@HandleMess:
  00103	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00106	8b 88 ac 05 00
	00		 mov	 ecx, DWORD PTR [eax+1452]
  0010c	83 e1 02	 and	 ecx, 2
  0010f	75 20		 jne	 SHORT $LN23@HandleMess
$LN20@HandleMess:
  00111	81 7d 0c 04 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 516 ; 00000204H
  00118	74 09		 je	 SHORT $LN18@HandleMess
  0011a	81 7d 0c 06 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 518 ; 00000206H
  00121	75 44		 jne	 SHORT $LN24@HandleMess
$LN18@HandleMess:
  00123	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00126	8b 82 ac 05 00
	00		 mov	 eax, DWORD PTR [edx+1452]
  0012c	83 e0 04	 and	 eax, 4
  0012f	74 36		 je	 SHORT $LN24@HandleMess
$LN23@HandleMess:
; Line 1003
  00131	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00134	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0013a	0f bf d1	 movsx	 edx, cx
  0013d	89 55 f0	 mov	 DWORD PTR _iMouseX$4[ebp], edx
; Line 1004
  00140	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00143	c1 e8 10	 shr	 eax, 16			; 00000010H
  00146	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0014b	0f bf c8	 movsx	 ecx, ax
  0014e	89 4d ec	 mov	 DWORD PTR _iMouseY$3[ebp], ecx
; Line 1005
  00151	8b 55 ec	 mov	 edx, DWORD PTR _iMouseY$3[ebp]
  00154	52		 push	 edx
  00155	8b 45 f0	 mov	 eax, DWORD PTR _iMouseX$4[ebp]
  00158	50		 push	 eax
  00159	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015c	81 c1 b4 03 00
	00		 add	 ecx, 948		; 000003b4H
  00162	e8 00 00 00 00	 call	 ?OnBegin@CD3DArcBall@@QAEXHH@Z ; CD3DArcBall::OnBegin
$LN24@HandleMess:
; Line 1008
  00167	81 7d 0c 00 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 512 ; 00000200H
  0016e	75 4c		 jne	 SHORT $LN17@HandleMess
; Line 1010
  00170	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00173	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00179	0f bf d1	 movsx	 edx, cx
  0017c	89 55 e8	 mov	 DWORD PTR _iMouseX$2[ebp], edx
; Line 1011
  0017f	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00182	c1 e8 10	 shr	 eax, 16			; 00000010H
  00185	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0018a	0f bf c8	 movsx	 ecx, ax
  0018d	89 4d e4	 mov	 DWORD PTR _iMouseY$1[ebp], ecx
; Line 1012
  00190	8b 55 e4	 mov	 edx, DWORD PTR _iMouseY$1[ebp]
  00193	52		 push	 edx
  00194	8b 45 e8	 mov	 eax, DWORD PTR _iMouseX$2[ebp]
  00197	50		 push	 eax
  00198	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0019b	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  001a1	e8 00 00 00 00	 call	 ?OnMove@CD3DArcBall@@QAEXHH@Z ; CD3DArcBall::OnMove
; Line 1013
  001a6	8b 4d e4	 mov	 ecx, DWORD PTR _iMouseY$1[ebp]
  001a9	51		 push	 ecx
  001aa	8b 55 e8	 mov	 edx, DWORD PTR _iMouseX$2[ebp]
  001ad	52		 push	 edx
  001ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b1	81 c1 b4 03 00
	00		 add	 ecx, 948		; 000003b4H
  001b7	e8 00 00 00 00	 call	 ?OnMove@CD3DArcBall@@QAEXHH@Z ; CD3DArcBall::OnMove
$LN17@HandleMess:
; Line 1018
  001bc	81 7d 0c 02 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 514 ; 00000202H
  001c3	75 0e		 jne	 SHORT $LN14@HandleMess
  001c5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001c8	8b 88 a4 05 00
	00		 mov	 ecx, DWORD PTR [eax+1444]
  001ce	83 e1 01	 and	 ecx, 1
  001d1	75 2e		 jne	 SHORT $LN15@HandleMess
$LN14@HandleMess:
  001d3	81 7d 0c 08 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 520 ; 00000208H
  001da	75 0e		 jne	 SHORT $LN13@HandleMess
  001dc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001df	8b 82 a4 05 00
	00		 mov	 eax, DWORD PTR [edx+1444]
  001e5	83 e0 02	 and	 eax, 2
  001e8	75 17		 jne	 SHORT $LN15@HandleMess
$LN13@HandleMess:
  001ea	81 7d 0c 05 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 517 ; 00000205H
  001f1	75 1c		 jne	 SHORT $LN16@HandleMess
  001f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f6	8b 91 a4 05 00
	00		 mov	 edx, DWORD PTR [ecx+1444]
  001fc	83 e2 04	 and	 edx, 4
  001ff	74 0e		 je	 SHORT $LN16@HandleMess
$LN15@HandleMess:
; Line 1020
  00201	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00204	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  0020a	e8 00 00 00 00	 call	 ?OnEnd@CD3DArcBall@@QAEXXZ ; CD3DArcBall::OnEnd
$LN16@HandleMess:
; Line 1025
  0020f	81 7d 0c 02 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 514 ; 00000202H
  00216	75 0e		 jne	 SHORT $LN10@HandleMess
  00218	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0021b	8b 88 ac 05 00
	00		 mov	 ecx, DWORD PTR [eax+1452]
  00221	83 e1 01	 and	 ecx, 1
  00224	75 2e		 jne	 SHORT $LN11@HandleMess
$LN10@HandleMess:
  00226	81 7d 0c 08 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 520 ; 00000208H
  0022d	75 0e		 jne	 SHORT $LN9@HandleMess
  0022f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00232	8b 82 ac 05 00
	00		 mov	 eax, DWORD PTR [edx+1452]
  00238	83 e0 02	 and	 eax, 2
  0023b	75 17		 jne	 SHORT $LN11@HandleMess
$LN9@HandleMess:
  0023d	81 7d 0c 05 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 517 ; 00000205H
  00244	75 1c		 jne	 SHORT $LN12@HandleMess
  00246	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00249	8b 91 ac 05 00
	00		 mov	 edx, DWORD PTR [ecx+1452]
  0024f	83 e2 04	 and	 edx, 4
  00252	74 0e		 je	 SHORT $LN12@HandleMess
$LN11@HandleMess:
; Line 1027
  00254	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00257	81 c1 b4 03 00
	00		 add	 ecx, 948		; 000003b4H
  0025d	e8 00 00 00 00	 call	 ?OnEnd@CD3DArcBall@@QAEXXZ ; CD3DArcBall::OnEnd
$LN12@HandleMess:
; Line 1030
  00262	81 7d 0c 15 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 533 ; 00000215H
  00269	75 78		 jne	 SHORT $LN8@HandleMess
; Line 1032
  0026b	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  0026e	3b 45 08	 cmp	 eax, DWORD PTR _hWnd$[ebp]
  00271	74 70		 je	 SHORT $LN8@HandleMess
; Line 1036
  00273	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00276	8b 91 a4 05 00
	00		 mov	 edx, DWORD PTR [ecx+1444]
  0027c	83 e2 01	 and	 edx, 1
  0027f	75 1c		 jne	 SHORT $LN5@HandleMess
  00281	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00284	8b 88 a4 05 00
	00		 mov	 ecx, DWORD PTR [eax+1444]
  0028a	83 e1 02	 and	 ecx, 2
  0028d	75 0e		 jne	 SHORT $LN5@HandleMess
  0028f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00292	8b 82 a4 05 00
	00		 mov	 eax, DWORD PTR [edx+1444]
  00298	83 e0 04	 and	 eax, 4
  0029b	74 0e		 je	 SHORT $LN6@HandleMess
$LN5@HandleMess:
; Line 1038
  0029d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002a0	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  002a6	e8 00 00 00 00	 call	 ?OnEnd@CD3DArcBall@@QAEXXZ ; CD3DArcBall::OnEnd
$LN6@HandleMess:
; Line 1043
  002ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ae	8b 91 ac 05 00
	00		 mov	 edx, DWORD PTR [ecx+1452]
  002b4	83 e2 01	 and	 edx, 1
  002b7	75 1c		 jne	 SHORT $LN3@HandleMess
  002b9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002bc	8b 88 ac 05 00
	00		 mov	 ecx, DWORD PTR [eax+1452]
  002c2	83 e1 02	 and	 ecx, 2
  002c5	75 0e		 jne	 SHORT $LN3@HandleMess
  002c7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002ca	8b 82 ac 05 00
	00		 mov	 eax, DWORD PTR [edx+1452]
  002d0	83 e0 04	 and	 eax, 4
  002d3	74 0e		 je	 SHORT $LN8@HandleMess
$LN3@HandleMess:
; Line 1045
  002d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002d8	81 c1 b4 03 00
	00		 add	 ecx, 948		; 000003b4H
  002de	e8 00 00 00 00	 call	 ?OnEnd@CD3DArcBall@@QAEXXZ ; CD3DArcBall::OnEnd
$LN8@HandleMess:
; Line 1060
  002e3	81 7d 0c 01 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 513 ; 00000201H
  002ea	74 5a		 je	 SHORT $LN1@HandleMess
  002ec	81 7d 0c 03 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 515 ; 00000203H
  002f3	74 51		 je	 SHORT $LN1@HandleMess
  002f5	81 7d 0c 07 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 519 ; 00000207H
  002fc	74 48		 je	 SHORT $LN1@HandleMess
  002fe	81 7d 0c 09 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 521 ; 00000209H
  00305	74 3f		 je	 SHORT $LN1@HandleMess
  00307	81 7d 0c 04 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 516 ; 00000204H
  0030e	74 36		 je	 SHORT $LN1@HandleMess
  00310	81 7d 0c 06 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 518 ; 00000206H
  00317	74 2d		 je	 SHORT $LN1@HandleMess
  00319	81 7d 0c 02 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 514 ; 00000202H
  00320	74 24		 je	 SHORT $LN1@HandleMess
  00322	81 7d 0c 08 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 520 ; 00000208H
  00329	74 1b		 je	 SHORT $LN1@HandleMess
  0032b	81 7d 0c 05 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 517 ; 00000205H
  00332	74 12		 je	 SHORT $LN1@HandleMess
  00334	81 7d 0c 0a 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 522 ; 0000020aH
  0033b	74 09		 je	 SHORT $LN1@HandleMess
  0033d	81 7d 0c 00 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 512 ; 00000200H
  00344	75 0a		 jne	 SHORT $LN2@HandleMess
$LN1@HandleMess:
; Line 1062
  00346	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00349	c6 81 b2 05 00
	00 01		 mov	 BYTE PTR [ecx+1458], 1
$LN2@HandleMess:
; Line 1065
  00350	33 c0		 xor	 eax, eax
; Line 1066
  00352	83 c4 1c	 add	 esp, 28			; 0000001cH
  00355	3b ec		 cmp	 ebp, esp
  00357	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0035c	8b e5		 mov	 esp, ebp
  0035e	5d		 pop	 ebp
  0035f	c2 10 00	 ret	 16			; 00000010H
?HandleMessages@CModelViewerCamera@@UAEJPAUHWND__@@IIJ@Z ENDP ; CModelViewerCamera::HandleMessages
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -240						; size = 64
$T2 = -172						; size = 12
$T3 = -160						; size = 64
_id$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
??0CModelViewerCamera@@QAE@XZ PROC			; CModelViewerCamera::CModelViewerCamera
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 806
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 08 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-248]
  00025	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??0CBaseCamera@@QAE@XZ	; CBaseCamera::CBaseCamera
  00047	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CModelViewerCamera@@6B@
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  00059	e8 00 00 00 00	 call	 ??0CD3DArcBall@@QAE@XZ	; CD3DArcBall::CD3DArcBall
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	81 c1 b4 03 00
	00		 add	 ecx, 948		; 000003b4H
  00067	e8 00 00 00 00	 call	 ??0CD3DArcBall@@QAE@XZ	; CD3DArcBall::CD3DArcBall
  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  00075	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	81 c1 e4 04 00
	00		 add	 ecx, 1252		; 000004e4H
  00083	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
  00088	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	81 c1 24 05 00
	00		 add	 ecx, 1316		; 00000524H
  00091	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
  00096	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	81 c1 64 05 00
	00		 add	 ecx, 1380		; 00000564H
  0009f	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	c7 81 a4 05 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+1444], 1
  000b1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000b4	c7 82 a8 05 00
	00 08 00 00 00	 mov	 DWORD PTR [edx+1448], 8
  000be	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c1	c7 80 ac 05 00
	00 04 00 00 00	 mov	 DWORD PTR [eax+1452], 4
  000cb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	c6 81 b0 05 00
	00 00		 mov	 BYTE PTR [ecx+1456], 0
  000d5	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000d8	c6 82 b1 05 00
	00 00		 mov	 BYTE PTR [edx+1457], 0
  000df	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	c6 80 b2 05 00
	00 01		 mov	 BYTE PTR [eax+1458], 1
  000e9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  000f4	f3 0f 11 81 b4
	05 00 00	 movss	 DWORD PTR [ecx+1460], xmm0
  000fc	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00107	f3 0f 11 82 b8
	05 00 00	 movss	 DWORD PTR [edx+1464], xmm0
  0010f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00112	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0011a	f3 0f 11 80 bc
	05 00 00	 movss	 DWORD PTR [eax+1468], xmm0
  00122	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00125	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  0012d	f3 0f 11 81 c0
	05 00 00	 movss	 DWORD PTR [ecx+1472], xmm0
  00135	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00138	81 c1 c4 05 00
	00		 add	 ecx, 1476		; 000005c4H
  0013e	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
; Line 807
  00143	e8 00 00 00 00	 call	 ?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ ; DirectX::XMMatrixIdentity
  00148	0f 29 9d 40 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  0014f	0f 29 95 30 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  00156	0f 29 8d 20 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  0015d	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00164	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00169	8d b5 10 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  0016f	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR $T3[ebp]
  00175	f3 a5		 rep movsd
  00177	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0017c	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  00182	8d 7d b0	 lea	 edi, DWORD PTR _id$[ebp]
  00185	f3 a5		 rep movsd
; Line 809
  00187	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0018a	81 c1 64 05 00
	00		 add	 ecx, 1380		; 00000564H
  00190	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _id$[ebp]
  00194	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _id$[ebp+16]
  00198	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _id$[ebp+32]
  0019c	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _id$[ebp+48]
  001a0	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 810
  001a5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a8	81 c1 24 05 00
	00		 add	 ecx, 1316		; 00000524H
  001ae	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _id$[ebp]
  001b2	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _id$[ebp+16]
  001b6	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _id$[ebp+32]
  001ba	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _id$[ebp+48]
  001be	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 811
  001c3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c6	81 c1 e4 04 00
	00		 add	 ecx, 1252		; 000004e4H
  001cc	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _id$[ebp]
  001d0	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _id$[ebp+16]
  001d4	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _id$[ebp+32]
  001d8	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _id$[ebp+48]
  001dc	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 812
  001e1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001e4	81 c1 c4 05 00
	00		 add	 ecx, 1476		; 000005c4H
  001ea	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _id$[ebp]
  001ee	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _id$[ebp+16]
  001f2	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _id$[ebp+32]
  001f6	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _id$[ebp+48]
  001fa	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 813
  001ff	51		 push	 ecx
  00200	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	51		 push	 ecx
  0020e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	51		 push	 ecx
  0021c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00224	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00229	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0022f	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@MMM@Z ; DirectX::XMFLOAT3::XMFLOAT3
  00234	50		 push	 eax
  00235	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00238	81 c1 d8 04 00
	00		 add	 ecx, 1240		; 000004d8H
  0023e	e8 00 00 00 00	 call	 ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT3::operator=
; Line 815
  00243	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00246	c6 82 71 02 00
	00 00		 mov	 BYTE PTR [edx+625], 0
; Line 816
  0024d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00250	52		 push	 edx
  00251	8b cd		 mov	 ecx, ebp
  00253	50		 push	 eax
  00254	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@CModelView
  0025a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0025f	58		 pop	 eax
  00260	5a		 pop	 edx
  00261	5f		 pop	 edi
  00262	5e		 pop	 esi
  00263	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00266	33 cd		 xor	 ecx, ebp
  00268	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026d	8b e5		 mov	 esp, ebp
  0026f	5d		 pop	 ebp
  00270	8b e3		 mov	 esp, ebx
  00272	5b		 pop	 ebx
  00273	c3		 ret	 0
$LN5@CModelView:
  00274	01 00 00 00	 DD	 1
  00278	00 00 00 00	 DD	 $LN4@CModelView
$LN4@CModelView:
  0027c	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00280	40 00 00 00	 DD	 64			; 00000040H
  00284	00 00 00 00	 DD	 $LN3@CModelView
$LN3@CModelView:
  00288	69		 DB	 105			; 00000069H
  00289	64		 DB	 100			; 00000064H
  0028a	00		 DB	 0
??0CModelViewerCamera@@QAE@XZ ENDP			; CModelViewerCamera::CModelViewerCamera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -16						; size = 4
tv70 = -12						; size = 4
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_bLeft$ = 8						; size = 1
_bMiddle$ = 12						; size = 1
_bRight$ = 16						; size = 1
_bRotateWithoutButtonDown$ = 20				; size = 1
?SetRotateButtons@CFirstPersonCamera@@QAEX_N000@Z PROC	; CFirstPersonCamera::SetRotateButtons
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 782
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 785
  0001a	0f b6 45 08	 movzx	 eax, BYTE PTR _bLeft$[ebp]
  0001e	85 c0		 test	 eax, eax
  00020	74 09		 je	 SHORT $LN3@SetRotateB
  00022	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00029	eb 07		 jmp	 SHORT $LN4@SetRotateB
$LN3@SetRotateB:
  0002b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@SetRotateB:
  00032	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _bMiddle$[ebp]
  00036	85 c9		 test	 ecx, ecx
  00038	74 09		 je	 SHORT $LN5@SetRotateB
  0003a	c7 45 f4 02 00
	00 00		 mov	 DWORD PTR tv70[ebp], 2
  00041	eb 07		 jmp	 SHORT $LN6@SetRotateB
$LN5@SetRotateB:
  00043	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN6@SetRotateB:
  0004a	0f b6 55 10	 movzx	 edx, BYTE PTR _bRight$[ebp]
  0004e	85 d2		 test	 edx, edx
  00050	74 09		 je	 SHORT $LN7@SetRotateB
  00052	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR tv74[ebp], 4
  00059	eb 07		 jmp	 SHORT $LN8@SetRotateB
$LN7@SetRotateB:
  0005b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN8@SetRotateB:
  00062	8b 45 f8	 mov	 eax, DWORD PTR tv67[ebp]
  00065	0b 45 f4	 or	 eax, DWORD PTR tv70[ebp]
  00068	0b 45 f0	 or	 eax, DWORD PTR tv74[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	89 81 d0 02 00
	00		 mov	 DWORD PTR [ecx+720], eax
; Line 786
  00074	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00077	8a 45 14	 mov	 al, BYTE PTR _bRotateWithoutButtonDown$[ebp]
  0007a	88 82 d4 02 00
	00		 mov	 BYTE PTR [edx+724], al
; Line 787
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 10 00	 ret	 16			; 00000010H
?SetRotateButtons@CFirstPersonCamera@@QAEX_N000@Z ENDP	; CFirstPersonCamera::SetRotateButtons
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv145 = -1145						; size = 1
tv376 = -1144						; size = 4
tv369 = -1140						; size = 4
$T1 = -1136						; size = 64
$T2 = -1072						; size = 64
$T3 = -1008						; size = 64
$T4 = -944						; size = 64
$T5 = -872						; size = 4
$T6 = -868						; size = 4
$T7 = -864						; size = 64
_mCameraWorld$ = -784					; size = 64
$T8 = -704						; size = 64
_mView$ = -624						; size = 64
$T9 = -544						; size = 16
_vLookAt$ = -528					; size = 16
$T10 = -512						; size = 16
$T11 = -496						; size = 16
_vEye$ = -464						; size = 16
$T12 = -432						; size = 16
_vPosDeltaWorld$ = -416					; size = 16
$T13 = -400						; size = 64
$T14 = -336						; size = 16
$T15 = -320						; size = 16
_vWorldAhead$ = -304					; size = 16
$T16 = -288						; size = 16
$T17 = -272						; size = 16
_vWorldUp$ = -256					; size = 16
$T18 = -240						; size = 64
_mCameraRot$ = -160					; size = 64
_fPitchDelta$19 = -88					; size = 4
_fYawDelta$20 = -84					; size = 4
$T21 = -80						; size = 16
_vPosDelta$ = -64					; size = 16
$T22 = -48						; size = 16
_vVelocity$ = -32					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_fElapsedTime$ = 8					; size = 4
?FrameMove@CFirstPersonCamera@@UAEXM@Z PROC		; CFirstPersonCamera::FrameMove
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 691
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 88 04 00
	00		 sub	 esp, 1160		; 00000488H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 78 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1160]
  00025	b9 22 01 00 00	 mov	 ecx, 290		; 00000122H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 692
  0003f	e8 00 00 00 00	 call	 ?DXUTGetGlobalTimer@@YGPAVCDXUTTimer@@XZ ; DXUTGetGlobalTimer
  00044	8b c8		 mov	 ecx, eax
  00046	e8 00 00 00 00	 call	 ?IsStopped@CDXUTTimer@@QBE_NXZ ; CDXUTTimer::IsStopped
  0004b	0f b6 c0	 movzx	 eax, al
  0004e	85 c0		 test	 eax, eax
  00050	74 4f		 je	 SHORT $LN7@FrameMove
; Line 694
  00052	e8 00 00 00 00	 call	 ?DXUTGetFPS@@YGMXZ	; DXUTGetFPS
  00057	d9 9d 8c fb ff
	ff		 fstp	 DWORD PTR tv369[ebp]
  0005d	f3 0f 10 85 8c
	fb ff ff	 movss	 xmm0, DWORD PTR tv369[ebp]
  00065	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0006c	9f		 lahf
  0006d	f6 c4 44	 test	 ah, 68			; 00000044H
  00070	7a 0f		 jp	 SHORT $LN8@FrameMove
; Line 695
  00072	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0007a	f3 0f 11 43 08	 movss	 DWORD PTR _fElapsedTime$[ebx], xmm0
; Line 696
  0007f	eb 20		 jmp	 SHORT $LN7@FrameMove
$LN8@FrameMove:
; Line 697
  00081	e8 00 00 00 00	 call	 ?DXUTGetFPS@@YGMXZ	; DXUTGetFPS
  00086	d9 9d 88 fb ff
	ff		 fstp	 DWORD PTR tv376[ebp]
  0008c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00094	f3 0f 5e 85 88
	fb ff ff	 divss	 xmm0, DWORD PTR tv376[ebp]
  0009c	f3 0f 11 43 08	 movss	 DWORD PTR _fElapsedTime$[ebx], xmm0
$LN7@FrameMove:
; Line 700
  000a1	b9 01 00 00 00	 mov	 ecx, 1
  000a6	6b d1 06	 imul	 edx, ecx, 6
  000a9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	0f b6 8c 10 b4
	01 00 00	 movzx	 ecx, BYTE PTR [eax+edx+436]
  000b4	51		 push	 ecx
  000b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	e8 00 00 00 00	 call	 ?IsKeyDown@CBaseCamera@@IBE_NE@Z ; CBaseCamera::IsKeyDown
  000bd	0f b6 d0	 movzx	 edx, al
  000c0	85 d2		 test	 edx, edx
  000c2	74 16		 je	 SHORT $LN6@FrameMove
; Line 702
  000c4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	8b 10		 mov	 edx, DWORD PTR [eax]
  000c9	8b f4		 mov	 esi, esp
  000cb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000d1	ff d0		 call	 eax
  000d3	3b f4		 cmp	 esi, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@FrameMove:
; Line 706
  000da	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000e0	8b 81 d0 02 00
	00		 mov	 eax, DWORD PTR [ecx+720]
  000e6	23 82 d0 01 00
	00		 and	 eax, DWORD PTR [edx+464]
  000ec	75 17		 jne	 SHORT $LN12@FrameMove
  000ee	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f1	0f b6 91 d4 02
	00 00		 movzx	 edx, BYTE PTR [ecx+724]
  000f8	85 d2		 test	 edx, edx
  000fa	75 09		 jne	 SHORT $LN12@FrameMove
  000fc	c6 85 87 fb ff
	ff 00		 mov	 BYTE PTR tv145[ebp], 0
  00103	eb 07		 jmp	 SHORT $LN13@FrameMove
$LN12@FrameMove:
  00105	c6 85 87 fb ff
	ff 01		 mov	 BYTE PTR tv145[ebp], 1
$LN13@FrameMove:
  0010c	6a 01		 push	 1
  0010e	0f b6 85 87 fb
	ff ff		 movzx	 eax, BYTE PTR tv145[ebp]
  00115	50		 push	 eax
  00116	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	0f b6 91 71 02
	00 00		 movzx	 edx, BYTE PTR [ecx+625]
  00120	52		 push	 edx
  00121	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00124	e8 00 00 00 00	 call	 ?GetInput@CBaseCamera@@IAEX_N00@Z ; CBaseCamera::GetInput
; Line 713
  00129	51		 push	 ecx
  0012a	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebx]
  0012f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00134	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00137	e8 00 00 00 00	 call	 ?UpdateVelocity@CBaseCamera@@IAEXM@Z ; CBaseCamera::UpdateVelocity
; Line 716
  0013c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013f	81 c1 2c 02 00
	00		 add	 ecx, 556		; 0000022cH
  00145	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  0014a	0f 29 45 d0	 movaps	 XMMWORD PTR $T22[ebp], xmm0
  0014e	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  00152	0f 29 45 e0	 movaps	 XMMWORD PTR _vVelocity$[ebp], xmm0
; Line 717
  00156	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vVelocity$[ebp]
  0015a	f3 0f 10 4b 08	 movss	 xmm1, DWORD PTR _fElapsedTime$[ebx]
  0015f	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  00164	0f 29 45 b0	 movaps	 XMMWORD PTR $T21[ebp], xmm0
  00168	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  0016c	0f 29 45 c0	 movaps	 XMMWORD PTR _vPosDelta$[ebp], xmm0
; Line 723
  00170	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00173	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00176	8b 90 d0 02 00
	00		 mov	 edx, DWORD PTR [eax+720]
  0017c	23 91 d0 01 00
	00		 and	 edx, DWORD PTR [ecx+464]
  00182	75 42		 jne	 SHORT $LN4@FrameMove
  00184	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00187	0f b6 88 d4 02
	00 00		 movzx	 ecx, BYTE PTR [eax+724]
  0018e	85 c9		 test	 ecx, ecx
  00190	75 34		 jne	 SHORT $LN4@FrameMove
  00192	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00195	f3 0f 10 82 84
	01 00 00	 movss	 xmm0, DWORD PTR [edx+388]
  0019d	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  001a4	9f		 lahf
  001a5	f6 c4 44	 test	 ah, 68			; 00000044H
  001a8	7a 1c		 jp	 SHORT $LN4@FrameMove
  001aa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001ad	f3 0f 10 80 8c
	01 00 00	 movss	 xmm0, DWORD PTR [eax+396]
  001b5	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  001bc	9f		 lahf
  001bd	f6 c4 44	 test	 ah, 68			; 00000044H
  001c0	0f 8b f3 00 00
	00		 jnp	 $LN5@FrameMove
$LN4@FrameMove:
; Line 726
  001c6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c9	f3 0f 10 81 4c
	02 00 00	 movss	 xmm0, DWORD PTR [ecx+588]
  001d1	f3 0f 11 45 ac	 movss	 DWORD PTR _fYawDelta$20[ebp], xmm0
; Line 727
  001d6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001d9	f3 0f 10 82 50
	02 00 00	 movss	 xmm0, DWORD PTR [edx+592]
  001e1	f3 0f 11 45 a8	 movss	 DWORD PTR _fPitchDelta$19[ebp], xmm0
; Line 730
  001e6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001e9	0f b6 88 70 02
	00 00		 movzx	 ecx, BYTE PTR [eax+624]
  001f0	85 c9		 test	 ecx, ecx
  001f2	74 11		 je	 SHORT $LN3@FrameMove
; Line 731
  001f4	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _fPitchDelta$19[ebp]
  001f9	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00200	f3 0f 11 45 a8	 movss	 DWORD PTR _fPitchDelta$19[ebp], xmm0
$LN3@FrameMove:
; Line 733
  00205	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00208	f3 0f 10 82 18
	02 00 00	 movss	 xmm0, DWORD PTR [edx+536]
  00210	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _fPitchDelta$19[ebp]
  00215	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00218	f3 0f 11 80 18
	02 00 00	 movss	 DWORD PTR [eax+536], xmm0
; Line 734
  00220	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00223	f3 0f 10 81 14
	02 00 00	 movss	 xmm0, DWORD PTR [ecx+532]
  0022b	f3 0f 58 45 ac	 addss	 xmm0, DWORD PTR _fYawDelta$20[ebp]
  00230	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00233	f3 0f 11 82 14
	02 00 00	 movss	 DWORD PTR [edx+532], xmm0
; Line 737
  0023b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  00243	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0024a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00252	f3 0f 11 85 9c
	fc ff ff	 movss	 DWORD PTR $T6[ebp], xmm0
  0025a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0025d	05 18 02 00 00	 add	 eax, 536		; 00000218H
  00262	50		 push	 eax
  00263	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00269	51		 push	 ecx
  0026a	e8 00 00 00 00	 call	 ??$max@M@std@@YAABMABM0@Z ; std::max<float>
  0026f	83 c4 08	 add	 esp, 8
  00272	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00275	8b 00		 mov	 eax, DWORD PTR [eax]
  00277	89 82 18 02 00
	00		 mov	 DWORD PTR [edx+536], eax
; Line 738
  0027d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  00285	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0028d	f3 0f 11 85 98
	fc ff ff	 movss	 DWORD PTR $T5[ebp], xmm0
  00295	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00298	81 c1 18 02 00
	00		 add	 ecx, 536		; 00000218H
  0029e	51		 push	 ecx
  0029f	8d 95 98 fc ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  002a5	52		 push	 edx
  002a6	e8 00 00 00 00	 call	 ??$min@M@std@@YAABMABM0@Z ; std::min<float>
  002ab	83 c4 08	 add	 esp, 8
  002ae	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002b1	8b 10		 mov	 edx, DWORD PTR [eax]
  002b3	89 91 18 02 00
	00		 mov	 DWORD PTR [ecx+536], edx
$LN5@FrameMove:
; Line 742
  002b9	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@00000000
  002c1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002c4	f3 0f 10 88 14
	02 00 00	 movss	 xmm1, DWORD PTR [eax+532]
  002cc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002cf	f3 0f 10 81 18
	02 00 00	 movss	 xmm0, DWORD PTR [ecx+536]
  002d7	e8 00 00 00 00	 call	 ?XMMatrixRotationRollPitchYaw@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixRotationRollPitchYaw
  002dc	0f 29 9d 80 fc
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+48], xmm3
  002e3	0f 29 95 70 fc
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+32], xmm2
  002ea	0f 29 8d 60 fc
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+16], xmm1
  002f1	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  002f8	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002fd	8d b5 50 fc ff
	ff		 lea	 esi, DWORD PTR $T4[ebp]
  00303	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR $T18[ebp]
  00309	f3 a5		 rep movsd
  0030b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00310	8d b5 10 ff ff
	ff		 lea	 esi, DWORD PTR $T18[ebp]
  00316	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR _mCameraRot$[ebp]
  0031c	f3 a5		 rep movsd
; Line 745
  0031e	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR $T17[ebp]
  00324	52		 push	 edx
  00325	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR1
  0032a	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  0032f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00332	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mCameraRot$[ebp]
  00339	0f 28 95 70 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _mCameraRot$[ebp+16]
  00340	0f 28 5d 80	 movaps	 xmm3, XMMWORD PTR _mCameraRot$[ebp+32]
  00344	0f 28 65 90	 movaps	 xmm4, XMMWORD PTR _mCameraRot$[ebp+48]
  00348	e8 00 00 00 00	 call	 ?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformCoord
  0034d	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  00354	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  0035b	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _vWorldUp$[ebp], xmm0
; Line 746
  00362	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  00368	50		 push	 eax
  00369	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR2
  0036e	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00373	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00376	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mCameraRot$[ebp]
  0037d	0f 28 95 70 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _mCameraRot$[ebp+16]
  00384	0f 28 5d 80	 movaps	 xmm3, XMMWORD PTR _mCameraRot$[ebp+32]
  00388	0f 28 65 90	 movaps	 xmm4, XMMWORD PTR _mCameraRot$[ebp+48]
  0038c	e8 00 00 00 00	 call	 ?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformCoord
  00391	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00398	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  0039f	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR _vWorldAhead$[ebp], xmm0
; Line 749
  003a6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003a9	0f b6 91 72 02
	00 00		 movzx	 edx, BYTE PTR [ecx+626]
  003b0	85 d2		 test	 edx, edx
  003b2	75 61		 jne	 SHORT $LN2@FrameMove
; Line 753
  003b4	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@00000000
  003bc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003bf	f3 0f 10 88 14
	02 00 00	 movss	 xmm1, DWORD PTR [eax+532]
  003c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  003cf	e8 00 00 00 00	 call	 ?XMMatrixRotationRollPitchYaw@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixRotationRollPitchYaw
  003d4	0f 29 9d 40 fc
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+48], xmm3
  003db	0f 29 95 30 fc
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+32], xmm2
  003e2	0f 29 8d 20 fc
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+16], xmm1
  003e9	0f 29 85 10 fc
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  003f0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003f5	8d b5 10 fc ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  003fb	8d bd 70 fe ff
	ff		 lea	 edi, DWORD PTR $T13[ebp]
  00401	f3 a5		 rep movsd
  00403	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00409	51		 push	 ecx
  0040a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _mCameraRot$[ebp]
  00410	e8 00 00 00 00	 call	 ??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMMATRIX::operator=
$LN2@FrameMove:
; Line 755
  00415	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vPosDelta$[ebp]
  00419	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mCameraRot$[ebp]
  00420	0f 28 95 70 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _mCameraRot$[ebp+16]
  00427	0f 28 5d 80	 movaps	 xmm3, XMMWORD PTR _mCameraRot$[ebp+32]
  0042b	0f 28 65 90	 movaps	 xmm4, XMMWORD PTR _mCameraRot$[ebp+48]
  0042f	e8 00 00 00 00	 call	 ?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformCoord
  00434	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  0043b	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  00442	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _vPosDeltaWorld$[ebp], xmm0
; Line 758
  00449	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0044c	81 c1 fc 01 00
	00		 add	 ecx, 508		; 000001fcH
  00452	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  00457	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  0045e	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  00465	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR _vEye$[ebp], xmm0
; Line 759
  0046c	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vPosDeltaWorld$[ebp]
  00473	8d 8d 30 fe ff
	ff		 lea	 ecx, DWORD PTR _vEye$[ebp]
  00479	e8 00 00 00 00	 call	 ??YDirectX@@YQAAT__m128@@AAT1@T1@@Z ; DirectX::operator+=
; Line 760
  0047e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00481	0f b6 82 73 02
	00 00		 movzx	 eax, BYTE PTR [edx+627]
  00488	85 c0		 test	 eax, eax
  0048a	74 20		 je	 SHORT $LN1@FrameMove
; Line 761
  0048c	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vEye$[ebp]
  00493	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00499	51		 push	 ecx
  0049a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0049d	e8 00 00 00 00	 call	 ?ConstrainToBoundary@CBaseCamera@@IAE?AT__m128@@T2@@Z ; CBaseCamera::ConstrainToBoundary
  004a2	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  004a5	0f 11 85 30 fe
	ff ff		 movups	 XMMWORD PTR _vEye$[ebp], xmm0
$LN1@FrameMove:
; Line 762
  004ac	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vEye$[ebp]
  004b3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004b6	81 c1 fc 01 00
	00		 add	 ecx, 508		; 000001fcH
  004bc	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 765
  004c1	0f 28 8d d0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _vWorldAhead$[ebp]
  004c8	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vEye$[ebp]
  004cf	e8 00 00 00 00	 call	 ??HDirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::operator+
  004d4	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  004db	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  004e2	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR _vLookAt$[ebp], xmm0
; Line 766
  004e9	0f 28 85 f0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _vLookAt$[ebp]
  004f0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004f3	81 c1 08 02 00
	00		 add	 ecx, 520		; 00000208H
  004f9	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 769
  004fe	0f 28 95 00 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _vWorldUp$[ebp]
  00505	0f 28 8d f0 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _vLookAt$[ebp]
  0050c	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vEye$[ebp]
  00513	e8 00 00 00 00	 call	 ?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ; DirectX::XMMatrixLookAtLH
  00518	0f 29 9d 00 fc
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+48], xmm3
  0051f	0f 29 95 f0 fb
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+32], xmm2
  00526	0f 29 8d e0 fb
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+16], xmm1
  0052d	0f 29 85 d0 fb
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00534	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00539	8d b5 d0 fb ff
	ff		 lea	 esi, DWORD PTR $T2[ebp]
  0053f	8d bd 40 fd ff
	ff		 lea	 edi, DWORD PTR $T8[ebp]
  00545	f3 a5		 rep movsd
  00547	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0054c	8d b5 40 fd ff
	ff		 lea	 esi, DWORD PTR $T8[ebp]
  00552	8d bd 90 fd ff
	ff		 lea	 edi, DWORD PTR _mView$[ebp]
  00558	f3 a5		 rep movsd
; Line 770
  0055a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0055d	83 c1 08	 add	 ecx, 8
  00560	0f 28 85 90 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _mView$[ebp]
  00567	0f 28 8d a0 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _mView$[ebp+16]
  0056e	0f 28 95 b0 fd
	ff ff		 movaps	 xmm2, XMMWORD PTR _mView$[ebp+32]
  00575	0f 28 9d c0 fd
	ff ff		 movaps	 xmm3, XMMWORD PTR _mView$[ebp+48]
  0057c	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 772
  00581	33 c9		 xor	 ecx, ecx
  00583	0f 28 85 90 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _mView$[ebp]
  0058a	0f 28 8d a0 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _mView$[ebp+16]
  00591	0f 28 95 b0 fd
	ff ff		 movaps	 xmm2, XMMWORD PTR _mView$[ebp+32]
  00598	0f 28 9d c0 fd
	ff ff		 movaps	 xmm3, XMMWORD PTR _mView$[ebp+48]
  0059f	e8 00 00 00 00	 call	 ?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
  005a4	0f 29 9d c0 fb
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  005ab	0f 29 95 b0 fb
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  005b2	0f 29 8d a0 fb
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  005b9	0f 29 85 90 fb
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  005c0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  005c5	8d b5 90 fb ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  005cb	8d bd a0 fc ff
	ff		 lea	 edi, DWORD PTR $T7[ebp]
  005d1	f3 a5		 rep movsd
  005d3	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  005d8	8d b5 a0 fc ff
	ff		 lea	 esi, DWORD PTR $T7[ebp]
  005de	8d bd f0 fc ff
	ff		 lea	 edi, DWORD PTR _mCameraWorld$[ebp]
  005e4	f3 a5		 rep movsd
; Line 773
  005e6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005e9	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  005ef	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _mCameraWorld$[ebp]
  005f6	0f 28 8d 00 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _mCameraWorld$[ebp+16]
  005fd	0f 28 95 10 fd
	ff ff		 movaps	 xmm2, XMMWORD PTR _mCameraWorld$[ebp+32]
  00604	0f 28 9d 20 fd
	ff ff		 movaps	 xmm3, XMMWORD PTR _mCameraWorld$[ebp+48]
  0060b	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 774
  00610	52		 push	 edx
  00611	8b cd		 mov	 ecx, ebp
  00613	50		 push	 eax
  00614	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN19@FrameMove
  0061a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0061f	58		 pop	 eax
  00620	5a		 pop	 edx
  00621	5f		 pop	 edi
  00622	5e		 pop	 esi
  00623	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00626	33 cd		 xor	 ecx, ebp
  00628	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0062d	8b e5		 mov	 esp, ebp
  0062f	5d		 pop	 ebp
  00630	8b e3		 mov	 esp, ebx
  00632	5b		 pop	 ebx
  00633	c2 04 00	 ret	 4
  00636	8b ff		 npad	 2
$LN19@FrameMove:
  00638	04 00 00 00	 DD	 4
  0063c	00 00 00 00	 DD	 $LN18@FrameMove
$LN18@FrameMove:
  00640	60 ff ff ff	 DD	 -160			; ffffff60H
  00644	40 00 00 00	 DD	 64			; 00000040H
  00648	00 00 00 00	 DD	 $LN14@FrameMove
  0064c	30 fe ff ff	 DD	 -464			; fffffe30H
  00650	10 00 00 00	 DD	 16			; 00000010H
  00654	00 00 00 00	 DD	 $LN15@FrameMove
  00658	90 fd ff ff	 DD	 -624			; fffffd90H
  0065c	40 00 00 00	 DD	 64			; 00000040H
  00660	00 00 00 00	 DD	 $LN16@FrameMove
  00664	f0 fc ff ff	 DD	 -784			; fffffcf0H
  00668	40 00 00 00	 DD	 64			; 00000040H
  0066c	00 00 00 00	 DD	 $LN17@FrameMove
$LN17@FrameMove:
  00670	6d		 DB	 109			; 0000006dH
  00671	43		 DB	 67			; 00000043H
  00672	61		 DB	 97			; 00000061H
  00673	6d		 DB	 109			; 0000006dH
  00674	65		 DB	 101			; 00000065H
  00675	72		 DB	 114			; 00000072H
  00676	61		 DB	 97			; 00000061H
  00677	57		 DB	 87			; 00000057H
  00678	6f		 DB	 111			; 0000006fH
  00679	72		 DB	 114			; 00000072H
  0067a	6c		 DB	 108			; 0000006cH
  0067b	64		 DB	 100			; 00000064H
  0067c	00		 DB	 0
$LN16@FrameMove:
  0067d	6d		 DB	 109			; 0000006dH
  0067e	56		 DB	 86			; 00000056H
  0067f	69		 DB	 105			; 00000069H
  00680	65		 DB	 101			; 00000065H
  00681	77		 DB	 119			; 00000077H
  00682	00		 DB	 0
$LN15@FrameMove:
  00683	76		 DB	 118			; 00000076H
  00684	45		 DB	 69			; 00000045H
  00685	79		 DB	 121			; 00000079H
  00686	65		 DB	 101			; 00000065H
  00687	00		 DB	 0
$LN14@FrameMove:
  00688	6d		 DB	 109			; 0000006dH
  00689	43		 DB	 67			; 00000043H
  0068a	61		 DB	 97			; 00000061H
  0068b	6d		 DB	 109			; 0000006dH
  0068c	65		 DB	 101			; 00000065H
  0068d	72		 DB	 114			; 00000072H
  0068e	61		 DB	 97			; 00000061H
  0068f	52		 DB	 82			; 00000052H
  00690	6f		 DB	 111			; 0000006fH
  00691	74		 DB	 116			; 00000074H
  00692	00		 DB	 0
?FrameMove@CFirstPersonCamera@@UAEXM@Z ENDP		; CFirstPersonCamera::FrameMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFirstPersonCamera@@QAE@XZ PROC			; CFirstPersonCamera::CFirstPersonCamera
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 683
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0CBaseCamera@@QAE@XZ	; CBaseCamera::CBaseCamera
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CFirstPersonCamera@@6B@
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	81 c1 90 02 00
	00		 add	 ecx, 656		; 00000290H
  00028	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	c7 81 d0 02 00
	00 07 00 00 00	 mov	 DWORD PTR [ecx+720], 7
  0003a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	c6 82 d4 02 00
	00 00		 mov	 BYTE PTR [edx+724], 0
; Line 684
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	83 c4 04	 add	 esp, 4
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
??0CFirstPersonCamera@@QAE@XZ ENDP			; CFirstPersonCamera::CFirstPersonCamera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -60						; size = 12
$T2 = -48						; size = 12
$T3 = -36						; size = 12
_iUserIndex$4 = -24					; size = 4
_fMostRecentlyActiveTime$5 = -20			; size = 8
_iMostRecentlyActive$6 = -12				; size = 4
_iUserIndex$7 = -8					; size = 4
_this$ = -4						; size = 4
_bGetKeyboardInput$ = 8					; size = 1
_bGetMouseInput$ = 12					; size = 1
_bGetGamepadInput$ = 16					; size = 1
?GetInput@CBaseCamera@@IAEX_N00@Z PROC			; CBaseCamera::GetInput
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 416
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000b	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 417
  0001b	51		 push	 ecx
  0001c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00024	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00029	51		 push	 ecx
  0002a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00032	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00037	51		 push	 ecx
  00038	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00040	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00045	8d 4d dc	 lea	 ecx, DWORD PTR $T3[ebp]
  00048	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@MMM@Z ; DirectX::XMFLOAT3::XMFLOAT3
  0004d	50		 push	 eax
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	81 c1 bc 01 00
	00		 add	 ecx, 444		; 000001bcH
  00057	e8 00 00 00 00	 call	 ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT3::operator=
; Line 418
  0005c	0f b6 45 08	 movzx	 eax, BYTE PTR _bGetKeyboardInput$[ebp]
  00060	85 c0		 test	 eax, eax
  00062	0f 84 97 01 00
	00		 je	 $LN13@GetInput
; Line 421
  00068	b9 01 00 00 00	 mov	 ecx, 1
  0006d	d1 e1		 shl	 ecx, 1
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00072	0f b6 84 0a b4
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+436]
  0007a	50		 push	 eax
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?IsKeyDown@CBaseCamera@@IBE_NE@Z ; CBaseCamera::IsKeyDown
  00083	0f b6 c8	 movzx	 ecx, al
  00086	85 c9		 test	 ecx, ecx
  00088	74 1e		 je	 SHORT $LN19@GetInput
; Line 422
  0008a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008d	f3 0f 10 82 c4
	01 00 00	 movss	 xmm0, DWORD PTR [edx+452]
  00095	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  0009d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a0	f3 0f 11 80 c4
	01 00 00	 movss	 DWORD PTR [eax+452], xmm0
$LN19@GetInput:
; Line 423
  000a8	b9 01 00 00 00	 mov	 ecx, 1
  000ad	6b d1 03	 imul	 edx, ecx, 3
  000b0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	0f b6 8c 10 b4
	01 00 00	 movzx	 ecx, BYTE PTR [eax+edx+436]
  000bb	51		 push	 ecx
  000bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bf	e8 00 00 00 00	 call	 ?IsKeyDown@CBaseCamera@@IBE_NE@Z ; CBaseCamera::IsKeyDown
  000c4	0f b6 d0	 movzx	 edx, al
  000c7	85 d2		 test	 edx, edx
  000c9	74 1e		 je	 SHORT $LN18@GetInput
; Line 424
  000cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ce	f3 0f 10 80 c4
	01 00 00	 movss	 xmm0, DWORD PTR [eax+452]
  000d6	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  000de	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e1	f3 0f 11 81 c4
	01 00 00	 movss	 DWORD PTR [ecx+452], xmm0
$LN18@GetInput:
; Line 425
  000e9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ec	0f b6 82 72 02
	00 00		 movzx	 eax, BYTE PTR [edx+626]
  000f3	85 c0		 test	 eax, eax
  000f5	0f 84 82 00 00
	00		 je	 $LN15@GetInput
; Line 427
  000fb	b9 01 00 00 00	 mov	 ecx, 1
  00100	c1 e1 02	 shl	 ecx, 2
  00103	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00106	0f b6 84 0a b4
	01 00 00	 movzx	 eax, BYTE PTR [edx+ecx+436]
  0010e	50		 push	 eax
  0010f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	e8 00 00 00 00	 call	 ?IsKeyDown@CBaseCamera@@IBE_NE@Z ; CBaseCamera::IsKeyDown
  00117	0f b6 c8	 movzx	 ecx, al
  0011a	85 c9		 test	 ecx, ecx
  0011c	74 1e		 je	 SHORT $LN16@GetInput
; Line 428
  0011e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00121	f3 0f 10 82 c0
	01 00 00	 movss	 xmm0, DWORD PTR [edx+448]
  00129	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00131	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00134	f3 0f 11 80 c0
	01 00 00	 movss	 DWORD PTR [eax+448], xmm0
$LN16@GetInput:
; Line 429
  0013c	b9 01 00 00 00	 mov	 ecx, 1
  00141	6b d1 05	 imul	 edx, ecx, 5
  00144	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00147	0f b6 8c 10 b4
	01 00 00	 movzx	 ecx, BYTE PTR [eax+edx+436]
  0014f	51		 push	 ecx
  00150	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00153	e8 00 00 00 00	 call	 ?IsKeyDown@CBaseCamera@@IBE_NE@Z ; CBaseCamera::IsKeyDown
  00158	0f b6 d0	 movzx	 edx, al
  0015b	85 d2		 test	 edx, edx
  0015d	74 1e		 je	 SHORT $LN15@GetInput
; Line 430
  0015f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00162	f3 0f 10 80 c0
	01 00 00	 movss	 xmm0, DWORD PTR [eax+448]
  0016a	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00172	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00175	f3 0f 11 81 c0
	01 00 00	 movss	 DWORD PTR [ecx+448], xmm0
$LN15@GetInput:
; Line 432
  0017d	ba 01 00 00 00	 mov	 edx, 1
  00182	c1 e2 00	 shl	 edx, 0
  00185	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00188	0f b6 8c 10 b4
	01 00 00	 movzx	 ecx, BYTE PTR [eax+edx+436]
  00190	51		 push	 ecx
  00191	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00194	e8 00 00 00 00	 call	 ?IsKeyDown@CBaseCamera@@IBE_NE@Z ; CBaseCamera::IsKeyDown
  00199	0f b6 d0	 movzx	 edx, al
  0019c	85 d2		 test	 edx, edx
  0019e	74 1e		 je	 SHORT $LN14@GetInput
; Line 433
  001a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a3	f3 0f 10 80 bc
	01 00 00	 movss	 xmm0, DWORD PTR [eax+444]
  001ab	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  001b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b6	f3 0f 11 81 bc
	01 00 00	 movss	 DWORD PTR [ecx+444], xmm0
$LN14@GetInput:
; Line 434
  001be	ba 01 00 00 00	 mov	 edx, 1
  001c3	6b c2 00	 imul	 eax, edx, 0
  001c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c9	0f b6 94 01 b4
	01 00 00	 movzx	 edx, BYTE PTR [ecx+eax+436]
  001d1	52		 push	 edx
  001d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d5	e8 00 00 00 00	 call	 ?IsKeyDown@CBaseCamera@@IBE_NE@Z ; CBaseCamera::IsKeyDown
  001da	0f b6 c0	 movzx	 eax, al
  001dd	85 c0		 test	 eax, eax
  001df	74 1e		 je	 SHORT $LN13@GetInput
; Line 435
  001e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e4	f3 0f 10 81 bc
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+444]
  001ec	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  001f4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001f7	f3 0f 11 82 bc
	01 00 00	 movss	 DWORD PTR [edx+444], xmm0
$LN13@GetInput:
; Line 438
  001ff	0f b6 45 0c	 movzx	 eax, BYTE PTR _bGetMouseInput$[ebp]
  00203	85 c0		 test	 eax, eax
  00205	74 08		 je	 SHORT $LN12@GetInput
; Line 440
  00207	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0020a	e8 00 00 00 00	 call	 ?UpdateMouseDelta@CBaseCamera@@IAEXXZ ; CBaseCamera::UpdateMouseDelta
$LN12@GetInput:
; Line 443
  0020f	0f b6 4d 10	 movzx	 ecx, BYTE PTR _bGetGamepadInput$[ebp]
  00213	85 c9		 test	 ecx, ecx
  00215	0f 84 5a 02 00
	00		 je	 $LN1@GetInput
; Line 445
  0021b	51		 push	 ecx
  0021c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00224	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00229	51		 push	 ecx
  0022a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00232	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00237	51		 push	 ecx
  00238	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00240	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00245	8d 4d d0	 lea	 ecx, DWORD PTR $T2[ebp]
  00248	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@MMM@Z ; DirectX::XMFLOAT3::XMFLOAT3
  0024d	50		 push	 eax
  0024e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00251	81 c1 78 01 00
	00		 add	 ecx, 376		; 00000178H
  00257	e8 00 00 00 00	 call	 ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT3::operator=
; Line 446
  0025c	51		 push	 ecx
  0025d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00265	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026a	51		 push	 ecx
  0026b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00273	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00278	51		 push	 ecx
  00279	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00281	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00286	8d 4d c4	 lea	 ecx, DWORD PTR $T1[ebp]
  00289	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@MMM@Z ; DirectX::XMFLOAT3::XMFLOAT3
  0028e	50		 push	 eax
  0028f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00292	81 c1 84 01 00
	00		 add	 ecx, 388		; 00000184H
  00298	e8 00 00 00 00	 call	 ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT3::operator=
; Line 449
  0029d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _iUserIndex$7[ebp], 0
  002a4	eb 09		 jmp	 SHORT $LN10@GetInput
$LN9@GetInput:
  002a6	8b 55 f8	 mov	 edx, DWORD PTR _iUserIndex$7[ebp]
  002a9	83 c2 01	 add	 edx, 1
  002ac	89 55 f8	 mov	 DWORD PTR _iUserIndex$7[ebp], edx
$LN10@GetInput:
  002af	83 7d f8 04	 cmp	 DWORD PTR _iUserIndex$7[ebp], 4
  002b3	0f 83 bb 00 00
	00		 jae	 $LN8@GetInput
; Line 451
  002b9	6a 01		 push	 1
  002bb	6a 01		 push	 1
  002bd	6b 45 f8 3c	 imul	 eax, DWORD PTR _iUserIndex$7[ebp], 60
  002c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c4	8d 94 01 88 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+136]
  002cb	52		 push	 edx
  002cc	8b 45 f8	 mov	 eax, DWORD PTR _iUserIndex$7[ebp]
  002cf	50		 push	 eax
  002d0	e8 00 00 00 00	 call	 ?DXUTGetGamepadState@@YAJKPAUDXUT_GAMEPAD@@_N1@Z ; DXUTGetGamepadState
  002d5	83 c4 10	 add	 esp, 16			; 00000010H
; Line 457
  002d8	6b 4d f8 3c	 imul	 ecx, DWORD PTR _iUserIndex$7[ebp], 60
  002dc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002df	0f b7 84 0a 88
	00 00 00	 movzx	 eax, WORD PTR [edx+ecx+136]
  002e7	85 c0		 test	 eax, eax
  002e9	75 72		 jne	 SHORT $LN6@GetInput
  002eb	6b 4d f8 3c	 imul	 ecx, DWORD PTR _iUserIndex$7[ebp], 60
  002ef	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002f2	0f bf 84 0a 8c
	00 00 00	 movsx	 eax, WORD PTR [edx+ecx+140]
  002fa	85 c0		 test	 eax, eax
  002fc	75 5f		 jne	 SHORT $LN6@GetInput
  002fe	6b 4d f8 3c	 imul	 ecx, DWORD PTR _iUserIndex$7[ebp], 60
  00302	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00305	0f bf 84 0a 8c
	00 00 00	 movsx	 eax, WORD PTR [edx+ecx+140]
  0030d	85 c0		 test	 eax, eax
  0030f	75 4c		 jne	 SHORT $LN6@GetInput
  00311	6b 4d f8 3c	 imul	 ecx, DWORD PTR _iUserIndex$7[ebp], 60
  00315	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00318	0f bf 84 0a 90
	00 00 00	 movsx	 eax, WORD PTR [edx+ecx+144]
  00320	85 c0		 test	 eax, eax
  00322	75 39		 jne	 SHORT $LN6@GetInput
  00324	6b 4d f8 3c	 imul	 ecx, DWORD PTR _iUserIndex$7[ebp], 60
  00328	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0032b	0f bf 84 0a 92
	00 00 00	 movsx	 eax, WORD PTR [edx+ecx+146]
  00333	85 c0		 test	 eax, eax
  00335	75 26		 jne	 SHORT $LN6@GetInput
  00337	6b 4d f8 3c	 imul	 ecx, DWORD PTR _iUserIndex$7[ebp], 60
  0033b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0033e	0f b6 84 0a 8a
	00 00 00	 movzx	 eax, BYTE PTR [edx+ecx+138]
  00346	85 c0		 test	 eax, eax
  00348	75 13		 jne	 SHORT $LN6@GetInput
  0034a	6b 4d f8 3c	 imul	 ecx, DWORD PTR _iUserIndex$7[ebp], 60
  0034e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00351	0f b6 84 0a 8b
	00 00 00	 movzx	 eax, BYTE PTR [edx+ecx+139]
  00359	85 c0		 test	 eax, eax
  0035b	74 12		 je	 SHORT $LN7@GetInput
$LN6@GetInput:
; Line 459
  0035d	e8 00 00 00 00	 call	 ?DXUTGetTime@@YGNXZ	; DXUTGetTime
  00362	8b 4d f8	 mov	 ecx, DWORD PTR _iUserIndex$7[ebp]
  00365	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00368	dd 9c ca 90 01
	00 00		 fstp	 QWORD PTR [edx+ecx*8+400]
$LN7@GetInput:
; Line 461
  0036f	e9 32 ff ff ff	 jmp	 $LN9@GetInput
$LN8@GetInput:
; Line 464
  00374	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _iMostRecentlyActive$6[ebp], -1
; Line 465
  0037b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@0000000000000000
  00383	f2 0f 11 45 ec	 movsd	 QWORD PTR _fMostRecentlyActiveTime$5[ebp], xmm0
; Line 466
  00388	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _iUserIndex$4[ebp], 0
  0038f	eb 09		 jmp	 SHORT $LN5@GetInput
$LN4@GetInput:
  00391	8b 45 e8	 mov	 eax, DWORD PTR _iUserIndex$4[ebp]
  00394	83 c0 01	 add	 eax, 1
  00397	89 45 e8	 mov	 DWORD PTR _iUserIndex$4[ebp], eax
$LN5@GetInput:
  0039a	83 7d e8 04	 cmp	 DWORD PTR _iUserIndex$4[ebp], 4
  0039e	73 32		 jae	 SHORT $LN3@GetInput
; Line 468
  003a0	8b 4d e8	 mov	 ecx, DWORD PTR _iUserIndex$4[ebp]
  003a3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003a6	f2 0f 10 84 ca
	90 01 00 00	 movsd	 xmm0, QWORD PTR [edx+ecx*8+400]
  003af	66 0f 2f 45 ec	 comisd	 xmm0, QWORD PTR _fMostRecentlyActiveTime$5[ebp]
  003b4	76 1a		 jbe	 SHORT $LN2@GetInput
; Line 470
  003b6	8b 45 e8	 mov	 eax, DWORD PTR _iUserIndex$4[ebp]
  003b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003bc	f2 0f 10 84 c1
	90 01 00 00	 movsd	 xmm0, QWORD PTR [ecx+eax*8+400]
  003c5	f2 0f 11 45 ec	 movsd	 QWORD PTR _fMostRecentlyActiveTime$5[ebp], xmm0
; Line 471
  003ca	8b 55 e8	 mov	 edx, DWORD PTR _iUserIndex$4[ebp]
  003cd	89 55 f4	 mov	 DWORD PTR _iMostRecentlyActive$6[ebp], edx
$LN2@GetInput:
; Line 473
  003d0	eb bf		 jmp	 SHORT $LN4@GetInput
$LN3@GetInput:
; Line 476
  003d2	83 7d f4 00	 cmp	 DWORD PTR _iMostRecentlyActive$6[ebp], 0
  003d6	0f 8c 99 00 00
	00		 jl	 $LN1@GetInput
  003dc	6b 45 f4 3c	 imul	 eax, DWORD PTR _iMostRecentlyActive$6[ebp], 60
  003e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003e3	0f b6 94 01 a8
	00 00 00	 movzx	 edx, BYTE PTR [ecx+eax+168]
  003eb	85 d2		 test	 edx, edx
  003ed	0f 84 82 00 00
	00		 je	 $LN1@GetInput
; Line 478
  003f3	6b 45 f4 3c	 imul	 eax, DWORD PTR _iMostRecentlyActive$6[ebp], 60
  003f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003fa	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003fd	8b 84 02 b4 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+180]
  00404	89 81 78 01 00
	00		 mov	 DWORD PTR [ecx+376], eax
; Line 479
  0040a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0040d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00415	f3 0f 11 81 7c
	01 00 00	 movss	 DWORD PTR [ecx+380], xmm0
; Line 480
  0041d	6b 55 f4 3c	 imul	 edx, DWORD PTR _iMostRecentlyActive$6[ebp], 60
  00421	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00424	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00427	8b 94 11 b8 00
	00 00		 mov	 edx, DWORD PTR [ecx+edx+184]
  0042e	89 90 80 01 00
	00		 mov	 DWORD PTR [eax+384], edx
; Line 482
  00434	6b 45 f4 3c	 imul	 eax, DWORD PTR _iMostRecentlyActive$6[ebp], 60
  00438	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0043b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0043e	8b 84 02 ac 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+172]
  00445	89 81 84 01 00
	00		 mov	 DWORD PTR [ecx+388], eax
; Line 483
  0044b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0044e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00456	f3 0f 11 81 88
	01 00 00	 movss	 DWORD PTR [ecx+392], xmm0
; Line 484
  0045e	6b 55 f4 3c	 imul	 edx, DWORD PTR _iMostRecentlyActive$6[ebp], 60
  00462	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00465	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00468	8b 94 11 b0 00
	00 00		 mov	 edx, DWORD PTR [ecx+edx+176]
  0046f	89 90 8c 01 00
	00		 mov	 DWORD PTR [eax+396], edx
$LN1@GetInput:
; Line 487
  00475	5f		 pop	 edi
  00476	83 c4 3c	 add	 esp, 60			; 0000003cH
  00479	3b ec		 cmp	 ebp, esp
  0047b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00480	8b e5		 mov	 esp, ebp
  00482	5d		 pop	 ebp
  00483	c2 0c 00	 ret	 12			; 0000000cH
?GetInput@CBaseCamera@@IAEX_N00@Z ENDP			; CBaseCamera::GetInput
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -444						; size = 12
$T2 = -432						; size = 16
$T3 = -416						; size = 16
_vVelocityDrag$4 = -400					; size = 16
$T5 = -384						; size = 16
_vVelocity$6 = -352					; size = 16
$T7 = -320						; size = 16
$T8 = -304						; size = 16
$T9 = -288						; size = 16
$T10 = -272						; size = 16
_vAccel$ = -240						; size = 16
$T11 = -208						; size = 16
_vGamePadLeftThumb$ = -192				; size = 16
$T12 = -176						; size = 16
_vKeyboardDirection$ = -160				; size = 16
$T13 = -144						; size = 16
$T14 = -128						; size = 16
$T15 = -112						; size = 16
_vRotVelocity$ = -96					; size = 16
$T16 = -80						; size = 16
_vMouseDelta$ = -64					; size = 16
$T17 = -48						; size = 16
_vGamePadRightThumb$ = -32				; size = 16
_this$ = -4						; size = 4
_fElapsedTime$ = 8					; size = 4
?UpdateVelocity@CBaseCamera@@IAEXM@Z PROC		; CBaseCamera::UpdateVelocity
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 542
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c0 01 00
	00		 sub	 esp, 448		; 000001c0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 40 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-448]
  00024	b9 70 00 00 00	 mov	 ecx, 112		; 00000070H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 543
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	f3 0f 10 88 8c
	01 00 00	 movss	 xmm1, DWORD PTR [eax+396]
  0003f	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00046	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@00000000
  0004e	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@00000000
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	f3 0f 10 81 84
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+388]
  00061	e8 00 00 00 00	 call	 ?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
  00066	0f 29 45 d0	 movaps	 XMMWORD PTR $T17[ebp], xmm0
  0006a	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  0006e	0f 29 45 e0	 movaps	 XMMWORD PTR _vGamePadRightThumb$[ebp], xmm0
; Line 545
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	81 c1 d8 01 00
	00		 add	 ecx, 472		; 000001d8H
  0007b	e8 00 00 00 00	 call	 ?XMLoadFloat2@DirectX@@YQ?AT__m128@@PBUXMFLOAT2@1@@Z ; DirectX::XMLoadFloat2
  00080	0f 29 45 b0	 movaps	 XMMWORD PTR $T16[ebp], xmm0
  00084	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  00088	0f 29 45 c0	 movaps	 XMMWORD PTR _vMouseDelta$[ebp], xmm0
; Line 546
  0008c	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vGamePadRightThumb$[ebp]
  00090	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3ca3d70a
  00098	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  0009d	0f 29 45 80	 movaps	 XMMWORD PTR $T14[ebp], xmm0
  000a1	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vMouseDelta$[ebp]
  000a5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a8	f3 0f 10 8a 64
	02 00 00	 movss	 xmm1, DWORD PTR [edx+612]
  000b0	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  000b5	0f 29 45 90	 movaps	 XMMWORD PTR $T15[ebp], xmm0
  000b9	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR $T14[ebp]
  000bd	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  000c1	e8 00 00 00 00	 call	 ??HDirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::operator+
  000c6	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  000cd	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  000d4	0f 29 45 a0	 movaps	 XMMWORD PTR _vRotVelocity$[ebp], xmm0
; Line 548
  000d8	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _vRotVelocity$[ebp]
  000dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	81 c1 4c 02 00
	00		 add	 ecx, 588		; 0000024cH
  000e5	e8 00 00 00 00	 call	 ?XMStoreFloat2@DirectX@@YQXPAUXMFLOAT2@1@T__m128@@@Z ; DirectX::XMStoreFloat2
; Line 550
  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ed	81 c1 bc 01 00
	00		 add	 ecx, 444		; 000001bcH
  000f3	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  000f8	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  000ff	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  00106	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vKeyboardDirection$[ebp], xmm0
; Line 551
  0010d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	81 c1 78 01 00
	00		 add	 ecx, 376		; 00000178H
  00116	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  0011b	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00122	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  00129	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vGamePadLeftThumb$[ebp], xmm0
; Line 552
  00130	0f 28 8d 40 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vGamePadLeftThumb$[ebp]
  00137	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vKeyboardDirection$[ebp]
  0013e	e8 00 00 00 00	 call	 ??HDirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::operator+
  00143	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  0014a	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  00151	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vAccel$[ebp], xmm0
; Line 556
  00158	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vAccel$[ebp]
  0015f	e8 00 00 00 00	 call	 ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
  00164	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  0016b	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00172	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vAccel$[ebp], xmm0
; Line 559
  00179	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0017c	51		 push	 ecx
  0017d	f3 0f 10 80 68
	02 00 00	 movss	 xmm0, DWORD PTR [eax+616]
  00185	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018a	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _vAccel$[ebp]
  00190	51		 push	 ecx
  00191	e8 00 00 00 00	 call	 ??XDirectX@@YAAAT__m128@@AAT1@M@Z ; DirectX::operator*=
  00196	83 c4 08	 add	 esp, 8
; Line 561
  00199	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0019c	0f b6 82 6f 02
	00 00		 movzx	 eax, BYTE PTR [edx+623]
  001a3	85 c0		 test	 eax, eax
  001a5	0f 84 87 01 00
	00		 je	 $LN6@UpdateVelo
; Line 564
  001ab	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vAccel$[ebp]
  001b2	e8 00 00 00 00	 call	 ?XMVector3LengthSq@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3LengthSq
  001b7	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  001be	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  001c5	e8 00 00 00 00	 call	 ?XMVectorGetX@DirectX@@YQMT__m128@@@Z ; DirectX::XMVectorGetX
  001ca	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  001d1	76 5f		 jbe	 SHORT $LN5@UpdateVelo
; Line 570
  001d3	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vAccel$[ebp]
  001da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001dd	81 c1 2c 02 00
	00		 add	 ecx, 556		; 0000022cH
  001e3	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 572
  001e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001eb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001ee	8b 82 48 02 00
	00		 mov	 eax, DWORD PTR [edx+584]
  001f4	89 81 44 02 00
	00		 mov	 DWORD PTR [ecx+580], eax
; Line 574
  001fa	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vAccel$[ebp]
  00201	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00204	f3 0f 10 89 44
	02 00 00	 movss	 xmm1, DWORD PTR [ecx+580]
  0020c	e8 00 00 00 00	 call	 ??KDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator/
  00211	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00218	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0021f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00222	81 c1 38 02 00
	00		 add	 ecx, 568		; 00000238H
  00228	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 576
  0022d	e9 fe 00 00 00	 jmp	 $LN2@UpdateVelo
$LN5@UpdateVelo:
; Line 579
  00232	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00235	f3 0f 10 82 44
	02 00 00	 movss	 xmm0, DWORD PTR [edx+580]
  0023d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00244	0f 86 a2 00 00
	00		 jbe	 $LN3@UpdateVelo
; Line 582
  0024a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0024d	81 c1 2c 02 00
	00		 add	 ecx, 556		; 0000022cH
  00253	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  00258	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0025f	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00266	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _vVelocity$6[ebp], xmm0
; Line 583
  0026d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00270	81 c1 38 02 00
	00		 add	 ecx, 568		; 00000238H
  00276	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  0027b	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00282	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00289	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR _vVelocityDrag$4[ebp], xmm0
; Line 585
  00290	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vVelocityDrag$4[ebp]
  00297	f3 0f 10 4b 08	 movss	 xmm1, DWORD PTR _fElapsedTime$[ebx]
  0029c	e8 00 00 00 00	 call	 ??DDirectX@@YQ?AT__m128@@T1@M@Z ; DirectX::operator*
  002a1	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  002a8	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  002af	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR _vVelocity$6[ebp]
  002b5	e8 00 00 00 00	 call	 ??ZDirectX@@YQAAT__m128@@AAT1@T1@@Z ; DirectX::operator-=
; Line 587
  002ba	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vVelocity$6[ebp]
  002c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c4	81 c1 2c 02 00
	00		 add	 ecx, 556		; 0000022cH
  002ca	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 589
  002cf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d2	f3 0f 10 80 44
	02 00 00	 movss	 xmm0, DWORD PTR [eax+580]
  002da	f3 0f 5c 43 08	 subss	 xmm0, DWORD PTR _fElapsedTime$[ebx]
  002df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002e2	f3 0f 11 81 44
	02 00 00	 movss	 DWORD PTR [ecx+580], xmm0
; Line 591
  002ea	eb 44		 jmp	 SHORT $LN2@UpdateVelo
$LN3@UpdateVelo:
; Line 594
  002ec	51		 push	 ecx
  002ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	51		 push	 ecx
  002fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00303	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00308	51		 push	 ecx
  00309	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00311	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00316	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0031c	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@MMM@Z ; DirectX::XMFLOAT3::XMFLOAT3
  00321	50		 push	 eax
  00322	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00325	81 c1 2c 02 00
	00		 add	 ecx, 556		; 0000022cH
  0032b	e8 00 00 00 00	 call	 ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT3::operator=
$LN2@UpdateVelo:
; Line 598
  00330	eb 15		 jmp	 SHORT $LN1@UpdateVelo
$LN6@UpdateVelo:
; Line 601
  00332	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vAccel$[ebp]
  00339	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0033c	81 c1 2c 02 00
	00		 add	 ecx, 556		; 0000022cH
  00342	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
$LN1@UpdateVelo:
; Line 603
  00347	52		 push	 edx
  00348	8b cd		 mov	 ecx, ebp
  0034a	50		 push	 eax
  0034b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@UpdateVelo
  00351	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00356	58		 pop	 eax
  00357	5a		 pop	 edx
  00358	5f		 pop	 edi
  00359	8b e5		 mov	 esp, ebp
  0035b	5d		 pop	 ebp
  0035c	8b e3		 mov	 esp, ebx
  0035e	5b		 pop	 ebx
  0035f	c2 04 00	 ret	 4
  00362	8b ff		 npad	 2
$LN12@UpdateVelo:
  00364	02 00 00 00	 DD	 2
  00368	00 00 00 00	 DD	 $LN11@UpdateVelo
$LN11@UpdateVelo:
  0036c	10 ff ff ff	 DD	 -240			; ffffff10H
  00370	10 00 00 00	 DD	 16			; 00000010H
  00374	00 00 00 00	 DD	 $LN9@UpdateVelo
  00378	a0 fe ff ff	 DD	 -352			; fffffea0H
  0037c	10 00 00 00	 DD	 16			; 00000010H
  00380	00 00 00 00	 DD	 $LN10@UpdateVelo
$LN10@UpdateVelo:
  00384	76		 DB	 118			; 00000076H
  00385	56		 DB	 86			; 00000056H
  00386	65		 DB	 101			; 00000065H
  00387	6c		 DB	 108			; 0000006cH
  00388	6f		 DB	 111			; 0000006fH
  00389	63		 DB	 99			; 00000063H
  0038a	69		 DB	 105			; 00000069H
  0038b	74		 DB	 116			; 00000074H
  0038c	79		 DB	 121			; 00000079H
  0038d	00		 DB	 0
$LN9@UpdateVelo:
  0038e	76		 DB	 118			; 00000076H
  0038f	41		 DB	 65			; 00000041H
  00390	63		 DB	 99			; 00000063H
  00391	63		 DB	 99			; 00000063H
  00392	65		 DB	 101			; 00000065H
  00393	6c		 DB	 108			; 0000006cH
  00394	00		 DB	 0
?UpdateVelocity@CBaseCamera@@IAEXM@Z ENDP		; CBaseCamera::UpdateVelocity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fPercentOfOld$ = -112					; size = 4
_fPercentOfNew$ = -108					; size = 4
_mi$1 = -100						; size = 40
_ptCenter$2 = -52					; size = 8
_ptCurMouseDelta$ = -36					; size = 8
_ptCurMousePos$ = -20					; size = 8
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?UpdateMouseDelta@CBaseCamera@@IAEXXZ PROC		; CBaseCamera::UpdateMouseDelta
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 494
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  0000c	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 497
  00026	8b f4		 mov	 esi, esp
  00028	8d 45 ec	 lea	 eax, DWORD PTR _ptCurMousePos$[ebp]
  0002b	50		 push	 eax
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCursorPos@4
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 501
  00039	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8b 55 ec	 mov	 edx, DWORD PTR _ptCurMousePos$[ebp]
  0003f	2b 91 c8 01 00
	00		 sub	 edx, DWORD PTR [ecx+456]
  00045	89 55 dc	 mov	 DWORD PTR _ptCurMouseDelta$[ebp], edx
; Line 502
  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 4d f0	 mov	 ecx, DWORD PTR _ptCurMousePos$[ebp+4]
  0004e	2b 88 cc 01 00
	00		 sub	 ecx, DWORD PTR [eax+460]
  00054	89 4d e0	 mov	 DWORD PTR _ptCurMouseDelta$[ebp+4], ecx
; Line 505
  00057	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0005a	8b 45 ec	 mov	 eax, DWORD PTR _ptCurMousePos$[ebp]
  0005d	89 82 c8 01 00
	00		 mov	 DWORD PTR [edx+456], eax
  00063	8b 4d f0	 mov	 ecx, DWORD PTR _ptCurMousePos$[ebp+4]
  00066	89 8a cc 01 00
	00		 mov	 DWORD PTR [edx+460], ecx
; Line 507
  0006c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006f	0f b6 82 74 02
	00 00		 movzx	 eax, BYTE PTR [edx+628]
  00076	85 c0		 test	 eax, eax
  00078	74 72		 je	 SHORT $LN1@UpdateMous
  0007a	e8 00 00 00 00	 call	 ?DXUTIsActive@@YG_NXZ	; DXUTIsActive
  0007f	0f b6 c8	 movzx	 ecx, al
  00082	85 c9		 test	 ecx, ecx
  00084	74 66		 je	 SHORT $LN1@UpdateMous
; Line 518
  00086	c7 45 9c 28 00
	00 00		 mov	 DWORD PTR _mi$1[ebp], 40 ; 00000028H
; Line 519
  0008d	8d 55 9c	 lea	 edx, DWORD PTR _mi$1[ebp]
  00090	52		 push	 edx
  00091	6a 02		 push	 2
  00093	e8 00 00 00 00	 call	 ?DXUTGetHWND@@YGPAUHWND__@@XZ ; DXUTGetHWND
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?DXUTMonitorFromWindow@@YGPAUHMONITOR__@@PAUHWND__@@K@Z ; DXUTMonitorFromWindow
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ?DXUTGetMonitorInfo@@YGHPAUHMONITOR__@@PAUtagMONITORINFO@@@Z ; DXUTGetMonitorInfo
; Line 520
  000a4	8b 45 a0	 mov	 eax, DWORD PTR _mi$1[ebp+4]
  000a7	03 45 a8	 add	 eax, DWORD PTR _mi$1[ebp+12]
  000aa	99		 cdq
  000ab	2b c2		 sub	 eax, edx
  000ad	d1 f8		 sar	 eax, 1
  000af	89 45 cc	 mov	 DWORD PTR _ptCenter$2[ebp], eax
; Line 521
  000b2	8b 45 a4	 mov	 eax, DWORD PTR _mi$1[ebp+8]
  000b5	03 45 ac	 add	 eax, DWORD PTR _mi$1[ebp+16]
  000b8	99		 cdq
  000b9	2b c2		 sub	 eax, edx
  000bb	d1 f8		 sar	 eax, 1
  000bd	89 45 d0	 mov	 DWORD PTR _ptCenter$2[ebp+4], eax
; Line 522
  000c0	8b f4		 mov	 esi, esp
  000c2	8b 45 d0	 mov	 eax, DWORD PTR _ptCenter$2[ebp+4]
  000c5	50		 push	 eax
  000c6	8b 4d cc	 mov	 ecx, DWORD PTR _ptCenter$2[ebp]
  000c9	51		 push	 ecx
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCursorPos@8
  000d0	3b f4		 cmp	 esi, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 523
  000d7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000da	8b 45 cc	 mov	 eax, DWORD PTR _ptCenter$2[ebp]
  000dd	89 82 c8 01 00
	00		 mov	 DWORD PTR [edx+456], eax
  000e3	8b 4d d0	 mov	 ecx, DWORD PTR _ptCenter$2[ebp+4]
  000e6	89 8a cc 01 00
	00		 mov	 DWORD PTR [edx+460], ecx
$LN1@UpdateMous:
; Line 528
  000ec	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f7	f3 0f 5e 82 e0
	01 00 00	 divss	 xmm0, DWORD PTR [edx+480]
  000ff	f3 0f 11 45 94	 movss	 DWORD PTR _fPercentOfNew$[ebp], xmm0
; Line 529
  00104	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0010c	f3 0f 5c 45 94	 subss	 xmm0, DWORD PTR _fPercentOfNew$[ebp]
  00111	f3 0f 11 45 90	 movss	 DWORD PTR _fPercentOfOld$[ebp], xmm0
; Line 530
  00116	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00119	f3 0f 10 80 d8
	01 00 00	 movss	 xmm0, DWORD PTR [eax+472]
  00121	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _fPercentOfOld$[ebp]
  00126	f3 0f 2a 4d dc	 cvtsi2ss xmm1, DWORD PTR _ptCurMouseDelta$[ebp]
  0012b	f3 0f 59 4d 94	 mulss	 xmm1, DWORD PTR _fPercentOfNew$[ebp]
  00130	f3 0f 58 c1	 addss	 xmm0, xmm1
  00134	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00137	f3 0f 11 81 d8
	01 00 00	 movss	 DWORD PTR [ecx+472], xmm0
; Line 531
  0013f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00142	f3 0f 10 82 dc
	01 00 00	 movss	 xmm0, DWORD PTR [edx+476]
  0014a	f3 0f 59 45 90	 mulss	 xmm0, DWORD PTR _fPercentOfOld$[ebp]
  0014f	f3 0f 2a 4d e0	 cvtsi2ss xmm1, DWORD PTR _ptCurMouseDelta$[ebp+4]
  00154	f3 0f 59 4d 94	 mulss	 xmm1, DWORD PTR _fPercentOfNew$[ebp]
  00159	f3 0f 58 c1	 addss	 xmm0, xmm1
  0015d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00160	f3 0f 11 80 dc
	01 00 00	 movss	 DWORD PTR [eax+476], xmm0
; Line 533
  00168	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0016e	f3 0f 10 81 d8
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+472]
  00176	f3 0f 59 82 64
	02 00 00	 mulss	 xmm0, DWORD PTR [edx+612]
  0017e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00181	f3 0f 11 80 4c
	02 00 00	 movss	 DWORD PTR [eax+588], xmm0
; Line 534
  00189	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0018c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0018f	f3 0f 10 81 dc
	01 00 00	 movss	 xmm0, DWORD PTR [ecx+476]
  00197	f3 0f 59 82 64
	02 00 00	 mulss	 xmm0, DWORD PTR [edx+612]
  0019f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001a2	f3 0f 11 80 50
	02 00 00	 movss	 DWORD PTR [eax+592], xmm0
; Line 535
  001aa	52		 push	 edx
  001ab	8b cd		 mov	 ecx, ebp
  001ad	50		 push	 eax
  001ae	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@UpdateMous
  001b4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001b9	58		 pop	 eax
  001ba	5a		 pop	 edx
  001bb	5f		 pop	 edi
  001bc	5e		 pop	 esi
  001bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c0	33 cd		 xor	 ecx, ebp
  001c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c7	83 c4 70	 add	 esp, 112		; 00000070H
  001ca	3b ec		 cmp	 ebp, esp
  001cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d1	8b e5		 mov	 esp, ebp
  001d3	5d		 pop	 ebp
  001d4	c3		 ret	 0
  001d5	8d 49 00	 npad	 3
$LN9@UpdateMous:
  001d8	04 00 00 00	 DD	 4
  001dc	00 00 00 00	 DD	 $LN8@UpdateMous
$LN8@UpdateMous:
  001e0	ec ff ff ff	 DD	 -20			; ffffffecH
  001e4	08 00 00 00	 DD	 8
  001e8	00 00 00 00	 DD	 $LN4@UpdateMous
  001ec	dc ff ff ff	 DD	 -36			; ffffffdcH
  001f0	08 00 00 00	 DD	 8
  001f4	00 00 00 00	 DD	 $LN5@UpdateMous
  001f8	cc ff ff ff	 DD	 -52			; ffffffccH
  001fc	08 00 00 00	 DD	 8
  00200	00 00 00 00	 DD	 $LN6@UpdateMous
  00204	9c ff ff ff	 DD	 -100			; ffffff9cH
  00208	28 00 00 00	 DD	 40			; 00000028H
  0020c	00 00 00 00	 DD	 $LN7@UpdateMous
$LN7@UpdateMous:
  00210	6d		 DB	 109			; 0000006dH
  00211	69		 DB	 105			; 00000069H
  00212	00		 DB	 0
$LN6@UpdateMous:
  00213	70		 DB	 112			; 00000070H
  00214	74		 DB	 116			; 00000074H
  00215	43		 DB	 67			; 00000043H
  00216	65		 DB	 101			; 00000065H
  00217	6e		 DB	 110			; 0000006eH
  00218	74		 DB	 116			; 00000074H
  00219	65		 DB	 101			; 00000065H
  0021a	72		 DB	 114			; 00000072H
  0021b	00		 DB	 0
$LN5@UpdateMous:
  0021c	70		 DB	 112			; 00000070H
  0021d	74		 DB	 116			; 00000074H
  0021e	43		 DB	 67			; 00000043H
  0021f	75		 DB	 117			; 00000075H
  00220	72		 DB	 114			; 00000072H
  00221	4d		 DB	 77			; 0000004dH
  00222	6f		 DB	 111			; 0000006fH
  00223	75		 DB	 117			; 00000075H
  00224	73		 DB	 115			; 00000073H
  00225	65		 DB	 101			; 00000065H
  00226	44		 DB	 68			; 00000044H
  00227	65		 DB	 101			; 00000065H
  00228	6c		 DB	 108			; 0000006cH
  00229	74		 DB	 116			; 00000074H
  0022a	61		 DB	 97			; 00000061H
  0022b	00		 DB	 0
$LN4@UpdateMous:
  0022c	70		 DB	 112			; 00000070H
  0022d	74		 DB	 116			; 00000074H
  0022e	43		 DB	 67			; 00000043H
  0022f	75		 DB	 117			; 00000075H
  00230	72		 DB	 114			; 00000072H
  00231	4d		 DB	 77			; 0000004dH
  00232	6f		 DB	 111			; 0000006fH
  00233	75		 DB	 117			; 00000075H
  00234	73		 DB	 115			; 00000073H
  00235	65		 DB	 101			; 00000065H
  00236	50		 DB	 80			; 00000050H
  00237	6f		 DB	 111			; 0000006fH
  00238	73		 DB	 115			; 00000073H
  00239	00		 DB	 0
?UpdateMouseDelta@CBaseCamera@@IAEXXZ ENDP		; CBaseCamera::UpdateMouseDelta
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ConstrainToBoundary@CBaseCamera@@IAE?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -112						; size = 16
$T2 = -96						; size = 16
_vMax$ = -80						; size = 16
$T3 = -64						; size = 16
_vMin$ = -48						; size = 16
_this$ = -20						; size = 4
_v$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?ConstrainToBoundary@CBaseCamera@@IAE?AT__m128@@T2@@Z PROC ; CBaseCamera::ConstrainToBoundary, COMDAT
; _this$ = ecx
; _v$ = xmm0
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.h
; Line 202
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 70	 sub	 esp, 112		; 00000070H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  0001e	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 45 f0	 movaps	 XMMWORD PTR _v$[ebp], xmm0
  0002f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
; Line 205
  00032	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	81 c1 78 02 00
	00		 add	 ecx, 632		; 00000278H
  0003b	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  00040	0f 29 45 c0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00044	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00048	0f 29 45 d0	 movaps	 XMMWORD PTR _vMin$[ebp], xmm0
; Line 206
  0004c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	81 c1 84 02 00
	00		 add	 ecx, 644		; 00000284H
  00055	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  0005a	0f 29 45 a0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0005e	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00062	0f 29 45 b0	 movaps	 XMMWORD PTR _vMax$[ebp], xmm0
; Line 209
  00066	0f 28 55 b0	 movaps	 xmm2, XMMWORD PTR _vMax$[ebp]
  0006a	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _vMin$[ebp]
  0006e	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _v$[ebp]
  00072	e8 00 00 00 00	 call	 ?XMVectorClamp@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorClamp
  00077	0f 29 45 90	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0007b	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
  0007e	0f 10 45 90	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  00082	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00085	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 210
  00088	5f		 pop	 edi
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	8b e3		 mov	 esp, ebx
  0008e	5b		 pop	 ebx
  0008f	c2 04 00	 ret	 4
?ConstrainToBoundary@CBaseCamera@@IAE?AT__m128@@T2@@Z ENDP ; CBaseCamera::ConstrainToBoundary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsKeyDown@CBaseCamera@@IBE_NE@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 1
?IsKeyDown@CBaseCamera@@IBE_NE@Z PROC			; CBaseCamera::IsKeyDown, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.h
; Line 198
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	0f b6 45 08	 movzx	 eax, BYTE PTR _key$[ebp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	74 09		 je	 SHORT $LN3@IsKeyDown
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00027	eb 07		 jmp	 SHORT $LN4@IsKeyDown
$LN3@IsKeyDown:
  00029	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@IsKeyDown:
  00030	8a 45 f8	 mov	 al, BYTE PTR tv67[ebp]
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?IsKeyDown@CBaseCamera@@IBE_NE@Z ENDP			; CBaseCamera::IsKeyDown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_nKey$ = 8						; size = 4
?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z PROC ; CBaseCamera::MapKey
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 610
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 613
  00017	8b 45 08	 mov	 eax, DWORD PTR _nKey$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR tv64[ebp], eax
  0001d	8b 4d f8	 mov	 ecx, DWORD PTR tv64[ebp]
  00020	83 e9 11	 sub	 ecx, 17			; 00000011H
  00023	89 4d f8	 mov	 DWORD PTR tv64[ebp], ecx
  00026	83 7d f8 58	 cmp	 DWORD PTR tv64[ebp], 88	; 00000058H
  0002a	0f 87 97 00 00
	00		 ja	 $LN21@MapKey
  00030	8b 55 f8	 mov	 edx, DWORD PTR tv64[ebp]
  00033	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN25@MapKey[edx]
  0003a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN26@MapKey[eax*4]
$LN20@MapKey:
; Line 616
  00041	b8 07 00 00 00	 mov	 eax, 7
  00046	e9 81 00 00 00	 jmp	 $LN23@MapKey
$LN19@MapKey:
; Line 618
  0004b	33 c0		 xor	 eax, eax
  0004d	eb 7d		 jmp	 SHORT $LN23@MapKey
$LN18@MapKey:
; Line 620
  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	eb 76		 jmp	 SHORT $LN23@MapKey
$LN17@MapKey:
; Line 622
  00056	b8 02 00 00 00	 mov	 eax, 2
  0005b	eb 6f		 jmp	 SHORT $LN23@MapKey
$LN16@MapKey:
; Line 624
  0005d	b8 03 00 00 00	 mov	 eax, 3
  00062	eb 68		 jmp	 SHORT $LN23@MapKey
$LN15@MapKey:
; Line 626
  00064	b8 04 00 00 00	 mov	 eax, 4
  00069	eb 61		 jmp	 SHORT $LN23@MapKey
$LN14@MapKey:
; Line 628
  0006b	b8 05 00 00 00	 mov	 eax, 5
  00070	eb 5a		 jmp	 SHORT $LN23@MapKey
$LN13@MapKey:
; Line 631
  00072	33 c0		 xor	 eax, eax
  00074	eb 56		 jmp	 SHORT $LN23@MapKey
$LN12@MapKey:
; Line 633
  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	eb 4f		 jmp	 SHORT $LN23@MapKey
$LN11@MapKey:
; Line 635
  0007d	b8 02 00 00 00	 mov	 eax, 2
  00082	eb 48		 jmp	 SHORT $LN23@MapKey
$LN10@MapKey:
; Line 637
  00084	b8 03 00 00 00	 mov	 eax, 3
  00089	eb 41		 jmp	 SHORT $LN23@MapKey
$LN9@MapKey:
; Line 639
  0008b	b8 05 00 00 00	 mov	 eax, 5
  00090	eb 3a		 jmp	 SHORT $LN23@MapKey
$LN8@MapKey:
; Line 641
  00092	b8 04 00 00 00	 mov	 eax, 4
  00097	eb 33		 jmp	 SHORT $LN23@MapKey
$LN7@MapKey:
; Line 644
  00099	33 c0		 xor	 eax, eax
  0009b	eb 2f		 jmp	 SHORT $LN23@MapKey
$LN6@MapKey:
; Line 646
  0009d	b8 01 00 00 00	 mov	 eax, 1
  000a2	eb 28		 jmp	 SHORT $LN23@MapKey
$LN5@MapKey:
; Line 648
  000a4	b8 02 00 00 00	 mov	 eax, 2
  000a9	eb 21		 jmp	 SHORT $LN23@MapKey
$LN4@MapKey:
; Line 650
  000ab	b8 03 00 00 00	 mov	 eax, 3
  000b0	eb 1a		 jmp	 SHORT $LN23@MapKey
$LN3@MapKey:
; Line 652
  000b2	b8 04 00 00 00	 mov	 eax, 4
  000b7	eb 13		 jmp	 SHORT $LN23@MapKey
$LN2@MapKey:
; Line 654
  000b9	b8 05 00 00 00	 mov	 eax, 5
  000be	eb 0c		 jmp	 SHORT $LN23@MapKey
$LN1@MapKey:
; Line 657
  000c0	b8 06 00 00 00	 mov	 eax, 6
  000c5	eb 05		 jmp	 SHORT $LN23@MapKey
$LN21@MapKey:
; Line 660
  000c7	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
$LN23@MapKey:
; Line 661
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 04 00	 ret	 4
  000d2	8b ff		 npad	 2
$LN26@MapKey:
  000d4	00 00 00 00	 DD	 $LN20@MapKey
  000d8	00 00 00 00	 DD	 $LN15@MapKey
  000dc	00 00 00 00	 DD	 $LN14@MapKey
  000e0	00 00 00 00	 DD	 $LN1@MapKey
  000e4	00 00 00 00	 DD	 $LN19@MapKey
  000e8	00 00 00 00	 DD	 $LN17@MapKey
  000ec	00 00 00 00	 DD	 $LN18@MapKey
  000f0	00 00 00 00	 DD	 $LN16@MapKey
  000f4	00 00 00 00	 DD	 $LN13@MapKey
  000f8	00 00 00 00	 DD	 $LN12@MapKey
  000fc	00 00 00 00	 DD	 $LN8@MapKey
  00100	00 00 00 00	 DD	 $LN9@MapKey
  00104	00 00 00 00	 DD	 $LN10@MapKey
  00108	00 00 00 00	 DD	 $LN11@MapKey
  0010c	00 00 00 00	 DD	 $LN4@MapKey
  00110	00 00 00 00	 DD	 $LN2@MapKey
  00114	00 00 00 00	 DD	 $LN7@MapKey
  00118	00 00 00 00	 DD	 $LN6@MapKey
  0011c	00 00 00 00	 DD	 $LN5@MapKey
  00120	00 00 00 00	 DD	 $LN3@MapKey
  00124	00 00 00 00	 DD	 $LN21@MapKey
$LN25@MapKey:
  00128	00		 DB	 0
  00129	14		 DB	 20			; 00000014H
  0012a	14		 DB	 20			; 00000014H
  0012b	14		 DB	 20			; 00000014H
  0012c	14		 DB	 20			; 00000014H
  0012d	14		 DB	 20			; 00000014H
  0012e	14		 DB	 20			; 00000014H
  0012f	14		 DB	 20			; 00000014H
  00130	14		 DB	 20			; 00000014H
  00131	14		 DB	 20			; 00000014H
  00132	14		 DB	 20			; 00000014H
  00133	14		 DB	 20			; 00000014H
  00134	14		 DB	 20			; 00000014H
  00135	14		 DB	 20			; 00000014H
  00136	14		 DB	 20			; 00000014H
  00137	14		 DB	 20			; 00000014H
  00138	01		 DB	 1
  00139	02		 DB	 2
  0013a	14		 DB	 20			; 00000014H
  0013b	03		 DB	 3
  0013c	04		 DB	 4
  0013d	05		 DB	 5
  0013e	06		 DB	 6
  0013f	07		 DB	 7
  00140	14		 DB	 20			; 00000014H
  00141	14		 DB	 20			; 00000014H
  00142	14		 DB	 20			; 00000014H
  00143	14		 DB	 20			; 00000014H
  00144	14		 DB	 20			; 00000014H
  00145	14		 DB	 20			; 00000014H
  00146	14		 DB	 20			; 00000014H
  00147	14		 DB	 20			; 00000014H
  00148	14		 DB	 20			; 00000014H
  00149	14		 DB	 20			; 00000014H
  0014a	14		 DB	 20			; 00000014H
  0014b	14		 DB	 20			; 00000014H
  0014c	14		 DB	 20			; 00000014H
  0014d	14		 DB	 20			; 00000014H
  0014e	14		 DB	 20			; 00000014H
  0014f	14		 DB	 20			; 00000014H
  00150	14		 DB	 20			; 00000014H
  00151	14		 DB	 20			; 00000014H
  00152	14		 DB	 20			; 00000014H
  00153	14		 DB	 20			; 00000014H
  00154	14		 DB	 20			; 00000014H
  00155	14		 DB	 20			; 00000014H
  00156	14		 DB	 20			; 00000014H
  00157	14		 DB	 20			; 00000014H
  00158	08		 DB	 8
  00159	14		 DB	 20			; 00000014H
  0015a	14		 DB	 20			; 00000014H
  0015b	09		 DB	 9
  0015c	0a		 DB	 10			; 0000000aH
  0015d	14		 DB	 20			; 00000014H
  0015e	14		 DB	 20			; 00000014H
  0015f	14		 DB	 20			; 00000014H
  00160	14		 DB	 20			; 00000014H
  00161	14		 DB	 20			; 00000014H
  00162	14		 DB	 20			; 00000014H
  00163	14		 DB	 20			; 00000014H
  00164	14		 DB	 20			; 00000014H
  00165	14		 DB	 20			; 00000014H
  00166	14		 DB	 20			; 00000014H
  00167	14		 DB	 20			; 00000014H
  00168	0b		 DB	 11			; 0000000bH
  00169	14		 DB	 20			; 00000014H
  0016a	0c		 DB	 12			; 0000000cH
  0016b	14		 DB	 20			; 00000014H
  0016c	14		 DB	 20			; 00000014H
  0016d	14		 DB	 20			; 00000014H
  0016e	0d		 DB	 13			; 0000000dH
  0016f	14		 DB	 20			; 00000014H
  00170	14		 DB	 20			; 00000014H
  00171	14		 DB	 20			; 00000014H
  00172	14		 DB	 20			; 00000014H
  00173	14		 DB	 20			; 00000014H
  00174	14		 DB	 20			; 00000014H
  00175	14		 DB	 20			; 00000014H
  00176	14		 DB	 20			; 00000014H
  00177	14		 DB	 20			; 00000014H
  00178	14		 DB	 20			; 00000014H
  00179	0e		 DB	 14			; 0000000eH
  0017a	0f		 DB	 15			; 0000000fH
  0017b	10		 DB	 16			; 00000010H
  0017c	14		 DB	 20			; 00000014H
  0017d	11		 DB	 17			; 00000011H
  0017e	14		 DB	 20			; 00000014H
  0017f	12		 DB	 18			; 00000012H
  00180	13		 DB	 19			; 00000013H
?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z ENDP ; CBaseCamera::MapKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetDragRect@CBaseCamera@@UAEXABUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rc$ = 8						; size = 4
?SetDragRect@CBaseCamera@@UAEXABUtagRECT@@@Z PROC	; CBaseCamera::SetDragRect, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.h
; Line 158
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	05 1c 02 00 00	 add	 eax, 540		; 0000021cH
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _rc$[ebp]
  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	89 10		 mov	 DWORD PTR [eax], edx
  0001d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00020	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00023	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00026	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00029	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0002c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?SetDragRect@CBaseCamera@@UAEXABUtagRECT@@@Z ENDP	; CBaseCamera::SetDragRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -224						; size = 64
$T2 = -160						; size = 64
_mProj$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_fFOV$ = 8						; size = 4
_fAspect$ = 12						; size = 4
_fNearPlane$ = 16					; size = 4
_fFarPlane$ = 20					; size = 4
?SetProjParams@CBaseCamera@@UAEXMMMM@Z PROC		; CBaseCamera::SetProjParams
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 265
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 267
  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _fFOV$[ebx]
  00047	f3 0f 11 80 54
	02 00 00	 movss	 DWORD PTR [eax+596], xmm0
; Line 268
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR _fAspect$[ebx]
  00057	f3 0f 11 81 58
	02 00 00	 movss	 DWORD PTR [ecx+600], xmm0
; Line 269
  0005f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00062	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR _fNearPlane$[ebx]
  00067	f3 0f 11 82 5c
	02 00 00	 movss	 DWORD PTR [edx+604], xmm0
; Line 270
  0006f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00072	f3 0f 10 43 14	 movss	 xmm0, DWORD PTR _fFarPlane$[ebx]
  00077	f3 0f 11 80 60
	02 00 00	 movss	 DWORD PTR [eax+608], xmm0
; Line 272
  0007f	f3 0f 10 5b 14	 movss	 xmm3, DWORD PTR _fFarPlane$[ebx]
  00084	f3 0f 10 53 10	 movss	 xmm2, DWORD PTR _fNearPlane$[ebx]
  00089	f3 0f 10 4b 0c	 movss	 xmm1, DWORD PTR _fAspect$[ebx]
  0008e	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _fFOV$[ebx]
  00093	e8 00 00 00 00	 call	 ?XMMatrixPerspectiveFovLH@DirectX@@YQ?AUXMMATRIX@1@MMMM@Z ; DirectX::XMMatrixPerspectiveFovLH
  00098	0f 29 9d 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  0009f	0f 29 95 40 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  000a6	0f 29 8d 30 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  000ad	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000b4	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000b9	8d b5 20 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  000bf	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR $T2[ebp]
  000c5	f3 a5		 rep movsd
  000c7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000cc	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR $T2[ebp]
  000d2	8d 7d b0	 lea	 edi, DWORD PTR _mProj$[ebp]
  000d5	f3 a5		 rep movsd
; Line 273
  000d7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	83 c1 48	 add	 ecx, 72			; 00000048H
  000dd	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _mProj$[ebp]
  000e1	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _mProj$[ebp+16]
  000e5	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _mProj$[ebp+32]
  000e9	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _mProj$[ebp+48]
  000ed	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 274
  000f2	52		 push	 edx
  000f3	8b cd		 mov	 ecx, ebp
  000f5	50		 push	 eax
  000f6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@SetProjPar
  000fc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00101	58		 pop	 eax
  00102	5a		 pop	 edx
  00103	5f		 pop	 edi
  00104	5e		 pop	 esi
  00105	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00108	33 cd		 xor	 ecx, ebp
  0010a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	8b e3		 mov	 esp, ebx
  00114	5b		 pop	 ebx
  00115	c2 10 00	 ret	 16			; 00000010H
$LN5@SetProjPar:
  00118	01 00 00 00	 DD	 1
  0011c	00 00 00 00	 DD	 $LN4@SetProjPar
$LN4@SetProjPar:
  00120	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00124	40 00 00 00	 DD	 64			; 00000040H
  00128	00 00 00 00	 DD	 $LN3@SetProjPar
$LN3@SetProjPar:
  0012c	6d		 DB	 109			; 0000006dH
  0012d	50		 DB	 80			; 00000050H
  0012e	72		 DB	 114			; 00000072H
  0012f	6f		 DB	 111			; 0000006fH
  00130	6a		 DB	 106			; 0000006aH
  00131	00		 DB	 0
?SetProjParams@CBaseCamera@@UAEXMMMM@Z ENDP		; CBaseCamera::SetProjParams
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv203 = -548						; size = 4
$T1 = -544						; size = 64
$T2 = -480						; size = 64
_fLen$ = -408						; size = 4
_zBasis$ = -400						; size = 12
$T3 = -384						; size = 64
_mInvView$ = -304					; size = 64
$T4 = -224						; size = 64
$T5 = -160						; size = 16
_mView$ = -128						; size = 64
_this$ = -52						; size = 4
_vLookatPt$ = -48					; size = 16
_vEyePt$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
?SetViewParams@CBaseCamera@@UAEXT__m128@@0@Z PROC	; CBaseCamera::SetViewParams
; _this$ = ecx
; _vEyePt$ = xmm0
; _vLookatPt$ = xmm1
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 235
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 28 02 00
	00		 sub	 esp, 552		; 00000228H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd d8 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-552]
  00025	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	0f 29 4d d0	 movaps	 XMMWORD PTR _vLookatPt$[ebp], xmm1
  00040	0f 29 45 e0	 movaps	 XMMWORD PTR _vEyePt$[ebp], xmm0
  00044	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 236
  00047	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vEyePt$[ebp]
  0004b	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	81 c1 fc 01 00
	00		 add	 ecx, 508		; 000001fcH
  00054	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 237
  00059	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vEyePt$[ebp]
  0005d	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	81 c1 e4 01 00
	00		 add	 ecx, 484		; 000001e4H
  00066	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 239
  0006b	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vLookatPt$[ebp]
  0006f	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	81 c1 08 02 00
	00		 add	 ecx, 520		; 00000208H
  00078	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 240
  0007d	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vLookatPt$[ebp]
  00081	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00084	81 c1 f0 01 00
	00		 add	 ecx, 496		; 000001f0H
  0008a	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 243
  0008f	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00095	50		 push	 eax
  00096	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR1
  0009b	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  000a0	0f 10 10	 movups	 xmm2, XMMWORD PTR [eax]
  000a3	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _vLookatPt$[ebp]
  000a7	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vEyePt$[ebp]
  000ab	e8 00 00 00 00	 call	 ?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ; DirectX::XMMatrixLookAtLH
  000b0	0f 29 9d 50 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+48], xmm3
  000b7	0f 29 95 40 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+32], xmm2
  000be	0f 29 8d 30 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+16], xmm1
  000c5	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000cc	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000d1	8d b5 20 fe ff
	ff		 lea	 esi, DWORD PTR $T2[ebp]
  000d7	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR $T4[ebp]
  000dd	f3 a5		 rep movsd
  000df	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000e4	8d b5 20 ff ff
	ff		 lea	 esi, DWORD PTR $T4[ebp]
  000ea	8d 7d 80	 lea	 edi, DWORD PTR _mView$[ebp]
  000ed	f3 a5		 rep movsd
; Line 244
  000ef	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	83 c1 08	 add	 ecx, 8
  000f5	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _mView$[ebp]
  000f9	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _mView$[ebp+16]
  000fd	0f 28 55 a0	 movaps	 xmm2, XMMWORD PTR _mView$[ebp+32]
  00101	0f 28 5d b0	 movaps	 xmm3, XMMWORD PTR _mView$[ebp+48]
  00105	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 246
  0010a	33 c9		 xor	 ecx, ecx
  0010c	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _mView$[ebp]
  00110	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _mView$[ebp+16]
  00114	0f 28 55 a0	 movaps	 xmm2, XMMWORD PTR _mView$[ebp+32]
  00118	0f 28 5d b0	 movaps	 xmm3, XMMWORD PTR _mView$[ebp+48]
  0011c	e8 00 00 00 00	 call	 ?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
  00121	0f 29 9d 10 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00128	0f 29 95 00 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  0012f	0f 29 8d f0 fd
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  00136	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0013d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00142	8d b5 e0 fd ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00148	8d bd 80 fe ff
	ff		 lea	 edi, DWORD PTR $T3[ebp]
  0014e	f3 a5		 rep movsd
  00150	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00155	8d b5 80 fe ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  0015b	8d bd d0 fe ff
	ff		 lea	 edi, DWORD PTR _mInvView$[ebp]
  00161	f3 a5		 rep movsd
; Line 251
  00163	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _zBasis$[ebp]
  00169	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
; Line 252
  0016e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00173	d1 e1		 shl	 ecx, 1
  00175	0f 10 84 0d d0
	fe ff ff	 movups	 xmm0, XMMWORD PTR _mInvView$[ebp+ecx]
  0017d	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR _zBasis$[ebp]
  00183	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 254
  00188	51		 push	 ecx
  00189	f3 0f 10 85 78
	fe ff ff	 movss	 xmm0, DWORD PTR _zBasis$[ebp+8]
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	51		 push	 ecx
  00197	f3 0f 10 85 70
	fe ff ff	 movss	 xmm0, DWORD PTR _zBasis$[ebp]
  0019f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a4	e8 00 00 00 00	 call	 _atan2f
  001a9	83 c4 08	 add	 esp, 8
  001ac	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  001af	d9 9a 14 02 00
	00		 fstp	 DWORD PTR [edx+532]
; Line 255
  001b5	f3 0f 10 85 78
	fe ff ff	 movss	 xmm0, DWORD PTR _zBasis$[ebp+8]
  001bd	f3 0f 59 85 78
	fe ff ff	 mulss	 xmm0, DWORD PTR _zBasis$[ebp+8]
  001c5	f3 0f 10 8d 70
	fe ff ff	 movss	 xmm1, DWORD PTR _zBasis$[ebp]
  001cd	f3 0f 59 8d 70
	fe ff ff	 mulss	 xmm1, DWORD PTR _zBasis$[ebp]
  001d5	f3 0f 58 c1	 addss	 xmm0, xmm1
  001d9	51		 push	 ecx
  001da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001df	e8 00 00 00 00	 call	 _sqrtf
  001e4	83 c4 04	 add	 esp, 4
  001e7	d9 9d 68 fe ff
	ff		 fstp	 DWORD PTR _fLen$[ebp]
; Line 256
  001ed	51		 push	 ecx
  001ee	f3 0f 10 85 68
	fe ff ff	 movss	 xmm0, DWORD PTR _fLen$[ebp]
  001f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fb	51		 push	 ecx
  001fc	f3 0f 10 85 74
	fe ff ff	 movss	 xmm0, DWORD PTR _zBasis$[ebp+4]
  00204	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00209	e8 00 00 00 00	 call	 _atan2f
  0020e	83 c4 08	 add	 esp, 8
  00211	d9 9d dc fd ff
	ff		 fstp	 DWORD PTR tv203[ebp]
  00217	f3 0f 10 85 dc
	fd ff ff	 movss	 xmm0, DWORD PTR tv203[ebp]
  0021f	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00226	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00229	f3 0f 11 80 18
	02 00 00	 movss	 DWORD PTR [eax+536], xmm0
; Line 257
  00231	52		 push	 edx
  00232	8b cd		 mov	 ecx, ebp
  00234	50		 push	 eax
  00235	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@SetViewPar
  0023b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00240	58		 pop	 eax
  00241	5a		 pop	 edx
  00242	5f		 pop	 edi
  00243	5e		 pop	 esi
  00244	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00247	33 cd		 xor	 ecx, ebp
  00249	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024e	8b e5		 mov	 esp, ebp
  00250	5d		 pop	 ebp
  00251	8b e3		 mov	 esp, ebx
  00253	5b		 pop	 ebx
  00254	c3		 ret	 0
  00255	8d 49 00	 npad	 3
$LN7@SetViewPar:
  00258	03 00 00 00	 DD	 3
  0025c	00 00 00 00	 DD	 $LN6@SetViewPar
$LN6@SetViewPar:
  00260	80 ff ff ff	 DD	 -128			; ffffff80H
  00264	40 00 00 00	 DD	 64			; 00000040H
  00268	00 00 00 00	 DD	 $LN3@SetViewPar
  0026c	d0 fe ff ff	 DD	 -304			; fffffed0H
  00270	40 00 00 00	 DD	 64			; 00000040H
  00274	00 00 00 00	 DD	 $LN4@SetViewPar
  00278	70 fe ff ff	 DD	 -400			; fffffe70H
  0027c	0c 00 00 00	 DD	 12			; 0000000cH
  00280	00 00 00 00	 DD	 $LN5@SetViewPar
$LN5@SetViewPar:
  00284	7a		 DB	 122			; 0000007aH
  00285	42		 DB	 66			; 00000042H
  00286	61		 DB	 97			; 00000061H
  00287	73		 DB	 115			; 00000073H
  00288	69		 DB	 105			; 00000069H
  00289	73		 DB	 115			; 00000073H
  0028a	00		 DB	 0
$LN4@SetViewPar:
  0028b	6d		 DB	 109			; 0000006dH
  0028c	49		 DB	 73			; 00000049H
  0028d	6e		 DB	 110			; 0000006eH
  0028e	76		 DB	 118			; 00000076H
  0028f	56		 DB	 86			; 00000056H
  00290	69		 DB	 105			; 00000069H
  00291	65		 DB	 101			; 00000065H
  00292	77		 DB	 119			; 00000077H
  00293	00		 DB	 0
$LN3@SetViewPar:
  00294	6d		 DB	 109			; 0000006dH
  00295	56		 DB	 86			; 00000056H
  00296	69		 DB	 105			; 00000069H
  00297	65		 DB	 101			; 00000065H
  00298	77		 DB	 119			; 00000077H
  00299	00		 DB	 0
?SetViewParams@CBaseCamera@@UAEXT__m128@@0@Z ENDP	; CBaseCamera::SetViewParams
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -80						; size = 16
_vDefaultLookAt$ = -64					; size = 16
$T2 = -48						; size = 16
_vDefaultEye$ = -32					; size = 16
_this$ = -4						; size = 4
?Reset@CBaseCamera@@UAEXXZ PROC				; CBaseCamera::Reset
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 668
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  0001f	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 669
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	81 c1 e4 01 00
	00		 add	 ecx, 484		; 000001e4H
  00038	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  0003d	0f 29 45 d0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00041	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00045	0f 29 45 e0	 movaps	 XMMWORD PTR _vDefaultEye$[ebp], xmm0
; Line 670
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	81 c1 f0 01 00
	00		 add	 ecx, 496		; 000001f0H
  00052	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  00057	0f 29 45 b0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0005b	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  0005f	0f 29 45 c0	 movaps	 XMMWORD PTR _vDefaultLookAt$[ebp], xmm0
; Line 672
  00063	8b f4		 mov	 esi, esp
  00065	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _vDefaultLookAt$[ebp]
  00069	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vDefaultEye$[ebp]
  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 10		 mov	 edx, DWORD PTR [eax]
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00078	ff d0		 call	 eax
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 673
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	8b e3		 mov	 esp, ebx
  00088	5b		 pop	 ebx
  00089	c3		 ret	 0
?Reset@CBaseCamera@@UAEXXZ ENDP				; CBaseCamera::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -32						; size = 4
_ptCursor$1 = -24					; size = 8
_mappedKey$2 = -12					; size = 4
_mappedKey$3 = -8					; size = 4
_this$ = -4						; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z PROC	; CBaseCamera::HandleMessages
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 282
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00012	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00015	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00018	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00021	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00024	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 286
  00027	8b 45 0c	 mov	 eax, DWORD PTR _uMsg$[ebp]
  0002a	89 45 e0	 mov	 DWORD PTR tv64[ebp], eax
  0002d	81 7d e0 01 02
	00 00		 cmp	 DWORD PTR tv64[ebp], 513 ; 00000201H
  00034	77 28		 ja	 SHORT $LN27@HandleMess
  00036	81 7d e0 01 02
	00 00		 cmp	 DWORD PTR tv64[ebp], 513 ; 00000201H
  0003d	0f 84 0e 01 00
	00		 je	 $LN17@HandleMess
  00043	81 7d e0 00 01
	00 00		 cmp	 DWORD PTR tv64[ebp], 256 ; 00000100H
  0004a	74 39		 je	 SHORT $LN22@HandleMess
  0004c	81 7d e0 01 01
	00 00		 cmp	 DWORD PTR tv64[ebp], 257 ; 00000101H
  00053	0f 84 96 00 00
	00		 je	 $LN19@HandleMess
  00059	e9 c5 03 00 00	 jmp	 $LN23@HandleMess
$LN27@HandleMess:
  0005e	8b 4d e0	 mov	 ecx, DWORD PTR tv64[ebp]
  00061	81 e9 02 02 00
	00		 sub	 ecx, 514		; 00000202H
  00067	89 4d e0	 mov	 DWORD PTR tv64[ebp], ecx
  0006a	83 7d e0 13	 cmp	 DWORD PTR tv64[ebp], 19	; 00000013H
  0006e	0f 87 af 03 00
	00		 ja	 $LN23@HandleMess
  00074	8b 55 e0	 mov	 edx, DWORD PTR tv64[ebp]
  00077	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN28@HandleMess[edx]
  0007e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN32@HandleMess[eax*4]
$LN22@HandleMess:
; Line 293
  00085	8b f4		 mov	 esi, esp
  00087	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  0008a	51		 push	 ecx
  0008b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008e	8b 02		 mov	 eax, DWORD PTR [edx]
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00096	ff d2		 call	 edx
  00098	3b f4		 cmp	 esi, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009f	89 45 f8	 mov	 DWORD PTR _mappedKey$3[ebp], eax
; Line 294
  000a2	81 7d f8 ff 00
	00 00		 cmp	 DWORD PTR _mappedKey$3[ebp], 255 ; 000000ffH
  000a9	74 3f		 je	 SHORT $LN21@HandleMess
; Line 297
  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	03 45 f8	 add	 eax, DWORD PTR _mappedKey$3[ebp]
  000b1	0f b6 88 b4 01
	00 00		 movzx	 ecx, BYTE PTR [eax+436]
  000b8	51		 push	 ecx
  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	e8 00 00 00 00	 call	 ?IsKeyDown@CBaseCamera@@IBE_NE@Z ; CBaseCamera::IsKeyDown
  000c1	0f b6 d0	 movzx	 edx, al
  000c4	85 d2		 test	 edx, edx
  000c6	75 22		 jne	 SHORT $LN21@HandleMess
; Line 299
  000c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cb	03 45 f8	 add	 eax, DWORD PTR _mappedKey$3[ebp]
  000ce	c6 80 b4 01 00
	00 81		 mov	 BYTE PTR [eax+436], 129	; 00000081H
; Line 300
  000d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	8b 91 b0 01 00
	00		 mov	 edx, DWORD PTR [ecx+432]
  000de	83 c2 01	 add	 edx, 1
  000e1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e4	89 90 b0 01 00
	00		 mov	 DWORD PTR [eax+432], edx
$LN21@HandleMess:
; Line 303
  000ea	e9 34 03 00 00	 jmp	 $LN23@HandleMess
$LN19@HandleMess:
; Line 310
  000ef	8b f4		 mov	 esi, esp
  000f1	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  000f4	51		 push	 ecx
  000f5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f8	8b 02		 mov	 eax, DWORD PTR [edx]
  000fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00100	ff d2		 call	 edx
  00102	3b f4		 cmp	 esi, esp
  00104	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00109	89 45 f4	 mov	 DWORD PTR _mappedKey$2[ebp], eax
; Line 311
  0010c	81 7d f4 ff 00
	00 00		 cmp	 DWORD PTR _mappedKey$2[ebp], 255 ; 000000ffH
  00113	74 37		 je	 SHORT $LN18@HandleMess
  00115	83 7d f4 08	 cmp	 DWORD PTR _mappedKey$2[ebp], 8
  00119	73 31		 jae	 SHORT $LN18@HandleMess
; Line 313
  0011b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011e	03 45 f4	 add	 eax, DWORD PTR _mappedKey$2[ebp]
  00121	0f b6 88 b4 01
	00 00		 movzx	 ecx, BYTE PTR [eax+436]
  00128	83 e1 fe	 and	 ecx, -2			; fffffffeH
  0012b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0012e	03 55 f4	 add	 edx, DWORD PTR _mappedKey$2[ebp]
  00131	88 8a b4 01 00
	00		 mov	 BYTE PTR [edx+436], cl
; Line 314
  00137	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0013a	8b 88 b0 01 00
	00		 mov	 ecx, DWORD PTR [eax+432]
  00140	83 e9 01	 sub	 ecx, 1
  00143	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00146	89 8a b0 01 00
	00		 mov	 DWORD PTR [edx+432], ecx
$LN18@HandleMess:
; Line 316
  0014c	e9 d2 02 00 00	 jmp	 $LN23@HandleMess
$LN17@HandleMess:
; Line 330
  00151	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00154	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00159	0f bf c8	 movsx	 ecx, ax
  0015c	89 4d e8	 mov	 DWORD PTR _ptCursor$1[ebp], ecx
  0015f	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  00162	c1 ea 10	 shr	 edx, 16			; 00000010H
  00165	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0016b	0f bf c2	 movsx	 eax, dx
  0016e	89 45 ec	 mov	 DWORD PTR _ptCursor$1[ebp+4], eax
; Line 333
  00171	81 7d 0c 01 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 513 ; 00000201H
  00178	74 09		 je	 SHORT $LN15@HandleMess
  0017a	81 7d 0c 03 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 515 ; 00000203H
  00181	75 43		 jne	 SHORT $LN16@HandleMess
$LN15@HandleMess:
  00183	8b f4		 mov	 esi, esp
  00185	8b 4d ec	 mov	 ecx, DWORD PTR _ptCursor$1[ebp+4]
  00188	51		 push	 ecx
  00189	8b 55 e8	 mov	 edx, DWORD PTR _ptCursor$1[ebp]
  0018c	52		 push	 edx
  0018d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00190	05 1c 02 00 00	 add	 eax, 540		; 0000021cH
  00195	50		 push	 eax
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PtInRect@12
  0019c	3b f4		 cmp	 esi, esp
  0019e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a3	85 c0		 test	 eax, eax
  001a5	74 1f		 je	 SHORT $LN16@HandleMess
; Line 335
  001a7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001aa	c6 81 6c 02 00
	00 01		 mov	 BYTE PTR [ecx+620], 1
  001b1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001b4	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  001ba	83 c8 01	 or	 eax, 1
  001bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c0	89 81 d0 01 00
	00		 mov	 DWORD PTR [ecx+464], eax
$LN16@HandleMess:
; Line 337
  001c6	81 7d 0c 07 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 519 ; 00000207H
  001cd	74 09		 je	 SHORT $LN13@HandleMess
  001cf	81 7d 0c 09 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 521 ; 00000209H
  001d6	75 44		 jne	 SHORT $LN14@HandleMess
$LN13@HandleMess:
  001d8	8b f4		 mov	 esi, esp
  001da	8b 55 ec	 mov	 edx, DWORD PTR _ptCursor$1[ebp+4]
  001dd	52		 push	 edx
  001de	8b 45 e8	 mov	 eax, DWORD PTR _ptCursor$1[ebp]
  001e1	50		 push	 eax
  001e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001e5	81 c1 1c 02 00
	00		 add	 ecx, 540		; 0000021cH
  001eb	51		 push	 ecx
  001ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PtInRect@12
  001f2	3b f4		 cmp	 esi, esp
  001f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f9	85 c0		 test	 eax, eax
  001fb	74 1f		 je	 SHORT $LN14@HandleMess
; Line 339
  001fd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00200	c6 82 6d 02 00
	00 01		 mov	 BYTE PTR [edx+621], 1
  00207	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0020a	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00210	83 c9 02	 or	 ecx, 2
  00213	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00216	89 8a d0 01 00
	00		 mov	 DWORD PTR [edx+464], ecx
$LN14@HandleMess:
; Line 341
  0021c	81 7d 0c 04 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 516 ; 00000204H
  00223	74 09		 je	 SHORT $LN11@HandleMess
  00225	81 7d 0c 06 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 518 ; 00000206H
  0022c	75 44		 jne	 SHORT $LN12@HandleMess
$LN11@HandleMess:
  0022e	8b f4		 mov	 esi, esp
  00230	8b 45 ec	 mov	 eax, DWORD PTR _ptCursor$1[ebp+4]
  00233	50		 push	 eax
  00234	8b 4d e8	 mov	 ecx, DWORD PTR _ptCursor$1[ebp]
  00237	51		 push	 ecx
  00238	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0023b	81 c2 1c 02 00
	00		 add	 edx, 540		; 0000021cH
  00241	52		 push	 edx
  00242	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PtInRect@12
  00248	3b f4		 cmp	 esi, esp
  0024a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0024f	85 c0		 test	 eax, eax
  00251	74 1f		 je	 SHORT $LN12@HandleMess
; Line 343
  00253	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00256	c6 80 6e 02 00
	00 01		 mov	 BYTE PTR [eax+622], 1
  0025d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00260	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  00266	83 ca 04	 or	 edx, 4
  00269	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0026c	89 90 d0 01 00
	00		 mov	 DWORD PTR [eax+464], edx
$LN12@HandleMess:
; Line 348
  00272	8b f4		 mov	 esi, esp
  00274	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  00277	51		 push	 ecx
  00278	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCapture@4
  0027e	3b f4		 cmp	 esi, esp
  00280	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 349
  00285	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00288	81 c2 c8 01 00
	00		 add	 edx, 456		; 000001c8H
  0028e	8b f4		 mov	 esi, esp
  00290	52		 push	 edx
  00291	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCursorPos@4
  00297	3b f4		 cmp	 esi, esp
  00299	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 350
  0029e	b8 01 00 00 00	 mov	 eax, 1
  002a3	e9 7d 01 00 00	 jmp	 $LN25@HandleMess
$LN10@HandleMess:
; Line 358
  002a8	81 7d 0c 02 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 514 ; 00000202H
  002af	75 1f		 jne	 SHORT $LN9@HandleMess
; Line 360
  002b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b4	c6 80 6c 02 00
	00 00		 mov	 BYTE PTR [eax+620], 0
  002bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002be	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  002c4	83 e2 fe	 and	 edx, -2			; fffffffeH
  002c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002ca	89 90 d0 01 00
	00		 mov	 DWORD PTR [eax+464], edx
$LN9@HandleMess:
; Line 362
  002d0	81 7d 0c 08 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 520 ; 00000208H
  002d7	75 1f		 jne	 SHORT $LN8@HandleMess
; Line 364
  002d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002dc	c6 81 6d 02 00
	00 00		 mov	 BYTE PTR [ecx+621], 0
  002e3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002e6	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  002ec	83 e0 fd	 and	 eax, -3			; fffffffdH
  002ef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f2	89 81 d0 01 00
	00		 mov	 DWORD PTR [ecx+464], eax
$LN8@HandleMess:
; Line 366
  002f8	81 7d 0c 05 02
	00 00		 cmp	 DWORD PTR _uMsg$[ebp], 517 ; 00000205H
  002ff	75 1f		 jne	 SHORT $LN7@HandleMess
; Line 368
  00301	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00304	c6 82 6e 02 00
	00 00		 mov	 BYTE PTR [edx+622], 0
  0030b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0030e	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00314	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00317	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0031a	89 8a d0 01 00
	00		 mov	 DWORD PTR [edx+464], ecx
$LN7@HandleMess:
; Line 374
  00320	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00323	0f b6 88 6c 02
	00 00		 movzx	 ecx, BYTE PTR [eax+620]
  0032a	85 c9		 test	 ecx, ecx
  0032c	75 2b		 jne	 SHORT $LN6@HandleMess
  0032e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00331	0f b6 82 6e 02
	00 00		 movzx	 eax, BYTE PTR [edx+622]
  00338	85 c0		 test	 eax, eax
  0033a	75 1d		 jne	 SHORT $LN6@HandleMess
  0033c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0033f	0f b6 91 6d 02
	00 00		 movzx	 edx, BYTE PTR [ecx+621]
  00346	85 d2		 test	 edx, edx
  00348	75 0f		 jne	 SHORT $LN6@HandleMess
; Line 376
  0034a	8b f4		 mov	 esi, esp
  0034c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseCapture@0
  00352	3b f4		 cmp	 esi, esp
  00354	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@HandleMess:
; Line 378
  00359	e9 c5 00 00 00	 jmp	 $LN23@HandleMess
$LN5@HandleMess:
; Line 383
  0035e	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00361	3b 45 08	 cmp	 eax, DWORD PTR _hWnd$[ebp]
  00364	0f 84 96 00 00
	00		 je	 $LN4@HandleMess
; Line 387
  0036a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0036d	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  00373	83 e2 01	 and	 edx, 1
  00376	75 1c		 jne	 SHORT $LN2@HandleMess
  00378	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0037b	8b 88 d0 01 00
	00		 mov	 ecx, DWORD PTR [eax+464]
  00381	83 e1 02	 and	 ecx, 2
  00384	75 0e		 jne	 SHORT $LN2@HandleMess
  00386	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00389	8b 82 d0 01 00
	00		 mov	 eax, DWORD PTR [edx+464]
  0038f	83 e0 04	 and	 eax, 4
  00392	74 6c		 je	 SHORT $LN4@HandleMess
$LN2@HandleMess:
; Line 389
  00394	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00397	c6 81 6c 02 00
	00 00		 mov	 BYTE PTR [ecx+620], 0
; Line 390
  0039e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003a1	c6 82 6d 02 00
	00 00		 mov	 BYTE PTR [edx+621], 0
; Line 391
  003a8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003ab	c6 80 6e 02 00
	00 00		 mov	 BYTE PTR [eax+622], 0
; Line 392
  003b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003b5	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  003bb	83 e2 fe	 and	 edx, -2			; fffffffeH
  003be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003c1	89 90 d0 01 00
	00		 mov	 DWORD PTR [eax+464], edx
; Line 393
  003c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003ca	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  003d0	83 e2 fd	 and	 edx, -3			; fffffffdH
  003d3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003d6	89 90 d0 01 00
	00		 mov	 DWORD PTR [eax+464], edx
; Line 394
  003dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003df	8b 91 d0 01 00
	00		 mov	 edx, DWORD PTR [ecx+464]
  003e5	83 e2 fb	 and	 edx, -5			; fffffffbH
  003e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003eb	89 90 d0 01 00
	00		 mov	 DWORD PTR [eax+464], edx
; Line 395
  003f1	8b f4		 mov	 esi, esp
  003f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseCapture@0
  003f9	3b f4		 cmp	 esi, esp
  003fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@HandleMess:
; Line 398
  00400	eb 21		 jmp	 SHORT $LN23@HandleMess
$LN1@HandleMess:
; Line 403
  00402	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  00405	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00408	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0040e	0f bf d1	 movsx	 edx, cx
  00411	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00414	03 90 d4 01 00
	00		 add	 edx, DWORD PTR [eax+468]
  0041a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0041d	89 91 d4 01 00
	00		 mov	 DWORD PTR [ecx+468], edx
$LN23@HandleMess:
; Line 407
  00423	33 c0		 xor	 eax, eax
$LN25@HandleMess:
; Line 408
  00425	52		 push	 edx
  00426	8b cd		 mov	 ecx, ebp
  00428	50		 push	 eax
  00429	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN31@HandleMess
  0042f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00434	58		 pop	 eax
  00435	5a		 pop	 edx
  00436	5e		 pop	 esi
  00437	83 c4 20	 add	 esp, 32			; 00000020H
  0043a	3b ec		 cmp	 ebp, esp
  0043c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00441	8b e5		 mov	 esp, ebp
  00443	5d		 pop	 ebp
  00444	c2 10 00	 ret	 16			; 00000010H
  00447	90		 npad	 1
$LN31@HandleMess:
  00448	01 00 00 00	 DD	 1
  0044c	00 00 00 00	 DD	 $LN30@HandleMess
$LN30@HandleMess:
  00450	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00454	08 00 00 00	 DD	 8
  00458	00 00 00 00	 DD	 $LN29@HandleMess
$LN29@HandleMess:
  0045c	70		 DB	 112			; 00000070H
  0045d	74		 DB	 116			; 00000074H
  0045e	43		 DB	 67			; 00000043H
  0045f	75		 DB	 117			; 00000075H
  00460	72		 DB	 114			; 00000072H
  00461	73		 DB	 115			; 00000073H
  00462	6f		 DB	 111			; 0000006fH
  00463	72		 DB	 114			; 00000072H
  00464	00		 DB	 0
  00465	8d 49 00	 npad	 3
$LN32@HandleMess:
  00468	00 00 00 00	 DD	 $LN10@HandleMess
  0046c	00 00 00 00	 DD	 $LN17@HandleMess
  00470	00 00 00 00	 DD	 $LN1@HandleMess
  00474	00 00 00 00	 DD	 $LN5@HandleMess
  00478	00 00 00 00	 DD	 $LN23@HandleMess
$LN28@HandleMess:
  0047c	00		 DB	 0
  0047d	01		 DB	 1
  0047e	01		 DB	 1
  0047f	00		 DB	 0
  00480	01		 DB	 1
  00481	01		 DB	 1
  00482	00		 DB	 0
  00483	01		 DB	 1
  00484	02		 DB	 2
  00485	04		 DB	 4
  00486	04		 DB	 4
  00487	04		 DB	 4
  00488	04		 DB	 4
  00489	04		 DB	 4
  0048a	04		 DB	 4
  0048b	04		 DB	 4
  0048c	04		 DB	 4
  0048d	04		 DB	 4
  0048e	04		 DB	 4
  0048f	03		 DB	 3
?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z ENDP	; CBaseCamera::HandleMessages
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv335 = -128						; size = 16
$T1 = -112						; size = 12
$T2 = -100						; size = 12
$T3 = -88						; size = 8
$T4 = -80						; size = 8
$T5 = -72						; size = 12
$T6 = -60						; size = 12
$T7 = -48						; size = 16
$T8 = -32						; size = 16
_this$ = -4						; size = 4
??0CBaseCamera@@QAE@XZ PROC				; CBaseCamera::CBaseCamera
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 206
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 74 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-140]
  00025	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CBaseCamera@@6B@
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	83 c1 08	 add	 ecx, 8
  00044	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	83 c1 48	 add	 ecx, 72			; 00000048H
  0004f	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	81 c1 78 01 00
	00		 add	 ecx, 376		; 00000178H
  0005d	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	81 c1 84 01 00
	00		 add	 ecx, 388		; 00000184H
  0006b	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	c7 81 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+432], 0
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	81 c1 bc 01 00
	00		 add	 ecx, 444		; 000001bcH
  00086	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
  0008b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008e	c7 82 d0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+464], 0
  00098	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	c7 80 d4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+468], 0
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	81 c1 d8 01 00
	00		 add	 ecx, 472		; 000001d8H
  000ae	e8 00 00 00 00	 call	 ??0XMFLOAT2@DirectX@@QAE@XZ ; DirectX::XMFLOAT2::XMFLOAT2
  000b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000be	f3 0f 11 81 e0
	01 00 00	 movss	 DWORD PTR [ecx+480], xmm0
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	81 c1 e4 01 00
	00		 add	 ecx, 484		; 000001e4H
  000cf	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
  000d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	81 c1 f0 01 00
	00		 add	 ecx, 496		; 000001f0H
  000dd	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
  000e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	81 c1 fc 01 00
	00		 add	 ecx, 508		; 000001fcH
  000eb	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
  000f0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f3	81 c1 08 02 00
	00		 add	 ecx, 520		; 00000208H
  000f9	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
  000fe	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00101	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00109	f3 0f 11 82 14
	02 00 00	 movss	 DWORD PTR [edx+532], xmm0
  00111	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00114	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0011c	f3 0f 11 80 18
	02 00 00	 movss	 DWORD PTR [eax+536], xmm0
  00124	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	81 c1 2c 02 00
	00		 add	 ecx, 556		; 0000022cH
  0012d	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
  00132	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	81 c1 38 02 00
	00		 add	 ecx, 568		; 00000238H
  0013b	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
  00140	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00143	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0014b	f3 0f 11 81 44
	02 00 00	 movss	 DWORD PTR [ecx+580], xmm0
  00153	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00156	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0015e	f3 0f 11 82 48
	02 00 00	 movss	 DWORD PTR [edx+584], xmm0
  00166	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00169	81 c1 4c 02 00
	00		 add	 ecx, 588		; 0000024cH
  0016f	e8 00 00 00 00	 call	 ??0XMFLOAT2@DirectX@@QAE@XZ ; DirectX::XMFLOAT2::XMFLOAT2
  00174	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00177	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  0017f	f3 0f 11 80 64
	02 00 00	 movss	 DWORD PTR [eax+612], xmm0
  00187	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00192	f3 0f 11 81 68
	02 00 00	 movss	 DWORD PTR [ecx+616], xmm0
  0019a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0019d	c6 82 6c 02 00
	00 00		 mov	 BYTE PTR [edx+620], 0
  001a4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a7	c6 80 6d 02 00
	00 00		 mov	 BYTE PTR [eax+621], 0
  001ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b1	c6 81 6e 02 00
	00 00		 mov	 BYTE PTR [ecx+622], 0
  001b8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001bb	c6 82 6f 02 00
	00 00		 mov	 BYTE PTR [edx+623], 0
  001c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001c5	c6 80 70 02 00
	00 00		 mov	 BYTE PTR [eax+624], 0
  001cc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001cf	c6 81 71 02 00
	00 01		 mov	 BYTE PTR [ecx+625], 1
  001d6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001d9	c6 82 72 02 00
	00 01		 mov	 BYTE PTR [edx+626], 1
  001e0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001e3	c6 80 73 02 00
	00 00		 mov	 BYTE PTR [eax+627], 0
  001ea	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ed	c6 81 74 02 00
	00 00		 mov	 BYTE PTR [ecx+628], 0
  001f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001f7	81 c1 78 02 00
	00		 add	 ecx, 632		; 00000278H
  001fd	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
  00202	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00205	81 c1 84 02 00
	00		 add	 ecx, 644		; 00000284H
  0020b	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
; Line 207
  00210	33 d2		 xor	 edx, edx
  00212	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00215	05 b4 01 00 00	 add	 eax, 436		; 000001b4H
  0021a	89 10		 mov	 DWORD PTR [eax], edx
  0021c	89 50 04	 mov	 DWORD PTR [eax+4], edx
; Line 208
  0021f	68 f0 00 00 00	 push	 240			; 000000f0H
  00224	6a 00		 push	 0
  00226	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00229	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0022f	51		 push	 ecx
  00230	e8 00 00 00 00	 call	 _memset
  00235	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 211
  00238	8d 55 e0	 lea	 edx, DWORD PTR $T8[ebp]
  0023b	52		 push	 edx
  0023c	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR2
  00241	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00246	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00249	8d 45 d0	 lea	 eax, DWORD PTR $T7[ebp]
  0024c	50		 push	 eax
  0024d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
  00252	0f 29 45 80	 movaps	 XMMWORD PTR tv335[ebp], xmm0
  00256	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  0025b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0025e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00261	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR tv335[ebp]
  00265	e8 00 00 00 00	 call	 ?SetViewParams@CBaseCamera@@UAEXT__m128@@0@Z ; CBaseCamera::SetViewParams
; Line 214
  0026a	51		 push	 ecx
  0026b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@447a0000
  00273	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00278	51		 push	 ecx
  00279	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00281	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00286	51		 push	 ecx
  00287	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0028f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00294	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  0029c	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40800000
  002a4	51		 push	 ecx
  002a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ad	e8 00 00 00 00	 call	 ?SetProjParams@CBaseCamera@@UAEXMMMM@Z ; CBaseCamera::SetProjParams
; Line 216
  002b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002b5	81 c1 c8 01 00
	00		 add	 ecx, 456		; 000001c8H
  002bb	8b f4		 mov	 esi, esp
  002bd	51		 push	 ecx
  002be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCursorPos@4
  002c4	3b f4		 cmp	 esi, esp
  002c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 218
  002cb	8b f4		 mov	 esi, esp
  002cd	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  002d2	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  002d7	68 00 00 00 80	 push	 -2147483648		; 80000000H
  002dc	68 00 00 00 80	 push	 -2147483648		; 80000000H
  002e1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002e4	81 c2 1c 02 00
	00		 add	 edx, 540		; 0000021cH
  002ea	52		 push	 edx
  002eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetRect@20
  002f1	3b f4		 cmp	 esi, esp
  002f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 219
  002f8	51		 push	 ecx
  002f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00301	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00306	51		 push	 ecx
  00307	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0030f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00314	51		 push	 ecx
  00315	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0031d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00322	8d 4d c4	 lea	 ecx, DWORD PTR $T6[ebp]
  00325	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@MMM@Z ; DirectX::XMFLOAT3::XMFLOAT3
  0032a	50		 push	 eax
  0032b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0032e	81 c1 2c 02 00
	00		 add	 ecx, 556		; 0000022cH
  00334	e8 00 00 00 00	 call	 ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT3::operator=
; Line 220
  00339	51		 push	 ecx
  0033a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00342	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00347	51		 push	 ecx
  00348	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00350	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00355	51		 push	 ecx
  00356	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0035e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00363	8d 4d b8	 lea	 ecx, DWORD PTR $T5[ebp]
  00366	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@MMM@Z ; DirectX::XMFLOAT3::XMFLOAT3
  0036b	50		 push	 eax
  0036c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0036f	81 c1 38 02 00
	00		 add	 ecx, 568		; 00000238H
  00375	e8 00 00 00 00	 call	 ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT3::operator=
; Line 221
  0037a	51		 push	 ecx
  0037b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00383	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00388	51		 push	 ecx
  00389	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00391	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00396	8d 4d b0	 lea	 ecx, DWORD PTR $T4[ebp]
  00399	e8 00 00 00 00	 call	 ??0XMFLOAT2@DirectX@@QAE@MM@Z ; DirectX::XMFLOAT2::XMFLOAT2
  0039e	50		 push	 eax
  0039f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003a2	81 c1 4c 02 00
	00		 add	 ecx, 588		; 0000024cH
  003a8	e8 00 00 00 00	 call	 ??4XMFLOAT2@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT2::operator=
; Line 223
  003ad	51		 push	 ecx
  003ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  003b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bb	51		 push	 ecx
  003bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  003c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c9	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  003cc	e8 00 00 00 00	 call	 ??0XMFLOAT2@DirectX@@QAE@MM@Z ; DirectX::XMFLOAT2::XMFLOAT2
  003d1	50		 push	 eax
  003d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003d5	81 c1 d8 01 00
	00		 add	 ecx, 472		; 000001d8H
  003db	e8 00 00 00 00	 call	 ??4XMFLOAT2@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT2::operator=
; Line 225
  003e0	51		 push	 ecx
  003e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ee	51		 push	 ecx
  003ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fc	51		 push	 ecx
  003fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00405	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040a	8d 4d 9c	 lea	 ecx, DWORD PTR $T2[ebp]
  0040d	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@MMM@Z ; DirectX::XMFLOAT3::XMFLOAT3
  00412	50		 push	 eax
  00413	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00416	81 c1 78 02 00
	00		 add	 ecx, 632		; 00000278H
  0041c	e8 00 00 00 00	 call	 ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT3::operator=
; Line 226
  00421	51		 push	 ecx
  00422	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0042a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042f	51		 push	 ecx
  00430	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00438	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0043d	51		 push	 ecx
  0043e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00446	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044b	8d 4d 90	 lea	 ecx, DWORD PTR $T1[ebp]
  0044e	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@MMM@Z ; DirectX::XMFLOAT3::XMFLOAT3
  00453	50		 push	 eax
  00454	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00457	81 c1 84 02 00
	00		 add	 ecx, 644		; 00000284H
  0045d	e8 00 00 00 00	 call	 ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT3::operator=
; Line 227
  00462	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00465	5f		 pop	 edi
  00466	5e		 pop	 esi
  00467	8b e5		 mov	 esp, ebp
  00469	5d		 pop	 ebp
  0046a	8b e3		 mov	 esp, ebx
  0046c	5b		 pop	 ebx
  0046d	c3		 ret	 0
??0CBaseCamera@@QAE@XZ ENDP				; CBaseCamera::CBaseCamera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ScreenToVector@CD3DArcBall@@IAE?AT__m128@@MM@Z
_TEXT	SEGMENT
tv177 = -52						; size = 4
$T1 = -48						; size = 16
_scale$2 = -24						; size = 4
_mag$ = -20						; size = 4
_z$ = -16						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_fScreenPtX$ = 12					; size = 4
_fScreenPtY$ = 16					; size = 4
?ScreenToVector@CD3DArcBall@@IAE?AT__m128@@MM@Z PROC	; CD3DArcBall::ScreenToVector, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.h
; Line 90
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 40	 sub	 esp, 64			; 00000040H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0001e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 92
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	f3 0f 2a 80 c0
	00 00 00	 cvtsi2ss xmm0, DWORD PTR [eax+192]
  00039	f3 0f 10 4b 0c	 movss	 xmm1, DWORD PTR _fScreenPtX$[ebx]
  0003e	f3 0f 5c c8	 subss	 xmm1, xmm0
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 81 c8 00 00
	00		 mov	 eax, DWORD PTR [ecx+200]
  0004b	99		 cdq
  0004c	2b c2		 sub	 eax, edx
  0004e	d1 f8		 sar	 eax, 1
  00050	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00054	f3 0f 5c c8	 subss	 xmm1, xmm0
  00058	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0005f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00062	f3 0f 2a 82 c8
	00 00 00	 cvtsi2ss xmm0, DWORD PTR [edx+200]
  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	f3 0f 59 80 d8
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+216]
  00075	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0007d	f3 0f 5e c8	 divss	 xmm1, xmm0
  00081	f3 0f 11 4d f8	 movss	 DWORD PTR _x$[ebp], xmm1
; Line 93
  00086	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00089	f3 0f 2a 81 c4
	00 00 00	 cvtsi2ss xmm0, DWORD PTR [ecx+196]
  00091	f3 0f 10 4b 10	 movss	 xmm1, DWORD PTR _fScreenPtY$[ebx]
  00096	f3 0f 5c c8	 subss	 xmm1, xmm0
  0009a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009d	8b 82 cc 00 00
	00		 mov	 eax, DWORD PTR [edx+204]
  000a3	99		 cdq
  000a4	2b c2		 sub	 eax, edx
  000a6	d1 f8		 sar	 eax, 1
  000a8	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000ac	f3 0f 5c c8	 subss	 xmm1, xmm0
  000b0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	f3 0f 2a 80 cc
	00 00 00	 cvtsi2ss xmm0, DWORD PTR [eax+204]
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	f3 0f 59 81 d8
	00 00 00	 mulss	 xmm0, DWORD PTR [ecx+216]
  000c6	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  000ce	f3 0f 5e c8	 divss	 xmm1, xmm0
  000d2	f3 0f 11 4d f4	 movss	 DWORD PTR _y$[ebp], xmm1
; Line 95
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000df	f3 0f 11 45 f0	 movss	 DWORD PTR _z$[ebp], xmm0
; Line 96
  000e4	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x$[ebp]
  000e9	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _x$[ebp]
  000ee	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _y$[ebp]
  000f3	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _y$[ebp]
  000f8	f3 0f 58 c1	 addss	 xmm0, xmm1
  000fc	f3 0f 11 45 ec	 movss	 DWORD PTR _mag$[ebp], xmm0
; Line 98
  00101	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _mag$[ebp]
  00106	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0010d	76 48		 jbe	 SHORT $LN2@ScreenToVe
; Line 100
  0010f	51		 push	 ecx
  00110	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _mag$[ebp]
  00115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011a	e8 00 00 00 00	 call	 _sqrtf
  0011f	83 c4 04	 add	 esp, 4
  00122	d9 5d cc	 fstp	 DWORD PTR tv177[ebp]
  00125	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0012d	f3 0f 5e 45 cc	 divss	 xmm0, DWORD PTR tv177[ebp]
  00132	f3 0f 11 45 e8	 movss	 DWORD PTR _scale$2[ebp], xmm0
; Line 101
  00137	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x$[ebp]
  0013c	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _scale$2[ebp]
  00141	f3 0f 11 45 f8	 movss	 DWORD PTR _x$[ebp], xmm0
; Line 102
  00146	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _y$[ebp]
  0014b	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _scale$2[ebp]
  00150	f3 0f 11 45 f4	 movss	 DWORD PTR _y$[ebp], xmm0
; Line 104
  00155	eb 1e		 jmp	 SHORT $LN1@ScreenToVe
$LN2@ScreenToVe:
; Line 105
  00157	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0015f	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _mag$[ebp]
  00164	51		 push	 ecx
  00165	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016a	e8 00 00 00 00	 call	 _sqrtf
  0016f	83 c4 04	 add	 esp, 4
  00172	d9 5d f0	 fstp	 DWORD PTR _z$[ebp]
$LN1@ScreenToVe:
; Line 107
  00175	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@00000000
  0017d	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _z$[ebp]
  00182	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _y$[ebp]
  00187	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x$[ebp]
  0018c	e8 00 00 00 00	 call	 ?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
  00191	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00195	8b 53 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebx]
  00198	0f 10 45 d0	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  0019c	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0019f	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 108
  001a2	5f		 pop	 edi
  001a3	8b e5		 mov	 esp, ebp
  001a5	5d		 pop	 ebp
  001a6	8b e3		 mov	 esp, ebx
  001a8	5b		 pop	 ebx
  001a9	c2 0c 00	 ret	 12			; 0000000cH
?ScreenToVector@CD3DArcBall@@IAE?AT__m128@@MM@Z ENDP	; CD3DArcBall::ScreenToVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QuatFromBallPoints@CD3DArcBall@@SA?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -128						; size = 16
$T2 = -112						; size = 16
$T3 = -96						; size = 16
_vPart$ = -80						; size = 16
$T4 = -64						; size = 16
_dot$ = -48						; size = 16
_vTo$ = -32						; size = 16
_vFrom$ = -16						; size = 16
?QuatFromBallPoints@CD3DArcBall@@SA?AT__m128@@T2@0@Z PROC ; CD3DArcBall::QuatFromBallPoints, COMDAT
; _vFrom$ = xmm0
; _vTo$ = xmm1
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.h
; Line 61
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  0001c	57		 push	 edi
  0001d	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00020	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	0f 29 4d e0	 movaps	 XMMWORD PTR _vTo$[ebp], xmm1
  00030	0f 29 45 f0	 movaps	 XMMWORD PTR _vFrom$[ebp], xmm0
; Line 64
  00034	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vTo$[ebp]
  00038	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _vFrom$[ebp]
  0003c	e8 00 00 00 00	 call	 ?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Dot
  00041	0f 29 45 c0	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00045	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00049	0f 29 45 d0	 movaps	 XMMWORD PTR _dot$[ebp], xmm0
; Line 65
  0004d	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vTo$[ebp]
  00051	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _vFrom$[ebp]
  00055	e8 00 00 00 00	 call	 ?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Cross
  0005a	0f 29 45 a0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0005e	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00062	0f 29 45 b0	 movaps	 XMMWORD PTR _vPart$[ebp], xmm0
; Line 66
  00066	8d 45 90	 lea	 eax, DWORD PTR $T2[ebp]
  00069	50		 push	 eax
  0006a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
  0006f	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  00074	0f 10 10	 movups	 xmm2, XMMWORD PTR [eax]
  00077	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _vPart$[ebp]
  0007b	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _dot$[ebp]
  0007f	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  00084	0f 29 45 80	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00088	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 67
  0008c	5f		 pop	 edi
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	8b e3		 mov	 esp, ebx
  00092	5b		 pop	 ebx
  00093	c3		 ret	 0
?QuatFromBallPoints@CD3DArcBall@@SA?AT__m128@@T2@0@Z ENDP ; CD3DArcBall::QuatFromBallPoints
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetQuatNow@CD3DArcBall@@QAEXABT__m128@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_q$ = 8							; size = 4
?SetQuatNow@CD3DArcBall@@QAEXABT__m128@@@Z PROC		; CD3DArcBall::SetQuatNow, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.h
; Line 58
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _q$[ebp]
  00011	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	81 c1 f0 00 00
	00		 add	 ecx, 240		; 000000f0H
  0001d	e8 00 00 00 00	 call	 ?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z ; DirectX::XMStoreFloat4
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?SetQuatNow@CD3DArcBall@@QAEXABT__m128@@@Z ENDP		; CD3DArcBall::SetQuatNow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsBeingDragged@CD3DArcBall@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBeingDragged@CD3DArcBall@@QBE_NXZ PROC		; CD3DArcBall::IsBeingDragged, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.h
; Line 56
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 80 00 01 00
	00		 mov	 al, BYTE PTR [eax+256]
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?IsBeingDragged@CD3DArcBall@@QBE_NXZ ENDP		; CD3DArcBall::IsBeingDragged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetRotationMatrix@CD3DArcBall@@QBE?AUXMMATRIX@DirectX@@XZ
_TEXT	SEGMENT
$T1 = -176						; size = 64
$T2 = -112						; size = 64
$T3 = -48						; size = 16
_q$ = -32						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetRotationMatrix@CD3DArcBall@@QBE?AUXMMATRIX@DirectX@@XZ PROC ; CD3DArcBall::GetRotationMatrix, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.h
; Line 49
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-184]
  00025	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 51
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	81 c1 f0 00 00
	00		 add	 ecx, 240		; 000000f0H
  00048	e8 00 00 00 00	 call	 ?XMLoadFloat4@DirectX@@YQ?AT__m128@@PBUXMFLOAT4@1@@Z ; DirectX::XMLoadFloat4
  0004d	0f 29 45 d0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00051	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00055	0f 29 45 e0	 movaps	 XMMWORD PTR _q$[ebp], xmm0
; Line 52
  00059	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _q$[ebp]
  0005d	e8 00 00 00 00	 call	 ?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationQuaternion
  00062	0f 29 5d 80	 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00066	0f 29 95 70 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  0006d	0f 29 8d 60 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  00074	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0007b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00080	8d b5 50 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00086	8d 7d 90	 lea	 edi, DWORD PTR $T2[ebp]
  00089	f3 a5		 rep movsd
  0008b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00090	8d 75 90	 lea	 esi, DWORD PTR $T2[ebp]
  00093	8b 7b 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebx]
  00096	f3 a5		 rep movsd
  00098	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 53
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a0	33 cd		 xor	 ecx, ebp
  000a2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	8b e3		 mov	 esp, ebx
  000ac	5b		 pop	 ebx
  000ad	c2 04 00	 ret	 4
?GetRotationMatrix@CD3DArcBall@@QBE?AUXMMATRIX@DirectX@@XZ ENDP ; CD3DArcBall::GetRotationMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -836						; size = 4
$T1 = -832						; size = 64
$T2 = -768						; size = 64
$T3 = -704						; size = 64
$T4 = -640						; size = 64
$T5 = -576						; size = 64
$T6 = -512						; size = 64
$T7 = -448						; size = 64
$T8 = -384						; size = 64
$T9 = -320						; size = 64
$T10 = -256						; size = 64
_mTranslation$11 = -176					; size = 64
_mTranslationDelta$12 = -96				; size = 64
_fDeltaY$13 = -24					; size = 4
_fDeltaX$14 = -20					; size = 4
_iMouseY$ = -16						; size = 4
_iMouseX$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HandleMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z PROC	; CD3DArcBall::HandleMessages
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 101
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 48 03 00
	00		 sub	 esp, 840		; 00000348H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd b8 fc ff
	ff		 lea	 edi, DWORD PTR [ebp-840]
  00025	b9 d2 00 00 00	 mov	 ecx, 210		; 000000d2H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 103
  0003f	8b 43 14	 mov	 eax, DWORD PTR _lParam$[ebx]
  00042	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00047	0f bf c8	 movsx	 ecx, ax
  0004a	89 4d f4	 mov	 DWORD PTR _iMouseX$[ebp], ecx
; Line 104
  0004d	8b 53 14	 mov	 edx, DWORD PTR _lParam$[ebx]
  00050	c1 ea 10	 shr	 edx, 16			; 00000010H
  00053	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00059	0f bf c2	 movsx	 eax, dx
  0005c	89 45 f0	 mov	 DWORD PTR _iMouseY$[ebp], eax
; Line 106
  0005f	8b 4b 0c	 mov	 ecx, DWORD PTR _uMsg$[ebx]
  00062	89 8d bc fc ff
	ff		 mov	 DWORD PTR tv71[ebp], ecx
  00068	8b 95 bc fc ff
	ff		 mov	 edx, DWORD PTR tv71[ebp]
  0006e	81 ea 00 02 00
	00		 sub	 edx, 512		; 00000200H
  00074	89 95 bc fc ff
	ff		 mov	 DWORD PTR tv71[ebp], edx
  0007a	83 bd bc fc ff
	ff 15		 cmp	 DWORD PTR tv71[ebp], 21	; 00000015H
  00081	0f 87 b8 03 00
	00		 ja	 $LN14@HandleMess
  00087	8b 85 bc fc ff
	ff		 mov	 eax, DWORD PTR tv71[ebp]
  0008d	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN18@HandleMess[eax]
  00094	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN23@HandleMess[ecx*4]
$LN13@HandleMess:
; Line 110
  0009b	8b f4		 mov	 esi, esp
  0009d	8b 53 08	 mov	 edx, DWORD PTR _hWnd$[ebx]
  000a0	52		 push	 edx
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCapture@4
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 111
  000ae	8b 45 f0	 mov	 eax, DWORD PTR _iMouseY$[ebp]
  000b1	50		 push	 eax
  000b2	8b 4d f4	 mov	 ecx, DWORD PTR _iMouseX$[ebp]
  000b5	51		 push	 ecx
  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	e8 00 00 00 00	 call	 ?OnBegin@CD3DArcBall@@QAEXHH@Z ; CD3DArcBall::OnBegin
; Line 112
  000be	b8 01 00 00 00	 mov	 eax, 1
  000c3	e9 79 03 00 00	 jmp	 $LN16@HandleMess
$LN12@HandleMess:
; Line 115
  000c8	8b f4		 mov	 esi, esp
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseCapture@0
  000d0	3b f4		 cmp	 esi, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 116
  000d7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	e8 00 00 00 00	 call	 ?OnEnd@CD3DArcBall@@QAEXXZ ; CD3DArcBall::OnEnd
; Line 117
  000df	b8 01 00 00 00	 mov	 eax, 1
  000e4	e9 58 03 00 00	 jmp	 $LN16@HandleMess
$LN11@HandleMess:
; Line 119
  000e9	8b 53 14	 mov	 edx, DWORD PTR _lParam$[ebx]
  000ec	3b 53 08	 cmp	 edx, DWORD PTR _hWnd$[ebx]
  000ef	74 17		 je	 SHORT $LN10@HandleMess
; Line 121
  000f1	8b f4		 mov	 esi, esp
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseCapture@0
  000f9	3b f4		 cmp	 esi, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 122
  00100	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	e8 00 00 00 00	 call	 ?OnEnd@CD3DArcBall@@QAEXXZ ; CD3DArcBall::OnEnd
$LN10@HandleMess:
; Line 124
  00108	b8 01 00 00 00	 mov	 eax, 1
  0010d	e9 2f 03 00 00	 jmp	 $LN16@HandleMess
$LN9@HandleMess:
; Line 130
  00112	8b f4		 mov	 esi, esp
  00114	8b 43 08	 mov	 eax, DWORD PTR _hWnd$[ebx]
  00117	50		 push	 eax
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetCapture@4
  0011e	3b f4		 cmp	 esi, esp
  00120	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 132
  00125	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00128	8b 55 f4	 mov	 edx, DWORD PTR _iMouseX$[ebp]
  0012b	89 91 04 01 00
	00		 mov	 DWORD PTR [ecx+260], edx
; Line 133
  00131	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00134	8b 4d f0	 mov	 ecx, DWORD PTR _iMouseY$[ebp]
  00137	89 88 08 01 00
	00		 mov	 DWORD PTR [eax+264], ecx
; Line 134
  0013d	b8 01 00 00 00	 mov	 eax, 1
  00142	e9 fa 02 00 00	 jmp	 $LN16@HandleMess
$LN8@HandleMess:
; Line 138
  00147	8b f4		 mov	 esi, esp
  00149	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseCapture@0
  0014f	3b f4		 cmp	 esi, esp
  00151	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 139
  00156	b8 01 00 00 00	 mov	 eax, 1
  0015b	e9 e1 02 00 00	 jmp	 $LN16@HandleMess
$LN7@HandleMess:
; Line 142
  00160	8b 53 10	 mov	 edx, DWORD PTR _wParam$[ebx]
  00163	83 e2 01	 and	 edx, 1
  00166	74 15		 je	 SHORT $LN6@HandleMess
; Line 144
  00168	8b 45 f0	 mov	 eax, DWORD PTR _iMouseY$[ebp]
  0016b	50		 push	 eax
  0016c	8b 4d f4	 mov	 ecx, DWORD PTR _iMouseX$[ebp]
  0016f	51		 push	 ecx
  00170	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00173	e8 00 00 00 00	 call	 ?OnMove@CD3DArcBall@@QAEXHH@Z ; CD3DArcBall::OnMove
  00178	e9 bb 02 00 00	 jmp	 $LN4@HandleMess
$LN6@HandleMess:
; Line 146
  0017d	8b 53 10	 mov	 edx, DWORD PTR _wParam$[ebx]
  00180	83 e2 02	 and	 edx, 2
  00183	75 0c		 jne	 SHORT $LN3@HandleMess
  00185	8b 43 10	 mov	 eax, DWORD PTR _wParam$[ebx]
  00188	83 e0 10	 and	 eax, 16			; 00000010H
  0018b	0f 84 a7 02 00
	00		 je	 $LN4@HandleMess
$LN3@HandleMess:
; Line 149
  00191	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00194	8b 91 04 01 00
	00		 mov	 edx, DWORD PTR [ecx+260]
  0019a	2b 55 f4	 sub	 edx, DWORD PTR _iMouseX$[ebp]
  0019d	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  001a1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001a4	f3 0f 59 80 dc
	00 00 00	 mulss	 xmm0, DWORD PTR [eax+220]
  001ac	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001af	f3 0f 2a 89 c8
	00 00 00	 cvtsi2ss xmm1, DWORD PTR [ecx+200]
  001b7	f3 0f 5e c1	 divss	 xmm0, xmm1
  001bb	f3 0f 11 45 ec	 movss	 DWORD PTR _fDeltaX$14[ebp], xmm0
; Line 150
  001c0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001c3	8b 82 08 01 00
	00		 mov	 eax, DWORD PTR [edx+264]
  001c9	2b 45 f0	 sub	 eax, DWORD PTR _iMouseY$[ebp]
  001cc	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  001d0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d3	f3 0f 59 81 dc
	00 00 00	 mulss	 xmm0, DWORD PTR [ecx+220]
  001db	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001de	f3 0f 2a 8a cc
	00 00 00	 cvtsi2ss xmm1, DWORD PTR [edx+204]
  001e6	f3 0f 5e c1	 divss	 xmm0, xmm1
  001ea	f3 0f 11 45 e8	 movss	 DWORD PTR _fDeltaY$13[ebp], xmm0
; Line 152
  001ef	8d 4d a0	 lea	 ecx, DWORD PTR _mTranslationDelta$12[ebp]
  001f2	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 153
  001f7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001fa	83 c1 40	 add	 ecx, 64			; 00000040H
  001fd	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  00202	0f 29 9d f0 fd
	ff ff		 movaps	 XMMWORD PTR $T5[ebp+48], xmm3
  00209	0f 29 95 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T5[ebp+32], xmm2
  00210	0f 29 8d d0 fd
	ff ff		 movaps	 XMMWORD PTR $T5[ebp+16], xmm1
  00217	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0021e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00223	8d b5 c0 fd ff
	ff		 lea	 esi, DWORD PTR $T5[ebp]
  00229	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR $T10[ebp]
  0022f	f3 a5		 rep movsd
  00231	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00236	8d b5 00 ff ff
	ff		 lea	 esi, DWORD PTR $T10[ebp]
  0023c	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR _mTranslation$11[ebp]
  00242	f3 a5		 rep movsd
; Line 154
  00244	8b 43 10	 mov	 eax, DWORD PTR _wParam$[ebx]
  00247	83 e0 02	 and	 eax, 2
  0024a	0f 84 cc 00 00
	00		 je	 $LN2@HandleMess
; Line 156
  00250	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40000000
  00258	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _fDeltaY$13[ebp]
  0025d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c0000000
  00265	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _fDeltaX$14[ebp]
  0026a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@00000000
  00272	e8 00 00 00 00	 call	 ?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
  00277	0f 29 9d b0 fd
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+48], xmm3
  0027e	0f 29 95 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+32], xmm2
  00285	0f 29 8d 90 fd
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+16], xmm1
  0028c	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00293	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00298	8d b5 80 fd ff
	ff		 lea	 esi, DWORD PTR $T4[ebp]
  0029e	8d bd c0 fe ff
	ff		 lea	 edi, DWORD PTR $T9[ebp]
  002a4	f3 a5		 rep movsd
  002a6	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  002ac	51		 push	 ecx
  002ad	8d 4d a0	 lea	 ecx, DWORD PTR _mTranslationDelta$12[ebp]
  002b0	e8 00 00 00 00	 call	 ??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMMATRIX::operator=
; Line 157
  002b5	8d 4d a0	 lea	 ecx, DWORD PTR _mTranslationDelta$12[ebp]
  002b8	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _mTranslation$11[ebp]
  002bf	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mTranslation$11[ebp+16]
  002c6	0f 28 95 70 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _mTranslation$11[ebp+32]
  002cd	0f 28 5d 80	 movaps	 xmm3, XMMWORD PTR _mTranslation$11[ebp+48]
  002d1	e8 00 00 00 00	 call	 ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
  002d6	0f 29 9d 70 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+48], xmm3
  002dd	0f 29 95 60 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+32], xmm2
  002e4	0f 29 8d 50 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+16], xmm1
  002eb	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  002f2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002f7	8d b5 40 fd ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  002fd	8d bd 80 fe ff
	ff		 lea	 edi, DWORD PTR $T8[ebp]
  00303	f3 a5		 rep movsd
  00305	8d 95 80 fe ff
	ff		 lea	 edx, DWORD PTR $T8[ebp]
  0030b	52		 push	 edx
  0030c	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _mTranslation$11[ebp]
  00312	e8 00 00 00 00	 call	 ??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMMATRIX::operator=
; Line 159
  00317	e9 c2 00 00 00	 jmp	 $LN1@HandleMess
$LN2@HandleMess:
; Line 161
  0031c	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@40a00000
  00324	f3 0f 59 55 e8	 mulss	 xmm2, DWORD PTR _fDeltaY$13[ebp]
  00329	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@00000000
  00331	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00339	e8 00 00 00 00	 call	 ?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
  0033e	0f 29 9d 30 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+48], xmm3
  00345	0f 29 95 20 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+32], xmm2
  0034c	0f 29 8d 10 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+16], xmm1
  00353	0f 29 85 00 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0035a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0035f	8d b5 00 fd ff
	ff		 lea	 esi, DWORD PTR $T2[ebp]
  00365	8d bd 40 fe ff
	ff		 lea	 edi, DWORD PTR $T7[ebp]
  0036b	f3 a5		 rep movsd
  0036d	8d 85 40 fe ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00373	50		 push	 eax
  00374	8d 4d a0	 lea	 ecx, DWORD PTR _mTranslationDelta$12[ebp]
  00377	e8 00 00 00 00	 call	 ??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMMATRIX::operator=
; Line 162
  0037c	8d 4d a0	 lea	 ecx, DWORD PTR _mTranslationDelta$12[ebp]
  0037f	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _mTranslation$11[ebp]
  00386	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mTranslation$11[ebp+16]
  0038d	0f 28 95 70 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _mTranslation$11[ebp+32]
  00394	0f 28 5d 80	 movaps	 xmm3, XMMWORD PTR _mTranslation$11[ebp+48]
  00398	e8 00 00 00 00	 call	 ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
  0039d	0f 29 9d f0 fc
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  003a4	0f 29 95 e0 fc
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  003ab	0f 29 8d d0 fc
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  003b2	0f 29 85 c0 fc
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  003b9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003be	8d b5 c0 fc ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  003c4	8d bd 00 fe ff
	ff		 lea	 edi, DWORD PTR $T6[ebp]
  003ca	f3 a5		 rep movsd
  003cc	8d 8d 00 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  003d2	51		 push	 ecx
  003d3	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _mTranslation$11[ebp]
  003d9	e8 00 00 00 00	 call	 ??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMMATRIX::operator=
$LN1@HandleMess:
; Line 165
  003de	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003e1	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  003e7	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _mTranslationDelta$12[ebp]
  003eb	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _mTranslationDelta$12[ebp+16]
  003ef	0f 28 55 c0	 movaps	 xmm2, XMMWORD PTR _mTranslationDelta$12[ebp+32]
  003f3	0f 28 5d d0	 movaps	 xmm3, XMMWORD PTR _mTranslationDelta$12[ebp+48]
  003f7	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 166
  003fc	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003ff	83 c1 40	 add	 ecx, 64			; 00000040H
  00402	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _mTranslation$11[ebp]
  00409	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mTranslation$11[ebp+16]
  00410	0f 28 95 70 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _mTranslation$11[ebp+32]
  00417	0f 28 5d 80	 movaps	 xmm3, XMMWORD PTR _mTranslation$11[ebp+48]
  0041b	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 169
  00420	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00423	8b 45 f4	 mov	 eax, DWORD PTR _iMouseX$[ebp]
  00426	89 82 04 01 00
	00		 mov	 DWORD PTR [edx+260], eax
; Line 170
  0042c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0042f	8b 55 f0	 mov	 edx, DWORD PTR _iMouseY$[ebp]
  00432	89 91 08 01 00
	00		 mov	 DWORD PTR [ecx+264], edx
$LN4@HandleMess:
; Line 172
  00438	b8 01 00 00 00	 mov	 eax, 1
  0043d	eb 02		 jmp	 SHORT $LN16@HandleMess
$LN14@HandleMess:
; Line 175
  0043f	33 c0		 xor	 eax, eax
$LN16@HandleMess:
; Line 176
  00441	52		 push	 edx
  00442	8b cd		 mov	 ecx, ebp
  00444	50		 push	 eax
  00445	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN22@HandleMess
  0044b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00450	58		 pop	 eax
  00451	5a		 pop	 edx
  00452	5f		 pop	 edi
  00453	5e		 pop	 esi
  00454	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00457	33 cd		 xor	 ecx, ebp
  00459	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0045e	8b e5		 mov	 esp, ebp
  00460	5d		 pop	 ebp
  00461	8b e3		 mov	 esp, ebx
  00463	5b		 pop	 ebx
  00464	c2 10 00	 ret	 16			; 00000010H
  00467	90		 npad	 1
$LN22@HandleMess:
  00468	02 00 00 00	 DD	 2
  0046c	00 00 00 00	 DD	 $LN21@HandleMess
$LN21@HandleMess:
  00470	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00474	40 00 00 00	 DD	 64			; 00000040H
  00478	00 00 00 00	 DD	 $LN19@HandleMess
  0047c	50 ff ff ff	 DD	 -176			; ffffff50H
  00480	40 00 00 00	 DD	 64			; 00000040H
  00484	00 00 00 00	 DD	 $LN20@HandleMess
$LN20@HandleMess:
  00488	6d		 DB	 109			; 0000006dH
  00489	54		 DB	 84			; 00000054H
  0048a	72		 DB	 114			; 00000072H
  0048b	61		 DB	 97			; 00000061H
  0048c	6e		 DB	 110			; 0000006eH
  0048d	73		 DB	 115			; 00000073H
  0048e	6c		 DB	 108			; 0000006cH
  0048f	61		 DB	 97			; 00000061H
  00490	74		 DB	 116			; 00000074H
  00491	69		 DB	 105			; 00000069H
  00492	6f		 DB	 111			; 0000006fH
  00493	6e		 DB	 110			; 0000006eH
  00494	00		 DB	 0
$LN19@HandleMess:
  00495	6d		 DB	 109			; 0000006dH
  00496	54		 DB	 84			; 00000054H
  00497	72		 DB	 114			; 00000072H
  00498	61		 DB	 97			; 00000061H
  00499	6e		 DB	 110			; 0000006eH
  0049a	73		 DB	 115			; 00000073H
  0049b	6c		 DB	 108			; 0000006cH
  0049c	61		 DB	 97			; 00000061H
  0049d	74		 DB	 116			; 00000074H
  0049e	69		 DB	 105			; 00000069H
  0049f	6f		 DB	 111			; 0000006fH
  004a0	6e		 DB	 110			; 0000006eH
  004a1	44		 DB	 68			; 00000044H
  004a2	65		 DB	 101			; 00000065H
  004a3	6c		 DB	 108			; 0000006cH
  004a4	74		 DB	 116			; 00000074H
  004a5	61		 DB	 97			; 00000061H
  004a6	00		 DB	 0
  004a7	90		 npad	 1
$LN23@HandleMess:
  004a8	00 00 00 00	 DD	 $LN7@HandleMess
  004ac	00 00 00 00	 DD	 $LN13@HandleMess
  004b0	00 00 00 00	 DD	 $LN12@HandleMess
  004b4	00 00 00 00	 DD	 $LN9@HandleMess
  004b8	00 00 00 00	 DD	 $LN8@HandleMess
  004bc	00 00 00 00	 DD	 $LN11@HandleMess
  004c0	00 00 00 00	 DD	 $LN14@HandleMess
$LN18@HandleMess:
  004c4	00		 DB	 0
  004c5	01		 DB	 1
  004c6	02		 DB	 2
  004c7	01		 DB	 1
  004c8	03		 DB	 3
  004c9	04		 DB	 4
  004ca	03		 DB	 3
  004cb	03		 DB	 3
  004cc	04		 DB	 4
  004cd	03		 DB	 3
  004ce	06		 DB	 6
  004cf	06		 DB	 6
  004d0	06		 DB	 6
  004d1	06		 DB	 6
  004d2	06		 DB	 6
  004d3	06		 DB	 6
  004d4	06		 DB	 6
  004d5	06		 DB	 6
  004d6	06		 DB	 6
  004d7	06		 DB	 6
  004d8	06		 DB	 6
  004d9	05		 DB	 5
?HandleMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z ENDP	; CD3DArcBall::HandleMessages
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnEnd@CD3DArcBall@@QAEXXZ PROC				; CD3DArcBall::OnEnd
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 93
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 94
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c6 80 00 01 00
	00 00		 mov	 BYTE PTR [eax+256], 0
; Line 95
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?OnEnd@CD3DArcBall@@QAEXXZ ENDP				; CD3DArcBall::OnEnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
_result$3 = -128					; size = 16
$T4 = -112						; size = 16
_qdown$5 = -96						; size = 16
$T6 = -80						; size = 16
_down$7 = -64						; size = 16
_curr$8 = -32						; size = 16
_this$ = -4						; size = 4
_nX$ = 8						; size = 4
_nY$ = 12						; size = 4
?OnMove@CD3DArcBall@@QAEXHH@Z PROC			; CD3DArcBall::OnMove
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 76
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-160]
  00024	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 77
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	0f b6 88 00 01
	00 00		 movzx	 ecx, BYTE PTR [eax+256]
  0003e	85 c9		 test	 ecx, ecx
  00040	0f 84 b0 00 00
	00		 je	 $LN1@OnMove
; Line 79
  00046	f3 0f 2a 43 0c	 cvtsi2ss xmm0, DWORD PTR _nY$[ebx]
  0004b	51		 push	 ecx
  0004c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00051	f3 0f 2a 43 08	 cvtsi2ss xmm0, DWORD PTR _nX$[ebx]
  00056	51		 push	 ecx
  00057	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005c	8d 55 e0	 lea	 edx, DWORD PTR _curr$8[ebp]
  0005f	52		 push	 edx
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	e8 00 00 00 00	 call	 ?ScreenToVector@CD3DArcBall@@IAE?AT__m128@@MM@Z ; CD3DArcBall::ScreenToVector
; Line 80
  00068	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _curr$8[ebp]
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  00075	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 82
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  00083	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  00088	0f 29 45 b0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0008c	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  00090	0f 29 45 c0	 movaps	 XMMWORD PTR _down$7[ebp], xmm0
; Line 83
  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  0009d	e8 00 00 00 00	 call	 ?XMLoadFloat4@DirectX@@YQ?AT__m128@@PBUXMFLOAT4@1@@Z ; DirectX::XMLoadFloat4
  000a2	0f 29 45 90	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  000a6	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  000aa	0f 29 45 a0	 movaps	 XMMWORD PTR _qdown$5[ebp], xmm0
; Line 85
  000ae	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _curr$8[ebp]
  000b2	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _down$7[ebp]
  000b6	e8 00 00 00 00	 call	 ?QuatFromBallPoints@CD3DArcBall@@SA?AT__m128@@T2@0@Z ; CD3DArcBall::QuatFromBallPoints
  000bb	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000c2	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR $T2[ebp]
  000c9	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _qdown$5[ebp]
  000cd	e8 00 00 00 00	 call	 ?XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMQuaternionMultiply
  000d2	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000d9	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  000e0	0f 29 45 80	 movaps	 XMMWORD PTR _result$3[ebp], xmm0
; Line 86
  000e4	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _result$3[ebp]
  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	81 c1 f0 00 00
	00		 add	 ecx, 240		; 000000f0H
  000f1	e8 00 00 00 00	 call	 ?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z ; DirectX::XMStoreFloat4
$LN1@OnMove:
; Line 88
  000f6	52		 push	 edx
  000f7	8b cd		 mov	 ecx, ebp
  000f9	50		 push	 eax
  000fa	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@OnMove
  00100	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00105	58		 pop	 eax
  00106	5a		 pop	 edx
  00107	5f		 pop	 edi
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	8b e3		 mov	 esp, ebx
  0010d	5b		 pop	 ebx
  0010e	c2 08 00	 ret	 8
  00111	8d 49 00	 npad	 3
$LN6@OnMove:
  00114	01 00 00 00	 DD	 1
  00118	00 00 00 00	 DD	 $LN5@OnMove
$LN5@OnMove:
  0011c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00120	10 00 00 00	 DD	 16			; 00000010H
  00124	00 00 00 00	 DD	 $LN4@OnMove
$LN4@OnMove:
  00128	63		 DB	 99			; 00000063H
  00129	75		 DB	 117			; 00000075H
  0012a	72		 DB	 114			; 00000072H
  0012b	72		 DB	 114			; 00000072H
  0012c	00		 DB	 0
?OnMove@CD3DArcBall@@QAEXHH@Z ENDP			; CD3DArcBall::OnMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$1 = -32						; size = 16
_this$ = -4						; size = 4
_nX$ = 8						; size = 4
_nY$ = 12						; size = 4
?OnBegin@CD3DArcBall@@QAEXHH@Z PROC			; CD3DArcBall::OnBegin
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 58
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 64
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 4b 08	 mov	 ecx, DWORD PTR _nX$[ebx]
  00034	3b 88 c0 00 00
	00		 cmp	 ecx, DWORD PTR [eax+192]
  0003a	0f 8c 92 00 00
	00		 jl	 $LN1@OnBegin
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 82 c0 00 00
	00		 mov	 eax, DWORD PTR [edx+192]
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	03 81 c8 00 00
	00		 add	 eax, DWORD PTR [ecx+200]
  00052	39 43 08	 cmp	 DWORD PTR _nX$[ebx], eax
  00055	7d 7b		 jge	 SHORT $LN1@OnBegin
  00057	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005a	8b 43 0c	 mov	 eax, DWORD PTR _nY$[ebx]
  0005d	3b 82 c4 00 00
	00		 cmp	 eax, DWORD PTR [edx+196]
  00063	7c 6d		 jl	 SHORT $LN1@OnBegin
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	8b 91 c4 00 00
	00		 mov	 edx, DWORD PTR [ecx+196]
  0006e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00071	03 90 cc 00 00
	00		 add	 edx, DWORD PTR [eax+204]
  00077	39 53 0c	 cmp	 DWORD PTR _nY$[ebx], edx
  0007a	7d 56		 jge	 SHORT $LN1@OnBegin
; Line 66
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	c6 81 00 01 00
	00 01		 mov	 BYTE PTR [ecx+256], 1
; Line 67
  00086	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00089	81 c2 f0 00 00
	00		 add	 edx, 240		; 000000f0H
  0008f	52		 push	 edx
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  00099	e8 00 00 00 00	 call	 ??4XMFLOAT4@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT4::operator=
; Line 68
  0009e	f3 0f 2a 43 0c	 cvtsi2ss xmm0, DWORD PTR _nY$[ebx]
  000a3	51		 push	 ecx
  000a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a9	f3 0f 2a 43 08	 cvtsi2ss xmm0, DWORD PTR _nX$[ebx]
  000ae	51		 push	 ecx
  000af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b4	8d 45 e0	 lea	 eax, DWORD PTR _v$1[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?ScreenToVector@CD3DArcBall@@IAE?AT__m128@@MM@Z ; CD3DArcBall::ScreenToVector
; Line 69
  000c0	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _v$1[ebp]
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  000cd	e8 00 00 00 00	 call	 ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
$LN1@OnBegin:
; Line 71
  000d2	52		 push	 edx
  000d3	8b cd		 mov	 ecx, ebp
  000d5	50		 push	 eax
  000d6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@OnBegin
  000dc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e1	58		 pop	 eax
  000e2	5a		 pop	 edx
  000e3	5f		 pop	 edi
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	8b e3		 mov	 esp, ebx
  000e9	5b		 pop	 ebx
  000ea	c2 08 00	 ret	 8
  000ed	8d 49 00	 npad	 3
$LN6@OnBegin:
  000f0	01 00 00 00	 DD	 1
  000f4	00 00 00 00	 DD	 $LN5@OnBegin
$LN5@OnBegin:
  000f8	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000fc	10 00 00 00	 DD	 16			; 00000010H
  00100	00 00 00 00	 DD	 $LN4@OnBegin
$LN4@OnBegin:
  00104	76		 DB	 118			; 00000076H
  00105	00		 DB	 0
?OnBegin@CD3DArcBall@@QAEXHH@Z ENDP			; CD3DArcBall::OnBegin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetOffset@CD3DArcBall@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nX$ = 8						; size = 4
_nY$ = 12						; size = 4
?SetOffset@CD3DArcBall@@QAEXHH@Z PROC			; CD3DArcBall::SetOffset, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.h
; Line 37
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _nX$[ebp]
  00014	89 88 c0 00 00
	00		 mov	 DWORD PTR [eax+192], ecx
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	8b 45 0c	 mov	 eax, DWORD PTR _nY$[ebp]
  00020	89 82 c4 00 00
	00		 mov	 DWORD PTR [edx+196], eax
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 08 00	 ret	 8
?SetOffset@CD3DArcBall@@QAEXHH@Z ENDP			; CD3DArcBall::SetOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetWindow@CD3DArcBall@@QAEXHHM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nWidth$ = 8						; size = 4
_nHeight$ = 12						; size = 4
_fRadius$ = 16						; size = 4
?SetWindow@CD3DArcBall@@QAEXHHM@Z PROC			; CD3DArcBall::SetWindow, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.h
; Line 30
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 31
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _nWidth$[ebp]
  00014	89 88 c8 00 00
	00		 mov	 DWORD PTR [eax+200], ecx
; Line 32
  0001a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001d	8b 45 0c	 mov	 eax, DWORD PTR _nHeight$[ebp]
  00020	89 82 cc 00 00
	00		 mov	 DWORD PTR [edx+204], eax
; Line 33
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fRadius$[ebp]
  0002e	f3 0f 11 81 d8
	00 00 00	 movss	 DWORD PTR [ecx+216], xmm0
; Line 34
  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	f3 0f 2a 82 c8
	00 00 00	 cvtsi2ss xmm0, DWORD PTR [edx+200]
  00041	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	f3 0f 11 80 d0
	00 00 00	 movss	 DWORD PTR [eax+208], xmm0
; Line 35
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	f3 0f 2a 81 cc
	00 00 00	 cvtsi2ss xmm0, DWORD PTR [ecx+204]
  0005f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00067	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006a	f3 0f 11 82 d4
	00 00 00	 movss	 DWORD PTR [edx+212], xmm0
; Line 36
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 0c 00	 ret	 12			; 0000000cH
?SetWindow@CD3DArcBall@@QAEXHHM@Z ENDP			; CD3DArcBall::SetWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -272						; size = 64
$T2 = -208						; size = 64
_id$ = -128						; size = 64
$T3 = -48						; size = 16
_qid$ = -32						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Reset@CD3DArcBall@@QAEXXZ PROC				; CD3DArcBall::Reset
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 40
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00025	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 41
  0003f	e8 00 00 00 00	 call	 ?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ ; DirectX::XMQuaternionIdentity
  00044	0f 29 45 d0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00048	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0004c	0f 29 45 e0	 movaps	 XMMWORD PTR _qid$[ebp], xmm0
; Line 42
  00050	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _qid$[ebp]
  00054	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  0005d	e8 00 00 00 00	 call	 ?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z ; DirectX::XMStoreFloat4
; Line 43
  00062	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _qid$[ebp]
  00066	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	81 c1 f0 00 00
	00		 add	 ecx, 240		; 000000f0H
  0006f	e8 00 00 00 00	 call	 ?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z ; DirectX::XMStoreFloat4
; Line 45
  00074	e8 00 00 00 00	 call	 ?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ ; DirectX::XMMatrixIdentity
  00079	0f 29 9d 20 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00080	0f 29 95 10 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  00087	0f 29 8d 00 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  0008e	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00095	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0009a	8d b5 f0 fe ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  000a0	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR $T2[ebp]
  000a6	f3 a5		 rep movsd
  000a8	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000ad	8d b5 30 ff ff
	ff		 lea	 esi, DWORD PTR $T2[ebp]
  000b3	8d 7d 80	 lea	 edi, DWORD PTR _id$[ebp]
  000b6	f3 a5		 rep movsd
; Line 46
  000b8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _id$[ebp]
  000bf	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _id$[ebp+16]
  000c3	0f 28 55 a0	 movaps	 xmm2, XMMWORD PTR _id$[ebp+32]
  000c7	0f 28 5d b0	 movaps	 xmm3, XMMWORD PTR _id$[ebp+48]
  000cb	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 47
  000d0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d3	83 c1 40	 add	 ecx, 64			; 00000040H
  000d6	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _id$[ebp]
  000da	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _id$[ebp+16]
  000de	0f 28 55 a0	 movaps	 xmm2, XMMWORD PTR _id$[ebp+32]
  000e2	0f 28 5d b0	 movaps	 xmm3, XMMWORD PTR _id$[ebp+48]
  000e6	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 48
  000eb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  000f4	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _id$[ebp]
  000f8	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _id$[ebp+16]
  000fc	0f 28 55 a0	 movaps	 xmm2, XMMWORD PTR _id$[ebp+32]
  00100	0f 28 5d b0	 movaps	 xmm3, XMMWORD PTR _id$[ebp+48]
  00104	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 50
  00109	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	c6 80 00 01 00
	00 00		 mov	 BYTE PTR [eax+256], 0
; Line 51
  00113	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00116	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0011e	f3 0f 11 81 dc
	00 00 00	 movss	 DWORD PTR [ecx+220], xmm0
; Line 52
  00126	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00129	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00131	f3 0f 11 82 d8
	00 00 00	 movss	 DWORD PTR [edx+216], xmm0
; Line 53
  00139	52		 push	 edx
  0013a	8b cd		 mov	 ecx, ebp
  0013c	50		 push	 eax
  0013d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Reset
  00143	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00148	58		 pop	 eax
  00149	5a		 pop	 edx
  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014f	33 cd		 xor	 ecx, ebp
  00151	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	8b e3		 mov	 esp, ebx
  0015b	5b		 pop	 ebx
  0015c	c3		 ret	 0
  0015d	8d 49 00	 npad	 3
$LN5@Reset:
  00160	01 00 00 00	 DD	 1
  00164	00 00 00 00	 DD	 $LN4@Reset
$LN4@Reset:
  00168	80 ff ff ff	 DD	 -128			; ffffff80H
  0016c	40 00 00 00	 DD	 64			; 00000040H
  00170	00 00 00 00	 DD	 $LN3@Reset
$LN3@Reset:
  00174	69		 DB	 105			; 00000069H
  00175	64		 DB	 100			; 00000064H
  00176	00		 DB	 0
?Reset@CD3DArcBall@@QAEXXZ ENDP				; CD3DArcBall::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -56						; size = 12
$T2 = -44						; size = 12
_rc$ = -28						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
??0CD3DArcBall@@QAE@XZ PROC				; CD3DArcBall::CD3DArcBall
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\dxutcamera.cpp
; Line 25
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0000c	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	83 c1 40	 add	 ecx, 64			; 00000040H
  00034	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
  00039	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00042	e8 00 00 00 00	 call	 ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H
  00050	e8 00 00 00 00	 call	 ??0XMFLOAT2@DirectX@@QAE@XZ ; DirectX::XMFLOAT2::XMFLOAT2
  00055	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	81 c1 e0 00 00
	00		 add	 ecx, 224		; 000000e0H
  0005e	e8 00 00 00 00	 call	 ??0XMFLOAT4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4::XMFLOAT4
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	81 c1 f0 00 00
	00		 add	 ecx, 240		; 000000f0H
  0006c	e8 00 00 00 00	 call	 ??0XMFLOAT4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4::XMFLOAT4
  00071	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  0007a	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
  0007f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  00088	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
; Line 26
  0008d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	e8 00 00 00 00	 call	 ?Reset@CD3DArcBall@@QAEXXZ ; CD3DArcBall::Reset
; Line 28
  00095	51		 push	 ecx
  00096	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0009e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a3	51		 push	 ecx
  000a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b1	51		 push	 ecx
  000b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bf	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  000c2	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@MMM@Z ; DirectX::XMFLOAT3::XMFLOAT3
  000c7	50		 push	 eax
  000c8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  000d1	e8 00 00 00 00	 call	 ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT3::operator=
; Line 29
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f2	51		 push	 ecx
  000f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	8d 4d c8	 lea	 ecx, DWORD PTR $T1[ebp]
  00103	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@MMM@Z ; DirectX::XMFLOAT3::XMFLOAT3
  00108	50		 push	 eax
  00109	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0010c	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  00112	e8 00 00 00 00	 call	 ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT3::operator=
; Line 30
  00117	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	c7 80 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+196], 0
  00124	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00127	c7 81 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+192], 0
; Line 33
  00131	8b f4		 mov	 esi, esp
  00133	8d 55 e4	 lea	 edx, DWORD PTR _rc$[ebp]
  00136	52		 push	 edx
  00137	8b fc		 mov	 edi, esp
  00139	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetForegroundWindow@0
  0013f	3b fc		 cmp	 edi, esp
  00141	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00146	50		 push	 eax
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
  0014d	3b f4		 cmp	 esi, esp
  0014f	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 34
  00154	51		 push	 ecx
  00155	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	8b 45 f0	 mov	 eax, DWORD PTR _rc$[ebp+12]
  00165	50		 push	 eax
  00166	8b 4d ec	 mov	 ecx, DWORD PTR _rc$[ebp+8]
  00169	51		 push	 ecx
  0016a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016d	e8 00 00 00 00	 call	 ?SetWindow@CD3DArcBall@@QAEXHHM@Z ; CD3DArcBall::SetWindow
; Line 35
  00172	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00175	52		 push	 edx
  00176	8b cd		 mov	 ecx, ebp
  00178	50		 push	 eax
  00179	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@CD3DArcBal
  0017f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00184	58		 pop	 eax
  00185	5a		 pop	 edx
  00186	5f		 pop	 edi
  00187	5e		 pop	 esi
  00188	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0018b	33 cd		 xor	 ecx, ebp
  0018d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00192	83 c4 38	 add	 esp, 56			; 00000038H
  00195	3b ec		 cmp	 ebp, esp
  00197	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019c	8b e5		 mov	 esp, ebp
  0019e	5d		 pop	 ebp
  0019f	c3		 ret	 0
$LN5@CD3DArcBal:
  001a0	01 00 00 00	 DD	 1
  001a4	00 00 00 00	 DD	 $LN4@CD3DArcBal
$LN4@CD3DArcBal:
  001a8	e4 ff ff ff	 DD	 -28			; ffffffe4H
  001ac	10 00 00 00	 DD	 16			; 00000010H
  001b0	00 00 00 00	 DD	 $LN3@CD3DArcBal
$LN3@CD3DArcBal:
  001b4	72		 DB	 114			; 00000072H
  001b5	63		 DB	 99			; 00000063H
  001b6	00		 DB	 0
??0CD3DArcBall@@QAE@XZ ENDP				; CD3DArcBall::CD3DArcBall
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
tv132 = -240						; size = 16
tv130 = -224						; size = 16
$T1 = -208						; size = 16
$T2 = -192						; size = 16
$T3 = -176						; size = 16
_masked2$ = -160					; size = 16
$T4 = -144						; size = 16
$T5 = -128						; size = 16
_masked1$ = -112					; size = 16
$T6 = -96						; size = 16
_shuffled2$ = -80					; size = 16
$T7 = -64						; size = 16
_shuffled1$ = -48					; size = 16
_v2$ = -32						; size = 16
_v1$ = -16						; size = 16
?Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute, COMDAT
; _v1$ = xmm0
; _v2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1453
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00024	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 4d e0	 movaps	 XMMWORD PTR _v2$[ebp], xmm1
  00035	0f 29 45 f0	 movaps	 XMMWORD PTR _v1$[ebp], xmm0
; Line 1462
  00039	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _v1$[ebp]
  0003d	0f c6 45 f0 aa	 shufps	 xmm0, XMMWORD PTR _v1$[ebp], 170 ; 000000aaH
  00042	0f 29 45 c0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00046	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0004a	0f 29 45 d0	 movaps	 XMMWORD PTR _shuffled1$[ebp], xmm0
; Line 1463
  0004e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _v2$[ebp]
  00052	0f c6 45 e0 aa	 shufps	 xmm0, XMMWORD PTR _v2$[ebp], 170 ; 000000aaH
  00057	0f 29 45 a0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0005b	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0005f	0f 29 45 b0	 movaps	 XMMWORD PTR _shuffled2$[ebp], xmm0
; Line 1465
  00063	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _shuffled1$[ebp]
  00067	8d 45 80	 lea	 eax, DWORD PTR $T5[ebp]
  0006a	50		 push	 eax
  0006b	b9 00 00 00 00	 mov	 ecx, OFFSET ?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute'::`2'::selectMask
  00070	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR tv130[ebp], xmm0
  00077	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  0007c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0007f	0f 28 8d 20 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR tv130[ebp]
  00086	0f 55 c1	 andnps	 xmm0, xmm1
  00089	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00090	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00097	0f 29 45 90	 movaps	 XMMWORD PTR _masked1$[ebp], xmm0
; Line 1466
  0009b	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _shuffled2$[ebp]
  0009f	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000a5	51		 push	 ecx
  000a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute'::`2'::selectMask
  000ab	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR tv132[ebp], xmm0
  000b2	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  000b7	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000ba	0f 28 8d 10 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR tv132[ebp]
  000c1	0f 54 c1	 andps	 xmm0, xmm1
  000c4	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000cb	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000d2	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _masked2$[ebp], xmm0
; Line 1468
  000d9	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _masked1$[ebp]
  000dd	0f 56 85 60 ff
	ff ff		 orps	 xmm0, XMMWORD PTR _masked2$[ebp]
  000e4	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000eb	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 1469
  000f2	5f		 pop	 edi
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	8b e3		 mov	 esp, ebx
  000f8	5b		 pop	 ebx
  000f9	c3		 ret	 0
?Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
tv132 = -240						; size = 16
tv130 = -224						; size = 16
$T1 = -208						; size = 16
$T2 = -192						; size = 16
$T3 = -176						; size = 16
_masked2$ = -160					; size = 16
$T4 = -144						; size = 16
$T5 = -128						; size = 16
_masked1$ = -112					; size = 16
$T6 = -96						; size = 16
_shuffled2$ = -80					; size = 16
$T7 = -64						; size = 16
_shuffled1$ = -48					; size = 16
_v2$ = -32						; size = 16
_v1$ = -16						; size = 16
?Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute, COMDAT
; _v1$ = xmm0
; _v2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1453
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00024	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 4d e0	 movaps	 XMMWORD PTR _v2$[ebp], xmm1
  00035	0f 29 45 f0	 movaps	 XMMWORD PTR _v1$[ebp], xmm0
; Line 1462
  00039	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _v1$[ebp]
  0003d	0f c6 45 f0 55	 shufps	 xmm0, XMMWORD PTR _v1$[ebp], 85 ; 00000055H
  00042	0f 29 45 c0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00046	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0004a	0f 29 45 d0	 movaps	 XMMWORD PTR _shuffled1$[ebp], xmm0
; Line 1463
  0004e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _v2$[ebp]
  00052	0f c6 45 e0 55	 shufps	 xmm0, XMMWORD PTR _v2$[ebp], 85 ; 00000055H
  00057	0f 29 45 a0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0005b	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0005f	0f 29 45 b0	 movaps	 XMMWORD PTR _shuffled2$[ebp], xmm0
; Line 1465
  00063	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _shuffled1$[ebp]
  00067	8d 45 80	 lea	 eax, DWORD PTR $T5[ebp]
  0006a	50		 push	 eax
  0006b	b9 00 00 00 00	 mov	 ecx, OFFSET ?selectMask@?1??Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute'::`2'::selectMask
  00070	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR tv130[ebp], xmm0
  00077	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  0007c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0007f	0f 28 8d 20 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR tv130[ebp]
  00086	0f 55 c1	 andnps	 xmm0, xmm1
  00089	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00090	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00097	0f 29 45 90	 movaps	 XMMWORD PTR _masked1$[ebp], xmm0
; Line 1466
  0009b	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _shuffled2$[ebp]
  0009f	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000a5	51		 push	 ecx
  000a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?selectMask@?1??Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute'::`2'::selectMask
  000ab	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR tv132[ebp], xmm0
  000b2	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  000b7	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000ba	0f 28 8d 10 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR tv132[ebp]
  000c1	0f 54 c1	 andps	 xmm0, xmm1
  000c4	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000cb	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000d2	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _masked2$[ebp], xmm0
; Line 1468
  000d9	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _masked1$[ebp]
  000dd	0f 56 85 60 ff
	ff ff		 orps	 xmm0, XMMWORD PTR _masked2$[ebp]
  000e4	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000eb	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 1469
  000f2	5f		 pop	 edi
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	8b e3		 mov	 esp, ebx
  000f8	5b		 pop	 ebx
  000f9	c3		 ret	 0
?Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
tv132 = -240						; size = 16
tv130 = -224						; size = 16
$T1 = -208						; size = 16
$T2 = -192						; size = 16
$T3 = -176						; size = 16
_masked2$ = -160					; size = 16
$T4 = -144						; size = 16
$T5 = -128						; size = 16
_masked1$ = -112					; size = 16
$T6 = -96						; size = 16
_shuffled2$ = -80					; size = 16
$T7 = -64						; size = 16
_shuffled1$ = -48					; size = 16
_v2$ = -32						; size = 16
_v1$ = -16						; size = 16
?Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute, COMDAT
; _v1$ = xmm0
; _v2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1453
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00024	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 4d e0	 movaps	 XMMWORD PTR _v2$[ebp], xmm1
  00035	0f 29 45 f0	 movaps	 XMMWORD PTR _v1$[ebp], xmm0
; Line 1462
  00039	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _v1$[ebp]
  0003d	0f c6 45 f0 00	 shufps	 xmm0, XMMWORD PTR _v1$[ebp], 0
  00042	0f 29 45 c0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00046	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0004a	0f 29 45 d0	 movaps	 XMMWORD PTR _shuffled1$[ebp], xmm0
; Line 1463
  0004e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _v2$[ebp]
  00052	0f c6 45 e0 00	 shufps	 xmm0, XMMWORD PTR _v2$[ebp], 0
  00057	0f 29 45 a0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0005b	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0005f	0f 29 45 b0	 movaps	 XMMWORD PTR _shuffled2$[ebp], xmm0
; Line 1465
  00063	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _shuffled1$[ebp]
  00067	8d 45 80	 lea	 eax, DWORD PTR $T5[ebp]
  0006a	50		 push	 eax
  0006b	b9 00 00 00 00	 mov	 ecx, OFFSET ?selectMask@?1??Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute'::`2'::selectMask
  00070	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR tv130[ebp], xmm0
  00077	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  0007c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0007f	0f 28 8d 20 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR tv130[ebp]
  00086	0f 55 c1	 andnps	 xmm0, xmm1
  00089	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00090	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00097	0f 29 45 90	 movaps	 XMMWORD PTR _masked1$[ebp], xmm0
; Line 1466
  0009b	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _shuffled2$[ebp]
  0009f	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000a5	51		 push	 ecx
  000a6	b9 00 00 00 00	 mov	 ecx, OFFSET ?selectMask@?1??Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute'::`2'::selectMask
  000ab	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR tv132[ebp], xmm0
  000b2	e8 00 00 00 00	 call	 ??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
  000b7	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000ba	0f 28 8d 10 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR tv132[ebp]
  000c1	0f 54 c1	 andps	 xmm0, xmm1
  000c4	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000cb	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000d2	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _masked2$[ebp], xmm0
; Line 1468
  000d9	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _masked1$[ebp]
  000dd	0f 56 85 60 ff
	ff ff		 orps	 xmm0, XMMWORD PTR _masked2$[ebp]
  000e4	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000eb	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 1469
  000f2	5f		 pop	 edi
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	8b e3		 mov	 esp, ebx
  000f8	5b		 pop	 ebx
  000f9	c3		 ret	 0
?Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsStopped@CDXUTTimer@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStopped@CDXUTTimer@@QBE_NXZ PROC			; CDXUTTimer::IsStopped, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\core\dxutmisc.h
; Line 94
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 01	 mov	 al, BYTE PTR [eax+1]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?IsStopped@CDXUTTimer@@QBE_NXZ ENDP			; CDXUTTimer::IsStopped
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$XMVectorPermute@$05$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
$T1 = -64						; size = 16
_WhichW$ = -40						; size = 1
_WhichZ$ = -39						; size = 1
_WhichY$ = -38						; size = 1
_WhichX$ = -37						; size = 1
_Shuffle$ = -36						; size = 4
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
??$XMVectorPermute@$05$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<6,6,2,6>, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1502
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 40	 sub	 esp, 64			; 00000040H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0001e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1509
  00033	c7 45 dc aa 00
	00 00		 mov	 DWORD PTR _Shuffle$[ebp], 170 ; 000000aaH
; Line 1511
  0003a	c6 45 db 01	 mov	 BYTE PTR _WhichX$[ebp], 1
; Line 1512
  0003e	c6 45 da 01	 mov	 BYTE PTR _WhichY$[ebp], 1
; Line 1513
  00042	c6 45 d9 00	 mov	 BYTE PTR _WhichZ$[ebp], 0
; Line 1514
  00046	c6 45 d8 01	 mov	 BYTE PTR _WhichW$[ebp], 1
; Line 1516
  0004a	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _V2$[ebp]
  0004e	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00052	e8 00 00 00 00	 call	 ?Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute
  00057	0f 29 45 c0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0005b	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 1522
  0005f	5f		 pop	 edi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	8b e3		 mov	 esp, ebx
  00065	5b		 pop	 ebx
  00066	c3		 ret	 0
??$XMVectorPermute@$05$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<6,6,2,6>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$XMVectorPermute@$04$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
$T1 = -64						; size = 16
_WhichW$ = -40						; size = 1
_WhichZ$ = -39						; size = 1
_WhichY$ = -38						; size = 1
_WhichX$ = -37						; size = 1
_Shuffle$ = -36						; size = 4
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
??$XMVectorPermute@$04$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<5,1,5,5>, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1502
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 40	 sub	 esp, 64			; 00000040H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0001e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1509
  00033	c7 45 dc 55 00
	00 00		 mov	 DWORD PTR _Shuffle$[ebp], 85 ; 00000055H
; Line 1511
  0003a	c6 45 db 01	 mov	 BYTE PTR _WhichX$[ebp], 1
; Line 1512
  0003e	c6 45 da 00	 mov	 BYTE PTR _WhichY$[ebp], 0
; Line 1513
  00042	c6 45 d9 01	 mov	 BYTE PTR _WhichZ$[ebp], 1
; Line 1514
  00046	c6 45 d8 01	 mov	 BYTE PTR _WhichW$[ebp], 1
; Line 1516
  0004a	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _V2$[ebp]
  0004e	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00052	e8 00 00 00 00	 call	 ?Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute
  00057	0f 29 45 c0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0005b	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 1522
  0005f	5f		 pop	 edi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	8b e3		 mov	 esp, ebx
  00065	5b		 pop	 ebx
  00066	c3		 ret	 0
??$XMVectorPermute@$04$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<5,1,5,5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$XMVectorPermute@$0A@$03$03$03@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
$T1 = -64						; size = 16
_WhichW$ = -40						; size = 1
_WhichZ$ = -39						; size = 1
_WhichY$ = -38						; size = 1
_WhichX$ = -37						; size = 1
_Shuffle$ = -36						; size = 4
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
??$XMVectorPermute@$0A@$03$03$03@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<0,4,4,4>, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1502
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 40	 sub	 esp, 64			; 00000040H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0001e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1509
  00033	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _Shuffle$[ebp], 0
; Line 1511
  0003a	c6 45 db 00	 mov	 BYTE PTR _WhichX$[ebp], 0
; Line 1512
  0003e	c6 45 da 01	 mov	 BYTE PTR _WhichY$[ebp], 1
; Line 1513
  00042	c6 45 d9 01	 mov	 BYTE PTR _WhichZ$[ebp], 1
; Line 1514
  00046	c6 45 d8 01	 mov	 BYTE PTR _WhichW$[ebp], 1
; Line 1516
  0004a	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _V2$[ebp]
  0004e	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00052	e8 00 00 00 00	 call	 ?Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute
  00057	0f 29 45 c0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0005b	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 1522
  0005f	5f		 pop	 edi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	8b e3		 mov	 esp, ebx
  00065	5b		 pop	 ebx
  00066	c3		 ret	 0
??$XMVectorPermute@$0A@$03$03$03@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<0,4,4,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMReciprocalTwoPi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMReciprocalTwoPi@DirectX@@YAXXZ PROC		; DirectX::`dynamic initializer for 'g_XMReciprocalTwoPi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1736
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIV2PI
  0000b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B, xmm0
  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIV2PI
  0001b	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIV2PI
  0002b	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIV2PI
  0003b	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??__Eg_XMReciprocalTwoPi@DirectX@@YAXXZ ENDP		; DirectX::`dynamic initializer for 'g_XMReciprocalTwoPi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMTwoPi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMTwoPi@DirectX@@YAXXZ PROC			; DirectX::`dynamic initializer for 'g_XMTwoPi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1735
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_2PI
  0000b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B, xmm0
  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_2PI
  0001b	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_2PI
  0002b	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_2PI
  0003b	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??__Eg_XMTwoPi@DirectX@@YAXXZ ENDP			; DirectX::`dynamic initializer for 'g_XMTwoPi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMPi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMPi@DirectX@@YAXXZ PROC				; DirectX::`dynamic initializer for 'g_XMPi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1733
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  0000b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?g_XMPi@DirectX@@3UXMVECTORF32@1@B, xmm0
  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  0001b	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?g_XMPi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  0002b	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?g_XMPi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  0003b	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?g_XMPi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??__Eg_XMPi@DirectX@@YAXXZ ENDP				; DirectX::`dynamic initializer for 'g_XMPi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMHalfPi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMHalfPi@DirectX@@YAXXZ PROC			; DirectX::`dynamic initializer for 'g_XMHalfPi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1732
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PIDIV2
  0000b	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B, xmm0
  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PIDIV2
  0001b	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
  00023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PIDIV2
  0002b	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
  00033	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PIDIV2
  0003b	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??__Eg_XMHalfPi@DirectX@@YAXXZ ENDP			; DirectX::`dynamic initializer for 'g_XMHalfPi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMScalarSinCos@DirectX@@YAXPAM0M@Z
_TEXT	SEGMENT
_p$ = -20						; size = 4
_y2$ = -16						; size = 4
_sign$ = -12						; size = 4
_y$ = -8						; size = 4
_quotient$ = -4						; size = 4
_pSin$ = 8						; size = 4
_pCos$ = 12						; size = 4
_Value$ = 16						; size = 4
?XMScalarSinCos@DirectX@@YAXPAM0M@Z PROC		; DirectX::XMScalarSinCos, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 2340
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 2341
  0001b	83 7d 08 00	 cmp	 DWORD PTR _pSin$[ebp], 0
  0001f	75 21		 jne	 SHORT $LN9@XMScalarSi
  00021	8b f4		 mov	 esi, esp
  00023	68 25 09 00 00	 push	 2341			; 00000925H
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_1IO@PAPJGEKF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_19MFJHDIJG@?$AAp?$AAS?$AAi?$AAn?$AA?$AA@
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	3b f4		 cmp	 esi, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN9@XMScalarSi:
; Line 2342
  00042	83 7d 0c 00	 cmp	 DWORD PTR _pCos$[ebp], 0
  00046	75 21		 jne	 SHORT $LN10@XMScalarSi
  00048	8b f4		 mov	 esi, esp
  0004a	68 26 09 00 00	 push	 2342			; 00000926H
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_1IO@PAPJGEKF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_19MNAGGFOC@?$AAp?$AAC?$AAo?$AAs?$AA?$AA@
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN10@XMScalarSi:
; Line 2345
  00069	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_1DIV2PI
  00071	f3 0f 59 45 10	 mulss	 xmm0, DWORD PTR _Value$[ebp]
  00076	f3 0f 11 45 fc	 movss	 DWORD PTR _quotient$[ebp], xmm0
; Line 2346
  0007b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _Value$[ebp]
  00080	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00087	72 1c		 jb	 SHORT $LN6@XMScalarSi
; Line 2348
  00089	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _quotient$[ebp]
  0008e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00096	f3 0f 2c d0	 cvttss2si edx, xmm0
  0009a	f3 0f 2a c2	 cvtsi2ss xmm0, edx
  0009e	f3 0f 11 45 fc	 movss	 DWORD PTR _quotient$[ebp], xmm0
; Line 2350
  000a3	eb 1a		 jmp	 SHORT $LN5@XMScalarSi
$LN6@XMScalarSi:
; Line 2352
  000a5	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _quotient$[ebp]
  000aa	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  000b2	f3 0f 2c c0	 cvttss2si eax, xmm0
  000b6	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000ba	f3 0f 11 45 fc	 movss	 DWORD PTR _quotient$[ebp], xmm0
$LN5@XMScalarSi:
; Line 2354
  000bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_2PI
  000c7	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _quotient$[ebp]
  000cc	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _Value$[ebp]
  000d1	f3 0f 5c c8	 subss	 xmm1, xmm0
  000d5	f3 0f 11 4d f8	 movss	 DWORD PTR _y$[ebp], xmm1
; Line 2358
  000da	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  000df	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR _XM_PIDIV2
  000e6	76 21		 jbe	 SHORT $LN4@XMScalarSi
; Line 2360
  000e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  000f0	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _y$[ebp]
  000f5	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
; Line 2361
  000fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00102	f3 0f 11 45 f4	 movss	 DWORD PTR _sign$[ebp], xmm0
  00107	eb 4a		 jmp	 SHORT $LN1@XMScalarSi
$LN4@XMScalarSi:
; Line 2363
  00109	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PIDIV2
  00111	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00118	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _y$[ebp]
  0011c	76 28		 jbe	 SHORT $LN2@XMScalarSi
; Line 2365
  0011e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR _XM_PI
  00126	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0012d	f3 0f 5c 45 f8	 subss	 xmm0, DWORD PTR _y$[ebp]
  00132	f3 0f 11 45 f8	 movss	 DWORD PTR _y$[ebp], xmm0
; Line 2366
  00137	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0013f	f3 0f 11 45 f4	 movss	 DWORD PTR _sign$[ebp], xmm0
; Line 2368
  00144	eb 0d		 jmp	 SHORT $LN1@XMScalarSi
$LN2@XMScalarSi:
; Line 2370
  00146	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0014e	f3 0f 11 45 f4	 movss	 DWORD PTR _sign$[ebp], xmm0
$LN1@XMScalarSi:
; Line 2373
  00153	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _y$[ebp]
  00158	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _y$[ebp]
  0015d	f3 0f 11 45 f0	 movss	 DWORD PTR _y2$[ebp], xmm0
; Line 2376
  00162	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@b2cd365b
  0016a	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _y2$[ebp]
  0016f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3638b88e
  00177	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _y2$[ebp]
  0017c	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@39500bf1
  00184	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _y2$[ebp]
  00189	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3c088886
  00191	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _y2$[ebp]
  00196	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3e2aaaab
  0019e	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _y2$[ebp]
  001a3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  001ab	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _y$[ebp]
  001b0	8b 4d 08	 mov	 ecx, DWORD PTR _pSin$[ebp]
  001b3	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
; Line 2379
  001b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@b48bdd11
  001bf	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _y2$[ebp]
  001c4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@37cfb4c2
  001cc	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _y2$[ebp]
  001d1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3ab609aa
  001d9	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _y2$[ebp]
  001de	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3d2aaaa3
  001e6	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _y2$[ebp]
  001eb	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  001f3	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _y2$[ebp]
  001f8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00200	f3 0f 11 45 ec	 movss	 DWORD PTR _p$[ebp], xmm0
; Line 2380
  00205	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _sign$[ebp]
  0020a	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _p$[ebp]
  0020f	8b 55 0c	 mov	 edx, DWORD PTR _pCos$[ebp]
  00212	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
; Line 2381
  00216	5e		 pop	 esi
  00217	83 c4 14	 add	 esp, 20			; 00000014H
  0021a	3b ec		 cmp	 ebp, esp
  0021c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00221	8b e5		 mov	 esp, ebp
  00223	5d		 pop	 ebp
  00224	c3		 ret	 0
?XMScalarSinCos@DirectX@@YAXPAM0M@Z ENDP		; DirectX::XMScalarSinCos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMScalarNearEqual@DirectX@@YA_NMMM@Z
_TEXT	SEGMENT
tv68 = -12						; size = 4
tv76 = -8						; size = 4
_Delta$ = -4						; size = 4
_S1$ = 8						; size = 4
_S2$ = 12						; size = 4
_Epsilon$ = 16						; size = 4
?XMScalarNearEqual@DirectX@@YA_NMMM@Z PROC		; DirectX::XMScalarNearEqual, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 2150
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 2151
  0001b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _S1$[ebp]
  00020	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _S2$[ebp]
  00025	f3 0f 11 45 fc	 movss	 DWORD PTR _Delta$[ebp], xmm0
; Line 2152
  0002a	51		 push	 ecx
  0002b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Delta$[ebp]
  00030	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _fabsf
  0003a	83 c4 04	 add	 esp, 4
  0003d	d9 5d f8	 fstp	 DWORD PTR tv76[ebp]
  00040	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _Epsilon$[ebp]
  00045	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR tv76[ebp]
  00049	72 09		 jb	 SHORT $LN3@XMScalarNe
  0004b	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00052	eb 07		 jmp	 SHORT $LN4@XMScalarNe
$LN3@XMScalarNe:
  00054	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@XMScalarNe:
  0005b	8a 45 f4	 mov	 al, BYTE PTR tv68[ebp]
; Line 2153
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?XMScalarNearEqual@DirectX@@YA_NMMM@Z ENDP		; DirectX::XMScalarNearEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@1@@Z
_TEXT	SEGMENT
tv402 = -1280						; size = 16
tv400 = -1264						; size = 16
tv398 = -1248						; size = 16
tv396 = -1232						; size = 16
$T1 = -1216						; size = 16
$T2 = -1200						; size = 16
$T3 = -1184						; size = 16
$T4 = -1168						; size = 16
$T5 = -1152						; size = 16
$T6 = -1136						; size = 16
$T7 = -1120						; size = 16
$T8 = -1104						; size = 16
$T9 = -1088						; size = 16
$T10 = -1072						; size = 16
$T11 = -1056						; size = 16
$T12 = -1040						; size = 16
_tensor3$ = -1024					; size = 16
$T13 = -1008						; size = 16
_tensor2$ = -992					; size = 16
$T14 = -976						; size = 16
_tensor1$ = -960					; size = 16
$T15 = -944						; size = 16
_tensor0$ = -928					; size = 16
$T16 = -912						; size = 16
$T17 = -896						; size = 16
$T18 = -880						; size = 16
$T19 = -864						; size = 16
$T20 = -848						; size = 16
$T21 = -832						; size = 16
_xwywzw$ = -816						; size = 16
$T22 = -800						; size = 16
$T23 = -784						; size = 16
$T24 = -768						; size = 16
$T25 = -752						; size = 16
_xyxzyz$ = -736						; size = 16
$T26 = -720						; size = 16
$T27 = -704						; size = 16
$T28 = -688						; size = 16
$T29 = -672						; size = 16
$T30 = -656						; size = 16
$T31 = -640						; size = 16
$T32 = -624						; size = 16
_x2y2z2w2$ = -608					; size = 16
$T33 = -592						; size = 16
$T34 = -576						; size = 16
_t2$ = -560						; size = 16
$T35 = -544						; size = 16
$T36 = -528						; size = 16
_t1$ = -512						; size = 16
$T37 = -496						; size = 16
$T38 = -480						; size = 16
_t0$ = -464						; size = 16
$T39 = -448						; size = 16
$T40 = -432						; size = 16
_x2py2gez2pw2$ = -416					; size = 16
$T41 = -400						; size = 16
$T42 = -384						; size = 16
_z2gew2$ = -368						; size = 16
$T43 = -352						; size = 16
_r11pr00$ = -336					; size = 16
$T44 = -320						; size = 16
$T45 = -304						; size = 16
_x2gey2$ = -288						; size = 16
$T46 = -272						; size = 16
_r11mr00$ = -256					; size = 16
$T47 = -240						; size = 16
_r22$ = -224						; size = 16
$T48 = -208						; size = 16
_r11$ = -192						; size = 16
$T49 = -176						; size = 16
_r00$ = -160						; size = 16
_r2$ = -144						; size = 16
_r1$ = -128						; size = 16
_r0$ = -112						; size = 16
_M$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
?XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@1@@Z PROC ; DirectX::XMQuaternionRotationMatrix, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 749
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 00 05 00
	00		 sub	 esp, 1280		; 00000500H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 00 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1280]
  00024	b9 40 01 00 00	 mov	 ecx, 320		; 00000140H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	0f 29 5d e0	 movaps	 XMMWORD PTR _M$[ebp+48], xmm3
  0003f	0f 29 55 d0	 movaps	 XMMWORD PTR _M$[ebp+32], xmm2
  00043	0f 29 4d c0	 movaps	 XMMWORD PTR _M$[ebp+16], xmm1
  00047	0f 29 45 b0	 movaps	 XMMWORD PTR _M$[ebp], xmm0
; Line 894
  0004b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00050	6b c8 00	 imul	 ecx, eax, 0
  00053	0f 10 44 0d b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+ecx]
  00058	0f 11 45 90	 movups	 XMMWORD PTR _r0$[ebp], xmm0
; Line 895
  0005c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00061	c1 e2 00	 shl	 edx, 0
  00064	0f 10 44 15 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+edx]
  00069	0f 11 45 80	 movups	 XMMWORD PTR _r1$[ebp], xmm0
; Line 896
  0006d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00072	d1 e0		 shl	 eax, 1
  00074	0f 10 44 05 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+eax]
  00079	0f 11 85 70 ff
	ff ff		 movups	 XMMWORD PTR _r2$[ebp], xmm0
; Line 899
  00080	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _r0$[ebp]
  00084	0f c6 45 90 00	 shufps	 xmm0, XMMWORD PTR _r0$[ebp], 0
  00089	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T49[ebp], xmm0
  00090	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T49[ebp]
  00097	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _r00$[ebp], xmm0
; Line 901
  0009e	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  000a2	0f c6 45 80 55	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 85 ; 00000055H
  000a7	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T48[ebp], xmm0
  000ae	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T48[ebp]
  000b5	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _r11$[ebp], xmm0
; Line 903
  000bc	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  000c3	0f c6 85 70 ff
	ff ff aa	 shufps	 xmm0, XMMWORD PTR _r2$[ebp], 170 ; 000000aaH
  000cb	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T47[ebp], xmm0
  000d2	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T47[ebp]
  000d9	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _r22$[ebp], xmm0
; Line 907
  000e0	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r11$[ebp]
  000e7	0f 5c 85 60 ff
	ff ff		 subps	 xmm0, XMMWORD PTR _r00$[ebp]
  000ee	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T46[ebp], xmm0
  000f5	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T46[ebp]
  000fc	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _r11mr00$[ebp], xmm0
; Line 908
  00103	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T45[ebp]
  00109	51		 push	 ecx
  0010a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
  0010f	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00114	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00117	0f 28 8d 00 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _r11mr00$[ebp]
  0011e	0f c2 c8 02	 cmpleps xmm1, xmm0
  00122	0f 29 8d c0 fe
	ff ff		 movaps	 XMMWORD PTR $T44[ebp], xmm1
  00129	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T44[ebp]
  00130	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _x2gey2$[ebp], xmm0
; Line 912
  00137	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r11$[ebp]
  0013e	0f 58 85 60 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _r00$[ebp]
  00145	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T43[ebp], xmm0
  0014c	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T43[ebp]
  00153	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR _r11pr00$[ebp], xmm0
; Line 913
  0015a	8d 95 80 fe ff
	ff		 lea	 edx, DWORD PTR $T42[ebp]
  00160	52		 push	 edx
  00161	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
  00166	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  0016b	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0016e	0f 28 8d b0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _r11pr00$[ebp]
  00175	0f c2 c8 02	 cmpleps xmm1, xmm0
  00179	0f 29 8d 70 fe
	ff ff		 movaps	 XMMWORD PTR $T41[ebp], xmm1
  00180	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T41[ebp]
  00187	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR _z2gew2$[ebp], xmm0
; Line 916
  0018e	8d 85 50 fe ff
	ff		 lea	 eax, DWORD PTR $T40[ebp]
  00194	50		 push	 eax
  00195	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
  0019a	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  0019f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001a2	0f 28 8d 20 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _r22$[ebp]
  001a9	0f c2 c8 02	 cmpleps xmm1, xmm0
  001ad	0f 29 8d 40 fe
	ff ff		 movaps	 XMMWORD PTR $T39[ebp], xmm1
  001b4	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T39[ebp]
  001bb	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _x2py2gez2pw2$[ebp], xmm0
; Line 919
  001c2	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r00$[ebp]
  001c9	8d 8d 20 fe ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  001cf	51		 push	 ecx
  001d0	b9 00 00 00 00	 mov	 ecx, OFFSET ?XMPMMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMPMMP
  001d5	0f 29 85 30 fb
	ff ff		 movaps	 XMMWORD PTR tv396[ebp], xmm0
  001dc	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  001e1	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001e4	0f 28 8d 30 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv396[ebp]
  001eb	0f 59 c1	 mulps	 xmm0, xmm1
  001ee	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T37[ebp], xmm0
  001f5	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T37[ebp]
  001fc	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 922
  00203	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r11$[ebp]
  0020a	8d 95 f0 fd ff
	ff		 lea	 edx, DWORD PTR $T36[ebp]
  00210	52		 push	 edx
  00211	b9 00 00 00 00	 mov	 ecx, OFFSET ?XMMPMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMMPMP
  00216	0f 29 85 20 fb
	ff ff		 movaps	 XMMWORD PTR tv398[ebp], xmm0
  0021d	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00222	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00225	0f 28 8d 20 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv398[ebp]
  0022c	0f 59 c1	 mulps	 xmm0, xmm1
  0022f	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T35[ebp], xmm0
  00236	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T35[ebp]
  0023d	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 925
  00244	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r22$[ebp]
  0024b	8d 85 c0 fd ff
	ff		 lea	 eax, DWORD PTR $T34[ebp]
  00251	50		 push	 eax
  00252	b9 00 00 00 00	 mov	 ecx, OFFSET ?XMMMPP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMMMPP
  00257	0f 29 85 10 fb
	ff ff		 movaps	 XMMWORD PTR tv400[ebp], xmm0
  0025e	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00263	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00266	0f 28 8d 10 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv400[ebp]
  0026d	0f 59 c1	 mulps	 xmm0, xmm1
  00270	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T33[ebp], xmm0
  00277	0f 28 85 b0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T33[ebp]
  0027e	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _t2$[ebp], xmm0
; Line 928
  00285	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  0028c	0f 58 85 00 fe
	ff ff		 addps	 xmm0, XMMWORD PTR _t1$[ebp]
  00293	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T32[ebp], xmm0
  0029a	0f 28 85 90 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T32[ebp]
  002a1	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR _x2y2z2w2$[ebp], xmm0
; Line 929
  002a8	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _t2$[ebp]
  002af	0f 58 85 a0 fd
	ff ff		 addps	 xmm0, XMMWORD PTR _x2y2z2w2$[ebp]
  002b6	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T31[ebp], xmm0
  002bd	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T31[ebp]
  002c4	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR _x2y2z2w2$[ebp], xmm0
; Line 930
  002cb	8d 8d 70 fd ff
	ff		 lea	 ecx, DWORD PTR $T30[ebp]
  002d1	51		 push	 ecx
  002d2	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
  002d7	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  002dc	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  002df	0f 28 8d a0 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _x2y2z2w2$[ebp]
  002e6	0f 58 c8	 addps	 xmm1, xmm0
  002e9	0f 29 8d 60 fd
	ff ff		 movaps	 XMMWORD PTR $T29[ebp], xmm1
  002f0	0f 28 85 60 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T29[ebp]
  002f7	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR _x2y2z2w2$[ebp], xmm0
; Line 933
  002fe	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _r0$[ebp]
  00302	0f c6 45 80 69	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 105 ; 00000069H
  00307	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR $T28[ebp], xmm0
  0030e	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  00315	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 935
  0031c	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  00320	0f c6 85 70 ff
	ff ff 40	 shufps	 xmm0, XMMWORD PTR _r2$[ebp], 64 ; 00000040H
  00328	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T27[ebp], xmm0
  0032f	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T27[ebp]
  00336	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 937
  0033d	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _t1$[ebp]
  00344	0f c6 85 00 fe
	ff ff 78	 shufps	 xmm0, XMMWORD PTR _t1$[ebp], 120 ; 00000078H
  0034c	0f 29 85 30 fd
	ff ff		 movaps	 XMMWORD PTR $T26[ebp], xmm0
  00353	0f 28 85 30 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  0035a	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 939
  00361	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  00368	0f 58 85 00 fe
	ff ff		 addps	 xmm0, XMMWORD PTR _t1$[ebp]
  0036f	0f 29 85 10 fd
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm0
  00376	0f 28 85 10 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  0037d	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR _xyxzyz$[ebp], xmm0
; Line 942
  00384	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _r2$[ebp]
  0038b	0f c6 45 80 01	 shufps	 xmm0, XMMWORD PTR _r1$[ebp], 1
  00390	0f 29 85 00 fd
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  00397	0f 28 85 00 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  0039e	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 944
  003a5	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _r1$[ebp]
  003a9	0f c6 45 90 6a	 shufps	 xmm0, XMMWORD PTR _r0$[ebp], 106 ; 0000006aH
  003ae	0f 29 85 f0 fc
	ff ff		 movaps	 XMMWORD PTR $T23[ebp], xmm0
  003b5	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T23[ebp]
  003bc	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 946
  003c3	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _t1$[ebp]
  003ca	0f c6 85 00 fe
	ff ff 78	 shufps	 xmm0, XMMWORD PTR _t1$[ebp], 120 ; 00000078H
  003d2	0f 29 85 e0 fc
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  003d9	0f 28 85 e0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  003e0	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 948
  003e7	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  003ee	0f 5c 85 00 fe
	ff ff		 subps	 xmm0, XMMWORD PTR _t1$[ebp]
  003f5	0f 29 85 c0 fc
	ff ff		 movaps	 XMMWORD PTR $T21[ebp], xmm0
  003fc	0f 28 85 c0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  00403	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _xwywzw$[ebp], xmm0
; Line 949
  0040a	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _xwywzw$[ebp]
  00411	8d 95 b0 fc ff
	ff		 lea	 edx, DWORD PTR $T20[ebp]
  00417	52		 push	 edx
  00418	b9 00 00 00 00	 mov	 ecx, OFFSET ?XMMPMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMMPMP
  0041d	0f 29 85 00 fb
	ff ff		 movaps	 XMMWORD PTR tv402[ebp], xmm0
  00424	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00429	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0042c	0f 28 8d 00 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv402[ebp]
  00433	0f 59 c1	 mulps	 xmm0, xmm1
  00436	0f 29 85 a0 fc
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  0043d	0f 28 85 a0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  00444	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _xwywzw$[ebp], xmm0
; Line 952
  0044b	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2y2z2w2$[ebp]
  00452	0f c6 85 20 fd
	ff ff 04	 shufps	 xmm0, XMMWORD PTR _xyxzyz$[ebp], 4
  0045a	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  00461	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  00468	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 954
  0046f	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2y2z2w2$[ebp]
  00476	0f c6 85 d0 fc
	ff ff 2e	 shufps	 xmm0, XMMWORD PTR _xwywzw$[ebp], 46 ; 0000002eH
  0047e	0f 29 85 80 fc
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00485	0f 28 85 80 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  0048c	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 956
  00493	0f 28 85 20 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _xyxzyz$[ebp]
  0049a	0f c6 85 d0 fc
	ff ff 49	 shufps	 xmm0, XMMWORD PTR _xwywzw$[ebp], 73 ; 00000049H
  004a2	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  004a9	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  004b0	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _t2$[ebp], xmm0
; Line 959
  004b7	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  004be	0f c6 85 d0 fd
	ff ff 88	 shufps	 xmm0, XMMWORD PTR _t2$[ebp], 136 ; 00000088H
  004c6	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  004cd	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  004d4	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR _tensor0$[ebp], xmm0
; Line 961
  004db	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  004e2	0f c6 85 d0 fd
	ff ff d6	 shufps	 xmm0, XMMWORD PTR _t2$[ebp], 214 ; 000000d6H
  004ea	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  004f1	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  004f8	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR _tensor1$[ebp], xmm0
; Line 963
  004ff	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _t2$[ebp]
  00506	0f c6 85 00 fe
	ff ff 84	 shufps	 xmm0, XMMWORD PTR _t1$[ebp], 132 ; 00000084H
  0050e	0f 29 85 10 fc
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00515	0f 28 85 10 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  0051c	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR _tensor2$[ebp], xmm0
; Line 965
  00523	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _t2$[ebp]
  0052a	0f c6 85 00 fe
	ff ff 6e	 shufps	 xmm0, XMMWORD PTR _t1$[ebp], 110 ; 0000006eH
  00532	0f 29 85 f0 fb
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00539	0f 28 85 f0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  00540	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR _tensor3$[ebp], xmm0
; Line 969
  00547	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2gey2$[ebp]
  0054e	0f 54 85 60 fc
	ff ff		 andps	 xmm0, XMMWORD PTR _tensor0$[ebp]
  00555	0f 29 85 e0 fb
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  0055c	0f 28 85 e0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  00563	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 970
  0056a	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2gey2$[ebp]
  00571	0f 55 85 40 fc
	ff ff		 andnps	 xmm0, XMMWORD PTR _tensor1$[ebp]
  00578	0f 29 85 d0 fb
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  0057f	0f 28 85 d0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  00586	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 971
  0058d	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  00594	0f 56 85 00 fe
	ff ff		 orps	 xmm0, XMMWORD PTR _t1$[ebp]
  0059b	0f 29 85 c0 fb
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  005a2	0f 28 85 c0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  005a9	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 972
  005b0	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _z2gew2$[ebp]
  005b7	0f 54 85 20 fc
	ff ff		 andps	 xmm0, XMMWORD PTR _tensor2$[ebp]
  005be	0f 29 85 b0 fb
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  005c5	0f 28 85 b0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  005cc	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 973
  005d3	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _z2gew2$[ebp]
  005da	0f 55 85 00 fc
	ff ff		 andnps	 xmm0, XMMWORD PTR _tensor3$[ebp]
  005e1	0f 29 85 a0 fb
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  005e8	0f 28 85 a0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  005ef	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _t2$[ebp], xmm0
; Line 974
  005f6	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _t1$[ebp]
  005fd	0f 56 85 d0 fd
	ff ff		 orps	 xmm0, XMMWORD PTR _t2$[ebp]
  00604	0f 29 85 90 fb
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0060b	0f 28 85 90 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  00612	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 975
  00619	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2py2gez2pw2$[ebp]
  00620	0f 54 85 30 fe
	ff ff		 andps	 xmm0, XMMWORD PTR _t0$[ebp]
  00627	0f 29 85 80 fb
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0062e	0f 28 85 80 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00635	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 976
  0063c	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _x2py2gez2pw2$[ebp]
  00643	0f 55 85 00 fe
	ff ff		 andnps	 xmm0, XMMWORD PTR _t1$[ebp]
  0064a	0f 29 85 70 fb
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00651	0f 28 85 70 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00658	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _t1$[ebp], xmm0
; Line 977
  0065f	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _t0$[ebp]
  00666	0f 56 85 00 fe
	ff ff		 orps	 xmm0, XMMWORD PTR _t1$[ebp]
  0066d	0f 29 85 60 fb
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00674	0f 28 85 60 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0067b	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _t2$[ebp], xmm0
; Line 982
  00682	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _t2$[ebp]
  00689	e8 00 00 00 00	 call	 ?XMVector4Length@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector4Length
  0068e	0f 29 85 50 fb
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00695	0f 28 85 50 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0069c	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR _t0$[ebp], xmm0
; Line 983
  006a3	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _t2$[ebp]
  006aa	0f 5e 85 30 fe
	ff ff		 divps	 xmm0, XMMWORD PTR _t0$[ebp]
  006b1	0f 29 85 40 fb
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  006b8	0f 28 85 40 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 986
  006bf	52		 push	 edx
  006c0	8b cd		 mov	 ecx, ebp
  006c2	50		 push	 eax
  006c3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@XMQuaterni
  006c9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  006ce	58		 pop	 eax
  006cf	5a		 pop	 edx
  006d0	5f		 pop	 edi
  006d1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006d4	33 cd		 xor	 ecx, ebp
  006d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006db	8b e5		 mov	 esp, ebp
  006dd	5d		 pop	 ebp
  006de	8b e3		 mov	 esp, ebx
  006e0	5b		 pop	 ebx
  006e1	c3		 ret	 0
  006e2	8b ff		 npad	 2
$LN5@XMQuaterni:
  006e4	01 00 00 00	 DD	 1
  006e8	00 00 00 00	 DD	 $LN4@XMQuaterni
$LN4@XMQuaterni:
  006ec	b0 ff ff ff	 DD	 -80			; ffffffb0H
  006f0	40 00 00 00	 DD	 64			; 00000040H
  006f4	00 00 00 00	 DD	 $LN3@XMQuaterni
$LN3@XMQuaterni:
  006f8	4d		 DB	 77			; 0000004dH
  006f9	00		 DB	 0
?XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@1@@Z ENDP ; DirectX::XMQuaternionRotationMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -448						; size = 16
_Q$ = -432						; size = 16
$T2 = -416						; size = 16
$T3 = -400						; size = 16
$T4 = -384						; size = 16
_Q0$ = -368						; size = 16
$T5 = -352						; size = 16
_Q1$ = -336						; size = 16
$T6 = -320						; size = 16
_R1$ = -304						; size = 16
$T7 = -288						; size = 16
_Y1$ = -272						; size = 16
$T8 = -256						; size = 16
_P1$ = -240						; size = 16
$T9 = -224						; size = 16
_R0$ = -208						; size = 16
$T10 = -192						; size = 16
_Y0$ = -176						; size = 16
$T11 = -160						; size = 16
_P0$ = -144						; size = 16
_CosAngles$ = -112					; size = 16
_SinAngles$ = -80					; size = 16
$T12 = -48						; size = 16
_HalfAngles$ = -32					; size = 16
_Angles$ = -16						; size = 16
?XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T2@@Z PROC ; DirectX::XMQuaternionRotationRollPitchYawFromVector, COMDAT
; _Angles$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 662
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c0 01 00
	00		 sub	 esp, 448		; 000001c0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 40 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-448]
  00024	b9 70 00 00 00	 mov	 ecx, 112		; 00000070H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 45 f0	 movaps	 XMMWORD PTR _Angles$[ebp], xmm0
; Line 667
  00035	0f 28 0d 00 00
	00 00		 movaps	 xmm1, XMMWORD PTR ?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B
  0003c	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _Angles$[ebp]
  00040	e8 00 00 00 00	 call	 ?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorMultiply
  00045	0f 29 45 d0	 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00049	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  0004d	0f 29 45 e0	 movaps	 XMMWORD PTR _HalfAngles$[ebp], xmm0
; Line 670
  00051	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _HalfAngles$[ebp]
  00055	8d 55 90	 lea	 edx, DWORD PTR _CosAngles$[ebp]
  00058	8d 4d b0	 lea	 ecx, DWORD PTR _SinAngles$[ebp]
  0005b	e8 00 00 00 00	 call	 ?XMVectorSinCos@DirectX@@YQXPAT__m128@@0T2@@Z ; DirectX::XMVectorSinCos
; Line 672
  00060	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _CosAngles$[ebp]
  00064	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _SinAngles$[ebp]
  00068	e8 00 00 00 00	 call	 ??$XMVectorPermute@$0A@$03$03$03@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<0,4,4,4>
  0006d	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00074	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  0007b	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _P0$[ebp], xmm0
; Line 673
  00082	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _CosAngles$[ebp]
  00086	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _SinAngles$[ebp]
  0008a	e8 00 00 00 00	 call	 ??$XMVectorPermute@$04$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<5,1,5,5>
  0008f	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00096	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  0009d	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _Y0$[ebp], xmm0
; Line 674
  000a4	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _CosAngles$[ebp]
  000a8	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _SinAngles$[ebp]
  000ac	e8 00 00 00 00	 call	 ??$XMVectorPermute@$05$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<6,6,2,6>
  000b1	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  000b8	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  000bf	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _R0$[ebp], xmm0
; Line 675
  000c6	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _SinAngles$[ebp]
  000ca	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _CosAngles$[ebp]
  000ce	e8 00 00 00 00	 call	 ??$XMVectorPermute@$0A@$03$03$03@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<0,4,4,4>
  000d3	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  000da	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  000e1	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _P1$[ebp], xmm0
; Line 676
  000e8	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _SinAngles$[ebp]
  000ec	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _CosAngles$[ebp]
  000f0	e8 00 00 00 00	 call	 ??$XMVectorPermute@$04$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<5,1,5,5>
  000f5	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  000fc	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00103	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _Y1$[ebp], xmm0
; Line 677
  0010a	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _SinAngles$[ebp]
  0010e	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _CosAngles$[ebp]
  00112	e8 00 00 00 00	 call	 ??$XMVectorPermute@$05$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<6,6,2,6>
  00117	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0011e	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  00125	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR _R1$[ebp], xmm0
; Line 679
  0012c	0f 28 0d 00 00
	00 00		 movaps	 xmm1, XMMWORD PTR ?Sign@?1??XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B
  00133	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _P1$[ebp]
  0013a	e8 00 00 00 00	 call	 ?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorMultiply
  0013f	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00146	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  0014d	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 680
  00154	0f 28 8d 50 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _Y0$[ebp]
  0015b	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _P0$[ebp]
  00162	e8 00 00 00 00	 call	 ?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorMultiply
  00167	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0016e	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00175	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR _Q0$[ebp], xmm0
; Line 681
  0017c	0f 28 8d f0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _Y1$[ebp]
  00183	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _Q1$[ebp]
  0018a	e8 00 00 00 00	 call	 ?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorMultiply
  0018f	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00196	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0019d	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 682
  001a4	0f 28 8d 30 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _R0$[ebp]
  001ab	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _Q0$[ebp]
  001b2	e8 00 00 00 00	 call	 ?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorMultiply
  001b7	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  001be	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  001c5	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR _Q0$[ebp], xmm0
; Line 683
  001cc	0f 28 95 90 fe
	ff ff		 movaps	 xmm2, XMMWORD PTR _Q0$[ebp]
  001d3	0f 28 8d d0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _R1$[ebp]
  001da	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _Q1$[ebp]
  001e1	e8 00 00 00 00	 call	 ?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorMultiplyAdd
  001e6	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  001ed	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  001f4	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR _Q$[ebp], xmm0
; Line 685
  001fb	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _Q$[ebp]
; Line 689
  00202	52		 push	 edx
  00203	8b cd		 mov	 ecx, ebp
  00205	50		 push	 eax
  00206	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@XMQuaterni
  0020c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00211	58		 pop	 eax
  00212	5a		 pop	 edx
  00213	5f		 pop	 edi
  00214	8b e5		 mov	 esp, ebp
  00216	5d		 pop	 ebp
  00217	8b e3		 mov	 esp, ebx
  00219	5b		 pop	 ebx
  0021a	c3		 ret	 0
  0021b	90		 npad	 1
$LN6@XMQuaterni:
  0021c	02 00 00 00	 DD	 2
  00220	00 00 00 00	 DD	 $LN5@XMQuaterni
$LN5@XMQuaterni:
  00224	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00228	10 00 00 00	 DD	 16			; 00000010H
  0022c	00 00 00 00	 DD	 $LN3@XMQuaterni
  00230	90 ff ff ff	 DD	 -112			; ffffff90H
  00234	10 00 00 00	 DD	 16			; 00000010H
  00238	00 00 00 00	 DD	 $LN4@XMQuaterni
$LN4@XMQuaterni:
  0023c	43		 DB	 67			; 00000043H
  0023d	6f		 DB	 111			; 0000006fH
  0023e	73		 DB	 115			; 00000073H
  0023f	41		 DB	 65			; 00000041H
  00240	6e		 DB	 110			; 0000006eH
  00241	67		 DB	 103			; 00000067H
  00242	6c		 DB	 108			; 0000006cH
  00243	65		 DB	 101			; 00000065H
  00244	73		 DB	 115			; 00000073H
  00245	00		 DB	 0
$LN3@XMQuaterni:
  00246	53		 DB	 83			; 00000053H
  00247	69		 DB	 105			; 00000069H
  00248	6e		 DB	 110			; 0000006eH
  00249	41		 DB	 65			; 00000041H
  0024a	6e		 DB	 110			; 0000006eH
  0024b	67		 DB	 103			; 00000067H
  0024c	6c		 DB	 108			; 0000006cH
  0024d	65		 DB	 101			; 00000065H
  0024e	73		 DB	 115			; 00000073H
  0024f	00		 DB	 0
?XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T2@@Z ENDP ; DirectX::XMQuaternionRotationRollPitchYawFromVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ
_TEXT	SEGMENT
?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ PROC	; DirectX::XMQuaternionIdentity, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 635
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 637
  00003	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
; Line 640
  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ ENDP	; DirectX::XMQuaternionIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -432						; size = 16
$T2 = -416						; size = 16
$T3 = -400						; size = 16
$T4 = -384						; size = 16
$T5 = -368						; size = 16
$T6 = -352						; size = 16
$T7 = -336						; size = 16
$T8 = -320						; size = 16
$T9 = -304						; size = 16
$T10 = -288						; size = 16
$T11 = -272						; size = 16
$T12 = -256						; size = 16
$T13 = -240						; size = 16
$T14 = -224						; size = 16
$T15 = -208						; size = 16
_Q1Shuffle$ = -192					; size = 16
$T16 = -176						; size = 16
$T17 = -160						; size = 16
$T18 = -144						; size = 16
$T19 = -128						; size = 16
$T20 = -112						; size = 16
_vResult$ = -96						; size = 16
_Q2Z$ = -80						; size = 16
_Q2Y$ = -64						; size = 16
_Q2X$ = -48						; size = 16
_Q2$ = -32						; size = 16
_Q1$ = -16						; size = 16
?XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMQuaternionMultiply, COMDAT
; _Q1$ = xmm0
; _Q2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 103
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b0 01 00
	00		 sub	 esp, 432		; 000001b0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 50 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-432]
  00024	b9 6c 00 00 00	 mov	 ecx, 108		; 0000006cH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 4d e0	 movaps	 XMMWORD PTR _Q2$[ebp], xmm1
  00035	0f 29 45 f0	 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 153
  00039	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Q2$[ebp]
  0003d	0f 29 45 d0	 movaps	 XMMWORD PTR _Q2X$[ebp], xmm0
; Line 154
  00041	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Q2$[ebp]
  00045	0f 29 45 c0	 movaps	 XMMWORD PTR _Q2Y$[ebp], xmm0
; Line 155
  00049	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Q2$[ebp]
  0004d	0f 29 45 b0	 movaps	 XMMWORD PTR _Q2Z$[ebp], xmm0
; Line 156
  00051	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Q2$[ebp]
  00055	0f 29 45 a0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 158
  00059	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  0005d	0f c6 45 a0 ff	 shufps	 xmm0, XMMWORD PTR _vResult$[ebp], 255 ; 000000ffH
  00062	0f 29 45 90	 movaps	 XMMWORD PTR $T20[ebp], xmm0
  00066	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  0006a	0f 29 45 a0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 159
  0006e	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _Q2X$[ebp]
  00072	0f c6 45 d0 00	 shufps	 xmm0, XMMWORD PTR _Q2X$[ebp], 0
  00077	0f 29 45 80	 movaps	 XMMWORD PTR $T19[ebp], xmm0
  0007b	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  0007f	0f 29 45 d0	 movaps	 XMMWORD PTR _Q2X$[ebp], xmm0
; Line 160
  00083	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _Q2Y$[ebp]
  00087	0f c6 45 c0 55	 shufps	 xmm0, XMMWORD PTR _Q2Y$[ebp], 85 ; 00000055H
  0008c	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  00093	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  0009a	0f 29 45 c0	 movaps	 XMMWORD PTR _Q2Y$[ebp], xmm0
; Line 161
  0009e	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _Q2Z$[ebp]
  000a2	0f c6 45 b0 aa	 shufps	 xmm0, XMMWORD PTR _Q2Z$[ebp], 170 ; 000000aaH
  000a7	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  000ae	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  000b5	0f 29 45 b0	 movaps	 XMMWORD PTR _Q2Z$[ebp], xmm0
; Line 163
  000b9	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  000bd	0f 59 45 f0	 mulps	 xmm0, XMMWORD PTR _Q1$[ebp]
  000c1	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  000c8	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  000cf	0f 29 45 a0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 164
  000d3	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _Q1$[ebp]
  000d7	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _Q1Shuffle$[ebp], xmm0
; Line 166
  000de	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _Q1Shuffle$[ebp]
  000e5	0f c6 85 40 ff
	ff ff 1b	 shufps	 xmm0, XMMWORD PTR _Q1Shuffle$[ebp], 27 ; 0000001bH
  000ed	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  000f4	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  000fb	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _Q1Shuffle$[ebp], xmm0
; Line 168
  00102	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _Q2X$[ebp]
  00106	0f 59 85 40 ff
	ff ff		 mulps	 xmm0, XMMWORD PTR _Q1Shuffle$[ebp]
  0010d	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00114	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  0011b	0f 29 45 d0	 movaps	 XMMWORD PTR _Q2X$[ebp], xmm0
; Line 169
  0011f	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _Q1Shuffle$[ebp]
  00126	0f c6 85 40 ff
	ff ff b1	 shufps	 xmm0, XMMWORD PTR _Q1Shuffle$[ebp], 177 ; 000000b1H
  0012e	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00135	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  0013c	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _Q1Shuffle$[ebp], xmm0
; Line 171
  00143	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  00149	50		 push	 eax
  0014a	b9 00 00 00 00	 mov	 ecx, OFFSET ?ControlWZYX@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionMultiply'::`2'::ControlWZYX
  0014f	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00154	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00157	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _Q2X$[ebp]
  0015b	0f 59 c8	 mulps	 xmm1, xmm0
  0015e	0f 29 8d f0 fe
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm1
  00165	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  0016c	0f 29 45 d0	 movaps	 XMMWORD PTR _Q2X$[ebp], xmm0
; Line 173
  00170	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _Q2Y$[ebp]
  00174	0f 59 85 40 ff
	ff ff		 mulps	 xmm0, XMMWORD PTR _Q1Shuffle$[ebp]
  0017b	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00182	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  00189	0f 29 45 c0	 movaps	 XMMWORD PTR _Q2Y$[ebp], xmm0
; Line 174
  0018d	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _Q1Shuffle$[ebp]
  00194	0f c6 85 40 ff
	ff ff 1b	 shufps	 xmm0, XMMWORD PTR _Q1Shuffle$[ebp], 27 ; 0000001bH
  0019c	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  001a3	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  001aa	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _Q1Shuffle$[ebp], xmm0
; Line 176
  001b1	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  001b7	51		 push	 ecx
  001b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?ControlZWXY@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionMultiply'::`2'::ControlZWXY
  001bd	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  001c2	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001c5	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _Q2Y$[ebp]
  001c9	0f 59 c8	 mulps	 xmm1, xmm0
  001cc	0f 29 8d b0 fe
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm1
  001d3	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  001da	0f 29 45 c0	 movaps	 XMMWORD PTR _Q2Y$[ebp], xmm0
; Line 178
  001de	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _Q2Z$[ebp]
  001e2	0f 59 85 40 ff
	ff ff		 mulps	 xmm0, XMMWORD PTR _Q1Shuffle$[ebp]
  001e9	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  001f0	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  001f7	0f 29 45 b0	 movaps	 XMMWORD PTR _Q2Z$[ebp], xmm0
; Line 179
  001fb	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  001ff	0f 58 45 d0	 addps	 xmm0, XMMWORD PTR _Q2X$[ebp]
  00203	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0020a	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00211	0f 29 45 a0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 181
  00215	8d 95 80 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0021b	52		 push	 edx
  0021c	b9 00 00 00 00	 mov	 ecx, OFFSET ?ControlYXWZ@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionMultiply'::`2'::ControlYXWZ
  00221	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00226	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00229	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _Q2Z$[ebp]
  0022d	0f 59 c8	 mulps	 xmm1, xmm0
  00230	0f 29 8d 70 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm1
  00237	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0023e	0f 29 45 b0	 movaps	 XMMWORD PTR _Q2Z$[ebp], xmm0
; Line 182
  00242	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _Q2Y$[ebp]
  00246	0f 58 45 b0	 addps	 xmm0, XMMWORD PTR _Q2Z$[ebp]
  0024a	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00251	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00258	0f 29 45 c0	 movaps	 XMMWORD PTR _Q2Y$[ebp], xmm0
; Line 183
  0025c	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  00260	0f 58 45 c0	 addps	 xmm0, XMMWORD PTR _Q2Y$[ebp]
  00264	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0026b	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00272	0f 29 45 a0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 184
  00276	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
; Line 187
  0027a	5f		 pop	 edi
  0027b	8b e5		 mov	 esp, ebp
  0027d	5d		 pop	 ebp
  0027e	8b e3		 mov	 esp, ebx
  00280	5b		 pop	 ebx
  00281	c3		 ret	 0
?XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMQuaternionMultiply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixPerspectiveFovLH@DirectX@@YQ?AUXMMATRIX@1@MMMM@Z
_TEXT	SEGMENT
$T1 = -352						; size = 16
$T2 = -336						; size = 16
$T3 = -320						; size = 16
$T4 = -304						; size = 16
$T5 = -288						; size = 16
$T6 = -272						; size = 16
$T7 = -256						; size = 16
_M$ = -224						; size = 64
$T8 = -144						; size = 16
$T9 = -128						; size = 16
_vTemp$ = -112						; size = 16
_vValues$ = -96						; size = 16
_rMem$ = -80						; size = 16
_Height$ = -52						; size = 4
_fRange$ = -48						; size = 4
_CosFov$ = -40						; size = 4
_SinFov$ = -28						; size = 4
_FarZ$ = -20						; size = 4
_NearZ$ = -16						; size = 4
_AspectHByW$ = -12					; size = 4
_FovAngleY$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
?XMMatrixPerspectiveFovLH@DirectX@@YQ?AUXMMATRIX@1@MMMM@Z PROC ; DirectX::XMMatrixPerspectiveFovLH, COMDAT
; _FovAngleY$ = xmm0s
; _AspectHByW$ = xmm1s
; _NearZ$ = xmm2s
; _FarZ$ = xmm3s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 2177
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 94 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-364]
  00025	b9 5b 00 00 00	 mov	 ecx, 91			; 0000005bH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	f3 0f 11 5d ec	 movss	 DWORD PTR _FarZ$[ebp], xmm3
  00041	f3 0f 11 55 f0	 movss	 DWORD PTR _NearZ$[ebp], xmm2
  00046	f3 0f 11 4d f4	 movss	 DWORD PTR _AspectHByW$[ebp], xmm1
  0004b	f3 0f 11 45 f8	 movss	 DWORD PTR _FovAngleY$[ebp], xmm0
; Line 2178
  00050	51		 push	 ecx
  00051	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@37a7c5ac
  00059	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005e	51		 push	 ecx
  0005f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  00067	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006c	51		 push	 ecx
  0006d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _FovAngleY$[ebp]
  00072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00077	e8 00 00 00 00	 call	 ?XMScalarNearEqual@DirectX@@YA_NMMM@Z ; DirectX::XMScalarNearEqual
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007f	0f b6 c0	 movzx	 eax, al
  00082	85 c0		 test	 eax, eax
  00084	74 21		 je	 SHORT $LN3@XMMatrixPe
  00086	8b f4		 mov	 esi, esp
  00088	68 82 08 00 00	 push	 2178			; 00000882H
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_1GK@EFPMNDEN@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAo?$AAv?$AAA?$AAn?$AAg?$AAl?$AAe?$AAY?$AA?0?$AA?5?$AA0?$AA?4@
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMMatrixPe:
; Line 2179
  000a7	51		 push	 ecx
  000a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3727c5ac
  000b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b5	51		 push	 ecx
  000b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  000be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c3	51		 push	 ecx
  000c4	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _AspectHByW$[ebp]
  000c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ce	e8 00 00 00 00	 call	 ?XMScalarNearEqual@DirectX@@YA_NMMM@Z ; DirectX::XMScalarNearEqual
  000d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d6	0f b6 d0	 movzx	 edx, al
  000d9	85 d2		 test	 edx, edx
  000db	74 21		 je	 SHORT $LN4@XMMatrixPe
  000dd	8b f4		 mov	 esi, esp
  000df	68 83 08 00 00	 push	 2179			; 00000883H
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_1FO@IACFEINC@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAH?$AAB?$AAy?$AAW?$AA?0?$AA?5?$AA0@
  000ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f7	3b f4		 cmp	 esi, esp
  000f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@XMMatrixPe:
; Line 2180
  000fe	51		 push	 ecx
  000ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3727c5ac
  00107	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010c	51		 push	 ecx
  0010d	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _NearZ$[ebp]
  00112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00117	51		 push	 ecx
  00118	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _FarZ$[ebp]
  0011d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00122	e8 00 00 00 00	 call	 ?XMScalarNearEqual@DirectX@@YA_NMMM@Z ; DirectX::XMScalarNearEqual
  00127	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012a	0f b6 c8	 movzx	 ecx, al
  0012d	85 c9		 test	 ecx, ecx
  0012f	74 21		 je	 SHORT $LN5@XMMatrixPe
  00131	8b f4		 mov	 esi, esp
  00133	68 84 08 00 00	 push	 2180			; 00000884H
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@IMEJOJAH@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAa?$AAr?$AAZ?$AA?0?$AA?5?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?0?$AA?5@
  00142	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00148	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014b	3b f4		 cmp	 esi, esp
  0014d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@XMMatrixPe:
; Line 2233
  00152	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0015a	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _FovAngleY$[ebp]
  0015f	51		 push	 ecx
  00160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00165	8d 45 d8	 lea	 eax, DWORD PTR _CosFov$[ebp]
  00168	50		 push	 eax
  00169	8d 4d e4	 lea	 ecx, DWORD PTR _SinFov$[ebp]
  0016c	51		 push	 ecx
  0016d	e8 00 00 00 00	 call	 ?XMScalarSinCos@DirectX@@YAXPAM0M@Z ; DirectX::XMScalarSinCos
  00172	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 2235
  00175	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _FarZ$[ebp]
  0017a	f3 0f 5c 45 f0	 subss	 xmm0, DWORD PTR _NearZ$[ebp]
  0017f	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _FarZ$[ebp]
  00184	f3 0f 5e c8	 divss	 xmm1, xmm0
  00188	f3 0f 11 4d d0	 movss	 DWORD PTR _fRange$[ebp], xmm1
; Line 2237
  0018d	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _CosFov$[ebp]
  00192	f3 0f 5e 45 e4	 divss	 xmm0, DWORD PTR _SinFov$[ebp]
  00197	f3 0f 11 45 cc	 movss	 DWORD PTR _Height$[ebp], xmm0
; Line 2243
  0019c	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _Height$[ebp]
  001a1	f3 0f 5e 45 f4	 divss	 xmm0, DWORD PTR _AspectHByW$[ebp]
  001a6	f3 0f 11 45 b0	 movss	 DWORD PTR _rMem$[ebp], xmm0
  001ab	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _Height$[ebp]
  001b0	f3 0f 11 45 b4	 movss	 DWORD PTR _rMem$[ebp+4], xmm0
  001b5	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _fRange$[ebp]
  001ba	f3 0f 11 45 b8	 movss	 DWORD PTR _rMem$[ebp+8], xmm0
  001bf	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _fRange$[ebp]
  001c4	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001cb	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _NearZ$[ebp]
  001d0	f3 0f 11 45 bc	 movss	 DWORD PTR _rMem$[ebp+12], xmm0
; Line 2245
  001d5	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _rMem$[ebp]
  001d9	0f 29 45 a0	 movaps	 XMMWORD PTR _vValues$[ebp], xmm0
; Line 2246
  001dd	0f 57 c0	 xorps	 xmm0, xmm0
  001e0	0f 29 45 80	 movaps	 XMMWORD PTR $T9[ebp], xmm0
  001e4	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  001e8	0f 29 45 90	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 2248
  001ec	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _vValues$[ebp]
  001f0	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vTemp$[ebp]
  001f4	f3 0f 10 c8	 _movss	 xmm1, xmm0
  001f8	0f 29 8d 70 ff
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm1
  001ff	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00206	0f 29 45 90	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 2250
  0020a	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR _M$[ebp]
  00210	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 2251
  00215	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0021a	6b c2 00	 imul	 eax, edx, 0
  0021d	0f 10 45 90	 movups	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00221	0f 11 84 05 20
	ff ff ff	 movups	 XMMWORD PTR _M$[ebp+eax], xmm0
; Line 2253
  00229	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _vValues$[ebp]
  0022d	0f 29 45 90	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 2254
  00231	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00237	51		 push	 ecx
  00238	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMMaskY@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMMaskY
  0023d	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  00242	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00245	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vTemp$[ebp]
  00249	0f 54 c8	 andps	 xmm1, xmm0
  0024c	0f 29 8d f0 fe
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm1
  00253	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0025a	0f 29 45 90	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 2255
  0025e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00263	c1 e2 00	 shl	 edx, 0
  00266	0f 10 45 90	 movups	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0026a	0f 11 84 15 20
	ff ff ff	 movups	 XMMWORD PTR _M$[ebp+edx], xmm0
; Line 2257
  00272	0f 57 c0	 xorps	 xmm0, xmm0
  00275	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0027c	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00283	0f 29 45 90	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 2258
  00287	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  0028d	50		 push	 eax
  0028e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR3
  00293	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00298	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0029b	0f 28 4d a0	 movaps	 xmm1, XMMWORD PTR _vValues$[ebp]
  0029f	0f c6 c8 ee	 shufps	 xmm1, xmm0, 238		; 000000eeH
  002a3	0f 29 8d c0 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm1
  002aa	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  002b1	0f 29 45 a0	 movaps	 XMMWORD PTR _vValues$[ebp], xmm0
; Line 2260
  002b5	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  002b9	0f c6 45 a0 c0	 shufps	 xmm0, XMMWORD PTR _vValues$[ebp], 192 ; 000000c0H
  002be	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  002c5	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  002cc	0f 29 45 90	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 2261
  002d0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002d5	d1 e1		 shl	 ecx, 1
  002d7	0f 10 45 90	 movups	 xmm0, XMMWORD PTR _vTemp$[ebp]
  002db	0f 11 84 0d 20
	ff ff ff	 movups	 XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 2263
  002e3	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  002e7	0f c6 45 a0 90	 shufps	 xmm0, XMMWORD PTR _vValues$[ebp], 144 ; 00000090H
  002ec	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  002f3	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  002fa	0f 29 45 90	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 2264
  002fe	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00303	6b c2 03	 imul	 eax, edx, 3
  00306	0f 10 45 90	 movups	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0030a	0f 11 84 05 20
	ff ff ff	 movups	 XMMWORD PTR _M$[ebp+eax], xmm0
; Line 2265
  00312	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _M$[ebp]
  00319	0f 28 8d 30 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _M$[ebp+16]
  00320	0f 28 95 40 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _M$[ebp+32]
  00327	0f 28 9d 50 ff
	ff ff		 movaps	 xmm3, XMMWORD PTR _M$[ebp+48]
; Line 2268
  0032e	52		 push	 edx
  0032f	8b cd		 mov	 ecx, ebp
  00331	50		 push	 eax
  00332	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@XMMatrixPe
  00338	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0033d	58		 pop	 eax
  0033e	5a		 pop	 edx
  0033f	5f		 pop	 edi
  00340	5e		 pop	 esi
  00341	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00344	33 cd		 xor	 ecx, ebp
  00346	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0034b	8b e5		 mov	 esp, ebp
  0034d	5d		 pop	 ebp
  0034e	8b e3		 mov	 esp, ebx
  00350	5b		 pop	 ebx
  00351	c3		 ret	 0
  00352	8b ff		 npad	 2
$LN10@XMMatrixPe:
  00354	03 00 00 00	 DD	 3
  00358	00 00 00 00	 DD	 $LN9@XMMatrixPe
$LN9@XMMatrixPe:
  0035c	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00360	04 00 00 00	 DD	 4
  00364	00 00 00 00	 DD	 $LN6@XMMatrixPe
  00368	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0036c	04 00 00 00	 DD	 4
  00370	00 00 00 00	 DD	 $LN7@XMMatrixPe
  00374	20 ff ff ff	 DD	 -224			; ffffff20H
  00378	40 00 00 00	 DD	 64			; 00000040H
  0037c	00 00 00 00	 DD	 $LN8@XMMatrixPe
$LN8@XMMatrixPe:
  00380	4d		 DB	 77			; 0000004dH
  00381	00		 DB	 0
$LN7@XMMatrixPe:
  00382	43		 DB	 67			; 00000043H
  00383	6f		 DB	 111			; 0000006fH
  00384	73		 DB	 115			; 00000073H
  00385	46		 DB	 70			; 00000046H
  00386	6f		 DB	 111			; 0000006fH
  00387	76		 DB	 118			; 00000076H
  00388	00		 DB	 0
$LN6@XMMatrixPe:
  00389	53		 DB	 83			; 00000053H
  0038a	69		 DB	 105			; 00000069H
  0038b	6e		 DB	 110			; 0000006eH
  0038c	46		 DB	 70			; 00000046H
  0038d	6f		 DB	 111			; 0000006fH
  0038e	76		 DB	 118			; 00000076H
  0038f	00		 DB	 0
?XMMatrixPerspectiveFovLH@DirectX@@YQ?AUXMMATRIX@1@MMMM@Z ENDP ; DirectX::XMMatrixPerspectiveFovLH
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixLookToLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z
_TEXT	SEGMENT
$T1 = -608						; size = 64
$T2 = -544						; size = 64
$T3 = -480						; size = 16
$T4 = -464						; size = 16
$T5 = -448						; size = 16
_M$ = -416						; size = 64
$T6 = -336						; size = 16
_D2$ = -320						; size = 16
$T7 = -304						; size = 16
_D1$ = -288						; size = 16
$T8 = -272						; size = 16
_D0$ = -256						; size = 16
$T9 = -240						; size = 16
_NegEyePosition$ = -224					; size = 16
$T10 = -208						; size = 16
_R1$ = -192						; size = 16
$T11 = -176						; size = 16
$T12 = -160						; size = 16
_R0$ = -144						; size = 16
$T13 = -128						; size = 16
_R2$ = -112						; size = 16
$T14 = -96						; size = 16
$T15 = -80						; size = 16
_UpDirection$ = -64					; size = 16
_EyeDirection$ = -48					; size = 16
_EyePosition$ = -32					; size = 16
__$ArrayPad$ = -4					; size = 4
?XMMatrixLookToLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z PROC ; DirectX::XMMatrixLookToLH, COMDAT
; _EyePosition$ = xmm0
; _EyeDirection$ = xmm1
; _UpDirection$ = xmm2
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1944
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 68 02 00
	00		 sub	 esp, 616		; 00000268H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 98 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-616]
  00025	b9 9a 00 00 00	 mov	 ecx, 154		; 0000009aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	0f 29 55 c0	 movaps	 XMMWORD PTR _UpDirection$[ebp], xmm2
  00040	0f 29 4d d0	 movaps	 XMMWORD PTR _EyeDirection$[ebp], xmm1
  00044	0f 29 45 e0	 movaps	 XMMWORD PTR _EyePosition$[ebp], xmm0
; Line 1945
  00048	e8 00 00 00 00	 call	 ?XMVectorZero@DirectX@@YQ?AT__m128@@XZ ; DirectX::XMVectorZero
  0004d	0f 29 45 b0	 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00051	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR $T15[ebp]
  00055	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _EyeDirection$[ebp]
  00059	e8 00 00 00 00	 call	 ?XMVector3Equal@DirectX@@YQ_NT__m128@@0@Z ; DirectX::XMVector3Equal
  0005e	0f b6 c0	 movzx	 eax, al
  00061	85 c0		 test	 eax, eax
  00063	74 21		 je	 SHORT $LN3@XMMatrixLo
  00065	8b f4		 mov	 esi, esp
  00067	68 99 07 00 00	 push	 1945			; 00000799H
  0006c	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_1FM@KOIPKFLA@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM@
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007f	3b f4		 cmp	 esi, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMMatrixLo:
; Line 1946
  00086	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _EyeDirection$[ebp]
  0008a	e8 00 00 00 00	 call	 ?XMVector3IsInfinite@DirectX@@YQ_NT__m128@@@Z ; DirectX::XMVector3IsInfinite
  0008f	0f b6 d0	 movzx	 edx, al
  00092	85 d2		 test	 edx, edx
  00094	74 21		 je	 SHORT $LN4@XMMatrixLo
  00096	8b f4		 mov	 esi, esp
  00098	68 9a 07 00 00	 push	 1946			; 0000079aH
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@DOFHPLOD@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo@
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@XMMatrixLo:
; Line 1947
  000b7	e8 00 00 00 00	 call	 ?XMVectorZero@DirectX@@YQ?AT__m128@@XZ ; DirectX::XMVectorZero
  000bc	0f 29 45 a0	 movaps	 XMMWORD PTR $T14[ebp], xmm0
  000c0	0f 28 4d a0	 movaps	 xmm1, XMMWORD PTR $T14[ebp]
  000c4	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _UpDirection$[ebp]
  000c8	e8 00 00 00 00	 call	 ?XMVector3Equal@DirectX@@YQ_NT__m128@@0@Z ; DirectX::XMVector3Equal
  000cd	0f b6 c8	 movzx	 ecx, al
  000d0	85 c9		 test	 ecx, ecx
  000d2	74 21		 je	 SHORT $LN5@XMMatrixLo
  000d4	8b f4		 mov	 esi, esp
  000d6	68 9b 07 00 00	 push	 1947			; 0000079bH
  000db	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  000e0	68 00 00 00 00	 push	 OFFSET ??_C@_1FK@IBPGMKAB@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM?$AAV@
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  000eb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@XMMatrixLo:
; Line 1948
  000f5	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _UpDirection$[ebp]
  000f9	e8 00 00 00 00	 call	 ?XMVector3IsInfinite@DirectX@@YQ_NT__m128@@@Z ; DirectX::XMVector3IsInfinite
  000fe	0f b6 c0	 movzx	 eax, al
  00101	85 c0		 test	 eax, eax
  00103	74 21		 je	 SHORT $LN6@XMMatrixLo
  00105	8b f4		 mov	 esi, esp
  00107	68 9c 07 00 00	 push	 1948			; 0000079cH
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00111	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@JAOFAOOK@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn@
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0011c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011f	3b f4		 cmp	 esi, esp
  00121	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@XMMatrixLo:
; Line 1952
  00126	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _EyeDirection$[ebp]
  0012a	e8 00 00 00 00	 call	 ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
  0012f	0f 29 45 80	 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00133	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  00137	0f 29 45 90	 movaps	 XMMWORD PTR _R2$[ebp], xmm0
; Line 1954
  0013b	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _R2$[ebp]
  0013f	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _UpDirection$[ebp]
  00143	e8 00 00 00 00	 call	 ?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Cross
  00148	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  0014f	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  00156	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _R0$[ebp], xmm0
; Line 1955
  0015d	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R0$[ebp]
  00164	e8 00 00 00 00	 call	 ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
  00169	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00170	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  00177	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _R0$[ebp], xmm0
; Line 1957
  0017e	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _R0$[ebp]
  00185	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _R2$[ebp]
  00189	e8 00 00 00 00	 call	 ?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Cross
  0018e	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00195	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  0019c	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _R1$[ebp], xmm0
; Line 1959
  001a3	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _EyePosition$[ebp]
  001a7	e8 00 00 00 00	 call	 ?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorNegate
  001ac	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  001b3	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  001ba	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _NegEyePosition$[ebp], xmm0
; Line 1961
  001c1	0f 28 8d 20 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _NegEyePosition$[ebp]
  001c8	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R0$[ebp]
  001cf	e8 00 00 00 00	 call	 ?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Dot
  001d4	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  001db	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  001e2	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _D0$[ebp], xmm0
; Line 1962
  001e9	0f 28 8d 20 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _NegEyePosition$[ebp]
  001f0	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R1$[ebp]
  001f7	e8 00 00 00 00	 call	 ?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Dot
  001fc	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00203	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0020a	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _D1$[ebp], xmm0
; Line 1963
  00211	0f 28 8d 20 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _NegEyePosition$[ebp]
  00218	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _R2$[ebp]
  0021c	e8 00 00 00 00	 call	 ?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Dot
  00221	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00228	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0022f	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _D2$[ebp], xmm0
; Line 1965
  00236	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _M$[ebp]
  0023c	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 1966
  00241	0f 28 15 00 00
	00 00		 movaps	 xmm2, XMMWORD PTR ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B
  00248	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _R0$[ebp]
  0024f	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  00256	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  0025b	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00262	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00267	6b c2 00	 imul	 eax, edx, 0
  0026a	0f 10 85 40 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T5[ebp]
  00271	0f 11 84 05 60
	fe ff ff	 movups	 XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1967
  00279	0f 28 15 00 00
	00 00		 movaps	 xmm2, XMMWORD PTR ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B
  00280	0f 28 8d 40 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _R1$[ebp]
  00287	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  0028e	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  00293	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0029a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0029f	c1 e1 00	 shl	 ecx, 0
  002a2	0f 10 85 30 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T4[ebp]
  002a9	0f 11 84 0d 60
	fe ff ff	 movups	 XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1968
  002b1	0f 28 15 00 00
	00 00		 movaps	 xmm2, XMMWORD PTR ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B
  002b8	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _R2$[ebp]
  002bc	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D2$[ebp]
  002c3	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  002c8	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  002cf	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002d4	d1 e2		 shl	 edx, 1
  002d6	0f 10 85 20 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T3[ebp]
  002dd	0f 11 84 15 60
	fe ff ff	 movups	 XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1969
  002e5	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002ea	6b c8 03	 imul	 ecx, eax, 3
  002ed	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
  002f4	0f 11 84 0d 60
	fe ff ff	 movups	 XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1971
  002fc	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _M$[ebp]
  00303	0f 28 8d 70 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _M$[ebp+16]
  0030a	0f 28 95 80 fe
	ff ff		 movaps	 xmm2, XMMWORD PTR _M$[ebp+32]
  00311	0f 28 9d 90 fe
	ff ff		 movaps	 xmm3, XMMWORD PTR _M$[ebp+48]
  00318	e8 00 00 00 00	 call	 ?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z ; DirectX::XMMatrixTranspose
  0031d	0f 29 9d d0 fd
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00324	0f 29 95 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  0032b	0f 29 8d b0 fd
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  00332	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00339	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0033e	8d b5 a0 fd ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00344	8d bd e0 fd ff
	ff		 lea	 edi, DWORD PTR $T2[ebp]
  0034a	f3 a5		 rep movsd
  0034c	8d 95 e0 fd ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00352	52		 push	 edx
  00353	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _M$[ebp]
  00359	e8 00 00 00 00	 call	 ??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMMATRIX::operator=
; Line 1973
  0035e	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _M$[ebp]
  00365	0f 28 8d 70 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _M$[ebp+16]
  0036c	0f 28 95 80 fe
	ff ff		 movaps	 xmm2, XMMWORD PTR _M$[ebp+32]
  00373	0f 28 9d 90 fe
	ff ff		 movaps	 xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1977
  0037a	52		 push	 edx
  0037b	8b cd		 mov	 ecx, ebp
  0037d	50		 push	 eax
  0037e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@XMMatrixLo
  00384	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00389	58		 pop	 eax
  0038a	5a		 pop	 edx
  0038b	5f		 pop	 edi
  0038c	5e		 pop	 esi
  0038d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00390	33 cd		 xor	 ecx, ebp
  00392	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00397	8b e5		 mov	 esp, ebp
  00399	5d		 pop	 ebp
  0039a	8b e3		 mov	 esp, ebx
  0039c	5b		 pop	 ebx
  0039d	c3		 ret	 0
  0039e	8b ff		 npad	 2
$LN9@XMMatrixLo:
  003a0	01 00 00 00	 DD	 1
  003a4	00 00 00 00	 DD	 $LN8@XMMatrixLo
$LN8@XMMatrixLo:
  003a8	60 fe ff ff	 DD	 -416			; fffffe60H
  003ac	40 00 00 00	 DD	 64			; 00000040H
  003b0	00 00 00 00	 DD	 $LN7@XMMatrixLo
$LN7@XMMatrixLo:
  003b4	4d		 DB	 77			; 0000004dH
  003b5	00		 DB	 0
?XMMatrixLookToLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ENDP ; DirectX::XMMatrixLookToLH
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z
_TEXT	SEGMENT
$T1 = -224						; size = 64
$T2 = -160						; size = 64
$T3 = -96						; size = 16
_EyeDirection$ = -80					; size = 16
_UpDirection$ = -64					; size = 16
_FocusPosition$ = -48					; size = 16
_EyePosition$ = -32					; size = 16
__$ArrayPad$ = -4					; size = 4
?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z PROC ; DirectX::XMMatrixLookAtLH, COMDAT
; _EyePosition$ = xmm0
; _FocusPosition$ = xmm1
; _UpDirection$ = xmm2
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1918
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	0f 29 55 c0	 movaps	 XMMWORD PTR _UpDirection$[ebp], xmm2
  00040	0f 29 4d d0	 movaps	 XMMWORD PTR _FocusPosition$[ebp], xmm1
  00044	0f 29 45 e0	 movaps	 XMMWORD PTR _EyePosition$[ebp], xmm0
; Line 1919
  00048	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _EyePosition$[ebp]
  0004c	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _FocusPosition$[ebp]
  00050	e8 00 00 00 00	 call	 ?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorSubtract
  00055	0f 29 45 a0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00059	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0005d	0f 29 45 b0	 movaps	 XMMWORD PTR _EyeDirection$[ebp], xmm0
; Line 1920
  00061	0f 28 55 c0	 movaps	 xmm2, XMMWORD PTR _UpDirection$[ebp]
  00065	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _EyeDirection$[ebp]
  00069	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _EyePosition$[ebp]
  0006d	e8 00 00 00 00	 call	 ?XMMatrixLookToLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ; DirectX::XMMatrixLookToLH
  00072	0f 29 9d 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00079	0f 29 95 40 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  00080	0f 29 8d 30 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  00087	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0008e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00093	8d b5 20 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00099	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR $T2[ebp]
  0009f	f3 a5		 rep movsd
  000a1	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000a8	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR $T2[ebp+16]
  000af	0f 28 55 80	 movaps	 xmm2, XMMWORD PTR $T2[ebp+32]
  000b3	0f 28 5d 90	 movaps	 xmm3, XMMWORD PTR $T2[ebp+48]
; Line 1921
  000b7	5f		 pop	 edi
  000b8	5e		 pop	 esi
  000b9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bc	33 cd		 xor	 ecx, ebp
  000be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	8b e3		 mov	 esp, ebx
  000c8	5b		 pop	 ebx
  000c9	c3		 ret	 0
?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ENDP ; DirectX::XMMatrixLookAtLH
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z
_TEXT	SEGMENT
tv283 = -736						; size = 16
$T1 = -720						; size = 16
$T2 = -704						; size = 16
$T3 = -688						; size = 16
$T4 = -672						; size = 16
_M$ = -640						; size = 64
$T5 = -560						; size = 16
$T6 = -544						; size = 16
$T7 = -528						; size = 16
$T8 = -512						; size = 16
$T9 = -496						; size = 16
$T10 = -480						; size = 16
$T11 = -464						; size = 16
_R2$ = -448						; size = 16
$T12 = -432						; size = 16
_R1$ = -416						; size = 16
$T13 = -400						; size = 16
$T14 = -384						; size = 16
_V2$ = -368						; size = 16
$T15 = -352						; size = 16
$T16 = -336						; size = 16
$T17 = -320						; size = 16
$T18 = -304						; size = 16
$T19 = -288						; size = 16
$T20 = -272						; size = 16
$T21 = -256						; size = 16
_R0$ = -240						; size = 16
$T22 = -224						; size = 16
$T23 = -208						; size = 16
$T24 = -192						; size = 16
_V1$ = -176						; size = 16
$T25 = -160						; size = 16
$T26 = -144						; size = 16
$T27 = -128						; size = 16
_V0$ = -112						; size = 16
$T28 = -96						; size = 16
_Q1$ = -80						; size = 16
$T29 = -64						; size = 16
_Q0$ = -48						; size = 16
_Quaternion$ = -32					; size = 16
__$ArrayPad$ = -4					; size = 4
?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z PROC ; DirectX::XMMatrixRotationQuaternion, COMDAT
; _Quaternion$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1631
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e0 02 00
	00		 sub	 esp, 736		; 000002e0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 20 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-736]
  00024	b9 b8 00 00 00	 mov	 ecx, 184		; 000000b8H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	0f 29 45 e0	 movaps	 XMMWORD PTR _Quaternion$[ebp], xmm0
; Line 1668
  0003f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Quaternion$[ebp]
  00043	0f 58 45 e0	 addps	 xmm0, XMMWORD PTR _Quaternion$[ebp]
  00047	0f 29 45 c0	 movaps	 XMMWORD PTR $T29[ebp], xmm0
  0004b	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T29[ebp]
  0004f	0f 29 45 d0	 movaps	 XMMWORD PTR _Q0$[ebp], xmm0
; Line 1669
  00053	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Quaternion$[ebp]
  00057	0f 59 45 d0	 mulps	 xmm0, XMMWORD PTR _Q0$[ebp]
  0005b	0f 29 45 a0	 movaps	 XMMWORD PTR $T28[ebp], xmm0
  0005f	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  00063	0f 29 45 b0	 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 1671
  00067	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _Q1$[ebp]
  0006b	0f c6 45 b0 c1	 shufps	 xmm0, XMMWORD PTR _Q1$[ebp], 193 ; 000000c1H
  00070	0f 29 45 80	 movaps	 XMMWORD PTR $T27[ebp], xmm0
  00074	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T27[ebp]
  00078	0f 29 45 90	 movaps	 XMMWORD PTR _V0$[ebp], xmm0
; Line 1672
  0007c	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T26[ebp]
  00082	50		 push	 eax
  00083	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMMask3
  00088	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  0008d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00090	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _V0$[ebp]
  00094	0f 54 c8	 andps	 xmm1, xmm0
  00097	0f 29 8d 60 ff
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm1
  0009e	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  000a5	0f 29 45 90	 movaps	 XMMWORD PTR _V0$[ebp], xmm0
; Line 1673
  000a9	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _Q1$[ebp]
  000ad	0f c6 45 b0 da	 shufps	 xmm0, XMMWORD PTR _Q1$[ebp], 218 ; 000000daH
  000b2	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  000b9	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  000c0	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1674
  000c7	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  000cd	51		 push	 ecx
  000ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMMask3
  000d3	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  000d8	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000db	0f 28 8d 50 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _V1$[ebp]
  000e2	0f 54 c8	 andps	 xmm1, xmm0
  000e5	0f 29 8d 20 ff
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm1
  000ec	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  000f3	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1675
  000fa	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _V0$[ebp]
  000fe	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR $T21[ebp]
  00104	52		 push	 edx
  00105	b9 00 00 00 00	 mov	 ecx, OFFSET ?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B ; `DirectX::XMMatrixRotationQuaternion'::`2'::Constant1110
  0010a	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR tv283[ebp], xmm0
  00111	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00116	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00119	0f 28 8d 20 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR tv283[ebp]
  00120	0f 5c c1	 subps	 xmm0, xmm1
  00123	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  0012a	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  00131	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _R0$[ebp], xmm0
; Line 1676
  00138	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R0$[ebp]
  0013f	0f 5c 85 50 ff
	ff ff		 subps	 xmm0, XMMWORD PTR _V1$[ebp]
  00146	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  0014d	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  00154	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _R0$[ebp], xmm0
; Line 1678
  0015b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Quaternion$[ebp]
  0015f	0f c6 45 e0 d0	 shufps	 xmm0, XMMWORD PTR _Quaternion$[ebp], 208 ; 000000d0H
  00164	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  0016b	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  00172	0f 29 45 90	 movaps	 XMMWORD PTR _V0$[ebp], xmm0
; Line 1679
  00176	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _Q0$[ebp]
  0017a	0f c6 45 d0 e6	 shufps	 xmm0, XMMWORD PTR _Q0$[ebp], 230 ; 000000e6H
  0017f	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00186	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  0018d	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1680
  00194	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _V0$[ebp]
  00198	0f 59 85 50 ff
	ff ff		 mulps	 xmm0, XMMWORD PTR _V1$[ebp]
  0019f	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  001a6	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  001ad	0f 29 45 90	 movaps	 XMMWORD PTR _V0$[ebp], xmm0
; Line 1682
  001b1	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Quaternion$[ebp]
  001b5	0f c6 45 e0 ff	 shufps	 xmm0, XMMWORD PTR _Quaternion$[ebp], 255 ; 000000ffH
  001ba	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  001c1	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  001c8	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1683
  001cf	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _Q0$[ebp]
  001d3	0f c6 45 d0 c9	 shufps	 xmm0, XMMWORD PTR _Q0$[ebp], 201 ; 000000c9H
  001d8	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  001df	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  001e6	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR _V2$[ebp], xmm0
; Line 1684
  001ed	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  001f4	0f 59 85 90 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V2$[ebp]
  001fb	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00202	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  00209	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1686
  00210	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _V0$[ebp]
  00214	0f 58 85 50 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _V1$[ebp]
  0021b	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00222	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  00229	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _R1$[ebp], xmm0
; Line 1687
  00230	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _V0$[ebp]
  00234	0f 5c 85 50 ff
	ff ff		 subps	 xmm0, XMMWORD PTR _V1$[ebp]
  0023b	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00242	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  00249	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _R2$[ebp], xmm0
; Line 1689
  00250	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _R1$[ebp]
  00257	0f c6 85 40 fe
	ff ff 49	 shufps	 xmm0, XMMWORD PTR _R2$[ebp], 73 ; 00000049H
  0025f	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00266	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  0026d	0f 29 45 90	 movaps	 XMMWORD PTR _V0$[ebp], xmm0
; Line 1690
  00271	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _V0$[ebp]
  00275	0f c6 45 90 78	 shufps	 xmm0, XMMWORD PTR _V0$[ebp], 120 ; 00000078H
  0027a	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00281	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00288	0f 29 45 90	 movaps	 XMMWORD PTR _V0$[ebp], xmm0
; Line 1691
  0028c	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _R1$[ebp]
  00293	0f c6 85 40 fe
	ff ff a0	 shufps	 xmm0, XMMWORD PTR _R2$[ebp], 160 ; 000000a0H
  0029b	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  002a2	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  002a9	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1692
  002b0	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  002b7	0f c6 85 50 ff
	ff ff 88	 shufps	 xmm0, XMMWORD PTR _V1$[ebp], 136 ; 00000088H
  002bf	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  002c6	0f 28 85 f0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  002cd	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1694
  002d4	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R0$[ebp]
  002db	0f c6 45 90 4c	 shufps	 xmm0, XMMWORD PTR _V0$[ebp], 76 ; 0000004cH
  002e0	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  002e7	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  002ee	0f 29 45 b0	 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 1695
  002f2	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _Q1$[ebp]
  002f6	0f c6 45 b0 78	 shufps	 xmm0, XMMWORD PTR _Q1$[ebp], 120 ; 00000078H
  002fb	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00302	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00309	0f 29 45 b0	 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 1697
  0030d	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR _M$[ebp]
  00313	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 1698
  00318	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0031d	6b c8 00	 imul	 ecx, eax, 0
  00320	0f 10 45 b0	 movups	 xmm0, XMMWORD PTR _Q1$[ebp]
  00324	0f 11 84 0d 80
	fd ff ff	 movups	 XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1700
  0032c	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R0$[ebp]
  00333	0f c6 45 90 ed	 shufps	 xmm0, XMMWORD PTR _V0$[ebp], 237 ; 000000edH
  00338	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0033f	0f 28 85 60 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00346	0f 29 45 b0	 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 1701
  0034a	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _Q1$[ebp]
  0034e	0f c6 45 b0 72	 shufps	 xmm0, XMMWORD PTR _Q1$[ebp], 114 ; 00000072H
  00353	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0035a	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00361	0f 29 45 b0	 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 1702
  00365	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0036a	c1 e2 00	 shl	 edx, 0
  0036d	0f 10 45 b0	 movups	 xmm0, XMMWORD PTR _Q1$[ebp]
  00371	0f 11 84 15 80
	fd ff ff	 movups	 XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1704
  00379	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00380	0f c6 85 10 ff
	ff ff e4	 shufps	 xmm0, XMMWORD PTR _R0$[ebp], 228 ; 000000e4H
  00388	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0038f	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00396	0f 29 45 b0	 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 1705
  0039a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0039f	d1 e0		 shl	 eax, 1
  003a1	0f 10 45 b0	 movups	 xmm0, XMMWORD PTR _Q1$[ebp]
  003a5	0f 11 84 05 80
	fd ff ff	 movups	 XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1706
  003ad	8d 8d 30 fd ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  003b3	51		 push	 ecx
  003b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR3
  003b9	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  003be	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  003c3	6b c2 03	 imul	 eax, edx, 3
  003c6	0f 10 85 30 fd
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  003cd	0f 11 84 05 80
	fd ff ff	 movups	 XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1707
  003d5	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _M$[ebp]
  003dc	0f 28 8d 90 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _M$[ebp+16]
  003e3	0f 28 95 a0 fd
	ff ff		 movaps	 xmm2, XMMWORD PTR _M$[ebp+32]
  003ea	0f 28 9d b0 fd
	ff ff		 movaps	 xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1710
  003f1	52		 push	 edx
  003f2	8b cd		 mov	 ecx, ebp
  003f4	50		 push	 eax
  003f5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@XMMatrixRo
  003fb	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00400	58		 pop	 eax
  00401	5a		 pop	 edx
  00402	5f		 pop	 edi
  00403	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00406	33 cd		 xor	 ecx, ebp
  00408	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0040d	8b e5		 mov	 esp, ebp
  0040f	5d		 pop	 ebp
  00410	8b e3		 mov	 esp, ebx
  00412	5b		 pop	 ebx
  00413	c3		 ret	 0
$LN5@XMMatrixRo:
  00414	01 00 00 00	 DD	 1
  00418	00 00 00 00	 DD	 $LN4@XMMatrixRo
$LN4@XMMatrixRo:
  0041c	80 fd ff ff	 DD	 -640			; fffffd80H
  00420	40 00 00 00	 DD	 64			; 00000040H
  00424	00 00 00 00	 DD	 $LN3@XMMatrixRo
$LN3@XMMatrixRo:
  00428	4d		 DB	 77			; 0000004dH
  00429	00		 DB	 0
?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ENDP ; DirectX::XMMatrixRotationQuaternion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z
_TEXT	SEGMENT
$T1 = -192						; size = 64
$T2 = -128						; size = 64
$T3 = -64						; size = 16
_Q$ = -48						; size = 16
_Angles$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z PROC ; DirectX::XMMatrixRotationRollPitchYawFromVector, COMDAT
; _Angles$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1509
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-200]
  00025	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	0f 29 45 e0	 movaps	 XMMWORD PTR _Angles$[ebp], xmm0
; Line 1510
  00040	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Angles$[ebp]
  00044	e8 00 00 00 00	 call	 ?XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionRotationRollPitchYawFromVector
  00049	0f 29 45 c0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0004d	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00051	0f 29 45 d0	 movaps	 XMMWORD PTR _Q$[ebp], xmm0
; Line 1511
  00055	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _Q$[ebp]
  00059	e8 00 00 00 00	 call	 ?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationQuaternion
  0005e	0f 29 9d 70 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00065	0f 29 95 60 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  0006c	0f 29 8d 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  00073	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0007a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0007f	8d b5 40 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00085	8d 7d 80	 lea	 edi, DWORD PTR $T2[ebp]
  00088	f3 a5		 rep movsd
  0008a	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0008e	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR $T2[ebp+16]
  00092	0f 28 55 a0	 movaps	 xmm2, XMMWORD PTR $T2[ebp+32]
  00096	0f 28 5d b0	 movaps	 xmm3, XMMWORD PTR $T2[ebp+48]
; Line 1512
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009f	33 cd		 xor	 ecx, ebp
  000a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	8b e3		 mov	 esp, ebx
  000ab	5b		 pop	 ebx
  000ac	c3		 ret	 0
?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ENDP ; DirectX::XMMatrixRotationRollPitchYawFromVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixRotationRollPitchYaw@DirectX@@YQ?AUXMMATRIX@1@MMM@Z
_TEXT	SEGMENT
$T1 = -176						; size = 64
$T2 = -112						; size = 64
$T3 = -48						; size = 16
_Angles$ = -32						; size = 16
_Roll$ = -16						; size = 4
_Yaw$ = -12						; size = 4
_Pitch$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?XMMatrixRotationRollPitchYaw@DirectX@@YQ?AUXMMATRIX@1@MMM@Z PROC ; DirectX::XMMatrixRotationRollPitchYaw, COMDAT
; _Pitch$ = xmm0s
; _Yaw$ = xmm1s
; _Roll$ = xmm2s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1498
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-184]
  00025	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	f3 0f 11 55 f0	 movss	 DWORD PTR _Roll$[ebp], xmm2
  00041	f3 0f 11 4d f4	 movss	 DWORD PTR _Yaw$[ebp], xmm1
  00046	f3 0f 11 45 f8	 movss	 DWORD PTR _Pitch$[ebp], xmm0
; Line 1499
  0004b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@00000000
  00053	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _Roll$[ebp]
  00058	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _Yaw$[ebp]
  0005d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Pitch$[ebp]
  00062	e8 00 00 00 00	 call	 ?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
  00067	0f 29 45 d0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0006b	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0006f	0f 29 45 e0	 movaps	 XMMWORD PTR _Angles$[ebp], xmm0
; Line 1500
  00073	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Angles$[ebp]
  00077	e8 00 00 00 00	 call	 ?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationRollPitchYawFromVector
  0007c	0f 29 5d 80	 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00080	0f 29 95 70 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  00087	0f 29 8d 60 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  0008e	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00095	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0009a	8d b5 50 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  000a0	8d 7d 90	 lea	 edi, DWORD PTR $T2[ebp]
  000a3	f3 a5		 rep movsd
  000a5	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000a9	0f 28 4d a0	 movaps	 xmm1, XMMWORD PTR $T2[ebp+16]
  000ad	0f 28 55 b0	 movaps	 xmm2, XMMWORD PTR $T2[ebp+32]
  000b1	0f 28 5d c0	 movaps	 xmm3, XMMWORD PTR $T2[ebp+48]
; Line 1501
  000b5	5f		 pop	 edi
  000b6	5e		 pop	 esi
  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	8b e3		 mov	 esp, ebx
  000c6	5b		 pop	 ebx
  000c7	c3		 ret	 0
?XMMatrixRotationRollPitchYaw@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ENDP ; DirectX::XMMatrixRotationRollPitchYaw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z
_TEXT	SEGMENT
$T1 = -128						; size = 16
_M$ = -96						; size = 64
_OffsetZ$ = -16						; size = 4
_OffsetY$ = -12						; size = 4
_OffsetX$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z PROC ; DirectX::XMMatrixTranslation, COMDAT
; _OffsetX$ = xmm0s
; _OffsetY$ = xmm1s
; _OffsetZ$ = xmm2s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1079
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00021	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	f3 0f 11 55 f0	 movss	 DWORD PTR _OffsetZ$[ebp], xmm2
  0003d	f3 0f 11 4d f4	 movss	 DWORD PTR _OffsetY$[ebp], xmm1
  00042	f3 0f 11 45 f8	 movss	 DWORD PTR _OffsetX$[ebp], xmm0
; Line 1105
  00047	8d 4d a0	 lea	 ecx, DWORD PTR _M$[ebp]
  0004a	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 1106
  0004f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00054	6b c8 00	 imul	 ecx, eax, 0
  00057	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
  0005e	0f 11 44 0d a0	 movups	 XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1107
  00063	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00068	c1 e2 00	 shl	 edx, 0
  0006b	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
  00072	0f 11 44 15 a0	 movups	 XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1108
  00077	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0007c	d1 e0		 shl	 eax, 1
  0007e	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
  00085	0f 11 44 05 a0	 movups	 XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1109
  0008a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00092	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _OffsetZ$[ebp]
  00097	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _OffsetY$[ebp]
  0009c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _OffsetX$[ebp]
  000a1	e8 00 00 00 00	 call	 ?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
  000a6	0f 29 45 80	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000aa	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000af	6b d1 03	 imul	 edx, ecx, 3
  000b2	0f 10 45 80	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  000b6	0f 11 44 15 a0	 movups	 XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1110
  000bb	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _M$[ebp]
  000bf	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _M$[ebp+16]
  000c3	0f 28 55 c0	 movaps	 xmm2, XMMWORD PTR _M$[ebp+32]
  000c7	0f 28 5d d0	 movaps	 xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1113
  000cb	52		 push	 edx
  000cc	8b cd		 mov	 ecx, ebp
  000ce	50		 push	 eax
  000cf	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@XMMatrixTr
  000d5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000da	58		 pop	 eax
  000db	5a		 pop	 edx
  000dc	5f		 pop	 edi
  000dd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e0	33 cd		 xor	 ecx, ebp
  000e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	8b e3		 mov	 esp, ebx
  000ec	5b		 pop	 ebx
  000ed	c3		 ret	 0
  000ee	8b ff		 npad	 2
$LN5@XMMatrixTr:
  000f0	01 00 00 00	 DD	 1
  000f4	00 00 00 00	 DD	 $LN4@XMMatrixTr
$LN4@XMMatrixTr:
  000f8	a0 ff ff ff	 DD	 -96			; ffffffa0H
  000fc	40 00 00 00	 DD	 64			; 00000040H
  00100	00 00 00 00	 DD	 $LN3@XMMatrixTr
$LN3@XMMatrixTr:
  00104	4d		 DB	 77			; 0000004dH
  00105	00		 DB	 0
?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ENDP ; DirectX::XMMatrixTranslation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ
_TEXT	SEGMENT
_M$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ PROC	; DirectX::XMMatrixIdentity, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1032
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 60	 sub	 esp, 96			; 00000060H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  0001e	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; Line 1035
  00035	8d 4d b0	 lea	 ecx, DWORD PTR _M$[ebp]
  00038	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 1036
  0003d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00042	6b c8 00	 imul	 ecx, eax, 0
  00045	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
  0004c	0f 11 44 0d b0	 movups	 XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1037
  00051	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00056	c1 e2 00	 shl	 edx, 0
  00059	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
  00060	0f 11 44 15 b0	 movups	 XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1038
  00065	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0006a	d1 e0		 shl	 eax, 1
  0006c	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
  00073	0f 11 44 05 b0	 movups	 XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1039
  00078	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0007d	6b d1 03	 imul	 edx, ecx, 3
  00080	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
  00087	0f 11 44 15 b0	 movups	 XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1040
  0008c	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _M$[ebp]
  00090	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _M$[ebp+16]
  00094	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _M$[ebp+32]
  00098	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1044
  0009c	52		 push	 edx
  0009d	8b cd		 mov	 ecx, ebp
  0009f	50		 push	 eax
  000a0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@XMMatrixId
  000a6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ab	58		 pop	 eax
  000ac	5a		 pop	 edx
  000ad	5f		 pop	 edi
  000ae	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b1	33 cd		 xor	 ecx, ebp
  000b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	8b e3		 mov	 esp, ebx
  000bd	5b		 pop	 ebx
  000be	c3		 ret	 0
  000bf	90		 npad	 1
$LN5@XMMatrixId:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN4@XMMatrixId
$LN4@XMMatrixId:
  000c8	b0 ff ff ff	 DD	 -80			; ffffffb0H
  000cc	40 00 00 00	 DD	 64			; 00000040H
  000d0	00 00 00 00	 DD	 $LN3@XMMatrixId
$LN3@XMMatrixId:
  000d4	4d		 DB	 77			; 0000004dH
  000d5	00		 DB	 0
?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ ENDP	; DirectX::XMMatrixIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z
_TEXT	SEGMENT
tv806 = -2208						; size = 16
$T1 = -2192						; size = 64
$T2 = -2128						; size = 16
$T3 = -2112						; size = 16
$T4 = -2096						; size = 16
$T5 = -2080						; size = 16
_mResult$ = -2048					; size = 64
$T6 = -1968						; size = 16
$T7 = -1952						; size = 16
$T8 = -1936						; size = 16
_vTemp$ = -1920						; size = 16
$T9 = -1904						; size = 16
$T10 = -1888						; size = 16
$T11 = -1872						; size = 16
$T12 = -1856						; size = 16
$T13 = -1840						; size = 16
$T14 = -1824						; size = 16
$T15 = -1808						; size = 16
$T16 = -1792						; size = 16
$T17 = -1776						; size = 16
$T18 = -1760						; size = 16
_C7$ = -1744						; size = 16
$T19 = -1728						; size = 16
$T20 = -1712						; size = 16
_C5$ = -1696						; size = 16
$T21 = -1680						; size = 16
$T22 = -1664						; size = 16
_C3$ = -1648						; size = 16
$T23 = -1632						; size = 16
$T24 = -1616						; size = 16
_C1$ = -1600						; size = 16
$T25 = -1584						; size = 16
$T26 = -1568						; size = 16
$T27 = -1552						; size = 16
$T28 = -1536						; size = 16
$T29 = -1520						; size = 16
$T30 = -1504						; size = 16
$T31 = -1488						; size = 16
$T32 = -1472						; size = 16
$T33 = -1456						; size = 16
$T34 = -1440						; size = 16
$T35 = -1424						; size = 16
$T36 = -1408						; size = 16
$T37 = -1392						; size = 16
$T38 = -1376						; size = 16
$T39 = -1360						; size = 16
$T40 = -1344						; size = 16
$T41 = -1328						; size = 16
$T42 = -1312						; size = 16
$T43 = -1296						; size = 16
$T44 = -1280						; size = 16
$T45 = -1264						; size = 16
$T46 = -1248						; size = 16
$T47 = -1232						; size = 16
$T48 = -1216						; size = 16
$T49 = -1200						; size = 16
$T50 = -1184						; size = 16
$T51 = -1168						; size = 16
$T52 = -1152						; size = 16
$T53 = -1136						; size = 16
$T54 = -1120						; size = 16
$T55 = -1104						; size = 16
$T56 = -1088						; size = 16
$T57 = -1072						; size = 16
$T58 = -1056						; size = 16
$T59 = -1040						; size = 16
_C6$ = -1024						; size = 16
$T60 = -1008						; size = 16
_C4$ = -992						; size = 16
$T61 = -976						; size = 16
_C2$ = -960						; size = 16
$T62 = -944						; size = 16
_C0$ = -928						; size = 16
$T63 = -912						; size = 16
$T64 = -896						; size = 16
_V03$ = -880						; size = 16
$T65 = -864						; size = 16
$T66 = -848						; size = 16
$T67 = -832						; size = 16
_V13$ = -816						; size = 16
$T68 = -800						; size = 16
$T69 = -784						; size = 16
$T70 = -768						; size = 16
$T71 = -752						; size = 16
$T72 = -736						; size = 16
$T73 = -720						; size = 16
$T74 = -704						; size = 16
$T75 = -688						; size = 16
$T76 = -672						; size = 16
$T77 = -656						; size = 16
$T78 = -640						; size = 16
$T79 = -624						; size = 16
$T80 = -608						; size = 16
$T81 = -592						; size = 16
$T82 = -576						; size = 16
$T83 = -560						; size = 16
$T84 = -544						; size = 16
$T85 = -528						; size = 16
_D2$ = -512						; size = 16
$T86 = -496						; size = 16
_D1$ = -480						; size = 16
$T87 = -464						; size = 16
_D0$ = -448						; size = 16
$T88 = -432						; size = 16
_V12$ = -416						; size = 16
$T89 = -400						; size = 16
_V02$ = -384						; size = 16
$T90 = -368						; size = 16
_V11$ = -352						; size = 16
$T91 = -336						; size = 16
_V01$ = -320						; size = 16
$T92 = -304						; size = 16
_V10$ = -288						; size = 16
$T93 = -272						; size = 16
_V00$ = -256						; size = 16
$T94 = -240						; size = 64
_MT$ = -160						; size = 64
_M$ = -80						; size = 64
_pDeterminant$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z PROC ; DirectX::XMMatrixInverse, COMDAT
; _pDeterminant$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 611
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec a8 08 00
	00		 sub	 esp, 2216		; 000008a8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 58 f7 ff
	ff		 lea	 edi, DWORD PTR [ebp-2216]
  00025	b9 2a 02 00 00	 mov	 ecx, 554		; 0000022aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	0f 29 5d e0	 movaps	 XMMWORD PTR _M$[ebp+48], xmm3
  00040	0f 29 55 d0	 movaps	 XMMWORD PTR _M$[ebp+32], xmm2
  00044	0f 29 4d c0	 movaps	 XMMWORD PTR _M$[ebp+16], xmm1
  00048	0f 29 45 b0	 movaps	 XMMWORD PTR _M$[ebp], xmm0
  0004c	89 4d f8	 mov	 DWORD PTR _pDeterminant$[ebp], ecx
; Line 706
  0004f	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _M$[ebp]
  00053	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _M$[ebp+16]
  00057	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _M$[ebp+32]
  0005b	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _M$[ebp+48]
  0005f	e8 00 00 00 00	 call	 ?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z ; DirectX::XMMatrixTranspose
  00064	0f 29 9d a0 f7
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  0006b	0f 29 95 90 f7
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  00072	0f 29 8d 80 f7
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  00079	0f 29 85 70 f7
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00080	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00085	8d b5 70 f7 ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  0008b	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR $T94[ebp]
  00091	f3 a5		 rep movsd
  00093	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00098	8d b5 10 ff ff
	ff		 lea	 esi, DWORD PTR $T94[ebp]
  0009e	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR _MT$[ebp]
  000a4	f3 a5		 rep movsd
; Line 707
  000a6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ab	d1 e0		 shl	 eax, 1
  000ad	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000b2	d1 e1		 shl	 ecx, 1
  000b4	0f 10 84 0d 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+ecx]
  000bc	0f c6 84 05 60
	ff ff ff 50	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 80 ; 00000050H
  000c5	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T93[ebp], xmm0
  000cc	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93[ebp]
  000d3	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 708
  000da	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000df	6b c2 03	 imul	 eax, edx, 3
  000e2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000e7	6b d1 03	 imul	 edx, ecx, 3
  000ea	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  000f2	0f c6 84 05 60
	ff ff ff ee	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 238 ; 000000eeH
  000fb	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T92[ebp], xmm0
  00102	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T92[ebp]
  00109	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _V10$[ebp], xmm0
; Line 709
  00110	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00115	6b c8 00	 imul	 ecx, eax, 0
  00118	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0011d	6b c2 00	 imul	 eax, edx, 0
  00120	0f 10 84 05 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+eax]
  00128	0f c6 84 0d 60
	ff ff ff 50	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 80 ; 00000050H
  00131	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T91[ebp], xmm0
  00138	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91[ebp]
  0013f	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 710
  00146	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0014b	c1 e1 00	 shl	 ecx, 0
  0014e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00153	c1 e2 00	 shl	 edx, 0
  00156	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  0015e	0f c6 84 0d 60
	ff ff ff ee	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 238 ; 000000eeH
  00167	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T90[ebp], xmm0
  0016e	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T90[ebp]
  00175	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 711
  0017c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00181	6b c8 00	 imul	 ecx, eax, 0
  00184	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00189	d1 e2		 shl	 edx, 1
  0018b	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  00193	0f c6 84 0d 60
	ff ff ff 88	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 136 ; 00000088H
  0019c	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T89[ebp], xmm0
  001a3	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T89[ebp]
  001aa	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 712
  001b1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001b6	c1 e0 00	 shl	 eax, 0
  001b9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001be	6b d1 03	 imul	 edx, ecx, 3
  001c1	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  001c9	0f c6 84 05 60
	ff ff ff dd	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 221 ; 000000ddH
  001d2	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T88[ebp], xmm0
  001d9	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T88[ebp]
  001e0	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _V12$[ebp], xmm0
; Line 714
  001e7	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V00$[ebp]
  001ee	0f 59 85 e0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V10$[ebp]
  001f5	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T87[ebp], xmm0
  001fc	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T87[ebp]
  00203	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _D0$[ebp], xmm0
; Line 715
  0020a	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V01$[ebp]
  00211	0f 59 85 a0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V11$[ebp]
  00218	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T86[ebp], xmm0
  0021f	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T86[ebp]
  00226	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _D1$[ebp], xmm0
; Line 716
  0022d	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V02$[ebp]
  00234	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V12$[ebp]
  0023b	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T85[ebp], xmm0
  00242	0f 28 85 f0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T85[ebp]
  00249	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _D2$[ebp], xmm0
; Line 718
  00250	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00255	d1 e0		 shl	 eax, 1
  00257	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0025c	d1 e1		 shl	 ecx, 1
  0025e	0f 10 84 0d 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+ecx]
  00266	0f c6 84 05 60
	ff ff ff ee	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 238 ; 000000eeH
  0026f	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T84[ebp], xmm0
  00276	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T84[ebp]
  0027d	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 719
  00284	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00289	6b c2 03	 imul	 eax, edx, 3
  0028c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00291	6b d1 03	 imul	 edx, ecx, 3
  00294	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  0029c	0f c6 84 05 60
	ff ff ff 50	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 80 ; 00000050H
  002a5	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T83[ebp], xmm0
  002ac	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T83[ebp]
  002b3	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _V10$[ebp], xmm0
; Line 720
  002ba	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002bf	6b c8 00	 imul	 ecx, eax, 0
  002c2	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002c7	6b c2 00	 imul	 eax, edx, 0
  002ca	0f 10 84 05 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+eax]
  002d2	0f c6 84 0d 60
	ff ff ff ee	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 238 ; 000000eeH
  002db	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T82[ebp], xmm0
  002e2	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T82[ebp]
  002e9	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 721
  002f0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002f5	c1 e1 00	 shl	 ecx, 0
  002f8	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002fd	c1 e2 00	 shl	 edx, 0
  00300	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  00308	0f c6 84 0d 60
	ff ff ff 50	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 80 ; 00000050H
  00311	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T81[ebp], xmm0
  00318	0f 28 85 b0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T81[ebp]
  0031f	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 722
  00326	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0032b	6b c8 00	 imul	 ecx, eax, 0
  0032e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00333	d1 e2		 shl	 edx, 1
  00335	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  0033d	0f c6 84 0d 60
	ff ff ff dd	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 221 ; 000000ddH
  00346	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T80[ebp], xmm0
  0034d	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T80[ebp]
  00354	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 723
  0035b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00360	c1 e0 00	 shl	 eax, 0
  00363	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00368	6b d1 03	 imul	 edx, ecx, 3
  0036b	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  00373	0f c6 84 05 60
	ff ff ff 88	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 136 ; 00000088H
  0037c	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T79[ebp], xmm0
  00383	0f 28 85 90 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T79[ebp]
  0038a	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _V12$[ebp], xmm0
; Line 725
  00391	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V00$[ebp]
  00398	0f 59 85 e0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V10$[ebp]
  0039f	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T78[ebp], xmm0
  003a6	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T78[ebp]
  003ad	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 726
  003b4	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V01$[ebp]
  003bb	0f 59 85 a0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V11$[ebp]
  003c2	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T77[ebp], xmm0
  003c9	0f 28 85 70 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T77[ebp]
  003d0	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 727
  003d7	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V02$[ebp]
  003de	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V12$[ebp]
  003e5	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T76[ebp], xmm0
  003ec	0f 28 85 60 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T76[ebp]
  003f3	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 728
  003fa	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  00401	0f 5c 85 00 ff
	ff ff		 subps	 xmm0, XMMWORD PTR _V00$[ebp]
  00408	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR $T75[ebp], xmm0
  0040f	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T75[ebp]
  00416	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _D0$[ebp], xmm0
; Line 729
  0041d	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  00424	0f 5c 85 c0 fe
	ff ff		 subps	 xmm0, XMMWORD PTR _V01$[ebp]
  0042b	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T74[ebp], xmm0
  00432	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T74[ebp]
  00439	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _D1$[ebp], xmm0
; Line 730
  00440	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D2$[ebp]
  00447	0f 5c 85 80 fe
	ff ff		 subps	 xmm0, XMMWORD PTR _V02$[ebp]
  0044e	0f 29 85 30 fd
	ff ff		 movaps	 XMMWORD PTR $T73[ebp], xmm0
  00455	0f 28 85 30 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T73[ebp]
  0045c	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _D2$[ebp], xmm0
; Line 732
  00463	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  0046a	0f c6 85 00 fe
	ff ff 5d	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 93 ; 0000005dH
  00472	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR $T72[ebp], xmm0
  00479	0f 28 85 20 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T72[ebp]
  00480	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 733
  00487	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0048c	c1 e0 00	 shl	 eax, 0
  0048f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00494	c1 e1 00	 shl	 ecx, 0
  00497	0f 10 84 0d 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+ecx]
  0049f	0f c6 84 05 60
	ff ff ff 49	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 73 ; 00000049H
  004a8	0f 29 85 10 fd
	ff ff		 movaps	 XMMWORD PTR $T71[ebp], xmm0
  004af	0f 28 85 10 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T71[ebp]
  004b6	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 734
  004bd	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V11$[ebp]
  004c4	0f c6 85 40 fe
	ff ff 32	 shufps	 xmm0, XMMWORD PTR _D0$[ebp], 50 ; 00000032H
  004cc	0f 29 85 00 fd
	ff ff		 movaps	 XMMWORD PTR $T70[ebp], xmm0
  004d3	0f 28 85 00 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T70[ebp]
  004da	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _V10$[ebp], xmm0
; Line 735
  004e1	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  004e6	6b c2 00	 imul	 eax, edx, 0
  004e9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  004ee	6b d1 00	 imul	 edx, ecx, 0
  004f1	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  004f9	0f c6 84 05 60
	ff ff ff 12	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 18 ; 00000012H
  00502	0f 29 85 f0 fc
	ff ff		 movaps	 XMMWORD PTR $T69[ebp], xmm0
  00509	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T69[ebp]
  00510	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 736
  00517	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V11$[ebp]
  0051e	0f c6 85 40 fe
	ff ff 99	 shufps	 xmm0, XMMWORD PTR _D0$[ebp], 153 ; 00000099H
  00526	0f 29 85 e0 fc
	ff ff		 movaps	 XMMWORD PTR $T68[ebp], xmm0
  0052d	0f 28 85 e0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T68[ebp]
  00534	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 738
  0053b	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  00542	0f c6 85 00 fe
	ff ff fd	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 253 ; 000000fdH
  0054a	0f 29 85 c0 fc
	ff ff		 movaps	 XMMWORD PTR $T67[ebp], xmm0
  00551	0f 28 85 c0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T67[ebp]
  00558	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _V13$[ebp], xmm0
; Line 739
  0055f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00564	6b c8 03	 imul	 ecx, eax, 3
  00567	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0056c	6b c2 03	 imul	 eax, edx, 3
  0056f	0f 10 84 05 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+eax]
  00577	0f c6 84 0d 60
	ff ff ff 49	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 73 ; 00000049H
  00580	0f 29 85 b0 fc
	ff ff		 movaps	 XMMWORD PTR $T66[ebp], xmm0
  00587	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T66[ebp]
  0058e	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 740
  00595	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _V13$[ebp]
  0059c	0f c6 85 20 fe
	ff ff 32	 shufps	 xmm0, XMMWORD PTR _D1$[ebp], 50 ; 00000032H
  005a4	0f 29 85 a0 fc
	ff ff		 movaps	 XMMWORD PTR $T65[ebp], xmm0
  005ab	0f 28 85 a0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T65[ebp]
  005b2	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _V12$[ebp], xmm0
; Line 741
  005b9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  005be	d1 e1		 shl	 ecx, 1
  005c0	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  005c5	d1 e2		 shl	 edx, 1
  005c7	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  005cf	0f c6 84 0d 60
	ff ff ff 12	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 18 ; 00000012H
  005d8	0f 29 85 80 fc
	ff ff		 movaps	 XMMWORD PTR $T64[ebp], xmm0
  005df	0f 28 85 80 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T64[ebp]
  005e6	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _V03$[ebp], xmm0
; Line 742
  005ed	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _V13$[ebp]
  005f4	0f c6 85 20 fe
	ff ff 99	 shufps	 xmm0, XMMWORD PTR _D1$[ebp], 153 ; 00000099H
  005fc	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR $T63[ebp], xmm0
  00603	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T63[ebp]
  0060a	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _V13$[ebp], xmm0
; Line 744
  00611	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V00$[ebp]
  00618	0f 59 85 e0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V10$[ebp]
  0061f	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR $T62[ebp], xmm0
  00626	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T62[ebp]
  0062d	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR _C0$[ebp], xmm0
; Line 745
  00634	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V01$[ebp]
  0063b	0f 59 85 a0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V11$[ebp]
  00642	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR $T61[ebp], xmm0
  00649	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T61[ebp]
  00650	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR _C2$[ebp], xmm0
; Line 746
  00657	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V02$[ebp]
  0065e	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V12$[ebp]
  00665	0f 29 85 10 fc
	ff ff		 movaps	 XMMWORD PTR $T60[ebp], xmm0
  0066c	0f 28 85 10 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T60[ebp]
  00673	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR _C4$[ebp], xmm0
; Line 747
  0067a	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _V03$[ebp]
  00681	0f 59 85 d0 fc
	ff ff		 mulps	 xmm0, XMMWORD PTR _V13$[ebp]
  00688	0f 29 85 f0 fb
	ff ff		 movaps	 XMMWORD PTR $T59[ebp], xmm0
  0068f	0f 28 85 f0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T59[ebp]
  00696	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR _C6$[ebp], xmm0
; Line 750
  0069d	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  006a4	0f c6 85 00 fe
	ff ff 04	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 4
  006ac	0f 29 85 e0 fb
	ff ff		 movaps	 XMMWORD PTR $T58[ebp], xmm0
  006b3	0f 28 85 e0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T58[ebp]
  006ba	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 751
  006c1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  006c6	c1 e0 00	 shl	 eax, 0
  006c9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  006ce	c1 e1 00	 shl	 ecx, 0
  006d1	0f 10 84 0d 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+ecx]
  006d9	0f c6 84 05 60
	ff ff ff 9e	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 158 ; 0000009eH
  006e2	0f 29 85 d0 fb
	ff ff		 movaps	 XMMWORD PTR $T57[ebp], xmm0
  006e9	0f 28 85 d0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T57[ebp]
  006f0	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 752
  006f7	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  006fe	0f c6 85 a0 fe
	ff ff 93	 shufps	 xmm0, XMMWORD PTR _V11$[ebp], 147 ; 00000093H
  00706	0f 29 85 c0 fb
	ff ff		 movaps	 XMMWORD PTR $T56[ebp], xmm0
  0070d	0f 28 85 c0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T56[ebp]
  00714	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _V10$[ebp], xmm0
; Line 753
  0071b	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00720	6b c2 00	 imul	 eax, edx, 0
  00723	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00728	6b d1 00	 imul	 edx, ecx, 0
  0072b	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  00733	0f c6 84 05 60
	ff ff ff 7b	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 123 ; 0000007bH
  0073c	0f 29 85 b0 fb
	ff ff		 movaps	 XMMWORD PTR $T55[ebp], xmm0
  00743	0f 28 85 b0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T55[ebp]
  0074a	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 754
  00751	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  00758	0f c6 85 a0 fe
	ff ff 26	 shufps	 xmm0, XMMWORD PTR _V11$[ebp], 38 ; 00000026H
  00760	0f 29 85 a0 fb
	ff ff		 movaps	 XMMWORD PTR $T54[ebp], xmm0
  00767	0f 28 85 a0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T54[ebp]
  0076e	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 756
  00775	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  0077c	0f c6 85 00 fe
	ff ff a4	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 164 ; 000000a4H
  00784	0f 29 85 90 fb
	ff ff		 movaps	 XMMWORD PTR $T53[ebp], xmm0
  0078b	0f 28 85 90 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T53[ebp]
  00792	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _V13$[ebp], xmm0
; Line 757
  00799	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0079e	6b c8 03	 imul	 ecx, eax, 3
  007a1	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  007a6	6b c2 03	 imul	 eax, edx, 3
  007a9	0f 10 84 05 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+eax]
  007b1	0f c6 84 0d 60
	ff ff ff 9e	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 158 ; 0000009eH
  007ba	0f 29 85 80 fb
	ff ff		 movaps	 XMMWORD PTR $T52[ebp], xmm0
  007c1	0f 28 85 80 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T52[ebp]
  007c8	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 758
  007cf	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  007d6	0f c6 85 d0 fc
	ff ff 93	 shufps	 xmm0, XMMWORD PTR _V13$[ebp], 147 ; 00000093H
  007de	0f 29 85 70 fb
	ff ff		 movaps	 XMMWORD PTR $T51[ebp], xmm0
  007e5	0f 28 85 70 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T51[ebp]
  007ec	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _V12$[ebp], xmm0
; Line 759
  007f3	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  007f8	d1 e1		 shl	 ecx, 1
  007fa	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  007ff	d1 e2		 shl	 edx, 1
  00801	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  00809	0f c6 84 0d 60
	ff ff ff 7b	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 123 ; 0000007bH
  00812	0f 29 85 60 fb
	ff ff		 movaps	 XMMWORD PTR $T50[ebp], xmm0
  00819	0f 28 85 60 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T50[ebp]
  00820	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _V03$[ebp], xmm0
; Line 760
  00827	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  0082e	0f c6 85 d0 fc
	ff ff 26	 shufps	 xmm0, XMMWORD PTR _V13$[ebp], 38 ; 00000026H
  00836	0f 29 85 50 fb
	ff ff		 movaps	 XMMWORD PTR $T49[ebp], xmm0
  0083d	0f 28 85 50 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T49[ebp]
  00844	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _V13$[ebp], xmm0
; Line 762
  0084b	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V00$[ebp]
  00852	0f 59 85 e0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V10$[ebp]
  00859	0f 29 85 40 fb
	ff ff		 movaps	 XMMWORD PTR $T48[ebp], xmm0
  00860	0f 28 85 40 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T48[ebp]
  00867	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 763
  0086e	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V01$[ebp]
  00875	0f 59 85 a0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V11$[ebp]
  0087c	0f 29 85 30 fb
	ff ff		 movaps	 XMMWORD PTR $T47[ebp], xmm0
  00883	0f 28 85 30 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T47[ebp]
  0088a	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 764
  00891	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V02$[ebp]
  00898	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V12$[ebp]
  0089f	0f 29 85 20 fb
	ff ff		 movaps	 XMMWORD PTR $T46[ebp], xmm0
  008a6	0f 28 85 20 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T46[ebp]
  008ad	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 765
  008b4	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _V03$[ebp]
  008bb	0f 59 85 d0 fc
	ff ff		 mulps	 xmm0, XMMWORD PTR _V13$[ebp]
  008c2	0f 29 85 10 fb
	ff ff		 movaps	 XMMWORD PTR $T45[ebp], xmm0
  008c9	0f 28 85 10 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T45[ebp]
  008d0	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _V03$[ebp], xmm0
; Line 766
  008d7	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C0$[ebp]
  008de	0f 5c 85 00 ff
	ff ff		 subps	 xmm0, XMMWORD PTR _V00$[ebp]
  008e5	0f 29 85 00 fb
	ff ff		 movaps	 XMMWORD PTR $T44[ebp], xmm0
  008ec	0f 28 85 00 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T44[ebp]
  008f3	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR _C0$[ebp], xmm0
; Line 767
  008fa	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C2$[ebp]
  00901	0f 5c 85 c0 fe
	ff ff		 subps	 xmm0, XMMWORD PTR _V01$[ebp]
  00908	0f 29 85 f0 fa
	ff ff		 movaps	 XMMWORD PTR $T43[ebp], xmm0
  0090f	0f 28 85 f0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T43[ebp]
  00916	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR _C2$[ebp], xmm0
; Line 768
  0091d	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C4$[ebp]
  00924	0f 5c 85 80 fe
	ff ff		 subps	 xmm0, XMMWORD PTR _V02$[ebp]
  0092b	0f 29 85 e0 fa
	ff ff		 movaps	 XMMWORD PTR $T42[ebp], xmm0
  00932	0f 28 85 e0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T42[ebp]
  00939	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR _C4$[ebp], xmm0
; Line 769
  00940	0f 28 85 00 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C6$[ebp]
  00947	0f 5c 85 90 fc
	ff ff		 subps	 xmm0, XMMWORD PTR _V03$[ebp]
  0094e	0f 29 85 d0 fa
	ff ff		 movaps	 XMMWORD PTR $T41[ebp], xmm0
  00955	0f 28 85 d0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T41[ebp]
  0095c	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR _C6$[ebp], xmm0
; Line 771
  00963	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00968	c1 e0 00	 shl	 eax, 0
  0096b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00970	c1 e1 00	 shl	 ecx, 0
  00973	0f 10 84 0d 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+ecx]
  0097b	0f c6 84 05 60
	ff ff ff 33	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 51 ; 00000033H
  00984	0f 29 85 c0 fa
	ff ff		 movaps	 XMMWORD PTR $T40[ebp], xmm0
  0098b	0f 28 85 c0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T40[ebp]
  00992	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 773
  00999	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  009a0	0f c6 85 00 fe
	ff ff 4a	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 74 ; 0000004aH
  009a8	0f 29 85 b0 fa
	ff ff		 movaps	 XMMWORD PTR $T39[ebp], xmm0
  009af	0f 28 85 b0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T39[ebp]
  009b6	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _V10$[ebp], xmm0
; Line 774
  009bd	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V10$[ebp]
  009c4	0f c6 85 e0 fe
	ff ff 2c	 shufps	 xmm0, XMMWORD PTR _V10$[ebp], 44 ; 0000002cH
  009cc	0f 29 85 a0 fa
	ff ff		 movaps	 XMMWORD PTR $T38[ebp], xmm0
  009d3	0f 28 85 a0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T38[ebp]
  009da	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _V10$[ebp], xmm0
; Line 775
  009e1	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  009e6	6b c2 00	 imul	 eax, edx, 0
  009e9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  009ee	6b d1 00	 imul	 edx, ecx, 0
  009f1	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  009f9	0f c6 84 05 60
	ff ff ff 8d	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 141 ; 0000008dH
  00a02	0f 29 85 90 fa
	ff ff		 movaps	 XMMWORD PTR $T37[ebp], xmm0
  00a09	0f 28 85 90 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T37[ebp]
  00a10	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 777
  00a17	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  00a1e	0f c6 85 00 fe
	ff ff 4c	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 76 ; 0000004cH
  00a26	0f 29 85 80 fa
	ff ff		 movaps	 XMMWORD PTR $T36[ebp], xmm0
  00a2d	0f 28 85 80 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T36[ebp]
  00a34	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 778
  00a3b	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V11$[ebp]
  00a42	0f c6 85 a0 fe
	ff ff 93	 shufps	 xmm0, XMMWORD PTR _V11$[ebp], 147 ; 00000093H
  00a4a	0f 29 85 70 fa
	ff ff		 movaps	 XMMWORD PTR $T35[ebp], xmm0
  00a51	0f 28 85 70 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T35[ebp]
  00a58	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 779
  00a5f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00a64	6b c8 03	 imul	 ecx, eax, 3
  00a67	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00a6c	6b c2 03	 imul	 eax, edx, 3
  00a6f	0f 10 84 05 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+eax]
  00a77	0f c6 84 0d 60
	ff ff ff 33	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 51 ; 00000033H
  00a80	0f 29 85 60 fa
	ff ff		 movaps	 XMMWORD PTR $T34[ebp], xmm0
  00a87	0f 28 85 60 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T34[ebp]
  00a8e	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 781
  00a95	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  00a9c	0f c6 85 00 fe
	ff ff ea	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 234 ; 000000eaH
  00aa4	0f 29 85 50 fa
	ff ff		 movaps	 XMMWORD PTR $T33[ebp], xmm0
  00aab	0f 28 85 50 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T33[ebp]
  00ab2	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _V12$[ebp], xmm0
; Line 782
  00ab9	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V12$[ebp]
  00ac0	0f c6 85 60 fe
	ff ff 2c	 shufps	 xmm0, XMMWORD PTR _V12$[ebp], 44 ; 0000002cH
  00ac8	0f 29 85 40 fa
	ff ff		 movaps	 XMMWORD PTR $T32[ebp], xmm0
  00acf	0f 28 85 40 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T32[ebp]
  00ad6	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _V12$[ebp], xmm0
; Line 783
  00add	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00ae2	d1 e1		 shl	 ecx, 1
  00ae4	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00ae9	d1 e2		 shl	 edx, 1
  00aeb	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  00af3	0f c6 84 0d 60
	ff ff ff 8d	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 141 ; 0000008dH
  00afc	0f 29 85 30 fa
	ff ff		 movaps	 XMMWORD PTR $T31[ebp], xmm0
  00b03	0f 28 85 30 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T31[ebp]
  00b0a	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _V03$[ebp], xmm0
; Line 785
  00b11	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  00b18	0f c6 85 00 fe
	ff ff ec	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 236 ; 000000ecH
  00b20	0f 29 85 20 fa
	ff ff		 movaps	 XMMWORD PTR $T30[ebp], xmm0
  00b27	0f 28 85 20 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T30[ebp]
  00b2e	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _V13$[ebp], xmm0
; Line 786
  00b35	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _V13$[ebp]
  00b3c	0f c6 85 d0 fc
	ff ff 93	 shufps	 xmm0, XMMWORD PTR _V13$[ebp], 147 ; 00000093H
  00b44	0f 29 85 10 fa
	ff ff		 movaps	 XMMWORD PTR $T29[ebp], xmm0
  00b4b	0f 28 85 10 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T29[ebp]
  00b52	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _V13$[ebp], xmm0
; Line 788
  00b59	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V00$[ebp]
  00b60	0f 59 85 e0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V10$[ebp]
  00b67	0f 29 85 00 fa
	ff ff		 movaps	 XMMWORD PTR $T28[ebp], xmm0
  00b6e	0f 28 85 00 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  00b75	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 789
  00b7c	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V01$[ebp]
  00b83	0f 59 85 a0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V11$[ebp]
  00b8a	0f 29 85 f0 f9
	ff ff		 movaps	 XMMWORD PTR $T27[ebp], xmm0
  00b91	0f 28 85 f0 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T27[ebp]
  00b98	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 790
  00b9f	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V02$[ebp]
  00ba6	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V12$[ebp]
  00bad	0f 29 85 e0 f9
	ff ff		 movaps	 XMMWORD PTR $T26[ebp], xmm0
  00bb4	0f 28 85 e0 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  00bbb	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 791
  00bc2	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _V03$[ebp]
  00bc9	0f 59 85 d0 fc
	ff ff		 mulps	 xmm0, XMMWORD PTR _V13$[ebp]
  00bd0	0f 29 85 d0 f9
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm0
  00bd7	0f 28 85 d0 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  00bde	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _V03$[ebp], xmm0
; Line 792
  00be5	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C0$[ebp]
  00bec	0f 5c 85 00 ff
	ff ff		 subps	 xmm0, XMMWORD PTR _V00$[ebp]
  00bf3	0f 29 85 b0 f9
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  00bfa	0f 28 85 b0 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  00c01	0f 29 85 c0 f9
	ff ff		 movaps	 XMMWORD PTR _C1$[ebp], xmm0
; Line 793
  00c08	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C0$[ebp]
  00c0f	0f 58 85 00 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _V00$[ebp]
  00c16	0f 29 85 a0 f9
	ff ff		 movaps	 XMMWORD PTR $T23[ebp], xmm0
  00c1d	0f 28 85 a0 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T23[ebp]
  00c24	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR _C0$[ebp], xmm0
; Line 794
  00c2b	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C2$[ebp]
  00c32	0f 58 85 c0 fe
	ff ff		 addps	 xmm0, XMMWORD PTR _V01$[ebp]
  00c39	0f 29 85 80 f9
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  00c40	0f 28 85 80 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  00c47	0f 29 85 90 f9
	ff ff		 movaps	 XMMWORD PTR _C3$[ebp], xmm0
; Line 795
  00c4e	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C2$[ebp]
  00c55	0f 5c 85 c0 fe
	ff ff		 subps	 xmm0, XMMWORD PTR _V01$[ebp]
  00c5c	0f 29 85 70 f9
	ff ff		 movaps	 XMMWORD PTR $T21[ebp], xmm0
  00c63	0f 28 85 70 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  00c6a	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR _C2$[ebp], xmm0
; Line 796
  00c71	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C4$[ebp]
  00c78	0f 5c 85 80 fe
	ff ff		 subps	 xmm0, XMMWORD PTR _V02$[ebp]
  00c7f	0f 29 85 50 f9
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  00c86	0f 28 85 50 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  00c8d	0f 29 85 60 f9
	ff ff		 movaps	 XMMWORD PTR _C5$[ebp], xmm0
; Line 797
  00c94	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C4$[ebp]
  00c9b	0f 58 85 80 fe
	ff ff		 addps	 xmm0, XMMWORD PTR _V02$[ebp]
  00ca2	0f 29 85 40 f9
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  00ca9	0f 28 85 40 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  00cb0	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR _C4$[ebp], xmm0
; Line 798
  00cb7	0f 28 85 00 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C6$[ebp]
  00cbe	0f 58 85 90 fc
	ff ff		 addps	 xmm0, XMMWORD PTR _V03$[ebp]
  00cc5	0f 29 85 20 f9
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  00ccc	0f 28 85 20 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  00cd3	0f 29 85 30 f9
	ff ff		 movaps	 XMMWORD PTR _C7$[ebp], xmm0
; Line 799
  00cda	0f 28 85 00 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C6$[ebp]
  00ce1	0f 5c 85 90 fc
	ff ff		 subps	 xmm0, XMMWORD PTR _V03$[ebp]
  00ce8	0f 29 85 10 f9
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00cef	0f 28 85 10 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  00cf6	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR _C6$[ebp], xmm0
; Line 801
  00cfd	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C0$[ebp]
  00d04	0f c6 85 c0 f9
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C1$[ebp], 216 ; 000000d8H
  00d0c	0f 29 85 00 f9
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  00d13	0f 28 85 00 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  00d1a	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR _C0$[ebp], xmm0
; Line 802
  00d21	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C2$[ebp]
  00d28	0f c6 85 90 f9
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C3$[ebp], 216 ; 000000d8H
  00d30	0f 29 85 f0 f8
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00d37	0f 28 85 f0 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  00d3e	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR _C2$[ebp], xmm0
; Line 803
  00d45	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C4$[ebp]
  00d4c	0f c6 85 60 f9
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C5$[ebp], 216 ; 000000d8H
  00d54	0f 29 85 e0 f8
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00d5b	0f 28 85 e0 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00d62	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR _C4$[ebp], xmm0
; Line 804
  00d69	0f 28 85 00 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C6$[ebp]
  00d70	0f c6 85 30 f9
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C7$[ebp], 216 ; 000000d8H
  00d78	0f 29 85 d0 f8
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00d7f	0f 28 85 d0 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  00d86	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR _C6$[ebp], xmm0
; Line 805
  00d8d	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C0$[ebp]
  00d94	0f c6 85 60 fc
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C0$[ebp], 216 ; 000000d8H
  00d9c	0f 29 85 c0 f8
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00da3	0f 28 85 c0 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  00daa	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR _C0$[ebp], xmm0
; Line 806
  00db1	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C2$[ebp]
  00db8	0f c6 85 40 fc
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C2$[ebp], 216 ; 000000d8H
  00dc0	0f 29 85 b0 f8
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00dc7	0f 28 85 b0 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  00dce	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR _C2$[ebp], xmm0
; Line 807
  00dd5	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C4$[ebp]
  00ddc	0f c6 85 20 fc
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C4$[ebp], 216 ; 000000d8H
  00de4	0f 29 85 a0 f8
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00deb	0f 28 85 a0 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  00df2	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR _C4$[ebp], xmm0
; Line 808
  00df9	0f 28 85 00 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C6$[ebp]
  00e00	0f c6 85 00 fc
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C6$[ebp], 216 ; 000000d8H
  00e08	0f 29 85 90 f8
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00e0f	0f 28 85 90 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00e16	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR _C6$[ebp], xmm0
; Line 810
  00e1d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00e22	6b c8 00	 imul	 ecx, eax, 0
  00e25	0f 10 8c 0d 60
	ff ff ff	 movups	 xmm1, XMMWORD PTR _MT$[ebp+ecx]
  00e2d	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C0$[ebp]
  00e34	e8 00 00 00 00	 call	 ?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector4Dot
  00e39	0f 29 85 70 f8
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00e40	0f 28 85 70 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00e47	0f 29 85 80 f8
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 811
  00e4e	83 7d f8 00	 cmp	 DWORD PTR _pDeterminant$[ebp], 0
  00e52	74 0d		 je	 SHORT $LN1@XMMatrixIn
; Line 812
  00e54	8b 55 f8	 mov	 edx, DWORD PTR _pDeterminant$[ebp]
  00e57	0f 10 85 80 f8
	ff ff		 movups	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00e5e	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
$LN1@XMMatrixIn:
; Line 813
  00e61	0f 28 85 80 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00e68	8d 85 60 f8 ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00e6e	50		 push	 eax
  00e6f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
  00e74	0f 29 85 60 f7
	ff ff		 movaps	 XMMWORD PTR tv806[ebp], xmm0
  00e7b	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00e80	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00e83	0f 28 8d 60 f7
	ff ff		 movaps	 xmm1, XMMWORD PTR tv806[ebp]
  00e8a	0f 5e c1	 divps	 xmm0, xmm1
  00e8d	0f 29 85 50 f8
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00e94	0f 28 85 50 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  00e9b	0f 29 85 80 f8
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 814
  00ea2	8d 8d 00 f8 ff
	ff		 lea	 ecx, DWORD PTR _mResult$[ebp]
  00ea8	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 815
  00ead	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C0$[ebp]
  00eb4	0f 59 85 80 f8
	ff ff		 mulps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00ebb	0f 29 85 e0 f7
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00ec2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00ec7	6b d1 00	 imul	 edx, ecx, 0
  00eca	0f 10 85 e0 f7
	ff ff		 movups	 xmm0, XMMWORD PTR $T5[ebp]
  00ed1	0f 11 84 15 00
	f8 ff ff	 movups	 XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 816
  00ed9	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C2$[ebp]
  00ee0	0f 59 85 80 f8
	ff ff		 mulps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00ee7	0f 29 85 d0 f7
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00eee	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00ef3	c1 e0 00	 shl	 eax, 0
  00ef6	0f 10 85 d0 f7
	ff ff		 movups	 xmm0, XMMWORD PTR $T4[ebp]
  00efd	0f 11 84 05 00
	f8 ff ff	 movups	 XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 817
  00f05	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C4$[ebp]
  00f0c	0f 59 85 80 f8
	ff ff		 mulps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00f13	0f 29 85 c0 f7
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00f1a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00f1f	d1 e1		 shl	 ecx, 1
  00f21	0f 10 85 c0 f7
	ff ff		 movups	 xmm0, XMMWORD PTR $T3[ebp]
  00f28	0f 11 84 0d 00
	f8 ff ff	 movups	 XMMWORD PTR _mResult$[ebp+ecx], xmm0
; Line 818
  00f30	0f 28 85 00 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C6$[ebp]
  00f37	0f 59 85 80 f8
	ff ff		 mulps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00f3e	0f 29 85 b0 f7
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00f45	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00f4a	6b c2 03	 imul	 eax, edx, 3
  00f4d	0f 10 85 b0 f7
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  00f54	0f 11 84 05 00
	f8 ff ff	 movups	 XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 819
  00f5c	0f 28 85 00 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR _mResult$[ebp]
  00f63	0f 28 8d 10 f8
	ff ff		 movaps	 xmm1, XMMWORD PTR _mResult$[ebp+16]
  00f6a	0f 28 95 20 f8
	ff ff		 movaps	 xmm2, XMMWORD PTR _mResult$[ebp+32]
  00f71	0f 28 9d 30 f8
	ff ff		 movaps	 xmm3, XMMWORD PTR _mResult$[ebp+48]
; Line 822
  00f78	52		 push	 edx
  00f79	8b cd		 mov	 ecx, ebp
  00f7b	50		 push	 eax
  00f7c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@XMMatrixIn
  00f82	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00f87	58		 pop	 eax
  00f88	5a		 pop	 edx
  00f89	5f		 pop	 edi
  00f8a	5e		 pop	 esi
  00f8b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00f8e	33 cd		 xor	 ecx, ebp
  00f90	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00f95	8b e5		 mov	 esp, ebp
  00f97	5d		 pop	 ebp
  00f98	8b e3		 mov	 esp, ebx
  00f9a	5b		 pop	 ebx
  00f9b	c3		 ret	 0
$LN8@XMMatrixIn:
  00f9c	03 00 00 00	 DD	 3
  00fa0	00 00 00 00	 DD	 $LN7@XMMatrixIn
$LN7@XMMatrixIn:
  00fa4	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00fa8	40 00 00 00	 DD	 64			; 00000040H
  00fac	00 00 00 00	 DD	 $LN4@XMMatrixIn
  00fb0	60 ff ff ff	 DD	 -160			; ffffff60H
  00fb4	40 00 00 00	 DD	 64			; 00000040H
  00fb8	00 00 00 00	 DD	 $LN5@XMMatrixIn
  00fbc	00 f8 ff ff	 DD	 -2048			; fffff800H
  00fc0	40 00 00 00	 DD	 64			; 00000040H
  00fc4	00 00 00 00	 DD	 $LN6@XMMatrixIn
$LN6@XMMatrixIn:
  00fc8	6d		 DB	 109			; 0000006dH
  00fc9	52		 DB	 82			; 00000052H
  00fca	65		 DB	 101			; 00000065H
  00fcb	73		 DB	 115			; 00000073H
  00fcc	75		 DB	 117			; 00000075H
  00fcd	6c		 DB	 108			; 0000006cH
  00fce	74		 DB	 116			; 00000074H
  00fcf	00		 DB	 0
$LN5@XMMatrixIn:
  00fd0	4d		 DB	 77			; 0000004dH
  00fd1	54		 DB	 84			; 00000054H
  00fd2	00		 DB	 0
$LN4@XMMatrixIn:
  00fd3	4d		 DB	 77			; 0000004dH
  00fd4	00		 DB	 0
?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ENDP ; DirectX::XMMatrixInverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z
_TEXT	SEGMENT
$T1 = -384						; size = 16
$T2 = -368						; size = 16
$T3 = -352						; size = 16
$T4 = -336						; size = 16
_mResult$ = -304					; size = 64
$T5 = -224						; size = 16
_vTemp4$ = -208						; size = 16
$T6 = -192						; size = 16
_vTemp2$ = -176						; size = 16
$T7 = -160						; size = 16
_vTemp3$ = -144						; size = 16
$T8 = -128						; size = 16
_vTemp1$ = -112						; size = 16
_M$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z PROC	; DirectX::XMMatrixTranspose, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 543
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 80 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-384]
  00024	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	0f 29 5d e0	 movaps	 XMMWORD PTR _M$[ebp+48], xmm3
  0003f	0f 29 55 d0	 movaps	 XMMWORD PTR _M$[ebp+32], xmm2
  00043	0f 29 4d c0	 movaps	 XMMWORD PTR _M$[ebp+16], xmm1
  00047	0f 29 45 b0	 movaps	 XMMWORD PTR _M$[ebp], xmm0
; Line 581
  0004b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00050	c1 e0 00	 shl	 eax, 0
  00053	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00058	6b d1 00	 imul	 edx, ecx, 0
  0005b	0f 10 44 15 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+edx]
  00060	0f c6 44 05 b0
	44		 shufps	 xmm0, XMMWORD PTR _M$[ebp+eax], 68 ; 00000044H
  00066	0f 29 45 80	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  0006a	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  0006e	0f 29 45 90	 movaps	 XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 583
  00072	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00077	c1 e0 00	 shl	 eax, 0
  0007a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0007f	6b d1 00	 imul	 edx, ecx, 0
  00082	0f 10 44 15 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+edx]
  00087	0f c6 44 05 b0
	ee		 shufps	 xmm0, XMMWORD PTR _M$[ebp+eax], 238 ; 000000eeH
  0008d	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00094	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0009b	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp3$[ebp], xmm0
; Line 585
  000a2	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000a7	6b c8 03	 imul	 ecx, eax, 3
  000aa	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000af	d1 e2		 shl	 edx, 1
  000b1	0f 10 44 15 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+edx]
  000b6	0f c6 44 0d b0
	44		 shufps	 xmm0, XMMWORD PTR _M$[ebp+ecx], 68 ; 00000044H
  000bc	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  000c3	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  000ca	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 587
  000d1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000d6	6b c8 03	 imul	 ecx, eax, 3
  000d9	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000de	d1 e2		 shl	 edx, 1
  000e0	0f 10 44 15 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+edx]
  000e5	0f c6 44 0d b0
	ee		 shufps	 xmm0, XMMWORD PTR _M$[ebp+ecx], 238 ; 000000eeH
  000eb	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  000f2	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  000f9	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp4$[ebp], xmm0
; Line 588
  00100	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _mResult$[ebp]
  00106	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 591
  0010b	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vTemp1$[ebp]
  0010f	0f c6 85 50 ff
	ff ff 88	 shufps	 xmm0, XMMWORD PTR _vTemp2$[ebp], 136 ; 00000088H
  00117	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0011e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00123	6b c8 00	 imul	 ecx, eax, 0
  00126	0f 10 85 b0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T4[ebp]
  0012d	0f 11 84 0d d0
	fe ff ff	 movups	 XMMWORD PTR _mResult$[ebp+ecx], xmm0
; Line 593
  00135	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vTemp1$[ebp]
  00139	0f c6 85 50 ff
	ff ff dd	 shufps	 xmm0, XMMWORD PTR _vTemp2$[ebp], 221 ; 000000ddH
  00141	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00148	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0014d	c1 e2 00	 shl	 edx, 0
  00150	0f 10 85 a0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T3[ebp]
  00157	0f 11 84 15 d0
	fe ff ff	 movups	 XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 595
  0015f	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vTemp3$[ebp]
  00166	0f c6 85 30 ff
	ff ff 88	 shufps	 xmm0, XMMWORD PTR _vTemp4$[ebp], 136 ; 00000088H
  0016e	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00175	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0017a	d1 e0		 shl	 eax, 1
  0017c	0f 10 85 90 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  00183	0f 11 84 05 d0
	fe ff ff	 movups	 XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 597
  0018b	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vTemp3$[ebp]
  00192	0f c6 85 30 ff
	ff ff dd	 shufps	 xmm0, XMMWORD PTR _vTemp4$[ebp], 221 ; 000000ddH
  0019a	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  001a1	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001a6	6b d1 03	 imul	 edx, ecx, 3
  001a9	0f 10 85 80 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  001b0	0f 11 84 15 d0
	fe ff ff	 movups	 XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 598
  001b8	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _mResult$[ebp]
  001bf	0f 28 8d e0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _mResult$[ebp+16]
  001c6	0f 28 95 f0 fe
	ff ff		 movaps	 xmm2, XMMWORD PTR _mResult$[ebp+32]
  001cd	0f 28 9d 00 ff
	ff ff		 movaps	 xmm3, XMMWORD PTR _mResult$[ebp+48]
; Line 601
  001d4	52		 push	 edx
  001d5	8b cd		 mov	 ecx, ebp
  001d7	50		 push	 eax
  001d8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@XMMatrixTr
  001de	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001e3	58		 pop	 eax
  001e4	5a		 pop	 edx
  001e5	5f		 pop	 edi
  001e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e9	33 cd		 xor	 ecx, ebp
  001eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f0	8b e5		 mov	 esp, ebp
  001f2	5d		 pop	 ebp
  001f3	8b e3		 mov	 esp, ebx
  001f5	5b		 pop	 ebx
  001f6	c3		 ret	 0
  001f7	90		 npad	 1
$LN6@XMMatrixTr:
  001f8	02 00 00 00	 DD	 2
  001fc	00 00 00 00	 DD	 $LN5@XMMatrixTr
$LN5@XMMatrixTr:
  00200	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00204	40 00 00 00	 DD	 64			; 00000040H
  00208	00 00 00 00	 DD	 $LN3@XMMatrixTr
  0020c	d0 fe ff ff	 DD	 -304			; fffffed0H
  00210	40 00 00 00	 DD	 64			; 00000040H
  00214	00 00 00 00	 DD	 $LN4@XMMatrixTr
$LN4@XMMatrixTr:
  00218	6d		 DB	 109			; 0000006dH
  00219	52		 DB	 82			; 00000052H
  0021a	65		 DB	 101			; 00000065H
  0021b	73		 DB	 115			; 00000073H
  0021c	75		 DB	 117			; 00000075H
  0021d	6c		 DB	 108			; 0000006cH
  0021e	74		 DB	 116			; 00000074H
  0021f	00		 DB	 0
$LN3@XMMatrixTr:
  00220	4d		 DB	 77			; 0000004dH
  00221	00		 DB	 0
?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z ENDP	; DirectX::XMMatrixTranspose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z
_TEXT	SEGMENT
$T1 = -944						; size = 16
$T2 = -928						; size = 16
$T3 = -912						; size = 16
$T4 = -896						; size = 16
$T5 = -880						; size = 16
$T6 = -864						; size = 16
$T7 = -848						; size = 16
$T8 = -832						; size = 16
$T9 = -816						; size = 16
$T10 = -800						; size = 16
$T11 = -784						; size = 16
$T12 = -768						; size = 16
$T13 = -752						; size = 16
$T14 = -736						; size = 16
$T15 = -720						; size = 16
$T16 = -704						; size = 16
$T17 = -688						; size = 16
$T18 = -672						; size = 16
$T19 = -656						; size = 16
$T20 = -640						; size = 16
$T21 = -624						; size = 16
$T22 = -608						; size = 16
$T23 = -592						; size = 16
$T24 = -576						; size = 16
$T25 = -560						; size = 16
$T26 = -544						; size = 16
$T27 = -528						; size = 16
$T28 = -512						; size = 16
$T29 = -496						; size = 16
$T30 = -480						; size = 16
$T31 = -464						; size = 16
$T32 = -448						; size = 16
$T33 = -432						; size = 16
$T34 = -416						; size = 16
$T35 = -400						; size = 16
$T36 = -384						; size = 16
$T37 = -368						; size = 16
$T38 = -352						; size = 16
$T39 = -336						; size = 16
$T40 = -320						; size = 16
$T41 = -304						; size = 16
$T42 = -288						; size = 16
_vZ$ = -272						; size = 16
$T43 = -256						; size = 16
_vY$ = -240						; size = 16
$T44 = -224						; size = 16
_vX$ = -208						; size = 16
_vW$ = -192						; size = 16
_mResult$ = -160					; size = 64
_M2$ = -88						; size = 4
_M1$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z PROC ; DirectX::XMMatrixMultiply, COMDAT
; _M2$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 228
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b0 03 00
	00		 sub	 esp, 944		; 000003b0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 50 fc ff
	ff		 lea	 edi, DWORD PTR [ebp-944]
  00024	b9 ec 00 00 00	 mov	 ecx, 236		; 000000ecH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	89 4d a8	 mov	 DWORD PTR _M2$[ebp], ecx
  0003e	0f 29 5d e0	 movaps	 XMMWORD PTR _M1$[ebp+48], xmm3
  00042	0f 29 55 d0	 movaps	 XMMWORD PTR _M1$[ebp+32], xmm2
  00046	0f 29 4d c0	 movaps	 XMMWORD PTR _M1$[ebp+16], xmm1
  0004a	0f 29 45 b0	 movaps	 XMMWORD PTR _M1$[ebp], xmm0
; Line 301
  0004e	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _mResult$[ebp]
  00054	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 303
  00059	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0005e	6b c8 00	 imul	 ecx, eax, 0
  00061	0f 10 44 0d b0	 movups	 xmm0, XMMWORD PTR _M1$[ebp+ecx]
  00066	0f 11 85 40 ff
	ff ff		 movups	 XMMWORD PTR _vW$[ebp], xmm0
; Line 305
  0006d	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00074	0f c6 85 40 ff
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 0
  0007c	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T44[ebp], xmm0
  00083	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T44[ebp]
  0008a	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 306
  00091	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00098	0f c6 85 40 ff
	ff ff 55	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 85 ; 00000055H
  000a0	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T43[ebp], xmm0
  000a7	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T43[ebp]
  000ae	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 307
  000b5	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  000bc	0f c6 85 40 ff
	ff ff aa	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 170 ; 000000aaH
  000c4	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T42[ebp], xmm0
  000cb	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T42[ebp]
  000d2	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 308
  000d9	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  000e0	0f c6 85 40 ff
	ff ff ff	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 255 ; 000000ffH
  000e8	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T41[ebp], xmm0
  000ef	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T41[ebp]
  000f6	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 310
  000fd	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00102	6b c2 00	 imul	 eax, edx, 0
  00105	03 45 a8	 add	 eax, DWORD PTR _M2$[ebp]
  00108	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  0010f	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  00112	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T40[ebp], xmm0
  00119	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T40[ebp]
  00120	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 311
  00127	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0012c	c1 e1 00	 shl	 ecx, 0
  0012f	03 4d a8	 add	 ecx, DWORD PTR _M2$[ebp]
  00132	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  00139	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  0013c	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T39[ebp], xmm0
  00143	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T39[ebp]
  0014a	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 312
  00151	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00156	d1 e2		 shl	 edx, 1
  00158	03 55 a8	 add	 edx, DWORD PTR _M2$[ebp]
  0015b	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vZ$[ebp]
  00162	0f 59 02	 mulps	 xmm0, XMMWORD PTR [edx]
  00165	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T38[ebp], xmm0
  0016c	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T38[ebp]
  00173	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 313
  0017a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0017f	6b c8 03	 imul	 ecx, eax, 3
  00182	03 4d a8	 add	 ecx, DWORD PTR _M2$[ebp]
  00185	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  0018c	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  0018f	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T37[ebp], xmm0
  00196	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T37[ebp]
  0019d	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 315
  001a4	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  001ab	0f 58 85 f0 fe
	ff ff		 addps	 xmm0, XMMWORD PTR _vZ$[ebp]
  001b2	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T36[ebp], xmm0
  001b9	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T36[ebp]
  001c0	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 316
  001c7	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  001ce	0f 58 85 40 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vW$[ebp]
  001d5	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T35[ebp], xmm0
  001dc	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T35[ebp]
  001e3	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 317
  001ea	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  001f1	0f 58 85 10 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vY$[ebp]
  001f8	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T34[ebp], xmm0
  001ff	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T34[ebp]
  00206	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 318
  0020d	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00212	6b c2 00	 imul	 eax, edx, 0
  00215	0f 10 85 30 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _vX$[ebp]
  0021c	0f 11 84 05 60
	ff ff ff	 movups	 XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 320
  00224	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00229	c1 e1 00	 shl	 ecx, 0
  0022c	0f 10 44 0d b0	 movups	 xmm0, XMMWORD PTR _M1$[ebp+ecx]
  00231	0f 11 85 40 ff
	ff ff		 movups	 XMMWORD PTR _vW$[ebp], xmm0
; Line 321
  00238	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  0023f	0f c6 85 40 ff
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 0
  00247	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T33[ebp], xmm0
  0024e	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T33[ebp]
  00255	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 322
  0025c	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00263	0f c6 85 40 ff
	ff ff 55	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 85 ; 00000055H
  0026b	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T32[ebp], xmm0
  00272	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T32[ebp]
  00279	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 323
  00280	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00287	0f c6 85 40 ff
	ff ff aa	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 170 ; 000000aaH
  0028f	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T31[ebp], xmm0
  00296	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T31[ebp]
  0029d	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 324
  002a4	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  002ab	0f c6 85 40 ff
	ff ff ff	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 255 ; 000000ffH
  002b3	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T30[ebp], xmm0
  002ba	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T30[ebp]
  002c1	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 325
  002c8	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002cd	6b c2 00	 imul	 eax, edx, 0
  002d0	03 45 a8	 add	 eax, DWORD PTR _M2$[ebp]
  002d3	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  002da	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  002dd	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T29[ebp], xmm0
  002e4	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T29[ebp]
  002eb	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 326
  002f2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002f7	c1 e1 00	 shl	 ecx, 0
  002fa	03 4d a8	 add	 ecx, DWORD PTR _M2$[ebp]
  002fd	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  00304	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  00307	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T28[ebp], xmm0
  0030e	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  00315	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 327
  0031c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00321	d1 e2		 shl	 edx, 1
  00323	03 55 a8	 add	 edx, DWORD PTR _M2$[ebp]
  00326	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vZ$[ebp]
  0032d	0f 59 02	 mulps	 xmm0, XMMWORD PTR [edx]
  00330	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T27[ebp], xmm0
  00337	0f 28 85 f0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T27[ebp]
  0033e	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 328
  00345	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0034a	6b c8 03	 imul	 ecx, eax, 3
  0034d	03 4d a8	 add	 ecx, DWORD PTR _M2$[ebp]
  00350	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00357	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  0035a	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T26[ebp], xmm0
  00361	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  00368	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 329
  0036f	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  00376	0f 58 85 f0 fe
	ff ff		 addps	 xmm0, XMMWORD PTR _vZ$[ebp]
  0037d	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm0
  00384	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  0038b	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 330
  00392	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  00399	0f 58 85 40 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vW$[ebp]
  003a0	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  003a7	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  003ae	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 331
  003b5	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  003bc	0f 58 85 10 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vY$[ebp]
  003c3	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T23[ebp], xmm0
  003ca	0f 28 85 b0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T23[ebp]
  003d1	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 332
  003d8	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  003dd	c1 e2 00	 shl	 edx, 0
  003e0	0f 10 85 30 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _vX$[ebp]
  003e7	0f 11 84 15 60
	ff ff ff	 movups	 XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 333
  003ef	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  003f4	d1 e0		 shl	 eax, 1
  003f6	0f 10 44 05 b0	 movups	 xmm0, XMMWORD PTR _M1$[ebp+eax]
  003fb	0f 11 85 40 ff
	ff ff		 movups	 XMMWORD PTR _vW$[ebp], xmm0
; Line 334
  00402	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00409	0f c6 85 40 ff
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 0
  00411	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  00418	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  0041f	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 335
  00426	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  0042d	0f c6 85 40 ff
	ff ff 55	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 85 ; 00000055H
  00435	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T21[ebp], xmm0
  0043c	0f 28 85 90 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  00443	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 336
  0044a	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00451	0f c6 85 40 ff
	ff ff aa	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 170 ; 000000aaH
  00459	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  00460	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  00467	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 337
  0046e	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00475	0f c6 85 40 ff
	ff ff ff	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 255 ; 000000ffH
  0047d	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  00484	0f 28 85 70 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  0048b	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 338
  00492	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00497	6b d1 00	 imul	 edx, ecx, 0
  0049a	03 55 a8	 add	 edx, DWORD PTR _M2$[ebp]
  0049d	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  004a4	0f 59 02	 mulps	 xmm0, XMMWORD PTR [edx]
  004a7	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  004ae	0f 28 85 60 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  004b5	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 339
  004bc	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004c1	c1 e0 00	 shl	 eax, 0
  004c4	03 45 a8	 add	 eax, DWORD PTR _M2$[ebp]
  004c7	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  004ce	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  004d1	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  004d8	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  004df	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 340
  004e6	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  004eb	d1 e1		 shl	 ecx, 1
  004ed	03 4d a8	 add	 ecx, DWORD PTR _M2$[ebp]
  004f0	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vZ$[ebp]
  004f7	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  004fa	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  00501	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  00508	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 341
  0050f	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00514	6b c2 03	 imul	 eax, edx, 3
  00517	03 45 a8	 add	 eax, DWORD PTR _M2$[ebp]
  0051a	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00521	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  00524	0f 29 85 30 fd
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  0052b	0f 28 85 30 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  00532	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 342
  00539	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  00540	0f 58 85 f0 fe
	ff ff		 addps	 xmm0, XMMWORD PTR _vZ$[ebp]
  00547	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  0054e	0f 28 85 20 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00555	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 343
  0055c	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  00563	0f 58 85 40 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vW$[ebp]
  0056a	0f 29 85 10 fd
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00571	0f 28 85 10 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  00578	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 344
  0057f	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  00586	0f 58 85 10 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vY$[ebp]
  0058d	0f 29 85 00 fd
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00594	0f 28 85 00 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  0059b	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 345
  005a2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  005a7	d1 e1		 shl	 ecx, 1
  005a9	0f 10 85 30 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _vX$[ebp]
  005b0	0f 11 84 0d 60
	ff ff ff	 movups	 XMMWORD PTR _mResult$[ebp+ecx], xmm0
; Line 346
  005b8	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  005bd	6b c2 03	 imul	 eax, edx, 3
  005c0	0f 10 44 05 b0	 movups	 xmm0, XMMWORD PTR _M1$[ebp+eax]
  005c5	0f 11 85 40 ff
	ff ff		 movups	 XMMWORD PTR _vW$[ebp], xmm0
; Line 347
  005cc	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  005d3	0f c6 85 40 ff
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 0
  005db	0f 29 85 f0 fc
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  005e2	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  005e9	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 348
  005f0	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  005f7	0f c6 85 40 ff
	ff ff 55	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 85 ; 00000055H
  005ff	0f 29 85 e0 fc
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00606	0f 28 85 e0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  0060d	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 349
  00614	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  0061b	0f c6 85 40 ff
	ff ff aa	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 170 ; 000000aaH
  00623	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  0062a	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00631	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 350
  00638	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  0063f	0f c6 85 40 ff
	ff ff ff	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 255 ; 000000ffH
  00647	0f 29 85 c0 fc
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  0064e	0f 28 85 c0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00655	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 351
  0065c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00661	6b d1 00	 imul	 edx, ecx, 0
  00664	03 55 a8	 add	 edx, DWORD PTR _M2$[ebp]
  00667	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  0066e	0f 59 02	 mulps	 xmm0, XMMWORD PTR [edx]
  00671	0f 29 85 b0 fc
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00678	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0067f	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 352
  00686	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0068b	c1 e0 00	 shl	 eax, 0
  0068e	03 45 a8	 add	 eax, DWORD PTR _M2$[ebp]
  00691	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  00698	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  0069b	0f 29 85 a0 fc
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  006a2	0f 28 85 a0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  006a9	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 353
  006b0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  006b5	d1 e1		 shl	 ecx, 1
  006b7	03 4d a8	 add	 ecx, DWORD PTR _M2$[ebp]
  006ba	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vZ$[ebp]
  006c1	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  006c4	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  006cb	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  006d2	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 354
  006d9	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  006de	6b c2 03	 imul	 eax, edx, 3
  006e1	03 45 a8	 add	 eax, DWORD PTR _M2$[ebp]
  006e4	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  006eb	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  006ee	0f 29 85 80 fc
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  006f5	0f 28 85 80 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  006fc	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 355
  00703	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  0070a	0f 58 85 f0 fe
	ff ff		 addps	 xmm0, XMMWORD PTR _vZ$[ebp]
  00711	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00718	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0071f	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 356
  00726	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  0072d	0f 58 85 40 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vW$[ebp]
  00734	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0073b	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00742	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 357
  00749	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  00750	0f 58 85 10 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vY$[ebp]
  00757	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0075e	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00765	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 358
  0076c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00771	6b d1 03	 imul	 edx, ecx, 3
  00774	0f 10 85 30 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _vX$[ebp]
  0077b	0f 11 84 15 60
	ff ff ff	 movups	 XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 359
  00783	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _mResult$[ebp]
  0078a	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mResult$[ebp+16]
  00791	0f 28 55 80	 movaps	 xmm2, XMMWORD PTR _mResult$[ebp+32]
  00795	0f 28 5d 90	 movaps	 xmm3, XMMWORD PTR _mResult$[ebp+48]
; Line 362
  00799	52		 push	 edx
  0079a	8b cd		 mov	 ecx, ebp
  0079c	50		 push	 eax
  0079d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@XMMatrixMu
  007a3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  007a8	58		 pop	 eax
  007a9	5a		 pop	 edx
  007aa	5f		 pop	 edi
  007ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007ae	33 cd		 xor	 ecx, ebp
  007b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007b5	8b e5		 mov	 esp, ebp
  007b7	5d		 pop	 ebp
  007b8	8b e3		 mov	 esp, ebx
  007ba	5b		 pop	 ebx
  007bb	c3		 ret	 0
$LN6@XMMatrixMu:
  007bc	02 00 00 00	 DD	 2
  007c0	00 00 00 00	 DD	 $LN5@XMMatrixMu
$LN5@XMMatrixMu:
  007c4	b0 ff ff ff	 DD	 -80			; ffffffb0H
  007c8	40 00 00 00	 DD	 64			; 00000040H
  007cc	00 00 00 00	 DD	 $LN3@XMMatrixMu
  007d0	60 ff ff ff	 DD	 -160			; ffffff60H
  007d4	40 00 00 00	 DD	 64			; 00000040H
  007d8	00 00 00 00	 DD	 $LN4@XMMatrixMu
$LN4@XMMatrixMu:
  007dc	6d		 DB	 109			; 0000006dH
  007dd	52		 DB	 82			; 00000052H
  007de	65		 DB	 101			; 00000065H
  007df	73		 DB	 115			; 00000073H
  007e0	75		 DB	 117			; 00000075H
  007e1	6c		 DB	 108			; 0000006cH
  007e2	74		 DB	 116			; 00000074H
  007e3	00		 DB	 0
$LN3@XMMatrixMu:
  007e4	4d		 DB	 77			; 0000004dH
  007e5	31		 DB	 49			; 00000031H
  007e6	00		 DB	 0
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ENDP ; DirectX::XMMatrixMultiply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector4Length@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -176						; size = 16
$T2 = -160						; size = 16
$T3 = -144						; size = 16
$T4 = -128						; size = 16
$T5 = -112						; size = 16
$T6 = -96						; size = 16
$T7 = -80						; size = 16
_vTemp$ = -64						; size = 16
$T8 = -48						; size = 16
_vLengthSq$ = -32					; size = 16
_V$ = -16						; size = 16
?XMVector4Length@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVector4Length, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 13295
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-176]
  00024	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 13328
  00035	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00039	0f 59 45 f0	 mulps	 xmm0, XMMWORD PTR _V$[ebp]
  0003d	0f 29 45 d0	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00041	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00045	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13330
  00049	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  0004d	0f c6 45 e0 ee	 shufps	 xmm0, XMMWORD PTR _vLengthSq$[ebp], 238 ; 000000eeH
  00052	0f 29 45 b0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00056	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0005a	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 13332
  0005e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  00062	0f 58 45 c0	 addps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00066	0f 29 45 a0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0006a	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0006e	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13334
  00072	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  00076	0f c6 45 e0 40	 shufps	 xmm0, XMMWORD PTR _vLengthSq$[ebp], 64 ; 00000040H
  0007b	0f 29 45 90	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0007f	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00083	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13336
  00087	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0008b	0f c6 45 e0 f0	 shufps	 xmm0, XMMWORD PTR _vLengthSq$[ebp], 240 ; 000000f0H
  00090	0f 29 45 80	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00094	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00098	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 13338
  0009c	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  000a0	0f 58 45 c0	 addps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  000a4	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  000ab	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  000b2	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13340
  000b6	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  000ba	0f c6 45 e0 aa	 shufps	 xmm0, XMMWORD PTR _vLengthSq$[ebp], 170 ; 000000aaH
  000bf	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000c6	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000cd	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13342
  000d1	0f 51 45 e0	 sqrtps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  000d5	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000dc	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  000e3	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13343
  000e7	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
; Line 13346
  000eb	5f		 pop	 edi
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	8b e3		 mov	 esp, ebx
  000f1	5b		 pop	 ebx
  000f2	c3		 ret	 0
?XMVector4Length@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVector4Length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
$T3 = -128						; size = 16
$T4 = -112						; size = 16
$T5 = -96						; size = 16
$T6 = -80						; size = 16
_vTemp$ = -64						; size = 16
_vTemp2$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z PROC		; DirectX::XMVector4Dot, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 12940
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-160]
  00024	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  00035	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 12959
  00039	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V2$[ebp]
  0003d	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 12960
  00041	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00045	0f 59 45 d0	 mulps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  00049	0f 29 45 b0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0004d	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  00051	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12961
  00055	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  00059	0f c6 45 c0 40	 shufps	 xmm0, XMMWORD PTR _vTemp$[ebp], 64 ; 00000040H
  0005e	0f 29 45 a0	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00062	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00066	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 12962
  0006a	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  0006e	0f 58 45 c0	 addps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00072	0f 29 45 90	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00076	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  0007a	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 12963
  0007e	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00082	0f c6 45 d0 30	 shufps	 xmm0, XMMWORD PTR _vTemp2$[ebp], 48 ; 00000030H
  00087	0f 29 45 80	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0008b	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0008f	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12964
  00093	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00097	0f 58 45 d0	 addps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  0009b	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000a2	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000a9	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12965
  000ad	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  000b1	0f c6 45 c0 aa	 shufps	 xmm0, XMMWORD PTR _vTemp$[ebp], 170 ; 000000aaH
  000b6	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000bd	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 12968
  000c4	5f		 pop	 edi
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	8b e3		 mov	 esp, ebx
  000ca	5b		 pop	 ebx
  000cb	c3		 ret	 0
?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z ENDP		; DirectX::XMVector4Dot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector4LessOrEqual@DirectX@@YQ_NT__m128@@0@Z
_TEXT	SEGMENT
tv72 = -72						; size = 4
tv70 = -68						; size = 4
$T1 = -64						; size = 16
_vTemp$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector4LessOrEqual@DirectX@@YQ_NT__m128@@0@Z PROC	; DirectX::XMVector4LessOrEqual, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 12808
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 50	 sub	 esp, 80			; 00000050H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0001e	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 12817
  00033	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00037	0f c2 45 e0 02	 cmpleps xmm0, XMMWORD PTR _V2$[ebp]
  0003c	0f 29 45 c0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00040	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00044	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12818
  00048	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0004c	0f 50 c0	 movmskps eax, xmm0
  0004f	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00052	75 09		 jne	 SHORT $LN3@XMVector4L
  00054	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  0005b	eb 07		 jmp	 SHORT $LN4@XMVector4L
$LN3@XMVector4L:
  0005d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@XMVector4L:
  00064	83 7d bc 00	 cmp	 DWORD PTR tv70[ebp], 0
  00068	74 09		 je	 SHORT $LN5@XMVector4L
  0006a	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
  00071	eb 07		 jmp	 SHORT $LN6@XMVector4L
$LN5@XMVector4L:
  00073	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN6@XMVector4L:
  0007a	8a 45 b8	 mov	 al, BYTE PTR tv72[ebp]
; Line 12822
  0007d	5f		 pop	 edi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	8b e3		 mov	 esp, ebx
  00083	5b		 pop	 ebx
  00084	c3		 ret	 0
?XMVector4LessOrEqual@DirectX@@YQ_NT__m128@@0@Z ENDP	; DirectX::XMVector4LessOrEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3TransformNormal@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z
_TEXT	SEGMENT
$T1 = -288						; size = 16
$T2 = -272						; size = 16
$T3 = -256						; size = 16
$T4 = -240						; size = 16
$T5 = -224						; size = 16
$T6 = -208						; size = 16
_vTemp$ = -192						; size = 16
$T7 = -176						; size = 16
$T8 = -160						; size = 16
_vResult$ = -144					; size = 16
_M$ = -112						; size = 64
_V$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
?XMVector3TransformNormal@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z PROC ; DirectX::XMVector3TransformNormal, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 10809
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd e0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-288]
  00024	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	0f 29 65 c0	 movaps	 XMMWORD PTR _M$[ebp+48], xmm4
  0003f	0f 29 5d b0	 movaps	 XMMWORD PTR _M$[ebp+32], xmm3
  00043	0f 29 55 a0	 movaps	 XMMWORD PTR _M$[ebp+16], xmm2
  00047	0f 29 4d 90	 movaps	 XMMWORD PTR _M$[ebp], xmm1
  0004b	0f 29 45 e0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 10828
  0004f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00053	0f c6 45 e0 00	 shufps	 xmm0, XMMWORD PTR _V$[ebp], 0
  00058	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  0005f	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00066	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 10829
  0006d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00072	6b c8 00	 imul	 ecx, eax, 0
  00075	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  0007c	0f 59 44 0d 90	 mulps	 xmm0, XMMWORD PTR _M$[ebp+ecx]
  00081	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00088	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0008f	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 10830
  00096	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0009a	0f c6 45 e0 55	 shufps	 xmm0, XMMWORD PTR _V$[ebp], 85 ; 00000055H
  0009f	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  000a6	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  000ad	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 10831
  000b4	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000b9	c1 e2 00	 shl	 edx, 0
  000bc	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  000c3	0f 59 44 15 90	 mulps	 xmm0, XMMWORD PTR _M$[ebp+edx]
  000c8	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  000cf	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  000d6	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 10832
  000dd	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  000e4	0f 58 85 40 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  000eb	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  000f2	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  000f9	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 10833
  00100	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00104	0f c6 45 e0 aa	 shufps	 xmm0, XMMWORD PTR _V$[ebp], 170 ; 000000aaH
  00109	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00110	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00117	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 10834
  0011e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00123	d1 e0		 shl	 eax, 1
  00125	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0012c	0f 59 44 05 90	 mulps	 xmm0, XMMWORD PTR _M$[ebp+eax]
  00131	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00138	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0013f	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 10835
  00146	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  0014d	0f 58 85 40 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00154	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0015b	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00162	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 10836
  00169	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
; Line 10839
  00170	52		 push	 edx
  00171	8b cd		 mov	 ecx, ebp
  00173	50		 push	 eax
  00174	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@XMVector3T
  0017a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0017f	58		 pop	 eax
  00180	5a		 pop	 edx
  00181	5f		 pop	 edi
  00182	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00185	33 cd		 xor	 ecx, ebp
  00187	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018c	8b e5		 mov	 esp, ebp
  0018e	5d		 pop	 ebp
  0018f	8b e3		 mov	 esp, ebx
  00191	5b		 pop	 ebx
  00192	c3		 ret	 0
  00193	90		 npad	 1
$LN5@XMVector3T:
  00194	01 00 00 00	 DD	 1
  00198	00 00 00 00	 DD	 $LN4@XMVector3T
$LN4@XMVector3T:
  0019c	90 ff ff ff	 DD	 -112			; ffffff90H
  001a0	40 00 00 00	 DD	 64			; 00000040H
  001a4	00 00 00 00	 DD	 $LN3@XMVector3T
$LN3@XMVector3T:
  001a8	4d		 DB	 77			; 0000004dH
  001a9	00		 DB	 0
?XMVector3TransformNormal@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ENDP ; DirectX::XMVector3TransformNormal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z
_TEXT	SEGMENT
$T1 = -336						; size = 16
$T2 = -320						; size = 16
_W$ = -304						; size = 16
$T3 = -288						; size = 16
$T4 = -272						; size = 16
$T5 = -256						; size = 16
_Result$ = -240						; size = 16
$T6 = -224						; size = 16
_X$ = -208						; size = 16
$T7 = -192						; size = 16
_Y$ = -176						; size = 16
$T8 = -160						; size = 16
_Z$ = -144						; size = 16
_M$ = -112						; size = 64
_V$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z PROC ; DirectX::XMVector3TransformCoord, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 10318
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd b0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-336]
  00024	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	0f 29 65 c0	 movaps	 XMMWORD PTR _M$[ebp+48], xmm4
  0003f	0f 29 5d b0	 movaps	 XMMWORD PTR _M$[ebp+32], xmm3
  00043	0f 29 55 a0	 movaps	 XMMWORD PTR _M$[ebp+16], xmm2
  00047	0f 29 4d 90	 movaps	 XMMWORD PTR _M$[ebp], xmm1
  0004b	0f 29 45 e0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 10321
  0004f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00053	e8 00 00 00 00	 call	 ?XMVectorSplatZ@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorSplatZ
  00058	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  0005f	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00066	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _Z$[ebp], xmm0
; Line 10322
  0006d	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00071	e8 00 00 00 00	 call	 ?XMVectorSplatY@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorSplatY
  00076	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0007d	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00084	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _Y$[ebp], xmm0
; Line 10323
  0008b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0008f	e8 00 00 00 00	 call	 ?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorSplatX
  00094	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0009b	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  000a2	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _X$[ebp], xmm0
; Line 10325
  000a9	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ae	6b c8 03	 imul	 ecx, eax, 3
  000b1	0f 10 54 0d 90	 movups	 xmm2, XMMWORD PTR _M$[ebp+ecx]
  000b6	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000bb	d1 e2		 shl	 edx, 1
  000bd	0f 10 4c 15 90	 movups	 xmm1, XMMWORD PTR _M$[ebp+edx]
  000c2	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _Z$[ebp]
  000c9	e8 00 00 00 00	 call	 ?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorMultiplyAdd
  000ce	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  000d5	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  000dc	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 10326
  000e3	0f 28 95 10 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _Result$[ebp]
  000ea	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ef	c1 e0 00	 shl	 eax, 0
  000f2	0f 10 4c 05 90	 movups	 xmm1, XMMWORD PTR _M$[ebp+eax]
  000f7	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _Y$[ebp]
  000fe	e8 00 00 00 00	 call	 ?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorMultiplyAdd
  00103	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0010a	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00111	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 10327
  00118	0f 28 95 10 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _Result$[ebp]
  0011f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00124	6b d1 00	 imul	 edx, ecx, 0
  00127	0f 10 4c 15 90	 movups	 xmm1, XMMWORD PTR _M$[ebp+edx]
  0012c	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _X$[ebp]
  00133	e8 00 00 00 00	 call	 ?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorMultiplyAdd
  00138	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0013f	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00146	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 10329
  0014d	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  00154	e8 00 00 00 00	 call	 ?XMVectorSplatW@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorSplatW
  00159	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00160	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00167	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR _W$[ebp], xmm0
; Line 10330
  0016e	0f 28 8d d0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _W$[ebp]
  00175	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  0017c	e8 00 00 00 00	 call	 ?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorDivide
  00181	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00188	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 10334
  0018f	52		 push	 edx
  00190	8b cd		 mov	 ecx, ebp
  00192	50		 push	 eax
  00193	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@XMVector3T
  00199	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0019e	58		 pop	 eax
  0019f	5a		 pop	 edx
  001a0	5f		 pop	 edi
  001a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001a4	33 cd		 xor	 ecx, ebp
  001a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ab	8b e5		 mov	 esp, ebp
  001ad	5d		 pop	 ebp
  001ae	8b e3		 mov	 esp, ebx
  001b0	5b		 pop	 ebx
  001b1	c3		 ret	 0
  001b2	8b ff		 npad	 2
$LN5@XMVector3T:
  001b4	01 00 00 00	 DD	 1
  001b8	00 00 00 00	 DD	 $LN4@XMVector3T
$LN4@XMVector3T:
  001bc	90 ff ff ff	 DD	 -112			; ffffff90H
  001c0	40 00 00 00	 DD	 64			; 00000040H
  001c4	00 00 00 00	 DD	 $LN3@XMVector3T
$LN3@XMVector3T:
  001c8	4d		 DB	 77			; 0000004dH
  001c9	00		 DB	 0
?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ENDP ; DirectX::XMVector3TransformCoord
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -384						; size = 16
$T2 = -368						; size = 16
_vTemp2$ = -352						; size = 16
$T3 = -336						; size = 16
$T4 = -320						; size = 16
_vTemp1$ = -304						; size = 16
$T5 = -288						; size = 16
$T6 = -272						; size = 16
$T7 = -256						; size = 16
$T8 = -240						; size = 16
$T9 = -224						; size = 16
$T10 = -208						; size = 16
_vZeroMask$ = -192					; size = 16
$T11 = -176						; size = 16
_vResult$ = -160					; size = 16
$T12 = -144						; size = 16
$T13 = -128						; size = 16
$T14 = -112						; size = 16
$T15 = -96						; size = 16
$T16 = -80						; size = 16
_vTemp$ = -64						; size = 16
$T17 = -48						; size = 16
_vLengthSq$ = -32					; size = 16
_V$ = -16						; size = 16
?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVector3Normalize, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 9459
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 80 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-384]
  00024	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 9502
  00035	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00039	0f 59 45 f0	 mulps	 xmm0, XMMWORD PTR _V$[ebp]
  0003d	0f 29 45 d0	 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00041	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  00045	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9503
  00049	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  0004d	0f c6 45 e0 99	 shufps	 xmm0, XMMWORD PTR _vLengthSq$[ebp], 153 ; 00000099H
  00052	0f 29 45 b0	 movaps	 XMMWORD PTR $T16[ebp], xmm0
  00056	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  0005a	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9504
  0005e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  00062	f3 0f 58 45 c0	 addss	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00067	0f 29 45 a0	 movaps	 XMMWORD PTR $T15[ebp], xmm0
  0006b	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  0006f	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9505
  00073	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00077	0f c6 45 c0 55	 shufps	 xmm0, XMMWORD PTR _vTemp$[ebp], 85 ; 00000055H
  0007c	0f 29 45 90	 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00080	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00084	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9506
  00088	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  0008c	f3 0f 58 45 c0	 addss	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00091	0f 29 45 80	 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00095	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  00099	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9507
  0009d	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  000a1	0f c6 45 e0 00	 shufps	 xmm0, XMMWORD PTR _vLengthSq$[ebp], 0
  000a6	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  000ad	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  000b4	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9509
  000b8	0f 51 45 e0	 sqrtps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  000bc	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  000c3	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  000ca	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 9511
  000d1	0f 57 c0	 xorps	 xmm0, xmm0
  000d4	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  000db	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  000e2	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vZeroMask$[ebp], xmm0
; Line 9513
  000e9	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vZeroMask$[ebp]
  000f0	0f c2 85 60 ff
	ff ff 04	 cmpneqps xmm0, XMMWORD PTR _vResult$[ebp]
  000f8	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  000ff	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00106	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vZeroMask$[ebp], xmm0
; Line 9516
  0010d	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00113	50		 push	 eax
  00114	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMInfinity
  00119	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  0011e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00121	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vLengthSq$[ebp]
  00125	0f c2 c8 04	 cmpneqps xmm1, xmm0
  00129	0f 29 8d 00 ff
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm1
  00130	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00137	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9518
  0013b	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0013f	0f 5e 85 60 ff
	ff ff		 divps	 xmm0, XMMWORD PTR _vResult$[ebp]
  00146	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0014d	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  00154	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 9520
  0015b	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  00162	0f 54 85 40 ff
	ff ff		 andps	 xmm0, XMMWORD PTR _vZeroMask$[ebp]
  00169	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00170	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00177	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 9522
  0017e	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00184	51		 push	 ecx
  00185	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMQNaN
  0018a	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  0018f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00192	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vLengthSq$[ebp]
  00196	0f 55 c8	 andnps	 xmm1, xmm0
  00199	0f 29 8d b0 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm1
  001a0	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  001a7	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 9523
  001ae	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  001b5	0f 54 45 e0	 andps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  001b9	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  001c0	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  001c7	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 9524
  001ce	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vTemp1$[ebp]
  001d5	0f 56 85 a0 fe
	ff ff		 orps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  001dc	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  001e3	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  001ea	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 9525
  001f1	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
; Line 9528
  001f8	5f		 pop	 edi
  001f9	8b e5		 mov	 esp, ebp
  001fb	5d		 pop	 ebp
  001fc	8b e3		 mov	 esp, ebx
  001fe	5b		 pop	 ebx
  001ff	c3		 ret	 0
?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVector3Normalize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3Length@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
$T3 = -128						; size = 16
$T4 = -112						; size = 16
$T5 = -96						; size = 16
$T6 = -80						; size = 16
_vTemp$ = -64						; size = 16
$T7 = -48						; size = 16
_vLengthSq$ = -32					; size = 16
_V$ = -16						; size = 16
?XMVector3Length@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVector3Length, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 9352
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-160]
  00024	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 9385
  00035	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00039	0f 59 45 f0	 mulps	 xmm0, XMMWORD PTR _V$[ebp]
  0003d	0f 29 45 d0	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00041	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00045	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9387
  00049	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  0004d	0f c6 45 e0 66	 shufps	 xmm0, XMMWORD PTR _vLengthSq$[ebp], 102 ; 00000066H
  00052	0f 29 45 b0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00056	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0005a	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9389
  0005e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  00062	f3 0f 58 45 c0	 addss	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00067	0f 29 45 a0	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0006b	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  0006f	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9391
  00073	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00077	0f c6 45 c0 55	 shufps	 xmm0, XMMWORD PTR _vTemp$[ebp], 85 ; 00000055H
  0007c	0f 29 45 90	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00080	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00084	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9393
  00088	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  0008c	f3 0f 58 45 c0	 addss	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00091	0f 29 45 80	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00095	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00099	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9395
  0009d	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  000a1	0f c6 45 e0 00	 shufps	 xmm0, XMMWORD PTR _vLengthSq$[ebp], 0
  000a6	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000ad	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000b4	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9397
  000b8	0f 51 45 e0	 sqrtps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  000bc	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000c3	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  000ca	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9398
  000ce	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
; Line 9401
  000d2	5f		 pop	 edi
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	8b e3		 mov	 esp, ebx
  000d8	5b		 pop	 ebx
  000d9	c3		 ret	 0
?XMVector3Length@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVector3Length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3LengthSq@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_V$ = -16						; size = 16
?XMVector3LengthSq@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVector3LengthSq, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 9189
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 9190
  0003a	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V$[ebp]
  0003e	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00042	e8 00 00 00 00	 call	 ?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Dot
  00047	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0004b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 9191
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	8b e3		 mov	 esp, ebx
  00054	5b		 pop	 ebx
  00055	c3		 ret	 0
?XMVector3LengthSq@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVector3LengthSq
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -224						; size = 16
$T2 = -208						; size = 16
$T3 = -192						; size = 16
$T4 = -176						; size = 16
$T5 = -160						; size = 16
$T6 = -144						; size = 16
$T7 = -128						; size = 16
_vResult$ = -112					; size = 16
$T8 = -96						; size = 16
_vTemp2$ = -80						; size = 16
$T9 = -64						; size = 16
_vTemp1$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMVector3Cross, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 9137
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00024	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  00035	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 9164
  00039	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  0003d	0f c6 45 f0 c9	 shufps	 xmm0, XMMWORD PTR _V1$[ebp], 201 ; 000000c9H
  00042	0f 29 45 c0	 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00046	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  0004a	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 9166
  0004e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V2$[ebp]
  00052	0f c6 45 e0 d2	 shufps	 xmm0, XMMWORD PTR _V2$[ebp], 210 ; 000000d2H
  00057	0f 29 45 a0	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  0005b	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  0005f	0f 29 45 b0	 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 9168
  00063	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vTemp1$[ebp]
  00067	0f 59 45 b0	 mulps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  0006b	0f 29 45 80	 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0006f	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00073	0f 29 45 90	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 9170
  00077	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vTemp1$[ebp]
  0007b	0f c6 45 d0 c9	 shufps	 xmm0, XMMWORD PTR _vTemp1$[ebp], 201 ; 000000c9H
  00080	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00087	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0008e	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 9172
  00092	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  00096	0f c6 45 b0 d2	 shufps	 xmm0, XMMWORD PTR _vTemp2$[ebp], 210 ; 000000d2H
  0009b	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  000a2	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  000a9	0f 29 45 b0	 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 9174
  000ad	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vTemp1$[ebp]
  000b1	0f 59 45 b0	 mulps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  000b5	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  000bc	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  000c3	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 9176
  000c7	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  000cb	0f 5c 45 d0	 subps	 xmm0, XMMWORD PTR _vTemp1$[ebp]
  000cf	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  000d6	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  000dd	0f 29 45 90	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 9178
  000e1	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000e7	50		 push	 eax
  000e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMMask3
  000ed	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  000f2	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000f5	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vResult$[ebp]
  000f9	0f 54 c8	 andps	 xmm1, xmm0
  000fc	0f 29 8d 20 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm1
  00103	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 9181
  0010a	5f		 pop	 edi
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	8b e3		 mov	 esp, ebx
  00110	5b		 pop	 ebx
  00111	c3		 ret	 0
?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMVector3Cross
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
$T3 = -128						; size = 16
$T4 = -112						; size = 16
$T5 = -96						; size = 16
_vTemp$ = -80						; size = 16
$T6 = -64						; size = 16
_vDot$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z PROC		; DirectX::XMVector3Dot, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 9094
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-160]
  00024	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  00035	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 9115
  00039	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  0003d	0f 59 45 e0	 mulps	 xmm0, XMMWORD PTR _V2$[ebp]
  00041	0f 29 45 c0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00045	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  00049	0f 29 45 d0	 movaps	 XMMWORD PTR _vDot$[ebp], xmm0
; Line 9117
  0004d	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vDot$[ebp]
  00051	0f c6 45 d0 99	 shufps	 xmm0, XMMWORD PTR _vDot$[ebp], 153 ; 00000099H
  00056	0f 29 45 a0	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  0005a	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  0005e	0f 29 45 b0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9119
  00062	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vDot$[ebp]
  00066	f3 0f 58 45 b0	 addss	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0006b	0f 29 45 90	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0006f	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00073	0f 29 45 d0	 movaps	 XMMWORD PTR _vDot$[ebp], xmm0
; Line 9121
  00077	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0007b	0f c6 45 b0 55	 shufps	 xmm0, XMMWORD PTR _vTemp$[ebp], 85 ; 00000055H
  00080	0f 29 45 80	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00084	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00088	0f 29 45 b0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9123
  0008c	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vDot$[ebp]
  00090	f3 0f 58 45 b0	 addss	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00095	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0009c	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000a3	0f 29 45 d0	 movaps	 XMMWORD PTR _vDot$[ebp], xmm0
; Line 9125
  000a7	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vDot$[ebp]
  000ab	0f c6 45 d0 00	 shufps	 xmm0, XMMWORD PTR _vDot$[ebp], 0
  000b0	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000b7	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 9128
  000be	5f		 pop	 edi
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	8b e3		 mov	 esp, ebx
  000c4	5b		 pop	 ebx
  000c5	c3		 ret	 0
?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z ENDP		; DirectX::XMVector3Dot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3IsInfinite@DirectX@@YQ_NT__m128@@@Z
_TEXT	SEGMENT
tv80 = -100						; size = 4
$T1 = -96						; size = 16
$T2 = -80						; size = 16
$T3 = -64						; size = 16
$T4 = -48						; size = 16
_vTemp$ = -32						; size = 16
_V$ = -16						; size = 16
?XMVector3IsInfinite@DirectX@@YQ_NT__m128@@@Z PROC	; DirectX::XMVector3IsInfinite, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 9058
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 70	 sub	 esp, 112		; 00000070H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  0001e	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 9074
  0002f	8d 45 d0	 lea	 eax, DWORD PTR $T4[ebp]
  00032	50		 push	 eax
  00033	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMAbsMask
  00038	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  0003d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00040	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V$[ebp]
  00044	0f 54 c8	 andps	 xmm1, xmm0
  00047	0f 29 4d c0	 movaps	 XMMWORD PTR $T3[ebp], xmm1
  0004b	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0004f	0f 29 45 e0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9076
  00053	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00056	51		 push	 ecx
  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMInfinity
  0005c	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  00061	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00064	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vTemp$[ebp]
  00068	0f c2 c8 00	 cmpeqps xmm1, xmm0
  0006c	0f 29 4d a0	 movaps	 XMMWORD PTR $T1[ebp], xmm1
  00070	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00074	0f 29 45 e0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9078
  00078	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0007c	0f 50 d0	 movmskps edx, xmm0
  0007f	83 e2 07	 and	 edx, 7
  00082	74 09		 je	 SHORT $LN3@XMVector3I
  00084	c7 45 9c 01 00
	00 00		 mov	 DWORD PTR tv80[ebp], 1
  0008b	eb 07		 jmp	 SHORT $LN4@XMVector3I
$LN3@XMVector3I:
  0008d	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN4@XMVector3I:
  00094	8a 45 9c	 mov	 al, BYTE PTR tv80[ebp]
; Line 9081
  00097	5f		 pop	 edi
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	8b e3		 mov	 esp, ebx
  0009d	5b		 pop	 ebx
  0009e	c3		 ret	 0
?XMVector3IsInfinite@DirectX@@YQ_NT__m128@@@Z ENDP	; DirectX::XMVector3IsInfinite
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3Equal@DirectX@@YQ_NT__m128@@0@Z
_TEXT	SEGMENT
tv73 = -72						; size = 4
tv71 = -68						; size = 4
$T1 = -64						; size = 16
_vTemp$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector3Equal@DirectX@@YQ_NT__m128@@0@Z PROC		; DirectX::XMVector3Equal, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 8539
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 50	 sub	 esp, 80			; 00000050H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0001e	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 8548
  00033	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00037	0f c2 45 e0 00	 cmpeqps xmm0, XMMWORD PTR _V2$[ebp]
  0003c	0f 29 45 c0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00040	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00044	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 8549
  00048	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0004c	0f 50 c0	 movmskps eax, xmm0
  0004f	83 e0 07	 and	 eax, 7
  00052	83 f8 07	 cmp	 eax, 7
  00055	75 09		 jne	 SHORT $LN3@XMVector3E
  00057	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  0005e	eb 07		 jmp	 SHORT $LN4@XMVector3E
$LN3@XMVector3E:
  00060	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN4@XMVector3E:
  00067	83 7d bc 00	 cmp	 DWORD PTR tv71[ebp], 0
  0006b	74 09		 je	 SHORT $LN5@XMVector3E
  0006d	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  00074	eb 07		 jmp	 SHORT $LN6@XMVector3E
$LN5@XMVector3E:
  00076	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN6@XMVector3E:
  0007d	8a 45 b8	 mov	 al, BYTE PTR tv73[ebp]
; Line 8553
  00080	5f		 pop	 edi
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	8b e3		 mov	 esp, ebx
  00086	5b		 pop	 ebx
  00087	c3		 ret	 0
?XMVector3Equal@DirectX@@YQ_NT__m128@@0@Z ENDP		; DirectX::XMVector3Equal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSinCos@DirectX@@YQXPAT__m128@@0T2@@Z
_TEXT	SEGMENT
tv420 = -1248						; size = 16
$T1 = -1232						; size = 16
$T2 = -1216						; size = 16
$T3 = -1200						; size = 16
$T4 = -1184						; size = 16
$T5 = -1168						; size = 16
$T6 = -1152						; size = 16
$T7 = -1136						; size = 16
$T8 = -1120						; size = 16
$T9 = -1104						; size = 16
$T10 = -1088						; size = 16
$T11 = -1072						; size = 16
$T12 = -1056						; size = 16
$T13 = -1040						; size = 16
$T14 = -1024						; size = 16
$T15 = -1008						; size = 16
_CC0$ = -976						; size = 16
$T16 = -944						; size = 16
$T17 = -928						; size = 16
_CC1$ = -896						; size = 16
$T18 = -864						; size = 16
$T19 = -848						; size = 16
$T20 = -832						; size = 16
$T21 = -816						; size = 16
$T22 = -800						; size = 16
$T23 = -784						; size = 16
$T24 = -768						; size = 16
$T25 = -752						; size = 16
$T26 = -736						; size = 16
$T27 = -720						; size = 16
$T28 = -704						; size = 16
$T29 = -688						; size = 16
$T30 = -672						; size = 16
$T31 = -656						; size = 16
$T32 = -640						; size = 16
_SC0$ = -608						; size = 16
$T33 = -576						; size = 16
_Result$ = -560						; size = 16
$T34 = -544						; size = 16
_vConstants$ = -528					; size = 16
_SC1$ = -496						; size = 16
$T35 = -464						; size = 16
_x2$ = -448						; size = 16
$T36 = -432						; size = 16
$T37 = -416						; size = 16
$T38 = -400						; size = 16
$T39 = -384						; size = 16
$T40 = -368						; size = 16
$T41 = -352						; size = 16
$T42 = -336						; size = 16
_select1$ = -320					; size = 16
$T43 = -304						; size = 16
_select0$ = -288					; size = 16
$T44 = -272						; size = 16
$T45 = -256						; size = 16
_comp$ = -240						; size = 16
$T46 = -224						; size = 16
_rflx$ = -208						; size = 16
$T47 = -192						; size = 16
_absx$ = -176						; size = 16
$T48 = -160						; size = 16
$T49 = -144						; size = 16
_c$ = -128						; size = 16
$T50 = -112						; size = 16
$T51 = -96						; size = 16
_sign$ = -80						; size = 16
$T52 = -64						; size = 16
_x$ = -48						; size = 16
_V$ = -32						; size = 16
_pCos$ = -8						; size = 4
_pSin$ = -4						; size = 4
?XMVectorSinCos@DirectX@@YQXPAT__m128@@0T2@@Z PROC	; DirectX::XMVectorSinCos, COMDAT
; _pSin$ = ecx
; _pCos$ = edx
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 4406
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec ec 04 00
	00		 sub	 esp, 1260		; 000004ecH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 14 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1260]
  00025	b9 3b 01 00 00	 mov	 ecx, 315		; 0000013bH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	0f 29 45 e0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
  00036	89 55 f8	 mov	 DWORD PTR _pCos$[ebp], edx
  00039	89 4d fc	 mov	 DWORD PTR _pSin$[ebp], ecx
; Line 4407
  0003c	83 7d fc 00	 cmp	 DWORD PTR _pSin$[ebp], 0
  00040	75 21		 jne	 SHORT $LN3@XMVectorSi
  00042	8b f4		 mov	 esi, esp
  00044	68 37 11 00 00	 push	 4407			; 00001137H
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@LGEHDEBK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_1CA@PCMAADPN@?$AAp?$AAS?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMVectorSi:
; Line 4408
  00063	83 7d f8 00	 cmp	 DWORD PTR _pCos$[ebp], 0
  00067	75 21		 jne	 SHORT $LN4@XMVectorSi
  00069	8b f4		 mov	 esi, esp
  0006b	68 38 11 00 00	 push	 4408			; 00001138H
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@LGEHDEBK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_1CA@LFGCHHDM@?$AAp?$AAC?$AAo?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@XMVectorSi:
; Line 4475
  0008a	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0008e	e8 00 00 00 00	 call	 ?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorModAngles
  00093	0f 29 45 c0	 movaps	 XMMWORD PTR $T52[ebp], xmm0
  00097	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T52[ebp]
  0009b	0f 29 45 d0	 movaps	 XMMWORD PTR _x$[ebp], xmm0
; Line 4478
  0009f	8d 55 a0	 lea	 edx, DWORD PTR $T51[ebp]
  000a2	52		 push	 edx
  000a3	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMNegativeZero@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMNegativeZero
  000a8	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  000ad	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000b0	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _x$[ebp]
  000b4	0f 54 c8	 andps	 xmm1, xmm0
  000b7	0f 29 4d 90	 movaps	 XMMWORD PTR $T50[ebp], xmm1
  000bb	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T50[ebp]
  000bf	0f 29 45 b0	 movaps	 XMMWORD PTR _sign$[ebp], xmm0
; Line 4479
  000c3	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _sign$[ebp]
  000c7	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T49[ebp]
  000cd	50		 push	 eax
  000ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMPi@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMPi
  000d3	0f 29 85 20 fb
	ff ff		 movaps	 XMMWORD PTR tv420[ebp], xmm0
  000da	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  000df	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000e2	0f 28 8d 20 fb
	ff ff		 movaps	 xmm1, XMMWORD PTR tv420[ebp]
  000e9	0f 56 c1	 orps	 xmm0, xmm1
  000ec	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T48[ebp], xmm0
  000f3	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T48[ebp]
  000fa	0f 29 45 80	 movaps	 XMMWORD PTR _c$[ebp], xmm0
; Line 4480
  000fe	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _sign$[ebp]
  00102	0f 55 45 d0	 andnps	 xmm0, XMMWORD PTR _x$[ebp]
  00106	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T47[ebp], xmm0
  0010d	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T47[ebp]
  00114	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _absx$[ebp], xmm0
; Line 4481
  0011b	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _c$[ebp]
  0011f	0f 5c 45 d0	 subps	 xmm0, XMMWORD PTR _x$[ebp]
  00123	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T46[ebp], xmm0
  0012a	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T46[ebp]
  00131	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _rflx$[ebp], xmm0
; Line 4482
  00138	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T45[ebp]
  0013e	51		 push	 ecx
  0013f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMHalfPi
  00144	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00149	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0014c	0f 28 8d 50 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _absx$[ebp]
  00153	0f c2 c8 02	 cmpleps xmm1, xmm0
  00157	0f 29 8d f0 fe
	ff ff		 movaps	 XMMWORD PTR $T44[ebp], xmm1
  0015e	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T44[ebp]
  00165	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _comp$[ebp], xmm0
; Line 4483
  0016c	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _comp$[ebp]
  00173	0f 54 45 d0	 andps	 xmm0, XMMWORD PTR _x$[ebp]
  00177	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T43[ebp], xmm0
  0017e	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T43[ebp]
  00185	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _select0$[ebp], xmm0
; Line 4484
  0018c	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _comp$[ebp]
  00193	0f 55 85 30 ff
	ff ff		 andnps	 xmm0, XMMWORD PTR _rflx$[ebp]
  0019a	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T42[ebp], xmm0
  001a1	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T42[ebp]
  001a8	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _select1$[ebp], xmm0
; Line 4485
  001af	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _select0$[ebp]
  001b6	0f 56 85 c0 fe
	ff ff		 orps	 xmm0, XMMWORD PTR _select1$[ebp]
  001bd	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T41[ebp], xmm0
  001c4	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T41[ebp]
  001cb	0f 29 45 d0	 movaps	 XMMWORD PTR _x$[ebp], xmm0
; Line 4486
  001cf	8d 95 90 fe ff
	ff		 lea	 edx, DWORD PTR $T40[ebp]
  001d5	52		 push	 edx
  001d6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
  001db	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  001e0	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001e3	0f 28 8d 10 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _comp$[ebp]
  001ea	0f 54 c8	 andps	 xmm1, xmm0
  001ed	0f 29 8d 80 fe
	ff ff		 movaps	 XMMWORD PTR $T39[ebp], xmm1
  001f4	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T39[ebp]
  001fb	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _select0$[ebp], xmm0
; Line 4487
  00202	8d 85 70 fe ff
	ff		 lea	 eax, DWORD PTR $T38[ebp]
  00208	50		 push	 eax
  00209	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNegativeOne
  0020e	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00213	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00216	0f 28 8d 10 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _comp$[ebp]
  0021d	0f 55 c8	 andnps	 xmm1, xmm0
  00220	0f 29 8d 60 fe
	ff ff		 movaps	 XMMWORD PTR $T37[ebp], xmm1
  00227	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T37[ebp]
  0022e	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _select1$[ebp], xmm0
; Line 4488
  00235	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _select0$[ebp]
  0023c	0f 56 85 c0 fe
	ff ff		 orps	 xmm0, XMMWORD PTR _select1$[ebp]
  00243	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T36[ebp], xmm0
  0024a	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T36[ebp]
  00251	0f 29 45 b0	 movaps	 XMMWORD PTR _sign$[ebp], xmm0
; Line 4490
  00255	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _x$[ebp]
  00259	0f 59 45 d0	 mulps	 xmm0, XMMWORD PTR _x$[ebp]
  0025d	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T35[ebp], xmm0
  00264	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T35[ebp]
  0026b	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _x2$[ebp], xmm0
; Line 4493
  00272	8d 8d 10 fe ff
	ff		 lea	 ecx, DWORD PTR _SC1$[ebp]
  00278	51		 push	 ecx
  00279	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients1
  0027e	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
; Line 4494
  00283	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _SC1$[ebp]
  0028a	0f c6 85 10 fe
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _SC1$[ebp], 0
  00292	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T34[ebp], xmm0
  00299	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T34[ebp]
  002a0	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4495
  002a7	0f 28 85 f0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _vConstants$[ebp]
  002ae	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x2$[ebp]
  002b5	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T33[ebp], xmm0
  002bc	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T33[ebp]
  002c3	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4497
  002ca	8d 95 a0 fd ff
	ff		 lea	 edx, DWORD PTR _SC0$[ebp]
  002d0	52		 push	 edx
  002d1	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients0
  002d6	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
; Line 4498
  002db	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _SC0$[ebp]
  002e2	0f c6 85 a0 fd
	ff ff ff	 shufps	 xmm0, XMMWORD PTR _SC0$[ebp], 255 ; 000000ffH
  002ea	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T32[ebp], xmm0
  002f1	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T32[ebp]
  002f8	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4499
  002ff	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  00306	0f 58 85 f0 fd
	ff ff		 addps	 xmm0, XMMWORD PTR _vConstants$[ebp]
  0030d	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T31[ebp], xmm0
  00314	0f 28 85 70 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T31[ebp]
  0031b	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4500
  00322	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  00329	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x2$[ebp]
  00330	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T30[ebp], xmm0
  00337	0f 28 85 60 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T30[ebp]
  0033e	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4502
  00345	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _SC0$[ebp]
  0034c	0f c6 85 a0 fd
	ff ff aa	 shufps	 xmm0, XMMWORD PTR _SC0$[ebp], 170 ; 000000aaH
  00354	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR $T29[ebp], xmm0
  0035b	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T29[ebp]
  00362	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4503
  00369	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  00370	0f 58 85 f0 fd
	ff ff		 addps	 xmm0, XMMWORD PTR _vConstants$[ebp]
  00377	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T28[ebp], xmm0
  0037e	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  00385	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4504
  0038c	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  00393	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x2$[ebp]
  0039a	0f 29 85 30 fd
	ff ff		 movaps	 XMMWORD PTR $T27[ebp], xmm0
  003a1	0f 28 85 30 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T27[ebp]
  003a8	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4506
  003af	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _SC0$[ebp]
  003b6	0f c6 85 a0 fd
	ff ff 55	 shufps	 xmm0, XMMWORD PTR _SC0$[ebp], 85 ; 00000055H
  003be	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR $T26[ebp], xmm0
  003c5	0f 28 85 20 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  003cc	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4507
  003d3	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  003da	0f 58 85 f0 fd
	ff ff		 addps	 xmm0, XMMWORD PTR _vConstants$[ebp]
  003e1	0f 29 85 10 fd
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm0
  003e8	0f 28 85 10 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  003ef	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4508
  003f6	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  003fd	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x2$[ebp]
  00404	0f 29 85 00 fd
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  0040b	0f 28 85 00 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  00412	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4510
  00419	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _SC0$[ebp]
  00420	0f c6 85 a0 fd
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _SC0$[ebp], 0
  00428	0f 29 85 f0 fc
	ff ff		 movaps	 XMMWORD PTR $T23[ebp], xmm0
  0042f	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T23[ebp]
  00436	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4511
  0043d	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  00444	0f 58 85 f0 fd
	ff ff		 addps	 xmm0, XMMWORD PTR _vConstants$[ebp]
  0044b	0f 29 85 e0 fc
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  00452	0f 28 85 e0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  00459	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4512
  00460	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  00467	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x2$[ebp]
  0046e	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR $T21[ebp], xmm0
  00475	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  0047c	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4513
  00483	8d 85 c0 fc ff
	ff		 lea	 eax, DWORD PTR $T20[ebp]
  00489	50		 push	 eax
  0048a	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
  0048f	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00494	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00497	0f 28 8d d0 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _Result$[ebp]
  0049e	0f 58 c8	 addps	 xmm1, xmm0
  004a1	0f 29 8d b0 fc
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm1
  004a8	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  004af	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4514
  004b6	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  004bd	0f 59 45 d0	 mulps	 xmm0, XMMWORD PTR _x$[ebp]
  004c1	0f 29 85 a0 fc
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  004c8	0f 28 85 a0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  004cf	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4515
  004d6	8b 4d fc	 mov	 ecx, DWORD PTR _pSin$[ebp]
  004d9	0f 10 85 d0 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _Result$[ebp]
  004e0	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; Line 4518
  004e3	8d 95 80 fc ff
	ff		 lea	 edx, DWORD PTR _CC1$[ebp]
  004e9	52		 push	 edx
  004ea	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients1
  004ef	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
; Line 4519
  004f4	0f 28 85 80 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _CC1$[ebp]
  004fb	0f c6 85 80 fc
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _CC1$[ebp], 0
  00503	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  0050a	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  00511	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4520
  00518	0f 28 85 f0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _vConstants$[ebp]
  0051f	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x2$[ebp]
  00526	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  0052d	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  00534	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4522
  0053b	8d 85 30 fc ff
	ff		 lea	 eax, DWORD PTR _CC0$[ebp]
  00541	50		 push	 eax
  00542	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients0
  00547	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
; Line 4523
  0054c	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _CC0$[ebp]
  00553	0f c6 85 30 fc
	ff ff ff	 shufps	 xmm0, XMMWORD PTR _CC0$[ebp], 255 ; 000000ffH
  0055b	0f 29 85 10 fc
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00562	0f 28 85 10 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  00569	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4524
  00570	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  00577	0f 58 85 f0 fd
	ff ff		 addps	 xmm0, XMMWORD PTR _vConstants$[ebp]
  0057e	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00585	0f 28 85 00 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  0058c	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4525
  00593	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  0059a	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x2$[ebp]
  005a1	0f 29 85 f0 fb
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  005a8	0f 28 85 f0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  005af	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4527
  005b6	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _CC0$[ebp]
  005bd	0f c6 85 30 fc
	ff ff aa	 shufps	 xmm0, XMMWORD PTR _CC0$[ebp], 170 ; 000000aaH
  005c5	0f 29 85 e0 fb
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  005cc	0f 28 85 e0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  005d3	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4528
  005da	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  005e1	0f 58 85 f0 fd
	ff ff		 addps	 xmm0, XMMWORD PTR _vConstants$[ebp]
  005e8	0f 29 85 d0 fb
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  005ef	0f 28 85 d0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  005f6	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4529
  005fd	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  00604	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x2$[ebp]
  0060b	0f 29 85 c0 fb
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00612	0f 28 85 c0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  00619	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4531
  00620	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _CC0$[ebp]
  00627	0f c6 85 30 fc
	ff ff 55	 shufps	 xmm0, XMMWORD PTR _CC0$[ebp], 85 ; 00000055H
  0062f	0f 29 85 b0 fb
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00636	0f 28 85 b0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  0063d	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4532
  00644	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  0064b	0f 58 85 f0 fd
	ff ff		 addps	 xmm0, XMMWORD PTR _vConstants$[ebp]
  00652	0f 29 85 a0 fb
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00659	0f 28 85 a0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00660	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4533
  00667	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  0066e	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x2$[ebp]
  00675	0f 29 85 90 fb
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  0067c	0f 28 85 90 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00683	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4535
  0068a	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _CC0$[ebp]
  00691	0f c6 85 30 fc
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _CC0$[ebp], 0
  00699	0f 29 85 80 fb
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  006a0	0f 28 85 80 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  006a7	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4536
  006ae	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  006b5	0f 58 85 f0 fd
	ff ff		 addps	 xmm0, XMMWORD PTR _vConstants$[ebp]
  006bc	0f 29 85 70 fb
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  006c3	0f 28 85 70 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  006ca	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4537
  006d1	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  006d8	0f 59 85 40 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _x2$[ebp]
  006df	0f 29 85 60 fb
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  006e6	0f 28 85 60 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  006ed	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4538
  006f4	8d 8d 50 fb ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  006fa	51		 push	 ecx
  006fb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
  00700	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00705	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00708	0f 28 8d d0 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _Result$[ebp]
  0070f	0f 58 c8	 addps	 xmm1, xmm0
  00712	0f 29 8d 40 fb
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm1
  00719	0f 28 85 40 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00720	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4539
  00727	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  0072e	0f 59 45 b0	 mulps	 xmm0, XMMWORD PTR _sign$[ebp]
  00732	0f 29 85 30 fb
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00739	0f 28 85 30 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00740	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 4540
  00747	8b 55 f8	 mov	 edx, DWORD PTR _pCos$[ebp]
  0074a	0f 10 85 d0 fd
	ff ff		 movups	 xmm0, XMMWORD PTR _Result$[ebp]
  00751	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
; Line 4543
  00754	52		 push	 edx
  00755	8b cd		 mov	 ecx, ebp
  00757	50		 push	 eax
  00758	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@XMVectorSi
  0075e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00763	58		 pop	 eax
  00764	5a		 pop	 edx
  00765	5f		 pop	 edi
  00766	5e		 pop	 esi
  00767	8b e5		 mov	 esp, ebp
  00769	5d		 pop	 ebp
  0076a	8b e3		 mov	 esp, ebx
  0076c	5b		 pop	 ebx
  0076d	c3		 ret	 0
  0076e	8b ff		 npad	 2
$LN10@XMVectorSi:
  00770	04 00 00 00	 DD	 4
  00774	00 00 00 00	 DD	 $LN9@XMVectorSi
$LN9@XMVectorSi:
  00778	10 fe ff ff	 DD	 -496			; fffffe10H
  0077c	10 00 00 00	 DD	 16			; 00000010H
  00780	00 00 00 00	 DD	 $LN5@XMVectorSi
  00784	a0 fd ff ff	 DD	 -608			; fffffda0H
  00788	10 00 00 00	 DD	 16			; 00000010H
  0078c	00 00 00 00	 DD	 $LN6@XMVectorSi
  00790	80 fc ff ff	 DD	 -896			; fffffc80H
  00794	10 00 00 00	 DD	 16			; 00000010H
  00798	00 00 00 00	 DD	 $LN7@XMVectorSi
  0079c	30 fc ff ff	 DD	 -976			; fffffc30H
  007a0	10 00 00 00	 DD	 16			; 00000010H
  007a4	00 00 00 00	 DD	 $LN8@XMVectorSi
$LN8@XMVectorSi:
  007a8	43		 DB	 67			; 00000043H
  007a9	43		 DB	 67			; 00000043H
  007aa	30		 DB	 48			; 00000030H
  007ab	00		 DB	 0
$LN7@XMVectorSi:
  007ac	43		 DB	 67			; 00000043H
  007ad	43		 DB	 67			; 00000043H
  007ae	31		 DB	 49			; 00000031H
  007af	00		 DB	 0
$LN6@XMVectorSi:
  007b0	53		 DB	 83			; 00000053H
  007b1	43		 DB	 67			; 00000043H
  007b2	30		 DB	 48			; 00000030H
  007b3	00		 DB	 0
$LN5@XMVectorSi:
  007b4	53		 DB	 83			; 00000053H
  007b5	43		 DB	 67			; 00000043H
  007b6	31		 DB	 49			; 00000031H
  007b7	00		 DB	 0
?XMVectorSinCos@DirectX@@YQXPAT__m128@@0T2@@Z ENDP	; DirectX::XMVectorSinCos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -128						; size = 16
$T2 = -112						; size = 16
$T3 = -96						; size = 16
$T4 = -80						; size = 16
$T5 = -64						; size = 16
$T6 = -48						; size = 16
_vResult$ = -32						; size = 16
_Angles$ = -16						; size = 16
?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorModAngles, COMDAT
; _Angles$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 4179
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00021	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	0f 29 45 f0	 movaps	 XMMWORD PTR _Angles$[ebp], xmm0
; Line 4199
  00032	8d 45 d0	 lea	 eax, DWORD PTR $T6[ebp]
  00035	50		 push	 eax
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMReciprocalTwoPi
  0003b	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00040	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00043	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _Angles$[ebp]
  00047	0f 59 c8	 mulps	 xmm1, xmm0
  0004a	0f 29 4d c0	 movaps	 XMMWORD PTR $T5[ebp], xmm1
  0004e	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00052	0f 29 45 e0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 4201
  00056	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  0005a	e8 00 00 00 00	 call	 ?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorRound
  0005f	0f 29 45 b0	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00063	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00067	0f 29 45 e0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 4202
  0006b	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  0006e	51		 push	 ecx
  0006f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTwoPi
  00074	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00079	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0007c	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vResult$[ebp]
  00080	0f 59 c8	 mulps	 xmm1, xmm0
  00083	0f 29 4d 90	 movaps	 XMMWORD PTR $T2[ebp], xmm1
  00087	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0008b	0f 29 45 e0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 4203
  0008f	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _Angles$[ebp]
  00093	0f 5c 45 e0	 subps	 xmm0, XMMWORD PTR _vResult$[ebp]
  00097	0f 29 45 80	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0009b	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  0009f	0f 29 45 e0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 4204
  000a3	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
; Line 4207
  000a7	5f		 pop	 edi
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	8b e3		 mov	 esp, ebx
  000ad	5b		 pop	 ebx
  000ae	c3		 ret	 0
?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorModAngles
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
$T2 = -64						; size = 16
_vResult$ = -48						; size = 16
_ScaleFactor$ = -20					; size = 4
_V$ = -16						; size = 16
?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z PROC	; DirectX::XMVectorScale, COMDAT
; _V$ = xmm0
; _ScaleFactor$ = xmm1s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 3062
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 50	 sub	 esp, 80			; 00000050H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0001e	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	f3 0f 11 4d ec	 movss	 DWORD PTR _ScaleFactor$[ebp], xmm1
  00030	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 3075
  00034	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _ScaleFactor$[ebp]
  00039	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  0003d	0f 29 45 c0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00041	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00045	0f 29 45 d0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 3076
  00049	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  0004d	0f 59 45 f0	 mulps	 xmm0, XMMWORD PTR _V$[ebp]
  00051	0f 29 45 b0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00055	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 3079
  00059	5f		 pop	 edi
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	8b e3		 mov	 esp, ebx
  0005f	5b		 pop	 ebx
  00060	c3		 ret	 0
?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z ENDP	; DirectX::XMVectorScale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMVectorDivide, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 3005
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 3022
  00033	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00037	0f 5e 45 e0	 divps	 xmm0, XMMWORD PTR _V2$[ebp]
  0003b	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0003f	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 3025
  00043	5f		 pop	 edi
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	8b e3		 mov	 esp, ebx
  00049	5b		 pop	 ebx
  0004a	c3		 ret	 0
?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMVectorDivide
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z
_TEXT	SEGMENT
$T1 = -96						; size = 16
$T2 = -80						; size = 16
_vResult$ = -64						; size = 16
_V3$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z PROC	; DirectX::XMVectorMultiplyAdd, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; _V3$ = xmm2
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2979
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 60	 sub	 esp, 96			; 00000060H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  0001e	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 55 d0	 movaps	 XMMWORD PTR _V3$[ebp], xmm2
  0002f	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  00033	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 2992
  00037	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  0003b	0f 59 45 e0	 mulps	 xmm0, XMMWORD PTR _V2$[ebp]
  0003f	0f 29 45 b0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00043	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00047	0f 29 45 c0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 2993
  0004b	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  0004f	0f 58 45 d0	 addps	 xmm0, XMMWORD PTR _V3$[ebp]
  00053	0f 29 45 a0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00057	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 2996
  0005b	5f		 pop	 edi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	8b e3		 mov	 esp, ebx
  00061	5b		 pop	 ebx
  00062	c3		 ret	 0
?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ENDP	; DirectX::XMVectorMultiplyAdd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMVectorMultiply, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2954
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 2966
  00033	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00037	0f 59 45 e0	 mulps	 xmm0, XMMWORD PTR _V2$[ebp]
  0003b	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0003f	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 2969
  00043	5f		 pop	 edi
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	8b e3		 mov	 esp, ebx
  00049	5b		 pop	 ebx
  0004a	c3		 ret	 0
?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMVectorMultiply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMVectorSubtract, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2869
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 2882
  00033	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00037	0f 5c 45 e0	 subps	 xmm0, XMMWORD PTR _V2$[ebp]
  0003b	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0003f	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 2885
  00043	5f		 pop	 edi
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	8b e3		 mov	 esp, ebx
  00049	5b		 pop	 ebx
  0004a	c3		 ret	 0
?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMVectorSubtract
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z PROC		; DirectX::XMVectorAdd, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2784
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 2797
  00033	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00037	0f 58 45 e0	 addps	 xmm0, XMMWORD PTR _V2$[ebp]
  0003b	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0003f	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 2800
  00043	5f		 pop	 edi
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	8b e3		 mov	 esp, ebx
  00049	5b		 pop	 ebx
  0004a	c3		 ret	 0
?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z ENDP		; DirectX::XMVectorAdd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -64						; size = 16
$T2 = -48						; size = 16
_Z$ = -32						; size = 16
_V$ = -16						; size = 16
?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorNegate, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2755
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 40	 sub	 esp, 64			; 00000040H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0001e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 2770
  0002f	0f 57 c0	 xorps	 xmm0, xmm0
  00032	0f 29 45 d0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00036	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0003a	0f 29 45 e0	 movaps	 XMMWORD PTR _Z$[ebp], xmm0
; Line 2772
  0003e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Z$[ebp]
  00042	0f 5c 45 f0	 subps	 xmm0, XMMWORD PTR _V$[ebp]
  00046	0f 29 45 c0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0004a	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 2775
  0004e	5f		 pop	 edi
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	8b e3		 mov	 esp, ebx
  00054	5b		 pop	 ebx
  00055	c3		 ret	 0
?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorNegate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorClamp@DirectX@@YQ?AT__m128@@T2@00@Z
_TEXT	SEGMENT
$T1 = -96						; size = 16
$T2 = -80						; size = 16
_vResult$ = -64						; size = 16
_Max$ = -48						; size = 16
_Min$ = -32						; size = 16
_V$ = -16						; size = 16
?XMVectorClamp@DirectX@@YQ?AT__m128@@T2@00@Z PROC	; DirectX::XMVectorClamp, COMDAT
; _V$ = xmm0
; _Min$ = xmm1
; _Max$ = xmm2
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2560
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d 7d 94	 lea	 edi, DWORD PTR [ebp-108]
  0001f	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	0f 29 55 d0	 movaps	 XMMWORD PTR _Max$[ebp], xmm2
  00030	0f 29 4d e0	 movaps	 XMMWORD PTR _Min$[ebp], xmm1
  00034	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 2561
  00038	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _Max$[ebp]
  0003c	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Min$[ebp]
  00040	e8 00 00 00 00	 call	 ?XMVector4LessOrEqual@DirectX@@YQ_NT__m128@@0@Z ; DirectX::XMVector4LessOrEqual
  00045	0f b6 c0	 movzx	 eax, al
  00048	85 c0		 test	 eax, eax
  0004a	75 21		 jne	 SHORT $LN3@XMVectorCl
  0004c	8b f4		 mov	 esi, esp
  0004e	68 01 0a 00 00	 push	 2561			; 00000a01H
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@LGEHDEBK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_1DO@HJELAGIP@?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA4?$AAL?$AAe?$AAs?$AAs?$AAO?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAM?$AAi?$AAn?$AA?0?$AA?5?$AAM?$AAa?$AAx?$AA?$CJ?$AA?$AA@
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMVectorCl:
; Line 2577
  0006d	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Min$[ebp]
  00071	0f 5f 45 f0	 maxps	 xmm0, XMMWORD PTR _V$[ebp]
  00075	0f 29 45 b0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00079	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0007d	0f 29 45 c0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 2578
  00081	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  00085	0f 5d 45 d0	 minps	 xmm0, XMMWORD PTR _Max$[ebp]
  00089	0f 29 45 a0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0008d	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00091	0f 29 45 c0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 2579
  00095	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
; Line 2582
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	8b e3		 mov	 esp, ebx
  000a0	5b		 pop	 ebx
  000a1	c3		 ret	 0
?XMVectorClamp@DirectX@@YQ?AT__m128@@T2@00@Z ENDP	; DirectX::XMVectorClamp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
tv92 = -176						; size = 16
$T1 = -160						; size = 16
$T2 = -144						; size = 16
_vResult$ = -128					; size = 16
$T3 = -112						; size = 16
$T4 = -96						; size = 16
_sMagic$ = -80						; size = 16
$T5 = -64						; size = 16
$T6 = -48						; size = 16
_sign$ = -32						; size = 16
_V$ = -16						; size = 16
?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z PROC		; DirectX::XMVectorRound, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2357
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-176]
  00024	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 2377
  00035	8d 45 d0	 lea	 eax, DWORD PTR $T6[ebp]
  00038	50		 push	 eax
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMNegativeZero@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMNegativeZero
  0003e	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  00043	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00046	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V$[ebp]
  0004a	0f 54 c8	 andps	 xmm1, xmm0
  0004d	0f 29 4d c0	 movaps	 XMMWORD PTR $T5[ebp], xmm1
  00051	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00055	0f 29 45 e0	 movaps	 XMMWORD PTR _sign$[ebp], xmm0
; Line 2378
  00059	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _sign$[ebp]
  0005d	8d 4d a0	 lea	 ecx, DWORD PTR $T4[ebp]
  00060	51		 push	 ecx
  00061	b9 00 00 00 00	 mov	 ecx, OFFSET ?magic@?1??XMVectorRound@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORI32@2@B ; `DirectX::XMVectorRound'::`2'::magic
  00066	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR tv92[ebp], xmm0
  0006d	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  00072	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00075	0f 28 8d 50 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR tv92[ebp]
  0007c	0f 56 c1	 orps	 xmm0, xmm1
  0007f	0f 29 45 90	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00083	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00087	0f 29 45 b0	 movaps	 XMMWORD PTR _sMagic$[ebp], xmm0
; Line 2379
  0008b	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0008f	0f 58 45 b0	 addps	 xmm0, XMMWORD PTR _sMagic$[ebp]
  00093	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0009a	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000a1	0f 29 45 80	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 2380
  000a5	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  000a9	0f 5c 45 b0	 subps	 xmm0, XMMWORD PTR _sMagic$[ebp]
  000ad	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000b4	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  000bb	0f 29 45 80	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 2381
  000bf	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
; Line 2384
  000c3	5f		 pop	 edi
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	8b e3		 mov	 esp, ebx
  000c9	5b		 pop	 ebx
  000ca	c3		 ret	 0
?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z ENDP		; DirectX::XMVectorRound
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z
_TEXT	SEGMENT
$T1 = -128						; size = 16
$T2 = -112						; size = 16
_vTemp2$ = -96						; size = 16
$T3 = -80						; size = 16
_vTemp1$ = -64						; size = 16
_Control$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z PROC	; DirectX::XMVectorSelect, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; _Control$ = xmm2
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 1448
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00021	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	0f 29 55 d0	 movaps	 XMMWORD PTR _Control$[ebp], xmm2
  00032	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  00036	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1461
  0003a	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _Control$[ebp]
  0003e	0f 55 45 f0	 andnps	 xmm0, XMMWORD PTR _V1$[ebp]
  00042	0f 29 45 b0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00046	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0004a	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 1462
  0004e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V2$[ebp]
  00052	0f 54 45 d0	 andps	 xmm0, XMMWORD PTR _Control$[ebp]
  00056	0f 29 45 90	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0005a	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0005e	0f 29 45 a0	 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 1463
  00062	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp1$[ebp]
  00066	0f 56 45 a0	 orps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  0006a	0f 29 45 80	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0006e	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 1466
  00072	5f		 pop	 edi
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	8b e3		 mov	 esp, ebx
  00078	5b		 pop	 ebx
  00079	c3		 ret	 0
?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ENDP	; DirectX::XMVectorSelect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorGetX@DirectX@@YQMT__m128@@@Z
_TEXT	SEGMENT
tv66 = -20						; size = 4
_V$ = -16						; size = 16
?XMVectorGetX@DirectX@@YQMT__m128@@@Z PROC		; DirectX::XMVectorGetX, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 422
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 428
  0003a	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0003e	f3 0f 11 45 ec	 movss	 DWORD PTR tv66[ebp], xmm0
  00043	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv66[ebp]
; Line 431
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	8b e3		 mov	 esp, ebx
  0004d	5b		 pop	 ebx
  0004e	c3		 ret	 0
?XMVectorGetX@DirectX@@YQMT__m128@@@Z ENDP		; DirectX::XMVectorGetX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSplatW@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_V$ = -16						; size = 16
?XMVectorSplatW@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorSplatW, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 290
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 301
  0003a	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0003e	0f c6 45 f0 ff	 shufps	 xmm0, XMMWORD PTR _V$[ebp], 255 ; 000000ffH
  00043	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00047	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 304
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	8b e3		 mov	 esp, ebx
  00050	5b		 pop	 ebx
  00051	c3		 ret	 0
?XMVectorSplatW@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorSplatW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSplatZ@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_V$ = -16						; size = 16
?XMVectorSplatZ@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorSplatZ, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 268
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 279
  0003a	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0003e	0f c6 45 f0 aa	 shufps	 xmm0, XMMWORD PTR _V$[ebp], 170 ; 000000aaH
  00043	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00047	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 282
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	8b e3		 mov	 esp, ebx
  00050	5b		 pop	 ebx
  00051	c3		 ret	 0
?XMVectorSplatZ@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorSplatZ
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSplatY@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_V$ = -16						; size = 16
?XMVectorSplatY@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorSplatY, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 246
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 257
  0003a	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0003e	0f c6 45 f0 55	 shufps	 xmm0, XMMWORD PTR _V$[ebp], 85 ; 00000055H
  00043	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00047	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 260
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	8b e3		 mov	 esp, ebx
  00050	5b		 pop	 ebx
  00051	c3		 ret	 0
?XMVectorSplatY@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorSplatY
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_V$ = -16						; size = 16
?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorSplatX, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 224
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 235
  0003a	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0003e	0f c6 45 f0 00	 shufps	 xmm0, XMMWORD PTR _V$[ebp], 0
  00043	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00047	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 238
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	8b e3		 mov	 esp, ebx
  00050	5b		 pop	 ebx
  00051	c3		 ret	 0
?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorSplatX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorReplicate@DirectX@@YQ?AT__m128@@M@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_Value$ = -4						; size = 4
?XMVectorReplicate@DirectX@@YQ?AT__m128@@M@Z PROC	; DirectX::XMVectorReplicate, COMDAT
; _Value$ = xmm0s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 116
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	f3 0f 11 45 fc	 movss	 DWORD PTR _Value$[ebp], xmm0
; Line 123
  0003b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Value$[ebp]
  00040	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00044	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00048	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 126
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	8b e3		 mov	 esp, ebx
  00051	5b		 pop	 ebx
  00052	c3		 ret	 0
?XMVectorReplicate@DirectX@@YQ?AT__m128@@M@Z ENDP	; DirectX::XMVectorReplicate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_w$ = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z PROC		; DirectX::XMVectorSet, COMDAT
; _x$ = xmm0s
; _y$ = xmm1s
; _z$ = xmm2s
; _w$ = xmm3s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 72
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	f3 0f 11 5d f0	 movss	 DWORD PTR _w$[ebp], xmm3
  0003b	f3 0f 11 55 f4	 movss	 DWORD PTR _z$[ebp], xmm2
  00040	f3 0f 11 4d f8	 movss	 DWORD PTR _y$[ebp], xmm1
  00045	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
; Line 81
  0004a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  0004f	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _y$[ebp]
  00054	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _z$[ebp]
  00059	f3 0f 10 5d f0	 movss	 xmm3, DWORD PTR _w$[ebp]
  0005e	0f 14 c2	 unpcklps xmm0, xmm2
  00061	0f 14 cb	 unpcklps xmm1, xmm3
  00064	0f 14 c1	 unpcklps xmm0, xmm1
  00067	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0006b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 84
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	8b e3		 mov	 esp, ebx
  00074	5b		 pop	 ebx
  00075	c3		 ret	 0
?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ENDP		; DirectX::XMVectorSet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorZero@DirectX@@YQ?AT__m128@@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
?XMVectorZero@DirectX@@YQ?AT__m128@@XZ PROC		; DirectX::XMVectorZero, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 51
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 10	 sub	 esp, 16			; 00000010H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00021	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00024	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00027	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 58
  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	0f 29 45 f0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00031	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 61
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	8b e3		 mov	 esp, ebx
  0003a	5b		 pop	 ebx
  0003b	c3		 ret	 0
?XMVectorZero@DirectX@@YQ?AT__m128@@XZ ENDP		; DirectX::XMVectorZero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z
_TEXT	SEGMENT
_M$ = -80						; size = 64
_pDestination$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z PROC ; DirectX::XMStoreFloat4x4, COMDAT
; _pDestination$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 1875
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  0001f	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	0f 29 5d e0	 movaps	 XMMWORD PTR _M$[ebp+48], xmm3
  0003a	0f 29 55 d0	 movaps	 XMMWORD PTR _M$[ebp+32], xmm2
  0003e	0f 29 4d c0	 movaps	 XMMWORD PTR _M$[ebp+16], xmm1
  00042	0f 29 45 b0	 movaps	 XMMWORD PTR _M$[ebp], xmm0
  00046	89 4d f8	 mov	 DWORD PTR _pDestination$[ebp], ecx
; Line 1876
  00049	83 7d f8 00	 cmp	 DWORD PTR _pDestination$[ebp], 0
  0004d	75 21		 jne	 SHORT $LN3@XMStoreFlo
  0004f	8b f4		 mov	 esi, esp
  00051	68 54 07 00 00	 push	 1876			; 00000754H
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMStoreFlo:
; Line 1905
  00070	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00075	6b d1 00	 imul	 edx, ecx, 0
  00078	0f 10 44 15 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+edx]
  0007d	8b 45 f8	 mov	 eax, DWORD PTR _pDestination$[ebp]
  00080	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; Line 1906
  00083	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00088	c1 e1 00	 shl	 ecx, 0
  0008b	0f 10 44 0d b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+ecx]
  00090	8b 55 f8	 mov	 edx, DWORD PTR _pDestination$[ebp]
  00093	83 c2 10	 add	 edx, 16			; 00000010H
  00096	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
; Line 1907
  00099	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0009e	d1 e0		 shl	 eax, 1
  000a0	0f 10 44 05 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+eax]
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _pDestination$[ebp]
  000a8	83 c1 20	 add	 ecx, 32			; 00000020H
  000ab	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; Line 1908
  000ae	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000b3	6b c2 03	 imul	 eax, edx, 3
  000b6	0f 10 44 05 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+eax]
  000bb	8b 4d f8	 mov	 ecx, DWORD PTR _pDestination$[ebp]
  000be	83 c1 30	 add	 ecx, 48			; 00000030H
  000c1	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; Line 1911
  000c4	52		 push	 edx
  000c5	8b cd		 mov	 ecx, ebp
  000c7	50		 push	 eax
  000c8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@XMStoreFlo
  000ce	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d3	58		 pop	 eax
  000d4	5a		 pop	 edx
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000da	33 cd		 xor	 ecx, ebp
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	8b e3		 mov	 esp, ebx
  000e6	5b		 pop	 ebx
  000e7	c3		 ret	 0
$LN6@XMStoreFlo:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN5@XMStoreFlo
$LN5@XMStoreFlo:
  000f0	b0 ff ff ff	 DD	 -80			; ffffffb0H
  000f4	40 00 00 00	 DD	 64			; 00000040H
  000f8	00 00 00 00	 DD	 $LN4@XMStoreFlo
$LN4@XMStoreFlo:
  000fc	4d		 DB	 77			; 0000004dH
  000fd	00		 DB	 0
?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ENDP ; DirectX::XMStoreFloat4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z
_TEXT	SEGMENT
_V$ = -32						; size = 16
_pDestination$ = -4					; size = 4
?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z PROC ; DirectX::XMStoreFloat4, COMDAT
; _pDestination$ = ecx
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 1585
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0001f	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	0f 29 45 e0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
  00030	89 4d fc	 mov	 DWORD PTR _pDestination$[ebp], ecx
; Line 1586
  00033	83 7d fc 00	 cmp	 DWORD PTR _pDestination$[ebp], 0
  00037	75 21		 jne	 SHORT $LN3@XMStoreFlo
  00039	8b f4		 mov	 esi, esp
  0003b	68 32 06 00 00	 push	 1586			; 00000632H
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMStoreFlo:
; Line 1595
  0005a	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR _V$[ebp]
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR _pDestination$[ebp]
  00061	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; Line 1598
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	8b e3		 mov	 esp, ebx
  0006b	5b		 pop	 ebx
  0006c	c3		 ret	 0
?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z ENDP ; DirectX::XMStoreFloat4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z
_TEXT	SEGMENT
$T1 = -96						; size = 16
_T2$ = -80						; size = 16
$T2 = -64						; size = 16
_T1$ = -48						; size = 16
_V$ = -32						; size = 16
_pDestination$ = -4					; size = 4
?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z PROC ; DirectX::XMStoreFloat3, COMDAT
; _pDestination$ = ecx
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 1403
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d 7d 94	 lea	 edi, DWORD PTR [ebp-108]
  0001f	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	0f 29 45 e0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
  00030	89 4d fc	 mov	 DWORD PTR _pDestination$[ebp], ecx
; Line 1404
  00033	83 7d fc 00	 cmp	 DWORD PTR _pDestination$[ebp], 0
  00037	75 21		 jne	 SHORT $LN3@XMStoreFlo
  00039	8b f4		 mov	 esi, esp
  0003b	68 7c 05 00 00	 push	 1404			; 0000057cH
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMStoreFlo:
; Line 1414
  0005a	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0005e	0f c6 45 e0 55	 shufps	 xmm0, XMMWORD PTR _V$[ebp], 85 ; 00000055H
  00063	0f 29 45 c0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00067	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0006b	0f 29 45 d0	 movaps	 XMMWORD PTR _T1$[ebp], xmm0
; Line 1415
  0006f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00073	0f c6 45 e0 aa	 shufps	 xmm0, XMMWORD PTR _V$[ebp], 170 ; 000000aaH
  00078	0f 29 45 a0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0007c	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00080	0f 29 45 b0	 movaps	 XMMWORD PTR _T2$[ebp], xmm0
; Line 1416
  00084	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00088	8b 4d fc	 mov	 ecx, DWORD PTR _pDestination$[ebp]
  0008b	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
; Line 1417
  0008f	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _T1$[ebp]
  00093	8b 55 fc	 mov	 edx, DWORD PTR _pDestination$[ebp]
  00096	83 c2 04	 add	 edx, 4
  00099	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
; Line 1418
  0009d	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _T2$[ebp]
  000a1	8b 45 fc	 mov	 eax, DWORD PTR _pDestination$[ebp]
  000a4	83 c0 08	 add	 eax, 8
  000a7	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
; Line 1421
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	8b e3		 mov	 esp, ebx
  000b2	5b		 pop	 ebx
  000b3	c3		 ret	 0
?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ENDP ; DirectX::XMStoreFloat3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMStoreFloat2@DirectX@@YQXPAUXMFLOAT2@1@T__m128@@@Z
_TEXT	SEGMENT
$T1 = -64						; size = 16
_T$ = -48						; size = 16
_V$ = -32						; size = 16
_pDestination$ = -4					; size = 4
?XMStoreFloat2@DirectX@@YQXPAUXMFLOAT2@1@T__m128@@@Z PROC ; DirectX::XMStoreFloat2, COMDAT
; _pDestination$ = ecx
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 1230
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  0001f	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	0f 29 45 e0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
  00030	89 4d fc	 mov	 DWORD PTR _pDestination$[ebp], ecx
; Line 1231
  00033	83 7d fc 00	 cmp	 DWORD PTR _pDestination$[ebp], 0
  00037	75 21		 jne	 SHORT $LN3@XMStoreFlo
  00039	8b f4		 mov	 esi, esp
  0003b	68 cf 04 00 00	 push	 1231			; 000004cfH
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMStoreFlo:
; Line 1239
  0005a	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0005e	0f c6 45 e0 55	 shufps	 xmm0, XMMWORD PTR _V$[ebp], 85 ; 00000055H
  00063	0f 29 45 c0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00067	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  0006b	0f 29 45 d0	 movaps	 XMMWORD PTR _T$[ebp], xmm0
; Line 1240
  0006f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _pDestination$[ebp]
  00076	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
; Line 1241
  0007a	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _T$[ebp]
  0007e	8b 55 fc	 mov	 edx, DWORD PTR _pDestination$[ebp]
  00081	83 c2 04	 add	 edx, 4
  00084	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
; Line 1244
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	8b e3		 mov	 esp, ebx
  0008f	5b		 pop	 ebx
  00090	c3		 ret	 0
?XMStoreFloat2@DirectX@@YQXPAUXMFLOAT2@1@T__m128@@@Z ENDP ; DirectX::XMStoreFloat2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
$T3 = -128						; size = 16
$T4 = -112						; size = 16
_M$ = -80						; size = 64
_pSource$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z PROC ; DirectX::XMLoadFloat4x4, COMDAT
; _pSource$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 1041
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 54 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-172]
  00025	b9 2b 00 00 00	 mov	 ecx, 43			; 0000002bH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _pSource$[ebp], ecx
; Line 1042
  0003f	83 7d f8 00	 cmp	 DWORD PTR _pSource$[ebp], 0
  00043	75 21		 jne	 SHORT $LN3@XMLoadFloa
  00045	8b f4		 mov	 esi, esp
  00047	68 12 04 00 00	 push	 1042			; 00000412H
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	3b f4		 cmp	 esi, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMLoadFloa:
; Line 1075
  00066	8d 4d b0	 lea	 ecx, DWORD PTR _M$[ebp]
  00069	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 1076
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _pSource$[ebp]
  00071	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00074	0f 29 45 90	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00078	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0007d	6b c2 00	 imul	 eax, edx, 0
  00080	0f 10 45 90	 movups	 xmm0, XMMWORD PTR $T4[ebp]
  00084	0f 11 44 05 b0	 movups	 XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1077
  00089	8b 4d f8	 mov	 ecx, DWORD PTR _pSource$[ebp]
  0008c	83 c1 10	 add	 ecx, 16			; 00000010H
  0008f	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00092	0f 29 45 80	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00096	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0009b	c1 e2 00	 shl	 edx, 0
  0009e	0f 10 45 80	 movups	 xmm0, XMMWORD PTR $T3[ebp]
  000a2	0f 11 44 15 b0	 movups	 XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1078
  000a7	8b 45 f8	 mov	 eax, DWORD PTR _pSource$[ebp]
  000aa	83 c0 20	 add	 eax, 32			; 00000020H
  000ad	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000b0	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000b7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000bc	d1 e1		 shl	 ecx, 1
  000be	0f 10 85 70 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  000c5	0f 11 44 0d b0	 movups	 XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1079
  000ca	8b 55 f8	 mov	 edx, DWORD PTR _pSource$[ebp]
  000cd	83 c2 30	 add	 edx, 48			; 00000030H
  000d0	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  000d3	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000da	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000df	6b c8 03	 imul	 ecx, eax, 3
  000e2	0f 10 85 60 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  000e9	0f 11 44 0d b0	 movups	 XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1080
  000ee	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _M$[ebp]
  000f2	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _M$[ebp+16]
  000f6	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _M$[ebp+32]
  000fa	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1083
  000fe	52		 push	 edx
  000ff	8b cd		 mov	 ecx, ebp
  00101	50		 push	 eax
  00102	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@XMLoadFloa
  00108	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010d	58		 pop	 eax
  0010e	5a		 pop	 edx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00114	33 cd		 xor	 ecx, ebp
  00116	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	8b e3		 mov	 esp, ebx
  00120	5b		 pop	 ebx
  00121	c3		 ret	 0
  00122	8b ff		 npad	 2
$LN6@XMLoadFloa:
  00124	01 00 00 00	 DD	 1
  00128	00 00 00 00	 DD	 $LN5@XMLoadFloa
$LN5@XMLoadFloa:
  0012c	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00130	40 00 00 00	 DD	 64			; 00000040H
  00134	00 00 00 00	 DD	 $LN4@XMLoadFloa
$LN4@XMLoadFloa:
  00138	4d		 DB	 77			; 0000004dH
  00139	00		 DB	 0
?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ENDP ; DirectX::XMLoadFloat4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMLoadFloat4@DirectX@@YQ?AT__m128@@PBUXMFLOAT4@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_pSource$ = -4						; size = 4
?XMLoadFloat4@DirectX@@YQ?AT__m128@@PBUXMFLOAT4@1@@Z PROC ; DirectX::XMLoadFloat4, COMDAT
; _pSource$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 701
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0001f	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	89 4d fc	 mov	 DWORD PTR _pSource$[ebp], ecx
; Line 702
  0002f	83 7d fc 00	 cmp	 DWORD PTR _pSource$[ebp], 0
  00033	75 21		 jne	 SHORT $LN3@XMLoadFloa
  00035	8b f4		 mov	 esi, esp
  00037	68 be 02 00 00	 push	 702			; 000002beH
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMLoadFloa:
; Line 713
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _pSource$[ebp]
  00059	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0005c	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00060	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 716
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	8b e3		 mov	 esp, ebx
  0006b	5b		 pop	 ebx
  0006c	c3		 ret	 0
?XMLoadFloat4@DirectX@@YQ?AT__m128@@PBUXMFLOAT4@1@@Z ENDP ; DirectX::XMLoadFloat4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
_xy$ = -128						; size = 16
$T3 = -112						; size = 16
_z$ = -96						; size = 16
$T4 = -80						; size = 16
_y$ = -64						; size = 16
$T5 = -48						; size = 16
_x$ = -32						; size = 16
_pSource$ = -4						; size = 4
?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z PROC ; DirectX::XMLoadFloat3, COMDAT
; _pSource$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 514
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 54 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-172]
  00025	b9 2b 00 00 00	 mov	 ecx, 43			; 0000002bH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	89 4d fc	 mov	 DWORD PTR _pSource$[ebp], ecx
; Line 515
  00035	83 7d fc 00	 cmp	 DWORD PTR _pSource$[ebp], 0
  00039	75 21		 jne	 SHORT $LN3@XMLoadFloa
  0003b	8b f4		 mov	 esi, esp
  0003d	68 03 02 00 00	 push	 515			; 00000203H
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMLoadFloa:
; Line 529
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _pSource$[ebp]
  0005f	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00063	0f 29 45 d0	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00067	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  0006b	0f 29 45 e0	 movaps	 XMMWORD PTR _x$[ebp], xmm0
; Line 530
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _pSource$[ebp]
  00072	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00077	0f 29 45 b0	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0007b	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  0007f	0f 29 45 c0	 movaps	 XMMWORD PTR _y$[ebp], xmm0
; Line 531
  00083	8b 45 fc	 mov	 eax, DWORD PTR _pSource$[ebp]
  00086	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0008b	0f 29 45 90	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0008f	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00093	0f 29 45 a0	 movaps	 XMMWORD PTR _z$[ebp], xmm0
; Line 532
  00097	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x$[ebp]
  0009b	0f 14 45 c0	 unpcklps xmm0, XMMWORD PTR _y$[ebp]
  0009f	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000a6	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000ad	0f 29 45 80	 movaps	 XMMWORD PTR _xy$[ebp], xmm0
; Line 533
  000b1	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _z$[ebp]
  000b5	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _xy$[ebp]
  000b9	0f 16 c8	 movlhps xmm1, xmm0
  000bc	0f 29 8d 60 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm1
  000c3	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 536
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	8b e3		 mov	 esp, ebx
  000d1	5b		 pop	 ebx
  000d2	c3		 ret	 0
?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ENDP ; DirectX::XMLoadFloat3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMLoadFloat2@DirectX@@YQ?AT__m128@@PBUXMFLOAT2@1@@Z
_TEXT	SEGMENT
$T1 = -96						; size = 16
$T2 = -80						; size = 16
_y$ = -64						; size = 16
$T3 = -48						; size = 16
_x$ = -32						; size = 16
_pSource$ = -4						; size = 4
?XMLoadFloat2@DirectX@@YQ?AT__m128@@PBUXMFLOAT2@1@@Z PROC ; DirectX::XMLoadFloat2, COMDAT
; _pSource$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 331
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d 7d 94	 lea	 edi, DWORD PTR [ebp-108]
  0001f	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	89 4d fc	 mov	 DWORD PTR _pSource$[ebp], ecx
; Line 332
  0002f	83 7d fc 00	 cmp	 DWORD PTR _pSource$[ebp], 0
  00033	75 21		 jne	 SHORT $LN3@XMLoadFloa
  00035	8b f4		 mov	 esi, esp
  00037	68 4c 01 00 00	 push	 332			; 0000014cH
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMLoadFloa:
; Line 345
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _pSource$[ebp]
  00059	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0005d	0f 29 45 d0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00061	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00065	0f 29 45 e0	 movaps	 XMMWORD PTR _x$[ebp], xmm0
; Line 346
  00069	8b 55 fc	 mov	 edx, DWORD PTR _pSource$[ebp]
  0006c	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00071	0f 29 45 b0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00075	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00079	0f 29 45 c0	 movaps	 XMMWORD PTR _y$[ebp], xmm0
; Line 347
  0007d	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x$[ebp]
  00081	0f 14 45 c0	 unpcklps xmm0, XMMWORD PTR _y$[ebp]
  00085	0f 29 45 a0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00089	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 350
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	8b e3		 mov	 esp, ebx
  00094	5b		 pop	 ebx
  00095	c3		 ret	 0
?XMLoadFloat2@DirectX@@YQ?AT__m128@@PBUXMFLOAT2@1@@Z ENDP ; DirectX::XMLoadFloat2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT4X4@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMFLOAT4X4@DirectX@@QAE@XZ PROC			; DirectX::XMFLOAT4X4::XMFLOAT4X4, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 716
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0XMFLOAT4X4@DirectX@@QAE@XZ ENDP			; DirectX::XMFLOAT4X4::XMFLOAT4X4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4XMFLOAT4@DirectX@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Float4$ = 8						; size = 4
??4XMFLOAT4@DirectX@@QAEAAU01@ABU01@@Z PROC		; DirectX::XMFLOAT4::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 582
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _Float4$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 10		 mov	 DWORD PTR [eax], edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _Float4$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _Float4$[ebp]
  0002a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002d	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _Float4$[ebp]
  00036	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00039	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??4XMFLOAT4@DirectX@@QAEAAU01@ABU01@@Z ENDP		; DirectX::XMFLOAT4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT4@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMFLOAT4@DirectX@@QAE@XZ PROC			; DirectX::XMFLOAT4::XMFLOAT4, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 578
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0XMFLOAT4@DirectX@@QAE@XZ ENDP			; DirectX::XMFLOAT4::XMFLOAT4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Float3$ = 8						; size = 4
??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z PROC		; DirectX::XMFLOAT3::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 527
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _Float3$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 10		 mov	 DWORD PTR [eax], edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _Float3$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _Float3$[ebp]
  0002a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002d	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ENDP		; DirectX::XMFLOAT3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT3@DirectX@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0XMFLOAT3@DirectX@@QAE@MMM@Z PROC			; DirectX::XMFLOAT3::XMFLOAT3, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 524
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __x$[ebp]
  00016	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __y$[ebp]
  00022	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00027	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR __z$[ebp]
  0002f	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 0c 00	 ret	 12			; 0000000cH
??0XMFLOAT3@DirectX@@QAE@MMM@Z ENDP			; DirectX::XMFLOAT3::XMFLOAT3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT3@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMFLOAT3@DirectX@@QAE@XZ PROC			; DirectX::XMFLOAT3::XMFLOAT3, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 523
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0XMFLOAT3@DirectX@@QAE@XZ ENDP			; DirectX::XMFLOAT3::XMFLOAT3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4XMFLOAT2@DirectX@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Float2$ = 8						; size = 4
??4XMFLOAT2@DirectX@@QAEAAU01@ABU01@@Z PROC		; DirectX::XMFLOAT2::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 475
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _Float2$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 10		 mov	 DWORD PTR [eax], edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _Float2$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??4XMFLOAT2@DirectX@@QAEAAU01@ABU01@@Z ENDP		; DirectX::XMFLOAT2::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT2@DirectX@@QAE@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
??0XMFLOAT2@DirectX@@QAE@MM@Z PROC			; DirectX::XMFLOAT2::XMFLOAT2, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 472
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __x$[ebp]
  00016	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __y$[ebp]
  00022	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
??0XMFLOAT2@DirectX@@QAE@MM@Z ENDP			; DirectX::XMFLOAT2::XMFLOAT2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT2@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMFLOAT2@DirectX@@QAE@XZ PROC			; DirectX::XMFLOAT2::XMFLOAT2, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 471
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0XMFLOAT2@DirectX@@QAE@XZ ENDP			; DirectX::XMFLOAT2::XMFLOAT2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 64
$T2 = -160						; size = 64
_this$ = -92						; size = 4
___$ReturnUdt$ = -88					; size = 4
_M$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z PROC		; DirectX::XMMATRIX::operator*, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = edx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 3091
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	0f 29 5d e0	 movaps	 XMMWORD PTR _M$[ebp+48], xmm3
  00040	0f 29 55 d0	 movaps	 XMMWORD PTR _M$[ebp+32], xmm2
  00044	0f 29 4d c0	 movaps	 XMMWORD PTR _M$[ebp+16], xmm1
  00048	0f 29 45 b0	 movaps	 XMMWORD PTR _M$[ebp], xmm0
  0004c	89 55 a8	 mov	 DWORD PTR ___$ReturnUdt$[ebp], edx
  0004f	89 4d a4	 mov	 DWORD PTR _this$[ebp], ecx
; Line 3092
  00052	8b 45 a4	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8d 4d b0	 lea	 ecx, DWORD PTR _M$[ebp]
  00058	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  0005b	0f 28 48 10	 movaps	 xmm1, XMMWORD PTR [eax+16]
  0005f	0f 28 50 20	 movaps	 xmm2, XMMWORD PTR [eax+32]
  00063	0f 28 58 30	 movaps	 xmm3, XMMWORD PTR [eax+48]
  00067	e8 00 00 00 00	 call	 ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
  0006c	0f 29 9d 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00073	0f 29 95 40 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  0007a	0f 29 8d 30 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  00081	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00088	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0008d	8d b5 20 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00093	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR $T2[ebp]
  00099	f3 a5		 rep movsd
  0009b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000a0	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR $T2[ebp]
  000a6	8b 7d a8	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  000a9	f3 a5		 rep movsd
  000ab	8b 45 a8	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 3093
  000ae	52		 push	 edx
  000af	8b cd		 mov	 ecx, ebp
  000b1	50		 push	 eax
  000b2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@operator
  000b8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bd	58		 pop	 eax
  000be	5a		 pop	 edx
  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c4	33 cd		 xor	 ecx, ebp
  000c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	8b e3		 mov	 esp, ebx
  000d0	5b		 pop	 ebx
  000d1	c3		 ret	 0
  000d2	8b ff		 npad	 2
$LN5@operator:
  000d4	01 00 00 00	 DD	 1
  000d8	00 00 00 00	 DD	 $LN4@operator
$LN4@operator:
  000dc	b0 ff ff ff	 DD	 -80			; ffffffb0H
  000e0	40 00 00 00	 DD	 64			; 00000040H
  000e4	00 00 00 00	 DD	 $LN3@operator
$LN3@operator:
  000e8	4d		 DB	 77			; 0000004dH
  000e9	00		 DB	 0
??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ENDP		; DirectX::XMMATRIX::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??XXMMATRIX@DirectX@@QAQAAU01@U01@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 64
$T2 = -160						; size = 64
_this$ = -88						; size = 4
_M$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
??XXMMATRIX@DirectX@@QAQAAU01@U01@@Z PROC		; DirectX::XMMATRIX::operator*=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 3012
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	0f 29 5d e0	 movaps	 XMMWORD PTR _M$[ebp+48], xmm3
  00040	0f 29 55 d0	 movaps	 XMMWORD PTR _M$[ebp+32], xmm2
  00044	0f 29 4d c0	 movaps	 XMMWORD PTR _M$[ebp+16], xmm1
  00048	0f 29 45 b0	 movaps	 XMMWORD PTR _M$[ebp], xmm0
  0004c	89 4d a8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 3013
  0004f	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8d 4d b0	 lea	 ecx, DWORD PTR _M$[ebp]
  00055	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  00058	0f 28 48 10	 movaps	 xmm1, XMMWORD PTR [eax+16]
  0005c	0f 28 50 20	 movaps	 xmm2, XMMWORD PTR [eax+32]
  00060	0f 28 58 30	 movaps	 xmm3, XMMWORD PTR [eax+48]
  00064	e8 00 00 00 00	 call	 ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
  00069	0f 29 9d 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00070	0f 29 95 40 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  00077	0f 29 8d 30 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  0007e	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00085	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0008a	8d b5 20 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00090	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR $T2[ebp]
  00096	f3 a5		 rep movsd
  00098	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0009e	51		 push	 ecx
  0009f	8b 4d a8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	e8 00 00 00 00	 call	 ??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMMATRIX::operator=
; Line 3014
  000a7	8b 45 a8	 mov	 eax, DWORD PTR _this$[ebp]
; Line 3015
  000aa	52		 push	 edx
  000ab	8b cd		 mov	 ecx, ebp
  000ad	50		 push	 eax
  000ae	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@operator
  000b4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b9	58		 pop	 eax
  000ba	5a		 pop	 edx
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c0	33 cd		 xor	 ecx, ebp
  000c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	8b e3		 mov	 esp, ebx
  000cc	5b		 pop	 ebx
  000cd	c3		 ret	 0
  000ce	8b ff		 npad	 2
$LN5@operator:
  000d0	01 00 00 00	 DD	 1
  000d4	00 00 00 00	 DD	 $LN4@operator
$LN4@operator:
  000d8	b0 ff ff ff	 DD	 -80			; ffffffb0H
  000dc	40 00 00 00	 DD	 64			; 00000040H
  000e0	00 00 00 00	 DD	 $LN3@operator
$LN3@operator:
  000e4	4d		 DB	 77			; 0000004dH
  000e5	00		 DB	 0
??XXMMATRIX@DirectX@@QAQAAU01@U01@@Z ENDP		; DirectX::XMMATRIX::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_M$ = 8							; size = 4
??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z PROC		; DirectX::XMMATRIX::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 444
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00013	6b c8 00	 imul	 ecx, eax, 0
  00016	03 4d 08	 add	 ecx, DWORD PTR _M$[ebp]
  00019	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00024	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00027	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0002a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0002f	c1 e1 00	 shl	 ecx, 0
  00032	03 4d 08	 add	 ecx, DWORD PTR _M$[ebp]
  00035	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0003a	c1 e2 00	 shl	 edx, 0
  0003d	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  00040	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00043	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  00046	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004b	d1 e0		 shl	 eax, 1
  0004d	03 45 08	 add	 eax, DWORD PTR _M$[ebp]
  00050	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00055	d1 e1		 shl	 ecx, 1
  00057	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  0005a	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0005d	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00060	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00065	6b c2 03	 imul	 eax, edx, 3
  00068	03 45 08	 add	 eax, DWORD PTR _M$[ebp]
  0006b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00070	6b d1 03	 imul	 edx, ecx, 3
  00073	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  00076	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00079	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z ENDP		; DirectX::XMMATRIX::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMMATRIX@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMMATRIX@DirectX@@QAE@XZ PROC			; DirectX::XMMATRIX::XMMATRIX, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 431
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0XMMATRIX@DirectX@@QAE@XZ ENDP			; DirectX::XMMATRIX::XMMATRIX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??KDirectX@@YQ?AT__m128@@T1@M@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
$T2 = -64						; size = 16
_vS$ = -48						; size = 16
_S$ = -20						; size = 4
_V$ = -16						; size = 16
??KDirectX@@YQ?AT__m128@@T1@M@Z PROC			; DirectX::operator/, COMDAT
; _V$ = xmm0
; _S$ = xmm1s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 14253
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 50	 sub	 esp, 80			; 00000050H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0001e	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	f3 0f 11 4d ec	 movss	 DWORD PTR _S$[ebp], xmm1
  00030	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 14254
  00034	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _S$[ebp]
  00039	e8 00 00 00 00	 call	 ?XMVectorReplicate@DirectX@@YQ?AT__m128@@M@Z ; DirectX::XMVectorReplicate
  0003e	0f 29 45 c0	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00042	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00046	0f 29 45 d0	 movaps	 XMMWORD PTR _vS$[ebp], xmm0
; Line 14255
  0004a	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _vS$[ebp]
  0004e	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00052	e8 00 00 00 00	 call	 ?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorDivide
  00057	0f 29 45 b0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0005b	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 14256
  0005f	5f		 pop	 edi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	8b e3		 mov	 esp, ebx
  00065	5b		 pop	 ebx
  00066	c3		 ret	 0
??KDirectX@@YQ?AT__m128@@T1@M@Z ENDP			; DirectX::operator/
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??DDirectX@@YQ?AT__m128@@T1@M@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_S$ = -20						; size = 4
_V$ = -16						; size = 16
??DDirectX@@YQ?AT__m128@@T1@M@Z PROC			; DirectX::operator*, COMDAT
; _V$ = xmm0
; _S$ = xmm1s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 14242
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	f3 0f 11 4d ec	 movss	 DWORD PTR _S$[ebp], xmm1
  00030	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 14243
  00034	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00038	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _S$[ebp]
  0003d	e8 00 00 00 00	 call	 ?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z ; DirectX::XMVectorScale
  00042	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00046	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 14244
  0004a	5f		 pop	 edi
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	8b e3		 mov	 esp, ebx
  00050	5b		 pop	 ebx
  00051	c3		 ret	 0
??DDirectX@@YQ?AT__m128@@T1@M@Z ENDP			; DirectX::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??GDirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
??GDirectX@@YQ?AT__m128@@T1@0@Z PROC			; DirectX::operator-, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 14209
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 14210
  00033	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _V2$[ebp]
  00037	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  0003b	e8 00 00 00 00	 call	 ?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorSubtract
  00040	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00044	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 14211
  00048	5f		 pop	 edi
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	8b e3		 mov	 esp, ebx
  0004e	5b		 pop	 ebx
  0004f	c3		 ret	 0
??GDirectX@@YQ?AT__m128@@T1@0@Z ENDP			; DirectX::operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??HDirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
??HDirectX@@YQ?AT__m128@@T1@0@Z PROC			; DirectX::operator+, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 14198
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 14199
  00033	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _V2$[ebp]
  00037	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  0003b	e8 00 00 00 00	 call	 ?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorAdd
  00040	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00044	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 14200
  00048	5f		 pop	 edi
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	8b e3		 mov	 esp, ebx
  0004e	5b		 pop	 ebx
  0004f	c3		 ret	 0
??HDirectX@@YQ?AT__m128@@T1@0@Z ENDP			; DirectX::operator+
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??XDirectX@@YAAAT__m128@@AAT1@M@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_V$ = 8							; size = 4
_S$ = 12						; size = 4
??XDirectX@@YAAAT__m128@@AAT1@M@Z PROC			; DirectX::operator*=, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 14173
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 10	 sub	 esp, 16			; 00000010H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00021	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00024	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00027	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 14174
  0002a	8b 43 08	 mov	 eax, DWORD PTR _V$[ebx]
  0002d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00030	f3 0f 10 4b 0c	 movss	 xmm1, DWORD PTR _S$[ebx]
  00035	e8 00 00 00 00	 call	 ?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z ; DirectX::XMVectorScale
  0003a	0f 29 45 f0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0003e	8b 4b 08	 mov	 ecx, DWORD PTR _V$[ebx]
  00041	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  00045	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; Line 14175
  00048	8b 43 08	 mov	 eax, DWORD PTR _V$[ebx]
; Line 14176
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	8b e3		 mov	 esp, ebx
  00050	5b		 pop	 ebx
  00051	c3		 ret	 0
??XDirectX@@YAAAT__m128@@AAT1@M@Z ENDP			; DirectX::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??ZDirectX@@YQAAT__m128@@AAT1@T1@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -4						; size = 4
??ZDirectX@@YQAAT__m128@@AAT1@T1@@Z PROC		; DirectX::operator-=, COMDAT
; _V1$ = ecx
; _V2$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 14137
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 45 e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm0
  0002f	89 4d fc	 mov	 DWORD PTR _V1$[ebp], ecx
; Line 14138
  00032	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _V2$[ebp]
  00036	8b 45 fc	 mov	 eax, DWORD PTR _V1$[ebp]
  00039	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0003c	e8 00 00 00 00	 call	 ?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorSubtract
  00041	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _V1$[ebp]
  00048	0f 10 45 d0	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  0004c	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; Line 14139
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _V1$[ebp]
; Line 14140
  00052	5f		 pop	 edi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	8b e3		 mov	 esp, ebx
  00058	5b		 pop	 ebx
  00059	c3		 ret	 0
??ZDirectX@@YQAAT__m128@@AAT1@T1@@Z ENDP		; DirectX::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YDirectX@@YQAAT__m128@@AAT1@T1@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -4						; size = 4
??YDirectX@@YQAAT__m128@@AAT1@T1@@Z PROC		; DirectX::operator+=, COMDAT
; _V1$ = ecx
; _V2$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 14125
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 45 e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm0
  0002f	89 4d fc	 mov	 DWORD PTR _V1$[ebp], ecx
; Line 14126
  00032	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _V2$[ebp]
  00036	8b 45 fc	 mov	 eax, DWORD PTR _V1$[ebp]
  00039	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0003c	e8 00 00 00 00	 call	 ?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorAdd
  00041	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _V1$[ebp]
  00048	0f 10 45 d0	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  0004c	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; Line 14127
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _V1$[ebp]
; Line 14128
  00052	5f		 pop	 edi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	8b e3		 mov	 esp, ebx
  00058	5b		 pop	 ebx
  00059	c3		 ret	 0
??YDirectX@@YQAAT__m128@@AAT1@T1@@Z ENDP		; DirectX::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ PROC		; DirectX::XMVECTORU32::operator __m128, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 360
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00017	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ ENDP		; DirectX::XMVECTORU32::operator __m128
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ PROC		; DirectX::XMVECTORI32::operator __m128, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 330
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00017	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ENDP		; DirectX::XMVECTORI32::operator __m128
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ PROC		; DirectX::XMVECTORF32::operator __m128, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 314
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00017	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ENDP		; DirectX::XMVECTORF32::operator __m128
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 774
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 775
  0000b	f3 0f 51 45 08	 sqrtss	 xmm0, DWORD PTR __X$[ebp]
  00010	f3 0f 11 45 fc	 movss	 DWORD PTR tv70[ebp], xmm0
  00015	d9 45 fc	 fld	 DWORD PTR tv70[ebp]
; Line 776
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 686
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 687
  0000b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]
  00010	0f 54 05 00 00
	00 00		 andps	 xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
  00017	f3 0f 11 45 fc	 movss	 DWORD PTR tv71[ebp], xmm0
  0001c	d9 45 fc	 fld	 DWORD PTR tv71[ebp]
; Line 688
  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _atan2f
_TEXT	SEGMENT
tv72 = -4						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 648
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 649
  0000b	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  00010	f3 0f 5a 4d 0c	 cvtss2sd xmm1, DWORD PTR __X$[ebp]
  00015	e8 00 00 00 00	 call	 ___libm_sse2_atan2
  0001a	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0001e	f3 0f 11 45 fc	 movss	 DWORD PTR tv72[ebp], xmm0
  00023	d9 45 fc	 fld	 DWORD PTR tv72[ebp]
; Line 650
  00026	83 c4 04	 add	 esp, 4
  00029	3b ec		 cmp	 ebp, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
_atan2f	ENDP
_TEXT	ENDS
END
