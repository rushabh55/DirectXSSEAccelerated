; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	D:\Engine Class\Assignment 1\New Scratch\DXUT\Optional\ImeUi.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__GUID_aa80e801_2021_11d2_93e0_0060b067b86e
PUBLIC	?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA ; _GetReadingString
PUBLIC	?_ShowReadingWindow@@3P6GHPAUHIMC__@@H@ZA	; _ShowReadingWindow
PUBLIC	?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A	; CTsfUiLessMode::m_tm
PUBLIC	?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA	; CTsfUiLessMode::m_dwUIElementSinkCookie
PUBLIC	?m_dwAlpnSinkCookie@CTsfUiLessMode@@1KA		; CTsfUiLessMode::m_dwAlpnSinkCookie
PUBLIC	?m_dwOpenModeSinkCookie@CTsfUiLessMode@@1KA	; CTsfUiLessMode::m_dwOpenModeSinkCookie
PUBLIC	?m_dwConvModeSinkCookie@CTsfUiLessMode@@1KA	; CTsfUiLessMode::m_dwConvModeSinkCookie
PUBLIC	?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
PUBLIC	?m_nCandidateRefCount@CTsfUiLessMode@@1HA	; CTsfUiLessMode::m_nCandidateRefCount
PUBLIC	?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA		; ImeUiCallback_DrawRect
PUBLIC	?ImeUiCallback_Malloc@@3P6APAXI@ZA		; ImeUiCallback_Malloc
PUBLIC	?ImeUiCallback_Free@@3P6AXPAX@ZA		; ImeUiCallback_Free
PUBLIC	?ImeUiCallback_DrawFans@@3P6GXPBUIMEUI_VERTEX@@I@ZA ; ImeUiCallback_DrawFans
PUBLIC	?ImeUiCallback_OnChar@@3P6GX_W@ZA		; ImeUiCallback_OnChar
PUBLIC	__GUID_87955690_e627_11d2_8ddb_00105a2799b5
PUBLIC	_GUID_TS_SERVICE_DATAOBJECT
PUBLIC	_GUID_TS_SERVICE_ACCESSIBLE
PUBLIC	_GUID_TS_SERVICE_ACTIVEX
PUBLIC	__GUID_3e90ade3_7594_4cb0_bb58_69628f5f458c
PUBLIC	__GUID_4ea48a35_60ae_446f_8fd6_e6a8d82459f7
PUBLIC	__GUID_ea1ea136_19df_11d7_a6d2_00065b84435c
PUBLIC	__GUID_71c6e74e_0f28_11d8_a82a_00065b84435c
PUBLIC	__GUID_743abd5f_f26d_48df_8cc5_238492419b64
PUBLIC	__GUID_ea1ea139_19df_11d7_a6d2_00065b84435c
PUBLIC	__GUID_ea1ea138_19df_11d7_a6d2_00065b84435c
PUBLIC	_TF_PROFILE_NEWPHONETIC
PUBLIC	_TF_PROFILE_PHONETIC
PUBLIC	_TF_PROFILE_NEWCHANGJIE
PUBLIC	_TF_PROFILE_CHANGJIE
PUBLIC	_TF_PROFILE_NEWQUICK
PUBLIC	_TF_PROFILE_QUICK
PUBLIC	_TF_PROFILE_CANTONESE
PUBLIC	_TF_PROFILE_PINYIN
PUBLIC	_TF_PROFILE_SIMPLEFAST
PUBLIC	_TF_PROFILE_WUBI
PUBLIC	_TF_PROFILE_DAYI
PUBLIC	_TF_PROFILE_ARRAY
PUBLIC	_TF_PROFILE_YI
PUBLIC	_TF_PROFILE_TIGRINYA
PUBLIC	__GUID_ea1ea135_19df_11d7_a6d2_00065b84435c
PUBLIC	__GUID_1f02b6c5_7842_4ee6_8a0b_9a24183a95ca
PUBLIC	__GUID_71c6e74c_0f28_11d8_a82a_00065b84435c
PUBLIC	?gSkinCompStr@@3U_SkinCompStr@@A		; gSkinCompStr
_BSS	SEGMENT
?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA DD 01H DUP (?) ; _GetReadingString
?_ShowReadingWindow@@3P6GHPAUHIMC__@@H@ZA DD 01H DUP (?) ; _ShowReadingWindow
_g_bImeEnabled DB 01H DUP (?)
	ALIGN	4

_g_IMECursorBytes DD 01H DUP (?)
_g_IMECursorChars DD 01H DUP (?)
_g_bDisableImeCompletely DD 01H DUP (?)
_g_bReadingWindow DB 01H DUP (?)
	ALIGN	4

_g_bHorizontalReading DB 01H DUP (?)
	ALIGN	4

_g_uCaretBlinkTime DD 01H DUP (?)
_g_uCaretBlinkLast DD 01H DUP (?)
_g_bCaretDraw DB 01H DUP (?)
	ALIGN	4

_bIsSendingKeyMessage DB 01H DUP (?)
	ALIGN	4

_g_bInitialized DB 01H DUP (?)
	ALIGN	4

_g_bCandList DB	01H DUP (?)
	ALIGN	4

_g_bUILessMode DB 01H DUP (?)
	ALIGN	4

_g_hImmDll DD	01H DUP (?)
_g_dwState DD	01H DUP (?)
_swirl	DD	01H DUP (?)
_g_hklCurrent DD 01H DUP (?)
_g_uCodePage DD	01H DUP (?)
?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A DD 01H DUP (?) ; CTsfUiLessMode::m_tm
?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A DD 01H DUP (?) ; CTsfUiLessMode::m_TsfSink
?m_nCandidateRefCount@CTsfUiLessMode@@1HA DD 01H DUP (?) ; CTsfUiLessMode::m_nCandidateRefCount
?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA DD 01H DUP (?)	; ImeUiCallback_DrawRect
?ImeUiCallback_Malloc@@3P6APAXI@ZA DD 01H DUP (?)	; ImeUiCallback_Malloc
?ImeUiCallback_Free@@3P6AXPAX@ZA DD 01H DUP (?)		; ImeUiCallback_Free
?ImeUiCallback_DrawFans@@3P6GXPBUIMEUI_VERTEX@@I@ZA DD 01H DUP (?) ; ImeUiCallback_DrawFans
?ImeUiCallback_OnChar@@3P6GX_W@ZA DD 01H DUP (?)	; ImeUiCallback_OnChar
?gSkinCompStr@@3U_SkinCompStr@@A DB 014H DUP (?)	; gSkinCompStr
_BSS	ENDS
;	COMDAT __GUID_71c6e74c_0f28_11d8_a82a_00065b84435c
CONST	SEGMENT
__GUID_71c6e74c_0f28_11d8_a82a_00065b84435c DD 071c6e74cH
	DW	0f28H
	DW	011d8H
	DB	0a8H
	DB	02aH
	DB	00H
	DB	06H
	DB	05bH
	DB	084H
	DB	043H
	DB	05cH
CONST	ENDS
;	COMDAT __GUID_1f02b6c5_7842_4ee6_8a0b_9a24183a95ca
CONST	SEGMENT
__GUID_1f02b6c5_7842_4ee6_8a0b_9a24183a95ca DD 01f02b6c5H
	DW	07842H
	DW	04ee6H
	DB	08aH
	DB	0bH
	DB	09aH
	DB	024H
	DB	018H
	DB	03aH
	DB	095H
	DB	0caH
CONST	ENDS
;	COMDAT __GUID_ea1ea135_19df_11d7_a6d2_00065b84435c
CONST	SEGMENT
__GUID_ea1ea135_19df_11d7_a6d2_00065b84435c DD 0ea1ea135H
	DW	019dfH
	DW	011d7H
	DB	0a6H
	DB	0d2H
	DB	00H
	DB	06H
	DB	05bH
	DB	084H
	DB	043H
	DB	05cH
CONST	ENDS
;	COMDAT _TF_PROFILE_TIGRINYA
CONST	SEGMENT
_TF_PROFILE_TIGRINYA DD 03cab88b7H
	DW	0cc3eH
	DW	046a6H
	DB	097H
	DB	065H
	DB	0b7H
	DB	072H
	DB	0adH
	DB	077H
	DB	061H
	DB	0ffH
CONST	ENDS
;	COMDAT _TF_PROFILE_YI
CONST	SEGMENT
_TF_PROFILE_YI DD 0409c8376H
	DW	07bH
	DW	04357H
	DB	0aeH
	DB	08eH
	DB	026H
	DB	031H
	DB	06eH
	DB	0e3H
	DB	0fbH
	DB	0dH
CONST	ENDS
;	COMDAT _TF_PROFILE_ARRAY
CONST	SEGMENT
_TF_PROFILE_ARRAY DD 0d38eff65H
	DW	0aa46H
	DW	04fd5H
	DB	091H
	DB	0a7H
	DB	067H
	DB	084H
	DB	05fH
	DB	0b0H
	DB	02fH
	DB	05bH
CONST	ENDS
;	COMDAT _TF_PROFILE_DAYI
CONST	SEGMENT
_TF_PROFILE_DAYI DD 037b2c25H
	DW	0480cH
	DW	04d7fH
	DB	0b0H
	DB	027H
	DB	0d6H
	DB	0caH
	DB	06bH
	DB	069H
	DB	078H
	DB	08aH
CONST	ENDS
;	COMDAT _TF_PROFILE_WUBI
CONST	SEGMENT
_TF_PROFILE_WUBI DD 082590c13H
	DW	0f4ddH
	DW	044f4H
	DB	0baH
	DB	01dH
	DB	086H
	DB	067H
	DB	024H
	DB	06fH
	DB	0dfH
	DB	08eH
CONST	ENDS
;	COMDAT _TF_PROFILE_SIMPLEFAST
CONST	SEGMENT
_TF_PROFILE_SIMPLEFAST DD 0fa550b04H
	DW	05ad7H
	DW	0411fH
	DB	0a5H
	DB	0acH
	DB	0caH
	DB	03H
	DB	08eH
	DB	0c5H
	DB	015H
	DB	0d7H
CONST	ENDS
;	COMDAT _TF_PROFILE_PINYIN
CONST	SEGMENT
_TF_PROFILE_PINYIN DD 0f3ba9077H
	DW	06c7eH
	DW	011d4H
	DB	097H
	DB	0faH
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT _TF_PROFILE_CANTONESE
CONST	SEGMENT
_TF_PROFILE_CANTONESE DD 0aec109cH
	DW	07e96H
	DW	011d4H
	DB	0b2H
	DB	0efH
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT _TF_PROFILE_QUICK
CONST	SEGMENT
_TF_PROFILE_QUICK DD 06024b45fH
	DW	05c54H
	DW	011d4H
	DB	0b9H
	DB	021H
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT _TF_PROFILE_NEWQUICK
CONST	SEGMENT
_TF_PROFILE_NEWQUICK DD 0b883ba0H
	DW	0c1c7H
	DW	011d4H
	DB	087H
	DB	0f9H
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT _TF_PROFILE_CHANGJIE
CONST	SEGMENT
_TF_PROFILE_CHANGJIE DD 04bdf9f03H
	DW	0c7d3H
	DW	011d4H
	DB	0b2H
	DB	0abH
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT _TF_PROFILE_NEWCHANGJIE
CONST	SEGMENT
_TF_PROFILE_NEWCHANGJIE DD 0f3ba907aH
	DW	06c7eH
	DW	011d4H
	DB	097H
	DB	0faH
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT _TF_PROFILE_PHONETIC
CONST	SEGMENT
_TF_PROFILE_PHONETIC DD 0761309deH
	DW	0317aH
	DW	011d4H
	DB	09bH
	DB	05dH
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT _TF_PROFILE_NEWPHONETIC
CONST	SEGMENT
_TF_PROFILE_NEWPHONETIC DD 0b2f9c502H
	DW	01742H
	DW	011d4H
	DB	097H
	DB	090H
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT __GUID_ea1ea138_19df_11d7_a6d2_00065b84435c
CONST	SEGMENT
__GUID_ea1ea138_19df_11d7_a6d2_00065b84435c DD 0ea1ea138H
	DW	019dfH
	DW	011d7H
	DB	0a6H
	DB	0d2H
	DB	00H
	DB	06H
	DB	05bH
	DB	084H
	DB	043H
	DB	05cH
CONST	ENDS
;	COMDAT __GUID_ea1ea139_19df_11d7_a6d2_00065b84435c
CONST	SEGMENT
__GUID_ea1ea139_19df_11d7_a6d2_00065b84435c DD 0ea1ea139H
	DW	019dfH
	DW	011d7H
	DB	0a6H
	DB	0d2H
	DB	00H
	DB	06H
	DB	05bH
	DB	084H
	DB	043H
	DB	05cH
CONST	ENDS
;	COMDAT __GUID_743abd5f_f26d_48df_8cc5_238492419b64
CONST	SEGMENT
__GUID_743abd5f_f26d_48df_8cc5_238492419b64 DD 0743abd5fH
	DW	0f26dH
	DW	048dfH
	DB	08cH
	DB	0c5H
	DB	023H
	DB	084H
	DB	092H
	DB	041H
	DB	09bH
	DB	064H
CONST	ENDS
;	COMDAT __GUID_71c6e74e_0f28_11d8_a82a_00065b84435c
CONST	SEGMENT
__GUID_71c6e74e_0f28_11d8_a82a_00065b84435c DD 071c6e74eH
	DW	0f28H
	DW	011d8H
	DB	0a8H
	DB	02aH
	DB	00H
	DB	06H
	DB	05bH
	DB	084H
	DB	043H
	DB	05cH
CONST	ENDS
;	COMDAT __GUID_ea1ea136_19df_11d7_a6d2_00065b84435c
CONST	SEGMENT
__GUID_ea1ea136_19df_11d7_a6d2_00065b84435c DD 0ea1ea136H
	DW	019dfH
	DW	011d7H
	DB	0a6H
	DB	0d2H
	DB	00H
	DB	06H
	DB	05bH
	DB	084H
	DB	043H
	DB	05cH
CONST	ENDS
;	COMDAT __GUID_4ea48a35_60ae_446f_8fd6_e6a8d82459f7
CONST	SEGMENT
__GUID_4ea48a35_60ae_446f_8fd6_e6a8d82459f7 DD 04ea48a35H
	DW	060aeH
	DW	0446fH
	DB	08fH
	DB	0d6H
	DB	0e6H
	DB	0a8H
	DB	0d8H
	DB	024H
	DB	059H
	DB	0f7H
CONST	ENDS
;	COMDAT __GUID_3e90ade3_7594_4cb0_bb58_69628f5f458c
CONST	SEGMENT
__GUID_3e90ade3_7594_4cb0_bb58_69628f5f458c DD 03e90ade3H
	DW	07594H
	DW	04cb0H
	DB	0bbH
	DB	058H
	DB	069H
	DB	062H
	DB	08fH
	DB	05fH
	DB	045H
	DB	08cH
CONST	ENDS
;	COMDAT _GUID_TS_SERVICE_ACTIVEX
CONST	SEGMENT
_GUID_TS_SERVICE_ACTIVEX DD 0ea937a50H
	DW	0c9a6H
	DW	04b7dH
	DB	089H
	DB	04aH
	DB	049H
	DB	0d9H
	DB	09bH
	DB	078H
	DB	048H
	DB	034H
CONST	ENDS
;	COMDAT _GUID_TS_SERVICE_ACCESSIBLE
CONST	SEGMENT
_GUID_TS_SERVICE_ACCESSIBLE DD 0f9786200H
	DW	0a5bfH
	DW	04a0fH
	DB	08cH
	DB	024H
	DB	0fbH
	DB	016H
	DB	0f5H
	DB	0d1H
	DB	0aaH
	DB	0bbH
CONST	ENDS
;	COMDAT _GUID_TS_SERVICE_DATAOBJECT
CONST	SEGMENT
_GUID_TS_SERVICE_DATAOBJECT DD 06086fbb5H
	DW	0e225H
	DW	046ceH
	DB	0a7H
	DB	070H
	DB	0c1H
	DB	0bbH
	DB	0d3H
	DB	0e0H
	DB	05dH
	DB	07bH
CONST	ENDS
;	COMDAT __GUID_87955690_e627_11d2_8ddb_00105a2799b5
CONST	SEGMENT
__GUID_87955690_e627_11d2_8ddb_00105a2799b5 DD 087955690H
	DW	0e627H
	DW	011d2H
	DB	08dH
	DB	0dbH
	DB	00H
	DB	010H
	DB	05aH
	DB	027H
	DB	099H
	DB	0b5H
CONST	ENDS
_DATA	SEGMENT
_g_bVerticalCand DB 01H
_g_bInsertMode DB 01H
	ORG $+2
_g_dwImeUiFlags DD 01H
_g_aszIndicator DD FLAT:$SG152772
	DD	FLAT:$SG152773
	DD	FLAT:$SG152774
	DD	FLAT:$SG152775
	DD	FLAT:$SG152776
?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA DD 0ffffffffH ; CTsfUiLessMode::m_dwUIElementSinkCookie
?m_dwAlpnSinkCookie@CTsfUiLessMode@@1KA DD 0ffffffffH	; CTsfUiLessMode::m_dwAlpnSinkCookie
?m_dwOpenModeSinkCookie@CTsfUiLessMode@@1KA DD 0ffffffffH ; CTsfUiLessMode::m_dwOpenModeSinkCookie
?m_dwConvModeSinkCookie@CTsfUiLessMode@@1KA DD 0ffffffffH ; CTsfUiLessMode::m_dwConvModeSinkCookie
	ORG $+4
_aHotKeys DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	05dH
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	038H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	059H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	02eH
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	076H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	078H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	079H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	07aH
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	07bH
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	071H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	072H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	073H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	074H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	079H
	DB	00H
	DB	01H
	DB	00H
	ORG $+1
	DD	075H
	DB	00H
	DB	01H
	DB	00H
	ORG $+1
	DD	076H
	DB	00H
	DB	01H
	DB	00H
	ORG $+1
	DD	077H
	DB	01H
	DB	01H
	DB	00H
	ORG $+1
	DD	079H
	DB	01H
	DB	01H
	DB	00H
	ORG $+1
	DD	07aH
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	01cH
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	020H
	DB	01H
	DB	00H
	DB	01H
	ORG $+1
	DD	0bcH
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	09H
_signature DB	'%%%IMEUILIB:070111%%%', 00H
	ORG $+2
_gSkinIME DD	00H
	DD	0404040H
	DD	0ff000000H
	DB	018H
	DB	0a0H
	DB	00H
	ORG $+1
	DD	00H
	DD	0ffffffffH
	DD	0ff000000H
	DD	00H
	DD	0ffff00H
	DD	0ffH
	DD	0ff00H
	DD	0ff0000H
	DD	0ff0000H
	DB	080H
	ORG $+3
	DD	00H
	DB	02H
	DB	01H
	ORG $+2
_DATA	ENDS
;	COMDAT __GUID_aa80e801_2021_11d2_93e0_0060b067b86e
CONST	SEGMENT
__GUID_aa80e801_2021_11d2_93e0_0060b067b86e DD 0aa80e801H
	DW	02021H
	DW	011d2H
	DB	093H
	DB	0e0H
	DB	00H
	DB	060H
	DB	0b0H
	DB	067H
	DB	0b8H
	DB	06eH
CONST	ENDS
CONST	SEGMENT
$SG153642 DB	'i', 00H, 'm', 00H, 'm', 00H, '3', 00H, '2', 00H, '.', 00H
	DB	'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H
$SG153646 DB	'ImmLockIMC', 00H
	ORG $+1
$SG153649 DB	'ImmUnlockIMC', 00H
	ORG $+3
$SG153652 DB	'ImmLockIMCC', 00H
$SG153655 DB	'ImmUnlockIMCC', 00H
	ORG $+2
$SG153660 DB	'ImmDisableTextFrameService', 00H
	ORG $+1
$SG153753 DB	'TINTLGNT.IME', 00H
	ORG $+3
$SG153754 DB	'CINTLGNT.IME', 00H
	ORG $+3
$SG153755 DB	'MSTCIPHA.IME', 00H
	ORG $+3
$SG153756 DB	'PINTLGNT.IME', 00H
	ORG $+3
$SG153757 DB	'MSSCIPYA.IME', 00H
	ORG $+3
$SG153764 DB	'\', 00H
	ORG $+2
$SG152772 DB	'A', 00H, 00H, 00H
$SG152773 DB	080H, '{', 00H, 00H
$SG152774 DB	'A~', 00H, 00H
$SG152775 DB	00H, 0acH, 00H, 00H
$SG152776 DB	'B0', 00H, 00H
$SG154017 DB	'I', 00H, 'm', 00H, 'e', 00H, 'U', 00H, 'i', 00H, '.', 00H
	DB	'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG154018 DB	'l', 00H, 'R', 00H, 'e', 00H, 't', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '2', 00H, 00H, 00H
$SG154027 DB	00H, 00H
	ORG $+2
$SG154028 DB	00H, 00H
	ORG $+2
$SG153077 DB	' ', 00H, 00H, 00H
$SG154105 DB	'software\microsoft\windows\currentversion\', 00H
	ORG $+1
$SG154109 DB	'MSTCIPH', 00H
$SG154110 DB	'TINTLGNT', 00H
	ORG $+3
$SG154121 DB	'keyboard mapping', 00H
	ORG $+3
$SG153156 DB	'I', 00H, 'm', 00H, 'e', 00H, 'U', 00H, 'i', 00H, '.', 00H
	DB	'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG153157 DB	'g', 00H, '_', 00H, 'C', 00H, 'a', 00H, 'r', 00H, 'e', 00H
	DB	't', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '.', 00H, 'p'
	DB	00H, 'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p'
	DB	00H, 't', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG154210 DB	'GetReadingString', 00H
	ORG $+3
$SG154214 DB	'ShowReadingWindow', 00H
	ORG $+2
$SG153194 DB	'%', 00H, 'd', 00H, 00H, 00H
CONST	ENDS
PUBLIC	_IsEqualGUID
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?ImeUi_Initialize@@YA_NPAUHWND__@@_N@Z		; ImeUi_Initialize
PUBLIC	?ImeUi_Uninitialize@@YAXXZ			; ImeUi_Uninitialize
PUBLIC	?ImeUi_SetAppearance@@YAXPBUIMEUI_APPEARANCE@@@Z ; ImeUi_SetAppearance
PUBLIC	?ImeUi_GetAppearance@@YAXPAUIMEUI_APPEARANCE@@@Z ; ImeUi_GetAppearance
PUBLIC	?ImeUi_IgnoreHotKey@@YA_NPBUtagMSG@@@Z		; ImeUi_IgnoreHotKey
PUBLIC	?ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z ; ImeUi_ProcessMessage
PUBLIC	?ImeUi_SetScreenDimension@@YAXII@Z		; ImeUi_SetScreenDimension
PUBLIC	?ImeUi_RenderUI@@YAX_N0@Z			; ImeUi_RenderUI
PUBLIC	?ImeUi_SetCaretPosition@@YAXII@Z		; ImeUi_SetCaretPosition
PUBLIC	?ImeUi_SetCompStringAppearance@@YAXPAVCImeUiFont_Base@@KPBUtagRECT@@@Z ; ImeUi_SetCompStringAppearance
PUBLIC	?ImeUi_GetCaretStatus@@YA_NXZ			; ImeUi_GetCaretStatus
PUBLIC	?ImeUi_SetInsertMode@@YAX_N@Z			; ImeUi_SetInsertMode
PUBLIC	?ImeUi_SetState@@YAXK@Z				; ImeUi_SetState
PUBLIC	?ImeUi_GetState@@YAKXZ				; ImeUi_GetState
PUBLIC	?ImeUi_EnableIme@@YAX_N@Z			; ImeUi_EnableIme
PUBLIC	?ImeUi_IsEnabled@@YA_NXZ			; ImeUi_IsEnabled
PUBLIC	?ImeUi_FinalizeString@@YAX_N@Z			; ImeUi_FinalizeString
PUBLIC	?ImeUi_ToggleLanguageBar@@YAXH@Z		; ImeUi_ToggleLanguageBar
PUBLIC	?ImeUi_IsSendingKeyMessage@@YA_NXZ		; ImeUi_IsSendingKeyMessage
PUBLIC	?ImeUi_SetWindow@@YAXPAUHWND__@@@Z		; ImeUi_SetWindow
PUBLIC	?ImeUi_GetInputCodePage@@YAIXZ			; ImeUi_GetInputCodePage
PUBLIC	?ImeUi_GetFlags@@YAKXZ				; ImeUi_GetFlags
PUBLIC	?ImeUi_SetFlags@@YAXK_N@Z			; ImeUi_SetFlags
PUBLIC	?ImeUi_GetPrimaryLanguage@@YAGXZ		; ImeUi_GetPrimaryLanguage
PUBLIC	?ImeUi_GetImeId@@YAKI@Z				; ImeUi_GetImeId
PUBLIC	?ImeUi_GetLanguage@@YAGXZ			; ImeUi_GetLanguage
PUBLIC	?ImeUi_GetIndicatior@@YAPA_WXZ			; ImeUi_GetIndicatior
PUBLIC	?ImeUi_IsShowReadingWindow@@YA_NXZ		; ImeUi_IsShowReadingWindow
PUBLIC	?ImeUi_IsShowCandListWindow@@YA_NXZ		; ImeUi_IsShowCandListWindow
PUBLIC	?ImeUi_IsVerticalCand@@YA_NXZ			; ImeUi_IsVerticalCand
PUBLIC	?ImeUi_IsHorizontalReading@@YA_NXZ		; ImeUi_IsHorizontalReading
PUBLIC	?ImeUi_GetCandidate@@YAPA_WI@Z			; ImeUi_GetCandidate
PUBLIC	?ImeUi_GetCompositionString@@YAPA_WXZ		; ImeUi_GetCompositionString
PUBLIC	?ImeUi_GetCandidateSelection@@YAKXZ		; ImeUi_GetCandidateSelection
PUBLIC	?ImeUi_GetCandidateCount@@YAKXZ			; ImeUi_GetCandidateCount
PUBLIC	?ImeUi_GetCompStringAttr@@YAPAEXZ		; ImeUi_GetCompStringAttr
PUBLIC	?ImeUi_GetImeCursorChars@@YAKXZ			; ImeUi_GetImeCursorChars
PUBLIC	??0ITfCompartmentEventSink@@QAE@XZ		; ITfCompartmentEventSink::ITfCompartmentEventSink
PUBLIC	??0ITfInputProcessorProfileActivationSink@@QAE@XZ ; ITfInputProcessorProfileActivationSink::ITfInputProcessorProfileActivationSink
PUBLIC	??0ITfUIElementSink@@QAE@XZ			; ITfUIElementSink::ITfUIElementSink
PUBLIC	??0CDisableCicero@@QAE@XZ			; CDisableCicero::CDisableCicero
PUBLIC	??1CDisableCicero@@QAE@XZ			; CDisableCicero::~CDisableCicero
PUBLIC	?Initialize@CDisableCicero@@QAEXXZ		; CDisableCicero::Initialize
PUBLIC	?Uninitialize@CDisableCicero@@QAEXXZ		; CDisableCicero::Uninitialize
PUBLIC	?DisableCiceroOnThisWnd@CDisableCicero@@QAEXPAUHWND__@@@Z ; CDisableCicero::DisableCiceroOnThisWnd
PUBLIC	?ImeUi_SetSupportLevel@@YAXK@Z			; ImeUi_SetSupportLevel
PUBLIC	?SendKeyMsg@@YAJPAUHWND__@@II@Z			; SendKeyMsg
PUBLIC	??0CUIElementSink@CTsfUiLessMode@@QAE@XZ	; CTsfUiLessMode::CUIElementSink::CUIElementSink
PUBLIC	??1CUIElementSink@CTsfUiLessMode@@QAE@XZ	; CTsfUiLessMode::CUIElementSink::~CUIElementSink
PUBLIC	?QueryInterface@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@PAPAX@Z ; CTsfUiLessMode::CUIElementSink::QueryInterface
PUBLIC	?AddRef@CUIElementSink@CTsfUiLessMode@@UAGKXZ	; CTsfUiLessMode::CUIElementSink::AddRef
PUBLIC	?Release@CUIElementSink@CTsfUiLessMode@@UAGKXZ	; CTsfUiLessMode::CUIElementSink::Release
PUBLIC	?BeginUIElement@CUIElementSink@CTsfUiLessMode@@UAGJKPAH@Z ; CTsfUiLessMode::CUIElementSink::BeginUIElement
PUBLIC	?UpdateUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z ; CTsfUiLessMode::CUIElementSink::UpdateUIElement
PUBLIC	?EndUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z ; CTsfUiLessMode::CUIElementSink::EndUIElement
PUBLIC	?OnActivated@CUIElementSink@CTsfUiLessMode@@UAGJKGABU_GUID@@00PAUHKL__@@K@Z ; CTsfUiLessMode::CUIElementSink::OnActivated
PUBLIC	?OnChange@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@@Z ; CTsfUiLessMode::CUIElementSink::OnChange
PUBLIC	??_GCUIElementSink@CTsfUiLessMode@@QAEPAXI@Z	; CTsfUiLessMode::CUIElementSink::`scalar deleting destructor'
PUBLIC	?MakeReadingInformationString@CTsfUiLessMode@@KAXPAUITfReadingInformationUIElement@@@Z ; CTsfUiLessMode::MakeReadingInformationString
PUBLIC	?MakeCandidateStrings@CTsfUiLessMode@@KAXPAUITfCandidateListUIElement@@@Z ; CTsfUiLessMode::MakeCandidateStrings
PUBLIC	?GetUIElement@CTsfUiLessMode@@KAPAUITfUIElement@@K@Z ; CTsfUiLessMode::GetUIElement
PUBLIC	?GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z ; CTsfUiLessMode::GetCompartments
PUBLIC	?SetupCompartmentSinks@CTsfUiLessMode@@KAHHPAUITfCompartment@@0@Z ; CTsfUiLessMode::SetupCompartmentSinks
PUBLIC	?SetupSinks@CTsfUiLessMode@@SAHXZ		; CTsfUiLessMode::SetupSinks
PUBLIC	?ReleaseSinks@CTsfUiLessMode@@SAXXZ		; CTsfUiLessMode::ReleaseSinks
PUBLIC	?CurrentInputLocaleIsIme@CTsfUiLessMode@@SAHXZ	; CTsfUiLessMode::CurrentInputLocaleIsIme
PUBLIC	?UpdateImeState@CTsfUiLessMode@@SAXH@Z		; CTsfUiLessMode::UpdateImeState
PUBLIC	?EnableUiUpdates@CTsfUiLessMode@@SAX_N@Z	; CTsfUiLessMode::EnableUiUpdates
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	??$min@K@std@@YAABKABK0@Z			; std::min<unsigned long>
PUBLIC	??$_Debug_lt@ABIABI@std@@YA_NABI0PB_WI@Z	; std::_Debug_lt<unsigned int const &,unsigned int const &>
PUBLIC	??$_Debug_lt@ABKABK@std@@YA_NABK0PB_WI@Z	; std::_Debug_lt<unsigned long const &,unsigned long const &>
PUBLIC	??$forward@ABI@std@@YAABIABI@Z			; std::forward<unsigned int const &>
PUBLIC	??$_Debug_lt_pred@U?$less@X@std@@ABIABI@std@@YA_NU?$less@X@0@ABI1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,unsigned int const &,unsigned int const &>
PUBLIC	??$forward@ABK@std@@YAABKABK@Z			; std::forward<unsigned long const &>
PUBLIC	??$_Debug_lt_pred@U?$less@X@std@@ABKABK@std@@YA_NU?$less@X@0@ABK1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,unsigned long const &,unsigned long const &>
PUBLIC	??$?RABIABI@?$less@X@std@@QBE_NABI0@Z		; std::less<void>::operator()<unsigned int const &,unsigned int const &>
PUBLIC	??$?RABKABK@?$less@X@std@@QBE_NABK0@Z		; std::less<void>::operator()<unsigned long const &,unsigned long const &>
PUBLIC	?QueryInterface@CUIElementSink@CTsfUiLessMode@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:CTsfUiLessMode::CUIElementSink::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CUIElementSink@CTsfUiLessMode@@W3AGKXZ	; [thunk]:CTsfUiLessMode::CUIElementSink::AddRef`adjustor{4}'
PUBLIC	?Release@CUIElementSink@CTsfUiLessMode@@W3AGKXZ	; [thunk]:CTsfUiLessMode::CUIElementSink::Release`adjustor{4}'
PUBLIC	?QueryInterface@CUIElementSink@CTsfUiLessMode@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:CTsfUiLessMode::CUIElementSink::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CUIElementSink@CTsfUiLessMode@@W7AGKXZ	; [thunk]:CTsfUiLessMode::CUIElementSink::AddRef`adjustor{8}'
PUBLIC	?Release@CUIElementSink@CTsfUiLessMode@@W7AGKXZ	; [thunk]:CTsfUiLessMode::CUIElementSink::Release`adjustor{8}'
PUBLIC	??_7CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@ ; CTsfUiLessMode::CUIElementSink::`vftable'
PUBLIC	??_7CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@ ; CTsfUiLessMode::CUIElementSink::`vftable'
PUBLIC	??_7CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@ ; CTsfUiLessMode::CUIElementSink::`vftable'
PUBLIC	??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ ; `string'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUITfCompartmentEventSink@@@8		; ITfCompartmentEventSink `RTTI Type Descriptor'
PUBLIC	??_R3ITfCompartmentEventSink@@8			; ITfCompartmentEventSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ITfCompartmentEventSink@@8			; ITfCompartmentEventSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ITfCompartmentEventSink@@8	; ITfCompartmentEventSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUITfInputProcessorProfileActivationSink@@@8 ; ITfInputProcessorProfileActivationSink `RTTI Type Descriptor'
PUBLIC	??_R3ITfInputProcessorProfileActivationSink@@8	; ITfInputProcessorProfileActivationSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ITfInputProcessorProfileActivationSink@@8	; ITfInputProcessorProfileActivationSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ITfInputProcessorProfileActivationSink@@8 ; ITfInputProcessorProfileActivationSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUITfUIElementSink@@@8			; ITfUIElementSink `RTTI Type Descriptor'
PUBLIC	??_R3ITfUIElementSink@@8			; ITfUIElementSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ITfUIElementSink@@8			; ITfUIElementSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ITfUIElementSink@@8		; ITfUIElementSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@ ; CTsfUiLessMode::CUIElementSink::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCUIElementSink@CTsfUiLessMode@@@8	; CTsfUiLessMode::CUIElementSink `RTTI Type Descriptor'
PUBLIC	??_R3CUIElementSink@CTsfUiLessMode@@8		; CTsfUiLessMode::CUIElementSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CUIElementSink@CTsfUiLessMode@@8		; CTsfUiLessMode::CUIElementSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CUIElementSink@CTsfUiLessMode@@8	; CTsfUiLessMode::CUIElementSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@ITfInputProcessorProfileActivationSink@@8 ; ITfInputProcessorProfileActivationSink::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@ITfCompartmentEventSink@@8		; ITfCompartmentEventSink::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R17?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R4CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@ ; CTsfUiLessMode::CUIElementSink::`RTTI Complete Object Locator'
PUBLIC	??_R4CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@ ; CTsfUiLessMode::CUIElementSink::`RTTI Complete Object Locator'
PUBLIC	__real@3f200000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@406f400000000000
PUBLIC	__real@40800000
PUBLIC	__real@40c90fda
PUBLIC	__real@41600000
PUBLIC	__real@42900000
PUBLIC	__real@42c00000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__imp__strcpy_s:PROC
EXTRN	__imp__strcat_s:PROC
EXTRN	__imp__wcscat_s:PROC
EXTRN	__imp__wcscpy_s:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryExA@12:PROC
EXTRN	__imp__LoadLibraryExW@12:PROC
EXTRN	__imp__GetKeyboardLayout@4:PROC
EXTRN	__imp__GetMessageA@16:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__CharNextW@4:PROC
EXTRN	__imp__GetFocus@0:PROC
EXTRN	__imp__GetKeyState@4:PROC
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	__imp__GetCaretBlinkTime@0:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp__CompareStringA@24:PROC
EXTRN	__imp__GetLocaleInfoA@16:PROC
EXTRN	__imp__IsDBCSLeadByteEx@8:PROC
EXTRN	_GetFileVersionInfoSizeA@8:PROC
EXTRN	_GetFileVersionInfoA@16:PROC
EXTRN	_VerQueryValueA@16:PROC
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegOpenKeyExA@20:PROC
EXTRN	__imp__RegQueryValueExA@24:PROC
EXTRN	__imp__CoUninitialize@0:PROC
EXTRN	__imp__CoInitializeEx@8:PROC
EXTRN	__imp__CoCreateInstance@20:PROC
EXTRN	__imp__CoInitialize@4:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	__imp__VariantClear@4:PROC
EXTRN	_ImmGetDefaultIMEWnd@4:PROC
EXTRN	_ImmGetIMEFileNameA@12:PROC
EXTRN	_ImmIsIME@4:PROC
EXTRN	_ImmSimulateHotKey@8:PROC
EXTRN	_ImmGetContext@4:PROC
EXTRN	_ImmReleaseContext@8:PROC
EXTRN	_ImmAssociateContext@8:PROC
EXTRN	_ImmGetCompositionStringW@16:PROC
EXTRN	_ImmSetCompositionStringW@24:PROC
EXTRN	_ImmGetCandidateListW@16:PROC
EXTRN	_ImmGetConversionStatus@12:PROC
EXTRN	_ImmSetConversionStatus@12:PROC
EXTRN	_ImmGetOpenStatus@4:PROC
EXTRN	_ImmSetOpenStatus@8:PROC
EXTRN	_ImmNotifyIME@16:PROC
EXTRN	_ImmGetVirtualKey@4:PROC
EXTRN	__imp___wassert:PROC
EXTRN	??2@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new
EXTRN	??3@YAXPAXABUnothrow_t@std@@@Z:PROC		; operator delete
EXTRN	__imp__swprintf_s:PROC
EXTRN	__imp_?_Debug_message@std@@YAXPB_W0I@Z:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___libm_sse2_cosf:PROC
EXTRN	___libm_sse2_sinf:PROC
EXTRN	__ftoui3:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_IID_IUnknown:BYTE
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	_CLSID_TF_ThreadMgr:BYTE
EXTRN	_CLSID_TF_InputProcessorProfiles:BYTE
EXTRN	_CLSID_TF_LangBarMgr:BYTE
EXTRN	_GUID_COMPARTMENT_KEYBOARD_OPENCLOSE:BYTE
EXTRN	_GUID_TFCAT_TIP_KEYBOARD:BYTE
EXTRN	_IID_ITfCompartmentEventSink:BYTE
EXTRN	_IID_ITfCompartmentMgr:BYTE
EXTRN	_IID_ITfSource:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
	ALIGN	8

_g_disableCicero DQ 01H DUP (?)
_LeadByteTable DB 0100H DUP (?)
__ImmGetCompositionString DD 01H DUP (?)
__ImmGetCandidateList DD 01H DUP (?)
__ImmLockIMC DD	01H DUP (?)
__ImmUnlockIMC DD 01H DUP (?)
__ImmLockIMCC DD 01H DUP (?)
__ImmUnlockIMCC DD 01H DUP (?)
__SendCompString DD 01H DUP (?)
__SendMessage DD 01H DUP (?)
__GetCandidateList DD 01H DUP (?)
_g_hwndMain DD	01H DUP (?)
_g_hwndCurr DD	01H DUP (?)
_g_himcOrg DD	01H DUP (?)
_g_szCompositionString DW 0100H DUP (?)
_g_szCompAttrString DB 0100H DUP (?)
_g_szCandidate DW 0a00H DUP (?)
_g_dwSelection DD 01H DUP (?)
_g_dwCount DD	01H DUP (?)
_g_uCandPageSize DD 01H DUP (?)
_g_dwIMELevel DD 01H DUP (?)
_g_dwIMELevelSaved DD 01H DUP (?)
_g_szMultiLineCompString DW 0100H DUP (?)
_g_bChineseIME DB 01H DUP (?)
	ALIGN	4

_g_szReadingString DW 020H DUP (?)
_g_iReadingError DD 01H DUP (?)
_g_screenWidth DD 01H DUP (?)
_g_screenHeight DD 01H DUP (?)
_g_dwPrevFloat DD 01H DUP (?)
_g_osi	DB	094H DUP (?)
_g_dwCandX DD	01H DUP (?)
_g_dwCandY DD	01H DUP (?)
_g_dwCaretX DD	01H DUP (?)
_g_dwCaretY DD	01H DUP (?)
_g_hCompChar DD	01H DUP (?)
_g_iCandListIndexBase DD 01H DUP (?)
_g_CaretInfo DB	024H DUP (?)
_lastSwirl DQ	01H DUP (?)
_g_pszIndicatior DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ?uDigitWidth@?N@??DrawCandidateList@@YAXXZ@4KA
_BSS	SEGMENT
?uDigitWidth@?N@??DrawCandidateList@@YAXXZ@4KA DD 01H DUP (?) ; `DrawCandidateList'::`13'::uDigitWidth
_BSS	ENDS
;	COMDAT ?uDigitWidthList@?N@??DrawCandidateList@@YAXXZ@4PAKA
_BSS	SEGMENT
?uDigitWidthList@?N@??DrawCandidateList@@YAXXZ@4PAKA DD 0aH DUP (?) ; `DrawCandidateList'::`13'::uDigitWidthList
_BSS	ENDS
;	COMDAT ?pPrevFont@?N@??DrawCandidateList@@YAXXZ@4PAVCImeUiFont_Base@@A
_BSS	SEGMENT
?pPrevFont@?N@??DrawCandidateList@@YAXXZ@4PAVCImeUiFont_Base@@A DD 01H DUP (?) ; `DrawCandidateList'::`13'::pPrevFont
_BSS	ENDS
;	COMDAT ?bNoReentrance@?CL@??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4_NA
_BSS	SEGMENT
?bNoReentrance@?CL@??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4_NA DB 01H DUP (?) ; `ImeUi_ProcessMessage'::`43'::bNoReentrance
_BSS	ENDS
;	COMDAT ?hklPrev@?1??GetImeId@@YAKI@Z@4PAUHKL__@@A
_BSS	SEGMENT
?hklPrev@?1??GetImeId@@YAKI@Z@4PAUHKL__@@A DD 01H DUP (?) ; `GetImeId'::`2'::hklPrev
_BSS	ENDS
;	COMDAT ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA
_BSS	SEGMENT
?dwRet@?1??GetImeId@@YAKI@Z@4PAKA DD 02H DUP (?)	; `GetImeId'::`2'::dwRet
_BSS	ENDS
;	COMDAT ?bProcessing@?1??ImeUi_FinalizeString@@YAX_N@Z@4_NA
_BSS	SEGMENT
?bProcessing@?1??ImeUi_FinalizeString@@YAX_N@Z@4_NA DB 01H DUP (?) ; `ImeUi_FinalizeString'::`2'::bProcessing
_BSS	ENDS
;	COMDAT ?hklPrev@?1??CheckInputLocale@@YAXXZ@4PAUHKL__@@A
_BSS	SEGMENT
?hklPrev@?1??CheckInputLocale@@YAXXZ@4PAUHKL__@@A DD 01H DUP (?) ; `CheckInputLocale'::`2'::hklPrev
_BSS	ENDS
CRT$XCU	SEGMENT
_g_disableCicero$initializer$ DD FLAT:??__Eg_disableCicero@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@42c00000
CONST	SEGMENT
__real@42c00000 DD 042c00000r			; 96
CONST	ENDS
;	COMDAT __real@42900000
CONST	SEGMENT
__real@42900000 DD 042900000r			; 72
CONST	ENDS
;	COMDAT __real@41600000
CONST	SEGMENT
__real@41600000 DD 041600000r			; 14
CONST	ENDS
;	COMDAT __real@40c90fda
CONST	SEGMENT
__real@40c90fda DD 040c90fdar			; 6.28319
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@406f400000000000
CONST	SEGMENT
__real@406f400000000000 DQ 0406f400000000000r	; 250
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f200000
CONST	SEGMENT
__real@3f200000 DD 03f200000r			; 0.625
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R4CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@
rdata$r	SEGMENT
??_R4CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@ DD 00H ; CTsfUiLessMode::CUIElementSink::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCUIElementSink@CTsfUiLessMode@@@8
	DD	FLAT:??_R3CUIElementSink@CTsfUiLessMode@@8
rdata$r	ENDS
;	COMDAT ??_R4CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@
rdata$r	SEGMENT
??_R4CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@ DD 00H ; CTsfUiLessMode::CUIElementSink::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCUIElementSink@CTsfUiLessMode@@@8
	DD	FLAT:??_R3CUIElementSink@CTsfUiLessMode@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R17?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@ITfCompartmentEventSink@@8
rdata$r	SEGMENT
??_R17?0A@EA@ITfCompartmentEventSink@@8 DD FLAT:??_R0?AUITfCompartmentEventSink@@@8 ; ITfCompartmentEventSink::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ITfCompartmentEventSink@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@ITfInputProcessorProfileActivationSink@@8
rdata$r	SEGMENT
??_R13?0A@EA@ITfInputProcessorProfileActivationSink@@8 DD FLAT:??_R0?AUITfInputProcessorProfileActivationSink@@@8 ; ITfInputProcessorProfileActivationSink::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ITfInputProcessorProfileActivationSink@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CUIElementSink@CTsfUiLessMode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CUIElementSink@CTsfUiLessMode@@8 DD FLAT:??_R0?AVCUIElementSink@CTsfUiLessMode@@@8 ; CTsfUiLessMode::CUIElementSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CUIElementSink@CTsfUiLessMode@@8
rdata$r	ENDS
;	COMDAT ??_R2CUIElementSink@CTsfUiLessMode@@8
rdata$r	SEGMENT
??_R2CUIElementSink@CTsfUiLessMode@@8 DD FLAT:??_R1A@?0A@EA@CUIElementSink@CTsfUiLessMode@@8 ; CTsfUiLessMode::CUIElementSink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ITfUIElementSink@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ITfInputProcessorProfileActivationSink@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ITfCompartmentEventSink@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3CUIElementSink@CTsfUiLessMode@@8
rdata$r	SEGMENT
??_R3CUIElementSink@CTsfUiLessMode@@8 DD 00H		; CTsfUiLessMode::CUIElementSink::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	07H
	DD	FLAT:??_R2CUIElementSink@CTsfUiLessMode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCUIElementSink@CTsfUiLessMode@@@8
data$r	SEGMENT
??_R0?AVCUIElementSink@CTsfUiLessMode@@@8 DD FLAT:??_7type_info@@6B@ ; CTsfUiLessMode::CUIElementSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCUIElementSink@CTsfUiLessMode@@', 00H
data$r	ENDS
;	COMDAT ??_R4CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@
rdata$r	SEGMENT
??_R4CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@ DD 00H ; CTsfUiLessMode::CUIElementSink::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCUIElementSink@CTsfUiLessMode@@@8
	DD	FLAT:??_R3CUIElementSink@CTsfUiLessMode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ITfUIElementSink@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ITfUIElementSink@@8 DD FLAT:??_R0?AUITfUIElementSink@@@8 ; ITfUIElementSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ITfUIElementSink@@8
rdata$r	ENDS
;	COMDAT ??_R2ITfUIElementSink@@8
rdata$r	SEGMENT
??_R2ITfUIElementSink@@8 DD FLAT:??_R1A@?0A@EA@ITfUIElementSink@@8 ; ITfUIElementSink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ITfUIElementSink@@8
rdata$r	SEGMENT
??_R3ITfUIElementSink@@8 DD 00H				; ITfUIElementSink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ITfUIElementSink@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUITfUIElementSink@@@8
data$r	SEGMENT
??_R0?AUITfUIElementSink@@@8 DD FLAT:??_7type_info@@6B@	; ITfUIElementSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUITfUIElementSink@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ITfInputProcessorProfileActivationSink@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ITfInputProcessorProfileActivationSink@@8 DD FLAT:??_R0?AUITfInputProcessorProfileActivationSink@@@8 ; ITfInputProcessorProfileActivationSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ITfInputProcessorProfileActivationSink@@8
rdata$r	ENDS
;	COMDAT ??_R2ITfInputProcessorProfileActivationSink@@8
rdata$r	SEGMENT
??_R2ITfInputProcessorProfileActivationSink@@8 DD FLAT:??_R1A@?0A@EA@ITfInputProcessorProfileActivationSink@@8 ; ITfInputProcessorProfileActivationSink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ITfInputProcessorProfileActivationSink@@8
rdata$r	SEGMENT
??_R3ITfInputProcessorProfileActivationSink@@8 DD 00H	; ITfInputProcessorProfileActivationSink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ITfInputProcessorProfileActivationSink@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUITfInputProcessorProfileActivationSink@@@8
data$r	SEGMENT
??_R0?AUITfInputProcessorProfileActivationSink@@@8 DD FLAT:??_7type_info@@6B@ ; ITfInputProcessorProfileActivationSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUITfInputProcessorProfileActivationSink@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ITfCompartmentEventSink@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ITfCompartmentEventSink@@8 DD FLAT:??_R0?AUITfCompartmentEventSink@@@8 ; ITfCompartmentEventSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ITfCompartmentEventSink@@8
rdata$r	ENDS
;	COMDAT ??_R2ITfCompartmentEventSink@@8
rdata$r	SEGMENT
??_R2ITfCompartmentEventSink@@8 DD FLAT:??_R1A@?0A@EA@ITfCompartmentEventSink@@8 ; ITfCompartmentEventSink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ITfCompartmentEventSink@@8
rdata$r	SEGMENT
??_R3ITfCompartmentEventSink@@8 DD 00H			; ITfCompartmentEventSink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ITfCompartmentEventSink@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUITfCompartmentEventSink@@@8
data$r	SEGMENT
??_R0?AUITfCompartmentEventSink@@@8 DD FLAT:??_7type_info@@6B@ ; ITfCompartmentEventSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUITfCompartmentEventSink@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
data$r	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
data$r	ENDS
;	COMDAT ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H, 'g'
	DB	00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?_GUID_COMPARTMENT_KEYBOARD_INPUTMODE_CONVERSION@?1??GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z@4U_GUID@@A
_DATA	SEGMENT
?_GUID_COMPARTMENT_KEYBOARD_INPUTMODE_CONVERSION@?1??GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z@4U_GUID@@A DD 0ccf05dd8H ; `CTsfUiLessMode::GetCompartments'::`2'::_GUID_COMPARTMENT_KEYBOARD_INPUTMODE_CONVERSION
	DW	04a87H
	DW	011d7H
	DB	0a6H
	DB	0e2H
	DB	00H
	DB	06H
	DB	05bH
	DB	084H
	DB	043H
	DB	05cH
_DATA	ENDS
;	COMDAT ?s_TF_PROFILE_DAYI@?1??OnActivated@CUIElementSink@CTsfUiLessMode@@UAGJKGABU_GUID@@00PAUHKL__@@K@Z@4U4@A
_DATA	SEGMENT
?s_TF_PROFILE_DAYI@?1??OnActivated@CUIElementSink@CTsfUiLessMode@@UAGJKGABU_GUID@@00PAUHKL__@@K@Z@4U4@A DD 037b2c25H ; `CTsfUiLessMode::CUIElementSink::OnActivated'::`2'::s_TF_PROFILE_DAYI
	DW	0480cH
	DW	04d7fH
	DB	0b0H
	DB	027H
	DB	0d6H
	DB	0caH
	DB	06bH
	DB	069H
	DB	078H
	DB	08aH
_DATA	ENDS
;	COMDAT ?iShowStatusWindow@?3??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA
_DATA	SEGMENT
?iShowStatusWindow@?3??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA DD 0ffffffffH ; `ImeUi_ToggleLanguageBar'::`4'::iShowStatusWindow
_DATA	ENDS
;	COMDAT ?prevRestore@?1??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA
_DATA	SEGMENT
?prevRestore@?1??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA DD 01H ; `ImeUi_ToggleLanguageBar'::`2'::prevRestore
_DATA	ENDS
;	COMDAT ?lShift@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
_DATA	SEGMENT
?lShift@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA DD 080000000H ; `ImeUi_ProcessMessage'::`2'::lShift
_DATA	ENDS
;	COMDAT ?lCtrl@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
_DATA	SEGMENT
?lCtrl@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA DD 080000000H ; `ImeUi_ProcessMessage'::`2'::lCtrl
_DATA	ENDS
;	COMDAT ?lAlt@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
_DATA	SEGMENT
?lAlt@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA DD 080000000H ; `ImeUi_ProcessMessage'::`2'::lAlt
_DATA	ENDS
;	COMDAT ??_7CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@
CONST	SEGMENT
??_7CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@ DD FLAT:??_R4CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@ ; CTsfUiLessMode::CUIElementSink::`vftable'
	DD	FLAT:?QueryInterface@CUIElementSink@CTsfUiLessMode@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CUIElementSink@CTsfUiLessMode@@W7AGKXZ
	DD	FLAT:?Release@CUIElementSink@CTsfUiLessMode@@W7AGKXZ
	DD	FLAT:?OnChange@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@@Z
CONST	ENDS
;	COMDAT ??_7CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@
CONST	SEGMENT
??_7CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@ DD FLAT:??_R4CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@ ; CTsfUiLessMode::CUIElementSink::`vftable'
	DD	FLAT:?QueryInterface@CUIElementSink@CTsfUiLessMode@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CUIElementSink@CTsfUiLessMode@@W3AGKXZ
	DD	FLAT:?Release@CUIElementSink@CTsfUiLessMode@@W3AGKXZ
	DD	FLAT:?OnActivated@CUIElementSink@CTsfUiLessMode@@UAGJKGABU_GUID@@00PAUHKL__@@K@Z
CONST	ENDS
;	COMDAT ??_7CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@
CONST	SEGMENT
??_7CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@ DD FLAT:??_R4CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@ ; CTsfUiLessMode::CUIElementSink::`vftable'
	DD	FLAT:?QueryInterface@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CUIElementSink@CTsfUiLessMode@@UAGKXZ
	DD	FLAT:?Release@CUIElementSink@CTsfUiLessMode@@UAGKXZ
	DD	FLAT:?BeginUIElement@CUIElementSink@CTsfUiLessMode@@UAGJKPAH@Z
	DD	FLAT:?UpdateUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z
	DD	FLAT:?EndUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?SetupSinks@CTsfUiLessMode@@SAHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSinks@CTsfUiLessMode@@SAHXZ$0
__ehfuncinfo$?SetupSinks@CTsfUiLessMode@@SAHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetupSinks@CTsfUiLessMode@@SAHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
__SendMessage$initializer$ DD FLAT:??__E_SendMessage@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_pszIndicatior$initializer$ DD FLAT:??__Eg_pszIndicatior@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odsp /RTCsu
;	COMDAT ?Release@CUIElementSink@CTsfUiLessMode@@W7AGKXZ
_TEXT	SEGMENT
?Release@CUIElementSink@CTsfUiLessMode@@W7AGKXZ PROC	; [thunk]:CTsfUiLessMode::CUIElementSink::Release`adjustor{8}', COMDAT
  00000	83 6c 24 04 08	 sub	 DWORD PTR [esp+4], 8
  00005	e9 00 00 00 00	 jmp	 ?Release@CUIElementSink@CTsfUiLessMode@@UAGKXZ ; CTsfUiLessMode::CUIElementSink::Release
?Release@CUIElementSink@CTsfUiLessMode@@W7AGKXZ ENDP	; [thunk]:CTsfUiLessMode::CUIElementSink::Release`adjustor{8}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu
;	COMDAT ?AddRef@CUIElementSink@CTsfUiLessMode@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CUIElementSink@CTsfUiLessMode@@W7AGKXZ PROC	; [thunk]:CTsfUiLessMode::CUIElementSink::AddRef`adjustor{8}', COMDAT
  00000	83 6c 24 04 08	 sub	 DWORD PTR [esp+4], 8
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CUIElementSink@CTsfUiLessMode@@UAGKXZ ; CTsfUiLessMode::CUIElementSink::AddRef
?AddRef@CUIElementSink@CTsfUiLessMode@@W7AGKXZ ENDP	; [thunk]:CTsfUiLessMode::CUIElementSink::AddRef`adjustor{8}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu
;	COMDAT ?QueryInterface@CUIElementSink@CTsfUiLessMode@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CUIElementSink@CTsfUiLessMode@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:CTsfUiLessMode::CUIElementSink::QueryInterface`adjustor{8}', COMDAT
  00000	83 6c 24 04 08	 sub	 DWORD PTR [esp+4], 8
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@PAPAX@Z ; CTsfUiLessMode::CUIElementSink::QueryInterface
?QueryInterface@CUIElementSink@CTsfUiLessMode@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:CTsfUiLessMode::CUIElementSink::QueryInterface`adjustor{8}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu
;	COMDAT ?Release@CUIElementSink@CTsfUiLessMode@@W3AGKXZ
_TEXT	SEGMENT
?Release@CUIElementSink@CTsfUiLessMode@@W3AGKXZ PROC	; [thunk]:CTsfUiLessMode::CUIElementSink::Release`adjustor{4}', COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?Release@CUIElementSink@CTsfUiLessMode@@UAGKXZ ; CTsfUiLessMode::CUIElementSink::Release
?Release@CUIElementSink@CTsfUiLessMode@@W3AGKXZ ENDP	; [thunk]:CTsfUiLessMode::CUIElementSink::Release`adjustor{4}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu
;	COMDAT ?AddRef@CUIElementSink@CTsfUiLessMode@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CUIElementSink@CTsfUiLessMode@@W3AGKXZ PROC	; [thunk]:CTsfUiLessMode::CUIElementSink::AddRef`adjustor{4}', COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?AddRef@CUIElementSink@CTsfUiLessMode@@UAGKXZ ; CTsfUiLessMode::CUIElementSink::AddRef
?AddRef@CUIElementSink@CTsfUiLessMode@@W3AGKXZ ENDP	; [thunk]:CTsfUiLessMode::CUIElementSink::AddRef`adjustor{4}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu
;	COMDAT ?QueryInterface@CUIElementSink@CTsfUiLessMode@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CUIElementSink@CTsfUiLessMode@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:CTsfUiLessMode::CUIElementSink::QueryInterface`adjustor{4}', COMDAT
  00000	83 6c 24 04 04	 sub	 DWORD PTR [esp+4], 4
  00005	e9 00 00 00 00	 jmp	 ?QueryInterface@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@PAPAX@Z ; CTsfUiLessMode::CUIElementSink::QueryInterface
?QueryInterface@CUIElementSink@CTsfUiLessMode@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:CTsfUiLessMode::CUIElementSink::QueryInterface`adjustor{4}'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$?RABKABK@?$less@X@std@@QBE_NABK0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RABKABK@?$less@X@std@@QBE_NABK0@Z PROC		; std::less<void>::operator()<unsigned long const &,unsigned long const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 263
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 268
  00017	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00021	73 09		 jae	 SHORT $LN3@operator
  00023	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  0002a	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@operator:
  00033	8a 45 f8	 mov	 al, BYTE PTR tv65[ebp]
; Line 269
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
??$?RABKABK@?$less@X@std@@QBE_NABK0@Z ENDP		; std::less<void>::operator()<unsigned long const &,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$?RABIABI@?$less@X@std@@QBE_NABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RABIABI@?$less@X@std@@QBE_NABI0@Z PROC		; std::less<void>::operator()<unsigned int const &,unsigned int const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 263
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 268
  00017	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00021	73 09		 jae	 SHORT $LN3@operator
  00023	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  0002a	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@operator:
  00033	8a 45 f8	 mov	 al, BYTE PTR tv65[ebp]
; Line 269
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
??$?RABIABI@?$less@X@std@@QBE_NABI0@Z ENDP		; std::less<void>::operator()<unsigned int const &,unsigned int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Debug_lt_pred@U?$less@X@std@@ABKABK@std@@YA_NU?$less@X@0@ABK1PB_WI@Z
_TEXT	SEGMENT
__Pred$ = 8						; size = 1
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
__File$ = 20						; size = 4
__Line$ = 24						; size = 4
??$_Debug_lt_pred@U?$less@X@std@@ABKABK@std@@YA_NU?$less@X@0@ABK1PB_WI@Z PROC ; std::_Debug_lt_pred<std::less<void>,unsigned long const &,unsigned long const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 520
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 521
  00004	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??$forward@ABK@std@@YAABKABK@Z ; std::forward<unsigned long const &>
  0000d	83 c4 04	 add	 esp, 4
  00010	50		 push	 eax
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??$forward@ABK@std@@YAABKABK@Z ; std::forward<unsigned long const &>
  0001a	83 c4 04	 add	 esp, 4
  0001d	50		 push	 eax
  0001e	8d 4d 08	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00021	e8 00 00 00 00	 call	 ??$?RABKABK@?$less@X@std@@QBE_NABK0@Z ; std::less<void>::operator()<unsigned long const &,unsigned long const &>
  00026	0f b6 d0	 movzx	 edx, al
  00029	85 d2		 test	 edx, edx
  0002b	75 06		 jne	 SHORT $LN3@Debug_lt_p
; Line 522
  0002d	32 c0		 xor	 al, al
  0002f	eb 4c		 jmp	 SHORT $LN4@Debug_lt_p
  00031	eb 48		 jmp	 SHORT $LN2@Debug_lt_p
$LN3@Debug_lt_p:
; Line 523
  00033	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$forward@ABK@std@@YAABKABK@Z ; std::forward<unsigned long const &>
  0003c	83 c4 04	 add	 esp, 4
  0003f	50		 push	 eax
  00040	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 ??$forward@ABK@std@@YAABKABK@Z ; std::forward<unsigned long const &>
  00049	83 c4 04	 add	 esp, 4
  0004c	50		 push	 eax
  0004d	8d 4d 08	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00050	e8 00 00 00 00	 call	 ??$?RABKABK@?$less@X@std@@QBE_NABK0@Z ; std::less<void>::operator()<unsigned long const &,unsigned long const &>
  00055	0f b6 d0	 movzx	 edx, al
  00058	85 d2		 test	 edx, edx
  0005a	74 1f		 je	 SHORT $LN2@Debug_lt_p
; Line 524
  0005c	8b f4		 mov	 esi, esp
  0005e	8b 45 18	 mov	 eax, DWORD PTR __Line$[ebp]
  00061	50		 push	 eax
  00062	8b 4d 14	 mov	 ecx, DWORD PTR __File$[ebp]
  00065	51		 push	 ecx
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Debug_lt_p:
; Line 525
  0007b	b0 01		 mov	 al, 1
$LN4@Debug_lt_p:
; Line 526
  0007d	5e		 pop	 esi
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
??$_Debug_lt_pred@U?$less@X@std@@ABKABK@std@@YA_NU?$less@X@0@ABK1PB_WI@Z ENDP ; std::_Debug_lt_pred<std::less<void>,unsigned long const &,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$forward@ABK@std@@YAABKABK@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABK@std@@YAABKABK@Z PROC			; std::forward<unsigned long const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1505
  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]
; Line 1506
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABK@std@@YAABKABK@Z ENDP			; std::forward<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Debug_lt_pred@U?$less@X@std@@ABIABI@std@@YA_NU?$less@X@0@ABI1PB_WI@Z
_TEXT	SEGMENT
__Pred$ = 8						; size = 1
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
__File$ = 20						; size = 4
__Line$ = 24						; size = 4
??$_Debug_lt_pred@U?$less@X@std@@ABIABI@std@@YA_NU?$less@X@0@ABI1PB_WI@Z PROC ; std::_Debug_lt_pred<std::less<void>,unsigned int const &,unsigned int const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 520
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 521
  00004	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??$forward@ABI@std@@YAABIABI@Z ; std::forward<unsigned int const &>
  0000d	83 c4 04	 add	 esp, 4
  00010	50		 push	 eax
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ??$forward@ABI@std@@YAABIABI@Z ; std::forward<unsigned int const &>
  0001a	83 c4 04	 add	 esp, 4
  0001d	50		 push	 eax
  0001e	8d 4d 08	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00021	e8 00 00 00 00	 call	 ??$?RABIABI@?$less@X@std@@QBE_NABI0@Z ; std::less<void>::operator()<unsigned int const &,unsigned int const &>
  00026	0f b6 d0	 movzx	 edx, al
  00029	85 d2		 test	 edx, edx
  0002b	75 06		 jne	 SHORT $LN3@Debug_lt_p
; Line 522
  0002d	32 c0		 xor	 al, al
  0002f	eb 4c		 jmp	 SHORT $LN4@Debug_lt_p
  00031	eb 48		 jmp	 SHORT $LN2@Debug_lt_p
$LN3@Debug_lt_p:
; Line 523
  00033	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??$forward@ABI@std@@YAABIABI@Z ; std::forward<unsigned int const &>
  0003c	83 c4 04	 add	 esp, 4
  0003f	50		 push	 eax
  00040	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 ??$forward@ABI@std@@YAABIABI@Z ; std::forward<unsigned int const &>
  00049	83 c4 04	 add	 esp, 4
  0004c	50		 push	 eax
  0004d	8d 4d 08	 lea	 ecx, DWORD PTR __Pred$[ebp]
  00050	e8 00 00 00 00	 call	 ??$?RABIABI@?$less@X@std@@QBE_NABI0@Z ; std::less<void>::operator()<unsigned int const &,unsigned int const &>
  00055	0f b6 d0	 movzx	 edx, al
  00058	85 d2		 test	 edx, edx
  0005a	74 1f		 je	 SHORT $LN2@Debug_lt_p
; Line 524
  0005c	8b f4		 mov	 esi, esp
  0005e	8b 45 18	 mov	 eax, DWORD PTR __Line$[ebp]
  00061	50		 push	 eax
  00062	8b 4d 14	 mov	 ecx, DWORD PTR __File$[ebp]
  00065	51		 push	 ecx
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Debug_lt_p:
; Line 525
  0007b	b0 01		 mov	 al, 1
$LN4@Debug_lt_p:
; Line 526
  0007d	5e		 pop	 esi
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
??$_Debug_lt_pred@U?$less@X@std@@ABIABI@std@@YA_NU?$less@X@0@ABI1PB_WI@Z ENDP ; std::_Debug_lt_pred<std::less<void>,unsigned int const &,unsigned int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$forward@ABI@std@@YAABIABI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABI@std@@YAABIABI@Z PROC			; std::forward<unsigned int const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1505
  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]
; Line 1506
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@ABI@std@@YAABIABI@Z ENDP			; std::forward<unsigned int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Debug_lt@ABKABK@std@@YA_NABK0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_lt@ABKABK@std@@YA_NABK0PB_WI@Z PROC		; std::_Debug_lt<unsigned long const &,unsigned long const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 532
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 534
  0000b	33 c0		 xor	 eax, eax
  0000d	88 45 ff	 mov	 BYTE PTR $T1[ebp], al
  00010	8b 4d 14	 mov	 ecx, DWORD PTR __Line$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 10	 mov	 edx, DWORD PTR __File$[ebp]
  00017	52		 push	 edx
  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$forward@ABK@std@@YAABKABK@Z ; std::forward<unsigned long const &>
  00021	83 c4 04	 add	 esp, 4
  00024	50		 push	 eax
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$forward@ABK@std@@YAABKABK@Z ; std::forward<unsigned long const &>
  0002e	83 c4 04	 add	 esp, 4
  00031	50		 push	 eax
  00032	0f b6 55 ff	 movzx	 edx, BYTE PTR $T1[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@X@std@@ABKABK@std@@YA_NU?$less@X@0@ABK1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,unsigned long const &,unsigned long const &>
  0003c	83 c4 14	 add	 esp, 20			; 00000014H
; Line 535
  0003f	83 c4 04	 add	 esp, 4
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Debug_lt@ABKABK@std@@YA_NABK0PB_WI@Z ENDP		; std::_Debug_lt<unsigned long const &,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Debug_lt@ABIABI@std@@YA_NABI0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_lt@ABIABI@std@@YA_NABI0PB_WI@Z PROC		; std::_Debug_lt<unsigned int const &,unsigned int const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 532
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 534
  0000b	33 c0		 xor	 eax, eax
  0000d	88 45 ff	 mov	 BYTE PTR $T1[ebp], al
  00010	8b 4d 14	 mov	 ecx, DWORD PTR __Line$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 10	 mov	 edx, DWORD PTR __File$[ebp]
  00017	52		 push	 edx
  00018	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ??$forward@ABI@std@@YAABIABI@Z ; std::forward<unsigned int const &>
  00021	83 c4 04	 add	 esp, 4
  00024	50		 push	 eax
  00025	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 ??$forward@ABI@std@@YAABIABI@Z ; std::forward<unsigned int const &>
  0002e	83 c4 04	 add	 esp, 4
  00031	50		 push	 eax
  00032	0f b6 55 ff	 movzx	 edx, BYTE PTR $T1[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ??$_Debug_lt_pred@U?$less@X@std@@ABIABI@std@@YA_NU?$less@X@0@ABI1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,unsigned int const &,unsigned int const &>
  0003c	83 c4 14	 add	 esp, 20			; 00000014H
; Line 535
  0003f	83 c4 04	 add	 esp, 4
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??$_Debug_lt@ABIABI@std@@YA_NABI0PB_WI@Z ENDP		; std::_Debug_lt<unsigned int const &,unsigned int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -8						; size = 4
_dwTranslucency$ = -4					; size = 4
?SetCompStringColor@@YAXXZ PROC				; SetCompStringColor
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2234
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 2236
  00014	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _g_dwIMELevel, 2
  0001b	75 09		 jne	 SHORT $LN3@SetCompStr
  0001d	c7 45 f8 00 00
	00 ff		 mov	 DWORD PTR tv67[ebp], -16777216 ; ff000000H
  00024	eb 0d		 jmp	 SHORT $LN4@SetCompStr
$LN3@SetCompStr:
  00026	0f b6 05 34 00
	00 00		 movzx	 eax, BYTE PTR _gSkinIME+52
  0002d	c1 e0 18	 shl	 eax, 24			; 00000018H
  00030	89 45 f8	 mov	 DWORD PTR tv67[ebp], eax
$LN4@SetCompStr:
  00033	8b 4d f8	 mov	 ecx, DWORD PTR tv67[ebp]
  00036	89 4d fc	 mov	 DWORD PTR _dwTranslucency$[ebp], ecx
; Line 2237
  00039	8b 55 fc	 mov	 edx, DWORD PTR _dwTranslucency$[ebp]
  0003c	0b 15 20 00 00
	00		 or	 edx, DWORD PTR _gSkinIME+32
  00042	89 15 00 00 00
	00		 mov	 DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A, edx
; Line 2238
  00048	8b 45 fc	 mov	 eax, DWORD PTR _dwTranslucency$[ebp]
  0004b	0b 05 24 00 00
	00		 or	 eax, DWORD PTR _gSkinIME+36
  00051	a3 04 00 00 00	 mov	 DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+4, eax
; Line 2239
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _dwTranslucency$[ebp]
  00059	0b 0d 28 00 00
	00		 or	 ecx, DWORD PTR _gSkinIME+40
  0005f	89 0d 08 00 00
	00		 mov	 DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+8, ecx
; Line 2240
  00065	8b 55 fc	 mov	 edx, DWORD PTR _dwTranslucency$[ebp]
  00068	0b 15 2c 00 00
	00		 or	 edx, DWORD PTR _gSkinIME+44
  0006e	89 15 0c 00 00
	00		 mov	 DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+12, edx
; Line 2241
  00074	8b 45 fc	 mov	 eax, DWORD PTR _dwTranslucency$[ebp]
  00077	0b 05 30 00 00
	00		 or	 eax, DWORD PTR _gSkinIME+48
  0007d	a3 10 00 00 00	 mov	 DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+16, eax
; Line 2242
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
?SetCompStringColor@@YAXXZ ENDP				; SetCompStringColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$min@K@std@@YAABKABK0@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@K@std@@YAABKABK0@Z PROC				; std::min<unsigned long>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 4120
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 4121
  00014	68 19 10 00 00	 push	 4121			; 00001019H
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??$_Debug_lt@ABKABK@std@@YA_NABK0PB_WI@Z ; std::_Debug_lt<unsigned long const &,unsigned long const &>
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	0f b6 d0	 movzx	 edx, al
  00031	85 d2		 test	 edx, edx
  00033	74 08		 je	 SHORT $LN3@min
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00038	89 45 f8	 mov	 DWORD PTR tv71[ebp], eax
  0003b	eb 06		 jmp	 SHORT $LN4@min
$LN3@min:
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00040	89 4d f8	 mov	 DWORD PTR tv71[ebp], ecx
$LN4@min:
  00043	8b 55 f8	 mov	 edx, DWORD PTR tv71[ebp]
  00046	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00049	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; Line 4122
  0004c	83 c4 08	 add	 esp, 8
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??$min@K@std@@YAABKABK0@Z ENDP				; std::min<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 4120
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 4121
  00014	68 19 10 00 00	 push	 4121			; 00001019H
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 ??$_Debug_lt@ABIABI@std@@YA_NABI0PB_WI@Z ; std::_Debug_lt<unsigned int const &,unsigned int const &>
  0002b	83 c4 10	 add	 esp, 16			; 00000010H
  0002e	0f b6 d0	 movzx	 edx, al
  00031	85 d2		 test	 edx, edx
  00033	74 08		 je	 SHORT $LN3@min
  00035	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  00038	89 45 f8	 mov	 DWORD PTR tv71[ebp], eax
  0003b	eb 06		 jmp	 SHORT $LN4@min
$LN3@min:
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00040	89 4d f8	 mov	 DWORD PTR tv71[ebp], ecx
$LN4@min:
  00043	8b 55 f8	 mov	 edx, DWORD PTR tv71[ebp]
  00046	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  00049	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; Line 4122
  0004c	83 c4 08	 add	 esp, 8
  0004f	3b ec		 cmp	 ebp, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?CloseCandidateList@@YAXXZ PROC				; CloseCandidateList
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 1214
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1215
  00003	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _g_bCandList, 0
; Line 1216
  0000a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bReadingWindow
  00011	85 c0		 test	 eax, eax
  00013	75 1e		 jne	 SHORT $LN2@CloseCandi
; Line 1218
  00015	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_dwCount, 0
; Line 1219
  0001f	68 00 14 00 00	 push	 5120			; 00001400H
  00024	6a 00		 push	 0
  00026	68 00 00 00 00	 push	 OFFSET _g_szCandidate
  0002b	e8 00 00 00 00	 call	 _memset
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@CloseCandi:
; Line 1221
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?CloseCandidateList@@YAXXZ ENDP				; CloseCandidateList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_height$ = 16						; size = 4
?DrawCaret@@YAXKKK@Z PROC				; DrawCaret
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 561
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 562
  00004	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bCaretDraw
  0000b	85 c0		 test	 eax, eax
  0000d	74 49		 je	 SHORT $LN2@DrawCaret
  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
  00016	74 40		 je	 SHORT $LN2@DrawCaret
; Line 564
  00018	8b f4		 mov	 esi, esp
  0001a	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+12
  00020	51		 push	 ecx
  00021	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00024	03 55 10	 add	 edx, DWORD PTR _height$[ebp]
  00027	0f b6 05 3d 00
	00 00		 movzx	 eax, BYTE PTR _gSkinIME+61
  0002e	2b d0		 sub	 edx, eax
  00030	52		 push	 edx
  00031	0f b6 0d 3c 00
	00 00		 movzx	 ecx, BYTE PTR _gSkinIME+60
  00038	03 4d 08	 add	 ecx, DWORD PTR _x$[ebp]
  0003b	51		 push	 ecx
  0003c	0f b6 15 3d 00
	00 00		 movzx	 edx, BYTE PTR _gSkinIME+61
  00043	03 55 0c	 add	 edx, DWORD PTR _y$[ebp]
  00046	52		 push	 edx
  00047	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@DrawCaret:
; Line 565
  00058	5e		 pop	 esi
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
?DrawCaret@@YAXKKK@Z ENDP				; DrawCaret
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?InitCompStringData@@YAXXZ PROC				; InitCompStringData
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 553
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 554
  00003	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_IMECursorBytes, 0
; Line 555
  0000d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_IMECursorChars, 0
; Line 556
  00017	68 00 02 00 00	 push	 512			; 00000200H
  0001c	6a 00		 push	 0
  0001e	68 00 00 00 00	 push	 OFFSET _g_szCompositionString
  00023	e8 00 00 00 00	 call	 _memset
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 557
  0002b	68 00 01 00 00	 push	 256			; 00000100H
  00030	6a 00		 push	 0
  00032	68 00 00 00 00	 push	 OFFSET _g_szCompAttrString
  00037	e8 00 00 00 00	 call	 _memset
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 558
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?InitCompStringData@@YAXXZ ENDP				; InitCompStringData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -24						; size = 4
tv129 = -18						; size = 2
tv94 = -16						; size = 4
tv91 = -12						; size = 4
_i$ = -8						; size = 4
_cc$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_bUseBackSpace$ = 12					; size = 1
_iNewStrLen$ = 16					; size = 4
?CancelCompString@@YAXPAUHWND__@@_NH@Z PROC		; CancelCompString
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 518
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 519
  0001d	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _g_dwIMELevel, 3
  00024	74 05		 je	 SHORT $LN8@CancelComp
; Line 520
  00026	e9 da 00 00 00	 jmp	 $LN9@CancelComp
$LN8@CancelComp:
; Line 521
  0002b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], OFFSET _g_szCompositionString
  00032	8b 45 f4	 mov	 eax, DWORD PTR tv91[ebp]
  00035	83 c0 02	 add	 eax, 2
  00038	89 45 f0	 mov	 DWORD PTR tv94[ebp], eax
$LL11@CancelComp:
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR tv91[ebp]
  0003e	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00041	66 89 55 ee	 mov	 WORD PTR tv129[ebp], dx
  00045	83 45 f4 02	 add	 DWORD PTR tv91[ebp], 2
  00049	66 83 7d ee 00	 cmp	 WORD PTR tv129[ebp], 0
  0004e	75 eb		 jne	 SHORT $LL11@CancelComp
  00050	8b 45 f4	 mov	 eax, DWORD PTR tv91[ebp]
  00053	2b 45 f0	 sub	 eax, DWORD PTR tv94[ebp]
  00056	d1 f8		 sar	 eax, 1
  00058	89 45 e8	 mov	 DWORD PTR tv67[ebp], eax
  0005b	8b 4d e8	 mov	 ecx, DWORD PTR tv67[ebp]
  0005e	89 4d fc	 mov	 DWORD PTR _cc$[ebp], ecx
; Line 524
  00061	8b 55 fc	 mov	 edx, DWORD PTR _cc$[ebp]
  00064	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR _g_IMECursorChars
  0006a	52		 push	 edx
  0006b	6a 27		 push	 39			; 00000027H
  0006d	e8 00 00 00 00	 call	 ?SendControlKeys@@YAXII@Z ; SendControlKeys
  00072	83 c4 08	 add	 esp, 8
; Line 526
  00075	0f b6 45 0c	 movzx	 eax, BYTE PTR _bUseBackSpace$[ebp]
  00079	85 c0		 test	 eax, eax
  0007b	75 0b		 jne	 SHORT $LN6@CancelComp
  0007d	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bInsertMode
  00084	85 c9		 test	 ecx, ecx
  00086	74 07		 je	 SHORT $LN7@CancelComp
$LN6@CancelComp:
; Line 527
  00088	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _iNewStrLen$[ebp], 0
$LN7@CancelComp:
; Line 536
  0008f	8b 55 10	 mov	 edx, DWORD PTR _iNewStrLen$[ebp]
  00092	3b 55 fc	 cmp	 edx, DWORD PTR _cc$[ebp]
  00095	7d 5a		 jge	 SHORT $LN5@CancelComp
; Line 538
  00097	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0009e	eb 09		 jmp	 SHORT $LN4@CancelComp
$LN3@CancelComp:
  000a0	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  000a3	83 c0 01	 add	 eax, 1
  000a6	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@CancelComp:
  000a9	8b 4d fc	 mov	 ecx, DWORD PTR _cc$[ebp]
  000ac	2b 4d 10	 sub	 ecx, DWORD PTR _iNewStrLen$[ebp]
  000af	39 4d f8	 cmp	 DWORD PTR _i$[ebp], ecx
  000b2	7d 28		 jge	 SHORT $LN2@CancelComp
; Line 540
  000b4	6a 08		 push	 8
  000b6	68 00 01 00 00	 push	 256			; 00000100H
  000bb	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  000be	52		 push	 edx
  000bf	e8 00 00 00 00	 call	 ?SendKeyMsg@@YAJPAUHWND__@@II@Z ; SendKeyMsg
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 541
  000c7	6a 08		 push	 8
  000c9	68 02 01 00 00	 push	 258			; 00000102H
  000ce	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 ?SendKeyMsg@@YAJPAUHWND__@@II@Z ; SendKeyMsg
  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 542
  000da	eb c4		 jmp	 SHORT $LN3@CancelComp
$LN2@CancelComp:
; Line 543
  000dc	6a 08		 push	 8
  000de	68 01 01 00 00	 push	 257			; 00000101H
  000e3	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 ?SendKeyMsg@@YAJPAUHWND__@@II@Z ; SendKeyMsg
  000ec	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 545
  000ef	eb 06		 jmp	 SHORT $LN1@CancelComp
$LN5@CancelComp:
; Line 546
  000f1	8b 55 fc	 mov	 edx, DWORD PTR _cc$[ebp]
  000f4	89 55 10	 mov	 DWORD PTR _iNewStrLen$[ebp], edx
$LN1@CancelComp:
; Line 548
  000f7	8b 45 10	 mov	 eax, DWORD PTR _iNewStrLen$[ebp]
  000fa	50		 push	 eax
  000fb	6a 25		 push	 37			; 00000025H
  000fd	e8 00 00 00 00	 call	 ?SendControlKeys@@YAXII@Z ; SendControlKeys
  00102	83 c4 08	 add	 esp, 8
$LN9@CancelComp:
; Line 549
  00105	83 c4 18	 add	 esp, 24			; 00000018H
  00108	3b ec		 cmp	 ebp, esp
  0010a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
?CancelCompString@@YAXPAUHWND__@@_NH@Z ENDP		; CancelCompString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_vk$ = 8						; size = 4
_num$ = 12						; size = 4
?SendControlKeys@@YAXII@Z PROC				; SendControlKeys
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 506
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 507
  0000b	83 7d 0c 00	 cmp	 DWORD PTR _num$[ebp], 0
  0000f	75 02		 jne	 SHORT $LN4@SendContro
; Line 508
  00011	eb 4b		 jmp	 SHORT $LN5@SendContro
$LN4@SendContro:
; Line 509
  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001a	eb 09		 jmp	 SHORT $LN3@SendContro
$LN2@SendContro:
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  0001f	83 c0 01	 add	 eax, 1
  00022	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN3@SendContro:
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _i$1[ebp]
  00028	3b 4d 0c	 cmp	 ecx, DWORD PTR _num$[ebp]
  0002b	73 19		 jae	 SHORT $LN1@SendContro
; Line 511
  0002d	8b 55 08	 mov	 edx, DWORD PTR _vk$[ebp]
  00030	52		 push	 edx
  00031	68 00 01 00 00	 push	 256			; 00000100H
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hwndCurr
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?SendKeyMsg@@YAJPAUHWND__@@II@Z ; SendKeyMsg
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 512
  00044	eb d6		 jmp	 SHORT $LN2@SendContro
$LN1@SendContro:
; Line 513
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _vk$[ebp]
  00049	51		 push	 ecx
  0004a	68 01 01 00 00	 push	 257			; 00000101H
  0004f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndCurr
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 ?SendKeyMsg@@YAJPAUHWND__@@II@Z ; SendKeyMsg
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@SendContro:
; Line 514
  0005e	83 c4 04	 add	 esp, 4
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?SendControlKeys@@YAXII@Z ENDP				; SendControlKeys
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dwBufLen$ = -4						; size = 4
_himc$ = 8						; size = 4
_dwIndex$ = 12						; size = 4
_ppCandList$ = 16					; size = 4
?GetCandidateList@@YAKPAUHIMC__@@KPAPAUtagCANDIDATELIST@@@Z PROC ; GetCandidateList
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 495
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 496
  0000c	8b f4		 mov	 esi, esp
  0000e	6a 00		 push	 0
  00010	6a 00		 push	 0
  00012	8b 45 0c	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00015	50		 push	 eax
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _himc$[ebp]
  00019	51		 push	 ecx
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __ImmGetCandidateList
  00020	3b f4		 cmp	 esi, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	89 45 fc	 mov	 DWORD PTR _dwBufLen$[ebp], eax
; Line 497
  0002a	83 7d fc 00	 cmp	 DWORD PTR _dwBufLen$[ebp], 0
  0002e	74 3f		 je	 SHORT $LN1@GetCandida
; Line 499
  00030	8b f4		 mov	 esi, esp
  00032	8b 55 fc	 mov	 edx, DWORD PTR _dwBufLen$[ebp]
  00035	52		 push	 edx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_Malloc@@3P6APAXI@ZA ; ImeUiCallback_Malloc
  0003c	83 c4 04	 add	 esp, 4
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b 4d 10	 mov	 ecx, DWORD PTR _ppCandList$[ebp]
  00049	89 01		 mov	 DWORD PTR [ecx], eax
; Line 500
  0004b	8b f4		 mov	 esi, esp
  0004d	8b 55 fc	 mov	 edx, DWORD PTR _dwBufLen$[ebp]
  00050	52		 push	 edx
  00051	8b 45 10	 mov	 eax, DWORD PTR _ppCandList$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	51		 push	 ecx
  00057	8b 55 0c	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  0005a	52		 push	 edx
  0005b	8b 45 08	 mov	 eax, DWORD PTR _himc$[ebp]
  0005e	50		 push	 eax
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __ImmGetCandidateList
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	89 45 fc	 mov	 DWORD PTR _dwBufLen$[ebp], eax
$LN1@GetCandida:
; Line 502
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _dwBufLen$[ebp]
; Line 503
  00072	5e		 pop	 esi
  00073	83 c4 04	 add	 esp, 4
  00076	3b ec		 cmp	 ebp, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?GetCandidateList@@YAKPAUHIMC__@@KPAPAUtagCANDIDATELIST@@@Z ENDP ; GetCandidateList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -28						; size = 4
tv88 = -22						; size = 2
tv85 = -20						; size = 4
tv82 = -16						; size = 4
_pwz$1 = -12						; size = 4
_iLen$ = -8						; size = 4
_i$ = -4						; size = 4
?SendCompString@@YAXXZ PROC				; SendCompString
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 474
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00012	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00015	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00018	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 475
  00021	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], OFFSET _g_szCompositionString
  00028	8b 45 f0	 mov	 eax, DWORD PTR tv82[ebp]
  0002b	83 c0 02	 add	 eax, 2
  0002e	89 45 ec	 mov	 DWORD PTR tv85[ebp], eax
$LL10@SendCompSt:
  00031	8b 4d f0	 mov	 ecx, DWORD PTR tv82[ebp]
  00034	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00037	66 89 55 ea	 mov	 WORD PTR tv88[ebp], dx
  0003b	83 45 f0 02	 add	 DWORD PTR tv82[ebp], 2
  0003f	66 83 7d ea 00	 cmp	 WORD PTR tv88[ebp], 0
  00044	75 eb		 jne	 SHORT $LL10@SendCompSt
  00046	8b 45 f0	 mov	 eax, DWORD PTR tv82[ebp]
  00049	2b 45 ec	 sub	 eax, DWORD PTR tv85[ebp]
  0004c	d1 f8		 sar	 eax, 1
  0004e	89 45 e4	 mov	 DWORD PTR tv66[ebp], eax
  00051	8b 4d e4	 mov	 ecx, DWORD PTR tv66[ebp]
  00054	89 4d f8	 mov	 DWORD PTR _iLen$[ebp], ecx
; Line 476
  00057	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ImeUiCallback_OnChar@@3P6GX_W@ZA, 0 ; ImeUiCallback_OnChar
  0005e	74 3f		 je	 SHORT $LN7@SendCompSt
; Line 479
  00060	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pwz$1[ebp], OFFSET _g_szCompositionString
; Line 480
  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0006e	eb 09		 jmp	 SHORT $LN6@SendCompSt
$LN5@SendCompSt:
  00070	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00073	83 c2 01	 add	 edx, 1
  00076	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN6@SendCompSt:
  00079	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0007c	3b 45 f8	 cmp	 eax, DWORD PTR _iLen$[ebp]
  0007f	7d 1c		 jge	 SHORT $LN4@SendCompSt
; Line 482
  00081	8b f4		 mov	 esi, esp
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00086	8b 55 f4	 mov	 edx, DWORD PTR _pwz$1[ebp]
  00089	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0008d	50		 push	 eax
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_OnChar@@3P6GX_W@ZA ; ImeUiCallback_OnChar
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 483
  0009b	eb d3		 jmp	 SHORT $LN5@SendCompSt
$LN4@SendCompSt:
; Line 484
  0009d	eb 3c		 jmp	 SHORT $LN8@SendCompSt
$LN7@SendCompSt:
; Line 486
  0009f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000a6	eb 09		 jmp	 SHORT $LN3@SendCompSt
$LN2@SendCompSt:
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000ab	83 c1 01	 add	 ecx, 1
  000ae	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN3@SendCompSt:
  000b1	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000b4	3b 55 f8	 cmp	 edx, DWORD PTR _iLen$[ebp]
  000b7	7d 22		 jge	 SHORT $LN8@SendCompSt
; Line 490
  000b9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000bc	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR _g_szCompositionString[eax*2]
  000c4	51		 push	 ecx
  000c5	68 02 01 00 00	 push	 258			; 00000102H
  000ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndCurr
  000d0	52		 push	 edx
  000d1	e8 00 00 00 00	 call	 ?SendKeyMsg@@YAJPAUHWND__@@II@Z ; SendKeyMsg
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 491
  000d9	eb cd		 jmp	 SHORT $LN2@SendCompSt
$LN8@SendCompSt:
; Line 492
  000db	5e		 pop	 esi
  000dc	83 c4 1c	 add	 esp, 28			; 0000001cH
  000df	3b ec		 cmp	 ebp, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
?SendCompString@@YAXXZ ENDP				; SendCompString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_psz$ = -4						; size = 4
_index$ = 8						; size = 4
_pszCandidate$ = 12					; size = 4
?ComposeCandidateLine@@YAXHPB_W@Z PROC			; ComposeCandidateLine
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 459
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 460
  0000b	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0000e	c1 e0 09	 shl	 eax, 9
  00011	05 00 00 00 00	 add	 eax, OFFSET _g_szCandidate
  00016	89 45 fc	 mov	 DWORD PTR _psz$[ebp], eax
; Line 461
  00019	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0001c	03 05 00 00 00
	00		 add	 eax, DWORD PTR _g_iCandListIndexBase
  00022	99		 cdq
  00023	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00028	f7 f9		 idiv	 ecx
  0002a	83 c2 30	 add	 edx, 48			; 00000030H
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _psz$[ebp]
  00030	66 89 10	 mov	 WORD PTR [eax], dx
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _psz$[ebp]
  00036	83 c1 02	 add	 ecx, 2
  00039	89 4d fc	 mov	 DWORD PTR _psz$[ebp], ecx
; Line 462
  0003c	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _g_bVerticalCand
  00043	85 d2		 test	 edx, edx
  00045	74 14		 je	 SHORT $LN2@ComposeCan
; Line 464
  00047	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _psz$[ebp]
  0004f	66 89 01	 mov	 WORD PTR [ecx], ax
  00052	8b 55 fc	 mov	 edx, DWORD PTR _psz$[ebp]
  00055	83 c2 02	 add	 edx, 2
  00058	89 55 fc	 mov	 DWORD PTR _psz$[ebp], edx
$LN2@ComposeCan:
; Line 466
  0005b	8b 45 0c	 mov	 eax, DWORD PTR _pszCandidate$[ebp]
  0005e	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00061	85 c9		 test	 ecx, ecx
  00063	74 3a		 je	 SHORT $LN1@ComposeCan
  00065	8b 55 08	 mov	 edx, DWORD PTR _index$[ebp]
  00068	c1 e2 09	 shl	 edx, 9
  0006b	81 c2 00 00 00
	00		 add	 edx, OFFSET _g_szCandidate
  00071	8b 45 fc	 mov	 eax, DWORD PTR _psz$[ebp]
  00074	2b c2		 sub	 eax, edx
  00076	d1 f8		 sar	 eax, 1
  00078	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  0007d	73 20		 jae	 SHORT $LN1@ComposeCan
; Line 468
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _psz$[ebp]
  00082	8b 55 0c	 mov	 edx, DWORD PTR _pszCandidate$[ebp]
  00085	66 8b 02	 mov	 ax, WORD PTR [edx]
  00088	66 89 01	 mov	 WORD PTR [ecx], ax
  0008b	8b 4d fc	 mov	 ecx, DWORD PTR _psz$[ebp]
  0008e	83 c1 02	 add	 ecx, 2
  00091	89 4d fc	 mov	 DWORD PTR _psz$[ebp], ecx
  00094	8b 55 0c	 mov	 edx, DWORD PTR _pszCandidate$[ebp]
  00097	83 c2 02	 add	 edx, 2
  0009a	89 55 0c	 mov	 DWORD PTR _pszCandidate$[ebp], edx
; Line 469
  0009d	eb bc		 jmp	 SHORT $LN2@ComposeCan
$LN1@ComposeCan:
; Line 470
  0009f	33 c0		 xor	 eax, eax
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR _psz$[ebp]
  000a4	66 89 01	 mov	 WORD PTR [ecx], ax
; Line 471
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
?ComposeCandidateLine@@YAXHPB_W@Z ENDP			; ComposeCandidateLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ul$1 = -8						; size = 4
_ulRet$ = -4						; size = 4
_psz$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?_strtoul@@YAKPBDPAPA_WH@Z PROC				; _strtoul
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 421
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 422
  00014	83 7d 08 00	 cmp	 DWORD PTR _psz$[ebp], 0
  00018	75 07		 jne	 SHORT $LN14@strtoul
; Line 423
  0001a	33 c0		 xor	 eax, eax
  0001c	e9 32 01 00 00	 jmp	 $LN15@strtoul
$LN14@strtoul:
; Line 425
  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _ulRet$[ebp], 0
; Line 426
  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 08	 mov	 edx, DWORD PTR _psz$[ebp]
  00033	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00037	83 f8 30	 cmp	 eax, 48			; 00000030H
  0003a	0f 85 d4 00 00
	00		 jne	 $LN2@strtoul
  00040	b9 01 00 00 00	 mov	 ecx, 1
  00045	c1 e1 00	 shl	 ecx, 0
  00048	8b 55 08	 mov	 edx, DWORD PTR _psz$[ebp]
  0004b	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  0004f	83 f8 78	 cmp	 eax, 120		; 00000078H
  00052	74 18		 je	 SHORT $LN12@strtoul
  00054	b9 01 00 00 00	 mov	 ecx, 1
  00059	c1 e1 00	 shl	 ecx, 0
  0005c	8b 55 08	 mov	 edx, DWORD PTR _psz$[ebp]
  0005f	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00063	83 f8 58	 cmp	 eax, 88			; 00000058H
  00066	0f 85 a8 00 00
	00		 jne	 $LN2@strtoul
$LN12@strtoul:
; Line 428
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  0006f	83 c1 02	 add	 ecx, 2
  00072	89 4d 08	 mov	 DWORD PTR _psz$[ebp], ecx
; Line 429
  00075	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ul$1[ebp], 0
$LN11@strtoul:
; Line 430
  0007c	8b 55 08	 mov	 edx, DWORD PTR _psz$[ebp]
  0007f	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00082	85 c0		 test	 eax, eax
  00084	0f 84 88 00 00
	00		 je	 $LN10@strtoul
; Line 432
  0008a	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  0008d	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00090	83 fa 30	 cmp	 edx, 48			; 00000030H
  00093	7c 19		 jl	 SHORT $LN9@strtoul
  00095	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  00098	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0009b	83 f9 39	 cmp	 ecx, 57			; 00000039H
  0009e	7f 0e		 jg	 SHORT $LN9@strtoul
; Line 433
  000a0	8b 55 08	 mov	 edx, DWORD PTR _psz$[ebp]
  000a3	0f be 02	 movsx	 eax, BYTE PTR [edx]
  000a6	83 e8 30	 sub	 eax, 48			; 00000030H
  000a9	89 45 f8	 mov	 DWORD PTR _ul$1[ebp], eax
  000ac	eb 4a		 jmp	 SHORT $LN8@strtoul
$LN9@strtoul:
; Line 434
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  000b1	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  000b4	83 fa 41	 cmp	 edx, 65			; 00000041H
  000b7	7c 19		 jl	 SHORT $LN7@strtoul
  000b9	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  000bc	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000bf	83 f9 46	 cmp	 ecx, 70			; 00000046H
  000c2	7f 0e		 jg	 SHORT $LN7@strtoul
; Line 435
  000c4	8b 55 08	 mov	 edx, DWORD PTR _psz$[ebp]
  000c7	0f be 02	 movsx	 eax, BYTE PTR [edx]
  000ca	83 e8 37	 sub	 eax, 55			; 00000037H
  000cd	89 45 f8	 mov	 DWORD PTR _ul$1[ebp], eax
  000d0	eb 26		 jmp	 SHORT $LN8@strtoul
$LN7@strtoul:
; Line 436
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  000d5	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  000d8	83 fa 61	 cmp	 edx, 97			; 00000061H
  000db	7c 19		 jl	 SHORT $LN5@strtoul
  000dd	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  000e0	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000e3	83 f9 66	 cmp	 ecx, 102		; 00000066H
  000e6	7f 0e		 jg	 SHORT $LN5@strtoul
; Line 437
  000e8	8b 55 08	 mov	 edx, DWORD PTR _psz$[ebp]
  000eb	0f be 02	 movsx	 eax, BYTE PTR [edx]
  000ee	83 e8 57	 sub	 eax, 87			; 00000057H
  000f1	89 45 f8	 mov	 DWORD PTR _ul$1[ebp], eax
; Line 438
  000f4	eb 02		 jmp	 SHORT $LN8@strtoul
$LN5@strtoul:
; Line 439
  000f6	eb 1a		 jmp	 SHORT $LN10@strtoul
$LN8@strtoul:
; Line 440
  000f8	8b 4d fc	 mov	 ecx, DWORD PTR _ulRet$[ebp]
  000fb	c1 e1 04	 shl	 ecx, 4
  000fe	03 4d f8	 add	 ecx, DWORD PTR _ul$1[ebp]
  00101	89 4d fc	 mov	 DWORD PTR _ulRet$[ebp], ecx
; Line 441
  00104	8b 55 08	 mov	 edx, DWORD PTR _psz$[ebp]
  00107	83 c2 01	 add	 edx, 1
  0010a	89 55 08	 mov	 DWORD PTR _psz$[ebp], edx
; Line 442
  0010d	e9 6a ff ff ff	 jmp	 $LN11@strtoul
$LN10@strtoul:
; Line 444
  00112	eb 3c		 jmp	 SHORT $LN3@strtoul
$LN2@strtoul:
; Line 446
  00114	8b 45 08	 mov	 eax, DWORD PTR _psz$[ebp]
  00117	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0011a	85 c9		 test	 ecx, ecx
  0011c	74 32		 je	 SHORT $LN3@strtoul
  0011e	8b 55 08	 mov	 edx, DWORD PTR _psz$[ebp]
  00121	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00124	83 f8 30	 cmp	 eax, 48			; 00000030H
  00127	7c 27		 jl	 SHORT $LN3@strtoul
  00129	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  0012c	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0012f	83 fa 39	 cmp	 edx, 57			; 00000039H
  00132	7f 1c		 jg	 SHORT $LN3@strtoul
; Line 448
  00134	6b 45 fc 0a	 imul	 eax, DWORD PTR _ulRet$[ebp], 10
  00138	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  0013b	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0013e	8d 44 10 d0	 lea	 eax, DWORD PTR [eax+edx-48]
  00142	89 45 fc	 mov	 DWORD PTR _ulRet$[ebp], eax
; Line 449
  00145	8b 4d 08	 mov	 ecx, DWORD PTR _psz$[ebp]
  00148	83 c1 01	 add	 ecx, 1
  0014b	89 4d 08	 mov	 DWORD PTR _psz$[ebp], ecx
; Line 450
  0014e	eb c4		 jmp	 SHORT $LN2@strtoul
$LN3@strtoul:
; Line 452
  00150	8b 45 fc	 mov	 eax, DWORD PTR _ulRet$[ebp]
$LN15@strtoul:
; Line 453
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c3		 ret	 0
?_strtoul@@YAKPBDPAPA_WH@Z ENDP				; _strtoul
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hr$ = -16						; size = 4
_srcTm$ = -8						; size = 4
_bEnable$ = 8						; size = 1
?EnableUiUpdates@CTsfUiLessMode@@SAX_N@Z PROC		; CTsfUiLessMode::EnableUiUpdates
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3053
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 3056
  00018	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A, 0 ; CTsfUiLessMode::m_tm
  0001f	74 22		 je	 SHORT $LN5@EnableUiUp
  00021	0f b6 45 08	 movzx	 eax, BYTE PTR _bEnable$[ebp]
  00025	85 c0		 test	 eax, eax
  00027	74 09		 je	 SHORT $LN4@EnableUiUp
  00029	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA, -1 ; CTsfUiLessMode::m_dwUIElementSinkCookie
  00030	75 11		 jne	 SHORT $LN5@EnableUiUp
$LN4@EnableUiUp:
  00032	0f b6 4d 08	 movzx	 ecx, BYTE PTR _bEnable$[ebp]
  00036	85 c9		 test	 ecx, ecx
  00038	75 0e		 jne	 SHORT $LN6@EnableUiUp
  0003a	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA, -1 ; CTsfUiLessMode::m_dwUIElementSinkCookie
  00041	75 05		 jne	 SHORT $LN6@EnableUiUp
$LN5@EnableUiUp:
; Line 3058
  00043	e9 b2 00 00 00	 jmp	 $LN7@EnableUiUp
$LN6@EnableUiUp:
; Line 3060
  00048	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _srcTm$[ebp], 0
; Line 3061
  0004f	c7 45 f0 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
; Line 3062
  00056	8b f4		 mov	 esi, esp
  00058	8d 55 f8	 lea	 edx, DWORD PTR _srcTm$[ebp]
  0005b	52		 push	 edx
  0005c	68 00 00 00 00	 push	 OFFSET __GUID_4ea48a35_60ae_446f_8fd6_e6a8d82459f7
  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  00066	8b 08		 mov	 ecx, DWORD PTR [eax]
  00068	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  0006e	52		 push	 edx
  0006f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00071	ff d0		 call	 eax
  00073	3b f4		 cmp	 esi, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
  0007d	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00081	7c 77		 jl	 SHORT $LN7@EnableUiUp
; Line 3064
  00083	0f b6 4d 08	 movzx	 ecx, BYTE PTR _bEnable$[ebp]
  00087	85 c9		 test	 ecx, ecx
  00089	74 2d		 je	 SHORT $LN2@EnableUiUp
; Line 3067
  0008b	8b f4		 mov	 esi, esp
  0008d	68 00 00 00 00	 push	 OFFSET ?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwUIElementSinkCookie
  00092	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
  00098	52		 push	 edx
  00099	68 00 00 00 00	 push	 OFFSET __GUID_ea1ea136_19df_11d7_a6d2_00065b84435c
  0009e	8b 45 f8	 mov	 eax, DWORD PTR _srcTm$[ebp]
  000a1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a3	8b 55 f8	 mov	 edx, DWORD PTR _srcTm$[ebp]
  000a6	52		 push	 edx
  000a7	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000aa	ff d0		 call	 eax
  000ac	3b f4		 cmp	 esi, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
; Line 3069
  000b6	eb 2b		 jmp	 SHORT $LN1@EnableUiUp
$LN2@EnableUiUp:
; Line 3071
  000b8	8b f4		 mov	 esi, esp
  000ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwUIElementSinkCookie
  000c0	51		 push	 ecx
  000c1	8b 55 f8	 mov	 edx, DWORD PTR _srcTm$[ebp]
  000c4	8b 02		 mov	 eax, DWORD PTR [edx]
  000c6	8b 4d f8	 mov	 ecx, DWORD PTR _srcTm$[ebp]
  000c9	51		 push	 ecx
  000ca	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000cd	ff d2		 call	 edx
  000cf	3b f4		 cmp	 esi, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
; Line 3072
  000d9	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA, -1 ; CTsfUiLessMode::m_dwUIElementSinkCookie
$LN1@EnableUiUp:
; Line 3074
  000e3	8b 45 f8	 mov	 eax, DWORD PTR _srcTm$[ebp]
  000e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e8	8b f4		 mov	 esi, esp
  000ea	8b 55 f8	 mov	 edx, DWORD PTR _srcTm$[ebp]
  000ed	52		 push	 edx
  000ee	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000f1	ff d0		 call	 eax
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@EnableUiUp:
; Line 3076
  000fa	52		 push	 edx
  000fb	8b cd		 mov	 ecx, ebp
  000fd	50		 push	 eax
  000fe	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@EnableUiUp
  00104	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00109	58		 pop	 eax
  0010a	5a		 pop	 edx
  0010b	5e		 pop	 esi
  0010c	83 c4 10	 add	 esp, 16			; 00000010H
  0010f	3b ec		 cmp	 ebp, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c3		 ret	 0
  0011a	8b ff		 npad	 2
$LN11@EnableUiUp:
  0011c	01 00 00 00	 DD	 1
  00120	00 00 00 00	 DD	 $LN10@EnableUiUp
$LN10@EnableUiUp:
  00124	f8 ff ff ff	 DD	 -8			; fffffff8H
  00128	04 00 00 00	 DD	 4
  0012c	00 00 00 00	 DD	 $LN9@EnableUiUp
$LN9@EnableUiUp:
  00130	73		 DB	 115			; 00000073H
  00131	72		 DB	 114			; 00000072H
  00132	63		 DB	 99			; 00000063H
  00133	54		 DB	 84			; 00000054H
  00134	6d		 DB	 109			; 0000006dH
  00135	00		 DB	 0
?EnableUiUpdates@CTsfUiLessMode@@SAX_N@Z ENDP		; CTsfUiLessMode::EnableUiUpdates
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv89 = -92						; size = 4
tv87 = -88						; size = 4
_valConvMode$1 = -80					; size = 16
_valOpenMode$2 = -56					; size = 16
_pTfConvMode$ = -32					; size = 4
_pTfOpenMode$ = -20					; size = 4
_pcm$ = -8						; size = 4
_bResetCompartmentEventSink$ = 8			; size = 4
?UpdateImeState@CTsfUiLessMode@@SAXH@Z PROC		; CTsfUiLessMode::UpdateImeState
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2826
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  0000b	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
; Line 2828
  00017	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pTfOpenMode$[ebp], 0
; Line 2829
  0001e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _pTfConvMode$[ebp], 0
; Line 2830
  00025	8d 45 e0	 lea	 eax, DWORD PTR _pTfConvMode$[ebp]
  00028	50		 push	 eax
  00029	8d 4d ec	 lea	 ecx, DWORD PTR _pTfOpenMode$[ebp]
  0002c	51		 push	 ecx
  0002d	8d 55 f8	 lea	 edx, DWORD PTR _pcm$[ebp]
  00030	52		 push	 edx
  00031	e8 00 00 00 00	 call	 ?GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z ; CTsfUiLessMode::GetCompartments
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	85 c0		 test	 eax, eax
  0003b	0f 84 1e 01 00
	00		 je	 $LN8@UpdateImeS
; Line 2833
  00041	8b f4		 mov	 esi, esp
  00043	8d 45 c8	 lea	 eax, DWORD PTR _valOpenMode$2[ebp]
  00046	50		 push	 eax
  00047	8b 4d ec	 mov	 ecx, DWORD PTR _pTfOpenMode$[ebp]
  0004a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004c	8b 45 ec	 mov	 eax, DWORD PTR _pTfOpenMode$[ebp]
  0004f	50		 push	 eax
  00050	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00053	ff d1		 call	 ecx
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	85 c0		 test	 eax, eax
  0005e	0f 8c 9e 00 00
	00		 jl	 $LN6@UpdateImeS
; Line 2836
  00064	8b f4		 mov	 esi, esp
  00066	8d 55 b0	 lea	 edx, DWORD PTR _valConvMode$1[ebp]
  00069	52		 push	 edx
  0006a	8b 45 e0	 mov	 eax, DWORD PTR _pTfConvMode$[ebp]
  0006d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006f	8b 55 e0	 mov	 edx, DWORD PTR _pTfConvMode$[ebp]
  00072	52		 push	 edx
  00073	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00076	ff d0		 call	 eax
  00078	3b f4		 cmp	 esi, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	85 c0		 test	 eax, eax
  00081	7c 6c		 jl	 SHORT $LN5@UpdateImeS
; Line 2838
  00083	0f b7 4d c8	 movzx	 ecx, WORD PTR _valOpenMode$2[ebp]
  00087	83 f9 03	 cmp	 ecx, 3
  0008a	75 50		 jne	 SHORT $LN4@UpdateImeS
; Line 2840
  0008c	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _g_bChineseIME
  00093	85 d2		 test	 edx, edx
  00095	74 26		 je	 SHORT $LN3@UpdateImeS
; Line 2842
  00097	83 7d d0 00	 cmp	 DWORD PTR _valOpenMode$2[ebp+8], 0
  0009b	74 0f		 je	 SHORT $LN10@UpdateImeS
  0009d	83 7d b8 00	 cmp	 DWORD PTR _valConvMode$1[ebp+8], 0
  000a1	74 09		 je	 SHORT $LN10@UpdateImeS
  000a3	c7 45 a8 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
  000aa	eb 07		 jmp	 SHORT $LN11@UpdateImeS
$LN10@UpdateImeS:
  000ac	c7 45 a8 02 00
	00 00		 mov	 DWORD PTR tv87[ebp], 2
$LN11@UpdateImeS:
  000b3	8b 45 a8	 mov	 eax, DWORD PTR tv87[ebp]
  000b6	a3 00 00 00 00	 mov	 DWORD PTR _g_dwState, eax
; Line 2844
  000bb	eb 1f		 jmp	 SHORT $LN4@UpdateImeS
$LN3@UpdateImeS:
; Line 2846
  000bd	83 7d d0 00	 cmp	 DWORD PTR _valOpenMode$2[ebp+8], 0
  000c1	74 09		 je	 SHORT $LN12@UpdateImeS
  000c3	c7 45 a4 01 00
	00 00		 mov	 DWORD PTR tv89[ebp], 1
  000ca	eb 07		 jmp	 SHORT $LN13@UpdateImeS
$LN12@UpdateImeS:
  000cc	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN13@UpdateImeS:
  000d3	8b 4d a4	 mov	 ecx, DWORD PTR tv89[ebp]
  000d6	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwState, ecx
$LN4@UpdateImeS:
; Line 2849
  000dc	8b f4		 mov	 esi, esp
  000de	8d 55 b0	 lea	 edx, DWORD PTR _valConvMode$1[ebp]
  000e1	52		 push	 edx
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
  000e8	3b f4		 cmp	 esi, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@UpdateImeS:
; Line 2851
  000ef	8b f4		 mov	 esi, esp
  000f1	8d 45 c8	 lea	 eax, DWORD PTR _valOpenMode$2[ebp]
  000f4	50		 push	 eax
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VariantClear@4
  000fb	3b f4		 cmp	 esi, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@UpdateImeS:
; Line 2854
  00102	83 7d 08 00	 cmp	 DWORD PTR _bResetCompartmentEventSink$[ebp], 0
  00106	74 12		 je	 SHORT $LN1@UpdateImeS
; Line 2856
  00108	8b 4d e0	 mov	 ecx, DWORD PTR _pTfConvMode$[ebp]
  0010b	51		 push	 ecx
  0010c	8b 55 ec	 mov	 edx, DWORD PTR _pTfOpenMode$[ebp]
  0010f	52		 push	 edx
  00110	6a 00		 push	 0
  00112	e8 00 00 00 00	 call	 ?SetupCompartmentSinks@CTsfUiLessMode@@KAHHPAUITfCompartment@@0@Z ; CTsfUiLessMode::SetupCompartmentSinks
  00117	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@UpdateImeS:
; Line 2858
  0011a	8b 45 ec	 mov	 eax, DWORD PTR _pTfOpenMode$[ebp]
  0011d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011f	8b f4		 mov	 esi, esp
  00121	8b 55 ec	 mov	 edx, DWORD PTR _pTfOpenMode$[ebp]
  00124	52		 push	 edx
  00125	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00128	ff d0		 call	 eax
  0012a	3b f4		 cmp	 esi, esp
  0012c	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2859
  00131	8b 4d e0	 mov	 ecx, DWORD PTR _pTfConvMode$[ebp]
  00134	8b 11		 mov	 edx, DWORD PTR [ecx]
  00136	8b f4		 mov	 esi, esp
  00138	8b 45 e0	 mov	 eax, DWORD PTR _pTfConvMode$[ebp]
  0013b	50		 push	 eax
  0013c	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0013f	ff d1		 call	 ecx
  00141	3b f4		 cmp	 esi, esp
  00143	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2860
  00148	8b 55 f8	 mov	 edx, DWORD PTR _pcm$[ebp]
  0014b	8b 02		 mov	 eax, DWORD PTR [edx]
  0014d	8b f4		 mov	 esi, esp
  0014f	8b 4d f8	 mov	 ecx, DWORD PTR _pcm$[ebp]
  00152	51		 push	 ecx
  00153	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00156	ff d2		 call	 edx
  00158	3b f4		 cmp	 esi, esp
  0015a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN8@UpdateImeS:
; Line 2862
  0015f	52		 push	 edx
  00160	8b cd		 mov	 ecx, ebp
  00162	50		 push	 eax
  00163	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN20@UpdateImeS
  00169	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0016e	58		 pop	 eax
  0016f	5a		 pop	 edx
  00170	5f		 pop	 edi
  00171	5e		 pop	 esi
  00172	83 c4 5c	 add	 esp, 92			; 0000005cH
  00175	3b ec		 cmp	 ebp, esp
  00177	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017c	8b e5		 mov	 esp, ebp
  0017e	5d		 pop	 ebp
  0017f	c3		 ret	 0
$LN20@UpdateImeS:
  00180	05 00 00 00	 DD	 5
  00184	00 00 00 00	 DD	 $LN19@UpdateImeS
$LN19@UpdateImeS:
  00188	f8 ff ff ff	 DD	 -8			; fffffff8H
  0018c	04 00 00 00	 DD	 4
  00190	00 00 00 00	 DD	 $LN14@UpdateImeS
  00194	ec ff ff ff	 DD	 -20			; ffffffecH
  00198	04 00 00 00	 DD	 4
  0019c	00 00 00 00	 DD	 $LN15@UpdateImeS
  001a0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001a4	04 00 00 00	 DD	 4
  001a8	00 00 00 00	 DD	 $LN16@UpdateImeS
  001ac	c8 ff ff ff	 DD	 -56			; ffffffc8H
  001b0	10 00 00 00	 DD	 16			; 00000010H
  001b4	00 00 00 00	 DD	 $LN17@UpdateImeS
  001b8	b0 ff ff ff	 DD	 -80			; ffffffb0H
  001bc	10 00 00 00	 DD	 16			; 00000010H
  001c0	00 00 00 00	 DD	 $LN18@UpdateImeS
$LN18@UpdateImeS:
  001c4	76		 DB	 118			; 00000076H
  001c5	61		 DB	 97			; 00000061H
  001c6	6c		 DB	 108			; 0000006cH
  001c7	43		 DB	 67			; 00000043H
  001c8	6f		 DB	 111			; 0000006fH
  001c9	6e		 DB	 110			; 0000006eH
  001ca	76		 DB	 118			; 00000076H
  001cb	4d		 DB	 77			; 0000004dH
  001cc	6f		 DB	 111			; 0000006fH
  001cd	64		 DB	 100			; 00000064H
  001ce	65		 DB	 101			; 00000065H
  001cf	00		 DB	 0
$LN17@UpdateImeS:
  001d0	76		 DB	 118			; 00000076H
  001d1	61		 DB	 97			; 00000061H
  001d2	6c		 DB	 108			; 0000006cH
  001d3	4f		 DB	 79			; 0000004fH
  001d4	70		 DB	 112			; 00000070H
  001d5	65		 DB	 101			; 00000065H
  001d6	6e		 DB	 110			; 0000006eH
  001d7	4d		 DB	 77			; 0000004dH
  001d8	6f		 DB	 111			; 0000006fH
  001d9	64		 DB	 100			; 00000064H
  001da	65		 DB	 101			; 00000065H
  001db	00		 DB	 0
$LN16@UpdateImeS:
  001dc	70		 DB	 112			; 00000070H
  001dd	54		 DB	 84			; 00000054H
  001de	66		 DB	 102			; 00000066H
  001df	43		 DB	 67			; 00000043H
  001e0	6f		 DB	 111			; 0000006fH
  001e1	6e		 DB	 110			; 0000006eH
  001e2	76		 DB	 118			; 00000076H
  001e3	4d		 DB	 77			; 0000004dH
  001e4	6f		 DB	 111			; 0000006fH
  001e5	64		 DB	 100			; 00000064H
  001e6	65		 DB	 101			; 00000065H
  001e7	00		 DB	 0
$LN15@UpdateImeS:
  001e8	70		 DB	 112			; 00000070H
  001e9	54		 DB	 84			; 00000054H
  001ea	66		 DB	 102			; 00000066H
  001eb	4f		 DB	 79			; 0000004fH
  001ec	70		 DB	 112			; 00000070H
  001ed	65		 DB	 101			; 00000065H
  001ee	6e		 DB	 110			; 0000006eH
  001ef	4d		 DB	 77			; 0000004dH
  001f0	6f		 DB	 111			; 0000006fH
  001f1	64		 DB	 100			; 00000064H
  001f2	65		 DB	 101			; 00000065H
  001f3	00		 DB	 0
$LN14@UpdateImeS:
  001f4	70		 DB	 112			; 00000070H
  001f5	63		 DB	 99			; 00000063H
  001f6	6d		 DB	 109			; 0000006dH
  001f7	00		 DB	 0
?UpdateImeState@CTsfUiLessMode@@SAXH@Z ENDP		; CTsfUiLessMode::UpdateImeState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv91 = -120						; size = 4
_tip$1 = -112						; size = 72
_pProfileMgr$2 = -32					; size = 4
_pProfiles$ = -20					; size = 4
_hr$ = -12						; size = 4
_ret$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?CurrentInputLocaleIsIme@CTsfUiLessMode@@SAHXZ PROC	; CTsfUiLessMode::CurrentInputLocaleIsIme
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3023
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d 88	 lea	 edi, DWORD PTR [ebp-120]
  0000b	b9 1e 00 00 00	 mov	 ecx, 30			; 0000001eH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; Line 3024
  00021	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0
; Line 3029
  00028	8b f4		 mov	 esi, esp
  0002a	8d 45 ec	 lea	 eax, DWORD PTR _pProfiles$[ebp]
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET __GUID_1f02b6c5_7842_4ee6_8a0b_9a24183a95ca
  00033	6a 01		 push	 1
  00035	6a 00		 push	 0
  00037	68 00 00 00 00	 push	 OFFSET _CLSID_TF_InputProcessorProfiles
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoCreateInstance@20
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
; Line 3030
  0004c	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00050	0f 8c 9d 00 00
	00		 jl	 $LN3@CurrentInp
; Line 3033
  00056	8b f4		 mov	 esi, esp
  00058	8d 4d e0	 lea	 ecx, DWORD PTR _pProfileMgr$2[ebp]
  0005b	51		 push	 ecx
  0005c	68 00 00 00 00	 push	 OFFSET __GUID_71c6e74c_0f28_11d8_a82a_00065b84435c
  00061	8b 55 ec	 mov	 edx, DWORD PTR _pProfiles$[ebp]
  00064	8b 02		 mov	 eax, DWORD PTR [edx]
  00066	8b 4d ec	 mov	 ecx, DWORD PTR _pProfiles$[ebp]
  00069	51		 push	 ecx
  0006a	8b 10		 mov	 edx, DWORD PTR [eax]
  0006c	ff d2		 call	 edx
  0006e	3b f4		 cmp	 esi, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
; Line 3034
  00078	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0007c	7c 5e		 jl	 SHORT $LN2@CurrentInp
; Line 3037
  0007e	8b f4		 mov	 esi, esp
  00080	8d 45 90	 lea	 eax, DWORD PTR _tip$1[ebp]
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET _GUID_TFCAT_TIP_KEYBOARD
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _pProfileMgr$2[ebp]
  0008c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008e	8b 45 e0	 mov	 eax, DWORD PTR _pProfileMgr$2[ebp]
  00091	50		 push	 eax
  00092	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  00095	ff d1		 call	 ecx
  00097	3b f4		 cmp	 esi, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009e	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
; Line 3038
  000a1	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000a5	7c 1e		 jl	 SHORT $LN1@CurrentInp
; Line 3040
  000a7	8b 55 90	 mov	 edx, DWORD PTR _tip$1[ebp]
  000aa	83 e2 01	 and	 edx, 1
  000ad	74 09		 je	 SHORT $LN6@CurrentInp
  000af	c7 45 88 01 00
	00 00		 mov	 DWORD PTR tv91[ebp], 1
  000b6	eb 07		 jmp	 SHORT $LN7@CurrentInp
$LN6@CurrentInp:
  000b8	c7 45 88 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$LN7@CurrentInp:
  000bf	8b 45 88	 mov	 eax, DWORD PTR tv91[ebp]
  000c2	89 45 f8	 mov	 DWORD PTR _ret$[ebp], eax
$LN1@CurrentInp:
; Line 3042
  000c5	8b 4d e0	 mov	 ecx, DWORD PTR _pProfileMgr$2[ebp]
  000c8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ca	8b f4		 mov	 esi, esp
  000cc	8b 45 e0	 mov	 eax, DWORD PTR _pProfileMgr$2[ebp]
  000cf	50		 push	 eax
  000d0	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  000d3	ff d1		 call	 ecx
  000d5	3b f4		 cmp	 esi, esp
  000d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@CurrentInp:
; Line 3044
  000dc	8b 55 ec	 mov	 edx, DWORD PTR _pProfiles$[ebp]
  000df	8b 02		 mov	 eax, DWORD PTR [edx]
  000e1	8b f4		 mov	 esi, esp
  000e3	8b 4d ec	 mov	 ecx, DWORD PTR _pProfiles$[ebp]
  000e6	51		 push	 ecx
  000e7	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000ea	ff d2		 call	 edx
  000ec	3b f4		 cmp	 esi, esp
  000ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@CurrentInp:
; Line 3046
  000f3	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
; Line 3047
  000f6	52		 push	 edx
  000f7	8b cd		 mov	 ecx, ebp
  000f9	50		 push	 eax
  000fa	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@CurrentInp
  00100	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00105	58		 pop	 eax
  00106	5a		 pop	 edx
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010c	33 cd		 xor	 ecx, ebp
  0010e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00113	83 c4 78	 add	 esp, 120		; 00000078H
  00116	3b ec		 cmp	 ebp, esp
  00118	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c3		 ret	 0
  00121	8d 49 00	 npad	 3
$LN12@CurrentInp:
  00124	03 00 00 00	 DD	 3
  00128	00 00 00 00	 DD	 $LN11@CurrentInp
$LN11@CurrentInp:
  0012c	ec ff ff ff	 DD	 -20			; ffffffecH
  00130	04 00 00 00	 DD	 4
  00134	00 00 00 00	 DD	 $LN8@CurrentInp
  00138	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0013c	04 00 00 00	 DD	 4
  00140	00 00 00 00	 DD	 $LN9@CurrentInp
  00144	90 ff ff ff	 DD	 -112			; ffffff90H
  00148	48 00 00 00	 DD	 72			; 00000048H
  0014c	00 00 00 00	 DD	 $LN10@CurrentInp
$LN10@CurrentInp:
  00150	74		 DB	 116			; 00000074H
  00151	69		 DB	 105			; 00000069H
  00152	70		 DB	 112			; 00000070H
  00153	00		 DB	 0
$LN9@CurrentInp:
  00154	70		 DB	 112			; 00000070H
  00155	50		 DB	 80			; 00000050H
  00156	72		 DB	 114			; 00000072H
  00157	6f		 DB	 111			; 0000006fH
  00158	66		 DB	 102			; 00000066H
  00159	69		 DB	 105			; 00000069H
  0015a	6c		 DB	 108			; 0000006cH
  0015b	65		 DB	 101			; 00000065H
  0015c	4d		 DB	 77			; 0000004dH
  0015d	67		 DB	 103			; 00000067H
  0015e	72		 DB	 114			; 00000072H
  0015f	00		 DB	 0
$LN8@CurrentInp:
  00160	70		 DB	 112			; 00000070H
  00161	50		 DB	 80			; 00000050H
  00162	72		 DB	 114			; 00000072H
  00163	6f		 DB	 111			; 0000006fH
  00164	66		 DB	 102			; 00000066H
  00165	69		 DB	 105			; 00000069H
  00166	6c		 DB	 108			; 0000006cH
  00167	65		 DB	 101			; 00000065H
  00168	73		 DB	 115			; 00000073H
  00169	00		 DB	 0
?CurrentInputLocaleIsIme@CTsfUiLessMode@@SAHXZ ENDP	; CTsfUiLessMode::CurrentInputLocaleIsIme
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_source$ = -12						; size = 4
_hr$ = -4						; size = 4
?ReleaseSinks@CTsfUiLessMode@@SAXXZ PROC		; CTsfUiLessMode::ReleaseSinks
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2666
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 2671
  00018	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A, 0 ; CTsfUiLessMode::m_tm
  0001f	0f 84 0e 01 00
	00		 je	 $LN4@ReleaseSin
  00025	8b f4		 mov	 esi, esp
  00027	8d 45 f4	 lea	 eax, DWORD PTR _source$[ebp]
  0002a	50		 push	 eax
  0002b	68 00 00 00 00	 push	 OFFSET __GUID_4ea48a35_60ae_446f_8fd6_e6a8d82459f7
  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  0003d	50		 push	 eax
  0003e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00040	ff d1		 call	 ecx
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	85 c0		 test	 eax, eax
  0004b	0f 8c e2 00 00
	00		 jl	 $LN4@ReleaseSin
; Line 2673
  00051	8b f4		 mov	 esi, esp
  00053	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwUIElementSinkCookie
  00059	52		 push	 edx
  0005a	8b 45 f4	 mov	 eax, DWORD PTR _source$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	8b 55 f4	 mov	 edx, DWORD PTR _source$[ebp]
  00062	52		 push	 edx
  00063	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00066	ff d0		 call	 eax
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
; Line 2674
  00072	8b f4		 mov	 esi, esp
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_dwAlpnSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwAlpnSinkCookie
  0007a	51		 push	 ecx
  0007b	8b 55 f4	 mov	 edx, DWORD PTR _source$[ebp]
  0007e	8b 02		 mov	 eax, DWORD PTR [edx]
  00080	8b 4d f4	 mov	 ecx, DWORD PTR _source$[ebp]
  00083	51		 push	 ecx
  00084	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00087	ff d2		 call	 edx
  00089	3b f4		 cmp	 esi, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	89 45 fc	 mov	 DWORD PTR _hr$[ebp], eax
; Line 2675
  00093	8b 45 f4	 mov	 eax, DWORD PTR _source$[ebp]
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	8b f4		 mov	 esi, esp
  0009a	8b 55 f4	 mov	 edx, DWORD PTR _source$[ebp]
  0009d	52		 push	 edx
  0009e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000a1	ff d0		 call	 eax
  000a3	3b f4		 cmp	 esi, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2676
  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	6a 01		 push	 1
  000b0	e8 00 00 00 00	 call	 ?SetupCompartmentSinks@CTsfUiLessMode@@KAHHPAUITfCompartment@@0@Z ; CTsfUiLessMode::SetupCompartmentSinks
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 2677
  000b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  000be	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c0	8b f4		 mov	 esi, esp
  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  000c7	50		 push	 eax
  000c8	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  000cb	ff d1		 call	 ecx
  000cd	3b f4		 cmp	 esi, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2678
  000d4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A, 0 ; CTsfUiLessMode::m_tm
  000db	74 27		 je	 SHORT $LN2@ReleaseSin
  000dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  000e3	8b 02		 mov	 eax, DWORD PTR [edx]
  000e5	8b f4		 mov	 esi, esp
  000e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  000ed	51		 push	 ecx
  000ee	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000f1	ff d2		 call	 edx
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A, 0 ; CTsfUiLessMode::m_tm
$LN2@ReleaseSin:
; Line 2679
  00104	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A, 0 ; CTsfUiLessMode::m_TsfSink
  0010b	74 26		 je	 SHORT $LN4@ReleaseSin
  0010d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
  00112	8b 08		 mov	 ecx, DWORD PTR [eax]
  00114	8b f4		 mov	 esi, esp
  00116	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
  0011c	52		 push	 edx
  0011d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00120	ff d0		 call	 eax
  00122	3b f4		 cmp	 esi, esp
  00124	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00129	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A, 0 ; CTsfUiLessMode::m_TsfSink
$LN4@ReleaseSin:
; Line 2681
  00133	52		 push	 edx
  00134	8b cd		 mov	 ecx, ebp
  00136	50		 push	 eax
  00137	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@ReleaseSin
  0013d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00142	58		 pop	 eax
  00143	5a		 pop	 edx
  00144	5e		 pop	 esi
  00145	83 c4 10	 add	 esp, 16			; 00000010H
  00148	3b ec		 cmp	 ebp, esp
  0014a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c3		 ret	 0
  00153	90		 npad	 1
$LN8@ReleaseSin:
  00154	01 00 00 00	 DD	 1
  00158	00 00 00 00	 DD	 $LN7@ReleaseSin
$LN7@ReleaseSin:
  0015c	f4 ff ff ff	 DD	 -12			; fffffff4H
  00160	04 00 00 00	 DD	 4
  00164	00 00 00 00	 DD	 $LN6@ReleaseSin
$LN6@ReleaseSin:
  00168	73		 DB	 115			; 00000073H
  00169	6f		 DB	 111			; 0000006fH
  0016a	75		 DB	 117			; 00000075H
  0016b	72		 DB	 114			; 00000072H
  0016c	63		 DB	 99			; 00000063H
  0016d	65		 DB	 101			; 00000065H
  0016e	00		 DB	 0
?ReleaseSinks@CTsfUiLessMode@@SAXXZ ENDP		; CTsfUiLessMode::ReleaseSinks
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv159 = -60						; size = 4
tv87 = -56						; size = 4
$T2 = -52						; size = 4
$T3 = -48						; size = 4
_srcTm$4 = -40						; size = 4
_bRc$ = -32						; size = 4
_cid$ = -24						; size = 4
_hr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?SetupSinks@CTsfUiLessMode@@SAHXZ PROC			; CTsfUiLessMode::SetupSinks
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2615
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetupSinks@CTsfUiLessMode@@SAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  00019	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; Line 2622
  00036	8b f4		 mov	 esi, esp
  00038	68 00 00 00 00	 push	 OFFSET ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  0003d	68 00 00 00 00	 push	 OFFSET __GUID_3e90ade3_7594_4cb0_bb58_69628f5f458c
  00042	6a 01		 push	 1
  00044	6a 00		 push	 0
  00046	68 00 00 00 00	 push	 OFFSET _CLSID_TF_ThreadMgr
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoCreateInstance@20
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
; Line 2624
  0005b	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0005f	74 07		 je	 SHORT $LN7@SetupSinks
; Line 2626
  00061	33 c0		 xor	 eax, eax
  00063	e9 6a 01 00 00	 jmp	 $LN8@SetupSinks
$LN7@SetupSinks:
; Line 2631
  00068	8b f4		 mov	 esi, esp
  0006a	6a 04		 push	 4
  0006c	8d 45 e8	 lea	 eax, DWORD PTR _cid$[ebp]
  0006f	50		 push	 eax
  00070	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  00076	8b 11		 mov	 edx, DWORD PTR [ecx]
  00078	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  0007d	50		 push	 eax
  0007e	8b 4a 38	 mov	 ecx, DWORD PTR [edx+56]
  00081	ff d1		 call	 ecx
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	85 c0		 test	 eax, eax
  0008c	7d 07		 jge	 SHORT $LN6@SetupSinks
; Line 2633
  0008e	33 c0		 xor	 eax, eax
  00090	e9 3d 01 00 00	 jmp	 $LN8@SetupSinks
$LN6@SetupSinks:
; Line 2637
  00095	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _bRc$[ebp], 0
; Line 2638
  0009c	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  000a1	6a 10		 push	 16			; 00000010H
  000a3	e8 00 00 00 00	 call	 ??2@YAPAXIABUnothrow_t@std@@@Z ; operator new
  000a8	83 c4 08	 add	 esp, 8
  000ab	89 45 cc	 mov	 DWORD PTR $T2[ebp], eax
  000ae	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000b5	83 7d cc 00	 cmp	 DWORD PTR $T2[ebp], 0
  000b9	74 0d		 je	 SHORT $LN10@SetupSinks
  000bb	8b 4d cc	 mov	 ecx, DWORD PTR $T2[ebp]
  000be	e8 00 00 00 00	 call	 ??0CUIElementSink@CTsfUiLessMode@@QAE@XZ ; CTsfUiLessMode::CUIElementSink::CUIElementSink
  000c3	89 45 c8	 mov	 DWORD PTR tv87[ebp], eax
  000c6	eb 07		 jmp	 SHORT $LN11@SetupSinks
$LN10@SetupSinks:
  000c8	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN11@SetupSinks:
  000cf	8b 55 c8	 mov	 edx, DWORD PTR tv87[ebp]
  000d2	89 55 d0	 mov	 DWORD PTR $T3[ebp], edx
  000d5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000dc	8b 45 d0	 mov	 eax, DWORD PTR $T3[ebp]
  000df	a3 00 00 00 00	 mov	 DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A, eax ; CTsfUiLessMode::m_TsfSink
; Line 2639
  000e4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A, 0 ; CTsfUiLessMode::m_TsfSink
  000eb	0f 84 de 00 00
	00		 je	 $LN5@SetupSinks
; Line 2642
  000f1	8b f4		 mov	 esi, esp
  000f3	8d 4d d8	 lea	 ecx, DWORD PTR _srcTm$4[ebp]
  000f6	51		 push	 ecx
  000f7	68 00 00 00 00	 push	 OFFSET __GUID_4ea48a35_60ae_446f_8fd6_e6a8d82459f7
  000fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  00102	8b 02		 mov	 eax, DWORD PTR [edx]
  00104	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  0010a	51		 push	 ecx
  0010b	8b 10		 mov	 edx, DWORD PTR [eax]
  0010d	ff d2		 call	 edx
  0010f	3b f4		 cmp	 esi, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
  00119	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0011d	0f 8c ac 00 00
	00		 jl	 $LN5@SetupSinks
; Line 2646
  00123	8b f4		 mov	 esi, esp
  00125	68 00 00 00 00	 push	 OFFSET ?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwUIElementSinkCookie
  0012a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
  0012f	50		 push	 eax
  00130	68 00 00 00 00	 push	 OFFSET __GUID_ea1ea136_19df_11d7_a6d2_00065b84435c
  00135	8b 4d d8	 mov	 ecx, DWORD PTR _srcTm$4[ebp]
  00138	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013a	8b 45 d8	 mov	 eax, DWORD PTR _srcTm$4[ebp]
  0013d	50		 push	 eax
  0013e	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00141	ff d1		 call	 ecx
  00143	3b f4		 cmp	 esi, esp
  00145	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014a	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
  0014d	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00151	7c 65		 jl	 SHORT $LN3@SetupSinks
; Line 2651
  00153	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A, 0 ; CTsfUiLessMode::m_TsfSink
  0015a	74 0e		 je	 SHORT $LN12@SetupSinks
  0015c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
  00162	83 c2 04	 add	 edx, 4
  00165	89 55 c4	 mov	 DWORD PTR tv159[ebp], edx
  00168	eb 07		 jmp	 SHORT $LN13@SetupSinks
$LN12@SetupSinks:
  0016a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN13@SetupSinks:
  00171	8b f4		 mov	 esi, esp
  00173	68 00 00 00 00	 push	 OFFSET ?m_dwAlpnSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwAlpnSinkCookie
  00178	8b 45 c4	 mov	 eax, DWORD PTR tv159[ebp]
  0017b	50		 push	 eax
  0017c	68 00 00 00 00	 push	 OFFSET __GUID_71c6e74e_0f28_11d8_a82a_00065b84435c
  00181	8b 4d d8	 mov	 ecx, DWORD PTR _srcTm$4[ebp]
  00184	8b 11		 mov	 edx, DWORD PTR [ecx]
  00186	8b 45 d8	 mov	 eax, DWORD PTR _srcTm$4[ebp]
  00189	50		 push	 eax
  0018a	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0018d	ff d1		 call	 ecx
  0018f	3b f4		 cmp	 esi, esp
  00191	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00196	89 45 f0	 mov	 DWORD PTR _hr$[ebp], eax
  00199	83 7d f0 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0019d	7c 19		 jl	 SHORT $LN3@SetupSinks
; Line 2653
  0019f	6a 00		 push	 0
  001a1	6a 00		 push	 0
  001a3	6a 00		 push	 0
  001a5	e8 00 00 00 00	 call	 ?SetupCompartmentSinks@CTsfUiLessMode@@KAHHPAUITfCompartment@@0@Z ; CTsfUiLessMode::SetupCompartmentSinks
  001aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ad	85 c0		 test	 eax, eax
  001af	74 07		 je	 SHORT $LN3@SetupSinks
; Line 2655
  001b1	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _bRc$[ebp], 1
$LN3@SetupSinks:
; Line 2659
  001b8	8b 55 d8	 mov	 edx, DWORD PTR _srcTm$4[ebp]
  001bb	8b 02		 mov	 eax, DWORD PTR [edx]
  001bd	8b f4		 mov	 esi, esp
  001bf	8b 4d d8	 mov	 ecx, DWORD PTR _srcTm$4[ebp]
  001c2	51		 push	 ecx
  001c3	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001c6	ff d2		 call	 edx
  001c8	3b f4		 cmp	 esi, esp
  001ca	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@SetupSinks:
; Line 2662
  001cf	8b 45 e0	 mov	 eax, DWORD PTR _bRc$[ebp]
$LN8@SetupSinks:
; Line 2663
  001d2	52		 push	 edx
  001d3	8b cd		 mov	 ecx, ebp
  001d5	50		 push	 eax
  001d6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN19@SetupSinks
  001dc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001e1	58		 pop	 eax
  001e2	5a		 pop	 edx
  001e3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001e6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ed	59		 pop	 ecx
  001ee	5f		 pop	 edi
  001ef	5e		 pop	 esi
  001f0	83 c4 3c	 add	 esp, 60			; 0000003cH
  001f3	3b ec		 cmp	 ebp, esp
  001f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c3		 ret	 0
  001fe	8b ff		 npad	 2
$LN19@SetupSinks:
  00200	02 00 00 00	 DD	 2
  00204	00 00 00 00	 DD	 $LN18@SetupSinks
$LN18@SetupSinks:
  00208	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0020c	04 00 00 00	 DD	 4
  00210	00 00 00 00	 DD	 $LN15@SetupSinks
  00214	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00218	04 00 00 00	 DD	 4
  0021c	00 00 00 00	 DD	 $LN16@SetupSinks
$LN16@SetupSinks:
  00220	73		 DB	 115			; 00000073H
  00221	72		 DB	 114			; 00000072H
  00222	63		 DB	 99			; 00000063H
  00223	54		 DB	 84			; 00000054H
  00224	6d		 DB	 109			; 0000006dH
  00225	00		 DB	 0
$LN15@SetupSinks:
  00226	63		 DB	 99			; 00000063H
  00227	69		 DB	 105			; 00000069H
  00228	64		 DB	 100			; 00000064H
  00229	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetupSinks@CTsfUiLessMode@@SAHXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00005	8b 45 cc	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXABUnothrow_t@std@@@Z ; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__ehhandler$?SetupSinks@CTsfUiLessMode@@SAHXZ:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetupSinks@CTsfUiLessMode@@SAHXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetupSinks@CTsfUiLessMode@@SAHXZ ENDP			; CTsfUiLessMode::SetupSinks
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv167 = -56						; size = 4
tv132 = -52						; size = 4
_srcConvMode$1 = -44					; size = 4
_srcOpenMode$ = -32					; size = 4
_hr$ = -24						; size = 4
_bRc$ = -20						; size = 4
_pcm$ = -12						; size = 4
_bLocalCompartments$ = -1				; size = 1
_bRemoveOnly$ = 8					; size = 4
_pTfOpenMode$ = 12					; size = 4
_pTfConvMode$ = 16					; size = 4
?SetupCompartmentSinks@CTsfUiLessMode@@KAHHPAUITfCompartment@@0@Z PROC ; CTsfUiLessMode::SetupCompartmentSinks
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3118
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0000b	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
; Line 3119
  00017	c6 45 ff 00	 mov	 BYTE PTR _bLocalCompartments$[ebp], 0
; Line 3120
  0001b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pcm$[ebp], 0
; Line 3121
  00022	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _bRc$[ebp], 0
; Line 3122
  00029	c7 45 e8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
; Line 3124
  00030	83 7d 0c 00	 cmp	 DWORD PTR _pTfOpenMode$[ebp], 0
  00034	75 1e		 jne	 SHORT $LN12@SetupCompa
  00036	83 7d 10 00	 cmp	 DWORD PTR _pTfConvMode$[ebp], 0
  0003a	75 18		 jne	 SHORT $LN12@SetupCompa
; Line 3126
  0003c	c6 45 ff 01	 mov	 BYTE PTR _bLocalCompartments$[ebp], 1
; Line 3127
  00040	8d 45 10	 lea	 eax, DWORD PTR _pTfConvMode$[ebp]
  00043	50		 push	 eax
  00044	8d 4d 0c	 lea	 ecx, DWORD PTR _pTfOpenMode$[ebp]
  00047	51		 push	 ecx
  00048	8d 55 f4	 lea	 edx, DWORD PTR _pcm$[ebp]
  0004b	52		 push	 edx
  0004c	e8 00 00 00 00	 call	 ?GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z ; CTsfUiLessMode::GetCompartments
  00051	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN12@SetupCompa:
; Line 3129
  00054	83 7d 0c 00	 cmp	 DWORD PTR _pTfOpenMode$[ebp], 0
  00058	74 06		 je	 SHORT $LN10@SetupCompa
  0005a	83 7d 10 00	 cmp	 DWORD PTR _pTfConvMode$[ebp], 0
  0005e	75 07		 jne	 SHORT $LN11@SetupCompa
$LN10@SetupCompa:
; Line 3132
  00060	33 c0		 xor	 eax, eax
  00062	e9 f4 01 00 00	 jmp	 $LN13@SetupCompa
$LN11@SetupCompa:
; Line 3134
  00067	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _srcOpenMode$[ebp], 0
; Line 3135
  0006e	8b f4		 mov	 esi, esp
  00070	8d 45 e0	 lea	 eax, DWORD PTR _srcOpenMode$[ebp]
  00073	50		 push	 eax
  00074	68 00 00 00 00	 push	 OFFSET _IID_ITfSource
  00079	8b 4d 0c	 mov	 ecx, DWORD PTR _pTfOpenMode$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _pTfOpenMode$[ebp]
  00081	50		 push	 eax
  00082	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00084	ff d1		 call	 ecx
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax
  00090	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00094	0f 8c 71 01 00
	00		 jl	 $LN9@SetupCompa
; Line 3138
  0009a	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?m_dwOpenModeSinkCookie@CTsfUiLessMode@@1KA, -1 ; CTsfUiLessMode::m_dwOpenModeSinkCookie
  000a1	74 28		 je	 SHORT $LN8@SetupCompa
; Line 3140
  000a3	8b f4		 mov	 esi, esp
  000a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_dwOpenModeSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwOpenModeSinkCookie
  000ab	52		 push	 edx
  000ac	8b 45 e0	 mov	 eax, DWORD PTR _srcOpenMode$[ebp]
  000af	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b1	8b 55 e0	 mov	 edx, DWORD PTR _srcOpenMode$[ebp]
  000b4	52		 push	 edx
  000b5	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000b8	ff d0		 call	 eax
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 3141
  000c1	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?m_dwOpenModeSinkCookie@CTsfUiLessMode@@1KA, -1 ; CTsfUiLessMode::m_dwOpenModeSinkCookie
$LN8@SetupCompa:
; Line 3146
  000cb	83 7d 08 00	 cmp	 DWORD PTR _bRemoveOnly$[ebp], 0
  000cf	75 50		 jne	 SHORT $LN6@SetupCompa
  000d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A, 0 ; CTsfUiLessMode::m_TsfSink
  000d8	74 0e		 je	 SHORT $LN15@SetupCompa
  000da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
  000e0	83 c1 08	 add	 ecx, 8
  000e3	89 4d cc	 mov	 DWORD PTR tv132[ebp], ecx
  000e6	eb 07		 jmp	 SHORT $LN16@SetupCompa
$LN15@SetupCompa:
  000e8	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN16@SetupCompa:
  000ef	8b f4		 mov	 esi, esp
  000f1	68 00 00 00 00	 push	 OFFSET ?m_dwOpenModeSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwOpenModeSinkCookie
  000f6	8b 55 cc	 mov	 edx, DWORD PTR tv132[ebp]
  000f9	52		 push	 edx
  000fa	68 00 00 00 00	 push	 OFFSET _IID_ITfCompartmentEventSink
  000ff	8b 45 e0	 mov	 eax, DWORD PTR _srcOpenMode$[ebp]
  00102	8b 08		 mov	 ecx, DWORD PTR [eax]
  00104	8b 55 e0	 mov	 edx, DWORD PTR _srcOpenMode$[ebp]
  00107	52		 push	 edx
  00108	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0010b	ff d0		 call	 eax
  0010d	3b f4		 cmp	 esi, esp
  0010f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00114	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax
  00117	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0011b	0f 8c d3 00 00
	00		 jl	 $LN7@SetupCompa
$LN6@SetupCompa:
; Line 3148
  00121	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _srcConvMode$1[ebp], 0
; Line 3149
  00128	8b f4		 mov	 esi, esp
  0012a	8d 4d d4	 lea	 ecx, DWORD PTR _srcConvMode$1[ebp]
  0012d	51		 push	 ecx
  0012e	68 00 00 00 00	 push	 OFFSET _IID_ITfSource
  00133	8b 55 10	 mov	 edx, DWORD PTR _pTfConvMode$[ebp]
  00136	8b 02		 mov	 eax, DWORD PTR [edx]
  00138	8b 4d 10	 mov	 ecx, DWORD PTR _pTfConvMode$[ebp]
  0013b	51		 push	 ecx
  0013c	8b 10		 mov	 edx, DWORD PTR [eax]
  0013e	ff d2		 call	 edx
  00140	3b f4		 cmp	 esi, esp
  00142	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00147	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax
  0014a	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0014e	0f 8c a0 00 00
	00		 jl	 $LN7@SetupCompa
; Line 3152
  00154	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?m_dwConvModeSinkCookie@CTsfUiLessMode@@1KA, -1 ; CTsfUiLessMode::m_dwConvModeSinkCookie
  0015b	74 27		 je	 SHORT $LN4@SetupCompa
; Line 3154
  0015d	8b f4		 mov	 esi, esp
  0015f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_dwConvModeSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwConvModeSinkCookie
  00164	50		 push	 eax
  00165	8b 4d d4	 mov	 ecx, DWORD PTR _srcConvMode$1[ebp]
  00168	8b 11		 mov	 edx, DWORD PTR [ecx]
  0016a	8b 45 d4	 mov	 eax, DWORD PTR _srcConvMode$1[ebp]
  0016d	50		 push	 eax
  0016e	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00171	ff d1		 call	 ecx
  00173	3b f4		 cmp	 esi, esp
  00175	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 3155
  0017a	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?m_dwConvModeSinkCookie@CTsfUiLessMode@@1KA, -1 ; CTsfUiLessMode::m_dwConvModeSinkCookie
$LN4@SetupCompa:
; Line 3160
  00184	83 7d 08 00	 cmp	 DWORD PTR _bRemoveOnly$[ebp], 0
  00188	75 4c		 jne	 SHORT $LN2@SetupCompa
  0018a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A, 0 ; CTsfUiLessMode::m_TsfSink
  00191	74 0e		 je	 SHORT $LN17@SetupCompa
  00193	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
  00199	83 c2 08	 add	 edx, 8
  0019c	89 55 c8	 mov	 DWORD PTR tv167[ebp], edx
  0019f	eb 07		 jmp	 SHORT $LN18@SetupCompa
$LN17@SetupCompa:
  001a1	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv167[ebp], 0
$LN18@SetupCompa:
  001a8	8b f4		 mov	 esi, esp
  001aa	68 00 00 00 00	 push	 OFFSET ?m_dwConvModeSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwConvModeSinkCookie
  001af	8b 45 c8	 mov	 eax, DWORD PTR tv167[ebp]
  001b2	50		 push	 eax
  001b3	68 00 00 00 00	 push	 OFFSET _IID_ITfCompartmentEventSink
  001b8	8b 4d d4	 mov	 ecx, DWORD PTR _srcConvMode$1[ebp]
  001bb	8b 11		 mov	 edx, DWORD PTR [ecx]
  001bd	8b 45 d4	 mov	 eax, DWORD PTR _srcConvMode$1[ebp]
  001c0	50		 push	 eax
  001c1	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  001c4	ff d1		 call	 ecx
  001c6	3b f4		 cmp	 esi, esp
  001c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001cd	89 45 e8	 mov	 DWORD PTR _hr$[ebp], eax
  001d0	83 7d e8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001d4	7c 07		 jl	 SHORT $LN3@SetupCompa
$LN2@SetupCompa:
; Line 3162
  001d6	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR _bRc$[ebp], 1
$LN3@SetupCompa:
; Line 3164
  001dd	8b 55 d4	 mov	 edx, DWORD PTR _srcConvMode$1[ebp]
  001e0	8b 02		 mov	 eax, DWORD PTR [edx]
  001e2	8b f4		 mov	 esi, esp
  001e4	8b 4d d4	 mov	 ecx, DWORD PTR _srcConvMode$1[ebp]
  001e7	51		 push	 ecx
  001e8	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  001eb	ff d2		 call	 edx
  001ed	3b f4		 cmp	 esi, esp
  001ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@SetupCompa:
; Line 3167
  001f4	8b 45 e0	 mov	 eax, DWORD PTR _srcOpenMode$[ebp]
  001f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f9	8b f4		 mov	 esi, esp
  001fb	8b 55 e0	 mov	 edx, DWORD PTR _srcOpenMode$[ebp]
  001fe	52		 push	 edx
  001ff	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00202	ff d0		 call	 eax
  00204	3b f4		 cmp	 esi, esp
  00206	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN9@SetupCompa:
; Line 3169
  0020b	0f b6 4d ff	 movzx	 ecx, BYTE PTR _bLocalCompartments$[ebp]
  0020f	85 c9		 test	 ecx, ecx
  00211	74 45		 je	 SHORT $LN1@SetupCompa
; Line 3171
  00213	8b 55 0c	 mov	 edx, DWORD PTR _pTfOpenMode$[ebp]
  00216	8b 02		 mov	 eax, DWORD PTR [edx]
  00218	8b f4		 mov	 esi, esp
  0021a	8b 4d 0c	 mov	 ecx, DWORD PTR _pTfOpenMode$[ebp]
  0021d	51		 push	 ecx
  0021e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00221	ff d2		 call	 edx
  00223	3b f4		 cmp	 esi, esp
  00225	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 3172
  0022a	8b 45 10	 mov	 eax, DWORD PTR _pTfConvMode$[ebp]
  0022d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0022f	8b f4		 mov	 esi, esp
  00231	8b 55 10	 mov	 edx, DWORD PTR _pTfConvMode$[ebp]
  00234	52		 push	 edx
  00235	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00238	ff d0		 call	 eax
  0023a	3b f4		 cmp	 esi, esp
  0023c	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 3173
  00241	8b 4d f4	 mov	 ecx, DWORD PTR _pcm$[ebp]
  00244	8b 11		 mov	 edx, DWORD PTR [ecx]
  00246	8b f4		 mov	 esi, esp
  00248	8b 45 f4	 mov	 eax, DWORD PTR _pcm$[ebp]
  0024b	50		 push	 eax
  0024c	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0024f	ff d1		 call	 ecx
  00251	3b f4		 cmp	 esi, esp
  00253	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@SetupCompa:
; Line 3175
  00258	8b 45 ec	 mov	 eax, DWORD PTR _bRc$[ebp]
$LN13@SetupCompa:
; Line 3176
  0025b	52		 push	 edx
  0025c	8b cd		 mov	 ecx, ebp
  0025e	50		 push	 eax
  0025f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN23@SetupCompa
  00265	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0026a	58		 pop	 eax
  0026b	5a		 pop	 edx
  0026c	5f		 pop	 edi
  0026d	5e		 pop	 esi
  0026e	83 c4 38	 add	 esp, 56			; 00000038H
  00271	3b ec		 cmp	 ebp, esp
  00273	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00278	8b e5		 mov	 esp, ebp
  0027a	5d		 pop	 ebp
  0027b	c3		 ret	 0
$LN23@SetupCompa:
  0027c	03 00 00 00	 DD	 3
  00280	00 00 00 00	 DD	 $LN22@SetupCompa
$LN22@SetupCompa:
  00284	f4 ff ff ff	 DD	 -12			; fffffff4H
  00288	04 00 00 00	 DD	 4
  0028c	00 00 00 00	 DD	 $LN19@SetupCompa
  00290	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00294	04 00 00 00	 DD	 4
  00298	00 00 00 00	 DD	 $LN20@SetupCompa
  0029c	d4 ff ff ff	 DD	 -44			; ffffffd4H
  002a0	04 00 00 00	 DD	 4
  002a4	00 00 00 00	 DD	 $LN21@SetupCompa
$LN21@SetupCompa:
  002a8	73		 DB	 115			; 00000073H
  002a9	72		 DB	 114			; 00000072H
  002aa	63		 DB	 99			; 00000063H
  002ab	43		 DB	 67			; 00000043H
  002ac	6f		 DB	 111			; 0000006fH
  002ad	6e		 DB	 110			; 0000006eH
  002ae	76		 DB	 118			; 00000076H
  002af	4d		 DB	 77			; 0000004dH
  002b0	6f		 DB	 111			; 0000006fH
  002b1	64		 DB	 100			; 00000064H
  002b2	65		 DB	 101			; 00000065H
  002b3	00		 DB	 0
$LN20@SetupCompa:
  002b4	73		 DB	 115			; 00000073H
  002b5	72		 DB	 114			; 00000072H
  002b6	63		 DB	 99			; 00000063H
  002b7	4f		 DB	 79			; 0000004fH
  002b8	70		 DB	 112			; 00000070H
  002b9	65		 DB	 101			; 00000065H
  002ba	6e		 DB	 110			; 0000006eH
  002bb	4d		 DB	 77			; 0000004dH
  002bc	6f		 DB	 111			; 0000006fH
  002bd	64		 DB	 100			; 00000064H
  002be	65		 DB	 101			; 00000065H
  002bf	00		 DB	 0
$LN19@SetupCompa:
  002c0	70		 DB	 112			; 00000070H
  002c1	63		 DB	 99			; 00000063H
  002c2	6d		 DB	 109			; 0000006dH
  002c3	00		 DB	 0
?SetupCompartmentSinks@CTsfUiLessMode@@KAHHPAUITfCompartment@@0@Z ENDP ; CTsfUiLessMode::SetupCompartmentSinks
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hr$ = -40						; size = 4
_pTfConvMode$ = -32					; size = 4
_pTfOpenMode$ = -20					; size = 4
_pcm$ = -8						; size = 4
_ppcm$ = 8						; size = 4
_ppTfOpenMode$ = 12					; size = 4
_ppTfConvMode$ = 16					; size = 4
?GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z PROC ; CTsfUiLessMode::GetCompartments
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3082
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000b	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
; Line 3083
  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pcm$[ebp], 0
; Line 3084
  0001e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pTfOpenMode$[ebp], 0
; Line 3085
  00025	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _pTfConvMode$[ebp], 0
; Line 3093
  0002c	8b f4		 mov	 esi, esp
  0002e	8d 45 f8	 lea	 eax, DWORD PTR _pcm$[ebp]
  00031	50		 push	 eax
  00032	68 00 00 00 00	 push	 OFFSET _IID_ITfCompartmentMgr
  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  0003d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  00044	50		 push	 eax
  00045	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00047	ff d1		 call	 ecx
  00049	3b f4		 cmp	 esi, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	89 45 d8	 mov	 DWORD PTR _hr$[ebp], eax
  00053	83 7d d8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00057	0f 8c 9f 00 00
	00		 jl	 $LN3@GetCompart
; Line 3095
  0005d	8b f4		 mov	 esi, esp
  0005f	8d 55 ec	 lea	 edx, DWORD PTR _pTfOpenMode$[ebp]
  00062	52		 push	 edx
  00063	68 00 00 00 00	 push	 OFFSET _GUID_COMPARTMENT_KEYBOARD_OPENCLOSE
  00068	8b 45 f8	 mov	 eax, DWORD PTR _pcm$[ebp]
  0006b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006d	8b 55 f8	 mov	 edx, DWORD PTR _pcm$[ebp]
  00070	52		 push	 edx
  00071	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00074	ff d0		 call	 eax
  00076	3b f4		 cmp	 esi, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	89 45 d8	 mov	 DWORD PTR _hr$[ebp], eax
  00080	83 7d d8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00084	7c 5f		 jl	 SHORT $LN2@GetCompart
; Line 3098
  00086	8b f4		 mov	 esi, esp
  00088	8d 4d e0	 lea	 ecx, DWORD PTR _pTfConvMode$[ebp]
  0008b	51		 push	 ecx
  0008c	68 00 00 00 00	 push	 OFFSET ?_GUID_COMPARTMENT_KEYBOARD_INPUTMODE_CONVERSION@?1??GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z@4U_GUID@@A
  00091	8b 55 f8	 mov	 edx, DWORD PTR _pcm$[ebp]
  00094	8b 02		 mov	 eax, DWORD PTR [edx]
  00096	8b 4d f8	 mov	 ecx, DWORD PTR _pcm$[ebp]
  00099	51		 push	 ecx
  0009a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0009d	ff d2		 call	 edx
  0009f	3b f4		 cmp	 esi, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	89 45 d8	 mov	 DWORD PTR _hr$[ebp], eax
  000a9	83 7d d8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000ad	7c 1f		 jl	 SHORT $LN1@GetCompart
; Line 3100
  000af	8b 45 08	 mov	 eax, DWORD PTR _ppcm$[ebp]
  000b2	8b 4d f8	 mov	 ecx, DWORD PTR _pcm$[ebp]
  000b5	89 08		 mov	 DWORD PTR [eax], ecx
; Line 3101
  000b7	8b 55 0c	 mov	 edx, DWORD PTR _ppTfOpenMode$[ebp]
  000ba	8b 45 ec	 mov	 eax, DWORD PTR _pTfOpenMode$[ebp]
  000bd	89 02		 mov	 DWORD PTR [edx], eax
; Line 3102
  000bf	8b 4d 10	 mov	 ecx, DWORD PTR _ppTfConvMode$[ebp]
  000c2	8b 55 e0	 mov	 edx, DWORD PTR _pTfConvMode$[ebp]
  000c5	89 11		 mov	 DWORD PTR [ecx], edx
; Line 3103
  000c7	b8 01 00 00 00	 mov	 eax, 1
  000cc	eb 30		 jmp	 SHORT $LN4@GetCompart
$LN1@GetCompart:
; Line 3105
  000ce	8b 45 ec	 mov	 eax, DWORD PTR _pTfOpenMode$[ebp]
  000d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d3	8b f4		 mov	 esi, esp
  000d5	8b 55 ec	 mov	 edx, DWORD PTR _pTfOpenMode$[ebp]
  000d8	52		 push	 edx
  000d9	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000dc	ff d0		 call	 eax
  000de	3b f4		 cmp	 esi, esp
  000e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@GetCompart:
; Line 3107
  000e5	8b 4d f8	 mov	 ecx, DWORD PTR _pcm$[ebp]
  000e8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ea	8b f4		 mov	 esi, esp
  000ec	8b 45 f8	 mov	 eax, DWORD PTR _pcm$[ebp]
  000ef	50		 push	 eax
  000f0	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  000f3	ff d1		 call	 ecx
  000f5	3b f4		 cmp	 esi, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@GetCompart:
; Line 3109
  000fc	33 c0		 xor	 eax, eax
$LN4@GetCompart:
; Line 3110
  000fe	52		 push	 edx
  000ff	8b cd		 mov	 ecx, ebp
  00101	50		 push	 eax
  00102	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@GetCompart
  00108	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010d	58		 pop	 eax
  0010e	5a		 pop	 edx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	83 c4 28	 add	 esp, 40			; 00000028H
  00114	3b ec		 cmp	 ebp, esp
  00116	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c3		 ret	 0
  0011f	90		 npad	 1
$LN10@GetCompart:
  00120	03 00 00 00	 DD	 3
  00124	00 00 00 00	 DD	 $LN9@GetCompart
$LN9@GetCompart:
  00128	f8 ff ff ff	 DD	 -8			; fffffff8H
  0012c	04 00 00 00	 DD	 4
  00130	00 00 00 00	 DD	 $LN6@GetCompart
  00134	ec ff ff ff	 DD	 -20			; ffffffecH
  00138	04 00 00 00	 DD	 4
  0013c	00 00 00 00	 DD	 $LN7@GetCompart
  00140	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00144	04 00 00 00	 DD	 4
  00148	00 00 00 00	 DD	 $LN8@GetCompart
$LN8@GetCompart:
  0014c	70		 DB	 112			; 00000070H
  0014d	54		 DB	 84			; 00000054H
  0014e	66		 DB	 102			; 00000066H
  0014f	43		 DB	 67			; 00000043H
  00150	6f		 DB	 111			; 0000006fH
  00151	6e		 DB	 110			; 0000006eH
  00152	76		 DB	 118			; 00000076H
  00153	4d		 DB	 77			; 0000004dH
  00154	6f		 DB	 111			; 0000006fH
  00155	64		 DB	 100			; 00000064H
  00156	65		 DB	 101			; 00000065H
  00157	00		 DB	 0
$LN7@GetCompart:
  00158	70		 DB	 112			; 00000070H
  00159	54		 DB	 84			; 00000054H
  0015a	66		 DB	 102			; 00000066H
  0015b	4f		 DB	 79			; 0000004fH
  0015c	70		 DB	 112			; 00000070H
  0015d	65		 DB	 101			; 00000065H
  0015e	6e		 DB	 110			; 0000006eH
  0015f	4d		 DB	 77			; 0000004dH
  00160	6f		 DB	 111			; 0000006fH
  00161	64		 DB	 100			; 00000064H
  00162	65		 DB	 101			; 00000065H
  00163	00		 DB	 0
$LN6@GetCompart:
  00164	70		 DB	 112			; 00000070H
  00165	63		 DB	 99			; 00000063H
  00166	6d		 DB	 109			; 0000006dH
  00167	00		 DB	 0
?GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z ENDP ; CTsfUiLessMode::GetCompartments
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pElement$ = -20					; size = 4
_puiem$ = -8						; size = 4
_dwUIElementId$ = 8					; size = 4
?GetUIElement@CTsfUiLessMode@@KAPAUITfUIElement@@K@Z PROC ; CTsfUiLessMode::GetUIElement
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3009
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 3011
  0001e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pElement$[ebp], 0
; Line 3013
  00025	8b f4		 mov	 esi, esp
  00027	8d 45 f8	 lea	 eax, DWORD PTR _puiem$[ebp]
  0002a	50		 push	 eax
  0002b	68 00 00 00 00	 push	 OFFSET __GUID_ea1ea135_19df_11d7_a6d2_00065b84435c
  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
  0003d	50		 push	 eax
  0003e	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00040	ff d1		 call	 ecx
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	85 c0		 test	 eax, eax
  0004b	7c 36		 jl	 SHORT $LN1@GetUIEleme
; Line 3015
  0004d	8b f4		 mov	 esi, esp
  0004f	8d 55 ec	 lea	 edx, DWORD PTR _pElement$[ebp]
  00052	52		 push	 edx
  00053	8b 45 08	 mov	 eax, DWORD PTR _dwUIElementId$[ebp]
  00056	50		 push	 eax
  00057	8b 4d f8	 mov	 ecx, DWORD PTR _puiem$[ebp]
  0005a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _puiem$[ebp]
  0005f	50		 push	 eax
  00060	8b 4a 18	 mov	 ecx, DWORD PTR [edx+24]
  00063	ff d1		 call	 ecx
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 3016
  0006c	8b 55 f8	 mov	 edx, DWORD PTR _puiem$[ebp]
  0006f	8b 02		 mov	 eax, DWORD PTR [edx]
  00071	8b f4		 mov	 esi, esp
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _puiem$[ebp]
  00076	51		 push	 ecx
  00077	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0007a	ff d2		 call	 edx
  0007c	3b f4		 cmp	 esi, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@GetUIEleme:
; Line 3019
  00083	8b 45 ec	 mov	 eax, DWORD PTR _pElement$[ebp]
; Line 3020
  00086	52		 push	 edx
  00087	8b cd		 mov	 ecx, ebp
  00089	50		 push	 eax
  0008a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@GetUIEleme
  00090	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00095	58		 pop	 eax
  00096	5a		 pop	 edx
  00097	5e		 pop	 esi
  00098	83 c4 18	 add	 esp, 24			; 00000018H
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
  000a6	8b ff		 npad	 2
$LN7@GetUIEleme:
  000a8	02 00 00 00	 DD	 2
  000ac	00 00 00 00	 DD	 $LN6@GetUIEleme
$LN6@GetUIEleme:
  000b0	f8 ff ff ff	 DD	 -8			; fffffff8H
  000b4	04 00 00 00	 DD	 4
  000b8	00 00 00 00	 DD	 $LN4@GetUIEleme
  000bc	ec ff ff ff	 DD	 -20			; ffffffecH
  000c0	04 00 00 00	 DD	 4
  000c4	00 00 00 00	 DD	 $LN5@GetUIEleme
$LN5@GetUIEleme:
  000c8	70		 DB	 112			; 00000070H
  000c9	45		 DB	 69			; 00000045H
  000ca	6c		 DB	 108			; 0000006cH
  000cb	65		 DB	 101			; 00000065H
  000cc	6d		 DB	 109			; 0000006dH
  000cd	65		 DB	 101			; 00000065H
  000ce	6e		 DB	 110			; 0000006eH
  000cf	74		 DB	 116			; 00000074H
  000d0	00		 DB	 0
$LN4@GetUIEleme:
  000d1	70		 DB	 112			; 00000070H
  000d2	75		 DB	 117			; 00000075H
  000d3	69		 DB	 105			; 00000069H
  000d4	65		 DB	 101			; 00000065H
  000d5	6d		 DB	 109			; 0000006dH
  000d6	00		 DB	 0
?GetUIElement@CTsfUiLessMode@@KAPAUITfUIElement@@K@Z ENDP ; CTsfUiLessMode::GetUIElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv137 = -92						; size = 4
$T1 = -88						; size = 4
$T2 = -84						; size = 4
_j$3 = -80						; size = 4
_i$4 = -76						; size = 4
_bstr$ = -68						; size = 4
_dwPageSize$ = -60					; size = 4
_dwPageStart$ = -56					; size = 4
_uPageCnt$ = -48					; size = 4
_IndexList$ = -40					; size = 4
_uCurrentPage$ = -32					; size = 4
_uCount$ = -20						; size = 4
_uIndex$ = -8						; size = 4
_pcandidate$ = 8					; size = 4
?MakeCandidateStrings@CTsfUiLessMode@@KAXPAUITfCandidateListUIElement@@@Z PROC ; CTsfUiLessMode::MakeCandidateStrings
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2949
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  0000b	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
; Line 2950
  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _uIndex$[ebp], 0
; Line 2951
  0001e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _uCount$[ebp], 0
; Line 2952
  00025	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _uCurrentPage$[ebp], 0
; Line 2953
  0002c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _IndexList$[ebp], 0
; Line 2954
  00033	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _uPageCnt$[ebp], 0
; Line 2955
  0003a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _dwPageStart$[ebp], 0
; Line 2956
  00041	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _dwPageSize$[ebp], 0
; Line 2959
  00048	8b f4		 mov	 esi, esp
  0004a	8d 45 f8	 lea	 eax, DWORD PTR _uIndex$[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _pcandidate$[ebp]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	8b 45 08	 mov	 eax, DWORD PTR _pcandidate$[ebp]
  00056	50		 push	 eax
  00057	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  0005a	ff d1		 call	 ecx
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2960
  00063	8b f4		 mov	 esi, esp
  00065	8d 55 ec	 lea	 edx, DWORD PTR _uCount$[ebp]
  00068	52		 push	 edx
  00069	8b 45 08	 mov	 eax, DWORD PTR _pcandidate$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 55 08	 mov	 edx, DWORD PTR _pcandidate$[ebp]
  00071	52		 push	 edx
  00072	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00075	ff d0		 call	 eax
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2961
  0007e	8b f4		 mov	 esi, esp
  00080	8d 4d e0	 lea	 ecx, DWORD PTR _uCurrentPage$[ebp]
  00083	51		 push	 ecx
  00084	8b 55 08	 mov	 edx, DWORD PTR _pcandidate$[ebp]
  00087	8b 02		 mov	 eax, DWORD PTR [edx]
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _pcandidate$[ebp]
  0008c	51		 push	 ecx
  0008d	8b 50 38	 mov	 edx, DWORD PTR [eax+56]
  00090	ff d2		 call	 edx
  00092	3b f4		 cmp	 esi, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2962
  00099	8b 45 f8	 mov	 eax, DWORD PTR _uIndex$[ebp]
  0009c	a3 00 00 00 00	 mov	 DWORD PTR _g_dwSelection, eax
; Line 2963
  000a1	8b 4d ec	 mov	 ecx, DWORD PTR _uCount$[ebp]
  000a4	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwCount, ecx
; Line 2964
  000aa	c6 05 00 00 00
	00 01		 mov	 BYTE PTR _g_bCandList, 1
; Line 2965
  000b1	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _g_bReadingWindow, 0
; Line 2967
  000b8	8b f4		 mov	 esi, esp
  000ba	8d 55 d0	 lea	 edx, DWORD PTR _uPageCnt$[ebp]
  000bd	52		 push	 edx
  000be	6a 00		 push	 0
  000c0	6a 00		 push	 0
  000c2	8b 45 08	 mov	 eax, DWORD PTR _pcandidate$[ebp]
  000c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c7	8b 55 08	 mov	 edx, DWORD PTR _pcandidate$[ebp]
  000ca	52		 push	 edx
  000cb	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  000ce	ff d0		 call	 eax
  000d0	3b f4		 cmp	 esi, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2968
  000d7	83 7d d0 00	 cmp	 DWORD PTR _uPageCnt$[ebp], 0
  000db	0f 86 8c 00 00
	00		 jbe	 $LN9@MakeCandid
; Line 2970
  000e1	8b 4d d0	 mov	 ecx, DWORD PTR _uPageCnt$[ebp]
  000e4	c1 e1 02	 shl	 ecx, 2
  000e7	8b f4		 mov	 esi, esp
  000e9	51		 push	 ecx
  000ea	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_Malloc@@3P6APAXI@ZA ; ImeUiCallback_Malloc
  000f0	83 c4 04	 add	 esp, 4
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	89 45 d8	 mov	 DWORD PTR _IndexList$[ebp], eax
; Line 2971
  000fd	83 7d d8 00	 cmp	 DWORD PTR _IndexList$[ebp], 0
  00101	74 6a		 je	 SHORT $LN9@MakeCandid
; Line 2973
  00103	8b f4		 mov	 esi, esp
  00105	8d 55 d0	 lea	 edx, DWORD PTR _uPageCnt$[ebp]
  00108	52		 push	 edx
  00109	8b 45 d0	 mov	 eax, DWORD PTR _uPageCnt$[ebp]
  0010c	50		 push	 eax
  0010d	8b 4d d8	 mov	 ecx, DWORD PTR _IndexList$[ebp]
  00110	51		 push	 ecx
  00111	8b 55 08	 mov	 edx, DWORD PTR _pcandidate$[ebp]
  00114	8b 02		 mov	 eax, DWORD PTR [edx]
  00116	8b 4d 08	 mov	 ecx, DWORD PTR _pcandidate$[ebp]
  00119	51		 push	 ecx
  0011a	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  0011d	ff d2		 call	 edx
  0011f	3b f4		 cmp	 esi, esp
  00121	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2974
  00126	8b 45 e0	 mov	 eax, DWORD PTR _uCurrentPage$[ebp]
  00129	8b 4d d8	 mov	 ecx, DWORD PTR _IndexList$[ebp]
  0012c	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0012f	89 55 c8	 mov	 DWORD PTR _dwPageStart$[ebp], edx
; Line 2977
  00132	8b 45 d0	 mov	 eax, DWORD PTR _uPageCnt$[ebp]
  00135	83 e8 01	 sub	 eax, 1
  00138	39 45 e0	 cmp	 DWORD PTR _uCurrentPage$[ebp], eax
  0013b	73 21		 jae	 SHORT $LN12@MakeCandid
  0013d	8b 4d e0	 mov	 ecx, DWORD PTR _uCurrentPage$[ebp]
  00140	8b 55 d8	 mov	 edx, DWORD PTR _IndexList$[ebp]
  00143	8d 44 8a 04	 lea	 eax, DWORD PTR [edx+ecx*4+4]
  00147	50		 push	 eax
  00148	8d 4d ec	 lea	 ecx, DWORD PTR _uCount$[ebp]
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  00151	83 c4 08	 add	 esp, 8
  00154	8b 10		 mov	 edx, DWORD PTR [eax]
  00156	2b 55 c8	 sub	 edx, DWORD PTR _dwPageStart$[ebp]
  00159	89 55 a4	 mov	 DWORD PTR tv137[ebp], edx
  0015c	eb 09		 jmp	 SHORT $LN13@MakeCandid
$LN12@MakeCandid:
  0015e	8b 45 ec	 mov	 eax, DWORD PTR _uCount$[ebp]
  00161	2b 45 c8	 sub	 eax, DWORD PTR _dwPageStart$[ebp]
  00164	89 45 a4	 mov	 DWORD PTR tv137[ebp], eax
$LN13@MakeCandid:
  00167	8b 4d a4	 mov	 ecx, DWORD PTR tv137[ebp]
  0016a	89 4d c4	 mov	 DWORD PTR _dwPageSize$[ebp], ecx
$LN9@MakeCandid:
; Line 2981
  0016d	c7 45 ac 0a 00
	00 00		 mov	 DWORD PTR $T2[ebp], 10	; 0000000aH
  00174	8b 55 c4	 mov	 edx, DWORD PTR _dwPageSize$[ebp]
  00177	89 55 a8	 mov	 DWORD PTR $T1[ebp], edx
  0017a	8d 45 ac	 lea	 eax, DWORD PTR $T2[ebp]
  0017d	50		 push	 eax
  0017e	8d 4d a8	 lea	 ecx, DWORD PTR $T1[ebp]
  00181	51		 push	 ecx
  00182	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  00187	83 c4 08	 add	 esp, 8
  0018a	8b 10		 mov	 edx, DWORD PTR [eax]
  0018c	89 15 00 00 00
	00		 mov	 DWORD PTR _g_uCandPageSize, edx
; Line 2982
  00192	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwSelection
  00197	2b 45 c8	 sub	 eax, DWORD PTR _dwPageStart$[ebp]
  0019a	a3 00 00 00 00	 mov	 DWORD PTR _g_dwSelection, eax
; Line 2984
  0019f	68 00 14 00 00	 push	 5120			; 00001400H
  001a4	6a 00		 push	 0
  001a6	68 00 00 00 00	 push	 OFFSET _g_szCandidate
  001ab	e8 00 00 00 00	 call	 _memset
  001b0	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 2985
  001b3	8b 4d c8	 mov	 ecx, DWORD PTR _dwPageStart$[ebp]
  001b6	89 4d b4	 mov	 DWORD PTR _i$4[ebp], ecx
  001b9	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _j$3[ebp], 0
  001c0	eb 12		 jmp	 SHORT $LN7@MakeCandid
$LN6@MakeCandid:
  001c2	8b 55 b4	 mov	 edx, DWORD PTR _i$4[ebp]
  001c5	83 c2 01	 add	 edx, 1
  001c8	89 55 b4	 mov	 DWORD PTR _i$4[ebp], edx
  001cb	8b 45 b0	 mov	 eax, DWORD PTR _j$3[ebp]
  001ce	83 c0 01	 add	 eax, 1
  001d1	89 45 b0	 mov	 DWORD PTR _j$3[ebp], eax
$LN7@MakeCandid:
  001d4	8b 4d b4	 mov	 ecx, DWORD PTR _i$4[ebp]
  001d7	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _g_dwCount
  001dd	73 59		 jae	 SHORT $LN5@MakeCandid
  001df	8b 55 b0	 mov	 edx, DWORD PTR _j$3[ebp]
  001e2	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _g_uCandPageSize
  001e8	73 4e		 jae	 SHORT $LN5@MakeCandid
; Line 2987
  001ea	8b f4		 mov	 esi, esp
  001ec	8d 45 bc	 lea	 eax, DWORD PTR _bstr$[ebp]
  001ef	50		 push	 eax
  001f0	8b 4d b4	 mov	 ecx, DWORD PTR _i$4[ebp]
  001f3	51		 push	 ecx
  001f4	8b 55 08	 mov	 edx, DWORD PTR _pcandidate$[ebp]
  001f7	8b 02		 mov	 eax, DWORD PTR [edx]
  001f9	8b 4d 08	 mov	 ecx, DWORD PTR _pcandidate$[ebp]
  001fc	51		 push	 ecx
  001fd	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  00200	ff d2		 call	 edx
  00202	3b f4		 cmp	 esi, esp
  00204	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00209	85 c0		 test	 eax, eax
  0020b	7c 29		 jl	 SHORT $LN4@MakeCandid
; Line 2989
  0020d	83 7d bc 00	 cmp	 DWORD PTR _bstr$[ebp], 0
  00211	74 23		 je	 SHORT $LN4@MakeCandid
; Line 2991
  00213	8b 45 bc	 mov	 eax, DWORD PTR _bstr$[ebp]
  00216	50		 push	 eax
  00217	8b 4d b0	 mov	 ecx, DWORD PTR _j$3[ebp]
  0021a	51		 push	 ecx
  0021b	e8 00 00 00 00	 call	 ?ComposeCandidateLine@@YAXHPB_W@Z ; ComposeCandidateLine
  00220	83 c4 08	 add	 esp, 8
; Line 2992
  00223	8b f4		 mov	 esi, esp
  00225	8b 55 bc	 mov	 edx, DWORD PTR _bstr$[ebp]
  00228	52		 push	 edx
  00229	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4
  0022f	3b f4		 cmp	 esi, esp
  00231	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@MakeCandid:
; Line 2995
  00236	eb 8a		 jmp	 SHORT $LN6@MakeCandid
$LN5@MakeCandid:
; Line 2997
  00238	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hklCurrent
  0023d	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00242	0f b7 c8	 movzx	 ecx, ax
  00245	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  0024b	0f b7 d1	 movzx	 edx, cx
  0024e	83 fa 12	 cmp	 edx, 18			; 00000012H
  00251	75 0a		 jne	 SHORT $LN2@MakeCandid
; Line 2999
  00253	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _g_dwSelection, -1
$LN2@MakeCandid:
; Line 3002
  0025d	83 7d d8 00	 cmp	 DWORD PTR _IndexList$[ebp], 0
  00261	74 16		 je	 SHORT $LN10@MakeCandid
; Line 3004
  00263	8b f4		 mov	 esi, esp
  00265	8b 45 d8	 mov	 eax, DWORD PTR _IndexList$[ebp]
  00268	50		 push	 eax
  00269	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_Free@@3P6AXPAX@ZA ; ImeUiCallback_Free
  0026f	83 c4 04	 add	 esp, 4
  00272	3b f4		 cmp	 esi, esp
  00274	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN10@MakeCandid:
; Line 3006
  00279	52		 push	 edx
  0027a	8b cd		 mov	 ecx, ebp
  0027c	50		 push	 eax
  0027d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN20@MakeCandid
  00283	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00288	58		 pop	 eax
  00289	5a		 pop	 edx
  0028a	5f		 pop	 edi
  0028b	5e		 pop	 esi
  0028c	83 c4 5c	 add	 esp, 92			; 0000005cH
  0028f	3b ec		 cmp	 ebp, esp
  00291	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00296	8b e5		 mov	 esp, ebp
  00298	5d		 pop	 ebp
  00299	c3		 ret	 0
  0029a	8b ff		 npad	 2
$LN20@MakeCandid:
  0029c	05 00 00 00	 DD	 5
  002a0	00 00 00 00	 DD	 $LN19@MakeCandid
$LN19@MakeCandid:
  002a4	f8 ff ff ff	 DD	 -8			; fffffff8H
  002a8	04 00 00 00	 DD	 4
  002ac	00 00 00 00	 DD	 $LN14@MakeCandid
  002b0	ec ff ff ff	 DD	 -20			; ffffffecH
  002b4	04 00 00 00	 DD	 4
  002b8	00 00 00 00	 DD	 $LN15@MakeCandid
  002bc	e0 ff ff ff	 DD	 -32			; ffffffe0H
  002c0	04 00 00 00	 DD	 4
  002c4	00 00 00 00	 DD	 $LN16@MakeCandid
  002c8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  002cc	04 00 00 00	 DD	 4
  002d0	00 00 00 00	 DD	 $LN17@MakeCandid
  002d4	bc ff ff ff	 DD	 -68			; ffffffbcH
  002d8	04 00 00 00	 DD	 4
  002dc	00 00 00 00	 DD	 $LN18@MakeCandid
$LN18@MakeCandid:
  002e0	62		 DB	 98			; 00000062H
  002e1	73		 DB	 115			; 00000073H
  002e2	74		 DB	 116			; 00000074H
  002e3	72		 DB	 114			; 00000072H
  002e4	00		 DB	 0
$LN17@MakeCandid:
  002e5	75		 DB	 117			; 00000075H
  002e6	50		 DB	 80			; 00000050H
  002e7	61		 DB	 97			; 00000061H
  002e8	67		 DB	 103			; 00000067H
  002e9	65		 DB	 101			; 00000065H
  002ea	43		 DB	 67			; 00000043H
  002eb	6e		 DB	 110			; 0000006eH
  002ec	74		 DB	 116			; 00000074H
  002ed	00		 DB	 0
$LN16@MakeCandid:
  002ee	75		 DB	 117			; 00000075H
  002ef	43		 DB	 67			; 00000043H
  002f0	75		 DB	 117			; 00000075H
  002f1	72		 DB	 114			; 00000072H
  002f2	72		 DB	 114			; 00000072H
  002f3	65		 DB	 101			; 00000065H
  002f4	6e		 DB	 110			; 0000006eH
  002f5	74		 DB	 116			; 00000074H
  002f6	50		 DB	 80			; 00000050H
  002f7	61		 DB	 97			; 00000061H
  002f8	67		 DB	 103			; 00000067H
  002f9	65		 DB	 101			; 00000065H
  002fa	00		 DB	 0
$LN15@MakeCandid:
  002fb	75		 DB	 117			; 00000075H
  002fc	43		 DB	 67			; 00000043H
  002fd	6f		 DB	 111			; 0000006fH
  002fe	75		 DB	 117			; 00000075H
  002ff	6e		 DB	 110			; 0000006eH
  00300	74		 DB	 116			; 00000074H
  00301	00		 DB	 0
$LN14@MakeCandid:
  00302	75		 DB	 117			; 00000075H
  00303	49		 DB	 73			; 00000049H
  00304	6e		 DB	 110			; 0000006eH
  00305	64		 DB	 100			; 00000064H
  00306	65		 DB	 101			; 00000065H
  00307	78		 DB	 120			; 00000078H
  00308	00		 DB	 0
?MakeCandidateStrings@CTsfUiLessMode@@KAXPAUITfCandidateListUIElement@@@Z ENDP ; CTsfUiLessMode::MakeCandidateStrings
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv85 = -88						; size = 4
tv81 = -84						; size = 4
_size$1 = -80						; size = 4
_pszNextSrc$2 = -76					; size = 4
_pszDest$3 = -72					; size = 4
_i$4 = -68						; size = 4
_pszSource$5 = -64					; size = 4
_bstr$ = -56						; size = 4
_dwFlags$ = -44						; size = 4
_fVertical$ = -32					; size = 4
_uErrorIndex$ = -20					; size = 4
_cchMax$ = -8						; size = 4
_preading$ = 8						; size = 4
?MakeReadingInformationString@CTsfUiLessMode@@KAXPAUITfReadingInformationUIElement@@@Z PROC ; CTsfUiLessMode::MakeReadingInformationString
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2897
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d a8	 lea	 edi, DWORD PTR [ebp-88]
  0000b	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
; Line 2899
  00017	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _uErrorIndex$[ebp], 0
; Line 2903
  0001e	8b f4		 mov	 esi, esp
  00020	8d 45 d4	 lea	 eax, DWORD PTR _dwFlags$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _preading$[ebp]
  00027	8b 11		 mov	 edx, DWORD PTR [ecx]
  00029	8b 45 08	 mov	 eax, DWORD PTR _preading$[ebp]
  0002c	50		 push	 eax
  0002d	8b 4a 1c	 mov	 ecx, DWORD PTR [edx+28]
  00030	ff d1		 call	 ecx
  00032	3b f4		 cmp	 esi, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2904
  00039	8b f4		 mov	 esi, esp
  0003b	8d 55 f8	 lea	 edx, DWORD PTR _cchMax$[ebp]
  0003e	52		 push	 edx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _preading$[ebp]
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	8b 55 08	 mov	 edx, DWORD PTR _preading$[ebp]
  00047	52		 push	 edx
  00048	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  0004b	ff d0		 call	 eax
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2905
  00054	8b f4		 mov	 esi, esp
  00056	8d 4d ec	 lea	 ecx, DWORD PTR _uErrorIndex$[ebp]
  00059	51		 push	 ecx
  0005a	8b 55 08	 mov	 edx, DWORD PTR _preading$[ebp]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _preading$[ebp]
  00062	51		 push	 ecx
  00063	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  00066	ff d2		 call	 edx
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2906
  0006f	8b f4		 mov	 esi, esp
  00071	8d 45 e0	 lea	 eax, DWORD PTR _fVertical$[ebp]
  00074	50		 push	 eax
  00075	8b 4d 08	 mov	 ecx, DWORD PTR _preading$[ebp]
  00078	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007a	8b 45 08	 mov	 eax, DWORD PTR _preading$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4a 30	 mov	 ecx, DWORD PTR [edx+48]
  00081	ff d1		 call	 ecx
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2907
  0008a	8b 55 ec	 mov	 edx, DWORD PTR _uErrorIndex$[ebp]
  0008d	89 15 00 00 00
	00		 mov	 DWORD PTR _g_iReadingError, edx
; Line 2908
  00093	83 7d e0 00	 cmp	 DWORD PTR _fVertical$[ebp], 0
  00097	75 09		 jne	 SHORT $LN11@MakeReadin
  00099	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  000a0	eb 07		 jmp	 SHORT $LN12@MakeReadin
$LN11@MakeReadin:
  000a2	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN12@MakeReadin:
  000a9	8a 45 ac	 mov	 al, BYTE PTR tv81[ebp]
  000ac	a2 00 00 00 00	 mov	 BYTE PTR _g_bHorizontalReading, al
; Line 2909
  000b1	c6 05 00 00 00
	00 01		 mov	 BYTE PTR _g_bReadingWindow, 1
; Line 2910
  000b8	c7 05 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR _g_uCandPageSize, 10 ; 0000000aH
; Line 2911
  000c2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_iReadingError, 0
  000c9	74 0e		 je	 SHORT $LN13@MakeReadin
  000cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_iReadingError
  000d1	83 e9 01	 sub	 ecx, 1
  000d4	89 4d a8	 mov	 DWORD PTR tv85[ebp], ecx
  000d7	eb 07		 jmp	 SHORT $LN14@MakeReadin
$LN13@MakeReadin:
  000d9	c7 45 a8 ff ff
	ff ff		 mov	 DWORD PTR tv85[ebp], -1
$LN14@MakeReadin:
  000e0	8b 55 a8	 mov	 edx, DWORD PTR tv85[ebp]
  000e3	89 15 00 00 00
	00		 mov	 DWORD PTR _g_dwSelection, edx
; Line 2912
  000e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_iReadingError
  000ee	83 e8 01	 sub	 eax, 1
  000f1	a3 00 00 00 00	 mov	 DWORD PTR _g_iReadingError, eax
; Line 2915
  000f6	8b f4		 mov	 esi, esp
  000f8	8d 4d c8	 lea	 ecx, DWORD PTR _bstr$[ebp]
  000fb	51		 push	 ecx
  000fc	8b 55 08	 mov	 edx, DWORD PTR _preading$[ebp]
  000ff	8b 02		 mov	 eax, DWORD PTR [edx]
  00101	8b 4d 08	 mov	 ecx, DWORD PTR _preading$[ebp]
  00104	51		 push	 ecx
  00105	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00108	ff d2		 call	 edx
  0010a	3b f4		 cmp	 esi, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00111	85 c0		 test	 eax, eax
  00113	0f 8c f5 00 00
	00		 jl	 $LN9@MakeReadin
; Line 2917
  00119	83 7d c8 00	 cmp	 DWORD PTR _bstr$[ebp], 0
  0011d	0f 84 eb 00 00
	00		 je	 $LN9@MakeReadin
; Line 2919
  00123	8b f4		 mov	 esi, esp
  00125	8b 45 c8	 mov	 eax, DWORD PTR _bstr$[ebp]
  00128	50		 push	 eax
  00129	6a 20		 push	 32			; 00000020H
  0012b	68 00 00 00 00	 push	 OFFSET _g_szReadingString
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  00136	83 c4 0c	 add	 esp, 12			; 0000000cH
  00139	3b f4		 cmp	 esi, esp
  0013b	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2920
  00140	8b 4d f8	 mov	 ecx, DWORD PTR _cchMax$[ebp]
  00143	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwCount, ecx
; Line 2921
  00149	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _pszSource$5[ebp], OFFSET _g_szReadingString
; Line 2922
  00150	83 7d e0 00	 cmp	 DWORD PTR _fVertical$[ebp], 0
  00154	0f 84 84 00 00
	00		 je	 $LN6@MakeReadin
; Line 2925
  0015a	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  00161	eb 09		 jmp	 SHORT $LN5@MakeReadin
$LN4@MakeReadin:
  00163	8b 55 bc	 mov	 edx, DWORD PTR _i$4[ebp]
  00166	83 c2 01	 add	 edx, 1
  00169	89 55 bc	 mov	 DWORD PTR _i$4[ebp], edx
$LN5@MakeReadin:
  0016c	8b 45 bc	 mov	 eax, DWORD PTR _i$4[ebp]
  0016f	3b 45 f8	 cmp	 eax, DWORD PTR _cchMax$[ebp]
  00172	73 68		 jae	 SHORT $LN3@MakeReadin
; Line 2927
  00174	8b 4d bc	 mov	 ecx, DWORD PTR _i$4[ebp]
  00177	c1 e1 09	 shl	 ecx, 9
  0017a	81 c1 00 00 00
	00		 add	 ecx, OFFSET _g_szCandidate
  00180	89 4d b8	 mov	 DWORD PTR _pszDest$3[ebp], ecx
; Line 2928
  00183	8b 55 c0	 mov	 edx, DWORD PTR _pszSource$5[ebp]
  00186	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00189	85 c0		 test	 eax, eax
  0018b	74 45		 je	 SHORT $LN2@MakeReadin
; Line 2930
  0018d	8b f4		 mov	 esi, esp
  0018f	8b 4d c0	 mov	 ecx, DWORD PTR _pszSource$5[ebp]
  00192	51		 push	 ecx
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextW@4
  00199	3b f4		 cmp	 esi, esp
  0019b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a0	89 45 b4	 mov	 DWORD PTR _pszNextSrc$2[ebp], eax
; Line 2931
  001a3	8b 55 b4	 mov	 edx, DWORD PTR _pszNextSrc$2[ebp]
  001a6	2b 55 c0	 sub	 edx, DWORD PTR _pszSource$5[ebp]
  001a9	89 55 b0	 mov	 DWORD PTR _size$1[ebp], edx
; Line 2932
  001ac	8b 45 b0	 mov	 eax, DWORD PTR _size$1[ebp]
  001af	50		 push	 eax
  001b0	8b 4d c0	 mov	 ecx, DWORD PTR _pszSource$5[ebp]
  001b3	51		 push	 ecx
  001b4	8b 55 b8	 mov	 edx, DWORD PTR _pszDest$3[ebp]
  001b7	52		 push	 edx
  001b8	e8 00 00 00 00	 call	 _memcpy
  001bd	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 2933
  001c0	8b 45 b4	 mov	 eax, DWORD PTR _pszNextSrc$2[ebp]
  001c3	89 45 c0	 mov	 DWORD PTR _pszSource$5[ebp], eax
; Line 2934
  001c6	8b 4d b0	 mov	 ecx, DWORD PTR _size$1[ebp]
  001c9	8b 55 b8	 mov	 edx, DWORD PTR _pszDest$3[ebp]
  001cc	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  001cf	89 45 b8	 mov	 DWORD PTR _pszDest$3[ebp], eax
$LN2@MakeReadin:
; Line 2936
  001d2	33 c9		 xor	 ecx, ecx
  001d4	8b 55 b8	 mov	 edx, DWORD PTR _pszDest$3[ebp]
  001d7	66 89 0a	 mov	 WORD PTR [edx], cx
; Line 2937
  001da	eb 87		 jmp	 SHORT $LN4@MakeReadin
$LN3@MakeReadin:
; Line 2939
  001dc	eb 1d		 jmp	 SHORT $LN1@MakeReadin
$LN6@MakeReadin:
; Line 2941
  001de	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  001e3	6b c8 00	 imul	 ecx, eax, 0
  001e6	ba 02 00 00 00	 mov	 edx, 2
  001eb	6b c2 00	 imul	 eax, edx, 0
  001ee	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  001f3	66 89 94 01 00
	00 00 00	 mov	 WORD PTR _g_szCandidate[ecx+eax], dx
$LN1@MakeReadin:
; Line 2943
  001fb	8b f4		 mov	 esi, esp
  001fd	8b 45 c8	 mov	 eax, DWORD PTR _bstr$[ebp]
  00200	50		 push	 eax
  00201	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SysFreeString@4
  00207	3b f4		 cmp	 esi, esp
  00209	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN9@MakeReadin:
; Line 2946
  0020e	52		 push	 edx
  0020f	8b cd		 mov	 ecx, ebp
  00211	50		 push	 eax
  00212	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN21@MakeReadin
  00218	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0021d	58		 pop	 eax
  0021e	5a		 pop	 edx
  0021f	5f		 pop	 edi
  00220	5e		 pop	 esi
  00221	83 c4 58	 add	 esp, 88			; 00000058H
  00224	3b ec		 cmp	 ebp, esp
  00226	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0022b	8b e5		 mov	 esp, ebp
  0022d	5d		 pop	 ebp
  0022e	c3		 ret	 0
  0022f	90		 npad	 1
$LN21@MakeReadin:
  00230	05 00 00 00	 DD	 5
  00234	00 00 00 00	 DD	 $LN20@MakeReadin
$LN20@MakeReadin:
  00238	f8 ff ff ff	 DD	 -8			; fffffff8H
  0023c	04 00 00 00	 DD	 4
  00240	00 00 00 00	 DD	 $LN15@MakeReadin
  00244	ec ff ff ff	 DD	 -20			; ffffffecH
  00248	04 00 00 00	 DD	 4
  0024c	00 00 00 00	 DD	 $LN16@MakeReadin
  00250	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00254	04 00 00 00	 DD	 4
  00258	00 00 00 00	 DD	 $LN17@MakeReadin
  0025c	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00260	04 00 00 00	 DD	 4
  00264	00 00 00 00	 DD	 $LN18@MakeReadin
  00268	c8 ff ff ff	 DD	 -56			; ffffffc8H
  0026c	04 00 00 00	 DD	 4
  00270	00 00 00 00	 DD	 $LN19@MakeReadin
$LN19@MakeReadin:
  00274	62		 DB	 98			; 00000062H
  00275	73		 DB	 115			; 00000073H
  00276	74		 DB	 116			; 00000074H
  00277	72		 DB	 114			; 00000072H
  00278	00		 DB	 0
$LN18@MakeReadin:
  00279	64		 DB	 100			; 00000064H
  0027a	77		 DB	 119			; 00000077H
  0027b	46		 DB	 70			; 00000046H
  0027c	6c		 DB	 108			; 0000006cH
  0027d	61		 DB	 97			; 00000061H
  0027e	67		 DB	 103			; 00000067H
  0027f	73		 DB	 115			; 00000073H
  00280	00		 DB	 0
$LN17@MakeReadin:
  00281	66		 DB	 102			; 00000066H
  00282	56		 DB	 86			; 00000056H
  00283	65		 DB	 101			; 00000065H
  00284	72		 DB	 114			; 00000072H
  00285	74		 DB	 116			; 00000074H
  00286	69		 DB	 105			; 00000069H
  00287	63		 DB	 99			; 00000063H
  00288	61		 DB	 97			; 00000061H
  00289	6c		 DB	 108			; 0000006cH
  0028a	00		 DB	 0
$LN16@MakeReadin:
  0028b	75		 DB	 117			; 00000075H
  0028c	45		 DB	 69			; 00000045H
  0028d	72		 DB	 114			; 00000072H
  0028e	72		 DB	 114			; 00000072H
  0028f	6f		 DB	 111			; 0000006fH
  00290	72		 DB	 114			; 00000072H
  00291	49		 DB	 73			; 00000049H
  00292	6e		 DB	 110			; 0000006eH
  00293	64		 DB	 100			; 00000064H
  00294	65		 DB	 101			; 00000065H
  00295	78		 DB	 120			; 00000078H
  00296	00		 DB	 0
$LN15@MakeReadin:
  00297	63		 DB	 99			; 00000063H
  00298	63		 DB	 99			; 00000063H
  00299	68		 DB	 104			; 00000068H
  0029a	4d		 DB	 77			; 0000004dH
  0029b	61		 DB	 97			; 00000061H
  0029c	78		 DB	 120			; 00000078H
  0029d	00		 DB	 0
?MakeReadingInformationString@CTsfUiLessMode@@KAXPAUITfReadingInformationUIElement@@@Z ENDP ; CTsfUiLessMode::MakeReadingInformationString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCUIElementSink@CTsfUiLessMode@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCUIElementSink@CTsfUiLessMode@@QAEPAXI@Z PROC	; CTsfUiLessMode::CUIElementSink::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CUIElementSink@CTsfUiLessMode@@QAE@XZ ; CTsfUiLessMode::CUIElementSink::~CUIElementSink
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0c		 je	 SHORT $LN1@scalar
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 04	 add	 esp, 4
$LN1@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??_GCUIElementSink@CTsfUiLessMode@@QAEPAXI@Z ENDP	; CTsfUiLessMode::CUIElementSink::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_rguid$ = 12						; size = 4
?OnChange@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@@Z PROC ; CTsfUiLessMode::CUIElementSink::OnChange
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2890
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 2892
  00003	6a 00		 push	 0
  00005	e8 00 00 00 00	 call	 ?UpdateImeState@CTsfUiLessMode@@SAXH@Z ; CTsfUiLessMode::UpdateImeState
  0000a	83 c4 04	 add	 esp, 4
; Line 2893
  0000d	33 c0		 xor	 eax, eax
; Line 2894
  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?OnChange@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@@Z ENDP ; CTsfUiLessMode::CUIElementSink::OnChange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -8						; size = 4
tv68 = -4						; size = 4
_this$ = 8						; size = 4
_dwProfileType$ = 12					; size = 4
_langid$ = 16						; size = 2
_clsid$ = 20						; size = 4
_catid$ = 24						; size = 4
_guidProfile$ = 28					; size = 4
_hkl$ = 32						; size = 4
_dwFlags$ = 36						; size = 4
?OnActivated@CUIElementSink@CTsfUiLessMode@@UAGJKGABU_GUID@@00PAUHKL__@@K@Z PROC ; CTsfUiLessMode::CUIElementSink::OnActivated
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2866
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 2874
  00014	8b 45 1c	 mov	 eax, DWORD PTR _guidProfile$[ebp]
  00017	50		 push	 eax
  00018	68 00 00 00 00	 push	 OFFSET ?s_TF_PROFILE_DAYI@?1??OnActivated@CUIElementSink@CTsfUiLessMode@@UAGJKGABU_GUID@@00PAUHKL__@@K@Z@4U4@A
  0001d	e8 00 00 00 00	 call	 _IsEqualGUID
  00022	83 c4 08	 add	 esp, 8
  00025	85 c0		 test	 eax, eax
  00027	74 09		 je	 SHORT $LN6@OnActivate
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
  00030	eb 07		 jmp	 SHORT $LN7@OnActivate
$LN6@OnActivate:
  00032	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
$LN7@OnActivate:
  00039	8b 4d fc	 mov	 ecx, DWORD PTR tv68[ebp]
  0003c	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_iCandListIndexBase, ecx
; Line 2875
  00042	68 00 00 00 00	 push	 OFFSET _GUID_TFCAT_TIP_KEYBOARD
  00047	8b 55 18	 mov	 edx, DWORD PTR _catid$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 _IsEqualGUID
  00050	83 c4 08	 add	 esp, 8
  00053	85 c0		 test	 eax, eax
  00055	74 57		 je	 SHORT $LN3@OnActivate
  00057	8b 45 24	 mov	 eax, DWORD PTR _dwFlags$[ebp]
  0005a	83 e0 01	 and	 eax, 1
  0005d	74 4f		 je	 SHORT $LN3@OnActivate
; Line 2877
  0005f	8b 4d 0c	 mov	 ecx, DWORD PTR _dwProfileType$[ebp]
  00062	83 e1 01	 and	 ecx, 1
  00065	74 15		 je	 SHORT $LN8@OnActivate
  00067	0f b7 55 10	 movzx	 edx, WORD PTR _langid$[ebp]
  0006b	81 fa 04 04 00
	00		 cmp	 edx, 1028		; 00000404H
  00071	75 09		 jne	 SHORT $LN8@OnActivate
  00073	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv79[ebp], 1
  0007a	eb 07		 jmp	 SHORT $LN9@OnActivate
$LN8@OnActivate:
  0007c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN9@OnActivate:
  00083	8a 45 f8	 mov	 al, BYTE PTR tv79[ebp]
  00086	a2 00 00 00 00	 mov	 BYTE PTR _g_bChineseIME, al
; Line 2878
  0008b	8b 4d 0c	 mov	 ecx, DWORD PTR _dwProfileType$[ebp]
  0008e	83 e1 01	 and	 ecx, 1
  00091	74 0c		 je	 SHORT $LN2@OnActivate
; Line 2880
  00093	6a 01		 push	 1
  00095	e8 00 00 00 00	 call	 ?UpdateImeState@CTsfUiLessMode@@SAXH@Z ; CTsfUiLessMode::UpdateImeState
  0009a	83 c4 04	 add	 esp, 4
; Line 2882
  0009d	eb 0a		 jmp	 SHORT $LN1@OnActivate
$LN2@OnActivate:
; Line 2883
  0009f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_dwState, 0
$LN1@OnActivate:
; Line 2884
  000a9	e8 00 00 00 00	 call	 ?OnInputLangChange@@YAXXZ ; OnInputLangChange
$LN3@OnActivate:
; Line 2886
  000ae	33 c0		 xor	 eax, eax
; Line 2887
  000b0	83 c4 08	 add	 esp, 8
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 20 00	 ret	 32			; 00000020H
?OnActivated@CUIElementSink@CTsfUiLessMode@@UAGJKGABU_GUID@@00PAUHKL__@@K@Z ENDP ; CTsfUiLessMode::CUIElementSink::OnActivated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pcandidate$ = -24					; size = 4
_preading$ = -12					; size = 4
_pElement$ = -4						; size = 4
_this$ = 8						; size = 4
_dwUIElementId$ = 12					; size = 4
?EndUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z PROC ; CTsfUiLessMode::CUIElementSink::EndUIElement
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2798
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00012	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00015	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00018	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 2799
  00021	8b 45 0c	 mov	 eax, DWORD PTR _dwUIElementId$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?GetUIElement@CTsfUiLessMode@@KAPAUITfUIElement@@K@Z ; CTsfUiLessMode::GetUIElement
  0002a	83 c4 04	 add	 esp, 4
  0002d	89 45 fc	 mov	 DWORD PTR _pElement$[ebp], eax
; Line 2800
  00030	83 7d fc 00	 cmp	 DWORD PTR _pElement$[ebp], 0
  00034	75 0a		 jne	 SHORT $LN4@EndUIEleme
; Line 2801
  00036	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  0003b	e9 c6 00 00 00	 jmp	 $LN5@EndUIEleme
$LN4@EndUIEleme:
; Line 2803
  00040	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _preading$[ebp], 0
; Line 2805
  00047	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bCandList
  0004e	85 c9		 test	 ecx, ecx
  00050	75 44		 jne	 SHORT $LN3@EndUIEleme
  00052	8b f4		 mov	 esi, esp
  00054	8d 55 f4	 lea	 edx, DWORD PTR _preading$[ebp]
  00057	52		 push	 edx
  00058	68 00 00 00 00	 push	 OFFSET __GUID_ea1ea139_19df_11d7_a6d2_00065b84435c
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _pElement$[ebp]
  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	8b 55 fc	 mov	 edx, DWORD PTR _pElement$[ebp]
  00065	52		 push	 edx
  00066	8b 01		 mov	 eax, DWORD PTR [ecx]
  00068	ff d0		 call	 eax
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	85 c0		 test	 eax, eax
  00073	7c 21		 jl	 SHORT $LN3@EndUIEleme
; Line 2807
  00075	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_dwCount, 0
; Line 2808
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR _preading$[ebp]
  00082	8b 11		 mov	 edx, DWORD PTR [ecx]
  00084	8b f4		 mov	 esi, esp
  00086	8b 45 f4	 mov	 eax, DWORD PTR _preading$[ebp]
  00089	50		 push	 eax
  0008a	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0008d	ff d1		 call	 ecx
  0008f	3b f4		 cmp	 esi, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@EndUIEleme:
; Line 2811
  00096	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pcandidate$[ebp], 0
; Line 2813
  0009d	8b f4		 mov	 esi, esp
  0009f	8d 55 e8	 lea	 edx, DWORD PTR _pcandidate$[ebp]
  000a2	52		 push	 edx
  000a3	68 00 00 00 00	 push	 OFFSET __GUID_ea1ea138_19df_11d7_a6d2_00065b84435c
  000a8	8b 45 fc	 mov	 eax, DWORD PTR _pElement$[ebp]
  000ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ad	8b 55 fc	 mov	 edx, DWORD PTR _pElement$[ebp]
  000b0	52		 push	 edx
  000b1	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b3	ff d0		 call	 eax
  000b5	3b f4		 cmp	 esi, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	85 c0		 test	 eax, eax
  000be	7c 2d		 jl	 SHORT $LN2@EndUIEleme
; Line 2815
  000c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_nCandidateRefCount@CTsfUiLessMode@@1HA ; CTsfUiLessMode::m_nCandidateRefCount
  000c6	83 e9 01	 sub	 ecx, 1
  000c9	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_nCandidateRefCount@CTsfUiLessMode@@1HA, ecx ; CTsfUiLessMode::m_nCandidateRefCount
; Line 2816
  000cf	75 05		 jne	 SHORT $LN1@EndUIEleme
; Line 2817
  000d1	e8 00 00 00 00	 call	 ?CloseCandidateList@@YAXXZ ; CloseCandidateList
$LN1@EndUIEleme:
; Line 2818
  000d6	8b 55 e8	 mov	 edx, DWORD PTR _pcandidate$[ebp]
  000d9	8b 02		 mov	 eax, DWORD PTR [edx]
  000db	8b f4		 mov	 esi, esp
  000dd	8b 4d e8	 mov	 ecx, DWORD PTR _pcandidate$[ebp]
  000e0	51		 push	 ecx
  000e1	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000e4	ff d2		 call	 edx
  000e6	3b f4		 cmp	 esi, esp
  000e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@EndUIEleme:
; Line 2821
  000ed	8b 45 fc	 mov	 eax, DWORD PTR _pElement$[ebp]
  000f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f2	8b f4		 mov	 esi, esp
  000f4	8b 55 fc	 mov	 edx, DWORD PTR _pElement$[ebp]
  000f7	52		 push	 edx
  000f8	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000fb	ff d0		 call	 eax
  000fd	3b f4		 cmp	 esi, esp
  000ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2822
  00104	33 c0		 xor	 eax, eax
$LN5@EndUIEleme:
; Line 2823
  00106	52		 push	 edx
  00107	8b cd		 mov	 ecx, ebp
  00109	50		 push	 eax
  0010a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@EndUIEleme
  00110	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00115	58		 pop	 eax
  00116	5a		 pop	 edx
  00117	5e		 pop	 esi
  00118	83 c4 1c	 add	 esp, 28			; 0000001cH
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c2 08 00	 ret	 8
$LN10@EndUIEleme:
  00128	02 00 00 00	 DD	 2
  0012c	00 00 00 00	 DD	 $LN9@EndUIEleme
$LN9@EndUIEleme:
  00130	f4 ff ff ff	 DD	 -12			; fffffff4H
  00134	04 00 00 00	 DD	 4
  00138	00 00 00 00	 DD	 $LN7@EndUIEleme
  0013c	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00140	04 00 00 00	 DD	 4
  00144	00 00 00 00	 DD	 $LN8@EndUIEleme
$LN8@EndUIEleme:
  00148	70		 DB	 112			; 00000070H
  00149	63		 DB	 99			; 00000063H
  0014a	61		 DB	 97			; 00000061H
  0014b	6e		 DB	 110			; 0000006eH
  0014c	64		 DB	 100			; 00000064H
  0014d	69		 DB	 105			; 00000069H
  0014e	64		 DB	 100			; 00000064H
  0014f	61		 DB	 97			; 00000061H
  00150	74		 DB	 116			; 00000074H
  00151	65		 DB	 101			; 00000065H
  00152	00		 DB	 0
$LN7@EndUIEleme:
  00153	70		 DB	 112			; 00000070H
  00154	72		 DB	 114			; 00000072H
  00155	65		 DB	 101			; 00000065H
  00156	61		 DB	 97			; 00000061H
  00157	64		 DB	 100			; 00000064H
  00158	69		 DB	 105			; 00000069H
  00159	6e		 DB	 110			; 0000006eH
  0015a	67		 DB	 103			; 00000067H
  0015b	00		 DB	 0
?EndUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z ENDP ; CTsfUiLessMode::CUIElementSink::EndUIElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pcandidate$ = -24					; size = 4
_preading$ = -12					; size = 4
_pElement$ = -4						; size = 4
_this$ = 8						; size = 4
_dwUIElementId$ = 12					; size = 4
?UpdateUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z PROC ; CTsfUiLessMode::CUIElementSink::UpdateUIElement
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2773
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00012	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00015	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00018	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 2774
  00021	8b 45 0c	 mov	 eax, DWORD PTR _dwUIElementId$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?GetUIElement@CTsfUiLessMode@@KAPAUITfUIElement@@K@Z ; CTsfUiLessMode::GetUIElement
  0002a	83 c4 04	 add	 esp, 4
  0002d	89 45 fc	 mov	 DWORD PTR _pElement$[ebp], eax
; Line 2775
  00030	83 7d fc 00	 cmp	 DWORD PTR _pElement$[ebp], 0
  00034	75 0a		 jne	 SHORT $LN4@UpdateUIEl
; Line 2776
  00036	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  0003b	e9 c0 00 00 00	 jmp	 $LN5@UpdateUIEl
$LN4@UpdateUIEl:
; Line 2778
  00040	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _preading$[ebp], 0
; Line 2779
  00047	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pcandidate$[ebp], 0
; Line 2781
  0004e	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bCandList
  00055	85 c9		 test	 ecx, ecx
  00057	75 48		 jne	 SHORT $LN3@UpdateUIEl
  00059	8b f4		 mov	 esi, esp
  0005b	8d 55 f4	 lea	 edx, DWORD PTR _preading$[ebp]
  0005e	52		 push	 edx
  0005f	68 00 00 00 00	 push	 OFFSET __GUID_ea1ea139_19df_11d7_a6d2_00065b84435c
  00064	8b 45 fc	 mov	 eax, DWORD PTR _pElement$[ebp]
  00067	8b 08		 mov	 ecx, DWORD PTR [eax]
  00069	8b 55 fc	 mov	 edx, DWORD PTR _pElement$[ebp]
  0006c	52		 push	 edx
  0006d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006f	ff d0		 call	 eax
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	85 c0		 test	 eax, eax
  0007a	7c 25		 jl	 SHORT $LN3@UpdateUIEl
; Line 2783
  0007c	8b 4d f4	 mov	 ecx, DWORD PTR _preading$[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 ?MakeReadingInformationString@CTsfUiLessMode@@KAXPAUITfReadingInformationUIElement@@@Z ; CTsfUiLessMode::MakeReadingInformationString
  00085	83 c4 04	 add	 esp, 4
; Line 2784
  00088	8b 55 f4	 mov	 edx, DWORD PTR _preading$[ebp]
  0008b	8b 02		 mov	 eax, DWORD PTR [edx]
  0008d	8b f4		 mov	 esi, esp
  0008f	8b 4d f4	 mov	 ecx, DWORD PTR _preading$[ebp]
  00092	51		 push	 ecx
  00093	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00096	ff d2		 call	 edx
  00098	3b f4		 cmp	 esi, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2786
  0009f	eb 46		 jmp	 SHORT $LN2@UpdateUIEl
$LN3@UpdateUIEl:
; Line 2787
  000a1	8b f4		 mov	 esi, esp
  000a3	8d 45 e8	 lea	 eax, DWORD PTR _pcandidate$[ebp]
  000a6	50		 push	 eax
  000a7	68 00 00 00 00	 push	 OFFSET __GUID_ea1ea138_19df_11d7_a6d2_00065b84435c
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _pElement$[ebp]
  000af	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b1	8b 45 fc	 mov	 eax, DWORD PTR _pElement$[ebp]
  000b4	50		 push	 eax
  000b5	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000b7	ff d1		 call	 ecx
  000b9	3b f4		 cmp	 esi, esp
  000bb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c0	85 c0		 test	 eax, eax
  000c2	7c 23		 jl	 SHORT $LN2@UpdateUIEl
; Line 2789
  000c4	8b 55 e8	 mov	 edx, DWORD PTR _pcandidate$[ebp]
  000c7	52		 push	 edx
  000c8	e8 00 00 00 00	 call	 ?MakeCandidateStrings@CTsfUiLessMode@@KAXPAUITfCandidateListUIElement@@@Z ; CTsfUiLessMode::MakeCandidateStrings
  000cd	83 c4 04	 add	 esp, 4
; Line 2790
  000d0	8b 45 e8	 mov	 eax, DWORD PTR _pcandidate$[ebp]
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	8b f4		 mov	 esi, esp
  000d7	8b 55 e8	 mov	 edx, DWORD PTR _pcandidate$[ebp]
  000da	52		 push	 edx
  000db	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000de	ff d0		 call	 eax
  000e0	3b f4		 cmp	 esi, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@UpdateUIEl:
; Line 2793
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR _pElement$[ebp]
  000ea	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ec	8b f4		 mov	 esi, esp
  000ee	8b 45 fc	 mov	 eax, DWORD PTR _pElement$[ebp]
  000f1	50		 push	 eax
  000f2	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  000f5	ff d1		 call	 ecx
  000f7	3b f4		 cmp	 esi, esp
  000f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2794
  000fe	33 c0		 xor	 eax, eax
$LN5@UpdateUIEl:
; Line 2795
  00100	52		 push	 edx
  00101	8b cd		 mov	 ecx, ebp
  00103	50		 push	 eax
  00104	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@UpdateUIEl
  0010a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010f	58		 pop	 eax
  00110	5a		 pop	 edx
  00111	5e		 pop	 esi
  00112	83 c4 1c	 add	 esp, 28			; 0000001cH
  00115	3b ec		 cmp	 ebp, esp
  00117	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 08 00	 ret	 8
  00122	8b ff		 npad	 2
$LN10@UpdateUIEl:
  00124	02 00 00 00	 DD	 2
  00128	00 00 00 00	 DD	 $LN9@UpdateUIEl
$LN9@UpdateUIEl:
  0012c	f4 ff ff ff	 DD	 -12			; fffffff4H
  00130	04 00 00 00	 DD	 4
  00134	00 00 00 00	 DD	 $LN7@UpdateUIEl
  00138	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0013c	04 00 00 00	 DD	 4
  00140	00 00 00 00	 DD	 $LN8@UpdateUIEl
$LN8@UpdateUIEl:
  00144	70		 DB	 112			; 00000070H
  00145	63		 DB	 99			; 00000063H
  00146	61		 DB	 97			; 00000061H
  00147	6e		 DB	 110			; 0000006eH
  00148	64		 DB	 100			; 00000064H
  00149	69		 DB	 105			; 00000069H
  0014a	64		 DB	 100			; 00000064H
  0014b	61		 DB	 97			; 00000061H
  0014c	74		 DB	 116			; 00000074H
  0014d	65		 DB	 101			; 00000065H
  0014e	00		 DB	 0
$LN7@UpdateUIEl:
  0014f	70		 DB	 112			; 00000070H
  00150	72		 DB	 114			; 00000072H
  00151	65		 DB	 101			; 00000065H
  00152	61		 DB	 97			; 00000061H
  00153	64		 DB	 100			; 00000064H
  00154	69		 DB	 105			; 00000069H
  00155	6e		 DB	 110			; 0000006eH
  00156	67		 DB	 103			; 00000067H
  00157	00		 DB	 0
?UpdateUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z ENDP ; CTsfUiLessMode::CUIElementSink::UpdateUIElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pcandidate$ = -24					; size = 4
_preading$ = -12					; size = 4
_pElement$ = -4						; size = 4
_this$ = 8						; size = 4
_dwUIElementId$ = 12					; size = 4
_pbShow$ = 16						; size = 4
?BeginUIElement@CUIElementSink@CTsfUiLessMode@@UAGJKPAH@Z PROC ; CTsfUiLessMode::CUIElementSink::BeginUIElement
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2746
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00012	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00015	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00018	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 2747
  00021	8b 45 0c	 mov	 eax, DWORD PTR _dwUIElementId$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ?GetUIElement@CTsfUiLessMode@@KAPAUITfUIElement@@K@Z ; CTsfUiLessMode::GetUIElement
  0002a	83 c4 04	 add	 esp, 4
  0002d	89 45 fc	 mov	 DWORD PTR _pElement$[ebp], eax
; Line 2748
  00030	83 7d fc 00	 cmp	 DWORD PTR _pElement$[ebp], 0
  00034	75 0a		 jne	 SHORT $LN4@BeginUIEle
; Line 2749
  00036	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  0003b	e9 d6 00 00 00	 jmp	 $LN5@BeginUIEle
$LN4@BeginUIEle:
; Line 2751
  00040	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _preading$[ebp], 0
; Line 2752
  00047	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pcandidate$[ebp], 0
; Line 2753
  0004e	8b 4d 10	 mov	 ecx, DWORD PTR _pbShow$[ebp]
  00051	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; Line 2755
  00057	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _g_bCandList
  0005e	85 d2		 test	 edx, edx
  00060	75 48		 jne	 SHORT $LN3@BeginUIEle
  00062	8b f4		 mov	 esi, esp
  00064	8d 45 f4	 lea	 eax, DWORD PTR _preading$[ebp]
  00067	50		 push	 eax
  00068	68 00 00 00 00	 push	 OFFSET __GUID_ea1ea139_19df_11d7_a6d2_00065b84435c
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _pElement$[ebp]
  00070	8b 11		 mov	 edx, DWORD PTR [ecx]
  00072	8b 45 fc	 mov	 eax, DWORD PTR _pElement$[ebp]
  00075	50		 push	 eax
  00076	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00078	ff d1		 call	 ecx
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	85 c0		 test	 eax, eax
  00083	7c 25		 jl	 SHORT $LN3@BeginUIEle
; Line 2757
  00085	8b 55 f4	 mov	 edx, DWORD PTR _preading$[ebp]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 ?MakeReadingInformationString@CTsfUiLessMode@@KAXPAUITfReadingInformationUIElement@@@Z ; CTsfUiLessMode::MakeReadingInformationString
  0008e	83 c4 04	 add	 esp, 4
; Line 2758
  00091	8b 45 f4	 mov	 eax, DWORD PTR _preading$[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	8b f4		 mov	 esi, esp
  00098	8b 55 f4	 mov	 edx, DWORD PTR _preading$[ebp]
  0009b	52		 push	 edx
  0009c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0009f	ff d0		 call	 eax
  000a1	3b f4		 cmp	 esi, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2760
  000a8	eb 53		 jmp	 SHORT $LN2@BeginUIEle
$LN3@BeginUIEle:
; Line 2761
  000aa	8b f4		 mov	 esi, esp
  000ac	8d 4d e8	 lea	 ecx, DWORD PTR _pcandidate$[ebp]
  000af	51		 push	 ecx
  000b0	68 00 00 00 00	 push	 OFFSET __GUID_ea1ea138_19df_11d7_a6d2_00065b84435c
  000b5	8b 55 fc	 mov	 edx, DWORD PTR _pElement$[ebp]
  000b8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _pElement$[ebp]
  000bd	51		 push	 ecx
  000be	8b 10		 mov	 edx, DWORD PTR [eax]
  000c0	ff d2		 call	 edx
  000c2	3b f4		 cmp	 esi, esp
  000c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c9	85 c0		 test	 eax, eax
  000cb	7c 30		 jl	 SHORT $LN2@BeginUIEle
; Line 2763
  000cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nCandidateRefCount@CTsfUiLessMode@@1HA ; CTsfUiLessMode::m_nCandidateRefCount
  000d2	83 c0 01	 add	 eax, 1
  000d5	a3 00 00 00 00	 mov	 DWORD PTR ?m_nCandidateRefCount@CTsfUiLessMode@@1HA, eax ; CTsfUiLessMode::m_nCandidateRefCount
; Line 2764
  000da	8b 4d e8	 mov	 ecx, DWORD PTR _pcandidate$[ebp]
  000dd	51		 push	 ecx
  000de	e8 00 00 00 00	 call	 ?MakeCandidateStrings@CTsfUiLessMode@@KAXPAUITfCandidateListUIElement@@@Z ; CTsfUiLessMode::MakeCandidateStrings
  000e3	83 c4 04	 add	 esp, 4
; Line 2765
  000e6	8b 55 e8	 mov	 edx, DWORD PTR _pcandidate$[ebp]
  000e9	8b 02		 mov	 eax, DWORD PTR [edx]
  000eb	8b f4		 mov	 esi, esp
  000ed	8b 4d e8	 mov	 ecx, DWORD PTR _pcandidate$[ebp]
  000f0	51		 push	 ecx
  000f1	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000f4	ff d2		 call	 edx
  000f6	3b f4		 cmp	 esi, esp
  000f8	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@BeginUIEle:
; Line 2768
  000fd	8b 45 fc	 mov	 eax, DWORD PTR _pElement$[ebp]
  00100	8b 08		 mov	 ecx, DWORD PTR [eax]
  00102	8b f4		 mov	 esi, esp
  00104	8b 55 fc	 mov	 edx, DWORD PTR _pElement$[ebp]
  00107	52		 push	 edx
  00108	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0010b	ff d0		 call	 eax
  0010d	3b f4		 cmp	 esi, esp
  0010f	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2769
  00114	33 c0		 xor	 eax, eax
$LN5@BeginUIEle:
; Line 2770
  00116	52		 push	 edx
  00117	8b cd		 mov	 ecx, ebp
  00119	50		 push	 eax
  0011a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@BeginUIEle
  00120	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00125	58		 pop	 eax
  00126	5a		 pop	 edx
  00127	5e		 pop	 esi
  00128	83 c4 1c	 add	 esp, 28			; 0000001cH
  0012b	3b ec		 cmp	 ebp, esp
  0012d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c2 0c 00	 ret	 12			; 0000000cH
$LN10@BeginUIEle:
  00138	02 00 00 00	 DD	 2
  0013c	00 00 00 00	 DD	 $LN9@BeginUIEle
$LN9@BeginUIEle:
  00140	f4 ff ff ff	 DD	 -12			; fffffff4H
  00144	04 00 00 00	 DD	 4
  00148	00 00 00 00	 DD	 $LN7@BeginUIEle
  0014c	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00150	04 00 00 00	 DD	 4
  00154	00 00 00 00	 DD	 $LN8@BeginUIEle
$LN8@BeginUIEle:
  00158	70		 DB	 112			; 00000070H
  00159	63		 DB	 99			; 00000063H
  0015a	61		 DB	 97			; 00000061H
  0015b	6e		 DB	 110			; 0000006eH
  0015c	64		 DB	 100			; 00000064H
  0015d	69		 DB	 105			; 00000069H
  0015e	64		 DB	 100			; 00000064H
  0015f	61		 DB	 97			; 00000061H
  00160	74		 DB	 116			; 00000074H
  00161	65		 DB	 101			; 00000065H
  00162	00		 DB	 0
$LN7@BeginUIEle:
  00163	70		 DB	 112			; 00000070H
  00164	72		 DB	 114			; 00000072H
  00165	65		 DB	 101			; 00000065H
  00166	61		 DB	 97			; 00000061H
  00167	64		 DB	 100			; 00000064H
  00168	69		 DB	 105			; 00000069H
  00169	6e		 DB	 110			; 0000006eH
  0016a	67		 DB	 103			; 00000067H
  0016b	00		 DB	 0
?BeginUIElement@CUIElementSink@CTsfUiLessMode@@UAGJKPAH@Z ENDP ; CTsfUiLessMode::CUIElementSink::BeginUIElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -20						; size = 4
tv66 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_cr$ = -4						; size = 4
_this$ = 8						; size = 4
?Release@CUIElementSink@CTsfUiLessMode@@UAGKXZ PROC	; CTsfUiLessMode::CUIElementSink::Release
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2734
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 2735
  0001a	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00020	83 e9 01	 sub	 ecx, 1
  00023	89 4d f0	 mov	 DWORD PTR tv66[ebp], ecx
  00026	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00029	8b 45 f0	 mov	 eax, DWORD PTR tv66[ebp]
  0002c	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR tv66[ebp]
  00032	89 4d fc	 mov	 DWORD PTR _cr$[ebp], ecx
; Line 2737
  00035	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  00038	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0003c	75 28		 jne	 SHORT $LN1@Release
; Line 2739
  0003e	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00041	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00044	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00047	89 4d f8	 mov	 DWORD PTR $T2[ebp], ecx
  0004a	83 7d f8 00	 cmp	 DWORD PTR $T2[ebp], 0
  0004e	74 0f		 je	 SHORT $LN4@Release
  00050	6a 01		 push	 1
  00052	8b 4d f8	 mov	 ecx, DWORD PTR $T2[ebp]
  00055	e8 00 00 00 00	 call	 ??_GCUIElementSink@CTsfUiLessMode@@QAEPAXI@Z
  0005a	89 45 ec	 mov	 DWORD PTR tv73[ebp], eax
  0005d	eb 07		 jmp	 SHORT $LN1@Release
$LN4@Release:
  0005f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN1@Release:
; Line 2742
  00066	8b 45 fc	 mov	 eax, DWORD PTR _cr$[ebp]
; Line 2743
  00069	83 c4 14	 add	 esp, 20			; 00000014H
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?Release@CUIElementSink@CTsfUiLessMode@@UAGKXZ ENDP	; CTsfUiLessMode::CUIElementSink::Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CUIElementSink@CTsfUiLessMode@@UAGKXZ PROC	; CTsfUiLessMode::CUIElementSink::AddRef
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2728
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 2729
  0000b	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00011	83 c1 01	 add	 ecx, 1
  00014	89 4d fc	 mov	 DWORD PTR tv66[ebp], ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  0001d	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00020	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
; Line 2730
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?AddRef@CUIElementSink@CTsfUiLessMode@@UAGKXZ ENDP	; CTsfUiLessMode::CUIElementSink::AddRef
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv135 = -8						; size = 4
tv93 = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppvObj$ = 16						; size = 4
?QueryInterface@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@PAPAX@Z PROC ; CTsfUiLessMode::CUIElementSink::QueryInterface
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2694
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 2695
  00015	83 7d 10 00	 cmp	 DWORD PTR _ppvObj$[ebp], 0
  00019	75 0a		 jne	 SHORT $LN9@QueryInter
; Line 2696
  0001b	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00020	e9 de 00 00 00	 jmp	 $LN10@QueryInter
$LN9@QueryInter:
; Line 2698
  00025	8b 45 10	 mov	 eax, DWORD PTR _ppvObj$[ebp]
  00028	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; Line 2700
  0002e	68 00 00 00 00	 push	 OFFSET _IID_IUnknown
  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _riid$[ebp]
  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 _IsEqualGUID
  0003c	83 c4 08	 add	 esp, 8
  0003f	85 c0		 test	 eax, eax
  00041	74 0d		 je	 SHORT $LN8@QueryInter
; Line 2702
  00043	8b 55 10	 mov	 edx, DWORD PTR _ppvObj$[ebp]
  00046	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00049	89 02		 mov	 DWORD PTR [edx], eax
  0004b	e9 8b 00 00 00	 jmp	 $LN7@QueryInter
$LN8@QueryInter:
; Line 2704
  00050	68 00 00 00 00	 push	 OFFSET __GUID_ea1ea136_19df_11d7_a6d2_00065b84435c
  00055	8b 4d 0c	 mov	 ecx, DWORD PTR _riid$[ebp]
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 _IsEqualGUID
  0005e	83 c4 08	 add	 esp, 8
  00061	85 c0		 test	 eax, eax
  00063	74 0a		 je	 SHORT $LN6@QueryInter
; Line 2706
  00065	8b 55 10	 mov	 edx, DWORD PTR _ppvObj$[ebp]
  00068	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	89 02		 mov	 DWORD PTR [edx], eax
  0006d	eb 6c		 jmp	 SHORT $LN7@QueryInter
$LN6@QueryInter:
; Line 2708
  0006f	68 00 00 00 00	 push	 OFFSET __GUID_71c6e74e_0f28_11d8_a82a_00065b84435c
  00074	8b 4d 0c	 mov	 ecx, DWORD PTR _riid$[ebp]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 _IsEqualGUID
  0007d	83 c4 08	 add	 esp, 8
  00080	85 c0		 test	 eax, eax
  00082	74 22		 je	 SHORT $LN4@QueryInter
; Line 2710
  00084	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  00088	74 0b		 je	 SHORT $LN12@QueryInter
  0008a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0008d	83 c2 04	 add	 edx, 4
  00090	89 55 fc	 mov	 DWORD PTR tv93[ebp], edx
  00093	eb 07		 jmp	 SHORT $LN13@QueryInter
$LN12@QueryInter:
  00095	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv93[ebp], 0
$LN13@QueryInter:
  0009c	8b 45 10	 mov	 eax, DWORD PTR _ppvObj$[ebp]
  0009f	8b 4d fc	 mov	 ecx, DWORD PTR tv93[ebp]
  000a2	89 08		 mov	 DWORD PTR [eax], ecx
  000a4	eb 35		 jmp	 SHORT $LN7@QueryInter
$LN4@QueryInter:
; Line 2712
  000a6	68 00 00 00 00	 push	 OFFSET __GUID_743abd5f_f26d_48df_8cc5_238492419b64
  000ab	8b 55 0c	 mov	 edx, DWORD PTR _riid$[ebp]
  000ae	52		 push	 edx
  000af	e8 00 00 00 00	 call	 _IsEqualGUID
  000b4	83 c4 08	 add	 esp, 8
  000b7	85 c0		 test	 eax, eax
  000b9	74 20		 je	 SHORT $LN7@QueryInter
; Line 2714
  000bb	83 7d 08 00	 cmp	 DWORD PTR _this$[ebp], 0
  000bf	74 0b		 je	 SHORT $LN14@QueryInter
  000c1	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	83 c0 08	 add	 eax, 8
  000c7	89 45 f8	 mov	 DWORD PTR tv135[ebp], eax
  000ca	eb 07		 jmp	 SHORT $LN15@QueryInter
$LN14@QueryInter:
  000cc	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
$LN15@QueryInter:
  000d3	8b 4d 10	 mov	 ecx, DWORD PTR _ppvObj$[ebp]
  000d6	8b 55 f8	 mov	 edx, DWORD PTR tv135[ebp]
  000d9	89 11		 mov	 DWORD PTR [ecx], edx
$LN7@QueryInter:
; Line 2717
  000db	8b 45 10	 mov	 eax, DWORD PTR _ppvObj$[ebp]
  000de	83 38 00	 cmp	 DWORD PTR [eax], 0
  000e1	74 1b		 je	 SHORT $LN1@QueryInter
; Line 2719
  000e3	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e8	8b f4		 mov	 esi, esp
  000ea	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  000ed	50		 push	 eax
  000ee	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000f1	ff d1		 call	 ecx
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2720
  000fa	33 c0		 xor	 eax, eax
  000fc	eb 05		 jmp	 SHORT $LN10@QueryInter
$LN1@QueryInter:
; Line 2723
  000fe	b8 02 40 00 80	 mov	 eax, -2147467262	; 80004002H
$LN10@QueryInter:
; Line 2724
  00103	5e		 pop	 esi
  00104	83 c4 08	 add	 esp, 8
  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 0c 00	 ret	 12			; 0000000cH
?QueryInterface@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@PAPAX@Z ENDP ; CTsfUiLessMode::CUIElementSink::QueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CUIElementSink@CTsfUiLessMode@@QAE@XZ PROC		; CTsfUiLessMode::CUIElementSink::~CUIElementSink
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2690
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ??_7CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@
; Line 2691
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??1CUIElementSink@CTsfUiLessMode@@QAE@XZ ENDP		; CTsfUiLessMode::CUIElementSink::~CUIElementSink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CUIElementSink@CTsfUiLessMode@@QAE@XZ PROC		; CTsfUiLessMode::CUIElementSink::CUIElementSink
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2684
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0ITfUIElementSink@@QAE@XZ
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 04	 add	 ecx, 4
  0001c	e8 00 00 00 00	 call	 ??0ITfInputProcessorProfileActivationSink@@QAE@XZ
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 08	 add	 ecx, 8
  00027	e8 00 00 00 00	 call	 ??0ITfCompartmentEventSink@@QAE@XZ
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_7CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@
  0003f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00042	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET ??_7CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@
; Line 2685
  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1
; Line 2686
  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	83 c4 04	 add	 esp, 4
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
??0CUIElementSink@CTsfUiLessMode@@QAE@XZ ENDP		; CTsfUiLessMode::CUIElementSink::CUIElementSink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SendKeyMsg@@YAJPAUHWND__@@II@Z
_TEXT	SEGMENT
_lRc$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_msg$ = 12						; size = 4
_wp$ = 16						; size = 4
?SendKeyMsg@@YAJPAUHWND__@@II@Z PROC			; SendKeyMsg, COMDAT
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 328
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 329
  0000c	c6 05 00 00 00
	00 01		 mov	 BYTE PTR _bIsSendingKeyMessage, 1
; Line 330
  00013	8b f4		 mov	 esi, esp
  00015	6a 01		 push	 1
  00017	8b 45 10	 mov	 eax, DWORD PTR _wp$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR _msg$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00022	52		 push	 edx
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __SendMessage
  00029	3b f4		 cmp	 esi, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	89 45 fc	 mov	 DWORD PTR _lRc$[ebp], eax
; Line 331
  00033	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _bIsSendingKeyMessage, 0
; Line 332
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _lRc$[ebp]
; Line 333
  0003d	5e		 pop	 esi
  0003e	83 c4 04	 add	 esp, 4
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?SendKeyMsg@@YAJPAUHWND__@@II@Z ENDP			; SendKeyMsg
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dwImeLevel$ = 8					; size = 4
?ImeUi_SetSupportLevel@@YAXK@Z PROC			; ImeUi_SetSupportLevel
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2259
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 2260
  00003	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  0000a	85 c0		 test	 eax, eax
  0000c	75 02		 jne	 SHORT $LN1@ImeUi_SetS
; Line 2261
  0000e	eb 15		 jmp	 SHORT $LN2@ImeUi_SetS
$LN1@ImeUi_SetS:
; Line 2262
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _dwImeLevel$[ebp]
  00013	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwIMELevelSaved, ecx
; Line 2263
  00019	8b 55 08	 mov	 edx, DWORD PTR _dwImeLevel$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?SetSupportLevel@@YAXK@Z ; SetSupportLevel
  00022	83 c4 04	 add	 esp, 4
$LN2@ImeUi_SetS:
; Line 2264
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?ImeUi_SetSupportLevel@@YAXK@Z ENDP			; ImeUi_SetSupportLevel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dwImeLevel$ = 8					; size = 4
?SetSupportLevel@@YAXK@Z PROC				; SetSupportLevel
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2245
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 2246
  00003	83 7d 08 02	 cmp	 DWORD PTR _dwImeLevel$[ebp], 2
  00007	72 06		 jb	 SHORT $LN2@SetSupport
  00009	83 7d 08 03	 cmp	 DWORD PTR _dwImeLevel$[ebp], 3
  0000d	76 02		 jbe	 SHORT $LN3@SetSupport
$LN2@SetSupport:
; Line 2247
  0000f	eb 39		 jmp	 SHORT $LN4@SetSupport
$LN3@SetSupport:
; Line 2248
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hklCurrent
  00016	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0001b	0f b7 c8	 movzx	 ecx, ax
  0001e	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  00024	0f b7 d1	 movzx	 edx, cx
  00027	83 fa 12	 cmp	 edx, 18			; 00000012H
  0002a	75 07		 jne	 SHORT $LN1@SetSupport
; Line 2250
  0002c	c7 45 08 03 00
	00 00		 mov	 DWORD PTR _dwImeLevel$[ebp], 3
$LN1@SetSupport:
; Line 2252
  00033	8b 45 08	 mov	 eax, DWORD PTR _dwImeLevel$[ebp]
  00036	a3 00 00 00 00	 mov	 DWORD PTR _g_dwIMELevel, eax
; Line 2254
  0003b	6a 00		 push	 0
  0003d	e8 00 00 00 00	 call	 ?ImeUi_FinalizeString@@YAX_N@Z ; ImeUi_FinalizeString
  00042	83 c4 04	 add	 esp, 4
; Line 2255
  00045	e8 00 00 00 00	 call	 ?SetCompStringColor@@YAXXZ ; SetCompStringColor
$LN4@SetSupport:
; Line 2256
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?SetSupportLevel@@YAXK@Z ENDP				; SetSupportLevel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv78 = -32						; size = 4
tv73 = -28						; size = 4
_i$1 = -24						; size = 4
_szCodePage$ = -16					; size = 8
__$ArrayPad$ = -4					; size = 4
?CheckInputLocale@@YAXXZ PROC				; CheckInputLocale
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2524
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00012	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00015	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00018	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00021	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; Line 2526
  0002e	8b f4		 mov	 esi, esp
  00030	6a 00		 push	 0
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyboardLayout@4
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	a3 00 00 00 00	 mov	 DWORD PTR _g_hklCurrent, eax
; Line 2527
  00044	a1 00 00 00 00	 mov	 eax, DWORD PTR ?hklPrev@?1??CheckInputLocale@@YAXXZ@4PAUHKL__@@A
  00049	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _g_hklCurrent
  0004f	75 05		 jne	 SHORT $LN15@CheckInput
; Line 2529
  00051	e9 7f 01 00 00	 jmp	 $LN16@CheckInput
$LN15@CheckInput:
; Line 2531
  00056	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hklCurrent
  0005c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?hklPrev@?1??CheckInputLocale@@YAXXZ@4PAUHKL__@@A, ecx
; Line 2532
  00062	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hklCurrent
  00068	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0006e	0f b7 c2	 movzx	 eax, dx
  00071	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  00076	0f b7 c8	 movzx	 ecx, ax
  00079	89 4d e4	 mov	 DWORD PTR tv73[ebp], ecx
  0007c	83 7d e4 04	 cmp	 DWORD PTR tv73[ebp], 4
  00080	74 15		 je	 SHORT $LN12@CheckInput
  00082	83 7d e4 11	 cmp	 DWORD PTR tv73[ebp], 17	; 00000011H
  00086	0f 84 9a 00 00
	00		 je	 $LN5@CheckInput
  0008c	83 7d e4 12	 cmp	 DWORD PTR tv73[ebp], 18	; 00000012H
  00090	74 77		 je	 SHORT $LN6@CheckInput
  00092	e9 ab 00 00 00	 jmp	 $LN4@CheckInput
$LN12@CheckInput:
; Line 2536
  00097	c6 05 00 00 00
	00 01		 mov	 BYTE PTR _g_bVerticalCand, 1
; Line 2537
  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hklCurrent
  000a4	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  000aa	0f b7 c2	 movzx	 eax, dx
  000ad	c1 f8 0a	 sar	 eax, 10			; 0000000aH
  000b0	89 45 e0	 mov	 DWORD PTR tv78[ebp], eax
  000b3	83 7d e0 01	 cmp	 DWORD PTR tv78[ebp], 1
  000b7	74 25		 je	 SHORT $LN8@CheckInput
  000b9	83 7d e0 02	 cmp	 DWORD PTR tv78[ebp], 2
  000bd	74 02		 je	 SHORT $LN9@CheckInput
  000bf	eb 32		 jmp	 SHORT $LN7@CheckInput
$LN9@CheckInput:
; Line 2540
  000c1	b9 04 00 00 00	 mov	 ecx, 4
  000c6	c1 e1 00	 shl	 ecx, 0
  000c9	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _g_aszIndicator[ecx]
  000cf	89 15 00 00 00
	00		 mov	 DWORD PTR _g_pszIndicatior, edx
; Line 2542
  000d5	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _g_bVerticalCand, 0
; Line 2543
  000dc	eb 29		 jmp	 SHORT $LN10@CheckInput
$LN8@CheckInput:
; Line 2545
  000de	b8 04 00 00 00	 mov	 eax, 4
  000e3	d1 e0		 shl	 eax, 1
  000e5	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _g_aszIndicator[eax]
  000eb	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_pszIndicatior, ecx
; Line 2546
  000f1	eb 14		 jmp	 SHORT $LN10@CheckInput
$LN7@CheckInput:
; Line 2548
  000f3	ba 04 00 00 00	 mov	 edx, 4
  000f8	6b c2 00	 imul	 eax, edx, 0
  000fb	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _g_aszIndicator[eax]
  00101	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_pszIndicatior, ecx
$LN10@CheckInput:
; Line 2551
  00107	eb 4c		 jmp	 SHORT $LN13@CheckInput
$LN6@CheckInput:
; Line 2554
  00109	ba 04 00 00 00	 mov	 edx, 4
  0010e	6b c2 03	 imul	 eax, edx, 3
  00111	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _g_aszIndicator[eax]
  00117	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_pszIndicatior, ecx
; Line 2555
  0011d	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _g_bVerticalCand, 0
; Line 2556
  00124	eb 2f		 jmp	 SHORT $LN13@CheckInput
$LN5@CheckInput:
; Line 2559
  00126	ba 04 00 00 00	 mov	 edx, 4
  0012b	c1 e2 02	 shl	 edx, 2
  0012e	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _g_aszIndicator[edx]
  00134	a3 00 00 00 00	 mov	 DWORD PTR _g_pszIndicatior, eax
; Line 2560
  00139	c6 05 00 00 00
	00 01		 mov	 BYTE PTR _g_bVerticalCand, 1
; Line 2561
  00140	eb 13		 jmp	 SHORT $LN13@CheckInput
$LN4@CheckInput:
; Line 2563
  00142	b9 04 00 00 00	 mov	 ecx, 4
  00147	6b d1 00	 imul	 edx, ecx, 0
  0014a	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _g_aszIndicator[edx]
  00150	a3 00 00 00 00	 mov	 DWORD PTR _g_pszIndicatior, eax
$LN13@CheckInput:
; Line 2567
  00155	8b f4		 mov	 esi, esp
  00157	6a 08		 push	 8
  00159	8d 4d f0	 lea	 ecx, DWORD PTR _szCodePage$[ebp]
  0015c	51		 push	 ecx
  0015d	68 04 10 00 00	 push	 4100			; 00001004H
  00162	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hklCurrent
  00168	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0016e	0f b7 c2	 movzx	 eax, dx
  00171	50		 push	 eax
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  00178	3b f4		 cmp	 esi, esp
  0017a	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2568
  0017f	6a 00		 push	 0
  00181	6a 00		 push	 0
  00183	8d 4d f0	 lea	 ecx, DWORD PTR _szCodePage$[ebp]
  00186	51		 push	 ecx
  00187	e8 00 00 00 00	 call	 ?_strtoul@@YAKPBDPAPA_WH@Z ; _strtoul
  0018c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018f	a3 00 00 00 00	 mov	 DWORD PTR _g_uCodePage, eax
; Line 2569
  00194	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0019b	eb 09		 jmp	 SHORT $LN3@CheckInput
$LN2@CheckInput:
  0019d	8b 55 e8	 mov	 edx, DWORD PTR _i$1[ebp]
  001a0	83 c2 01	 add	 edx, 1
  001a3	89 55 e8	 mov	 DWORD PTR _i$1[ebp], edx
$LN3@CheckInput:
  001a6	81 7d e8 00 01
	00 00		 cmp	 DWORD PTR _i$1[ebp], 256 ; 00000100H
  001ad	7d 26		 jge	 SHORT $LN16@CheckInput
; Line 2571
  001af	8b f4		 mov	 esi, esp
  001b1	0f b6 45 e8	 movzx	 eax, BYTE PTR _i$1[ebp]
  001b5	50		 push	 eax
  001b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_uCodePage
  001bc	51		 push	 ecx
  001bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IsDBCSLeadByteEx@8
  001c3	3b f4		 cmp	 esi, esp
  001c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ca	8b 55 e8	 mov	 edx, DWORD PTR _i$1[ebp]
  001cd	88 82 00 00 00
	00		 mov	 BYTE PTR _LeadByteTable[edx], al
; Line 2572
  001d3	eb c8		 jmp	 SHORT $LN2@CheckInput
$LN16@CheckInput:
; Line 2573
  001d5	52		 push	 edx
  001d6	8b cd		 mov	 ecx, ebp
  001d8	50		 push	 eax
  001d9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN20@CheckInput
  001df	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001e4	58		 pop	 eax
  001e5	5a		 pop	 edx
  001e6	5e		 pop	 esi
  001e7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ea	33 cd		 xor	 ecx, ebp
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	83 c4 20	 add	 esp, 32			; 00000020H
  001f4	3b ec		 cmp	 ebp, esp
  001f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001fb	8b e5		 mov	 esp, ebp
  001fd	5d		 pop	 ebp
  001fe	c3		 ret	 0
  001ff	90		 npad	 1
$LN20@CheckInput:
  00200	01 00 00 00	 DD	 1
  00204	00 00 00 00	 DD	 $LN19@CheckInput
$LN19@CheckInput:
  00208	f0 ff ff ff	 DD	 -16			; fffffff0H
  0020c	08 00 00 00	 DD	 8
  00210	00 00 00 00	 DD	 $LN18@CheckInput
$LN18@CheckInput:
  00214	73		 DB	 115			; 00000073H
  00215	7a		 DB	 122			; 0000007aH
  00216	43		 DB	 67			; 00000043H
  00217	6f		 DB	 111			; 0000006fH
  00218	64		 DB	 100			; 00000064H
  00219	65		 DB	 101			; 00000065H
  0021a	50		 DB	 80			; 00000050H
  0021b	61		 DB	 97			; 00000061H
  0021c	67		 DB	 103			; 00000067H
  0021d	65		 DB	 101			; 00000065H
  0021e	00		 DB	 0
?CheckInputLocale@@YAXXZ ENDP				; CheckInputLocale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_himc$1 = -288						; size = 4
_hIme$ = -284						; size = 4
_kl$ = -280						; size = 4
_szImeFile$ = -272					; size = 261
__$ArrayPad$ = -4					; size = 4
?SetImeApi@@YAXXZ PROC					; SetImeApi
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2497
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd e0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-288]
  00011	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; Line 2498
  00027	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA, 0 ; _GetReadingString
; Line 2499
  00031	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?_ShowReadingWindow@@3P6GHPAUHIMC__@@H@ZA, 0 ; _ShowReadingWindow
; Line 2500
  0003b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bUILessMode
  00042	85 c0		 test	 eax, eax
  00044	74 05		 je	 SHORT $LN5@SetImeApi
; Line 2501
  00046	e9 ed 00 00 00	 jmp	 $LN6@SetImeApi
$LN5@SetImeApi:
; Line 2504
  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hklCurrent
  00051	89 8d e8 fe ff
	ff		 mov	 DWORD PTR _kl$[ebp], ecx
; Line 2505
  00057	68 04 01 00 00	 push	 260			; 00000104H
  0005c	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _szImeFile$[ebp]
  00062	52		 push	 edx
  00063	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _kl$[ebp]
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _ImmGetIMEFileNameA@12
  0006f	85 c0		 test	 eax, eax
  00071	77 05		 ja	 SHORT $LN4@SetImeApi
; Line 2506
  00073	e9 c0 00 00 00	 jmp	 $LN6@SetImeApi
$LN4@SetImeApi:
; Line 2507
  00078	8b f4		 mov	 esi, esp
  0007a	68 00 08 00 00	 push	 2048			; 00000800H
  0007f	6a 00		 push	 0
  00081	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _szImeFile$[ebp]
  00087	51		 push	 ecx
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryExA@12
  0008e	3b f4		 cmp	 esi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _hIme$[ebp], eax
; Line 2508
  0009b	83 bd e4 fe ff
	ff 00		 cmp	 DWORD PTR _hIme$[ebp], 0
  000a2	75 05		 jne	 SHORT $LN3@SetImeApi
; Line 2509
  000a4	e9 8f 00 00 00	 jmp	 $LN6@SetImeApi
$LN3@SetImeApi:
; Line 2510
  000a9	8b f4		 mov	 esi, esp
  000ab	68 00 00 00 00	 push	 OFFSET $SG154210
  000b0	8b 95 e4 fe ff
	ff		 mov	 edx, DWORD PTR _hIme$[ebp]
  000b6	52		 push	 edx
  000b7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  000bd	3b f4		 cmp	 esi, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	a3 00 00 00 00	 mov	 DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA, eax ; _GetReadingString
; Line 2511
  000c9	8b f4		 mov	 esi, esp
  000cb	68 00 00 00 00	 push	 OFFSET $SG154214
  000d0	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _hIme$[ebp]
  000d6	50		 push	 eax
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  000dd	3b f4		 cmp	 esi, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e4	a3 00 00 00 00	 mov	 DWORD PTR ?_ShowReadingWindow@@3P6GHPAUHIMC__@@H@ZA, eax ; _ShowReadingWindow
; Line 2512
  000e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?_ShowReadingWindow@@3P6GHPAUHIMC__@@H@ZA, 0 ; _ShowReadingWindow
  000f0	74 46		 je	 SHORT $LN6@SetImeApi
; Line 2514
  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hwndCurr
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 _ImmGetContext@4
  000fe	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _himc$1[ebp], eax
; Line 2515
  00104	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR _himc$1[ebp], 0
  0010b	74 2b		 je	 SHORT $LN6@SetImeApi
; Line 2517
  0010d	8b f4		 mov	 esi, esp
  0010f	6a 00		 push	 0
  00111	8b 95 e0 fe ff
	ff		 mov	 edx, DWORD PTR _himc$1[ebp]
  00117	52		 push	 edx
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR ?_ShowReadingWindow@@3P6GHPAUHIMC__@@H@ZA ; _ShowReadingWindow
  0011e	3b f4		 cmp	 esi, esp
  00120	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2518
  00125	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR _himc$1[ebp]
  0012b	50		 push	 eax
  0012c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hwndCurr
  00132	51		 push	 ecx
  00133	e8 00 00 00 00	 call	 _ImmReleaseContext@8
$LN6@SetImeApi:
; Line 2521
  00138	52		 push	 edx
  00139	8b cd		 mov	 ecx, ebp
  0013b	50		 push	 eax
  0013c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@SetImeApi
  00142	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00147	58		 pop	 eax
  00148	5a		 pop	 edx
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014e	33 cd		 xor	 ecx, ebp
  00150	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00155	81 c4 20 01 00
	00		 add	 esp, 288		; 00000120H
  0015b	3b ec		 cmp	 ebp, esp
  0015d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00162	8b e5		 mov	 esp, ebp
  00164	5d		 pop	 ebp
  00165	c3		 ret	 0
  00166	8b ff		 npad	 2
$LN10@SetImeApi:
  00168	01 00 00 00	 DD	 1
  0016c	00 00 00 00	 DD	 $LN9@SetImeApi
$LN9@SetImeApi:
  00170	f0 fe ff ff	 DD	 -272			; fffffef0H
  00174	05 01 00 00	 DD	 261			; 00000105H
  00178	00 00 00 00	 DD	 $LN8@SetImeApi
$LN8@SetImeApi:
  0017c	73		 DB	 115			; 00000073H
  0017d	7a		 DB	 122			; 0000007aH
  0017e	49		 DB	 73			; 00000049H
  0017f	6d		 DB	 109			; 0000006dH
  00180	65		 DB	 101			; 00000065H
  00181	46		 DB	 70			; 00000046H
  00182	69		 DB	 105			; 00000069H
  00183	6c		 DB	 108			; 0000006cH
  00184	65		 DB	 101			; 00000065H
  00185	00		 DB	 0
?SetImeApi@@YAXXZ ENDP					; SetImeApi
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv84 = -12						; size = 4
_hwndImeDef$ = -8					; size = 4
_uLang$ = -4						; size = 4
?OnInputLangChange@@YAXXZ PROC				; OnInputLangChange
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2477
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 2478
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hklCurrent
  00021	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00026	0f b7 c8	 movzx	 ecx, ax
  00029	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  0002f	0f b7 d1	 movzx	 edx, cx
  00032	89 55 fc	 mov	 DWORD PTR _uLang$[ebp], edx
; Line 2479
  00035	e8 00 00 00 00	 call	 ?CheckToggleState@@YAXXZ ; CheckToggleState
; Line 2480
  0003a	e8 00 00 00 00	 call	 ?OnInputLangChangeWorker@@YAXXZ ; OnInputLangChangeWorker
; Line 2481
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hklCurrent
  00044	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00049	0f b7 c8	 movzx	 ecx, ax
  0004c	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  00052	0f b7 d1	 movzx	 edx, cx
  00055	39 55 fc	 cmp	 DWORD PTR _uLang$[ebp], edx
  00058	74 38		 je	 SHORT $LN2@OnInputLan
; Line 2485
  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hklCurrent
  0005f	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00064	0f b7 c8	 movzx	 ecx, ax
  00067	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  0006d	0f b7 d1	 movzx	 edx, cx
  00070	83 fa 12	 cmp	 edx, 18			; 00000012H
  00073	75 09		 jne	 SHORT $LN5@OnInputLan
  00075	c7 45 f4 03 00
	00 00		 mov	 DWORD PTR tv84[ebp], 3
  0007c	eb 08		 jmp	 SHORT $LN6@OnInputLan
$LN5@OnInputLan:
  0007e	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwIMELevelSaved
  00083	89 45 f4	 mov	 DWORD PTR tv84[ebp], eax
$LN6@OnInputLan:
  00086	8b 4d f4	 mov	 ecx, DWORD PTR tv84[ebp]
  00089	51		 push	 ecx
  0008a	e8 00 00 00 00	 call	 ?SetSupportLevel@@YAXK@Z ; SetSupportLevel
  0008f	83 c4 04	 add	 esp, 4
$LN2@OnInputLan:
; Line 2487
  00092	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndCurr
  00098	52		 push	 edx
  00099	e8 00 00 00 00	 call	 _ImmGetDefaultIMEWnd@4
  0009e	89 45 f8	 mov	 DWORD PTR _hwndImeDef$[ebp], eax
; Line 2488
  000a1	83 7d f8 00	 cmp	 DWORD PTR _hwndImeDef$[ebp], 0
  000a5	74 38		 je	 SHORT $LN3@OnInputLan
; Line 2491
  000a7	8b f4		 mov	 esi, esp
  000a9	6a 00		 push	 0
  000ab	6a 22		 push	 34			; 00000022H
  000ad	68 83 02 00 00	 push	 643			; 00000283H
  000b2	8b 45 f8	 mov	 eax, DWORD PTR _hwndImeDef$[ebp]
  000b5	50		 push	 eax
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  000bc	3b f4		 cmp	 esi, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2492
  000c3	8b f4		 mov	 esi, esp
  000c5	6a 00		 push	 0
  000c7	6a 21		 push	 33			; 00000021H
  000c9	68 83 02 00 00	 push	 643			; 00000283H
  000ce	8b 4d f8	 mov	 ecx, DWORD PTR _hwndImeDef$[ebp]
  000d1	51		 push	 ecx
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  000d8	3b f4		 cmp	 esi, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@OnInputLan:
; Line 2494
  000df	5e		 pop	 esi
  000e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e3	3b ec		 cmp	 ebp, esp
  000e5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c3		 ret	 0
?OnInputLangChange@@YAXXZ ENDP				; OnInputLangChange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -4						; size = 4
?OnInputLangChangeWorker@@YAXXZ PROC			; OnInputLangChangeWorker
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2468
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 2469
  0000b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bUILessMode
  00012	85 c0		 test	 eax, eax
  00014	75 25		 jne	 SHORT $LN1@OnInputLan
; Line 2471
  00016	81 3d 00 00 00
	00 04 04 06 e0	 cmp	 DWORD PTR _g_hklCurrent, -536476668 ; e0060404H
  00020	75 09		 jne	 SHORT $LN4@OnInputLan
  00022	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
  00029	eb 07		 jmp	 SHORT $LN5@OnInputLan
$LN4@OnInputLan:
  0002b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
$LN5@OnInputLan:
  00032	8b 4d fc	 mov	 ecx, DWORD PTR tv67[ebp]
  00035	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_iCandListIndexBase, ecx
$LN1@OnInputLan:
; Line 2473
  0003b	e8 00 00 00 00	 call	 ?SetImeApi@@YAXXZ	; SetImeApi
; Line 2474
  00040	83 c4 04	 add	 esp, 4
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?OnInputLangChangeWorker@@YAXXZ ENDP			; OnInputLangChangeWorker
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -336						; size = 4
tv67 = -332						; size = 4
_dwType$1 = -324					; size = 4
_dwMapping$2 = -312					; size = 4
_dwSize$3 = -300					; size = 4
_lRc$4 = -292						; size = 4
_dwVer$5 = -288						; size = 4
_hkey$6 = -280						; size = 4
_szRegPath$7 = -268					; size = 260
__$ArrayPad$ = -4					; size = 4
_dwId$ = 8						; size = 4
?GetReadingWindowOrientation@@YAXK@Z PROC		; GetReadingWindowOrientation
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2371
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd b0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-336]
  00011	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; Line 2372
  00027	81 3d 00 00 00
	00 04 08 0e e0	 cmp	 DWORD PTR _g_hklCurrent, -535951356 ; e00e0804H
  00031	74 1e		 je	 SHORT $LN10@GetReading
  00033	81 3d 00 00 00
	00 04 04 09 e0	 cmp	 DWORD PTR _g_hklCurrent, -536280060 ; e0090404H
  0003d	74 12		 je	 SHORT $LN10@GetReading
  0003f	83 7d 08 00	 cmp	 DWORD PTR _dwId$[ebp], 0
  00043	74 0c		 je	 SHORT $LN10@GetReading
  00045	c7 85 b4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv67[ebp], 0
  0004f	eb 0a		 jmp	 SHORT $LN11@GetReading
$LN10@GetReading:
  00051	c7 85 b4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv67[ebp], 1
$LN11@GetReading:
  0005b	8a 85 b4 fe ff
	ff		 mov	 al, BYTE PTR tv67[ebp]
  00061	a2 00 00 00 00	 mov	 BYTE PTR _g_bHorizontalReading, al
; Line 2373
  00066	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bHorizontalReading
  0006d	85 c9		 test	 ecx, ecx
  0006f	0f 85 85 01 00
	00		 jne	 $LN8@GetReading
  00075	8b 55 08	 mov	 edx, DWORD PTR _dwId$[ebp]
  00078	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0007e	81 fa 04 04 00
	00		 cmp	 edx, 1028		; 00000404H
  00084	0f 85 70 01 00
	00		 jne	 $LN8@GetReading
; Line 2377
  0008a	8b 45 08	 mov	 eax, DWORD PTR _dwId$[ebp]
  0008d	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  00092	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _dwVer$5[ebp], eax
; Line 2378
  00098	8b f4		 mov	 esi, esp
  0009a	68 00 00 00 00	 push	 OFFSET $SG154105
  0009f	68 04 01 00 00	 push	 260			; 00000104H
  000a4	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _szRegPath$7[ebp]
  000aa	51		 push	 ecx
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strcpy_s
  000b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b4	3b f4		 cmp	 esi, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2379
  000bb	81 bd e0 fe ff
	ff 00 00 01 05	 cmp	 DWORD PTR _dwVer$5[ebp], 83951616 ; 05010000H
  000c5	72 0c		 jb	 SHORT $LN12@GetReading
  000c7	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv79[ebp], OFFSET $SG154109
  000d1	eb 0a		 jmp	 SHORT $LN13@GetReading
$LN12@GetReading:
  000d3	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv79[ebp], OFFSET $SG154110
$LN13@GetReading:
  000dd	8b f4		 mov	 esi, esp
  000df	8b 95 b0 fe ff
	ff		 mov	 edx, DWORD PTR tv79[ebp]
  000e5	52		 push	 edx
  000e6	68 04 01 00 00	 push	 260			; 00000104H
  000eb	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _szRegPath$7[ebp]
  000f1	50		 push	 eax
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strcat_s
  000f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fb	3b f4		 cmp	 esi, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2380
  00102	8b f4		 mov	 esi, esp
  00104	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _hkey$6[ebp]
  0010a	51		 push	 ecx
  0010b	68 19 00 02 00	 push	 131097			; 00020019H
  00110	6a 00		 push	 0
  00112	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _szRegPath$7[ebp]
  00118	52		 push	 edx
  00119	68 01 00 00 80	 push	 -2147483647		; 80000001H
  0011e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  00124	3b f4		 cmp	 esi, esp
  00126	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012b	89 85 dc fe ff
	ff		 mov	 DWORD PTR _lRc$4[ebp], eax
; Line 2381
  00131	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _lRc$4[ebp], 0
  00138	0f 85 bc 00 00
	00		 jne	 $LN8@GetReading
; Line 2383
  0013e	c7 85 d4 fe ff
	ff 04 00 00 00	 mov	 DWORD PTR _dwSize$3[ebp], 4
; Line 2384
  00148	8b f4		 mov	 esi, esp
  0014a	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _dwSize$3[ebp]
  00150	50		 push	 eax
  00151	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _dwMapping$2[ebp]
  00157	51		 push	 ecx
  00158	8d 95 bc fe ff
	ff		 lea	 edx, DWORD PTR _dwType$1[ebp]
  0015e	52		 push	 edx
  0015f	6a 00		 push	 0
  00161	68 00 00 00 00	 push	 OFFSET $SG154121
  00166	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _hkey$6[ebp]
  0016c	50		 push	 eax
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  00173	3b f4		 cmp	 esi, esp
  00175	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017a	89 85 dc fe ff
	ff		 mov	 DWORD PTR _lRc$4[ebp], eax
; Line 2385
  00180	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR _lRc$4[ebp], 0
  00187	75 5b		 jne	 SHORT $LN5@GetReading
; Line 2394
  00189	81 bd e0 fe ff
	ff 00 00 00 05	 cmp	 DWORD PTR _dwVer$5[ebp], 83886080 ; 05000000H
  00193	77 18		 ja	 SHORT $LN2@GetReading
  00195	0f b6 8d c8 fe
	ff ff		 movzx	 ecx, BYTE PTR _dwMapping$2[ebp]
  0019c	83 f9 22	 cmp	 ecx, 34			; 00000022H
  0019f	74 3c		 je	 SHORT $LN3@GetReading
  001a1	0f b6 95 c8 fe
	ff ff		 movzx	 edx, BYTE PTR _dwMapping$2[ebp]
  001a8	83 fa 23	 cmp	 edx, 35			; 00000023H
  001ab	74 30		 je	 SHORT $LN3@GetReading
$LN2@GetReading:
  001ad	81 bd e0 fe ff
	ff 00 00 01 05	 cmp	 DWORD PTR _dwVer$5[ebp], 83951616 ; 05010000H
  001b7	74 0c		 je	 SHORT $LN1@GetReading
  001b9	81 bd e0 fe ff
	ff 00 00 02 05	 cmp	 DWORD PTR _dwVer$5[ebp], 84017152 ; 05020000H
  001c3	75 1f		 jne	 SHORT $LN5@GetReading
$LN1@GetReading:
  001c5	0f b6 85 c8 fe
	ff ff		 movzx	 eax, BYTE PTR _dwMapping$2[ebp]
  001cc	83 f8 22	 cmp	 eax, 34			; 00000022H
  001cf	7c 13		 jl	 SHORT $LN5@GetReading
  001d1	0f b6 8d c8 fe
	ff ff		 movzx	 ecx, BYTE PTR _dwMapping$2[ebp]
  001d8	83 f9 24	 cmp	 ecx, 36			; 00000024H
  001db	7f 07		 jg	 SHORT $LN5@GetReading
$LN3@GetReading:
; Line 2396
  001dd	c6 05 00 00 00
	00 01		 mov	 BYTE PTR _g_bHorizontalReading, 1
$LN5@GetReading:
; Line 2399
  001e4	8b f4		 mov	 esi, esp
  001e6	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _hkey$6[ebp]
  001ec	52		 push	 edx
  001ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
  001f3	3b f4		 cmp	 esi, esp
  001f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN8@GetReading:
; Line 2402
  001fa	52		 push	 edx
  001fb	8b cd		 mov	 ecx, ebp
  001fd	50		 push	 eax
  001fe	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN20@GetReading
  00204	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00209	58		 pop	 eax
  0020a	5a		 pop	 edx
  0020b	5f		 pop	 edi
  0020c	5e		 pop	 esi
  0020d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00210	33 cd		 xor	 ecx, ebp
  00212	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00217	81 c4 50 01 00
	00		 add	 esp, 336		; 00000150H
  0021d	3b ec		 cmp	 ebp, esp
  0021f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00224	8b e5		 mov	 esp, ebp
  00226	5d		 pop	 ebp
  00227	c3		 ret	 0
$LN20@GetReading:
  00228	05 00 00 00	 DD	 5
  0022c	00 00 00 00	 DD	 $LN19@GetReading
$LN19@GetReading:
  00230	f4 fe ff ff	 DD	 -268			; fffffef4H
  00234	04 01 00 00	 DD	 260			; 00000104H
  00238	00 00 00 00	 DD	 $LN14@GetReading
  0023c	e8 fe ff ff	 DD	 -280			; fffffee8H
  00240	04 00 00 00	 DD	 4
  00244	00 00 00 00	 DD	 $LN15@GetReading
  00248	d4 fe ff ff	 DD	 -300			; fffffed4H
  0024c	04 00 00 00	 DD	 4
  00250	00 00 00 00	 DD	 $LN16@GetReading
  00254	c8 fe ff ff	 DD	 -312			; fffffec8H
  00258	04 00 00 00	 DD	 4
  0025c	00 00 00 00	 DD	 $LN17@GetReading
  00260	bc fe ff ff	 DD	 -324			; fffffebcH
  00264	04 00 00 00	 DD	 4
  00268	00 00 00 00	 DD	 $LN18@GetReading
$LN18@GetReading:
  0026c	64		 DB	 100			; 00000064H
  0026d	77		 DB	 119			; 00000077H
  0026e	54		 DB	 84			; 00000054H
  0026f	79		 DB	 121			; 00000079H
  00270	70		 DB	 112			; 00000070H
  00271	65		 DB	 101			; 00000065H
  00272	00		 DB	 0
$LN17@GetReading:
  00273	64		 DB	 100			; 00000064H
  00274	77		 DB	 119			; 00000077H
  00275	4d		 DB	 77			; 0000004dH
  00276	61		 DB	 97			; 00000061H
  00277	70		 DB	 112			; 00000070H
  00278	70		 DB	 112			; 00000070H
  00279	69		 DB	 105			; 00000069H
  0027a	6e		 DB	 110			; 0000006eH
  0027b	67		 DB	 103			; 00000067H
  0027c	00		 DB	 0
$LN16@GetReading:
  0027d	64		 DB	 100			; 00000064H
  0027e	77		 DB	 119			; 00000077H
  0027f	53		 DB	 83			; 00000053H
  00280	69		 DB	 105			; 00000069H
  00281	7a		 DB	 122			; 0000007aH
  00282	65		 DB	 101			; 00000065H
  00283	00		 DB	 0
$LN15@GetReading:
  00284	68		 DB	 104			; 00000068H
  00285	6b		 DB	 107			; 0000006bH
  00286	65		 DB	 101			; 00000065H
  00287	79		 DB	 121			; 00000079H
  00288	00		 DB	 0
$LN14@GetReading:
  00289	73		 DB	 115			; 00000073H
  0028a	7a		 DB	 122			; 0000007aH
  0028b	52		 DB	 82			; 00000052H
  0028c	65		 DB	 101			; 00000065H
  0028d	67		 DB	 103			; 00000067H
  0028e	50		 DB	 80			; 00000050H
  0028f	61		 DB	 97			; 00000061H
  00290	74		 DB	 116			; 00000074H
  00291	68		 DB	 104			; 00000068H
  00292	00		 DB	 0
?GetReadingWindowOrientation@@YAXK@Z ENDP		; GetReadingWindowOrientation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv301 = -196						; size = 4
tv493 = -190						; size = 2
tv490 = -188						; size = 4
tv487 = -184						; size = 4
tv242 = -180						; size = 4
tv177 = -176						; size = 4
tv77 = -172						; size = 4
tv335 = -166						; size = 2
tv332 = -164						; size = 4
tv329 = -160						; size = 4
tv69 = -156						; size = 4
$T1 = -152						; size = 4
$T2 = -148						; size = 4
$T3 = -144						; size = 4
_y$4 = -140						; size = 4
_x$5 = -136						; size = 4
_bWrite$6 = -129					; size = 1
_cSave$7 = -128						; size = 2
_szChar$8 = -120					; size = 6
_bgColor$9 = -108					; size = 4
_bgXnext$ = -100					; size = 4
_dwCompLineStart$ = -92					; size = 4
_pszCurrentCompLine$ = -88				; size = 4
_cType$ = -84						; size = 4
_saveCandPos$ = -77					; size = 1
_temp$10 = -76						; size = 2
_hCompChar$ = -68					; size = 4
_wCompChar$ = -56					; size = 4
_pszMlcs$ = -48						; size = 4
_candY$ = -44						; size = 4
_candX$ = -40						; size = 4
_bgY$ = -36						; size = 4
_bgX$ = -32						; size = 4
_len$ = -28						; size = 4
_uDummy$ = -20						; size = 4
_i$ = -12						; size = 4
_uCurrentTime$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_bDrawCompAttr$ = 8					; size = 1
?DrawCompositionString@@YAX_N@Z PROC			; DrawCompositionString
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 754
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00011	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; Line 756
  00027	8b f4		 mov	 esi, esp
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0002f	3b f4		 cmp	 esi, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	89 45 f8	 mov	 DWORD PTR _uCurrentTime$[ebp], eax
; Line 757
  00039	8b 45 f8	 mov	 eax, DWORD PTR _uCurrentTime$[ebp]
  0003c	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR _g_uCaretBlinkLast
  00042	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _g_uCaretBlinkTime
  00048	76 35		 jbe	 SHORT $LN39@DrawCompos
; Line 759
  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _uCurrentTime$[ebp]
  0004d	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_uCaretBlinkLast, ecx
; Line 760
  00053	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _g_bCaretDraw
  0005a	85 d2		 test	 edx, edx
  0005c	75 0c		 jne	 SHORT $LN42@DrawCompos
  0005e	c7 85 64 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv69[ebp], 1
  00068	eb 0a		 jmp	 SHORT $LN43@DrawCompos
$LN42@DrawCompos:
  0006a	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], 0
$LN43@DrawCompos:
  00074	8a 85 64 ff ff
	ff		 mov	 al, BYTE PTR tv69[ebp]
  0007a	a2 00 00 00 00	 mov	 BYTE PTR _g_bCaretDraw, al
$LN39@DrawCompos:
; Line 763
  0007f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
; Line 765
  00086	8b f4		 mov	 esi, esp
  00088	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+12
  0008e	51		 push	 ecx
  0008f	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+8
  00095	8b 02		 mov	 eax, DWORD PTR [edx]
  00097	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  0009d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a0	ff d2		 call	 edx
  000a2	3b f4		 cmp	 esi, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 769
  000a9	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv329[ebp], OFFSET _g_szCompositionString
  000b3	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv329[ebp]
  000b9	83 c0 02	 add	 eax, 2
  000bc	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv332[ebp], eax
$LL52@DrawCompos:
  000c2	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR tv329[ebp]
  000c8	66 8b 11	 mov	 dx, WORD PTR [ecx]
  000cb	66 89 95 5a ff
	ff ff		 mov	 WORD PTR tv335[ebp], dx
  000d2	83 85 60 ff ff
	ff 02		 add	 DWORD PTR tv329[ebp], 2
  000d9	66 83 bd 5a ff
	ff ff 00	 cmp	 WORD PTR tv335[ebp], 0
  000e1	75 df		 jne	 SHORT $LL52@DrawCompos
  000e3	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv329[ebp]
  000e9	2b 85 5c ff ff
	ff		 sub	 eax, DWORD PTR tv332[ebp]
  000ef	d1 f8		 sar	 eax, 1
  000f1	89 85 54 ff ff
	ff		 mov	 DWORD PTR tv77[ebp], eax
  000f7	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR tv77[ebp]
  000fd	89 4d e4	 mov	 DWORD PTR _len$[ebp], ecx
; Line 771
  00100	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo
  00106	89 55 e0	 mov	 DWORD PTR _bgX$[ebp], edx
; Line 772
  00109	a1 04 00 00 00	 mov	 eax, DWORD PTR _g_CaretInfo+4
  0010e	89 45 dc	 mov	 DWORD PTR _bgY$[ebp], eax
; Line 773
  00111	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _g_dwCaretX, -1
; Line 774
  0011b	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _g_dwCaretY, -1
; Line 775
  00125	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _candX$[ebp], -1
; Line 776
  0012c	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _candY$[ebp], 0
; Line 777
  00133	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _pszMlcs$[ebp], OFFSET _g_szMultiLineCompString
; Line 779
  0013a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _wCompChar$[ebp], 0
; Line 780
  00141	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _hCompChar$[ebp], 0
; Line 781
  00148	8b f4		 mov	 esi, esp
  0014a	8d 4d bc	 lea	 ecx, DWORD PTR _hCompChar$[ebp]
  0014d	51		 push	 ecx
  0014e	8d 55 ec	 lea	 edx, DWORD PTR _uDummy$[ebp]
  00151	52		 push	 edx
  00152	68 00 00 00 00	 push	 OFFSET $SG153077
  00157	a1 08 00 00 00	 mov	 eax, DWORD PTR _g_CaretInfo+8
  0015c	8b 10		 mov	 edx, DWORD PTR [eax]
  0015e	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00164	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00167	ff d0		 call	 eax
  00169	3b f4		 cmp	 esi, esp
  0016b	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 782
  00170	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _g_dwIMELevel, 3
  00177	0f 85 a8 00 00
	00		 jne	 $LN38@DrawCompos
  0017d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_IMECursorBytes, 0
  00184	0f 84 9b 00 00
	00		 je	 $LN38@DrawCompos
  0018a	b9 02 00 00 00	 mov	 ecx, 2
  0018f	6b d1 00	 imul	 edx, ecx, 0
  00192	0f b7 82 00 00
	00 00		 movzx	 eax, WORD PTR _g_szCompositionString[edx]
  00199	85 c0		 test	 eax, eax
  0019b	0f 84 84 00 00
	00		 je	 $LN38@DrawCompos
; Line 785
  001a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_IMECursorBytes
  001a7	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _g_szCompositionString[ecx*2]
  001af	66 89 55 b4	 mov	 WORD PTR _temp$10[ebp], dx
; Line 786
  001b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_IMECursorBytes
  001b8	d1 e0		 shl	 eax, 1
  001ba	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  001c0	81 bd 70 ff ff
	ff 00 02 00 00	 cmp	 DWORD PTR $T3[ebp], 512	; 00000200H
  001ca	73 02		 jae	 SHORT $LN44@DrawCompos
  001cc	eb 05		 jmp	 SHORT $LN45@DrawCompos
$LN44@DrawCompos:
  001ce	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN45@DrawCompos:
  001d3	33 c9		 xor	 ecx, ecx
  001d5	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR $T3[ebp]
  001db	66 89 8a 00 00
	00 00		 mov	 WORD PTR _g_szCompositionString[edx], cx
; Line 787
  001e2	8b f4		 mov	 esi, esp
  001e4	8d 45 bc	 lea	 eax, DWORD PTR _hCompChar$[ebp]
  001e7	50		 push	 eax
  001e8	8d 4d c8	 lea	 ecx, DWORD PTR _wCompChar$[ebp]
  001eb	51		 push	 ecx
  001ec	68 00 00 00 00	 push	 OFFSET _g_szCompositionString
  001f1	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+8
  001f7	8b 02		 mov	 eax, DWORD PTR [edx]
  001f9	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  001ff	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00202	ff d2		 call	 edx
  00204	3b f4		 cmp	 esi, esp
  00206	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 788
  0020b	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_IMECursorBytes
  00210	66 8b 4d b4	 mov	 cx, WORD PTR _temp$10[ebp]
  00214	66 89 0c 45 00
	00 00 00	 mov	 WORD PTR _g_szCompositionString[eax*2], cx
; Line 789
  0021c	8b 55 e0	 mov	 edx, DWORD PTR _bgX$[ebp]
  0021f	2b 55 c8	 sub	 edx, DWORD PTR _wCompChar$[ebp]
  00222	89 55 e0	 mov	 DWORD PTR _bgX$[ebp], edx
$LN38@DrawCompos:
; Line 795
  00225	c6 45 b3 00	 mov	 BYTE PTR _saveCandPos$[ebp], 0
; Line 796
  00229	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR _cType$[ebp], 1
; Line 797
  00230	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _pszCurrentCompLine$[ebp], OFFSET _g_szCompositionString
; Line 798
  00237	8b 45 e0	 mov	 eax, DWORD PTR _bgX$[ebp]
  0023a	89 45 a4	 mov	 DWORD PTR _dwCompLineStart$[ebp], eax
; Line 799
  0023d	8b 4d e0	 mov	 ecx, DWORD PTR _bgX$[ebp]
  00240	89 4d 9c	 mov	 DWORD PTR _bgXnext$[ebp], ecx
; Line 801
  00243	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hklCurrent
  00249	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  0024f	0f b7 c2	 movzx	 eax, dx
  00252	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  00257	0f b7 c8	 movzx	 ecx, ax
  0025a	83 f9 12	 cmp	 ecx, 18			; 00000012H
  0025d	75 0f		 jne	 SHORT $LN36@DrawCompos
  0025f	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _g_bCaretDraw
  00266	85 d2		 test	 edx, edx
  00268	0f 84 a0 03 00
	00		 je	 $LN37@DrawCompos
$LN36@DrawCompos:
; Line 802
  0026e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00275	eb 09		 jmp	 SHORT $LN35@DrawCompos
$LN34@DrawCompos:
  00277	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0027a	03 45 ac	 add	 eax, DWORD PTR _cType$[ebp]
  0027d	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN35@DrawCompos:
  00280	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00283	3b 4d e4	 cmp	 ecx, DWORD PTR _len$[ebp]
  00286	0f 8d 82 03 00
	00		 jge	 $LN37@DrawCompos
; Line 804
  0028c	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _bgColor$9[ebp], 0
; Line 806
  00293	ba 02 00 00 00	 mov	 edx, 2
  00298	6b c2 00	 imul	 eax, edx, 0
  0029b	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0029e	66 8b 14 4d 00
	00 00 00	 mov	 dx, WORD PTR _g_szCompositionString[ecx*2]
  002a6	66 89 54 05 88	 mov	 WORD PTR _szChar$8[ebp+eax], dx
; Line 807
  002ab	b8 02 00 00 00	 mov	 eax, 2
  002b0	d1 e0		 shl	 eax, 1
  002b2	89 85 6c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  002b8	83 bd 6c ff ff
	ff 06		 cmp	 DWORD PTR $T2[ebp], 6
  002bf	73 02		 jae	 SHORT $LN46@DrawCompos
  002c1	eb 05		 jmp	 SHORT $LN47@DrawCompos
$LN46@DrawCompos:
  002c3	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN47@DrawCompos:
  002c8	33 c9		 xor	 ecx, ecx
  002ca	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  002d0	66 89 4c 15 88	 mov	 WORD PTR _szChar$8[ebp+edx], cx
  002d5	b8 02 00 00 00	 mov	 eax, 2
  002da	c1 e0 00	 shl	 eax, 0
  002dd	33 c9		 xor	 ecx, ecx
  002df	66 89 4c 05 88	 mov	 WORD PTR _szChar$8[ebp+eax], cx
; Line 808
  002e4	8b 55 9c	 mov	 edx, DWORD PTR _bgXnext$[ebp]
  002e7	89 55 e0	 mov	 DWORD PTR _bgX$[ebp], edx
; Line 809
  002ea	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  002ed	03 45 ac	 add	 eax, DWORD PTR _cType$[ebp]
  002f0	66 8b 0c 45 00
	00 00 00	 mov	 cx, WORD PTR _g_szCompositionString[eax*2]
  002f8	66 89 4d 80	 mov	 WORD PTR _cSave$7[ebp], cx
; Line 810
  002fc	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  002ff	03 55 ac	 add	 edx, DWORD PTR _cType$[ebp]
  00302	d1 e2		 shl	 edx, 1
  00304	89 95 68 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], edx
  0030a	81 bd 68 ff ff
	ff 00 02 00 00	 cmp	 DWORD PTR $T1[ebp], 512	; 00000200H
  00314	73 02		 jae	 SHORT $LN48@DrawCompos
  00316	eb 05		 jmp	 SHORT $LN49@DrawCompos
$LN48@DrawCompos:
  00318	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN49@DrawCompos:
  0031d	33 c0		 xor	 eax, eax
  0031f	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00325	66 89 81 00 00
	00 00		 mov	 WORD PTR _g_szCompositionString[ecx], ax
; Line 811
  0032c	8b f4		 mov	 esi, esp
  0032e	8d 55 bc	 lea	 edx, DWORD PTR _hCompChar$[ebp]
  00331	52		 push	 edx
  00332	8d 45 9c	 lea	 eax, DWORD PTR _bgXnext$[ebp]
  00335	50		 push	 eax
  00336	8b 4d a8	 mov	 ecx, DWORD PTR _pszCurrentCompLine$[ebp]
  00339	51		 push	 ecx
  0033a	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+8
  00340	8b 02		 mov	 eax, DWORD PTR [edx]
  00342	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00348	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0034b	ff d2		 call	 edx
  0034d	3b f4		 cmp	 esi, esp
  0034f	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 812
  00354	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00357	03 45 ac	 add	 eax, DWORD PTR _cType$[ebp]
  0035a	66 8b 4d 80	 mov	 cx, WORD PTR _cSave$7[ebp]
  0035e	66 89 0c 45 00
	00 00 00	 mov	 WORD PTR _g_szCompositionString[eax*2], cx
; Line 813
  00366	8b 55 9c	 mov	 edx, DWORD PTR _bgXnext$[ebp]
  00369	03 55 a4	 add	 edx, DWORD PTR _dwCompLineStart$[ebp]
  0036c	89 55 9c	 mov	 DWORD PTR _bgXnext$[ebp], edx
; Line 814
  0036f	8b 45 9c	 mov	 eax, DWORD PTR _bgXnext$[ebp]
  00372	2b 45 e0	 sub	 eax, DWORD PTR _bgX$[ebp]
  00375	89 45 c8	 mov	 DWORD PTR _wCompChar$[ebp], eax
; Line 816
  00378	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0037b	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _g_szCompAttrString[ecx]
  00382	89 95 50 ff ff
	ff		 mov	 DWORD PTR tv177[ebp], edx
  00388	83 bd 50 ff ff
	ff 04		 cmp	 DWORD PTR tv177[ebp], 4
  0038f	77 5b		 ja	 SHORT $LN31@DrawCompos
  00391	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR tv177[ebp]
  00397	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN61@DrawCompos[eax*4]
$LN30@DrawCompos:
; Line 819
  0039e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A
  003a4	89 4d 94	 mov	 DWORD PTR _bgColor$9[ebp], ecx
; Line 820
  003a7	eb 43		 jmp	 SHORT $LN31@DrawCompos
$LN29@DrawCompos:
; Line 822
  003a9	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+4
  003af	89 55 94	 mov	 DWORD PTR _bgColor$9[ebp], edx
; Line 823
  003b2	6a 00		 push	 0
  003b4	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  003b9	83 c4 04	 add	 esp, 4
  003bc	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  003c1	3d 04 08 00 00	 cmp	 eax, 2052		; 00000804H
  003c6	74 04		 je	 SHORT $LN28@DrawCompos
; Line 824
  003c8	c6 45 b3 01	 mov	 BYTE PTR _saveCandPos$[ebp], 1
$LN28@DrawCompos:
; Line 825
  003cc	eb 1e		 jmp	 SHORT $LN31@DrawCompos
$LN27@DrawCompos:
; Line 827
  003ce	a1 08 00 00 00	 mov	 eax, DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+8
  003d3	89 45 94	 mov	 DWORD PTR _bgColor$9[ebp], eax
; Line 828
  003d6	eb 14		 jmp	 SHORT $LN31@DrawCompos
$LN26@DrawCompos:
; Line 833
  003d8	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+12
  003de	89 4d 94	 mov	 DWORD PTR _bgColor$9[ebp], ecx
; Line 834
  003e1	eb 09		 jmp	 SHORT $LN31@DrawCompos
$LN25@DrawCompos:
; Line 836
  003e3	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+16
  003e9	89 55 94	 mov	 DWORD PTR _bgColor$9[ebp], edx
$LN31@DrawCompos:
; Line 843
  003ec	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _g_dwIMELevel, 3
  003f3	0f 85 97 00 00
	00		 jne	 $LN23@DrawCompos
  003f9	0f b6 45 08	 movzx	 eax, BYTE PTR _bDrawCompAttr$[ebp]
  003fd	85 c0		 test	 eax, eax
  003ff	0f 84 8b 00 00
	00		 je	 $LN23@DrawCompos
; Line 845
  00405	8b 4d e0	 mov	 ecx, DWORD PTR _bgX$[ebp]
  00408	3b 0d 14 00 00
	00		 cmp	 ecx, DWORD PTR _g_CaretInfo+20
  0040e	7c 7b		 jl	 SHORT $LN22@DrawCompos
  00410	8b 55 e0	 mov	 edx, DWORD PTR _bgX$[ebp]
  00413	3b 15 1c 00 00
	00		 cmp	 edx, DWORD PTR _g_CaretInfo+28
  00419	7f 70		 jg	 SHORT $LN22@DrawCompos
; Line 847
  0041b	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwImeUiFlags
  00420	83 e0 01	 and	 eax, 1
  00423	74 34		 je	 SHORT $LN21@DrawCompos
; Line 849
  00425	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
  0042c	74 29		 je	 SHORT $LN20@DrawCompos
; Line 850
  0042e	8b f4		 mov	 esi, esp
  00430	8b 4d 94	 mov	 ecx, DWORD PTR _bgColor$9[ebp]
  00433	51		 push	 ecx
  00434	8b 55 dc	 mov	 edx, DWORD PTR _bgY$[ebp]
  00437	03 55 bc	 add	 edx, DWORD PTR _hCompChar$[ebp]
  0043a	52		 push	 edx
  0043b	8b 45 e0	 mov	 eax, DWORD PTR _bgX$[ebp]
  0043e	03 45 c8	 add	 eax, DWORD PTR _wCompChar$[ebp]
  00441	50		 push	 eax
  00442	8b 4d dc	 mov	 ecx, DWORD PTR _bgY$[ebp]
  00445	51		 push	 ecx
  00446	8b 55 e0	 mov	 edx, DWORD PTR _bgX$[ebp]
  00449	52		 push	 edx
  0044a	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
  00450	3b f4		 cmp	 esi, esp
  00452	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN20@DrawCompos:
; Line 852
  00457	eb 32		 jmp	 SHORT $LN22@DrawCompos
$LN21@DrawCompos:
; Line 854
  00459	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
  00460	74 29		 je	 SHORT $LN22@DrawCompos
; Line 855
  00462	8b f4		 mov	 esi, esp
  00464	8b 45 94	 mov	 eax, DWORD PTR _bgColor$9[ebp]
  00467	50		 push	 eax
  00468	8b 4d dc	 mov	 ecx, DWORD PTR _bgY$[ebp]
  0046b	03 4d bc	 add	 ecx, DWORD PTR _hCompChar$[ebp]
  0046e	51		 push	 ecx
  0046f	8b 55 e0	 mov	 edx, DWORD PTR _bgX$[ebp]
  00472	52		 push	 edx
  00473	8b 45 dc	 mov	 eax, DWORD PTR _bgY$[ebp]
  00476	50		 push	 eax
  00477	8b 4d e0	 mov	 ecx, DWORD PTR _bgX$[ebp]
  0047a	2b 4d c8	 sub	 ecx, DWORD PTR _wCompChar$[ebp]
  0047d	51		 push	 ecx
  0047e	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
  00484	3b f4		 cmp	 esi, esp
  00486	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN22@DrawCompos:
; Line 858
  0048b	e9 3a 01 00 00	 jmp	 $LN17@DrawCompos
$LN23@DrawCompos:
; Line 859
  00490	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _g_dwIMELevel, 2
  00497	0f 85 2d 01 00
	00		 jne	 $LN17@DrawCompos
; Line 864
  0049d	8b 55 d0	 mov	 edx, DWORD PTR _pszMlcs$[ebp]
  004a0	81 ea 00 00 00
	00		 sub	 edx, OFFSET _g_szMultiLineCompString
  004a6	d1 fa		 sar	 edx, 1
  004a8	81 fa fb 00 00
	00		 cmp	 edx, 251		; 000000fbH
  004ae	73 0c		 jae	 SHORT $LN50@DrawCompos
  004b0	c7 85 4c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv242[ebp], 1
  004ba	eb 0a		 jmp	 SHORT $LN51@DrawCompos
$LN50@DrawCompos:
  004bc	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv242[ebp], 0
$LN51@DrawCompos:
  004c6	8a 85 4c ff ff
	ff		 mov	 al, BYTE PTR tv242[ebp]
  004cc	88 85 7f ff ff
	ff		 mov	 BYTE PTR _bWrite$6[ebp], al
; Line 866
  004d2	8b 4d e0	 mov	 ecx, DWORD PTR _bgX$[ebp]
  004d5	03 4d c8	 add	 ecx, DWORD PTR _wCompChar$[ebp]
  004d8	3b 0d 1c 00 00
	00		 cmp	 ecx, DWORD PTR _g_CaretInfo+28
  004de	7c 77		 jl	 SHORT $LN15@DrawCompos
; Line 868
  004e0	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+20
  004e6	89 55 9c	 mov	 DWORD PTR _bgXnext$[ebp], edx
  004e9	8b 45 9c	 mov	 eax, DWORD PTR _bgXnext$[ebp]
  004ec	89 45 a4	 mov	 DWORD PTR _dwCompLineStart$[ebp], eax
  004ef	8b 4d a4	 mov	 ecx, DWORD PTR _dwCompLineStart$[ebp]
  004f2	89 4d e0	 mov	 DWORD PTR _bgX$[ebp], ecx
; Line 869
  004f5	8b 55 dc	 mov	 edx, DWORD PTR _bgY$[ebp]
  004f8	03 55 bc	 add	 edx, DWORD PTR _hCompChar$[ebp]
  004fb	89 55 dc	 mov	 DWORD PTR _bgY$[ebp], edx
; Line 870
  004fe	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00501	8d 0c 45 00 00
	00 00		 lea	 ecx, DWORD PTR _g_szCompositionString[eax*2]
  00508	89 4d a8	 mov	 DWORD PTR _pszCurrentCompLine$[ebp], ecx
; Line 871
  0050b	0f b6 95 7f ff
	ff ff		 movzx	 edx, BYTE PTR _bWrite$6[ebp]
  00512	85 d2		 test	 edx, edx
  00514	74 41		 je	 SHORT $LN15@DrawCompos
; Line 873
  00516	81 7d d0 00 00
	00 00		 cmp	 DWORD PTR _pszMlcs$[ebp], OFFSET _g_szMultiLineCompString
  0051d	74 13		 je	 SHORT $LN12@DrawCompos
  0051f	b8 02 00 00 00	 mov	 eax, 2
  00524	6b c8 ff	 imul	 ecx, eax, -1
  00527	8b 55 d0	 mov	 edx, DWORD PTR _pszMlcs$[ebp]
  0052a	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  0052e	85 c0		 test	 eax, eax
  00530	75 14		 jne	 SHORT $LN13@DrawCompos
$LN12@DrawCompos:
; Line 874
  00532	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00537	8b 55 d0	 mov	 edx, DWORD PTR _pszMlcs$[ebp]
  0053a	66 89 0a	 mov	 WORD PTR [edx], cx
  0053d	8b 45 d0	 mov	 eax, DWORD PTR _pszMlcs$[ebp]
  00540	83 c0 02	 add	 eax, 2
  00543	89 45 d0	 mov	 DWORD PTR _pszMlcs$[ebp], eax
$LN13@DrawCompos:
; Line 875
  00546	33 c9		 xor	 ecx, ecx
  00548	8b 55 d0	 mov	 edx, DWORD PTR _pszMlcs$[ebp]
  0054b	66 89 0a	 mov	 WORD PTR [edx], cx
  0054e	8b 45 d0	 mov	 eax, DWORD PTR _pszMlcs$[ebp]
  00551	83 c0 02	 add	 eax, 2
  00554	89 45 d0	 mov	 DWORD PTR _pszMlcs$[ebp], eax
$LN15@DrawCompos:
; Line 878
  00557	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
  0055e	74 29		 je	 SHORT $LN11@DrawCompos
; Line 879
  00560	8b f4		 mov	 esi, esp
  00562	8b 4d 94	 mov	 ecx, DWORD PTR _bgColor$9[ebp]
  00565	51		 push	 ecx
  00566	8b 55 dc	 mov	 edx, DWORD PTR _bgY$[ebp]
  00569	03 55 bc	 add	 edx, DWORD PTR _hCompChar$[ebp]
  0056c	52		 push	 edx
  0056d	8b 45 e0	 mov	 eax, DWORD PTR _bgX$[ebp]
  00570	03 45 c8	 add	 eax, DWORD PTR _wCompChar$[ebp]
  00573	50		 push	 eax
  00574	8b 4d dc	 mov	 ecx, DWORD PTR _bgY$[ebp]
  00577	51		 push	 ecx
  00578	8b 55 e0	 mov	 edx, DWORD PTR _bgX$[ebp]
  0057b	52		 push	 edx
  0057c	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
  00582	3b f4		 cmp	 esi, esp
  00584	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN11@DrawCompos:
; Line 880
  00589	0f b6 85 7f ff
	ff ff		 movzx	 eax, BYTE PTR _bWrite$6[ebp]
  00590	85 c0		 test	 eax, eax
  00592	74 1a		 je	 SHORT $LN10@DrawCompos
; Line 882
  00594	8b 4d d0	 mov	 ecx, DWORD PTR _pszMlcs$[ebp]
  00597	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0059a	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _g_szCompositionString[edx*2]
  005a2	66 89 01	 mov	 WORD PTR [ecx], ax
  005a5	8b 4d d0	 mov	 ecx, DWORD PTR _pszMlcs$[ebp]
  005a8	83 c1 02	 add	 ecx, 2
  005ab	89 4d d0	 mov	 DWORD PTR _pszMlcs$[ebp], ecx
$LN10@DrawCompos:
; Line 884
  005ae	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  005b1	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _g_IMECursorBytes
  005b7	75 11		 jne	 SHORT $LN17@DrawCompos
; Line 886
  005b9	8b 45 e0	 mov	 eax, DWORD PTR _bgX$[ebp]
  005bc	a3 00 00 00 00	 mov	 DWORD PTR _g_dwCaretX, eax
; Line 887
  005c1	8b 4d dc	 mov	 ecx, DWORD PTR _bgY$[ebp]
  005c4	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwCaretY, ecx
$LN17@DrawCompos:
; Line 891
  005ca	0f b6 55 b3	 movzx	 edx, BYTE PTR _saveCandPos$[ebp]
  005ce	85 d2		 test	 edx, edx
  005d0	74 06		 je	 SHORT $LN6@DrawCompos
  005d2	83 7d d8 ff	 cmp	 DWORD PTR _candX$[ebp], -1
  005d6	74 21		 je	 SHORT $LN7@DrawCompos
$LN6@DrawCompos:
  005d8	6a 00		 push	 0
  005da	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  005df	83 c4 04	 add	 esp, 4
  005e2	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  005e7	3d 04 08 00 00	 cmp	 eax, 2052		; 00000804H
  005ec	75 17		 jne	 SHORT $LN8@DrawCompos
  005ee	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  005f1	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _g_IMECursorChars
  005f7	75 0c		 jne	 SHORT $LN8@DrawCompos
$LN7@DrawCompos:
; Line 893
  005f9	8b 4d e0	 mov	 ecx, DWORD PTR _bgX$[ebp]
  005fc	89 4d d8	 mov	 DWORD PTR _candX$[ebp], ecx
; Line 894
  005ff	8b 55 dc	 mov	 edx, DWORD PTR _bgY$[ebp]
  00602	89 55 d4	 mov	 DWORD PTR _candY$[ebp], edx
$LN8@DrawCompos:
; Line 896
  00605	c6 45 b3 00	 mov	 BYTE PTR _saveCandPos$[ebp], 0
; Line 897
  00609	e9 69 fc ff ff	 jmp	 $LN34@DrawCompos
$LN37@DrawCompos:
; Line 899
  0060e	8b 45 9c	 mov	 eax, DWORD PTR _bgXnext$[ebp]
  00611	89 45 e0	 mov	 DWORD PTR _bgX$[ebp], eax
; Line 900
  00614	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _g_dwIMELevel, 2
  0061b	0f 85 4e 01 00
	00		 jne	 $LN5@DrawCompos
; Line 903
  00621	83 7d e4 00	 cmp	 DWORD PTR _len$[ebp], 0
  00625	74 1c		 je	 SHORT $LN4@DrawCompos
  00627	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0062a	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _g_IMECursorBytes
  00630	75 11		 jne	 SHORT $LN4@DrawCompos
; Line 905
  00632	8b 55 e0	 mov	 edx, DWORD PTR _bgX$[ebp]
  00635	89 15 00 00 00
	00		 mov	 DWORD PTR _g_dwCaretX, edx
; Line 906
  0063b	8b 45 dc	 mov	 eax, DWORD PTR _bgY$[ebp]
  0063e	a3 00 00 00 00	 mov	 DWORD PTR _g_dwCaretY, eax
$LN4@DrawCompos:
; Line 912
  00643	33 c9		 xor	 ecx, ecx
  00645	8b 55 d0	 mov	 edx, DWORD PTR _pszMlcs$[ebp]
  00648	66 89 0a	 mov	 WORD PTR [edx], cx
  0064b	8b 45 d0	 mov	 eax, DWORD PTR _pszMlcs$[ebp]
  0064e	83 c0 02	 add	 eax, 2
  00651	89 45 d0	 mov	 DWORD PTR _pszMlcs$[ebp], eax
; Line 913
  00654	33 c9		 xor	 ecx, ecx
  00656	8b 55 d0	 mov	 edx, DWORD PTR _pszMlcs$[ebp]
  00659	66 89 0a	 mov	 WORD PTR [edx], cx
  0065c	8b 45 d0	 mov	 eax, DWORD PTR _pszMlcs$[ebp]
  0065f	83 c0 02	 add	 eax, 2
  00662	89 45 d0	 mov	 DWORD PTR _pszMlcs$[ebp], eax
; Line 915
  00665	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo
  0066b	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _x$5[ebp], ecx
; Line 916
  00671	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+4
  00677	89 95 74 ff ff
	ff		 mov	 DWORD PTR _y$4[ebp], edx
; Line 917
  0067d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _pszMlcs$[ebp], OFFSET _g_szMultiLineCompString
$LN3@DrawCompos:
; Line 920
  00684	8b 45 d0	 mov	 eax, DWORD PTR _pszMlcs$[ebp]
  00687	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0068a	85 c9		 test	 ecx, ecx
  0068c	0f 84 dd 00 00
	00		 je	 $LN5@DrawCompos
  00692	8b 55 d0	 mov	 edx, DWORD PTR _pszMlcs$[ebp]
  00695	81 ea 00 00 00
	00		 sub	 edx, OFFSET _g_szMultiLineCompString
  0069b	d1 fa		 sar	 edx, 1
  0069d	81 fa 00 01 00
	00		 cmp	 edx, 256		; 00000100H
  006a3	0f 83 c6 00 00
	00		 jae	 $LN5@DrawCompos
; Line 922
  006a9	8b f4		 mov	 esi, esp
  006ab	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _y$4[ebp]
  006b1	50		 push	 eax
  006b2	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _x$5[ebp]
  006b8	51		 push	 ecx
  006b9	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+8
  006bf	8b 02		 mov	 eax, DWORD PTR [edx]
  006c1	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  006c7	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  006ca	ff d2		 call	 edx
  006cc	3b f4		 cmp	 esi, esp
  006ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 923
  006d3	8b f4		 mov	 esi, esp
  006d5	8b 45 d0	 mov	 eax, DWORD PTR _pszMlcs$[ebp]
  006d8	50		 push	 eax
  006d9	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  006df	8b 11		 mov	 edx, DWORD PTR [ecx]
  006e1	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  006e7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  006ea	ff d0		 call	 eax
  006ec	3b f4		 cmp	 esi, esp
  006ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 924
  006f3	8b 4d d0	 mov	 ecx, DWORD PTR _pszMlcs$[ebp]
  006f6	89 8d 48 ff ff
	ff		 mov	 DWORD PTR tv487[ebp], ecx
  006fc	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv487[ebp]
  00702	83 c2 02	 add	 edx, 2
  00705	89 95 44 ff ff
	ff		 mov	 DWORD PTR tv490[ebp], edx
$LL53@DrawCompos:
  0070b	8b 85 48 ff ff
	ff		 mov	 eax, DWORD PTR tv487[ebp]
  00711	66 8b 08	 mov	 cx, WORD PTR [eax]
  00714	66 89 8d 42 ff
	ff ff		 mov	 WORD PTR tv493[ebp], cx
  0071b	83 85 48 ff ff
	ff 02		 add	 DWORD PTR tv487[ebp], 2
  00722	66 83 bd 42 ff
	ff ff 00	 cmp	 WORD PTR tv493[ebp], 0
  0072a	75 df		 jne	 SHORT $LL53@DrawCompos
  0072c	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR tv487[ebp]
  00732	2b 95 44 ff ff
	ff		 sub	 edx, DWORD PTR tv490[ebp]
  00738	d1 fa		 sar	 edx, 1
  0073a	89 95 3c ff ff
	ff		 mov	 DWORD PTR tv301[ebp], edx
  00740	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv301[ebp]
  00746	8b 4d d0	 mov	 ecx, DWORD PTR _pszMlcs$[ebp]
  00749	8d 54 41 02	 lea	 edx, DWORD PTR [ecx+eax*2+2]
  0074d	89 55 d0	 mov	 DWORD PTR _pszMlcs$[ebp], edx
; Line 925
  00750	a1 14 00 00 00	 mov	 eax, DWORD PTR _g_CaretInfo+20
  00755	89 85 78 ff ff
	ff		 mov	 DWORD PTR _x$5[ebp], eax
; Line 926
  0075b	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _y$4[ebp]
  00761	03 4d bc	 add	 ecx, DWORD PTR _hCompChar$[ebp]
  00764	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _y$4[ebp], ecx
; Line 927
  0076a	e9 15 ff ff ff	 jmp	 $LN3@DrawCompos
$LN5@DrawCompos:
; Line 930
  0076f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _g_dwCaretX, -1
  00776	74 22		 je	 SHORT $LN1@DrawCompos
  00778	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _g_dwCaretY, -1
  0077f	74 19		 je	 SHORT $LN1@DrawCompos
; Line 932
  00781	8b 55 bc	 mov	 edx, DWORD PTR _hCompChar$[ebp]
  00784	52		 push	 edx
  00785	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwCaretY
  0078a	50		 push	 eax
  0078b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_dwCaretX
  00791	51		 push	 ecx
  00792	e8 00 00 00 00	 call	 ?DrawCaret@@YAXKKK@Z	; DrawCaret
  00797	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@DrawCompos:
; Line 934
  0079a	8b 55 d8	 mov	 edx, DWORD PTR _candX$[ebp]
  0079d	89 15 00 00 00
	00		 mov	 DWORD PTR _g_dwCandX, edx
; Line 935
  007a3	8b 45 d4	 mov	 eax, DWORD PTR _candY$[ebp]
  007a6	a3 00 00 00 00	 mov	 DWORD PTR _g_dwCandY, eax
; Line 936
  007ab	8b 4d bc	 mov	 ecx, DWORD PTR _hCompChar$[ebp]
  007ae	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_hCompChar, ecx
$LN41@DrawCompos:
; Line 937
  007b4	52		 push	 edx
  007b5	8b cd		 mov	 ecx, ebp
  007b7	50		 push	 eax
  007b8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN60@DrawCompos
  007be	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  007c3	58		 pop	 eax
  007c4	5a		 pop	 edx
  007c5	5f		 pop	 edi
  007c6	5e		 pop	 esi
  007c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007ca	33 cd		 xor	 ecx, ebp
  007cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007d1	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  007d7	3b ec		 cmp	 ebp, esp
  007d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007de	8b e5		 mov	 esp, ebp
  007e0	5d		 pop	 ebp
  007e1	c3		 ret	 0
  007e2	8b ff		 npad	 2
$LN60@DrawCompos:
  007e4	05 00 00 00	 DD	 5
  007e8	00 00 00 00	 DD	 $LN59@DrawCompos
$LN59@DrawCompos:
  007ec	ec ff ff ff	 DD	 -20			; ffffffecH
  007f0	04 00 00 00	 DD	 4
  007f4	00 00 00 00	 DD	 $LN54@DrawCompos
  007f8	c8 ff ff ff	 DD	 -56			; ffffffc8H
  007fc	04 00 00 00	 DD	 4
  00800	00 00 00 00	 DD	 $LN55@DrawCompos
  00804	bc ff ff ff	 DD	 -68			; ffffffbcH
  00808	04 00 00 00	 DD	 4
  0080c	00 00 00 00	 DD	 $LN56@DrawCompos
  00810	9c ff ff ff	 DD	 -100			; ffffff9cH
  00814	04 00 00 00	 DD	 4
  00818	00 00 00 00	 DD	 $LN57@DrawCompos
  0081c	88 ff ff ff	 DD	 -120			; ffffff88H
  00820	06 00 00 00	 DD	 6
  00824	00 00 00 00	 DD	 $LN58@DrawCompos
$LN58@DrawCompos:
  00828	73		 DB	 115			; 00000073H
  00829	7a		 DB	 122			; 0000007aH
  0082a	43		 DB	 67			; 00000043H
  0082b	68		 DB	 104			; 00000068H
  0082c	61		 DB	 97			; 00000061H
  0082d	72		 DB	 114			; 00000072H
  0082e	00		 DB	 0
$LN57@DrawCompos:
  0082f	62		 DB	 98			; 00000062H
  00830	67		 DB	 103			; 00000067H
  00831	58		 DB	 88			; 00000058H
  00832	6e		 DB	 110			; 0000006eH
  00833	65		 DB	 101			; 00000065H
  00834	78		 DB	 120			; 00000078H
  00835	74		 DB	 116			; 00000074H
  00836	00		 DB	 0
$LN56@DrawCompos:
  00837	68		 DB	 104			; 00000068H
  00838	43		 DB	 67			; 00000043H
  00839	6f		 DB	 111			; 0000006fH
  0083a	6d		 DB	 109			; 0000006dH
  0083b	70		 DB	 112			; 00000070H
  0083c	43		 DB	 67			; 00000043H
  0083d	68		 DB	 104			; 00000068H
  0083e	61		 DB	 97			; 00000061H
  0083f	72		 DB	 114			; 00000072H
  00840	00		 DB	 0
$LN55@DrawCompos:
  00841	77		 DB	 119			; 00000077H
  00842	43		 DB	 67			; 00000043H
  00843	6f		 DB	 111			; 0000006fH
  00844	6d		 DB	 109			; 0000006dH
  00845	70		 DB	 112			; 00000070H
  00846	43		 DB	 67			; 00000043H
  00847	68		 DB	 104			; 00000068H
  00848	61		 DB	 97			; 00000061H
  00849	72		 DB	 114			; 00000072H
  0084a	00		 DB	 0
$LN54@DrawCompos:
  0084b	75		 DB	 117			; 00000075H
  0084c	44		 DB	 68			; 00000044H
  0084d	75		 DB	 117			; 00000075H
  0084e	6d		 DB	 109			; 0000006dH
  0084f	6d		 DB	 109			; 0000006dH
  00850	79		 DB	 121			; 00000079H
  00851	00		 DB	 0
  00852	8b ff		 npad	 2
$LN61@DrawCompos:
  00854	00 00 00 00	 DD	 $LN30@DrawCompos
  00858	00 00 00 00	 DD	 $LN29@DrawCompos
  0085c	00 00 00 00	 DD	 $LN27@DrawCompos
  00860	00 00 00 00	 DD	 $LN26@DrawCompos
  00864	00 00 00 00	 DD	 $LN25@DrawCompos
?DrawCompositionString@@YAX_N@Z ENDP			; DrawCompositionString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -348						; size = 4
_dy$2 = -344						; size = 4
_dx$3 = -340						; size = 4
_szCandidateBody$4 = -336				; size = 4
_nOneDigit$5 = -332					; size = 4
_szOneDigit$6 = -324					; size = 4
_cSave$7 = -316						; size = 2
_psz$8 = -312						; size = 4
_szTemp$9 = -304					; size = 64
_iDummy$10 = -232					; size = 4
_iEnd$11 = -220						; size = 4
_iStart$12 = -208					; size = 4
_bottom$ = -200						; size = 4
_right$ = -196						; size = 4
_top$ = -192						; size = 4
_left$ = -188						; size = 4
_seperateLineX$ = -184					; size = 4
_dwCandHeight$ = -180					; size = 4
_slotsUsed$ = -176					; size = 4
_ty$13 = -168						; size = 4
_tx$14 = -156						; size = 4
_dwCandWidth$ = -148					; size = 4
_adwCandWidth$ = -140					; size = 40
_dwMarginX$ = -96					; size = 4
_ss$15 = -88						; size = 16
_uDH$16 = -64						; size = 4
_uDW$17 = -52						; size = 4
_cnt$18 = -44						; size = 4
_uSpaceWidth$ = -40					; size = 4
_largest$ = -32						; size = 8
_i$ = -20						; size = 4
_hCompChar$ = -16					; size = 4
_candY$ = -12						; size = 4
_candX$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?DrawCandidateList@@YAXXZ PROC				; DrawCandidateList
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 940
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 5c 01 00
	00		 sub	 esp, 348		; 0000015cH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd a4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-348]
  00011	b9 57 00 00 00	 mov	 ecx, 87			; 00000057H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; Line 941
  00027	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR _g_CaretInfo+8, 0
  0002e	75 21		 jne	 SHORT $LN83@DrawCandid
  00030	8b f4		 mov	 esi, esp
  00032	68 ad 03 00 00	 push	 941			; 000003adH
  00037	68 00 00 00 00	 push	 OFFSET $SG153156
  0003c	68 00 00 00 00	 push	 OFFSET $SG153157
  00041	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN83@DrawCandid:
; Line 943
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_dwCandX
  00057	89 4d f8	 mov	 DWORD PTR _candX$[ebp], ecx
; Line 944
  0005a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_dwCandY
  00060	89 55 f4	 mov	 DWORD PTR _candY$[ebp], edx
; Line 945
  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hCompChar
  00068	89 45 f0	 mov	 DWORD PTR _hCompChar$[ebp], eax
; Line 949
  0006b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_dwCount, 0
  00072	74 1c		 je	 SHORT $LN79@DrawCandid
  00074	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00079	6b d1 00	 imul	 edx, ecx, 0
  0007c	b8 02 00 00 00	 mov	 eax, 2
  00081	6b c8 00	 imul	 ecx, eax, 0
  00084	0f b7 94 0a 00
	00 00 00	 movzx	 edx, WORD PTR _g_szCandidate[edx+ecx]
  0008c	85 d2		 test	 edx, edx
  0008e	75 05		 jne	 SHORT $LN80@DrawCandid
$LN79@DrawCandid:
; Line 951
  00090	e9 50 0d 00 00	 jmp	 $LN82@DrawCandid
$LN80@DrawCandid:
; Line 955
  00095	83 7d f8 ff	 cmp	 DWORD PTR _candX$[ebp], -1
  00099	75 51		 jne	 SHORT $LN78@DrawCandid
; Line 959
  0009b	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hklCurrent
  000a0	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000a5	0f b7 c8	 movzx	 ecx, ax
  000a8	81 f9 04 04 00
	00		 cmp	 ecx, 1028		; 00000404H
  000ae	75 2a		 jne	 SHORT $LN77@DrawCandid
  000b0	6a 00		 push	 0
  000b2	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  000b7	83 c4 04	 add	 esp, 4
  000ba	85 c0		 test	 eax, eax
  000bc	74 1c		 je	 SHORT $LN77@DrawCandid
  000be	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _g_dwCaretX, -1
  000c5	74 13		 je	 SHORT $LN77@DrawCandid
; Line 961
  000c7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_dwCaretX
  000cd	89 55 f8	 mov	 DWORD PTR _candX$[ebp], edx
; Line 962
  000d0	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwCaretY
  000d5	89 45 f4	 mov	 DWORD PTR _candY$[ebp], eax
; Line 964
  000d8	eb 12		 jmp	 SHORT $LN78@DrawCandid
$LN77@DrawCandid:
; Line 966
  000da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo
  000e0	89 4d f8	 mov	 DWORD PTR _candX$[ebp], ecx
; Line 967
  000e3	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+4
  000e9	89 55 f4	 mov	 DWORD PTR _candY$[ebp], edx
$LN78@DrawCandid:
; Line 974
  000ec	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _largest$[ebp], 0
  000f3	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _largest$[ebp+4], 0
; Line 977
  000fa	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _uSpaceWidth$[ebp], 0
; Line 981
  00101	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pPrevFont@?N@??DrawCandidateList@@YAXXZ@4PAVCImeUiFont_Base@@A
  00106	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR _g_CaretInfo+8
  0010c	0f 84 b2 00 00
	00		 je	 $LN75@DrawCandid
; Line 983
  00112	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00118	89 0d 00 00 00
	00		 mov	 DWORD PTR ?pPrevFont@?N@??DrawCandidateList@@YAXXZ@4PAVCImeUiFont_Base@@A, ecx
; Line 984
  0011e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _cnt$18[ebp], 0
  00125	eb 09		 jmp	 SHORT $LN74@DrawCandid
$LN73@DrawCandid:
  00127	8b 55 d4	 mov	 edx, DWORD PTR _cnt$18[ebp]
  0012a	83 c2 01	 add	 edx, 1
  0012d	89 55 d4	 mov	 DWORD PTR _cnt$18[ebp], edx
$LN74@DrawCandid:
  00130	83 7d d4 09	 cmp	 DWORD PTR _cnt$18[ebp], 9
  00134	0f 8f 8a 00 00
	00		 jg	 $LN75@DrawCandid
; Line 986
  0013a	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _uDW$17[ebp], 0
; Line 987
  00141	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _uDH$16[ebp], 0
; Line 989
  00148	8b f4		 mov	 esi, esp
  0014a	8b 45 d4	 mov	 eax, DWORD PTR _cnt$18[ebp]
  0014d	50		 push	 eax
  0014e	68 00 00 00 00	 push	 OFFSET $SG153194
  00153	6a 08		 push	 8
  00155	8d 4d a8	 lea	 ecx, DWORD PTR _ss$15[ebp]
  00158	51		 push	 ecx
  00159	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__swprintf_s
  0015f	83 c4 10	 add	 esp, 16			; 00000010H
  00162	3b f4		 cmp	 esi, esp
  00164	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 990
  00169	8b f4		 mov	 esi, esp
  0016b	8d 55 c0	 lea	 edx, DWORD PTR _uDH$16[ebp]
  0016e	52		 push	 edx
  0016f	8d 45 cc	 lea	 eax, DWORD PTR _uDW$17[ebp]
  00172	50		 push	 eax
  00173	8d 4d a8	 lea	 ecx, DWORD PTR _ss$15[ebp]
  00176	51		 push	 ecx
  00177	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+8
  0017d	8b 02		 mov	 eax, DWORD PTR [edx]
  0017f	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00185	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00188	ff d2		 call	 edx
  0018a	3b f4		 cmp	 esi, esp
  0018c	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 991
  00191	8b 45 d4	 mov	 eax, DWORD PTR _cnt$18[ebp]
  00194	8b 4d cc	 mov	 ecx, DWORD PTR _uDW$17[ebp]
  00197	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?uDigitWidthList@?N@??DrawCandidateList@@YAXXZ@4PAKA[eax*4], ecx
; Line 992
  0019e	8b 55 cc	 mov	 edx, DWORD PTR _uDW$17[ebp]
  001a1	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?uDigitWidth@?N@??DrawCandidateList@@YAXXZ@4KA
  001a7	76 08		 jbe	 SHORT $LN71@DrawCandid
; Line 993
  001a9	8b 45 cc	 mov	 eax, DWORD PTR _uDW$17[ebp]
  001ac	a3 00 00 00 00	 mov	 DWORD PTR ?uDigitWidth@?N@??DrawCandidateList@@YAXXZ@4KA, eax
$LN71@DrawCandid:
; Line 994
  001b1	8b 4d c0	 mov	 ecx, DWORD PTR _uDH$16[ebp]
  001b4	3b 4d e4	 cmp	 ecx, DWORD PTR _largest$[ebp+4]
  001b7	7e 06		 jle	 SHORT $LN70@DrawCandid
; Line 995
  001b9	8b 55 c0	 mov	 edx, DWORD PTR _uDH$16[ebp]
  001bc	89 55 e4	 mov	 DWORD PTR _largest$[ebp+4], edx
$LN70@DrawCandid:
; Line 996
  001bf	e9 63 ff ff ff	 jmp	 $LN73@DrawCandid
$LN75@DrawCandid:
; Line 998
  001c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?uDigitWidth@?N@??DrawCandidateList@@YAXXZ@4KA
  001c9	89 45 d8	 mov	 DWORD PTR _uSpaceWidth$[ebp], eax
; Line 999
  001cc	8b 4d d8	 mov	 ecx, DWORD PTR _uSpaceWidth$[ebp]
  001cf	83 c1 01	 add	 ecx, 1
  001d2	d1 e9		 shr	 ecx, 1
  001d4	89 4d a0	 mov	 DWORD PTR _dwMarginX$[ebp], ecx
; Line 1003
  001d7	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwCandWidth$[ebp], 0
; Line 1004
  001e1	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _g_bReadingWindow
  001e8	85 d2		 test	 edx, edx
  001ea	74 38		 je	 SHORT $LN69@DrawCandid
  001ec	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bHorizontalReading
  001f3	85 c0		 test	 eax, eax
  001f5	74 2d		 je	 SHORT $LN69@DrawCandid
; Line 1005
  001f7	8b f4		 mov	 esi, esp
  001f9	8d 4d e4	 lea	 ecx, DWORD PTR _largest$[ebp+4]
  001fc	51		 push	 ecx
  001fd	8d 55 e0	 lea	 edx, DWORD PTR _largest$[ebp]
  00200	52		 push	 edx
  00201	68 00 00 00 00	 push	 OFFSET _g_szReadingString
  00206	a1 08 00 00 00	 mov	 eax, DWORD PTR _g_CaretInfo+8
  0020b	8b 10		 mov	 edx, DWORD PTR [eax]
  0020d	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00213	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00216	ff d0		 call	 eax
  00218	3b f4		 cmp	 esi, esp
  0021a	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1006
  0021f	e9 77 01 00 00	 jmp	 $LN68@DrawCandid
$LN69@DrawCandid:
; Line 1008
  00224	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0022b	eb 09		 jmp	 SHORT $LN67@DrawCandid
$LN66@DrawCandid:
  0022d	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00230	83 c1 01	 add	 ecx, 1
  00233	89 4d ec	 mov	 DWORD PTR _i$[ebp], ecx
$LN67@DrawCandid:
  00236	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  00239	c1 e2 09	 shl	 edx, 9
  0023c	b8 02 00 00 00	 mov	 eax, 2
  00241	6b c8 00	 imul	 ecx, eax, 0
  00244	0f b7 94 0a 00
	00 00 00	 movzx	 edx, WORD PTR _g_szCandidate[edx+ecx]
  0024c	85 d2		 test	 edx, edx
  0024e	0f 84 47 01 00
	00		 je	 $LN68@DrawCandid
  00254	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00257	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _g_uCandPageSize
  0025d	0f 8d 38 01 00
	00		 jge	 $LN68@DrawCandid
; Line 1010
  00263	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _tx$14[ebp], 0
; Line 1011
  0026d	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ty$13[ebp], 0
; Line 1013
  00277	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bReadingWindow
  0027e	85 c9		 test	 ecx, ecx
  00280	74 3c		 je	 SHORT $LN64@DrawCandid
; Line 1014
  00282	8b f4		 mov	 esi, esp
  00284	8d 95 58 ff ff
	ff		 lea	 edx, DWORD PTR _ty$13[ebp]
  0028a	52		 push	 edx
  0028b	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _tx$14[ebp]
  00291	50		 push	 eax
  00292	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00295	c1 e1 09	 shl	 ecx, 9
  00298	81 c1 00 00 00
	00		 add	 ecx, OFFSET _g_szCandidate
  0029e	51		 push	 ecx
  0029f	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+8
  002a5	8b 02		 mov	 eax, DWORD PTR [edx]
  002a7	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  002ad	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  002b0	ff d2		 call	 edx
  002b2	3b f4		 cmp	 esi, esp
  002b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1015
  002b9	e9 8e 00 00 00	 jmp	 $LN63@DrawCandid
$LN64@DrawCandid:
; Line 1017
  002be	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bVerticalCand
  002c5	85 c0		 test	 eax, eax
  002c7	74 38		 je	 SHORT $LN62@DrawCandid
; Line 1018
  002c9	8b f4		 mov	 esi, esp
  002cb	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _ty$13[ebp]
  002d1	51		 push	 ecx
  002d2	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR _tx$14[ebp]
  002d8	52		 push	 edx
  002d9	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  002dc	c1 e0 09	 shl	 eax, 9
  002df	05 04 00 00 00	 add	 eax, OFFSET _g_szCandidate+4
  002e4	50		 push	 eax
  002e5	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  002eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ed	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  002f3	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002f6	ff d0		 call	 eax
  002f8	3b f4		 cmp	 esi, esp
  002fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1019
  002ff	eb 36		 jmp	 SHORT $LN61@DrawCandid
$LN62@DrawCandid:
; Line 1020
  00301	8b f4		 mov	 esi, esp
  00303	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR _ty$13[ebp]
  00309	51		 push	 ecx
  0030a	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR _tx$14[ebp]
  00310	52		 push	 edx
  00311	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00314	c1 e0 09	 shl	 eax, 9
  00317	05 02 00 00 00	 add	 eax, OFFSET _g_szCandidate+2
  0031c	50		 push	 eax
  0031d	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00323	8b 11		 mov	 edx, DWORD PTR [ecx]
  00325	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  0032b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0032e	ff d0		 call	 eax
  00330	3b f4		 cmp	 esi, esp
  00332	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN61@DrawCandid:
; Line 1021
  00337	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _tx$14[ebp]
  0033d	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR ?uDigitWidth@?N@??DrawCandidateList@@YAXXZ@4KA
  00343	03 4d d8	 add	 ecx, DWORD PTR _uSpaceWidth$[ebp]
  00346	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _tx$14[ebp], ecx
$LN63@DrawCandid:
; Line 1024
  0034c	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _tx$14[ebp]
  00352	3b 55 e0	 cmp	 edx, DWORD PTR _largest$[ebp]
  00355	7e 09		 jle	 SHORT $LN60@DrawCandid
; Line 1025
  00357	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _tx$14[ebp]
  0035d	89 45 e0	 mov	 DWORD PTR _largest$[ebp], eax
$LN60@DrawCandid:
; Line 1026
  00360	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _ty$13[ebp]
  00366	3b 4d e4	 cmp	 ecx, DWORD PTR _largest$[ebp+4]
  00369	7e 09		 jle	 SHORT $LN59@DrawCandid
; Line 1027
  0036b	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _ty$13[ebp]
  00371	89 55 e4	 mov	 DWORD PTR _largest$[ebp+4], edx
$LN59@DrawCandid:
; Line 1028
  00374	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00377	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _tx$14[ebp]
  0037d	89 8c 85 74 ff
	ff ff		 mov	 DWORD PTR _adwCandWidth$[ebp+eax*4], ecx
; Line 1029
  00384	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _dwCandWidth$[ebp]
  0038a	03 95 64 ff ff
	ff		 add	 edx, DWORD PTR _tx$14[ebp]
  00390	89 95 6c ff ff
	ff		 mov	 DWORD PTR _dwCandWidth$[ebp], edx
; Line 1030
  00396	e9 92 fe ff ff	 jmp	 $LN66@DrawCandid
$LN68@DrawCandid:
; Line 1034
  0039b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bReadingWindow
  003a2	85 c0		 test	 eax, eax
  003a4	74 1c		 je	 SHORT $LN58@DrawCandid
  003a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_dwCount
  003ac	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _g_uCandPageSize
  003b2	73 0e		 jae	 SHORT $LN58@DrawCandid
; Line 1035
  003b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_dwCount
  003ba	89 95 50 ff ff
	ff		 mov	 DWORD PTR _slotsUsed$[ebp], edx
; Line 1036
  003c0	eb 0b		 jmp	 SHORT $LN57@DrawCandid
$LN58@DrawCandid:
; Line 1037
  003c2	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_uCandPageSize
  003c7	89 85 50 ff ff
	ff		 mov	 DWORD PTR _slotsUsed$[ebp], eax
$LN57@DrawCandid:
; Line 1041
  003cd	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bVerticalCand
  003d4	85 c9		 test	 ecx, ecx
  003d6	74 2b		 je	 SHORT $LN56@DrawCandid
  003d8	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _g_bReadingWindow
  003df	85 d2		 test	 edx, edx
  003e1	74 0b		 je	 SHORT $LN55@DrawCandid
  003e3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bHorizontalReading
  003ea	85 c0		 test	 eax, eax
  003ec	75 15		 jne	 SHORT $LN56@DrawCandid
$LN55@DrawCandid:
; Line 1042
  003ee	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _slotsUsed$[ebp]
  003f4	0f af 4d e4	 imul	 ecx, DWORD PTR _largest$[ebp+4]
  003f8	83 c1 02	 add	 ecx, 2
  003fb	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _dwCandHeight$[ebp], ecx
; Line 1043
  00401	eb 0c		 jmp	 SHORT $LN54@DrawCandid
$LN56@DrawCandid:
; Line 1044
  00403	8b 55 e4	 mov	 edx, DWORD PTR _largest$[ebp+4]
  00406	83 c2 02	 add	 edx, 2
  00409	89 95 4c ff ff
	ff		 mov	 DWORD PTR _dwCandHeight$[ebp], edx
$LN54@DrawCandid:
; Line 1045
  0040f	8b 45 f4	 mov	 eax, DWORD PTR _candY$[ebp]
  00412	03 45 f0	 add	 eax, DWORD PTR _hCompChar$[ebp]
  00415	03 85 4c ff ff
	ff		 add	 eax, DWORD PTR _dwCandHeight$[ebp]
  0041b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _g_screenHeight
  00421	76 0e		 jbe	 SHORT $LN53@DrawCandid
; Line 1046
  00423	8b 4d f4	 mov	 ecx, DWORD PTR _candY$[ebp]
  00426	2b 8d 4c ff ff
	ff		 sub	 ecx, DWORD PTR _dwCandHeight$[ebp]
  0042c	89 4d f4	 mov	 DWORD PTR _candY$[ebp], ecx
; Line 1047
  0042f	eb 09		 jmp	 SHORT $LN52@DrawCandid
$LN53@DrawCandid:
; Line 1048
  00431	8b 55 f4	 mov	 edx, DWORD PTR _candY$[ebp]
  00434	03 55 f0	 add	 edx, DWORD PTR _hCompChar$[ebp]
  00437	89 55 f4	 mov	 DWORD PTR _candY$[ebp], edx
$LN52@DrawCandid:
; Line 1049
  0043a	83 7d f4 00	 cmp	 DWORD PTR _candY$[ebp], 0
  0043e	7d 07		 jge	 SHORT $LN51@DrawCandid
; Line 1050
  00440	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _candY$[ebp], 0
$LN51@DrawCandid:
; Line 1053
  00447	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bReadingWindow
  0044e	85 c0		 test	 eax, eax
  00450	75 31		 jne	 SHORT $LN50@DrawCandid
  00452	6a 00		 push	 0
  00454	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  00459	83 c4 04	 add	 esp, 4
  0045c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00461	3d 04 08 00 00	 cmp	 eax, 2052		; 00000804H
  00466	75 1b		 jne	 SHORT $LN50@DrawCandid
; Line 1054
  00468	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _slotsUsed$[ebp]
  0046e	83 e9 01	 sub	 ecx, 1
  00471	0f af 4d a0	 imul	 ecx, DWORD PTR _dwMarginX$[ebp]
  00475	03 8d 6c ff ff
	ff		 add	 ecx, DWORD PTR _dwCandWidth$[ebp]
  0047b	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _dwCandWidth$[ebp], ecx
  00481	eb 66		 jmp	 SHORT $LN49@DrawCandid
$LN50@DrawCandid:
; Line 1055
  00483	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _g_bReadingWindow
  0048a	85 d2		 test	 edx, edx
  0048c	74 1d		 je	 SHORT $LN48@DrawCandid
  0048e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bHorizontalReading
  00495	85 c0		 test	 eax, eax
  00497	74 12		 je	 SHORT $LN48@DrawCandid
; Line 1056
  00499	8b 4d a0	 mov	 ecx, DWORD PTR _dwMarginX$[ebp]
  0049c	8b 55 e0	 mov	 edx, DWORD PTR _largest$[ebp]
  0049f	8d 44 4a 02	 lea	 eax, DWORD PTR [edx+ecx*2+2]
  004a3	89 85 6c ff ff
	ff		 mov	 DWORD PTR _dwCandWidth$[ebp], eax
  004a9	eb 3e		 jmp	 SHORT $LN49@DrawCandid
$LN48@DrawCandid:
; Line 1057
  004ab	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bVerticalCand
  004b2	85 c9		 test	 ecx, ecx
  004b4	75 0b		 jne	 SHORT $LN45@DrawCandid
  004b6	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _g_bReadingWindow
  004bd	85 d2		 test	 edx, edx
  004bf	74 12		 je	 SHORT $LN46@DrawCandid
$LN45@DrawCandid:
; Line 1058
  004c1	8b 45 a0	 mov	 eax, DWORD PTR _dwMarginX$[ebp]
  004c4	8b 4d e0	 mov	 ecx, DWORD PTR _largest$[ebp]
  004c7	8d 54 41 02	 lea	 edx, DWORD PTR [ecx+eax*2+2]
  004cb	89 95 6c ff ff
	ff		 mov	 DWORD PTR _dwCandWidth$[ebp], edx
; Line 1059
  004d1	eb 16		 jmp	 SHORT $LN49@DrawCandid
$LN46@DrawCandid:
; Line 1060
  004d3	8b 45 e0	 mov	 eax, DWORD PTR _largest$[ebp]
  004d6	83 c0 01	 add	 eax, 1
  004d9	0f af 85 50 ff
	ff ff		 imul	 eax, DWORD PTR _slotsUsed$[ebp]
  004e0	83 c0 01	 add	 eax, 1
  004e3	89 85 6c ff ff
	ff		 mov	 DWORD PTR _dwCandWidth$[ebp], eax
$LN49@DrawCandid:
; Line 1061
  004e9	8b 4d f8	 mov	 ecx, DWORD PTR _candX$[ebp]
  004ec	03 8d 6c ff ff
	ff		 add	 ecx, DWORD PTR _dwCandWidth$[ebp]
  004f2	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _g_screenWidth
  004f8	76 0f		 jbe	 SHORT $LN43@DrawCandid
; Line 1062
  004fa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_screenWidth
  00500	2b 95 6c ff ff
	ff		 sub	 edx, DWORD PTR _dwCandWidth$[ebp]
  00506	89 55 f8	 mov	 DWORD PTR _candX$[ebp], edx
$LN43@DrawCandid:
; Line 1063
  00509	83 7d f8 00	 cmp	 DWORD PTR _candX$[ebp], 0
  0050d	7d 07		 jge	 SHORT $LN42@DrawCandid
; Line 1064
  0050f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _candX$[ebp], 0
$LN42@DrawCandid:
; Line 1067
  00516	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _seperateLineX$[ebp], 0
; Line 1068
  00520	8b 45 f8	 mov	 eax, DWORD PTR _candX$[ebp]
  00523	89 85 44 ff ff
	ff		 mov	 DWORD PTR _left$[ebp], eax
; Line 1069
  00529	8b 4d f4	 mov	 ecx, DWORD PTR _candY$[ebp]
  0052c	89 8d 40 ff ff
	ff		 mov	 DWORD PTR _top$[ebp], ecx
; Line 1070
  00532	8b 55 f8	 mov	 edx, DWORD PTR _candX$[ebp]
  00535	03 95 6c ff ff
	ff		 add	 edx, DWORD PTR _dwCandWidth$[ebp]
  0053b	89 95 3c ff ff
	ff		 mov	 DWORD PTR _right$[ebp], edx
; Line 1071
  00541	8b 45 f4	 mov	 eax, DWORD PTR _candY$[ebp]
  00544	03 85 4c ff ff
	ff		 add	 eax, DWORD PTR _dwCandHeight$[ebp]
  0054a	89 85 38 ff ff
	ff		 mov	 DWORD PTR _bottom$[ebp], eax
; Line 1072
  00550	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
  00557	74 32		 je	 SHORT $LN41@DrawCandid
; Line 1073
  00559	8b f4		 mov	 esi, esp
  0055b	8b 0d 18 00 00
	00		 mov	 ecx, DWORD PTR _gSkinIME+24
  00561	51		 push	 ecx
  00562	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR _bottom$[ebp]
  00568	52		 push	 edx
  00569	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _right$[ebp]
  0056f	50		 push	 eax
  00570	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _top$[ebp]
  00576	51		 push	 ecx
  00577	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _left$[ebp]
  0057d	52		 push	 edx
  0057e	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
  00584	3b f4		 cmp	 esi, esp
  00586	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN41@DrawCandid:
; Line 1074
  0058b	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _left$[ebp]
  00591	83 c0 01	 add	 eax, 1
  00594	89 85 44 ff ff
	ff		 mov	 DWORD PTR _left$[ebp], eax
; Line 1075
  0059a	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _top$[ebp]
  005a0	83 c1 01	 add	 ecx, 1
  005a3	89 8d 40 ff ff
	ff		 mov	 DWORD PTR _top$[ebp], ecx
; Line 1076
  005a9	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _right$[ebp]
  005af	83 ea 01	 sub	 edx, 1
  005b2	89 95 3c ff ff
	ff		 mov	 DWORD PTR _right$[ebp], edx
; Line 1077
  005b8	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _bottom$[ebp]
  005be	83 e8 01	 sub	 eax, 1
  005c1	89 85 38 ff ff
	ff		 mov	 DWORD PTR _bottom$[ebp], eax
; Line 1078
  005c7	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bReadingWindow
  005ce	85 c9		 test	 ecx, ecx
  005d0	75 16		 jne	 SHORT $LN39@DrawCandid
  005d2	6a 00		 push	 0
  005d4	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  005d9	83 c4 04	 add	 esp, 4
  005dc	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  005e1	3d 04 08 00 00	 cmp	 eax, 2052		; 00000804H
  005e6	75 40		 jne	 SHORT $LN40@DrawCandid
$LN39@DrawCandid:
; Line 1080
  005e8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
  005ef	74 32		 je	 SHORT $LN38@DrawCandid
; Line 1081
  005f1	8b f4		 mov	 esi, esp
  005f3	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _gSkinIME+20
  005f9	52		 push	 edx
  005fa	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _bottom$[ebp]
  00600	50		 push	 eax
  00601	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _right$[ebp]
  00607	51		 push	 ecx
  00608	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _top$[ebp]
  0060e	52		 push	 edx
  0060f	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _left$[ebp]
  00615	50		 push	 eax
  00616	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
  0061c	3b f4		 cmp	 esi, esp
  0061e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN38@DrawCandid:
; Line 1082
  00623	e9 1c 01 00 00	 jmp	 $LN37@DrawCandid
$LN40@DrawCandid:
; Line 1083
  00628	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bVerticalCand
  0062f	85 c9		 test	 ecx, ecx
  00631	0f 84 9d 00 00
	00		 je	 $LN36@DrawCandid
; Line 1086
  00637	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _g_bReadingWindow
  0063e	85 d2		 test	 edx, edx
  00640	0f 85 8c 00 00
	00		 jne	 $LN35@DrawCandid
; Line 1088
  00646	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _left$[ebp]
  0064c	03 45 a0	 add	 eax, DWORD PTR _dwMarginX$[ebp]
  0064f	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?uDigitWidth@?N@??DrawCandidateList@@YAXXZ@4KA
  00655	8b 4d d8	 mov	 ecx, DWORD PTR _uSpaceWidth$[ebp]
  00658	d1 e9		 shr	 ecx, 1
  0065a	03 c1		 add	 eax, ecx
  0065c	89 85 48 ff ff
	ff		 mov	 DWORD PTR _seperateLineX$[ebp], eax
; Line 1089
  00662	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
  00669	74 67		 je	 SHORT $LN35@DrawCandid
; Line 1091
  0066b	8b f4		 mov	 esi, esp
  0066d	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _gSkinIME+20
  00673	52		 push	 edx
  00674	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _bottom$[ebp]
  0067a	50		 push	 eax
  0067b	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _seperateLineX$[ebp]
  00681	83 e9 01	 sub	 ecx, 1
  00684	51		 push	 ecx
  00685	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _top$[ebp]
  0068b	52		 push	 edx
  0068c	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _left$[ebp]
  00692	50		 push	 eax
  00693	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
  00699	3b f4		 cmp	 esi, esp
  0069b	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1092
  006a0	8b f4		 mov	 esi, esp
  006a2	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR _gSkinIME+20
  006a8	51		 push	 ecx
  006a9	8b 95 38 ff ff
	ff		 mov	 edx, DWORD PTR _bottom$[ebp]
  006af	52		 push	 edx
  006b0	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _right$[ebp]
  006b6	50		 push	 eax
  006b7	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _top$[ebp]
  006bd	51		 push	 ecx
  006be	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _seperateLineX$[ebp]
  006c4	52		 push	 edx
  006c5	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
  006cb	3b f4		 cmp	 esi, esp
  006cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN35@DrawCandid:
; Line 1096
  006d2	eb 70		 jmp	 SHORT $LN37@DrawCandid
$LN36@DrawCandid:
; Line 1098
  006d4	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  006db	eb 09		 jmp	 SHORT $LN32@DrawCandid
$LN31@DrawCandid:
  006dd	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  006e0	83 c0 01	 add	 eax, 1
  006e3	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN32@DrawCandid:
  006e6	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  006e9	3b 8d 50 ff ff
	ff		 cmp	 ecx, DWORD PTR _slotsUsed$[ebp]
  006ef	73 53		 jae	 SHORT $LN37@DrawCandid
; Line 1100
  006f1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
  006f8	74 35		 je	 SHORT $LN29@DrawCandid
; Line 1101
  006fa	8b f4		 mov	 esi, esp
  006fc	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR _gSkinIME+20
  00702	52		 push	 edx
  00703	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _bottom$[ebp]
  00709	50		 push	 eax
  0070a	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _left$[ebp]
  00710	03 4d e0	 add	 ecx, DWORD PTR _largest$[ebp]
  00713	51		 push	 ecx
  00714	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _top$[ebp]
  0071a	52		 push	 edx
  0071b	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _left$[ebp]
  00721	50		 push	 eax
  00722	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
  00728	3b f4		 cmp	 esi, esp
  0072a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN29@DrawCandid:
; Line 1102
  0072f	8b 4d e0	 mov	 ecx, DWORD PTR _largest$[ebp]
  00732	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _left$[ebp]
  00738	8d 44 0a 01	 lea	 eax, DWORD PTR [edx+ecx+1]
  0073c	89 85 44 ff ff
	ff		 mov	 DWORD PTR _left$[ebp], eax
; Line 1103
  00742	eb 99		 jmp	 SHORT $LN31@DrawCandid
$LN37@DrawCandid:
; Line 1107
  00744	8b 4d f8	 mov	 ecx, DWORD PTR _candX$[ebp]
  00747	83 c1 01	 add	 ecx, 1
  0074a	89 4d f8	 mov	 DWORD PTR _candX$[ebp], ecx
; Line 1108
  0074d	8b 55 f4	 mov	 edx, DWORD PTR _candY$[ebp]
  00750	83 c2 01	 add	 edx, 1
  00753	89 55 f4	 mov	 DWORD PTR _candY$[ebp], edx
; Line 1109
  00756	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bReadingWindow
  0075d	85 c0		 test	 eax, eax
  0075f	0f 84 ad 02 00
	00		 je	 $LN28@DrawCandid
  00765	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bHorizontalReading
  0076c	85 c9		 test	 ecx, ecx
  0076e	0f 84 9e 02 00
	00		 je	 $LN28@DrawCandid
; Line 1111
  00774	c7 85 30 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _iStart$12[ebp], -1
  0077e	c7 85 24 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _iEnd$11[ebp], -1
; Line 1112
  00788	8b 55 f8	 mov	 edx, DWORD PTR _candX$[ebp]
  0078b	03 55 a0	 add	 edx, DWORD PTR _dwMarginX$[ebp]
  0078e	89 55 f8	 mov	 DWORD PTR _candX$[ebp], edx
; Line 1116
  00791	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_iReadingError, 0
  00798	0f 8c 41 01 00
	00		 jl	 $LN27@DrawCandid
; Line 1118
  0079e	8b f4		 mov	 esi, esp
  007a0	68 00 00 00 00	 push	 OFFSET _g_szReadingString
  007a5	6a 20		 push	 32			; 00000020H
  007a7	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _szTemp$9[ebp]
  007ad	50		 push	 eax
  007ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  007b4	83 c4 0c	 add	 esp, 12			; 0000000cH
  007b7	3b f4		 cmp	 esi, esp
  007b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1119
  007be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_iReadingError
  007c4	8d 94 4d d0 fe
	ff ff		 lea	 edx, DWORD PTR _szTemp$9[ebp+ecx*2]
  007cb	89 95 c8 fe ff
	ff		 mov	 DWORD PTR _psz$8[ebp], edx
; Line 1120
  007d1	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _psz$8[ebp]
  007d7	83 c0 02	 add	 eax, 2
  007da	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _psz$8[ebp], eax
; Line 1121
  007e0	33 c9		 xor	 ecx, ecx
  007e2	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR _psz$8[ebp]
  007e8	66 89 0a	 mov	 WORD PTR [edx], cx
; Line 1122
  007eb	8b f4		 mov	 esi, esp
  007ed	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _iDummy$10[ebp]
  007f3	50		 push	 eax
  007f4	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _iEnd$11[ebp]
  007fa	51		 push	 ecx
  007fb	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$9[ebp]
  00801	52		 push	 edx
  00802	a1 08 00 00 00	 mov	 eax, DWORD PTR _g_CaretInfo+8
  00807	8b 10		 mov	 edx, DWORD PTR [eax]
  00809	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  0080f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00812	ff d0		 call	 eax
  00814	3b f4		 cmp	 esi, esp
  00816	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1123
  0081b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_iReadingError
  00821	66 8b 94 4d d0
	fe ff ff	 mov	 dx, WORD PTR _szTemp$9[ebp+ecx*2]
  00829	66 89 95 c4 fe
	ff ff		 mov	 WORD PTR _cSave$7[ebp], dx
; Line 1124
  00830	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_iReadingError
  00835	d1 e0		 shl	 eax, 1
  00837	89 85 a4 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0083d	83 bd a4 fe ff
	ff 40		 cmp	 DWORD PTR $T1[ebp], 64	; 00000040H
  00844	73 02		 jae	 SHORT $LN84@DrawCandid
  00846	eb 05		 jmp	 SHORT $LN85@DrawCandid
$LN84@DrawCandid:
  00848	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN85@DrawCandid:
  0084d	33 c9		 xor	 ecx, ecx
  0084f	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00855	66 89 8c 15 d0
	fe ff ff	 mov	 WORD PTR _szTemp$9[ebp+edx], cx
; Line 1125
  0085d	8b f4		 mov	 esi, esp
  0085f	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR _iDummy$10[ebp]
  00865	50		 push	 eax
  00866	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _iStart$12[ebp]
  0086c	51		 push	 ecx
  0086d	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR _szTemp$9[ebp]
  00873	52		 push	 edx
  00874	a1 08 00 00 00	 mov	 eax, DWORD PTR _g_CaretInfo+8
  00879	8b 10		 mov	 edx, DWORD PTR [eax]
  0087b	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00881	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00884	ff d0		 call	 eax
  00886	3b f4		 cmp	 esi, esp
  00888	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1126
  0088d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_iReadingError
  00893	66 8b 95 c4 fe
	ff ff		 mov	 dx, WORD PTR _cSave$7[ebp]
  0089a	66 89 94 4d d0
	fe ff ff	 mov	 WORD PTR _szTemp$9[ebp+ecx*2], dx
; Line 1127
  008a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
  008a9	74 34		 je	 SHORT $LN27@DrawCandid
; Line 1129
  008ab	8b f4		 mov	 esi, esp
  008ad	a1 18 00 00 00	 mov	 eax, DWORD PTR _gSkinIME+24
  008b2	50		 push	 eax
  008b3	8b 4d f4	 mov	 ecx, DWORD PTR _candY$[ebp]
  008b6	03 4d e4	 add	 ecx, DWORD PTR _largest$[ebp+4]
  008b9	51		 push	 ecx
  008ba	8b 55 f8	 mov	 edx, DWORD PTR _candX$[ebp]
  008bd	03 95 24 ff ff
	ff		 add	 edx, DWORD PTR _iEnd$11[ebp]
  008c3	52		 push	 edx
  008c4	8b 45 f4	 mov	 eax, DWORD PTR _candY$[ebp]
  008c7	50		 push	 eax
  008c8	8b 4d f8	 mov	 ecx, DWORD PTR _candX$[ebp]
  008cb	03 8d 30 ff ff
	ff		 add	 ecx, DWORD PTR _iStart$12[ebp]
  008d1	51		 push	 ecx
  008d2	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
  008d8	3b f4		 cmp	 esi, esp
  008da	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN27@DrawCandid:
; Line 1132
  008df	8b f4		 mov	 esi, esp
  008e1	8b 55 f4	 mov	 edx, DWORD PTR _candY$[ebp]
  008e4	52		 push	 edx
  008e5	8b 45 f8	 mov	 eax, DWORD PTR _candX$[ebp]
  008e8	50		 push	 eax
  008e9	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  008ef	8b 11		 mov	 edx, DWORD PTR [ecx]
  008f1	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  008f7	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  008fa	ff d0		 call	 eax
  008fc	3b f4		 cmp	 esi, esp
  008fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1133
  00903	8b f4		 mov	 esi, esp
  00905	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+16
  0090b	51		 push	 ecx
  0090c	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+8
  00912	8b 02		 mov	 eax, DWORD PTR [edx]
  00914	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  0091a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0091d	ff d2		 call	 edx
  0091f	3b f4		 cmp	 esi, esp
  00921	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1134
  00926	8b f4		 mov	 esi, esp
  00928	68 00 00 00 00	 push	 OFFSET _g_szReadingString
  0092d	a1 08 00 00 00	 mov	 eax, DWORD PTR _g_CaretInfo+8
  00932	8b 10		 mov	 edx, DWORD PTR [eax]
  00934	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  0093a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0093d	ff d0		 call	 eax
  0093f	3b f4		 cmp	 esi, esp
  00941	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1137
  00946	83 bd 30 ff ff
	ff 00		 cmp	 DWORD PTR _iStart$12[ebp], 0
  0094d	0f 8c ba 00 00
	00		 jl	 $LN25@DrawCandid
; Line 1139
  00953	8b f4		 mov	 esi, esp
  00955	8b 4d f4	 mov	 ecx, DWORD PTR _candY$[ebp]
  00958	51		 push	 ecx
  00959	8b 55 f8	 mov	 edx, DWORD PTR _candX$[ebp]
  0095c	03 95 30 ff ff
	ff		 add	 edx, DWORD PTR _iStart$12[ebp]
  00962	52		 push	 edx
  00963	a1 08 00 00 00	 mov	 eax, DWORD PTR _g_CaretInfo+8
  00968	8b 10		 mov	 edx, DWORD PTR [eax]
  0096a	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00970	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00973	ff d0		 call	 eax
  00975	3b f4		 cmp	 esi, esp
  00977	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1140
  0097c	83 3d 14 00 00
	00 ff		 cmp	 DWORD PTR _gSkinIME+20, -1
  00983	75 0c		 jne	 SHORT $LN23@DrawCandid
  00985	81 3d 18 00 00
	00 00 00 00 ff	 cmp	 DWORD PTR _gSkinIME+24, -16777216 ; ff000000H
  0098f	74 25		 je	 SHORT $LN24@DrawCandid
$LN23@DrawCandid:
; Line 1141
  00991	8b f4		 mov	 esi, esp
  00993	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+16
  00999	51		 push	 ecx
  0099a	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+8
  009a0	8b 02		 mov	 eax, DWORD PTR [edx]
  009a2	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  009a8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  009ab	ff d2		 call	 edx
  009ad	3b f4		 cmp	 esi, esp
  009af	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1142
  009b4	eb 2e		 jmp	 SHORT $LN22@DrawCandid
$LN24@DrawCandid:
; Line 1143
  009b6	a1 10 00 00 00	 mov	 eax, DWORD PTR _g_CaretInfo+16
  009bb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009c0	f7 d0		 not	 eax
  009c2	2d 00 00 00 01	 sub	 eax, 16777216		; 01000000H
  009c7	8b f4		 mov	 esi, esp
  009c9	50		 push	 eax
  009ca	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  009d0	8b 11		 mov	 edx, DWORD PTR [ecx]
  009d2	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  009d8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  009db	ff d0		 call	 eax
  009dd	3b f4		 cmp	 esi, esp
  009df	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN22@DrawCandid:
; Line 1144
  009e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_iReadingError
  009ea	8d 94 4d d0 fe
	ff ff		 lea	 edx, DWORD PTR _szTemp$9[ebp+ecx*2]
  009f1	8b f4		 mov	 esi, esp
  009f3	52		 push	 edx
  009f4	a1 08 00 00 00	 mov	 eax, DWORD PTR _g_CaretInfo+8
  009f9	8b 10		 mov	 edx, DWORD PTR [eax]
  009fb	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00a01	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00a04	ff d0		 call	 eax
  00a06	3b f4		 cmp	 esi, esp
  00a08	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN25@DrawCandid:
; Line 1147
  00a0d	e9 d3 03 00 00	 jmp	 $LN82@DrawCandid
$LN28@DrawCandid:
; Line 1149
  00a12	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00a19	eb 09		 jmp	 SHORT $LN20@DrawCandid
$LN19@DrawCandid:
  00a1b	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00a1e	83 c1 01	 add	 ecx, 1
  00a21	89 4d ec	 mov	 DWORD PTR _i$[ebp], ecx
$LN20@DrawCandid:
  00a24	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  00a27	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _g_uCandPageSize
  00a2d	0f 8d b2 03 00
	00		 jge	 $LN82@DrawCandid
  00a33	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00a36	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _g_dwCount
  00a3c	0f 83 a3 03 00
	00		 jae	 $LN82@DrawCandid
; Line 1151
  00a42	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_dwSelection
  00a48	3b 4d ec	 cmp	 ecx, DWORD PTR _i$[ebp]
  00a4b	0f 85 04 01 00
	00		 jne	 $LN17@DrawCandid
; Line 1153
  00a51	83 3d 14 00 00
	00 ff		 cmp	 DWORD PTR _gSkinIME+20, -1
  00a58	75 0c		 jne	 SHORT $LN15@DrawCandid
  00a5a	81 3d 18 00 00
	00 00 00 00 ff	 cmp	 DWORD PTR _gSkinIME+24, -16777216 ; ff000000H
  00a64	74 24		 je	 SHORT $LN16@DrawCandid
$LN15@DrawCandid:
; Line 1154
  00a66	8b f4		 mov	 esi, esp
  00a68	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+16
  00a6e	52		 push	 edx
  00a6f	a1 08 00 00 00	 mov	 eax, DWORD PTR _g_CaretInfo+8
  00a74	8b 10		 mov	 edx, DWORD PTR [eax]
  00a76	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00a7c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00a7f	ff d0		 call	 eax
  00a81	3b f4		 cmp	 esi, esp
  00a83	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1155
  00a88	eb 31		 jmp	 SHORT $LN14@DrawCandid
$LN16@DrawCandid:
; Line 1156
  00a8a	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+16
  00a90	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00a96	f7 d1		 not	 ecx
  00a98	81 e9 00 00 00
	01		 sub	 ecx, 16777216		; 01000000H
  00a9e	8b f4		 mov	 esi, esp
  00aa0	51		 push	 ecx
  00aa1	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+8
  00aa7	8b 02		 mov	 eax, DWORD PTR [edx]
  00aa9	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00aaf	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00ab2	ff d2		 call	 edx
  00ab4	3b f4		 cmp	 esi, esp
  00ab6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN14@DrawCandid:
; Line 1158
  00abb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
  00ac2	0f 84 8b 00 00
	00		 je	 $LN13@DrawCandid
; Line 1160
  00ac8	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bReadingWindow
  00acf	85 c0		 test	 eax, eax
  00ad1	75 0b		 jne	 SHORT $LN11@DrawCandid
  00ad3	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bVerticalCand
  00ada	85 c9		 test	 ecx, ecx
  00adc	74 43		 je	 SHORT $LN12@DrawCandid
$LN11@DrawCandid:
; Line 1163
  00ade	8b f4		 mov	 esi, esp
  00ae0	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR _gSkinIME+24
  00ae6	52		 push	 edx
  00ae7	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00aea	83 c0 01	 add	 eax, 1
  00aed	0f af 45 e4	 imul	 eax, DWORD PTR _largest$[ebp+4]
  00af1	03 45 f4	 add	 eax, DWORD PTR _candY$[ebp]
  00af4	50		 push	 eax
  00af5	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _dwCandWidth$[ebp]
  00afb	8b 55 f8	 mov	 edx, DWORD PTR _candX$[ebp]
  00afe	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  00b02	50		 push	 eax
  00b03	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00b06	0f af 4d e4	 imul	 ecx, DWORD PTR _largest$[ebp+4]
  00b0a	03 4d f4	 add	 ecx, DWORD PTR _candY$[ebp]
  00b0d	51		 push	 ecx
  00b0e	8b 55 f8	 mov	 edx, DWORD PTR _candX$[ebp]
  00b11	52		 push	 edx
  00b12	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
  00b18	3b f4		 cmp	 esi, esp
  00b1a	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1164
  00b1f	eb 32		 jmp	 SHORT $LN13@DrawCandid
$LN12@DrawCandid:
; Line 1167
  00b21	8b f4		 mov	 esi, esp
  00b23	a1 18 00 00 00	 mov	 eax, DWORD PTR _gSkinIME+24
  00b28	50		 push	 eax
  00b29	8b 4d f4	 mov	 ecx, DWORD PTR _candY$[ebp]
  00b2c	03 4d e4	 add	 ecx, DWORD PTR _largest$[ebp+4]
  00b2f	51		 push	 ecx
  00b30	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  00b33	8b 45 f8	 mov	 eax, DWORD PTR _candX$[ebp]
  00b36	03 84 95 74 ff
	ff ff		 add	 eax, DWORD PTR _adwCandWidth$[ebp+edx*4]
  00b3d	50		 push	 eax
  00b3e	8b 4d f4	 mov	 ecx, DWORD PTR _candY$[ebp]
  00b41	51		 push	 ecx
  00b42	8b 55 f8	 mov	 edx, DWORD PTR _candX$[ebp]
  00b45	52		 push	 edx
  00b46	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
  00b4c	3b f4		 cmp	 esi, esp
  00b4e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@DrawCandid:
; Line 1170
  00b53	eb 22		 jmp	 SHORT $LN9@DrawCandid
$LN17@DrawCandid:
; Line 1171
  00b55	8b f4		 mov	 esi, esp
  00b57	a1 10 00 00 00	 mov	 eax, DWORD PTR _g_CaretInfo+16
  00b5c	50		 push	 eax
  00b5d	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00b63	8b 11		 mov	 edx, DWORD PTR [ecx]
  00b65	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00b6b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00b6e	ff d0		 call	 eax
  00b70	3b f4		 cmp	 esi, esp
  00b72	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN9@DrawCandid:
; Line 1172
  00b77	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00b7a	c1 e1 09	 shl	 ecx, 9
  00b7d	ba 02 00 00 00	 mov	 edx, 2
  00b82	6b c2 00	 imul	 eax, edx, 0
  00b85	0f b7 8c 01 00
	00 00 00	 movzx	 ecx, WORD PTR _g_szCandidate[ecx+eax]
  00b8d	85 c9		 test	 ecx, ecx
  00b8f	0f 84 fd 01 00
	00		 je	 $LN8@DrawCandid
; Line 1174
  00b95	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _g_bReadingWindow
  00b9c	85 d2		 test	 edx, edx
  00b9e	0f 85 39 01 00
	00		 jne	 $LN7@DrawCandid
  00ba4	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bVerticalCand
  00bab	85 c0		 test	 eax, eax
  00bad	0f 84 2a 01 00
	00		 je	 $LN7@DrawCandid
; Line 1179
  00bb3	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00bb6	c1 e1 09	 shl	 ecx, 9
  00bb9	ba 02 00 00 00	 mov	 edx, 2
  00bbe	6b c2 00	 imul	 eax, edx, 0
  00bc1	66 8b 8c 01 00
	00 00 00	 mov	 cx, WORD PTR _g_szCandidate[ecx+eax]
  00bc9	66 89 8d bc fe
	ff ff		 mov	 WORD PTR _szOneDigit$6[ebp], cx
  00bd0	33 d2		 xor	 edx, edx
  00bd2	66 89 95 be fe
	ff ff		 mov	 WORD PTR _szOneDigit$6[ebp+2], dx
; Line 1180
  00bd9	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00bdc	c1 e0 09	 shl	 eax, 9
  00bdf	b9 02 00 00 00	 mov	 ecx, 2
  00be4	6b d1 00	 imul	 edx, ecx, 0
  00be7	0f b7 84 10 00
	00 00 00	 movzx	 eax, WORD PTR _g_szCandidate[eax+edx]
  00bef	83 e8 30	 sub	 eax, 48			; 00000030H
  00bf2	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _nOneDigit$5[ebp], eax
; Line 1181
  00bf8	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00bfb	c1 e1 09	 shl	 ecx, 9
  00bfe	81 c1 04 00 00
	00		 add	 ecx, OFFSET _g_szCandidate+4
  00c04	89 8d b0 fe ff
	ff		 mov	 DWORD PTR _szCandidateBody$4[ebp], ecx
; Line 1183
  00c0a	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _seperateLineX$[ebp]
  00c10	2b 55 f8	 sub	 edx, DWORD PTR _candX$[ebp]
  00c13	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _nOneDigit$5[ebp]
  00c19	2b 14 85 00 00
	00 00		 sub	 edx, DWORD PTR ?uDigitWidthList@?N@??DrawCandidateList@@YAXXZ@4PAKA[eax*4]
  00c20	d1 ea		 shr	 edx, 1
  00c22	03 55 f8	 add	 edx, DWORD PTR _candX$[ebp]
  00c25	89 95 ac fe ff
	ff		 mov	 DWORD PTR _dx$3[ebp], edx
; Line 1184
  00c2b	8b 4d e4	 mov	 ecx, DWORD PTR _largest$[ebp+4]
  00c2e	0f af 4d ec	 imul	 ecx, DWORD PTR _i$[ebp]
  00c32	03 4d f4	 add	 ecx, DWORD PTR _candY$[ebp]
  00c35	89 8d a8 fe ff
	ff		 mov	 DWORD PTR _dy$2[ebp], ecx
; Line 1186
  00c3b	8b f4		 mov	 esi, esp
  00c3d	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR _dy$2[ebp]
  00c43	52		 push	 edx
  00c44	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _dx$3[ebp]
  00c4a	50		 push	 eax
  00c4b	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00c51	8b 11		 mov	 edx, DWORD PTR [ecx]
  00c53	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00c59	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00c5c	ff d0		 call	 eax
  00c5e	3b f4		 cmp	 esi, esp
  00c60	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1187
  00c65	8b f4		 mov	 esi, esp
  00c67	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR _szOneDigit$6[ebp]
  00c6d	51		 push	 ecx
  00c6e	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+8
  00c74	8b 02		 mov	 eax, DWORD PTR [edx]
  00c76	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00c7c	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00c7f	ff d2		 call	 edx
  00c81	3b f4		 cmp	 esi, esp
  00c83	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1188
  00c88	8b f4		 mov	 esi, esp
  00c8a	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _dy$2[ebp]
  00c90	50		 push	 eax
  00c91	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _seperateLineX$[ebp]
  00c97	03 4d a0	 add	 ecx, DWORD PTR _dwMarginX$[ebp]
  00c9a	51		 push	 ecx
  00c9b	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+8
  00ca1	8b 02		 mov	 eax, DWORD PTR [edx]
  00ca3	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00ca9	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00cac	ff d2		 call	 edx
  00cae	3b f4		 cmp	 esi, esp
  00cb0	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1189
  00cb5	8b f4		 mov	 esi, esp
  00cb7	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _szCandidateBody$4[ebp]
  00cbd	50		 push	 eax
  00cbe	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00cc4	8b 11		 mov	 edx, DWORD PTR [ecx]
  00cc6	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00ccc	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00ccf	ff d0		 call	 eax
  00cd1	3b f4		 cmp	 esi, esp
  00cd3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00cd8	e9 b5 00 00 00	 jmp	 $LN8@DrawCandid
$LN7@DrawCandid:
; Line 1191
  00cdd	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bReadingWindow
  00ce4	85 c9		 test	 ecx, ecx
  00ce6	74 59		 je	 SHORT $LN5@DrawCandid
; Line 1193
  00ce8	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  00ceb	0f af 55 e4	 imul	 edx, DWORD PTR _largest$[ebp+4]
  00cef	03 55 f4	 add	 edx, DWORD PTR _candY$[ebp]
  00cf2	8b f4		 mov	 esi, esp
  00cf4	52		 push	 edx
  00cf5	8b 45 a0	 mov	 eax, DWORD PTR _dwMarginX$[ebp]
  00cf8	03 45 f8	 add	 eax, DWORD PTR _candX$[ebp]
  00cfb	50		 push	 eax
  00cfc	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00d02	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d04	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00d0a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00d0d	ff d0		 call	 eax
  00d0f	3b f4		 cmp	 esi, esp
  00d11	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1194
  00d16	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00d19	c1 e1 09	 shl	 ecx, 9
  00d1c	81 c1 00 00 00
	00		 add	 ecx, OFFSET _g_szCandidate
  00d22	8b f4		 mov	 esi, esp
  00d24	51		 push	 ecx
  00d25	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+8
  00d2b	8b 02		 mov	 eax, DWORD PTR [edx]
  00d2d	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00d33	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00d36	ff d2		 call	 edx
  00d38	3b f4		 cmp	 esi, esp
  00d3a	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1196
  00d3f	eb 51		 jmp	 SHORT $LN8@DrawCandid
$LN5@DrawCandid:
; Line 1198
  00d41	8b f4		 mov	 esi, esp
  00d43	8b 45 f4	 mov	 eax, DWORD PTR _candY$[ebp]
  00d46	50		 push	 eax
  00d47	8b 4d d8	 mov	 ecx, DWORD PTR _uSpaceWidth$[ebp]
  00d4a	d1 e9		 shr	 ecx, 1
  00d4c	03 4d f8	 add	 ecx, DWORD PTR _candX$[ebp]
  00d4f	51		 push	 ecx
  00d50	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_CaretInfo+8
  00d56	8b 02		 mov	 eax, DWORD PTR [edx]
  00d58	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00d5e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00d61	ff d2		 call	 edx
  00d63	3b f4		 cmp	 esi, esp
  00d65	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1199
  00d6a	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00d6d	c1 e0 09	 shl	 eax, 9
  00d70	05 00 00 00 00	 add	 eax, OFFSET _g_szCandidate
  00d75	8b f4		 mov	 esi, esp
  00d77	50		 push	 eax
  00d78	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00d7e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d80	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_CaretInfo+8
  00d86	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00d89	ff d0		 call	 eax
  00d8b	3b f4		 cmp	 esi, esp
  00d8d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN8@DrawCandid:
; Line 1202
  00d92	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bReadingWindow
  00d99	85 c9		 test	 ecx, ecx
  00d9b	75 43		 jne	 SHORT $LN3@DrawCandid
  00d9d	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _g_bVerticalCand
  00da4	85 d2		 test	 edx, edx
  00da6	75 38		 jne	 SHORT $LN3@DrawCandid
; Line 1204
  00da8	6a 00		 push	 0
  00daa	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  00daf	83 c4 04	 add	 esp, 4
  00db2	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00db7	3d 04 08 00 00	 cmp	 eax, 2052		; 00000804H
  00dbc	75 15		 jne	 SHORT $LN2@DrawCandid
; Line 1205
  00dbe	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00dc1	8b 8c 85 74 ff
	ff ff		 mov	 ecx, DWORD PTR _adwCandWidth$[ebp+eax*4]
  00dc8	03 4d a0	 add	 ecx, DWORD PTR _dwMarginX$[ebp]
  00dcb	03 4d f8	 add	 ecx, DWORD PTR _candX$[ebp]
  00dce	89 4d f8	 mov	 DWORD PTR _candX$[ebp], ecx
; Line 1206
  00dd1	eb 0d		 jmp	 SHORT $LN3@DrawCandid
$LN2@DrawCandid:
; Line 1207
  00dd3	8b 55 e0	 mov	 edx, DWORD PTR _largest$[ebp]
  00dd6	8b 45 f8	 mov	 eax, DWORD PTR _candX$[ebp]
  00dd9	8d 4c 10 01	 lea	 ecx, DWORD PTR [eax+edx+1]
  00ddd	89 4d f8	 mov	 DWORD PTR _candX$[ebp], ecx
$LN3@DrawCandid:
; Line 1209
  00de0	e9 36 fc ff ff	 jmp	 $LN19@DrawCandid
$LN82@DrawCandid:
; Line 1211
  00de5	52		 push	 edx
  00de6	8b cd		 mov	 ecx, ebp
  00de8	50		 push	 eax
  00de9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN99@DrawCandid
  00def	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00df4	58		 pop	 eax
  00df5	5a		 pop	 edx
  00df6	5f		 pop	 edi
  00df7	5e		 pop	 esi
  00df8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00dfb	33 cd		 xor	 ecx, ebp
  00dfd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e02	81 c4 5c 01 00
	00		 add	 esp, 348		; 0000015cH
  00e08	3b ec		 cmp	 ebp, esp
  00e0a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e0f	8b e5		 mov	 esp, ebp
  00e11	5d		 pop	 ebp
  00e12	c3		 ret	 0
  00e13	90		 npad	 1
$LN99@DrawCandid:
  00e14	0c 00 00 00	 DD	 12			; 0000000cH
  00e18	00 00 00 00	 DD	 $LN98@DrawCandid
$LN98@DrawCandid:
  00e1c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00e20	08 00 00 00	 DD	 8
  00e24	00 00 00 00	 DD	 $LN86@DrawCandid
  00e28	cc ff ff ff	 DD	 -52			; ffffffccH
  00e2c	04 00 00 00	 DD	 4
  00e30	00 00 00 00	 DD	 $LN87@DrawCandid
  00e34	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00e38	04 00 00 00	 DD	 4
  00e3c	00 00 00 00	 DD	 $LN88@DrawCandid
  00e40	a8 ff ff ff	 DD	 -88			; ffffffa8H
  00e44	10 00 00 00	 DD	 16			; 00000010H
  00e48	00 00 00 00	 DD	 $LN89@DrawCandid
  00e4c	74 ff ff ff	 DD	 -140			; ffffff74H
  00e50	28 00 00 00	 DD	 40			; 00000028H
  00e54	00 00 00 00	 DD	 $LN90@DrawCandid
  00e58	64 ff ff ff	 DD	 -156			; ffffff64H
  00e5c	04 00 00 00	 DD	 4
  00e60	00 00 00 00	 DD	 $LN91@DrawCandid
  00e64	58 ff ff ff	 DD	 -168			; ffffff58H
  00e68	04 00 00 00	 DD	 4
  00e6c	00 00 00 00	 DD	 $LN92@DrawCandid
  00e70	30 ff ff ff	 DD	 -208			; ffffff30H
  00e74	04 00 00 00	 DD	 4
  00e78	00 00 00 00	 DD	 $LN93@DrawCandid
  00e7c	24 ff ff ff	 DD	 -220			; ffffff24H
  00e80	04 00 00 00	 DD	 4
  00e84	00 00 00 00	 DD	 $LN94@DrawCandid
  00e88	18 ff ff ff	 DD	 -232			; ffffff18H
  00e8c	04 00 00 00	 DD	 4
  00e90	00 00 00 00	 DD	 $LN95@DrawCandid
  00e94	d0 fe ff ff	 DD	 -304			; fffffed0H
  00e98	40 00 00 00	 DD	 64			; 00000040H
  00e9c	00 00 00 00	 DD	 $LN96@DrawCandid
  00ea0	bc fe ff ff	 DD	 -324			; fffffebcH
  00ea4	04 00 00 00	 DD	 4
  00ea8	00 00 00 00	 DD	 $LN97@DrawCandid
$LN97@DrawCandid:
  00eac	73		 DB	 115			; 00000073H
  00ead	7a		 DB	 122			; 0000007aH
  00eae	4f		 DB	 79			; 0000004fH
  00eaf	6e		 DB	 110			; 0000006eH
  00eb0	65		 DB	 101			; 00000065H
  00eb1	44		 DB	 68			; 00000044H
  00eb2	69		 DB	 105			; 00000069H
  00eb3	67		 DB	 103			; 00000067H
  00eb4	69		 DB	 105			; 00000069H
  00eb5	74		 DB	 116			; 00000074H
  00eb6	00		 DB	 0
$LN96@DrawCandid:
  00eb7	73		 DB	 115			; 00000073H
  00eb8	7a		 DB	 122			; 0000007aH
  00eb9	54		 DB	 84			; 00000054H
  00eba	65		 DB	 101			; 00000065H
  00ebb	6d		 DB	 109			; 0000006dH
  00ebc	70		 DB	 112			; 00000070H
  00ebd	00		 DB	 0
$LN95@DrawCandid:
  00ebe	69		 DB	 105			; 00000069H
  00ebf	44		 DB	 68			; 00000044H
  00ec0	75		 DB	 117			; 00000075H
  00ec1	6d		 DB	 109			; 0000006dH
  00ec2	6d		 DB	 109			; 0000006dH
  00ec3	79		 DB	 121			; 00000079H
  00ec4	00		 DB	 0
$LN94@DrawCandid:
  00ec5	69		 DB	 105			; 00000069H
  00ec6	45		 DB	 69			; 00000045H
  00ec7	6e		 DB	 110			; 0000006eH
  00ec8	64		 DB	 100			; 00000064H
  00ec9	00		 DB	 0
$LN93@DrawCandid:
  00eca	69		 DB	 105			; 00000069H
  00ecb	53		 DB	 83			; 00000053H
  00ecc	74		 DB	 116			; 00000074H
  00ecd	61		 DB	 97			; 00000061H
  00ece	72		 DB	 114			; 00000072H
  00ecf	74		 DB	 116			; 00000074H
  00ed0	00		 DB	 0
$LN92@DrawCandid:
  00ed1	74		 DB	 116			; 00000074H
  00ed2	79		 DB	 121			; 00000079H
  00ed3	00		 DB	 0
$LN91@DrawCandid:
  00ed4	74		 DB	 116			; 00000074H
  00ed5	78		 DB	 120			; 00000078H
  00ed6	00		 DB	 0
$LN90@DrawCandid:
  00ed7	61		 DB	 97			; 00000061H
  00ed8	64		 DB	 100			; 00000064H
  00ed9	77		 DB	 119			; 00000077H
  00eda	43		 DB	 67			; 00000043H
  00edb	61		 DB	 97			; 00000061H
  00edc	6e		 DB	 110			; 0000006eH
  00edd	64		 DB	 100			; 00000064H
  00ede	57		 DB	 87			; 00000057H
  00edf	69		 DB	 105			; 00000069H
  00ee0	64		 DB	 100			; 00000064H
  00ee1	74		 DB	 116			; 00000074H
  00ee2	68		 DB	 104			; 00000068H
  00ee3	00		 DB	 0
$LN89@DrawCandid:
  00ee4	73		 DB	 115			; 00000073H
  00ee5	73		 DB	 115			; 00000073H
  00ee6	00		 DB	 0
$LN88@DrawCandid:
  00ee7	75		 DB	 117			; 00000075H
  00ee8	44		 DB	 68			; 00000044H
  00ee9	48		 DB	 72			; 00000048H
  00eea	00		 DB	 0
$LN87@DrawCandid:
  00eeb	75		 DB	 117			; 00000075H
  00eec	44		 DB	 68			; 00000044H
  00eed	57		 DB	 87			; 00000057H
  00eee	00		 DB	 0
$LN86@DrawCandid:
  00eef	6c		 DB	 108			; 0000006cH
  00ef0	61		 DB	 97			; 00000061H
  00ef1	72		 DB	 114			; 00000072H
  00ef2	67		 DB	 103			; 00000067H
  00ef3	65		 DB	 101			; 00000065H
  00ef4	73		 DB	 115			; 00000073H
  00ef5	74		 DB	 116			; 00000074H
  00ef6	00		 DB	 0
?DrawCandidateList@@YAXXZ ENDP				; DrawCandidateList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv407 = -724						; size = 4
tv359 = -720						; size = 4
tv610 = -716						; size = 4
tv685 = -712						; size = 4
tv600 = -708						; size = 4
tv683 = -704						; size = 4
tv588 = -700						; size = 8
tv585 = -692						; size = 4
tv579 = -688						; size = 4
tv571 = -684						; size = 4
tv558 = -680						; size = 8
tv554 = -672						; size = 4
tv543 = -668						; size = 8
tv539 = -660						; size = 4
tv531 = -656						; size = 8
tv527 = -648						; size = 4
tv516 = -644						; size = 8
tv512 = -636						; size = 4
tv483 = -632						; size = 8
tv447 = -624						; size = 4
tv73 = -620						; size = 4
tv65 = -616						; size = 4
_cszSymbol$1 = -612					; size = 4
_h$2 = -604						; size = 4
_w$3 = -592						; size = 4
_fHeight$ = -584					; size = 4
_t1$4 = -580						; size = 4
_dwColor$5 = -576					; size = 4
_radian$6 = -572					; size = 4
_t1$7 = -568						; size = 4
_SizeOfPie$ = -564					; size = 4
_PieData$ = -556					; size = 544
_bOn$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?DrawImeIndicator@@YAXXZ PROC				; DrawImeIndicator
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 597
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 02 00
	00		 sub	 esp, 724		; 000002d4H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 2c fd ff
	ff		 lea	 edi, DWORD PTR [ebp-724]
  00011	b9 b5 00 00 00	 mov	 ecx, 181		; 000000b5H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; Line 598
  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_dwState, 0
  0002e	74 0c		 je	 SHORT $LN27@DrawImeInd
  00030	c7 85 98 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  0003a	eb 0a		 jmp	 SHORT $LN28@DrawImeInd
$LN27@DrawImeInd:
  0003c	c7 85 98 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN28@DrawImeInd:
  00046	8a 85 98 fd ff
	ff		 mov	 al, BYTE PTR tv65[ebp]
  0004c	88 45 fb	 mov	 BYTE PTR _bOn$[ebp], al
; Line 601
  0004f	0f b6 0d 0c 00
	00 00		 movzx	 ecx, BYTE PTR _gSkinIME+12
  00056	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  0005a	f3 0f 11 85 cc
	fd ff ff	 movss	 DWORD PTR _SizeOfPie$[ebp], xmm0
; Line 603
  00062	68 20 02 00 00	 push	 544			; 00000220H
  00067	6a 00		 push	 0
  00069	8d 95 d4 fd ff
	ff		 lea	 edx, DWORD PTR _PieData$[ebp]
  0006f	52		 push	 edx
  00070	e8 00 00 00 00	 call	 _memset
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 605
  00078	0f b6 05 0e 00
	00 00		 movzx	 eax, BYTE PTR _gSkinIME+14
  0007f	89 85 94 fd ff
	ff		 mov	 DWORD PTR tv73[ebp], eax
  00085	83 bd 94 fd ff
	ff 04		 cmp	 DWORD PTR tv73[ebp], 4
  0008c	0f 87 8d 03 00
	00		 ja	 $LN23@DrawImeInd
  00092	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  00098	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN38@DrawImeInd[ecx*4]
$LN22@DrawImeInd:
; Line 609
  0009f	f3 0f 2a 05 1c
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _g_CaretInfo+28
  000a7	f3 0f 58 85 cc
	fd ff ff	 addss	 xmm0, DWORD PTR _SizeOfPie$[ebp]
  000af	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40800000
  000b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_screenWidth
  000bd	89 95 90 fd ff
	ff		 mov	 DWORD PTR tv447[ebp], edx
  000c3	f2 0f 2a 8d 90
	fd ff ff	 cvtsi2sd xmm1, DWORD PTR tv447[ebp]
  000cb	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR tv447[ebp]
  000d1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000d4	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000dd	f2 0f 11 8d 88
	fd ff ff	 movsd	 QWORD PTR tv483[ebp], xmm1
  000e5	f2 0f 5a 8d 88
	fd ff ff	 cvtsd2ss xmm1, QWORD PTR tv483[ebp]
  000ed	0f 2f c1	 comiss	 xmm0, xmm1
  000f0	76 6f		 jbe	 SHORT $LN21@DrawImeInd
; Line 611
  000f2	f3 0f 10 85 cc
	fd ff ff	 movss	 xmm0, DWORD PTR _SizeOfPie$[ebp]
  000fa	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00101	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00109	f3 0f 2a 0d 14
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _g_CaretInfo+20
  00111	f3 0f 58 c1	 addss	 xmm0, xmm1
  00115	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40800000
  0011d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00122	6b d1 00	 imul	 edx, ecx, 0
  00125	f3 0f 11 84 15
	d4 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+edx], xmm0
; Line 613
  0012e	f3 0f 2a 05 18
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _g_CaretInfo+24
  00136	a1 20 00 00 00	 mov	 eax, DWORD PTR _g_CaretInfo+32
  0013b	2b 05 18 00 00
	00		 sub	 eax, DWORD PTR _g_CaretInfo+24
  00141	99		 cdq
  00142	2b c2		 sub	 eax, edx
  00144	d1 f8		 sar	 eax, 1
  00146	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  0014a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0014e	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00153	6b c8 00	 imul	 ecx, eax, 0
  00156	f3 0f 11 84 0d
	d8 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+ecx+4], xmm0
; Line 615
  0015f	eb 7c		 jmp	 SHORT $LN20@DrawImeInd
$LN21@DrawImeInd:
; Line 617
  00161	f3 0f 10 85 cc
	fd ff ff	 movss	 xmm0, DWORD PTR _SizeOfPie$[ebp]
  00169	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00171	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00178	f3 0f 2a 0d 1c
	00 00 00	 cvtsi2ss xmm1, DWORD PTR _g_CaretInfo+28
  00180	f3 0f 58 c1	 addss	 xmm0, xmm1
  00184	0f b6 15 0c 00
	00 00		 movzx	 edx, BYTE PTR _gSkinIME+12
  0018b	f3 0f 2a ca	 cvtsi2ss xmm1, edx
  0018f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00193	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40800000
  0019b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  001a0	6b c8 00	 imul	 ecx, eax, 0
  001a3	f3 0f 11 84 0d
	d4 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+ecx], xmm0
; Line 619
  001ac	f3 0f 2a 05 18
	00 00 00	 cvtsi2ss xmm0, DWORD PTR _g_CaretInfo+24
  001b4	a1 20 00 00 00	 mov	 eax, DWORD PTR _g_CaretInfo+32
  001b9	2b 05 18 00 00
	00		 sub	 eax, DWORD PTR _g_CaretInfo+24
  001bf	99		 cdq
  001c0	2b c2		 sub	 eax, edx
  001c2	d1 f8		 sar	 eax, 1
  001c4	f3 0f 2a c8	 cvtsi2ss xmm1, eax
  001c8	f3 0f 58 c1	 addss	 xmm0, xmm1
  001cc	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  001d1	6b c2 00	 imul	 eax, edx, 0
  001d4	f3 0f 11 84 05
	d8 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+eax+4], xmm0
$LN20@DrawImeInd:
; Line 621
  001dd	e9 3d 02 00 00	 jmp	 $LN23@DrawImeInd
$LN19@DrawImeInd:
; Line 624
  001e2	f3 0f 10 85 cc
	fd ff ff	 movss	 xmm0, DWORD PTR _SizeOfPie$[ebp]
  001ea	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  001f2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40800000
  001fa	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  001ff	6b d1 00	 imul	 edx, ecx, 0
  00202	f3 0f 11 84 15
	d4 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+edx], xmm0
; Line 625
  0020b	f3 0f 10 85 cc
	fd ff ff	 movss	 xmm0, DWORD PTR _SizeOfPie$[ebp]
  00213	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  0021b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40800000
  00223	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00228	6b c8 00	 imul	 ecx, eax, 0
  0022b	f3 0f 11 84 0d
	d8 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+ecx+4], xmm0
; Line 626
  00234	e9 e6 01 00 00	 jmp	 $LN23@DrawImeInd
$LN18@DrawImeInd:
; Line 628
  00239	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_screenWidth
  0023f	89 95 84 fd ff
	ff		 mov	 DWORD PTR tv512[ebp], edx
  00245	f2 0f 2a 85 84
	fd ff ff	 cvtsi2sd xmm0, DWORD PTR tv512[ebp]
  0024d	8b 85 84 fd ff
	ff		 mov	 eax, DWORD PTR tv512[ebp]
  00253	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00256	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0025f	f2 0f 11 85 7c
	fd ff ff	 movsd	 QWORD PTR tv516[ebp], xmm0
  00267	f2 0f 5a 85 7c
	fd ff ff	 cvtsd2ss xmm0, QWORD PTR tv516[ebp]
  0026f	f3 0f 10 8d cc
	fd ff ff	 movss	 xmm1, DWORD PTR _SizeOfPie$[ebp]
  00277	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  0027f	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@40800000
  00287	f3 0f 5c c1	 subss	 xmm0, xmm1
  0028b	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00290	6b d1 00	 imul	 edx, ecx, 0
  00293	f3 0f 11 84 15
	d4 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+edx], xmm0
; Line 629
  0029c	f3 0f 10 85 cc
	fd ff ff	 movss	 xmm0, DWORD PTR _SizeOfPie$[ebp]
  002a4	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  002ac	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40800000
  002b4	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  002b9	6b c8 00	 imul	 ecx, eax, 0
  002bc	f3 0f 11 84 0d
	d8 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+ecx+4], xmm0
; Line 630
  002c5	e9 55 01 00 00	 jmp	 $LN23@DrawImeInd
$LN17@DrawImeInd:
; Line 632
  002ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_screenWidth
  002d0	89 95 78 fd ff
	ff		 mov	 DWORD PTR tv527[ebp], edx
  002d6	f2 0f 2a 85 78
	fd ff ff	 cvtsi2sd xmm0, DWORD PTR tv527[ebp]
  002de	8b 85 78 fd ff
	ff		 mov	 eax, DWORD PTR tv527[ebp]
  002e4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002e7	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  002f0	f2 0f 11 85 70
	fd ff ff	 movsd	 QWORD PTR tv531[ebp], xmm0
  002f8	f2 0f 5a 85 70
	fd ff ff	 cvtsd2ss xmm0, QWORD PTR tv531[ebp]
  00300	f3 0f 10 8d cc
	fd ff ff	 movss	 xmm1, DWORD PTR _SizeOfPie$[ebp]
  00308	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  00310	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@40800000
  00318	f3 0f 5c c1	 subss	 xmm0, xmm1
  0031c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00321	6b d1 00	 imul	 edx, ecx, 0
  00324	f3 0f 11 84 15
	d4 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+edx], xmm0
; Line 633
  0032d	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_screenHeight
  00332	89 85 6c fd ff
	ff		 mov	 DWORD PTR tv539[ebp], eax
  00338	f2 0f 2a 85 6c
	fd ff ff	 cvtsi2sd xmm0, DWORD PTR tv539[ebp]
  00340	8b 8d 6c fd ff
	ff		 mov	 ecx, DWORD PTR tv539[ebp]
  00346	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00349	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00352	f2 0f 11 85 64
	fd ff ff	 movsd	 QWORD PTR tv543[ebp], xmm0
  0035a	f2 0f 5a 85 64
	fd ff ff	 cvtsd2ss xmm0, QWORD PTR tv543[ebp]
  00362	f3 0f 10 8d cc
	fd ff ff	 movss	 xmm1, DWORD PTR _SizeOfPie$[ebp]
  0036a	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  00372	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@40800000
  0037a	f3 0f 5c c1	 subss	 xmm0, xmm1
  0037e	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00383	6b c2 00	 imul	 eax, edx, 0
  00386	f3 0f 11 84 05
	d8 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+eax+4], xmm0
; Line 634
  0038f	e9 8b 00 00 00	 jmp	 $LN23@DrawImeInd
$LN16@DrawImeInd:
; Line 636
  00394	f3 0f 10 85 cc
	fd ff ff	 movss	 xmm0, DWORD PTR _SizeOfPie$[ebp]
  0039c	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  003a4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40800000
  003ac	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  003b1	6b d1 00	 imul	 edx, ecx, 0
  003b4	f3 0f 11 84 15
	d4 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+edx], xmm0
; Line 637
  003bd	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_screenHeight
  003c2	89 85 60 fd ff
	ff		 mov	 DWORD PTR tv554[ebp], eax
  003c8	f2 0f 2a 85 60
	fd ff ff	 cvtsi2sd xmm0, DWORD PTR tv554[ebp]
  003d0	8b 8d 60 fd ff
	ff		 mov	 ecx, DWORD PTR tv554[ebp]
  003d6	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  003d9	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  003e2	f2 0f 11 85 58
	fd ff ff	 movsd	 QWORD PTR tv558[ebp], xmm0
  003ea	f2 0f 5a 85 58
	fd ff ff	 cvtsd2ss xmm0, QWORD PTR tv558[ebp]
  003f2	f3 0f 10 8d cc
	fd ff ff	 movss	 xmm1, DWORD PTR _SizeOfPie$[ebp]
  003fa	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40000000
  00402	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@40800000
  0040a	f3 0f 5c c1	 subss	 xmm0, xmm1
  0040e	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00413	6b c2 00	 imul	 eax, edx, 0
  00416	f3 0f 11 84 05
	d8 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+eax+4], xmm0
$LN23@DrawImeInd:
; Line 640
  0041f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00424	6b d1 00	 imul	 edx, ecx, 0
  00427	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0042f	f3 0f 11 84 15
	e0 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+edx+12], xmm0
; Line 641
  00438	0f b6 45 fb	 movzx	 eax, BYTE PTR _bOn$[ebp]
  0043c	85 c0		 test	 eax, eax
  0043e	0f 84 9c 00 00
	00		 je	 $LN15@DrawImeInd
; Line 643
  00444	8b f4		 mov	 esi, esp
  00446	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0044c	3b f4		 cmp	 esi, esp
  0044e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00453	89 85 54 fd ff
	ff		 mov	 DWORD PTR tv571[ebp], eax
  00459	f2 0f 2a 85 54
	fd ff ff	 cvtsi2sd xmm0, DWORD PTR tv571[ebp]
  00461	8b 8d 54 fd ff
	ff		 mov	 ecx, DWORD PTR tv571[ebp]
  00467	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0046a	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00473	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR _lastSwirl
  0047b	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@406f400000000000
  00483	76 59		 jbe	 SHORT $LN13@DrawImeInd
; Line 645
  00485	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _swirl
  0048b	83 c2 01	 add	 edx, 1
  0048e	89 15 00 00 00
	00		 mov	 DWORD PTR _swirl, edx
; Line 646
  00494	8b f4		 mov	 esi, esp
  00496	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0049c	3b f4		 cmp	 esi, esp
  0049e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004a3	89 85 50 fd ff
	ff		 mov	 DWORD PTR tv579[ebp], eax
  004a9	f2 0f 2a 85 50
	fd ff ff	 cvtsi2sd xmm0, DWORD PTR tv579[ebp]
  004b1	8b 85 50 fd ff
	ff		 mov	 eax, DWORD PTR tv579[ebp]
  004b7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  004ba	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  004c3	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR _lastSwirl, xmm0
; Line 647
  004cb	83 3d 00 00 00
	00 0d		 cmp	 DWORD PTR _swirl, 13	; 0000000dH
  004d2	76 0a		 jbe	 SHORT $LN13@DrawImeInd
; Line 648
  004d4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _swirl, 0
$LN13@DrawImeInd:
; Line 651
  004de	eb 0a		 jmp	 SHORT $LN12@DrawImeInd
$LN15@DrawImeInd:
; Line 652
  004e0	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _swirl, 0
$LN12@DrawImeInd:
; Line 653
  004ea	c7 85 c8 fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _t1$7[ebp], 1
  004f4	eb 0f		 jmp	 SHORT $LN11@DrawImeInd
$LN10@DrawImeInd:
  004f6	8b 8d c8 fd ff
	ff		 mov	 ecx, DWORD PTR _t1$7[ebp]
  004fc	83 c1 01	 add	 ecx, 1
  004ff	89 8d c8 fd ff
	ff		 mov	 DWORD PTR _t1$7[ebp], ecx
$LN11@DrawImeInd:
  00505	83 bd c8 fd ff
	ff 10		 cmp	 DWORD PTR _t1$7[ebp], 16 ; 00000010H
  0050c	0f 8d 4a 01 00
	00		 jge	 $LN9@DrawImeInd
; Line 655
  00512	0f b6 55 fb	 movzx	 edx, BYTE PTR _bOn$[ebp]
  00516	0f af 15 00 00
	00 00		 imul	 edx, DWORD PTR _swirl
  0051d	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _t1$7[ebp]
  00523	8d 4c 10 ff	 lea	 ecx, DWORD PTR [eax+edx-1]
  00527	89 8d 4c fd ff
	ff		 mov	 DWORD PTR tv585[ebp], ecx
  0052d	f2 0f 2a 85 4c
	fd ff ff	 cvtsi2sd xmm0, DWORD PTR tv585[ebp]
  00535	8b 95 4c fd ff
	ff		 mov	 edx, DWORD PTR tv585[ebp]
  0053b	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  0053e	f2 0f 58 04 d5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  00547	f2 0f 11 85 44
	fd ff ff	 movsd	 QWORD PTR tv588[ebp], xmm0
  0054f	f2 0f 5a 85 44
	fd ff ff	 cvtsd2ss xmm0, QWORD PTR tv588[ebp]
  00557	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40c90fda
  0055f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41600000
  00567	f3 0f 11 85 c4
	fd ff ff	 movss	 DWORD PTR _radian$6[ebp], xmm0
; Line 656
  0056f	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00574	6b f0 00	 imul	 esi, eax, 0
  00577	f3 0f 10 85 cc
	fd ff ff	 movss	 xmm0, DWORD PTR _SizeOfPie$[ebp]
  0057f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00587	51		 push	 ecx
  00588	f3 0f 10 8d c4
	fd ff ff	 movss	 xmm1, DWORD PTR _radian$6[ebp]
  00590	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00595	f3 0f 11 85 40
	fd ff ff	 movss	 DWORD PTR tv683[ebp], xmm0
  0059d	e8 00 00 00 00	 call	 ?cos@@YAMM@Z		; cos
  005a2	83 c4 04	 add	 esp, 4
  005a5	d9 9d 3c fd ff
	ff		 fstp	 DWORD PTR tv600[ebp]
  005ab	f3 0f 10 85 40
	fd ff ff	 movss	 xmm0, DWORD PTR tv683[ebp]
  005b3	f3 0f 59 85 3c
	fd ff ff	 mulss	 xmm0, DWORD PTR tv600[ebp]
  005bb	f3 0f 58 84 35
	d4 fd ff ff	 addss	 xmm0, DWORD PTR _PieData$[ebp+esi]
  005c4	8b 8d c8 fd ff
	ff		 mov	 ecx, DWORD PTR _t1$7[ebp]
  005ca	c1 e1 05	 shl	 ecx, 5
  005cd	f3 0f 11 84 0d
	d4 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+ecx], xmm0
; Line 657
  005d6	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  005db	6b f2 00	 imul	 esi, edx, 0
  005de	f3 0f 10 85 cc
	fd ff ff	 movss	 xmm0, DWORD PTR _SizeOfPie$[ebp]
  005e6	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  005ee	51		 push	 ecx
  005ef	f3 0f 10 8d c4
	fd ff ff	 movss	 xmm1, DWORD PTR _radian$6[ebp]
  005f7	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  005fc	f3 0f 11 85 38
	fd ff ff	 movss	 DWORD PTR tv685[ebp], xmm0
  00604	e8 00 00 00 00	 call	 ?sin@@YAMM@Z		; sin
  00609	83 c4 04	 add	 esp, 4
  0060c	d9 9d 34 fd ff
	ff		 fstp	 DWORD PTR tv610[ebp]
  00612	f3 0f 10 85 38
	fd ff ff	 movss	 xmm0, DWORD PTR tv685[ebp]
  0061a	f3 0f 59 85 34
	fd ff ff	 mulss	 xmm0, DWORD PTR tv610[ebp]
  00622	f3 0f 58 84 35
	d8 fd ff ff	 addss	 xmm0, DWORD PTR _PieData$[ebp+esi+4]
  0062b	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _t1$7[ebp]
  00631	c1 e0 05	 shl	 eax, 5
  00634	f3 0f 11 84 05
	d8 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+eax+4], xmm0
; Line 658
  0063d	8b 8d c8 fd ff
	ff		 mov	 ecx, DWORD PTR _t1$7[ebp]
  00643	c1 e1 05	 shl	 ecx, 5
  00646	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0064e	f3 0f 11 84 0d
	e0 fd ff ff	 movss	 DWORD PTR _PieData$[ebp+ecx+12], xmm0
; Line 659
  00657	e9 9a fe ff ff	 jmp	 $LN10@DrawImeInd
$LN9@DrawImeInd:
; Line 661
  0065c	0f b6 15 0d 00
	00 00		 movzx	 edx, BYTE PTR _gSkinIME+13
  00663	c1 e2 18	 shl	 edx, 24			; 00000018H
  00666	81 c2 ff ff ff
	00		 add	 edx, 16777215		; 00ffffffH
  0066c	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00671	6b c8 00	 imul	 ecx, eax, 0
  00674	89 94 0d e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 662
  0067b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _gSkinIME, 0
  00682	0f 85 d9 01 00
	00		 jne	 $LN8@DrawImeInd
  00688	0f b6 55 fb	 movzx	 edx, BYTE PTR _bOn$[ebp]
  0068c	85 d2		 test	 edx, edx
  0068e	0f 84 cd 01 00
	00		 je	 $LN8@DrawImeInd
; Line 665
  00694	0f b6 05 0d 00
	00 00		 movzx	 eax, BYTE PTR _gSkinIME+13
  0069b	c1 e0 18	 shl	 eax, 24			; 00000018H
  0069e	05 00 00 ff 00	 add	 eax, 16711680		; 00ff0000H
  006a3	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  006a8	c1 e1 00	 shl	 ecx, 0
  006ab	89 84 0d e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+ecx+16], eax
; Line 666
  006b2	0f b6 15 0d 00
	00 00		 movzx	 edx, BYTE PTR _gSkinIME+13
  006b9	c1 e2 18	 shl	 edx, 24			; 00000018H
  006bc	81 c2 00 30 ff
	00		 add	 edx, 16723968		; 00ff3000H
  006c2	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  006c7	d1 e0		 shl	 eax, 1
  006c9	89 94 05 e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+eax+16], edx
; Line 667
  006d0	0f b6 0d 0d 00
	00 00		 movzx	 ecx, BYTE PTR _gSkinIME+13
  006d7	c1 e1 18	 shl	 ecx, 24			; 00000018H
  006da	81 c1 00 60 ff
	00		 add	 ecx, 16736256		; 00ff6000H
  006e0	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  006e5	6b c2 03	 imul	 eax, edx, 3
  006e8	89 8c 05 e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+eax+16], ecx
; Line 668
  006ef	0f b6 0d 0d 00
	00 00		 movzx	 ecx, BYTE PTR _gSkinIME+13
  006f6	c1 e1 18	 shl	 ecx, 24			; 00000018H
  006f9	81 c1 00 90 ff
	00		 add	 ecx, 16748544		; 00ff9000H
  006ff	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00704	c1 e2 02	 shl	 edx, 2
  00707	89 8c 15 e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+edx+16], ecx
; Line 669
  0070e	0f b6 05 0d 00
	00 00		 movzx	 eax, BYTE PTR _gSkinIME+13
  00715	c1 e0 18	 shl	 eax, 24			; 00000018H
  00718	05 00 c0 ff 00	 add	 eax, 16760832		; 00ffc000H
  0071d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00722	6b d1 05	 imul	 edx, ecx, 5
  00725	89 84 15 e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+edx+16], eax
; Line 670
  0072c	0f b6 05 0d 00
	00 00		 movzx	 eax, BYTE PTR _gSkinIME+13
  00733	c1 e0 18	 shl	 eax, 24			; 00000018H
  00736	05 00 ff ff 00	 add	 eax, 16776960		; 00ffff00H
  0073b	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00740	6b d1 06	 imul	 edx, ecx, 6
  00743	89 84 15 e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+edx+16], eax
; Line 671
  0074a	0f b6 05 0d 00
	00 00		 movzx	 eax, BYTE PTR _gSkinIME+13
  00751	c1 e0 18	 shl	 eax, 24			; 00000018H
  00754	05 00 ff c0 00	 add	 eax, 12648192		; 00c0ff00H
  00759	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0075e	6b d1 07	 imul	 edx, ecx, 7
  00761	89 84 15 e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+edx+16], eax
; Line 672
  00768	0f b6 05 0d 00
	00 00		 movzx	 eax, BYTE PTR _gSkinIME+13
  0076f	c1 e0 18	 shl	 eax, 24			; 00000018H
  00772	05 00 ff 90 00	 add	 eax, 9502464		; 0090ff00H
  00777	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0077c	c1 e1 03	 shl	 ecx, 3
  0077f	89 84 0d e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+ecx+16], eax
; Line 673
  00786	0f b6 15 0d 00
	00 00		 movzx	 edx, BYTE PTR _gSkinIME+13
  0078d	c1 e2 18	 shl	 edx, 24			; 00000018H
  00790	81 c2 00 ff 60
	00		 add	 edx, 6356736		; 0060ff00H
  00796	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0079b	6b c8 09	 imul	 ecx, eax, 9
  0079e	89 94 0d e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 674
  007a5	0f b6 15 0d 00
	00 00		 movzx	 edx, BYTE PTR _gSkinIME+13
  007ac	c1 e2 18	 shl	 edx, 24			; 00000018H
  007af	81 c2 ff c0 30
	00		 add	 edx, 3195135		; 0030c0ffH
  007b5	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  007ba	6b c8 0a	 imul	 ecx, eax, 10
  007bd	89 94 0d e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 675
  007c4	0f b6 15 0d 00
	00 00		 movzx	 edx, BYTE PTR _gSkinIME+13
  007cb	c1 e2 18	 shl	 edx, 24			; 00000018H
  007ce	81 c2 ff a0 00
	00		 add	 edx, 41215		; 0000a0ffH
  007d4	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  007d9	6b c8 0b	 imul	 ecx, eax, 11
  007dc	89 94 0d e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 676
  007e3	0f b6 15 0d 00
	00 00		 movzx	 edx, BYTE PTR _gSkinIME+13
  007ea	c1 e2 18	 shl	 edx, 24			; 00000018H
  007ed	81 c2 ff 90 30
	00		 add	 edx, 3182847		; 003090ffH
  007f3	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  007f8	6b c8 0c	 imul	 ecx, eax, 12
  007fb	89 94 0d e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 677
  00802	0f b6 15 0d 00
	00 00		 movzx	 edx, BYTE PTR _gSkinIME+13
  00809	c1 e2 18	 shl	 edx, 24			; 00000018H
  0080c	81 c2 ff 60 60
	00		 add	 edx, 6316287		; 006060ffH
  00812	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00817	6b c8 0d	 imul	 ecx, eax, 13
  0081a	89 94 0d e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 678
  00821	0f b6 15 0d 00
	00 00		 movzx	 edx, BYTE PTR _gSkinIME+13
  00828	c1 e2 18	 shl	 edx, 24			; 00000018H
  0082b	81 c2 ff 30 90
	00		 add	 edx, 9449727		; 009030ffH
  00831	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00836	6b c8 0e	 imul	 ecx, eax, 14
  00839	89 94 0d e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 679
  00840	0f b6 15 0d 00
	00 00		 movzx	 edx, BYTE PTR _gSkinIME+13
  00847	c1 e2 18	 shl	 edx, 24			; 00000018H
  0084a	81 c2 ff 00 c0
	00		 add	 edx, 12583167		; 00c000ffH
  00850	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00855	6b c8 0f	 imul	 ecx, eax, 15
  00858	89 94 0d e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 682
  0085f	eb 73		 jmp	 SHORT $LN4@DrawImeInd
$LN8@DrawImeInd:
; Line 684
  00861	0f b6 55 fb	 movzx	 edx, BYTE PTR _bOn$[ebp]
  00865	85 d2		 test	 edx, edx
  00867	74 0d		 je	 SHORT $LN29@DrawImeInd
  00869	a1 00 00 00 00	 mov	 eax, DWORD PTR _gSkinIME
  0086e	89 85 30 fd ff
	ff		 mov	 DWORD PTR tv359[ebp], eax
  00874	eb 0c		 jmp	 SHORT $LN30@DrawImeInd
$LN29@DrawImeInd:
  00876	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR _gSkinIME+4
  0087c	89 8d 30 fd ff
	ff		 mov	 DWORD PTR tv359[ebp], ecx
$LN30@DrawImeInd:
  00882	8b 95 30 fd ff
	ff		 mov	 edx, DWORD PTR tv359[ebp]
  00888	89 95 c0 fd ff
	ff		 mov	 DWORD PTR _dwColor$5[ebp], edx
; Line 685
  0088e	c7 85 bc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR _t1$4[ebp], 1
  00898	eb 0f		 jmp	 SHORT $LN6@DrawImeInd
$LN5@DrawImeInd:
  0089a	8b 85 bc fd ff
	ff		 mov	 eax, DWORD PTR _t1$4[ebp]
  008a0	83 c0 01	 add	 eax, 1
  008a3	89 85 bc fd ff
	ff		 mov	 DWORD PTR _t1$4[ebp], eax
$LN6@DrawImeInd:
  008a9	83 bd bc fd ff
	ff 10		 cmp	 DWORD PTR _t1$4[ebp], 16 ; 00000010H
  008b0	7d 22		 jge	 SHORT $LN4@DrawImeInd
; Line 687
  008b2	0f b6 0d 0d 00
	00 00		 movzx	 ecx, BYTE PTR _gSkinIME+13
  008b9	c1 e1 18	 shl	 ecx, 24			; 00000018H
  008bc	03 8d c0 fd ff
	ff		 add	 ecx, DWORD PTR _dwColor$5[ebp]
  008c2	8b 95 bc fd ff
	ff		 mov	 edx, DWORD PTR _t1$4[ebp]
  008c8	c1 e2 05	 shl	 edx, 5
  008cb	89 8c 15 e4 fd
	ff ff		 mov	 DWORD PTR _PieData$[ebp+edx+16], ecx
; Line 688
  008d2	eb c6		 jmp	 SHORT $LN5@DrawImeInd
$LN4@DrawImeInd:
; Line 690
  008d4	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  008d9	c1 e0 00	 shl	 eax, 0
  008dc	8d b4 05 d4 fd
	ff ff		 lea	 esi, DWORD PTR _PieData$[ebp+eax]
  008e3	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  008e8	c1 e1 04	 shl	 ecx, 4
  008eb	8d bc 0d d4 fd
	ff ff		 lea	 edi, DWORD PTR _PieData$[ebp+ecx]
  008f2	b9 08 00 00 00	 mov	 ecx, 8
  008f7	f3 a5		 rep movsd
; Line 692
  008f9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ImeUiCallback_DrawFans@@3P6GXPBUIMEUI_VERTEX@@I@ZA, 0 ; ImeUiCallback_DrawFans
  00900	74 18		 je	 SHORT $LN3@DrawImeInd
; Line 693
  00902	8b f4		 mov	 esi, esp
  00904	6a 11		 push	 17			; 00000011H
  00906	8d 95 d4 fd ff
	ff		 lea	 edx, DWORD PTR _PieData$[ebp]
  0090c	52		 push	 edx
  0090d	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_DrawFans@@3P6GXPBUIMEUI_VERTEX@@I@ZA ; ImeUiCallback_DrawFans
  00913	3b f4		 cmp	 esi, esp
  00915	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@DrawImeInd:
; Line 695
  0091a	0f b6 05 0c 00
	00 00		 movzx	 eax, BYTE PTR _gSkinIME+12
  00921	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00925	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f200000
  0092d	f3 0f 11 85 b8
	fd ff ff	 movss	 DWORD PTR _fHeight$[ebp], xmm0
; Line 698
  00935	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hklCurrent
  0093b	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00941	0f b7 d1	 movzx	 edx, cx
  00944	81 e2 ff 03 00
	00		 and	 edx, 1023		; 000003ffH
  0094a	0f b7 c2	 movzx	 eax, dx
  0094d	83 f8 12	 cmp	 eax, 18			; 00000012H
  00950	75 20		 jne	 SHORT $LN2@DrawImeInd
  00952	0f b6 4d fb	 movzx	 ecx, BYTE PTR _bOn$[ebp]
  00956	85 c9		 test	 ecx, ecx
  00958	74 18		 je	 SHORT $LN2@DrawImeInd
; Line 700
  0095a	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _fHeight$[ebp]
  00962	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f4ccccd
  0096a	f3 0f 11 85 b8
	fd ff ff	 movss	 DWORD PTR _fHeight$[ebp], xmm0
$LN2@DrawImeInd:
; Line 703
  00972	83 3d 10 00 00
	00 00		 cmp	 DWORD PTR _gSkinIME+16, 0
  00979	0f 84 53 01 00
	00		 je	 $LN1@DrawImeInd
; Line 712
  0097f	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _fHeight$[ebp]
  00987	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42c00000
  0098f	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42900000
  00997	f3 0f 11 85 b8
	fd ff ff	 movss	 DWORD PTR _fHeight$[ebp], xmm0
; Line 713
  0099f	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _fHeight$[ebp]
  009a7	e8 00 00 00 00	 call	 __ftoui3
  009ac	8b f4		 mov	 esi, esp
  009ae	50		 push	 eax
  009af	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR _gSkinIME+16
  009b5	8b 02		 mov	 eax, DWORD PTR [edx]
  009b7	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _gSkinIME+16
  009bd	8b 10		 mov	 edx, DWORD PTR [eax]
  009bf	ff d2		 call	 edx
  009c1	3b f4		 cmp	 esi, esp
  009c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 714
  009c8	0f b6 05 0d 00
	00 00		 movzx	 eax, BYTE PTR _gSkinIME+13
  009cf	c1 e0 18	 shl	 eax, 24			; 00000018H
  009d2	0b 05 08 00 00
	00		 or	 eax, DWORD PTR _gSkinIME+8
  009d8	8b f4		 mov	 esi, esp
  009da	50		 push	 eax
  009db	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _gSkinIME+16
  009e1	8b 11		 mov	 edx, DWORD PTR [ecx]
  009e3	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _gSkinIME+16
  009e9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  009ec	ff d0		 call	 eax
  009ee	3b f4		 cmp	 esi, esp
  009f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 720
  009f5	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _g_dwState, 1
  009fc	75 0e		 jne	 SHORT $LN31@DrawImeInd
  009fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pszIndicatior
  00a04	89 8d 2c fd ff
	ff		 mov	 DWORD PTR tv407[ebp], ecx
  00a0a	eb 14		 jmp	 SHORT $LN32@DrawImeInd
$LN31@DrawImeInd:
  00a0c	ba 04 00 00 00	 mov	 edx, 4
  00a11	6b c2 00	 imul	 eax, edx, 0
  00a14	8b 88 00 00 00
	00		 mov	 ecx, DWORD PTR _g_aszIndicator[eax]
  00a1a	89 8d 2c fd ff
	ff		 mov	 DWORD PTR tv407[ebp], ecx
$LN32@DrawImeInd:
  00a20	8b 95 2c fd ff
	ff		 mov	 edx, DWORD PTR tv407[ebp]
  00a26	89 95 9c fd ff
	ff		 mov	 DWORD PTR _cszSymbol$1[ebp], edx
; Line 722
  00a2c	8b f4		 mov	 esi, esp
  00a2e	8d 85 a4 fd ff
	ff		 lea	 eax, DWORD PTR _h$2[ebp]
  00a34	50		 push	 eax
  00a35	8d 8d b0 fd ff
	ff		 lea	 ecx, DWORD PTR _w$3[ebp]
  00a3b	51		 push	 ecx
  00a3c	8b 95 9c fd ff
	ff		 mov	 edx, DWORD PTR _cszSymbol$1[ebp]
  00a42	52		 push	 edx
  00a43	a1 10 00 00 00	 mov	 eax, DWORD PTR _gSkinIME+16
  00a48	8b 10		 mov	 edx, DWORD PTR [eax]
  00a4a	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _gSkinIME+16
  00a50	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00a53	ff d0		 call	 eax
  00a55	3b f4		 cmp	 esi, esp
  00a57	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 723
  00a5c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00a61	6b d1 00	 imul	 edx, ecx, 0
  00a64	f3 0f 2c 84 15
	d8 fd ff ff	 cvttss2si eax, DWORD PTR _PieData$[ebp+edx+4]
  00a6d	8b 8d a4 fd ff
	ff		 mov	 ecx, DWORD PTR _h$2[ebp]
  00a73	d1 e9		 shr	 ecx, 1
  00a75	2b c1		 sub	 eax, ecx
  00a77	8b f4		 mov	 esi, esp
  00a79	50		 push	 eax
  00a7a	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00a7f	6b c2 00	 imul	 eax, edx, 0
  00a82	f3 0f 2c 8c 05
	d4 fd ff ff	 cvttss2si ecx, DWORD PTR _PieData$[ebp+eax]
  00a8b	8b 95 b0 fd ff
	ff		 mov	 edx, DWORD PTR _w$3[ebp]
  00a91	d1 ea		 shr	 edx, 1
  00a93	2b ca		 sub	 ecx, edx
  00a95	51		 push	 ecx
  00a96	a1 10 00 00 00	 mov	 eax, DWORD PTR _gSkinIME+16
  00a9b	8b 10		 mov	 edx, DWORD PTR [eax]
  00a9d	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _gSkinIME+16
  00aa3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00aa6	ff d0		 call	 eax
  00aa8	3b f4		 cmp	 esi, esp
  00aaa	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 724
  00aaf	8b f4		 mov	 esi, esp
  00ab1	8b 8d 9c fd ff
	ff		 mov	 ecx, DWORD PTR _cszSymbol$1[ebp]
  00ab7	51		 push	 ecx
  00ab8	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR _gSkinIME+16
  00abe	8b 02		 mov	 eax, DWORD PTR [edx]
  00ac0	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR _gSkinIME+16
  00ac6	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00ac9	ff d2		 call	 edx
  00acb	3b f4		 cmp	 esi, esp
  00acd	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@DrawImeInd:
; Line 751
  00ad2	52		 push	 edx
  00ad3	8b cd		 mov	 ecx, ebp
  00ad5	50		 push	 eax
  00ad6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN37@DrawImeInd
  00adc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00ae1	58		 pop	 eax
  00ae2	5a		 pop	 edx
  00ae3	5f		 pop	 edi
  00ae4	5e		 pop	 esi
  00ae5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ae8	33 cd		 xor	 ecx, ebp
  00aea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00aef	81 c4 d4 02 00
	00		 add	 esp, 724		; 000002d4H
  00af5	3b ec		 cmp	 ebp, esp
  00af7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00afc	8b e5		 mov	 esp, ebp
  00afe	5d		 pop	 ebp
  00aff	c3		 ret	 0
$LN37@DrawImeInd:
  00b00	03 00 00 00	 DD	 3
  00b04	00 00 00 00	 DD	 $LN36@DrawImeInd
$LN36@DrawImeInd:
  00b08	d4 fd ff ff	 DD	 -556			; fffffdd4H
  00b0c	20 02 00 00	 DD	 544			; 00000220H
  00b10	00 00 00 00	 DD	 $LN33@DrawImeInd
  00b14	b0 fd ff ff	 DD	 -592			; fffffdb0H
  00b18	04 00 00 00	 DD	 4
  00b1c	00 00 00 00	 DD	 $LN34@DrawImeInd
  00b20	a4 fd ff ff	 DD	 -604			; fffffda4H
  00b24	04 00 00 00	 DD	 4
  00b28	00 00 00 00	 DD	 $LN35@DrawImeInd
$LN35@DrawImeInd:
  00b2c	68		 DB	 104			; 00000068H
  00b2d	00		 DB	 0
$LN34@DrawImeInd:
  00b2e	77		 DB	 119			; 00000077H
  00b2f	00		 DB	 0
$LN33@DrawImeInd:
  00b30	50		 DB	 80			; 00000050H
  00b31	69		 DB	 105			; 00000069H
  00b32	65		 DB	 101			; 00000065H
  00b33	44		 DB	 68			; 00000044H
  00b34	61		 DB	 97			; 00000061H
  00b35	74		 DB	 116			; 00000074H
  00b36	61		 DB	 97			; 00000061H
  00b37	00		 DB	 0
$LN38@DrawImeInd:
  00b38	00 00 00 00	 DD	 $LN22@DrawImeInd
  00b3c	00 00 00 00	 DD	 $LN19@DrawImeInd
  00b40	00 00 00 00	 DD	 $LN18@DrawImeInd
  00b44	00 00 00 00	 DD	 $LN17@DrawImeInd
  00b48	00 00 00 00	 DD	 $LN16@DrawImeInd
?DrawImeIndicator@@YAXXZ ENDP				; DrawImeIndicator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv132 = -48						; size = 4
tv94 = -44						; size = 4
tv82 = -40						; size = 4
tv71 = -36						; size = 4
_dwSentMode$1 = -28					; size = 4
_dwConvMode$2 = -16					; size = 4
_himc$ = -8						; size = 4
_bIme$ = -1						; size = 1
?CheckToggleState@@YAXXZ PROC				; CheckToggleState
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2298
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
; Line 2299
  00016	e8 00 00 00 00	 call	 ?CheckInputLocale@@YAXXZ ; CheckInputLocale
; Line 2304
  0001b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bUILessMode
  00022	85 c0		 test	 eax, eax
  00024	74 05		 je	 SHORT $LN5@CheckToggl
; Line 2306
  00026	e9 13 01 00 00	 jmp	 $LN6@CheckToggl
$LN5@CheckToggl:
; Line 2310
  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hklCurrent
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _ImmIsIME@4
  00037	85 c0		 test	 eax, eax
  00039	74 1d		 je	 SHORT $LN8@CheckToggl
  0003b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hklCurrent
  00041	81 e2 00 00 00
	f0		 and	 edx, -268435456		; f0000000H
  00047	81 fa 00 00 00
	e0		 cmp	 edx, -536870912		; e0000000H
  0004d	75 09		 jne	 SHORT $LN8@CheckToggl
  0004f	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  00056	eb 07		 jmp	 SHORT $LN9@CheckToggl
$LN8@CheckToggl:
  00058	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN9@CheckToggl:
  0005f	8a 45 dc	 mov	 al, BYTE PTR tv71[ebp]
  00062	88 45 ff	 mov	 BYTE PTR _bIme$[ebp], al
; Line 2311
  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hklCurrent
  0006b	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00071	0f b7 d1	 movzx	 edx, cx
  00074	81 e2 ff 03 00
	00		 and	 edx, 1023		; 000003ffH
  0007a	0f b7 c2	 movzx	 eax, dx
  0007d	83 f8 04	 cmp	 eax, 4
  00080	75 11		 jne	 SHORT $LN10@CheckToggl
  00082	0f b6 4d ff	 movzx	 ecx, BYTE PTR _bIme$[ebp]
  00086	85 c9		 test	 ecx, ecx
  00088	74 09		 je	 SHORT $LN10@CheckToggl
  0008a	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR tv82[ebp], 1
  00091	eb 07		 jmp	 SHORT $LN11@CheckToggl
$LN10@CheckToggl:
  00093	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN11@CheckToggl:
  0009a	8a 55 d8	 mov	 dl, BYTE PTR tv82[ebp]
  0009d	88 15 00 00 00
	00		 mov	 BYTE PTR _g_bChineseIME, dl
; Line 2313
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hwndCurr
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _ImmGetContext@4
  000ae	89 45 f8	 mov	 DWORD PTR _himc$[ebp], eax
; Line 2314
  000b1	83 7d f8 00	 cmp	 DWORD PTR _himc$[ebp], 0
  000b5	74 7d		 je	 SHORT $LN4@CheckToggl
; Line 2316
  000b7	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bChineseIME
  000be	85 c9		 test	 ecx, ecx
  000c0	74 33		 je	 SHORT $LN3@CheckToggl
; Line 2319
  000c2	8d 55 e4	 lea	 edx, DWORD PTR _dwSentMode$1[ebp]
  000c5	52		 push	 edx
  000c6	8d 45 f0	 lea	 eax, DWORD PTR _dwConvMode$2[ebp]
  000c9	50		 push	 eax
  000ca	8b 4d f8	 mov	 ecx, DWORD PTR _himc$[ebp]
  000cd	51		 push	 ecx
  000ce	e8 00 00 00 00	 call	 _ImmGetConversionStatus@12
; Line 2320
  000d3	8b 55 f0	 mov	 edx, DWORD PTR _dwConvMode$2[ebp]
  000d6	83 e2 01	 and	 edx, 1
  000d9	74 09		 je	 SHORT $LN12@CheckToggl
  000db	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR tv94[ebp], 1
  000e2	eb 07		 jmp	 SHORT $LN13@CheckToggl
$LN12@CheckToggl:
  000e4	c7 45 d4 02 00
	00 00		 mov	 DWORD PTR tv94[ebp], 2
$LN13@CheckToggl:
  000eb	8b 45 d4	 mov	 eax, DWORD PTR tv94[ebp]
  000ee	a3 00 00 00 00	 mov	 DWORD PTR _g_dwState, eax
; Line 2322
  000f3	eb 2d		 jmp	 SHORT $LN2@CheckToggl
$LN3@CheckToggl:
; Line 2324
  000f5	0f b6 4d ff	 movzx	 ecx, BYTE PTR _bIme$[ebp]
  000f9	85 c9		 test	 ecx, ecx
  000fb	74 16		 je	 SHORT $LN14@CheckToggl
  000fd	8b 55 f8	 mov	 edx, DWORD PTR _himc$[ebp]
  00100	52		 push	 edx
  00101	e8 00 00 00 00	 call	 _ImmGetOpenStatus@4
  00106	85 c0		 test	 eax, eax
  00108	74 09		 je	 SHORT $LN14@CheckToggl
  0010a	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv132[ebp], 1
  00111	eb 07		 jmp	 SHORT $LN15@CheckToggl
$LN14@CheckToggl:
  00113	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN15@CheckToggl:
  0011a	8b 45 d0	 mov	 eax, DWORD PTR tv132[ebp]
  0011d	a3 00 00 00 00	 mov	 DWORD PTR _g_dwState, eax
$LN2@CheckToggl:
; Line 2326
  00122	8b 4d f8	 mov	 ecx, DWORD PTR _himc$[ebp]
  00125	51		 push	 ecx
  00126	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndCurr
  0012c	52		 push	 edx
  0012d	e8 00 00 00 00	 call	 _ImmReleaseContext@8
; Line 2328
  00132	eb 0a		 jmp	 SHORT $LN6@CheckToggl
$LN4@CheckToggl:
; Line 2329
  00134	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_dwState, 0
$LN6@CheckToggl:
; Line 2330
  0013e	52		 push	 edx
  0013f	8b cd		 mov	 ecx, ebp
  00141	50		 push	 eax
  00142	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN19@CheckToggl
  00148	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0014d	58		 pop	 eax
  0014e	5a		 pop	 edx
  0014f	5f		 pop	 edi
  00150	83 c4 30	 add	 esp, 48			; 00000030H
  00153	3b ec		 cmp	 ebp, esp
  00155	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015a	8b e5		 mov	 esp, ebp
  0015c	5d		 pop	 ebp
  0015d	c3		 ret	 0
  0015e	8b ff		 npad	 2
$LN19@CheckToggl:
  00160	02 00 00 00	 DD	 2
  00164	00 00 00 00	 DD	 $LN18@CheckToggl
$LN18@CheckToggl:
  00168	f0 ff ff ff	 DD	 -16			; fffffff0H
  0016c	04 00 00 00	 DD	 4
  00170	00 00 00 00	 DD	 $LN16@CheckToggl
  00174	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00178	04 00 00 00	 DD	 4
  0017c	00 00 00 00	 DD	 $LN17@CheckToggl
$LN17@CheckToggl:
  00180	64		 DB	 100			; 00000064H
  00181	77		 DB	 119			; 00000077H
  00182	53		 DB	 83			; 00000053H
  00183	65		 DB	 101			; 00000065H
  00184	6e		 DB	 110			; 0000006eH
  00185	74		 DB	 116			; 00000074H
  00186	4d		 DB	 77			; 0000004dH
  00187	6f		 DB	 111			; 0000006fH
  00188	64		 DB	 100			; 00000064H
  00189	65		 DB	 101			; 00000065H
  0018a	00		 DB	 0
$LN16@CheckToggl:
  0018b	64		 DB	 100			; 00000064H
  0018c	77		 DB	 119			; 00000077H
  0018d	43		 DB	 67			; 00000043H
  0018e	6f		 DB	 111			; 0000006fH
  0018f	6e		 DB	 110			; 0000006eH
  00190	76		 DB	 118			; 00000076H
  00191	4d		 DB	 77			; 0000004dH
  00192	6f		 DB	 111			; 0000006fH
  00193	64		 DB	 100			; 00000064H
  00194	65		 DB	 101			; 00000065H
  00195	00		 DB	 0
?CheckToggleState@@YAXXZ ENDP				; CheckToggleState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dwVer$1 = -1092					; size = 4
_dwLang$ = -1088					; size = 4
_kl$ = -1084						; size = 4
_szTmp$ = -1076						; size = 1024
_cbVerData$ = -44					; size = 4
_lpVerData$ = -32					; size = 4
_lpVerBuffer$ = -24					; size = 4
_dwVerHandle$ = -16					; size = 4
_dwVerSize$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_uIndex$ = 8						; size = 4
?GetImeId@@YAKI@Z PROC					; GetImeId
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 1818
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 04 00
	00		 sub	 esp, 1092		; 00000444H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd bc fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1092]
  00011	b9 11 01 00 00	 mov	 ecx, 273		; 00000111H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; Line 1832
  00027	83 7d 08 02	 cmp	 DWORD PTR _uIndex$[ebp], 2
  0002b	72 07		 jb	 SHORT $LN18@GetImeId
; Line 1833
  0002d	33 c0		 xor	 eax, eax
  0002f	e9 e1 03 00 00	 jmp	 $LN19@GetImeId
$LN18@GetImeId:
; Line 1835
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hklCurrent
  00039	89 85 c4 fb ff
	ff		 mov	 DWORD PTR _kl$[ebp], eax
; Line 1836
  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?hklPrev@?1??GetImeId@@YAKI@Z@4PAUHKL__@@A
  00045	3b 8d c4 fb ff
	ff		 cmp	 ecx, DWORD PTR _kl$[ebp]
  0004b	75 0f		 jne	 SHORT $LN17@GetImeId
; Line 1838
  0004d	8b 55 08	 mov	 edx, DWORD PTR _uIndex$[ebp]
  00050	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[edx*4]
  00057	e9 b9 03 00 00	 jmp	 $LN19@GetImeId
$LN17@GetImeId:
; Line 1840
  0005c	8b 85 c4 fb ff
	ff		 mov	 eax, DWORD PTR _kl$[ebp]
  00062	a3 00 00 00 00	 mov	 DWORD PTR ?hklPrev@?1??GetImeId@@YAKI@Z@4PAUHKL__@@A, eax
; Line 1841
  00067	8b 8d c4 fb ff
	ff		 mov	 ecx, DWORD PTR _kl$[ebp]
  0006d	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00073	89 8d c0 fb ff
	ff		 mov	 DWORD PTR _dwLang$[ebp], ecx
; Line 1843
  00079	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _g_bUILessMode
  00080	85 d2		 test	 edx, edx
  00082	74 4c		 je	 SHORT $LN16@GetImeId
  00084	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hklCurrent
  00089	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0008e	0f b7 c8	 movzx	 ecx, ax
  00091	81 f9 04 04 00
	00		 cmp	 ecx, 1028		; 00000404H
  00097	75 37		 jne	 SHORT $LN16@GetImeId
; Line 1846
  00099	ba 04 00 00 00	 mov	 edx, 4
  0009e	6b c2 00	 imul	 eax, edx, 0
  000a1	c7 80 00 00 00
	00 04 04 00 07	 mov	 DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[eax], 117441540 ; 07000404H
; Line 1847
  000ab	b9 04 00 00 00	 mov	 ecx, 4
  000b0	c1 e1 00	 shl	 ecx, 0
  000b3	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[ecx], 0
; Line 1848
  000bd	ba 04 00 00 00	 mov	 edx, 4
  000c2	6b c2 00	 imul	 eax, edx, 0
  000c5	8b 80 00 00 00
	00		 mov	 eax, DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[eax]
  000cb	e9 45 03 00 00	 jmp	 $LN19@GetImeId
$LN16@GetImeId:
; Line 1852
  000d0	81 bd c4 fb ff
	ff 04 04 08 e0	 cmp	 DWORD PTR _kl$[ebp], -536345596 ; e0080404H
  000da	74 3a		 je	 SHORT $LN15@GetImeId
  000dc	81 bd c4 fb ff
	ff 04 04 09 e0	 cmp	 DWORD PTR _kl$[ebp], -536280060 ; e0090404H
  000e6	74 2e		 je	 SHORT $LN15@GetImeId
  000e8	81 bd c4 fb ff
	ff 04 04 0a e0	 cmp	 DWORD PTR _kl$[ebp], -536214524 ; e00a0404H
  000f2	74 22		 je	 SHORT $LN15@GetImeId
  000f4	81 bd c4 fb ff
	ff 04 04 0b e0	 cmp	 DWORD PTR _kl$[ebp], -536148988 ; e00b0404H
  000fe	74 16		 je	 SHORT $LN15@GetImeId
  00100	81 bd c4 fb ff
	ff 04 08 0e e0	 cmp	 DWORD PTR _kl$[ebp], -535951356 ; e00e0804H
  0010a	74 0a		 je	 SHORT $LN15@GetImeId
; Line 1854
  0010c	e9 d6 02 00 00	 jmp	 $error$27
  00111	e9 d1 02 00 00	 jmp	 $error$27
$LN15@GetImeId:
; Line 1857
  00116	68 ff 03 00 00	 push	 1023			; 000003ffH
  0011b	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _szTmp$[ebp]
  00121	51		 push	 ecx
  00122	8b 95 c4 fb ff
	ff		 mov	 edx, DWORD PTR _kl$[ebp]
  00128	52		 push	 edx
  00129	e8 00 00 00 00	 call	 _ImmGetIMEFileNameA@12
  0012e	85 c0		 test	 eax, eax
  00130	77 0a		 ja	 SHORT $LN13@GetImeId
; Line 1859
  00132	e9 b0 02 00 00	 jmp	 $error$27
  00137	e9 ab 02 00 00	 jmp	 $error$27
$LN13@GetImeId:
; Line 1862
  0013c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA, 0 ; _GetReadingString
  00143	0f 85 e9 00 00
	00		 jne	 $LN11@GetImeId
; Line 1870
  00149	8b f4		 mov	 esi, esp
  0014b	6a ff		 push	 -1
  0014d	68 00 00 00 00	 push	 OFFSET $SG153753
  00152	6a ff		 push	 -1
  00154	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  0015a	50		 push	 eax
  0015b	6a 01		 push	 1
  0015d	68 09 04 00 00	 push	 1033			; 00000409H
  00162	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CompareStringA@24
  00168	3b f4		 cmp	 esi, esp
  0016a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016f	83 f8 02	 cmp	 eax, 2
  00172	0f 84 ba 00 00
	00		 je	 $LN11@GetImeId
  00178	8b f4		 mov	 esi, esp
  0017a	6a ff		 push	 -1
  0017c	68 00 00 00 00	 push	 OFFSET $SG153754
  00181	6a ff		 push	 -1
  00183	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _szTmp$[ebp]
  00189	51		 push	 ecx
  0018a	6a 01		 push	 1
  0018c	68 09 04 00 00	 push	 1033			; 00000409H
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CompareStringA@24
  00197	3b f4		 cmp	 esi, esp
  00199	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019e	83 f8 02	 cmp	 eax, 2
  001a1	0f 84 8b 00 00
	00		 je	 $LN11@GetImeId
  001a7	8b f4		 mov	 esi, esp
  001a9	6a ff		 push	 -1
  001ab	68 00 00 00 00	 push	 OFFSET $SG153755
  001b0	6a ff		 push	 -1
  001b2	8d 95 cc fb ff
	ff		 lea	 edx, DWORD PTR _szTmp$[ebp]
  001b8	52		 push	 edx
  001b9	6a 01		 push	 1
  001bb	68 09 04 00 00	 push	 1033			; 00000409H
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CompareStringA@24
  001c6	3b f4		 cmp	 esi, esp
  001c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001cd	83 f8 02	 cmp	 eax, 2
  001d0	74 60		 je	 SHORT $LN11@GetImeId
  001d2	8b f4		 mov	 esi, esp
  001d4	6a ff		 push	 -1
  001d6	68 00 00 00 00	 push	 OFFSET $SG153756
  001db	6a ff		 push	 -1
  001dd	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  001e3	50		 push	 eax
  001e4	6a 01		 push	 1
  001e6	68 09 04 00 00	 push	 1033			; 00000409H
  001eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CompareStringA@24
  001f1	3b f4		 cmp	 esi, esp
  001f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f8	83 f8 02	 cmp	 eax, 2
  001fb	74 35		 je	 SHORT $LN11@GetImeId
  001fd	8b f4		 mov	 esi, esp
  001ff	6a ff		 push	 -1
  00201	68 00 00 00 00	 push	 OFFSET $SG153757
  00206	6a ff		 push	 -1
  00208	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _szTmp$[ebp]
  0020e	51		 push	 ecx
  0020f	6a 01		 push	 1
  00211	68 09 04 00 00	 push	 1033			; 00000409H
  00216	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CompareStringA@24
  0021c	3b f4		 cmp	 esi, esp
  0021e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00223	83 f8 02	 cmp	 eax, 2
  00226	74 0a		 je	 SHORT $LN11@GetImeId
; Line 1872
  00228	e9 ba 01 00 00	 jmp	 $error$27
  0022d	e9 b5 01 00 00	 jmp	 $error$27
$LN11@GetImeId:
; Line 1876
  00232	8d 55 f0	 lea	 edx, DWORD PTR _dwVerHandle$[ebp]
  00235	52		 push	 edx
  00236	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 _GetFileVersionInfoSizeA@8
  00242	89 45 f8	 mov	 DWORD PTR _dwVerSize$[ebp], eax
; Line 1877
  00245	83 7d f8 00	 cmp	 DWORD PTR _dwVerSize$[ebp], 0
  00249	0f 84 98 01 00
	00		 je	 $error$27
; Line 1879
  0024f	8b f4		 mov	 esi, esp
  00251	8b 4d f8	 mov	 ecx, DWORD PTR _dwVerSize$[ebp]
  00254	51		 push	 ecx
  00255	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_Malloc@@3P6APAXI@ZA ; ImeUiCallback_Malloc
  0025b	83 c4 04	 add	 esp, 4
  0025e	3b f4		 cmp	 esi, esp
  00260	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00265	89 45 e8	 mov	 DWORD PTR _lpVerBuffer$[ebp], eax
; Line 1880
  00268	83 7d e8 00	 cmp	 DWORD PTR _lpVerBuffer$[ebp], 0
  0026c	0f 84 75 01 00
	00		 je	 $error$27
; Line 1882
  00272	8b 55 e8	 mov	 edx, DWORD PTR _lpVerBuffer$[ebp]
  00275	52		 push	 edx
  00276	8b 45 f8	 mov	 eax, DWORD PTR _dwVerSize$[ebp]
  00279	50		 push	 eax
  0027a	6a 00		 push	 0
  0027c	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _szTmp$[ebp]
  00282	51		 push	 ecx
  00283	e8 00 00 00 00	 call	 _GetFileVersionInfoA@16
  00288	85 c0		 test	 eax, eax
  0028a	0f 84 41 01 00
	00		 je	 $LN6@GetImeId
; Line 1884
  00290	8d 55 d4	 lea	 edx, DWORD PTR _cbVerData$[ebp]
  00293	52		 push	 edx
  00294	8d 45 e0	 lea	 eax, DWORD PTR _lpVerData$[ebp]
  00297	50		 push	 eax
  00298	68 00 00 00 00	 push	 OFFSET $SG153764
  0029d	8b 4d e8	 mov	 ecx, DWORD PTR _lpVerBuffer$[ebp]
  002a0	51		 push	 ecx
  002a1	e8 00 00 00 00	 call	 _VerQueryValueA@16
  002a6	85 c0		 test	 eax, eax
  002a8	0f 84 23 01 00
	00		 je	 $LN6@GetImeId
; Line 1887
  002ae	8b 55 e0	 mov	 edx, DWORD PTR _lpVerData$[ebp]
  002b1	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002b4	89 85 bc fb ff
	ff		 mov	 DWORD PTR _dwVer$1[ebp], eax
; Line 1888
  002ba	8b 8d bc fb ff
	ff		 mov	 ecx, DWORD PTR _dwVer$1[ebp]
  002c0	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  002c6	c1 e1 08	 shl	 ecx, 8
  002c9	8b 95 bc fb ff
	ff		 mov	 edx, DWORD PTR _dwVer$1[ebp]
  002cf	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  002d5	c1 e2 10	 shl	 edx, 16			; 00000010H
  002d8	0b ca		 or	 ecx, edx
  002da	89 8d bc fb ff
	ff		 mov	 DWORD PTR _dwVer$1[ebp], ecx
; Line 1902
  002e0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA, 0 ; _GetReadingString
  002e7	0f 85 90 00 00
	00		 jne	 $LN3@GetImeId
  002ed	81 bd c0 fb ff
	ff 04 04 00 00	 cmp	 DWORD PTR _dwLang$[ebp], 1028 ; 00000404H
  002f7	75 54		 jne	 SHORT $LN2@GetImeId
  002f9	81 bd bc fb ff
	ff 00 00 02 04	 cmp	 DWORD PTR _dwVer$1[ebp], 67239936 ; 04020000H
  00303	74 78		 je	 SHORT $LN3@GetImeId
  00305	81 bd bc fb ff
	ff 00 00 03 04	 cmp	 DWORD PTR _dwVer$1[ebp], 67305472 ; 04030000H
  0030f	74 6c		 je	 SHORT $LN3@GetImeId
  00311	81 bd bc fb ff
	ff 00 00 04 04	 cmp	 DWORD PTR _dwVer$1[ebp], 67371008 ; 04040000H
  0031b	74 60		 je	 SHORT $LN3@GetImeId
  0031d	81 bd bc fb ff
	ff 00 00 00 05	 cmp	 DWORD PTR _dwVer$1[ebp], 83886080 ; 05000000H
  00327	74 54		 je	 SHORT $LN3@GetImeId
  00329	81 bd bc fb ff
	ff 00 00 01 05	 cmp	 DWORD PTR _dwVer$1[ebp], 83951616 ; 05010000H
  00333	74 48		 je	 SHORT $LN3@GetImeId
  00335	81 bd bc fb ff
	ff 00 00 02 05	 cmp	 DWORD PTR _dwVer$1[ebp], 84017152 ; 05020000H
  0033f	74 3c		 je	 SHORT $LN3@GetImeId
  00341	81 bd bc fb ff
	ff 00 00 00 06	 cmp	 DWORD PTR _dwVer$1[ebp], 100663296 ; 06000000H
  0034b	74 30		 je	 SHORT $LN3@GetImeId
$LN2@GetImeId:
  0034d	81 bd c0 fb ff
	ff 04 08 00 00	 cmp	 DWORD PTR _dwLang$[ebp], 2052 ; 00000804H
  00357	75 78		 jne	 SHORT $LN6@GetImeId
  00359	81 bd bc fb ff
	ff 00 00 01 04	 cmp	 DWORD PTR _dwVer$1[ebp], 67174400 ; 04010000H
  00363	74 18		 je	 SHORT $LN3@GetImeId
  00365	81 bd bc fb ff
	ff 00 00 02 04	 cmp	 DWORD PTR _dwVer$1[ebp], 67239936 ; 04020000H
  0036f	74 0c		 je	 SHORT $LN3@GetImeId
  00371	81 bd bc fb ff
	ff 00 00 03 05	 cmp	 DWORD PTR _dwVer$1[ebp], 84082688 ; 05030000H
  0037b	75 54		 jne	 SHORT $LN6@GetImeId
$LN3@GetImeId:
; Line 1904
  0037d	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR _dwVer$1[ebp]
  00383	0b 85 c0 fb ff
	ff		 or	 eax, DWORD PTR _dwLang$[ebp]
  00389	b9 04 00 00 00	 mov	 ecx, 4
  0038e	6b d1 00	 imul	 edx, ecx, 0
  00391	89 82 00 00 00
	00		 mov	 DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[edx], eax
; Line 1905
  00397	b8 04 00 00 00	 mov	 eax, 4
  0039c	c1 e0 00	 shl	 eax, 0
  0039f	8b 4d e0	 mov	 ecx, DWORD PTR _lpVerData$[ebp]
  003a2	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  003a5	89 90 00 00 00
	00		 mov	 DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[eax], edx
; Line 1906
  003ab	8b f4		 mov	 esi, esp
  003ad	8b 45 e8	 mov	 eax, DWORD PTR _lpVerBuffer$[ebp]
  003b0	50		 push	 eax
  003b1	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_Free@@3P6AXPAX@ZA ; ImeUiCallback_Free
  003b7	83 c4 04	 add	 esp, 4
  003ba	3b f4		 cmp	 esi, esp
  003bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1907
  003c1	b9 04 00 00 00	 mov	 ecx, 4
  003c6	6b d1 00	 imul	 edx, ecx, 0
  003c9	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[edx]
  003cf	eb 44		 jmp	 SHORT $LN19@GetImeId
$LN6@GetImeId:
; Line 1912
  003d1	8b f4		 mov	 esi, esp
  003d3	8b 45 e8	 mov	 eax, DWORD PTR _lpVerBuffer$[ebp]
  003d6	50		 push	 eax
  003d7	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_Free@@3P6AXPAX@ZA ; ImeUiCallback_Free
  003dd	83 c4 04	 add	 esp, 4
  003e0	3b f4		 cmp	 esi, esp
  003e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$error$27:
; Line 1920
  003e7	b9 04 00 00 00	 mov	 ecx, 4
  003ec	c1 e1 00	 shl	 ecx, 0
  003ef	c7 81 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[ecx], 0
  003f9	ba 04 00 00 00	 mov	 edx, 4
  003fe	6b c2 00	 imul	 eax, edx, 0
  00401	c7 80 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[eax], 0
; Line 1921
  0040b	8b 4d 08	 mov	 ecx, DWORD PTR _uIndex$[ebp]
  0040e	8b 04 8d 00 00
	00 00		 mov	 eax, DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[ecx*4]
$LN19@GetImeId:
; Line 1922
  00415	52		 push	 edx
  00416	8b cd		 mov	 ecx, ebp
  00418	50		 push	 eax
  00419	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN26@GetImeId
  0041f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00424	58		 pop	 eax
  00425	5a		 pop	 edx
  00426	5f		 pop	 edi
  00427	5e		 pop	 esi
  00428	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0042b	33 cd		 xor	 ecx, ebp
  0042d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00432	81 c4 44 04 00
	00		 add	 esp, 1092		; 00000444H
  00438	3b ec		 cmp	 ebp, esp
  0043a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0043f	8b e5		 mov	 esp, ebp
  00441	5d		 pop	 ebp
  00442	c3		 ret	 0
  00443	90		 npad	 1
$LN26@GetImeId:
  00444	04 00 00 00	 DD	 4
  00448	00 00 00 00	 DD	 $LN25@GetImeId
$LN25@GetImeId:
  0044c	f0 ff ff ff	 DD	 -16			; fffffff0H
  00450	04 00 00 00	 DD	 4
  00454	00 00 00 00	 DD	 $LN21@GetImeId
  00458	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0045c	04 00 00 00	 DD	 4
  00460	00 00 00 00	 DD	 $LN22@GetImeId
  00464	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00468	04 00 00 00	 DD	 4
  0046c	00 00 00 00	 DD	 $LN23@GetImeId
  00470	cc fb ff ff	 DD	 -1076			; fffffbccH
  00474	00 04 00 00	 DD	 1024			; 00000400H
  00478	00 00 00 00	 DD	 $LN24@GetImeId
$LN24@GetImeId:
  0047c	73		 DB	 115			; 00000073H
  0047d	7a		 DB	 122			; 0000007aH
  0047e	54		 DB	 84			; 00000054H
  0047f	6d		 DB	 109			; 0000006dH
  00480	70		 DB	 112			; 00000070H
  00481	00		 DB	 0
$LN23@GetImeId:
  00482	63		 DB	 99			; 00000063H
  00483	62		 DB	 98			; 00000062H
  00484	56		 DB	 86			; 00000056H
  00485	65		 DB	 101			; 00000065H
  00486	72		 DB	 114			; 00000072H
  00487	44		 DB	 68			; 00000044H
  00488	61		 DB	 97			; 00000061H
  00489	74		 DB	 116			; 00000074H
  0048a	61		 DB	 97			; 00000061H
  0048b	00		 DB	 0
$LN22@GetImeId:
  0048c	6c		 DB	 108			; 0000006cH
  0048d	70		 DB	 112			; 00000070H
  0048e	56		 DB	 86			; 00000056H
  0048f	65		 DB	 101			; 00000065H
  00490	72		 DB	 114			; 00000072H
  00491	44		 DB	 68			; 00000044H
  00492	61		 DB	 97			; 00000061H
  00493	74		 DB	 116			; 00000074H
  00494	61		 DB	 97			; 00000061H
  00495	00		 DB	 0
$LN21@GetImeId:
  00496	64		 DB	 100			; 00000064H
  00497	77		 DB	 119			; 00000077H
  00498	56		 DB	 86			; 00000056H
  00499	65		 DB	 101			; 00000065H
  0049a	72		 DB	 114			; 00000072H
  0049b	48		 DB	 72			; 00000048H
  0049c	61		 DB	 97			; 00000061H
  0049d	6e		 DB	 110			; 0000006eH
  0049e	64		 DB	 100			; 00000064H
  0049f	6c		 DB	 108			; 0000006cH
  004a0	65		 DB	 101			; 00000065H
  004a1	00		 DB	 0
?GetImeId@@YAKI@Z ENDP					; GetImeId
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv323 = -192						; size = 4
tv503 = -186						; size = 2
tv500 = -184						; size = 4
tv497 = -180						; size = 4
tv288 = -176						; size = 4
tv221 = -172						; size = 4
tv198 = -168						; size = 4
tv181 = -164						; size = 4
tv94 = -160						; size = 4
tv90 = -156						; size = 4
$T1 = -152						; size = 4
_pszTmp$2 = -148					; size = 4
_i$3 = -144						; size = 4
_j$4 = -140						; size = 4
_i$5 = -136						; size = 4
_p$6 = -132						; size = 4
_i$7 = -128						; size = 4
_nTcharSize$8 = -124					; size = 4
_offset$9 = -120					; size = 4
_p$10 = -116						; size = 4
_uMaxUiLen$11 = -108					; size = 4
_bVertical$12 = -96					; size = 4
_lpIMC$ = -88						; size = 4
_unicode$ = -81						; size = 1
_wstr$ = -80						; size = 4
_wzBuf$ = -72						; size = 32
_dwerr$ = -32						; size = 4
_dwlen$ = -20						; size = 4
_himc$ = -12						; size = 4
_dwId$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
?GetReadingString@@YAXPAUHWND__@@@Z PROC		; GetReadingString
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 1925
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00011	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; Line 1926
  00027	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bUILessMode
  0002e	85 c0		 test	 eax, eax
  00030	74 05		 je	 SHORT $LN38@GetReading
; Line 1928
  00032	e9 d8 07 00 00	 jmp	 $LN40@GetReading
$LN38@GetReading:
; Line 1930
  00037	6a 00		 push	 0
  00039	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  0003e	83 c4 04	 add	 esp, 4
  00041	89 45 f8	 mov	 DWORD PTR _dwId$[ebp], eax
; Line 1931
  00044	83 7d f8 00	 cmp	 DWORD PTR _dwId$[ebp], 0
  00048	75 05		 jne	 SHORT $LN37@GetReading
; Line 1933
  0004a	e9 c0 07 00 00	 jmp	 $LN40@GetReading
$LN37@GetReading:
; Line 1937
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _hWnd$[ebp]
  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 _ImmGetContext@4
  00058	89 45 f4	 mov	 DWORD PTR _himc$[ebp], eax
; Line 1938
  0005b	83 7d f4 00	 cmp	 DWORD PTR _himc$[ebp], 0
  0005f	75 05		 jne	 SHORT $LN36@GetReading
; Line 1939
  00061	e9 a9 07 00 00	 jmp	 $LN40@GetReading
$LN36@GetReading:
; Line 1941
  00066	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwlen$[ebp], 0
; Line 1942
  0006d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _dwerr$[ebp], 0
; Line 1944
  00074	8d 55 b8	 lea	 edx, DWORD PTR _wzBuf$[ebp]
  00077	89 55 b0	 mov	 DWORD PTR _wstr$[ebp], edx
; Line 1945
  0007a	c6 45 af 00	 mov	 BYTE PTR _unicode$[ebp], 0
; Line 1946
  0007e	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _lpIMC$[ebp], 0
; Line 1948
  00085	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA, 0 ; _GetReadingString
  0008c	0f 84 94 00 00
	00		 je	 $LN35@GetReading
; Line 1952
  00092	8b f4		 mov	 esi, esp
  00094	8d 45 94	 lea	 eax, DWORD PTR _uMaxUiLen$11[ebp]
  00097	50		 push	 eax
  00098	8d 4d a0	 lea	 ecx, DWORD PTR _bVertical$12[ebp]
  0009b	51		 push	 ecx
  0009c	8d 55 e0	 lea	 edx, DWORD PTR _dwerr$[ebp]
  0009f	52		 push	 edx
  000a0	6a 00		 push	 0
  000a2	6a 00		 push	 0
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _himc$[ebp]
  000a7	50		 push	 eax
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA ; _GetReadingString
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	89 45 ec	 mov	 DWORD PTR _dwlen$[ebp], eax
; Line 1953
  000b8	83 7d ec 00	 cmp	 DWORD PTR _dwlen$[ebp], 0
  000bc	74 37		 je	 SHORT $LN34@GetReading
; Line 1955
  000be	83 7d ec 10	 cmp	 DWORD PTR _dwlen$[ebp], 16 ; 00000010H
  000c2	76 07		 jbe	 SHORT $LN33@GetReading
; Line 1957
  000c4	c7 45 ec 10 00
	00 00		 mov	 DWORD PTR _dwlen$[ebp], 16 ; 00000010H
$LN33@GetReading:
; Line 1959
  000cb	8b f4		 mov	 esi, esp
  000cd	8d 4d 94	 lea	 ecx, DWORD PTR _uMaxUiLen$11[ebp]
  000d0	51		 push	 ecx
  000d1	8d 55 a0	 lea	 edx, DWORD PTR _bVertical$12[ebp]
  000d4	52		 push	 edx
  000d5	8d 45 e0	 lea	 eax, DWORD PTR _dwerr$[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d b0	 mov	 ecx, DWORD PTR _wstr$[ebp]
  000dc	51		 push	 ecx
  000dd	8b 55 ec	 mov	 edx, DWORD PTR _dwlen$[ebp]
  000e0	52		 push	 edx
  000e1	8b 45 f4	 mov	 eax, DWORD PTR _himc$[ebp]
  000e4	50		 push	 eax
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA ; _GetReadingString
  000eb	3b f4		 cmp	 esi, esp
  000ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f2	89 45 ec	 mov	 DWORD PTR _dwlen$[ebp], eax
$LN34@GetReading:
; Line 1962
  000f5	83 7d a0 00	 cmp	 DWORD PTR _bVertical$12[ebp], 0
  000f9	75 0c		 jne	 SHORT $LN41@GetReading
  000fb	c7 85 64 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv90[ebp], 1
  00105	eb 0a		 jmp	 SHORT $LN42@GetReading
$LN41@GetReading:
  00107	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN42@GetReading:
  00111	8a 8d 64 ff ff
	ff		 mov	 cl, BYTE PTR tv90[ebp]
  00117	88 0d 00 00 00
	00		 mov	 BYTE PTR _g_bHorizontalReading, cl
; Line 1963
  0011d	c6 45 af 01	 mov	 BYTE PTR _unicode$[ebp], 1
; Line 1965
  00121	e9 9b 03 00 00	 jmp	 $LN32@GetReading
$LN35@GetReading:
; Line 1967
  00126	8b f4		 mov	 esi, esp
  00128	8b 55 f4	 mov	 edx, DWORD PTR _himc$[ebp]
  0012b	52		 push	 edx
  0012c	ff 15 00 00 00
	00		 call	 DWORD PTR __ImmLockIMC
  00132	3b f4		 cmp	 esi, esp
  00134	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00139	89 45 a8	 mov	 DWORD PTR _lpIMC$[ebp], eax
; Line 1971
  0013c	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _p$10[ebp], 0
; Line 1973
  00143	8b 45 f8	 mov	 eax, DWORD PTR _dwId$[ebp]
  00146	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv94[ebp], eax
  0014c	81 bd 60 ff ff
	ff 04 04 04 04	 cmp	 DWORD PTR tv94[ebp], 67372036 ; 04040404H
  00156	77 5e		 ja	 SHORT $LN49@GetReading
  00158	81 bd 60 ff ff
	ff 04 04 04 04	 cmp	 DWORD PTR tv94[ebp], 67372036 ; 04040404H
  00162	0f 84 a0 00 00
	00		 je	 $LN29@GetReading
  00168	81 bd 60 ff ff
	ff 04 08 02 04	 cmp	 DWORD PTR tv94[ebp], 67241988 ; 04020804H
  00172	77 31		 ja	 SHORT $LN50@GetReading
  00174	81 bd 60 ff ff
	ff 04 08 02 04	 cmp	 DWORD PTR tv94[ebp], 67241988 ; 04020804H
  0017e	0f 84 36 02 00
	00		 je	 $LN19@GetReading
  00184	81 bd 60 ff ff
	ff 04 08 01 04	 cmp	 DWORD PTR tv94[ebp], 67176452 ; 04010804H
  0018e	0f 84 8c 01 00
	00		 je	 $LN21@GetReading
  00194	81 bd 60 ff ff
	ff 04 04 02 04	 cmp	 DWORD PTR tv94[ebp], 67240964 ; 04020404H
  0019e	74 68		 je	 SHORT $LN29@GetReading
  001a0	e9 b5 02 00 00	 jmp	 $LN30@GetReading
$LN50@GetReading:
  001a5	81 bd 60 ff ff
	ff 04 04 03 04	 cmp	 DWORD PTR tv94[ebp], 67306500 ; 04030404H
  001af	74 57		 je	 SHORT $LN29@GetReading
  001b1	e9 a4 02 00 00	 jmp	 $LN30@GetReading
$LN49@GetReading:
  001b6	81 bd 60 ff ff
	ff 04 04 02 05	 cmp	 DWORD PTR tv94[ebp], 84018180 ; 05020404H
  001c0	77 31		 ja	 SHORT $LN51@GetReading
  001c2	81 bd 60 ff ff
	ff 04 04 02 05	 cmp	 DWORD PTR tv94[ebp], 84018180 ; 05020404H
  001cc	0f 84 ec 00 00
	00		 je	 $LN24@GetReading
  001d2	81 bd 60 ff ff
	ff 04 04 00 05	 cmp	 DWORD PTR tv94[ebp], 83887108 ; 05000404H
  001dc	74 7e		 je	 SHORT $LN27@GetReading
  001de	81 bd 60 ff ff
	ff 04 04 01 05	 cmp	 DWORD PTR tv94[ebp], 83952644 ; 05010404H
  001e8	0f 84 d0 00 00
	00		 je	 $LN24@GetReading
  001ee	e9 67 02 00 00	 jmp	 $LN30@GetReading
$LN51@GetReading:
  001f3	81 bd 60 ff ff
	ff 04 08 03 05	 cmp	 DWORD PTR tv94[ebp], 84084740 ; 05030804H
  001fd	0f 84 bb 00 00
	00		 je	 $LN24@GetReading
  00203	e9 52 02 00 00	 jmp	 $LN30@GetReading
$LN29@GetReading:
; Line 1980
  00208	8b f4		 mov	 esi, esp
  0020a	8b 4d a8	 mov	 ecx, DWORD PTR _lpIMC$[ebp]
  0020d	8b 91 24 01 00
	00		 mov	 edx, DWORD PTR [ecx+292]
  00213	52		 push	 edx
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __ImmLockIMCC
  0021a	3b f4		 cmp	 esi, esp
  0021c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00221	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00224	89 45 8c	 mov	 DWORD PTR _p$10[ebp], eax
; Line 1981
  00227	83 7d 8c 00	 cmp	 DWORD PTR _p$10[ebp], 0
  0022b	75 05		 jne	 SHORT $LN28@GetReading
  0022d	e9 28 02 00 00	 jmp	 $LN30@GetReading
$LN28@GetReading:
; Line 1982
  00232	8b 4d 8c	 mov	 ecx, DWORD PTR _p$10[ebp]
  00235	8b 91 9c 00 00
	00		 mov	 edx, DWORD PTR [ecx+156]
  0023b	89 55 ec	 mov	 DWORD PTR _dwlen$[ebp], edx
; Line 1983
  0023e	8b 45 8c	 mov	 eax, DWORD PTR _p$10[ebp]
  00241	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00247	89 4d e0	 mov	 DWORD PTR _dwerr$[ebp], ecx
; Line 1984
  0024a	8b 55 8c	 mov	 edx, DWORD PTR _p$10[ebp]
  0024d	83 c2 38	 add	 edx, 56			; 00000038H
  00250	89 55 b0	 mov	 DWORD PTR _wstr$[ebp], edx
; Line 1985
  00253	c6 45 af 01	 mov	 BYTE PTR _unicode$[ebp], 1
; Line 1986
  00257	e9 fe 01 00 00	 jmp	 $LN30@GetReading
$LN27@GetReading:
; Line 1990
  0025c	8b f4		 mov	 esi, esp
  0025e	8b 45 a8	 mov	 eax, DWORD PTR _lpIMC$[ebp]
  00261	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  00267	51		 push	 ecx
  00268	ff 15 00 00 00
	00		 call	 DWORD PTR __ImmLockIMCC
  0026e	3b f4		 cmp	 esi, esp
  00270	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00275	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00278	89 55 8c	 mov	 DWORD PTR _p$10[ebp], edx
; Line 1991
  0027b	83 7d 8c 00	 cmp	 DWORD PTR _p$10[ebp], 0
  0027f	75 05		 jne	 SHORT $LN26@GetReading
  00281	e9 d4 01 00 00	 jmp	 $LN30@GetReading
$LN26@GetReading:
; Line 1992
  00286	8b 45 8c	 mov	 eax, DWORD PTR _p$10[ebp]
  00289	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0028c	89 4d 8c	 mov	 DWORD PTR _p$10[ebp], ecx
; Line 1993
  0028f	83 7d 8c 00	 cmp	 DWORD PTR _p$10[ebp], 0
  00293	75 05		 jne	 SHORT $LN25@GetReading
  00295	e9 c0 01 00 00	 jmp	 $LN30@GetReading
$LN25@GetReading:
; Line 1994
  0029a	8b 55 8c	 mov	 edx, DWORD PTR _p$10[ebp]
  0029d	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  002a0	89 45 ec	 mov	 DWORD PTR _dwlen$[ebp], eax
; Line 1995
  002a3	8b 4d 8c	 mov	 ecx, DWORD PTR _p$10[ebp]
  002a6	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
  002a9	89 55 e0	 mov	 DWORD PTR _dwerr$[ebp], edx
; Line 1996
  002ac	8b 45 8c	 mov	 eax, DWORD PTR _p$10[ebp]
  002af	83 c0 40	 add	 eax, 64			; 00000040H
  002b2	89 45 b0	 mov	 DWORD PTR _wstr$[ebp], eax
; Line 1997
  002b5	c6 45 af 00	 mov	 BYTE PTR _unicode$[ebp], 0
; Line 1998
  002b9	e9 9c 01 00 00	 jmp	 $LN30@GetReading
$LN24@GetReading:
; Line 2004
  002be	8b f4		 mov	 esi, esp
  002c0	8b 4d a8	 mov	 ecx, DWORD PTR _lpIMC$[ebp]
  002c3	8b 91 24 01 00
	00		 mov	 edx, DWORD PTR [ecx+292]
  002c9	52		 push	 edx
  002ca	ff 15 00 00 00
	00		 call	 DWORD PTR __ImmLockIMCC
  002d0	3b f4		 cmp	 esi, esp
  002d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002d7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002da	89 45 8c	 mov	 DWORD PTR _p$10[ebp], eax
; Line 2005
  002dd	83 7d 8c 00	 cmp	 DWORD PTR _p$10[ebp], 0
  002e1	75 05		 jne	 SHORT $LN23@GetReading
  002e3	e9 72 01 00 00	 jmp	 $LN30@GetReading
$LN23@GetReading:
; Line 2006
  002e8	8b 4d 8c	 mov	 ecx, DWORD PTR _p$10[ebp]
  002eb	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  002ee	89 55 8c	 mov	 DWORD PTR _p$10[ebp], edx
; Line 2007
  002f1	83 7d 8c 00	 cmp	 DWORD PTR _p$10[ebp], 0
  002f5	75 05		 jne	 SHORT $LN22@GetReading
  002f7	e9 5e 01 00 00	 jmp	 $LN30@GetReading
$LN22@GetReading:
; Line 2008
  002fc	8b 45 8c	 mov	 eax, DWORD PTR _p$10[ebp]
  002ff	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  00302	89 4d ec	 mov	 DWORD PTR _dwlen$[ebp], ecx
; Line 2009
  00305	8b 55 8c	 mov	 edx, DWORD PTR _p$10[ebp]
  00308	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  0030b	89 45 e0	 mov	 DWORD PTR _dwerr$[ebp], eax
; Line 2010
  0030e	8b 4d 8c	 mov	 ecx, DWORD PTR _p$10[ebp]
  00311	83 c1 40	 add	 ecx, 64			; 00000040H
  00314	89 4d b0	 mov	 DWORD PTR _wstr$[ebp], ecx
; Line 2011
  00317	c6 45 af 01	 mov	 BYTE PTR _unicode$[ebp], 1
; Line 2012
  0031b	e9 3a 01 00 00	 jmp	 $LN30@GetReading
$LN21@GetReading:
; Line 2018
  00320	6a 01		 push	 1
  00322	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  00327	83 c4 04	 add	 esp, 4
  0032a	83 f8 02	 cmp	 eax, 2
  0032d	72 0c		 jb	 SHORT $LN43@GetReading
  0032f	c7 85 5c ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv181[ebp], 8
  00339	eb 0a		 jmp	 SHORT $LN44@GetReading
$LN43@GetReading:
  0033b	c7 85 5c ff ff
	ff 07 00 00 00	 mov	 DWORD PTR tv181[ebp], 7
$LN44@GetReading:
  00345	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR tv181[ebp]
  0034b	89 55 88	 mov	 DWORD PTR _offset$9[ebp], edx
; Line 2020
  0034e	8b f4		 mov	 esi, esp
  00350	8b 45 a8	 mov	 eax, DWORD PTR _lpIMC$[ebp]
  00353	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  00359	51		 push	 ecx
  0035a	ff 15 00 00 00
	00		 call	 DWORD PTR __ImmLockIMCC
  00360	3b f4		 cmp	 esi, esp
  00362	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00367	8b 55 88	 mov	 edx, DWORD PTR _offset$9[ebp]
  0036a	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0036d	89 45 8c	 mov	 DWORD PTR _p$10[ebp], eax
; Line 2021
  00370	83 7d 8c 00	 cmp	 DWORD PTR _p$10[ebp], 0
  00374	75 05		 jne	 SHORT $LN20@GetReading
  00376	e9 df 00 00 00	 jmp	 $LN30@GetReading
$LN20@GetReading:
; Line 2022
  0037b	8b 4d 8c	 mov	 ecx, DWORD PTR _p$10[ebp]
  0037e	8b 91 9c 00 00
	00		 mov	 edx, DWORD PTR [ecx+156]
  00384	89 55 ec	 mov	 DWORD PTR _dwlen$[ebp], edx
; Line 2023
  00387	8b 45 8c	 mov	 eax, DWORD PTR _p$10[ebp]
  0038a	8b 88 a0 00 00
	00		 mov	 ecx, DWORD PTR [eax+160]
  00390	89 4d e0	 mov	 DWORD PTR _dwerr$[ebp], ecx
; Line 2024
  00393	8d 55 ec	 lea	 edx, DWORD PTR _dwlen$[ebp]
  00396	52		 push	 edx
  00397	8d 45 e0	 lea	 eax, DWORD PTR _dwerr$[ebp]
  0039a	50		 push	 eax
  0039b	e8 00 00 00 00	 call	 ??$min@K@std@@YAABKABK0@Z ; std::min<unsigned long>
  003a0	83 c4 08	 add	 esp, 8
  003a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  003a5	89 4d e0	 mov	 DWORD PTR _dwerr$[ebp], ecx
; Line 2025
  003a8	8b 55 8c	 mov	 edx, DWORD PTR _p$10[ebp]
  003ab	83 c2 38	 add	 edx, 56			; 00000038H
  003ae	89 55 b0	 mov	 DWORD PTR _wstr$[ebp], edx
; Line 2026
  003b1	c6 45 af 01	 mov	 BYTE PTR _unicode$[ebp], 1
; Line 2027
  003b5	e9 a0 00 00 00	 jmp	 $LN30@GetReading
$LN19@GetReading:
; Line 2032
  003ba	83 3d 10 00 00
	00 02		 cmp	 DWORD PTR _g_osi+16, 2
  003c1	75 0c		 jne	 SHORT $LN45@GetReading
  003c3	c7 85 58 ff ff
	ff 02 00 00 00	 mov	 DWORD PTR tv198[ebp], 2
  003cd	eb 0a		 jmp	 SHORT $LN46@GetReading
$LN45@GetReading:
  003cf	c7 85 58 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv198[ebp], 1
$LN46@GetReading:
  003d9	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv198[ebp]
  003df	89 45 84	 mov	 DWORD PTR _nTcharSize$8[ebp], eax
; Line 2033
  003e2	8b f4		 mov	 esi, esp
  003e4	8b 4d a8	 mov	 ecx, DWORD PTR _lpIMC$[ebp]
  003e7	8b 91 24 01 00
	00		 mov	 edx, DWORD PTR [ecx+292]
  003ed	52		 push	 edx
  003ee	ff 15 00 00 00
	00		 call	 DWORD PTR __ImmLockIMCC
  003f4	3b f4		 cmp	 esi, esp
  003f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003fb	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  003fe	89 45 8c	 mov	 DWORD PTR _p$10[ebp], eax
; Line 2034
  00401	83 7d 8c 00	 cmp	 DWORD PTR _p$10[ebp], 0
  00405	75 02		 jne	 SHORT $LN18@GetReading
  00407	eb 51		 jmp	 SHORT $LN30@GetReading
$LN18@GetReading:
; Line 2035
  00409	8b 4d 84	 mov	 ecx, DWORD PTR _nTcharSize$8[ebp]
  0040c	c1 e1 04	 shl	 ecx, 4
  0040f	8b 55 8c	 mov	 edx, DWORD PTR _p$10[ebp]
  00412	8b 44 0a 40	 mov	 eax, DWORD PTR [edx+ecx+64]
  00416	89 45 ec	 mov	 DWORD PTR _dwlen$[ebp], eax
; Line 2036
  00419	8b 4d 84	 mov	 ecx, DWORD PTR _nTcharSize$8[ebp]
  0041c	c1 e1 04	 shl	 ecx, 4
  0041f	8b 55 8c	 mov	 edx, DWORD PTR _p$10[ebp]
  00422	8b 44 0a 44	 mov	 eax, DWORD PTR [edx+ecx+68]
  00426	89 45 e0	 mov	 DWORD PTR _dwerr$[ebp], eax
; Line 2037
  00429	8b 4d 8c	 mov	 ecx, DWORD PTR _p$10[ebp]
  0042c	83 c1 40	 add	 ecx, 64			; 00000040H
  0042f	89 4d b0	 mov	 DWORD PTR _wstr$[ebp], ecx
; Line 2038
  00432	83 3d 10 00 00
	00 02		 cmp	 DWORD PTR _g_osi+16, 2
  00439	75 0c		 jne	 SHORT $LN47@GetReading
  0043b	c7 85 54 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv221[ebp], 1
  00445	eb 0a		 jmp	 SHORT $LN48@GetReading
$LN47@GetReading:
  00447	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv221[ebp], 0
$LN48@GetReading:
  00451	8a 95 54 ff ff
	ff		 mov	 dl, BYTE PTR tv221[ebp]
  00457	88 55 af	 mov	 BYTE PTR _unicode$[ebp], dl
$LN30@GetReading:
; Line 2042
  0045a	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  0045f	6b c8 00	 imul	 ecx, eax, 0
  00462	ba 02 00 00 00	 mov	 edx, 2
  00467	6b c2 00	 imul	 eax, edx, 0
  0046a	33 d2		 xor	 edx, edx
  0046c	66 89 94 01 00
	00 00 00	 mov	 WORD PTR _g_szCandidate[ecx+eax], dx
; Line 2043
  00474	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  00479	c1 e0 00	 shl	 eax, 0
  0047c	b9 02 00 00 00	 mov	 ecx, 2
  00481	6b d1 00	 imul	 edx, ecx, 0
  00484	33 c9		 xor	 ecx, ecx
  00486	66 89 8c 10 00
	00 00 00	 mov	 WORD PTR _g_szCandidate[eax+edx], cx
; Line 2044
  0048e	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00493	d1 e2		 shl	 edx, 1
  00495	b8 02 00 00 00	 mov	 eax, 2
  0049a	6b c8 00	 imul	 ecx, eax, 0
  0049d	33 c0		 xor	 eax, eax
  0049f	66 89 84 0a 00
	00 00 00	 mov	 WORD PTR _g_szCandidate[edx+ecx], ax
; Line 2045
  004a7	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  004ac	6b d1 03	 imul	 edx, ecx, 3
  004af	b8 02 00 00 00	 mov	 eax, 2
  004b4	6b c8 00	 imul	 ecx, eax, 0
  004b7	33 c0		 xor	 eax, eax
  004b9	66 89 84 0a 00
	00 00 00	 mov	 WORD PTR _g_szCandidate[edx+ecx], ax
$LN32@GetReading:
; Line 2047
  004c1	8b 4d ec	 mov	 ecx, DWORD PTR _dwlen$[ebp]
  004c4	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwCount, ecx
; Line 2048
  004ca	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _g_dwSelection, -1
; Line 2049
  004d4	0f b6 55 af	 movzx	 edx, BYTE PTR _unicode$[ebp]
  004d8	85 d2		 test	 edx, edx
  004da	0f 84 8a 00 00
	00		 je	 $LN17@GetReading
; Line 2052
  004e0	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _i$7[ebp], 0
  004e7	eb 09		 jmp	 SHORT $LN16@GetReading
$LN15@GetReading:
  004e9	8b 45 80	 mov	 eax, DWORD PTR _i$7[ebp]
  004ec	83 c0 01	 add	 eax, 1
  004ef	89 45 80	 mov	 DWORD PTR _i$7[ebp], eax
$LN16@GetReading:
  004f2	8b 4d 80	 mov	 ecx, DWORD PTR _i$7[ebp]
  004f5	3b 4d ec	 cmp	 ecx, DWORD PTR _dwlen$[ebp]
  004f8	73 53		 jae	 SHORT $LN14@GetReading
; Line 2054
  004fa	8b 55 e0	 mov	 edx, DWORD PTR _dwerr$[ebp]
  004fd	3b 55 80	 cmp	 edx, DWORD PTR _i$7[ebp]
  00500	77 11		 ja	 SHORT $LN13@GetReading
  00502	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _g_dwSelection, -1
  00509	75 08		 jne	 SHORT $LN13@GetReading
; Line 2056
  0050b	8b 45 80	 mov	 eax, DWORD PTR _i$7[ebp]
  0050e	a3 00 00 00 00	 mov	 DWORD PTR _g_dwSelection, eax
$LN13@GetReading:
; Line 2058
  00513	8b 4d 80	 mov	 ecx, DWORD PTR _i$7[ebp]
  00516	c1 e1 09	 shl	 ecx, 9
  00519	ba 02 00 00 00	 mov	 edx, 2
  0051e	6b c2 00	 imul	 eax, edx, 0
  00521	8b 55 80	 mov	 edx, DWORD PTR _i$7[ebp]
  00524	8b 75 b0	 mov	 esi, DWORD PTR _wstr$[ebp]
  00527	66 8b 14 56	 mov	 dx, WORD PTR [esi+edx*2]
  0052b	66 89 94 01 00
	00 00 00	 mov	 WORD PTR _g_szCandidate[ecx+eax], dx
; Line 2059
  00533	8b 45 80	 mov	 eax, DWORD PTR _i$7[ebp]
  00536	c1 e0 09	 shl	 eax, 9
  00539	b9 02 00 00 00	 mov	 ecx, 2
  0053e	c1 e1 00	 shl	 ecx, 0
  00541	33 d2		 xor	 edx, edx
  00543	66 89 94 08 00
	00 00 00	 mov	 WORD PTR _g_szCandidate[eax+ecx], dx
; Line 2060
  0054b	eb 9c		 jmp	 SHORT $LN15@GetReading
$LN14@GetReading:
; Line 2061
  0054d	8b 45 80	 mov	 eax, DWORD PTR _i$7[ebp]
  00550	c1 e0 09	 shl	 eax, 9
  00553	b9 02 00 00 00	 mov	 ecx, 2
  00558	6b d1 00	 imul	 edx, ecx, 0
  0055b	33 c9		 xor	 ecx, ecx
  0055d	66 89 8c 10 00
	00 00 00	 mov	 WORD PTR _g_szCandidate[eax+edx], cx
; Line 2063
  00565	e9 31 01 00 00	 jmp	 $LN12@GetReading
$LN17@GetReading:
; Line 2065
  0056a	8b 55 b0	 mov	 edx, DWORD PTR _wstr$[ebp]
  0056d	89 95 7c ff ff
	ff		 mov	 DWORD PTR _p$6[ebp], edx
; Line 2067
  00573	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$5[ebp], 0
  0057d	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$4[ebp], 0
  00587	eb 1e		 jmp	 SHORT $LN11@GetReading
$LN10@GetReading:
  00589	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  0058f	83 c0 01	 add	 eax, 1
  00592	89 85 78 ff ff
	ff		 mov	 DWORD PTR _i$5[ebp], eax
  00598	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _j$4[ebp]
  0059e	83 c1 01	 add	 ecx, 1
  005a1	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _j$4[ebp], ecx
$LN11@GetReading:
  005a7	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _i$5[ebp]
  005ad	3b 55 ec	 cmp	 edx, DWORD PTR _dwlen$[ebp]
  005b0	0f 83 bf 00 00
	00		 jae	 $LN9@GetReading
; Line 2069
  005b6	8b 45 e0	 mov	 eax, DWORD PTR _dwerr$[ebp]
  005b9	3b 85 78 ff ff
	ff		 cmp	 eax, DWORD PTR _i$5[ebp]
  005bf	77 15		 ja	 SHORT $LN8@GetReading
  005c1	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR _g_dwSelection, -1
  005c8	75 0c		 jne	 SHORT $LN8@GetReading
; Line 2071
  005ca	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _j$4[ebp]
  005d0	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwSelection, ecx
$LN8@GetReading:
; Line 2074
  005d6	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _p$6[ebp]
  005dc	03 95 78 ff ff
	ff		 add	 edx, DWORD PTR _i$5[ebp]
  005e2	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  005e5	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _LeadByteTable[eax]
  005ec	85 c9		 test	 ecx, ecx
  005ee	74 0c		 je	 SHORT $LN52@GetReading
  005f0	c7 85 50 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv288[ebp], 1
  005fa	eb 0a		 jmp	 SHORT $LN53@GetReading
$LN52@GetReading:
  005fc	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv288[ebp], 0
$LN53@GetReading:
  00606	8b f4		 mov	 esi, esp
  00608	6a 01		 push	 1
  0060a	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _j$4[ebp]
  00610	c1 e2 09	 shl	 edx, 9
  00613	81 c2 00 00 00
	00		 add	 edx, OFFSET _g_szCandidate
  00619	52		 push	 edx
  0061a	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  00620	83 c0 01	 add	 eax, 1
  00623	50		 push	 eax
  00624	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _p$6[ebp]
  0062a	03 8d 78 ff ff
	ff		 add	 ecx, DWORD PTR _i$5[ebp]
  00630	51		 push	 ecx
  00631	6a 00		 push	 0
  00633	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_uCodePage
  00639	52		 push	 edx
  0063a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  00640	3b f4		 cmp	 esi, esp
  00642	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2075
  00647	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _p$6[ebp]
  0064d	03 85 78 ff ff
	ff		 add	 eax, DWORD PTR _i$5[ebp]
  00653	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00656	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _LeadByteTable[ecx]
  0065d	85 d2		 test	 edx, edx
  0065f	74 0f		 je	 SHORT $LN7@GetReading
; Line 2077
  00661	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  00667	83 c0 01	 add	 eax, 1
  0066a	89 85 78 ff ff
	ff		 mov	 DWORD PTR _i$5[ebp], eax
$LN7@GetReading:
; Line 2079
  00670	e9 14 ff ff ff	 jmp	 $LN10@GetReading
$LN9@GetReading:
; Line 2080
  00675	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _j$4[ebp]
  0067b	c1 e1 09	 shl	 ecx, 9
  0067e	ba 02 00 00 00	 mov	 edx, 2
  00683	6b c2 00	 imul	 eax, edx, 0
  00686	33 d2		 xor	 edx, edx
  00688	66 89 94 01 00
	00 00 00	 mov	 WORD PTR _g_szCandidate[ecx+eax], dx
; Line 2081
  00690	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _j$4[ebp]
  00696	a3 00 00 00 00	 mov	 DWORD PTR _g_dwCount, eax
$LN12@GetReading:
; Line 2083
  0069b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA, 0 ; _GetReadingString
  006a2	75 38		 jne	 SHORT $LN6@GetReading
; Line 2085
  006a4	8b f4		 mov	 esi, esp
  006a6	8b 4d a8	 mov	 ecx, DWORD PTR _lpIMC$[ebp]
  006a9	8b 91 24 01 00
	00		 mov	 edx, DWORD PTR [ecx+292]
  006af	52		 push	 edx
  006b0	ff 15 00 00 00
	00		 call	 DWORD PTR __ImmUnlockIMCC
  006b6	3b f4		 cmp	 esi, esp
  006b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2086
  006bd	8b f4		 mov	 esi, esp
  006bf	8b 45 f4	 mov	 eax, DWORD PTR _himc$[ebp]
  006c2	50		 push	 eax
  006c3	ff 15 00 00 00
	00		 call	 DWORD PTR __ImmUnlockIMC
  006c9	3b f4		 cmp	 esi, esp
  006cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2087
  006d0	8b 4d f8	 mov	 ecx, DWORD PTR _dwId$[ebp]
  006d3	51		 push	 ecx
  006d4	e8 00 00 00 00	 call	 ?GetReadingWindowOrientation@@YAXK@Z ; GetReadingWindowOrientation
  006d9	83 c4 04	 add	 esp, 4
$LN6@GetReading:
; Line 2089
  006dc	8b 55 f4	 mov	 edx, DWORD PTR _himc$[ebp]
  006df	52		 push	 edx
  006e0	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  006e3	50		 push	 eax
  006e4	e8 00 00 00 00	 call	 _ImmReleaseContext@8
; Line 2091
  006e9	c6 05 00 00 00
	00 01		 mov	 BYTE PTR _g_bReadingWindow, 1
; Line 2092
  006f0	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bHorizontalReading
  006f7	85 c9		 test	 ecx, ecx
  006f9	0f 84 06 01 00
	00		 je	 $LN5@GetReading
; Line 2094
  006ff	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _g_iReadingError, -1
; Line 2095
  00709	ba 02 00 00 00	 mov	 edx, 2
  0070e	6b c2 00	 imul	 eax, edx, 0
  00711	89 85 68 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00717	83 bd 68 ff ff
	ff 40		 cmp	 DWORD PTR $T1[ebp], 64	; 00000040H
  0071e	73 02		 jae	 SHORT $LN54@GetReading
  00720	eb 05		 jmp	 SHORT $LN55@GetReading
$LN54@GetReading:
  00722	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN55@GetReading:
  00727	33 c9		 xor	 ecx, ecx
  00729	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  0072f	66 89 8a 00 00
	00 00		 mov	 WORD PTR _g_szReadingString[edx], cx
; Line 2096
  00736	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$3[ebp], 0
  00740	eb 0f		 jmp	 SHORT $LN4@GetReading
$LN3@GetReading:
  00742	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _i$3[ebp]
  00748	83 c0 01	 add	 eax, 1
  0074b	89 85 70 ff ff
	ff		 mov	 DWORD PTR _i$3[ebp], eax
$LN4@GetReading:
  00751	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _i$3[ebp]
  00757	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _g_dwCount
  0075d	0f 83 a2 00 00
	00		 jae	 $LN5@GetReading
; Line 2098
  00763	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_dwSelection
  00769	3b 95 70 ff ff
	ff		 cmp	 edx, DWORD PTR _i$3[ebp]
  0076f	75 5a		 jne	 SHORT $LN1@GetReading
; Line 2099
  00771	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv497[ebp], OFFSET _g_szReadingString
  0077b	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv497[ebp]
  00781	83 c0 02	 add	 eax, 2
  00784	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv500[ebp], eax
$LL56@GetReading:
  0078a	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv497[ebp]
  00790	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00793	66 89 95 46 ff
	ff ff		 mov	 WORD PTR tv503[ebp], dx
  0079a	83 85 4c ff ff
	ff 02		 add	 DWORD PTR tv497[ebp], 2
  007a1	66 83 bd 46 ff
	ff ff 00	 cmp	 WORD PTR tv503[ebp], 0
  007a9	75 df		 jne	 SHORT $LL56@GetReading
  007ab	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR tv497[ebp]
  007b1	2b 85 48 ff ff
	ff		 sub	 eax, DWORD PTR tv500[ebp]
  007b7	d1 f8		 sar	 eax, 1
  007b9	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv323[ebp], eax
  007bf	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR tv323[ebp]
  007c5	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_iReadingError, ecx
$LN1@GetReading:
; Line 2100
  007cb	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _i$3[ebp]
  007d1	c1 e2 09	 shl	 edx, 9
  007d4	81 c2 00 00 00
	00		 add	 edx, OFFSET _g_szCandidate
  007da	89 95 6c ff ff
	ff		 mov	 DWORD PTR _pszTmp$2[ebp], edx
; Line 2101
  007e0	8b f4		 mov	 esi, esp
  007e2	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _pszTmp$2[ebp]
  007e8	50		 push	 eax
  007e9	6a 20		 push	 32			; 00000020H
  007eb	68 00 00 00 00	 push	 OFFSET _g_szReadingString
  007f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscat_s
  007f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  007f9	3b f4		 cmp	 esi, esp
  007fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2102
  00800	e9 3d ff ff ff	 jmp	 $LN3@GetReading
$LN5@GetReading:
; Line 2104
  00805	c7 05 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR _g_uCandPageSize, 10 ; 0000000aH
$LN40@GetReading:
; Line 2105
  0080f	52		 push	 edx
  00810	8b cd		 mov	 ecx, ebp
  00812	50		 push	 eax
  00813	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN63@GetReading
  00819	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0081e	58		 pop	 eax
  0081f	5a		 pop	 edx
  00820	5f		 pop	 edi
  00821	5e		 pop	 esi
  00822	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00825	33 cd		 xor	 ecx, ebp
  00827	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0082c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00832	3b ec		 cmp	 ebp, esp
  00834	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00839	8b e5		 mov	 esp, ebp
  0083b	5d		 pop	 ebp
  0083c	c3		 ret	 0
  0083d	8d 49 00	 npad	 3
$LN63@GetReading:
  00840	05 00 00 00	 DD	 5
  00844	00 00 00 00	 DD	 $LN62@GetReading
$LN62@GetReading:
  00848	ec ff ff ff	 DD	 -20			; ffffffecH
  0084c	04 00 00 00	 DD	 4
  00850	00 00 00 00	 DD	 $LN57@GetReading
  00854	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00858	04 00 00 00	 DD	 4
  0085c	00 00 00 00	 DD	 $LN58@GetReading
  00860	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00864	20 00 00 00	 DD	 32			; 00000020H
  00868	00 00 00 00	 DD	 $LN59@GetReading
  0086c	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00870	04 00 00 00	 DD	 4
  00874	00 00 00 00	 DD	 $LN60@GetReading
  00878	94 ff ff ff	 DD	 -108			; ffffff94H
  0087c	04 00 00 00	 DD	 4
  00880	00 00 00 00	 DD	 $LN61@GetReading
$LN61@GetReading:
  00884	75		 DB	 117			; 00000075H
  00885	4d		 DB	 77			; 0000004dH
  00886	61		 DB	 97			; 00000061H
  00887	78		 DB	 120			; 00000078H
  00888	55		 DB	 85			; 00000055H
  00889	69		 DB	 105			; 00000069H
  0088a	4c		 DB	 76			; 0000004cH
  0088b	65		 DB	 101			; 00000065H
  0088c	6e		 DB	 110			; 0000006eH
  0088d	00		 DB	 0
$LN60@GetReading:
  0088e	62		 DB	 98			; 00000062H
  0088f	56		 DB	 86			; 00000056H
  00890	65		 DB	 101			; 00000065H
  00891	72		 DB	 114			; 00000072H
  00892	74		 DB	 116			; 00000074H
  00893	69		 DB	 105			; 00000069H
  00894	63		 DB	 99			; 00000063H
  00895	61		 DB	 97			; 00000061H
  00896	6c		 DB	 108			; 0000006cH
  00897	00		 DB	 0
$LN59@GetReading:
  00898	77		 DB	 119			; 00000077H
  00899	7a		 DB	 122			; 0000007aH
  0089a	42		 DB	 66			; 00000042H
  0089b	75		 DB	 117			; 00000075H
  0089c	66		 DB	 102			; 00000066H
  0089d	00		 DB	 0
$LN58@GetReading:
  0089e	64		 DB	 100			; 00000064H
  0089f	77		 DB	 119			; 00000077H
  008a0	65		 DB	 101			; 00000065H
  008a1	72		 DB	 114			; 00000072H
  008a2	72		 DB	 114			; 00000072H
  008a3	00		 DB	 0
$LN57@GetReading:
  008a4	64		 DB	 100			; 00000064H
  008a5	77		 DB	 119			; 00000077H
  008a6	6c		 DB	 108			; 0000006cH
  008a7	65		 DB	 101			; 00000065H
  008a8	6e		 DB	 110			; 0000006eH
  008a9	00		 DB	 0
?GetReadingString@@YAXPAUHWND__@@@Z ENDP		; GetReadingString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_pszIndicatior@@YAXXZ
text$di	SEGMENT
??__Eg_pszIndicatior@@YAXXZ PROC			; `dynamic initializer for 'g_pszIndicatior'', COMDAT
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 307
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 04 00 00 00	 mov	 eax, 4
  00008	6b c8 00	 imul	 ecx, eax, 0
  0000b	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _g_aszIndicator[ecx]
  00011	89 15 00 00 00
	00		 mov	 DWORD PTR _g_pszIndicatior, edx
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??__Eg_pszIndicatior@@YAXXZ ENDP			; `dynamic initializer for 'g_pszIndicatior''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__E_SendMessage@@YAXXZ
text$di	SEGMENT
??__E_SendMessage@@YAXXZ PROC				; `dynamic initializer for '_SendMessage'', COMDAT
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 225
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__SendMessageA@16
  00008	a3 00 00 00 00	 mov	 DWORD PTR __SendMessage, eax
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??__E_SendMessage@@YAXXZ ENDP				; `dynamic initializer for '_SendMessage''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_msg$ = -32						; size = 28
?_PumpMessage@@YAXXZ PROC				; _PumpMessage
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2354
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
$LN3@PumpMessag:
; Line 2356
  00027	8b f4		 mov	 esi, esp
  00029	6a 00		 push	 0
  0002b	6a 00		 push	 0
  0002d	6a 00		 push	 0
  0002f	6a 00		 push	 0
  00031	8d 45 e0	 lea	 eax, DWORD PTR _msg$[ebp]
  00034	50		 push	 eax
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0003b	3b f4		 cmp	 esi, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	85 c0		 test	 eax, eax
  00044	74 5a		 je	 SHORT $LN4@PumpMessag
; Line 2358
  00046	8b f4		 mov	 esi, esp
  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	6a 00		 push	 0
  0004e	8d 4d e0	 lea	 ecx, DWORD PTR _msg$[ebp]
  00051	51		 push	 ecx
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMessageA@16
  00058	3b f4		 cmp	 esi, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	85 c0		 test	 eax, eax
  00061	75 15		 jne	 SHORT $LN1@PumpMessag
; Line 2360
  00063	8b f4		 mov	 esi, esp
  00065	8b 55 e8	 mov	 edx, DWORD PTR _msg$[ebp+8]
  00068	52		 push	 edx
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
  0006f	3b f4		 cmp	 esi, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2361
  00076	eb 28		 jmp	 SHORT $LN4@PumpMessag
$LN1@PumpMessag:
; Line 2364
  00078	8b f4		 mov	 esi, esp
  0007a	8d 45 e0	 lea	 eax, DWORD PTR _msg$[ebp]
  0007d	50		 push	 eax
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TranslateMessage@4
  00084	3b f4		 cmp	 esi, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2365
  0008b	8b f4		 mov	 esi, esp
  0008d	8d 4d e0	 lea	 ecx, DWORD PTR _msg$[ebp]
  00090	51		 push	 ecx
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DispatchMessageA@4
  00097	3b f4		 cmp	 esi, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2367
  0009e	eb 87		 jmp	 SHORT $LN3@PumpMessag
$LN4@PumpMessag:
; Line 2368
  000a0	52		 push	 edx
  000a1	8b cd		 mov	 ecx, ebp
  000a3	50		 push	 eax
  000a4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@PumpMessag
  000aa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000af	58		 pop	 eax
  000b0	5a		 pop	 edx
  000b1	5e		 pop	 esi
  000b2	83 c4 24	 add	 esp, 36			; 00000024H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
$LN8@PumpMessag:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN7@PumpMessag
$LN7@PumpMessag:
  000c8	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000cc	1c 00 00 00	 DD	 28			; 0000001cH
  000d0	00 00 00 00	 DD	 $LN6@PumpMessag
$LN6@PumpMessag:
  000d4	6d		 DB	 109			; 0000006dH
  000d5	73		 DB	 115			; 00000073H
  000d6	67		 DB	 103			; 00000067H
  000d7	00		 DB	 0
?_PumpMessage@@YAXXZ ENDP				; _PumpMessage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Fg_disableCicero@@YAXXZ
text$yd	SEGMENT
??__Fg_disableCicero@@YAXXZ PROC			; `dynamic atexit destructor for 'g_disableCicero'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET _g_disableCicero
  00008	e8 00 00 00 00	 call	 ??1CDisableCicero@@QAE@XZ ; CDisableCicero::~CDisableCicero
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??__Fg_disableCicero@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_disableCicero''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_disableCicero@@YAXXZ
text$di	SEGMENT
??__Eg_disableCicero@@YAXXZ PROC			; `dynamic initializer for 'g_disableCicero'', COMDAT
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 187
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET _g_disableCicero
  00008	e8 00 00 00 00	 call	 ??0CDisableCicero@@QAE@XZ ; CDisableCicero::CDisableCicero
  0000d	68 00 00 00 00	 push	 OFFSET ??__Fg_disableCicero@@YAXXZ ; `dynamic atexit destructor for 'g_disableCicero''
  00012	e8 00 00 00 00	 call	 _atexit
  00017	83 c4 04	 add	 esp, 4
  0001a	3b ec		 cmp	 ebp, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??__Eg_disableCicero@@YAXXZ ENDP			; `dynamic initializer for 'g_disableCicero''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DisableCiceroOnThisWnd@CDisableCicero@@QAEXPAUHWND__@@@Z
_TEXT	SEGMENT
_pdimPrev$ = -12					; size = 4
_this$ = -4						; size = 4
_hwnd$ = 8						; size = 4
?DisableCiceroOnThisWnd@CDisableCicero@@QAEXPAUHWND__@@@Z PROC ; CDisableCicero::DisableCiceroOnThisWnd, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 170
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 171
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00021	75 02		 jne	 SHORT $LN3@DisableCic
; Line 172
  00023	eb 46		 jmp	 SHORT $LN4@DisableCic
$LN3@DisableCic:
; Line 177
  00025	8b f4		 mov	 esi, esp
  00027	8d 4d f4	 lea	 ecx, DWORD PTR _pdimPrev$[ebp]
  0002a	51		 push	 ecx
  0002b	6a 00		 push	 0
  0002d	8b 55 08	 mov	 edx, DWORD PTR _hwnd$[ebp]
  00030	52		 push	 edx
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0003d	50		 push	 eax
  0003e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00041	ff d2		 call	 edx
  00043	3b f4		 cmp	 esi, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	85 c0		 test	 eax, eax
  0004c	7c 1d		 jl	 SHORT $LN4@DisableCic
; Line 179
  0004e	83 7d f4 00	 cmp	 DWORD PTR _pdimPrev$[ebp], 0
  00052	74 17		 je	 SHORT $LN4@DisableCic
; Line 180
  00054	8b 45 f4	 mov	 eax, DWORD PTR _pdimPrev$[ebp]
  00057	8b 08		 mov	 ecx, DWORD PTR [eax]
  00059	8b f4		 mov	 esi, esp
  0005b	8b 55 f4	 mov	 edx, DWORD PTR _pdimPrev$[ebp]
  0005e	52		 push	 edx
  0005f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00062	ff d0		 call	 eax
  00064	3b f4		 cmp	 esi, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@DisableCic:
; Line 182
  0006b	52		 push	 edx
  0006c	8b cd		 mov	 ecx, ebp
  0006e	50		 push	 eax
  0006f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@DisableCic
  00075	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0007a	58		 pop	 eax
  0007b	5a		 pop	 edx
  0007c	5e		 pop	 esi
  0007d	83 c4 10	 add	 esp, 16			; 00000010H
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
  0008d	8d 49 00	 npad	 3
$LN8@DisableCic:
  00090	01 00 00 00	 DD	 1
  00094	00 00 00 00	 DD	 $LN7@DisableCic
$LN7@DisableCic:
  00098	f4 ff ff ff	 DD	 -12			; fffffff4H
  0009c	04 00 00 00	 DD	 4
  000a0	00 00 00 00	 DD	 $LN6@DisableCic
$LN6@DisableCic:
  000a4	70		 DB	 112			; 00000070H
  000a5	64		 DB	 100			; 00000064H
  000a6	69		 DB	 105			; 00000069H
  000a7	6d		 DB	 109			; 0000006dH
  000a8	50		 DB	 80			; 00000050H
  000a9	72		 DB	 114			; 00000072H
  000aa	65		 DB	 101			; 00000065H
  000ab	76		 DB	 118			; 00000076H
  000ac	00		 DB	 0
?DisableCiceroOnThisWnd@CDisableCicero@@QAEXPAUHWND__@@@Z ENDP ; CDisableCicero::DisableCiceroOnThisWnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Uninitialize@CDisableCicero@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Uninitialize@CDisableCicero@@QAEXXZ PROC		; CDisableCicero::Uninitialize, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 158
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 159
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 38 00	 cmp	 DWORD PTR [eax], 0
  00015	74 24		 je	 SHORT $LN2@Uninitiali
; Line 161
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00021	8b 12		 mov	 edx, DWORD PTR [edx]
  00023	8b f4		 mov	 esi, esp
  00025	51		 push	 ecx
  00026	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00029	ff d0		 call	 eax
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 162
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$LN2@Uninitiali:
; Line 164
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003e	0f b6 42 04	 movzx	 eax, BYTE PTR [edx+4]
  00042	85 c0		 test	 eax, eax
  00044	74 0f		 je	 SHORT $LN1@Uninitiali
; Line 165
  00046	8b f4		 mov	 esi, esp
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Uninitiali:
; Line 166
  00055	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
; Line 167
  0005c	5e		 pop	 esi
  0005d	83 c4 04	 add	 esp, 4
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?Uninitialize@CDisableCicero@@QAEXXZ ENDP		; CDisableCicero::Uninitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Initialize@CDisableCicero@@QAEXXZ
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
?Initialize@CDisableCicero@@QAEXXZ PROC			; CDisableCicero::Initialize, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 140
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 141
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0001f	85 c9		 test	 ecx, ecx
  00021	74 02		 je	 SHORT $LN2@Initialize
; Line 143
  00023	eb 47		 jmp	 SHORT $LN3@Initialize
$LN2@Initialize:
; Line 146
  00025	8b f4		 mov	 esi, esp
  00027	6a 02		 push	 2
  00029	6a 00		 push	 0
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitializeEx@8
  00031	3b f4		 cmp	 esi, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
; Line 147
  0003b	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003f	7c 2b		 jl	 SHORT $LN3@Initialize
; Line 149
  00041	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00044	c6 42 04 01	 mov	 BYTE PTR [edx+4], 1
; Line 154
  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b f4		 mov	 esi, esp
  0004d	50		 push	 eax
  0004e	68 00 00 00 00	 push	 OFFSET __GUID_aa80e801_2021_11d2_93e0_0060b067b86e
  00053	6a 01		 push	 1
  00055	6a 00		 push	 0
  00057	68 00 00 00 00	 push	 OFFSET _CLSID_TF_ThreadMgr
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoCreateInstance@20
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
$LN3@Initialize:
; Line 156
  0006c	5e		 pop	 esi
  0006d	83 c4 08	 add	 esp, 8
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?Initialize@CDisableCicero@@QAEXXZ ENDP			; CDisableCicero::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CDisableCicero@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDisableCicero@@QAE@XZ PROC				; CDisableCicero::~CDisableCicero, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 136
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 137
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Uninitialize@CDisableCicero@@QAEXXZ ; CDisableCicero::Uninitialize
; Line 138
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1CDisableCicero@@QAE@XZ ENDP				; CDisableCicero::~CDisableCicero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CDisableCicero@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDisableCicero@@QAE@XZ PROC				; CDisableCicero::CDisableCicero, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 133
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
; Line 134
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0CDisableCicero@@QAE@XZ ENDP				; CDisableCicero::CDisableCicero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0ITfUIElementSink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ITfUIElementSink@@QAE@XZ PROC			; ITfUIElementSink::ITfUIElementSink, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0ITfUIElementSink@@QAE@XZ ENDP			; ITfUIElementSink::ITfUIElementSink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0ITfInputProcessorProfileActivationSink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ITfInputProcessorProfileActivationSink@@QAE@XZ PROC	; ITfInputProcessorProfileActivationSink::ITfInputProcessorProfileActivationSink, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0ITfInputProcessorProfileActivationSink@@QAE@XZ ENDP	; ITfInputProcessorProfileActivationSink::ITfInputProcessorProfileActivationSink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0ITfCompartmentEventSink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ITfCompartmentEventSink@@QAE@XZ PROC			; ITfCompartmentEventSink::ITfCompartmentEventSink, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IUnknown@@QAE@XZ
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0ITfCompartmentEventSink@@QAE@XZ ENDP			; ITfCompartmentEventSink::ITfCompartmentEventSink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetImeCursorChars@@YAKXZ PROC			; ImeUi_GetImeCursorChars
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3249
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 3250
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_IMECursorChars
; Line 3251
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?ImeUi_GetImeCursorChars@@YAKXZ ENDP			; ImeUi_GetImeCursorChars
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetCompStringAttr@@YAPAEXZ PROC			; ImeUi_GetCompStringAttr
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3244
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 3245
  00003	b8 00 00 00 00	 mov	 eax, OFFSET _g_szCompAttrString
; Line 3246
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?ImeUi_GetCompStringAttr@@YAPAEXZ ENDP			; ImeUi_GetCompStringAttr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetCandidateCount@@YAKXZ PROC			; ImeUi_GetCandidateCount
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3234
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 3235
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwCount
; Line 3236
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?ImeUi_GetCandidateCount@@YAKXZ ENDP			; ImeUi_GetCandidateCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetCandidateSelection@@YAKXZ PROC		; ImeUi_GetCandidateSelection
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3229
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 3230
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwSelection
; Line 3231
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?ImeUi_GetCandidateSelection@@YAKXZ ENDP		; ImeUi_GetCandidateSelection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetCompositionString@@YAPA_WXZ PROC		; ImeUi_GetCompositionString
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3239
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 3240
  00003	b8 00 00 00 00	 mov	 eax, OFFSET _g_szCompositionString
; Line 3241
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?ImeUi_GetCompositionString@@YAPA_WXZ ENDP		; ImeUi_GetCompositionString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$ = 8						; size = 4
?ImeUi_GetCandidate@@YAPA_WI@Z PROC			; ImeUi_GetCandidate
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3221
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 3222
  00003	83 7d 08 0a	 cmp	 DWORD PTR _idx$[ebp], 10 ; 0000000aH
  00007	73 0f		 jae	 SHORT $LN2@ImeUi_GetC
; Line 3223
  00009	8b 45 08	 mov	 eax, DWORD PTR _idx$[ebp]
  0000c	c1 e0 09	 shl	 eax, 9
  0000f	05 00 00 00 00	 add	 eax, OFFSET _g_szCandidate
  00014	eb 0f		 jmp	 SHORT $LN3@ImeUi_GetC
; Line 3224
  00016	eb 0d		 jmp	 SHORT $LN3@ImeUi_GetC
$LN2@ImeUi_GetC:
; Line 3225
  00018	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  0001d	6b c0 00	 imul	 eax, eax, 0
  00020	05 00 00 00 00	 add	 eax, OFFSET _g_szCandidate
$LN3@ImeUi_GetC:
; Line 3226
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?ImeUi_GetCandidate@@YAPA_WI@Z ENDP			; ImeUi_GetCandidate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_IsHorizontalReading@@YA_NXZ PROC			; ImeUi_IsHorizontalReading
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3216
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 3217
  00003	a0 00 00 00 00	 mov	 al, BYTE PTR _g_bHorizontalReading
; Line 3218
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?ImeUi_IsHorizontalReading@@YA_NXZ ENDP			; ImeUi_IsHorizontalReading
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_IsVerticalCand@@YA_NXZ PROC			; ImeUi_IsVerticalCand
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3211
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 3212
  00003	a0 00 00 00 00	 mov	 al, BYTE PTR _g_bVerticalCand
; Line 3213
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?ImeUi_IsVerticalCand@@YA_NXZ ENDP			; ImeUi_IsVerticalCand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_IsShowCandListWindow@@YA_NXZ PROC		; ImeUi_IsShowCandListWindow
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3206
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 3207
  00003	a0 00 00 00 00	 mov	 al, BYTE PTR _g_bCandList
; Line 3208
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?ImeUi_IsShowCandListWindow@@YA_NXZ ENDP		; ImeUi_IsShowCandListWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_IsShowReadingWindow@@YA_NXZ PROC			; ImeUi_IsShowReadingWindow
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3201
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 3202
  00003	a0 00 00 00 00	 mov	 al, BYTE PTR _g_bReadingWindow
; Line 3203
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?ImeUi_IsShowReadingWindow@@YA_NXZ ENDP			; ImeUi_IsShowReadingWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetIndicatior@@YAPA_WXZ PROC			; ImeUi_GetIndicatior
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3195
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 3196
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pszIndicatior
; Line 3197
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?ImeUi_GetIndicatior@@YAPA_WXZ ENDP			; ImeUi_GetIndicatior
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetLanguage@@YAGXZ PROC				; ImeUi_GetLanguage
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3190
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 3191
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hklCurrent
  00008	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
; Line 3192
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?ImeUi_GetLanguage@@YAGXZ ENDP				; ImeUi_GetLanguage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uIndex$ = 8						; size = 4
?ImeUi_GetImeId@@YAKI@Z PROC				; ImeUi_GetImeId
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3185
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 3186
  00003	8b 45 08	 mov	 eax, DWORD PTR _uIndex$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  0000c	83 c4 04	 add	 esp, 4
; Line 3187
  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?ImeUi_GetImeId@@YAKI@Z ENDP				; ImeUi_GetImeId
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetPrimaryLanguage@@YAGXZ PROC			; ImeUi_GetPrimaryLanguage
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 3180
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 3181
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hklCurrent
  00008	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0000d	0f b7 c0	 movzx	 eax, ax
  00010	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
; Line 3182
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?ImeUi_GetPrimaryLanguage@@YAGXZ ENDP			; ImeUi_GetPrimaryLanguage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dwFlags$ = 8						; size = 4
_bSet$ = 12						; size = 1
?ImeUi_SetFlags@@YAXK_N@Z PROC				; ImeUi_SetFlags
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2592
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 2593
  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _bSet$[ebp]
  00007	85 c0		 test	 eax, eax
  00009	74 11		 je	 SHORT $LN2@ImeUi_SetF
; Line 2595
  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_dwImeUiFlags
  00011	0b 4d 08	 or	 ecx, DWORD PTR _dwFlags$[ebp]
  00014	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwImeUiFlags, ecx
; Line 2597
  0001a	eb 11		 jmp	 SHORT $LN3@ImeUi_SetF
$LN2@ImeUi_SetF:
; Line 2599
  0001c	8b 55 08	 mov	 edx, DWORD PTR _dwFlags$[ebp]
  0001f	f7 d2		 not	 edx
  00021	23 15 00 00 00
	00		 and	 edx, DWORD PTR _g_dwImeUiFlags
  00027	89 15 00 00 00
	00		 mov	 DWORD PTR _g_dwImeUiFlags, edx
$LN3@ImeUi_SetF:
; Line 2601
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?ImeUi_SetFlags@@YAXK_N@Z ENDP				; ImeUi_SetFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetFlags@@YAKXZ PROC				; ImeUi_GetFlags
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2587
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 2588
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwImeUiFlags
; Line 2589
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?ImeUi_GetFlags@@YAKXZ ENDP				; ImeUi_GetFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetInputCodePage@@YAIXZ PROC			; ImeUi_GetInputCodePage
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2582
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 2583
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_uCodePage
; Line 2584
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?ImeUi_GetInputCodePage@@YAIXZ ENDP			; ImeUi_GetInputCodePage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
?ImeUi_SetWindow@@YAXPAUHWND__@@@Z PROC			; ImeUi_SetWindow
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2576
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 2577
  00003	8b 45 08	 mov	 eax, DWORD PTR _hwnd$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR _g_hwndCurr, eax
; Line 2578
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  0000e	51		 push	 ecx
  0000f	b9 00 00 00 00	 mov	 ecx, OFFSET _g_disableCicero
  00014	e8 00 00 00 00	 call	 ?DisableCiceroOnThisWnd@CDisableCicero@@QAEXPAUHWND__@@@Z ; CDisableCicero::DisableCiceroOnThisWnd
; Line 2579
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?ImeUi_SetWindow@@YAXPAUHWND__@@@Z ENDP			; ImeUi_SetWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_IsSendingKeyMessage@@YA_NXZ PROC			; ImeUi_IsSendingKeyMessage
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2463
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 2464
  00003	a0 00 00 00 00	 mov	 al, BYTE PTR _bIsSendingKeyMessage
; Line 2465
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?ImeUi_IsSendingKeyMessage@@YA_NXZ ENDP			; ImeUi_IsSendingKeyMessage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -64						; size = 4
tv77 = -60						; size = 4
tv184 = -53						; size = 1
tv181 = -52						; size = 4
tv178 = -48						; size = 4
tv66 = -44						; size = 4
_uRc$1 = -40						; size = 4
_dwCur$2 = -32						; size = 4
_plbm$3 = -20						; size = 4
_hr$ = -12						; size = 4
_hwndImeDef$ = -8					; size = 4
_bCheck$ = -1						; size = 1
_bRestore$ = 8						; size = 4
?ImeUi_ToggleLanguageBar@@YAXH@Z PROC			; ImeUi_ToggleLanguageBar
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2405
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0000b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
; Line 2407
  00017	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?prevRestore@?1??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA, 1
  0001e	74 0f		 je	 SHORT $LN15@ImeUi_Togg
  00020	83 7d 08 01	 cmp	 DWORD PTR _bRestore$[ebp], 1
  00024	74 09		 je	 SHORT $LN15@ImeUi_Togg
  00026	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
  0002d	eb 07		 jmp	 SHORT $LN16@ImeUi_Togg
$LN15@ImeUi_Togg:
  0002f	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
$LN16@ImeUi_Togg:
  00036	8a 45 d4	 mov	 al, BYTE PTR tv66[ebp]
  00039	88 45 ff	 mov	 BYTE PTR _bCheck$[ebp], al
; Line 2408
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _bRestore$[ebp]
  0003f	89 0d 00 00 00
	00		 mov	 DWORD PTR ?prevRestore@?1??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA, ecx
; Line 2409
  00045	0f b6 55 ff	 movzx	 edx, BYTE PTR _bCheck$[ebp]
  00049	85 d2		 test	 edx, edx
  0004b	75 05		 jne	 SHORT $LN12@ImeUi_Togg
; Line 2410
  0004d	e9 0f 02 00 00	 jmp	 $LN13@ImeUi_Togg
$LN12@ImeUi_Togg:
; Line 2413
  00052	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?iShowStatusWindow@?3??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA, -1
  00059	75 6a		 jne	 SHORT $LN11@ImeUi_Togg
; Line 2416
  0005b	83 3d 10 00 00
	00 02		 cmp	 DWORD PTR _g_osi+16, 2
  00062	75 51		 jne	 SHORT $LN18@ImeUi_Togg
  00064	83 3d 04 00 00
	00 05		 cmp	 DWORD PTR _g_osi+4, 5
  0006b	72 48		 jb	 SHORT $LN18@ImeUi_Togg
  0006d	83 3d 08 00 00
	00 01		 cmp	 DWORD PTR _g_osi+8, 1
  00074	77 36		 ja	 SHORT $LN19@ImeUi_Togg
  00076	83 3d 08 00 00
	00 01		 cmp	 DWORD PTR _g_osi+8, 1
  0007d	75 36		 jne	 SHORT $LN18@ImeUi_Togg
  0007f	c7 45 d0 14 00
	00 00		 mov	 DWORD PTR tv178[ebp], OFFSET _g_osi+20
  00086	8b 45 d0	 mov	 eax, DWORD PTR tv178[ebp]
  00089	83 c0 01	 add	 eax, 1
  0008c	89 45 cc	 mov	 DWORD PTR tv181[ebp], eax
$LL21@ImeUi_Togg:
  0008f	8b 4d d0	 mov	 ecx, DWORD PTR tv178[ebp]
  00092	8a 11		 mov	 dl, BYTE PTR [ecx]
  00094	88 55 cb	 mov	 BYTE PTR tv184[ebp], dl
  00097	83 45 d0 01	 add	 DWORD PTR tv178[ebp], 1
  0009b	80 7d cb 00	 cmp	 BYTE PTR tv184[ebp], 0
  0009f	75 ee		 jne	 SHORT $LL21@ImeUi_Togg
  000a1	8b 45 d0	 mov	 eax, DWORD PTR tv178[ebp]
  000a4	2b 45 cc	 sub	 eax, DWORD PTR tv181[ebp]
  000a7	89 45 c4	 mov	 DWORD PTR tv77[ebp], eax
  000aa	74 09		 je	 SHORT $LN18@ImeUi_Togg
$LN19@ImeUi_Togg:
  000ac	c7 45 c0 01 00
	00 00		 mov	 DWORD PTR tv79[ebp], 1
  000b3	eb 07		 jmp	 SHORT $LN20@ImeUi_Togg
$LN18@ImeUi_Togg:
  000b5	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN20@ImeUi_Togg:
  000bc	8b 4d c0	 mov	 ecx, DWORD PTR tv79[ebp]
  000bf	89 0d 00 00 00
	00		 mov	 DWORD PTR ?iShowStatusWindow@?3??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA, ecx
$LN11@ImeUi_Togg:
; Line 2418
  000c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndCurr
  000cb	52		 push	 edx
  000cc	e8 00 00 00 00	 call	 _ImmGetDefaultIMEWnd@4
  000d1	89 45 f8	 mov	 DWORD PTR _hwndImeDef$[ebp], eax
; Line 2419
  000d4	83 7d f8 00	 cmp	 DWORD PTR _hwndImeDef$[ebp], 0
  000d8	74 2b		 je	 SHORT $LN10@ImeUi_Togg
  000da	83 7d 08 00	 cmp	 DWORD PTR _bRestore$[ebp], 0
  000de	74 25		 je	 SHORT $LN10@ImeUi_Togg
  000e0	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?iShowStatusWindow@?3??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA, 0
  000e7	74 1c		 je	 SHORT $LN10@ImeUi_Togg
; Line 2420
  000e9	8b f4		 mov	 esi, esp
  000eb	6a 00		 push	 0
  000ed	6a 22		 push	 34			; 00000022H
  000ef	68 83 02 00 00	 push	 643			; 00000283H
  000f4	8b 45 f8	 mov	 eax, DWORD PTR _hwndImeDef$[ebp]
  000f7	50		 push	 eax
  000f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  000fe	3b f4		 cmp	 esi, esp
  00100	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN10@ImeUi_Togg:
; Line 2422
  00105	8b f4		 mov	 esi, esp
  00107	6a 00		 push	 0
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoInitialize@4
  0010f	3b f4		 cmp	 esi, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
; Line 2423
  00119	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0011d	0f 8c fa 00 00
	00		 jl	 $LN9@ImeUi_Togg
; Line 2425
  00123	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _plbm$3[ebp], 0
; Line 2427
  0012a	8b f4		 mov	 esi, esp
  0012c	8d 4d ec	 lea	 ecx, DWORD PTR _plbm$3[ebp]
  0012f	51		 push	 ecx
  00130	68 00 00 00 00	 push	 OFFSET __GUID_87955690_e627_11d2_8ddb_00105a2799b5
  00135	6a 01		 push	 1
  00137	6a 00		 push	 0
  00139	68 00 00 00 00	 push	 OFFSET _CLSID_TF_LangBarMgr
  0013e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoCreateInstance@20
  00144	3b f4		 cmp	 esi, esp
  00146	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014b	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
; Line 2428
  0014e	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00152	0f 8c b6 00 00
	00		 jl	 $LN8@ImeUi_Togg
  00158	83 7d ec 00	 cmp	 DWORD PTR _plbm$3[ebp], 0
  0015c	0f 84 ac 00 00
	00		 je	 $LN8@ImeUi_Togg
; Line 2432
  00162	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00166	0f 8c 88 00 00
	00		 jl	 $LN7@ImeUi_Togg
; Line 2434
  0016c	83 7d 08 00	 cmp	 DWORD PTR _bRestore$[ebp], 0
  00170	74 2c		 je	 SHORT $LN6@ImeUi_Togg
; Line 2436
  00172	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_dwPrevFloat, 0
  00179	74 21		 je	 SHORT $LN5@ImeUi_Togg
; Line 2437
  0017b	8b f4		 mov	 esi, esp
  0017d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_dwPrevFloat
  00183	52		 push	 edx
  00184	8b 45 ec	 mov	 eax, DWORD PTR _plbm$3[ebp]
  00187	8b 08		 mov	 ecx, DWORD PTR [eax]
  00189	8b 55 ec	 mov	 edx, DWORD PTR _plbm$3[ebp]
  0018c	52		 push	 edx
  0018d	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00190	ff d0		 call	 eax
  00192	3b f4		 cmp	 esi, esp
  00194	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00199	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$LN5@ImeUi_Togg:
; Line 2439
  0019c	eb 56		 jmp	 SHORT $LN7@ImeUi_Togg
$LN6@ImeUi_Togg:
; Line 2441
  0019e	8b f4		 mov	 esi, esp
  001a0	8d 4d e0	 lea	 ecx, DWORD PTR _dwCur$2[ebp]
  001a3	51		 push	 ecx
  001a4	8b 55 ec	 mov	 edx, DWORD PTR _plbm$3[ebp]
  001a7	8b 02		 mov	 eax, DWORD PTR [edx]
  001a9	8b 4d ec	 mov	 ecx, DWORD PTR _plbm$3[ebp]
  001ac	51		 push	 ecx
  001ad	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  001b0	ff d2		 call	 edx
  001b2	3b f4		 cmp	 esi, esp
  001b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b9	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
; Line 2442
  001bc	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001c0	7c 08		 jl	 SHORT $LN3@ImeUi_Togg
; Line 2443
  001c2	8b 45 e0	 mov	 eax, DWORD PTR _dwCur$2[ebp]
  001c5	a3 00 00 00 00	 mov	 DWORD PTR _g_dwPrevFloat, eax
$LN3@ImeUi_Togg:
; Line 2444
  001ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_dwPrevFloat
  001d0	81 e1 00 08 00
	00		 and	 ecx, 2048		; 00000800H
  001d6	75 1c		 jne	 SHORT $LN7@ImeUi_Togg
; Line 2446
  001d8	8b f4		 mov	 esi, esp
  001da	6a 08		 push	 8
  001dc	8b 55 ec	 mov	 edx, DWORD PTR _plbm$3[ebp]
  001df	8b 02		 mov	 eax, DWORD PTR [edx]
  001e1	8b 4d ec	 mov	 ecx, DWORD PTR _plbm$3[ebp]
  001e4	51		 push	 ecx
  001e5	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  001e8	ff d2		 call	 edx
  001ea	3b f4		 cmp	 esi, esp
  001ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f1	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
$LN7@ImeUi_Togg:
; Line 2450
  001f4	8b 45 ec	 mov	 eax, DWORD PTR _plbm$3[ebp]
  001f7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f9	8b f4		 mov	 esi, esp
  001fb	8b 55 ec	 mov	 edx, DWORD PTR _plbm$3[ebp]
  001fe	52		 push	 edx
  001ff	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00202	ff d0		 call	 eax
  00204	3b f4		 cmp	 esi, esp
  00206	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0020b	89 45 d8	 mov	 DWORD PTR _uRc$1[ebp], eax
$LN8@ImeUi_Togg:
; Line 2452
  0020e	8b f4		 mov	 esi, esp
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CoUninitialize@0
  00216	3b f4		 cmp	 esi, esp
  00218	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN9@ImeUi_Togg:
; Line 2454
  0021d	83 7d f8 00	 cmp	 DWORD PTR _hwndImeDef$[ebp], 0
  00221	74 3e		 je	 SHORT $LN13@ImeUi_Togg
  00223	83 7d 08 00	 cmp	 DWORD PTR _bRestore$[ebp], 0
  00227	75 38		 jne	 SHORT $LN13@ImeUi_Togg
; Line 2457
  00229	8b f4		 mov	 esi, esp
  0022b	6a 00		 push	 0
  0022d	6a 22		 push	 34			; 00000022H
  0022f	68 83 02 00 00	 push	 643			; 00000283H
  00234	8b 4d f8	 mov	 ecx, DWORD PTR _hwndImeDef$[ebp]
  00237	51		 push	 ecx
  00238	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0023e	3b f4		 cmp	 esi, esp
  00240	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 2458
  00245	8b f4		 mov	 esi, esp
  00247	6a 00		 push	 0
  00249	6a 21		 push	 33			; 00000021H
  0024b	68 83 02 00 00	 push	 643			; 00000283H
  00250	8b 55 f8	 mov	 edx, DWORD PTR _hwndImeDef$[ebp]
  00253	52		 push	 edx
  00254	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SendMessageA@16
  0025a	3b f4		 cmp	 esi, esp
  0025c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@ImeUi_Togg:
; Line 2460
  00261	52		 push	 edx
  00262	8b cd		 mov	 ecx, ebp
  00264	50		 push	 eax
  00265	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN25@ImeUi_Togg
  0026b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00270	58		 pop	 eax
  00271	5a		 pop	 edx
  00272	5f		 pop	 edi
  00273	5e		 pop	 esi
  00274	83 c4 40	 add	 esp, 64			; 00000040H
  00277	3b ec		 cmp	 ebp, esp
  00279	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0027e	8b e5		 mov	 esp, ebp
  00280	5d		 pop	 ebp
  00281	c3		 ret	 0
  00282	8b ff		 npad	 2
$LN25@ImeUi_Togg:
  00284	02 00 00 00	 DD	 2
  00288	00 00 00 00	 DD	 $LN24@ImeUi_Togg
$LN24@ImeUi_Togg:
  0028c	ec ff ff ff	 DD	 -20			; ffffffecH
  00290	04 00 00 00	 DD	 4
  00294	00 00 00 00	 DD	 $LN22@ImeUi_Togg
  00298	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0029c	04 00 00 00	 DD	 4
  002a0	00 00 00 00	 DD	 $LN23@ImeUi_Togg
$LN23@ImeUi_Togg:
  002a4	64		 DB	 100			; 00000064H
  002a5	77		 DB	 119			; 00000077H
  002a6	43		 DB	 67			; 00000043H
  002a7	75		 DB	 117			; 00000075H
  002a8	72		 DB	 114			; 00000072H
  002a9	00		 DB	 0
$LN22@ImeUi_Togg:
  002aa	70		 DB	 112			; 00000070H
  002ab	6c		 DB	 108			; 0000006cH
  002ac	62		 DB	 98			; 00000062H
  002ad	6d		 DB	 109			; 0000006dH
  002ae	00		 DB	 0
?ImeUi_ToggleLanguageBar@@YAXH@Z ENDP			; ImeUi_ToggleLanguageBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -24						; size = 4
tv152 = -18						; size = 2
tv149 = -16						; size = 4
tv146 = -12						; size = 4
_lRet$1 = -8						; size = 4
_himc$ = -4						; size = 4
_bSend$ = 8						; size = 1
?ImeUi_FinalizeString@@YAX_N@Z PROC			; ImeUi_FinalizeString
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2190
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 2193
  0001e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  00025	85 c0		 test	 eax, eax
  00027	74 0b		 je	 SHORT $LN5@ImeUi_Fina
  00029	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?bProcessing@?1??ImeUi_FinalizeString@@YAX_N@Z@4_NA
  00030	85 c9		 test	 ecx, ecx
  00032	74 05		 je	 SHORT $LN6@ImeUi_Fina
$LN5@ImeUi_Fina:
; Line 2194
  00034	e9 42 01 00 00	 jmp	 $LN7@ImeUi_Fina
$LN6@ImeUi_Fina:
; Line 2196
  00039	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndCurr
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 _ImmGetContext@4
  00045	89 45 fc	 mov	 DWORD PTR _himc$[ebp], eax
; Line 2197
  00048	83 7d fc 00	 cmp	 DWORD PTR _himc$[ebp], 0
  0004c	75 05		 jne	 SHORT $LN4@ImeUi_Fina
; Line 2198
  0004e	e9 28 01 00 00	 jmp	 $LN7@ImeUi_Fina
$LN4@ImeUi_Fina:
; Line 2199
  00053	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?bProcessing@?1??ImeUi_FinalizeString@@YAX_N@Z@4_NA, 1
; Line 2201
  0005a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _g_dwIMELevel, 2
  00061	0f 85 b1 00 00
	00		 jne	 $LN3@ImeUi_Fina
  00067	0f b6 45 08	 movzx	 eax, BYTE PTR _bSend$[ebp]
  0006b	85 c0		 test	 eax, eax
  0006d	0f 84 a5 00 00
	00		 je	 $LN3@ImeUi_Fina
; Line 2204
  00073	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv146[ebp], OFFSET _g_szCompositionString
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR tv146[ebp]
  0007d	83 c1 02	 add	 ecx, 2
  00080	89 4d f0	 mov	 DWORD PTR tv149[ebp], ecx
$LL10@ImeUi_Fina:
  00083	8b 55 f4	 mov	 edx, DWORD PTR tv146[ebp]
  00086	66 8b 02	 mov	 ax, WORD PTR [edx]
  00089	66 89 45 ee	 mov	 WORD PTR tv152[ebp], ax
  0008d	83 45 f4 02	 add	 DWORD PTR tv146[ebp], 2
  00091	66 83 7d ee 00	 cmp	 WORD PTR tv152[ebp], 0
  00096	75 eb		 jne	 SHORT $LL10@ImeUi_Fina
  00098	8b 4d f4	 mov	 ecx, DWORD PTR tv146[ebp]
  0009b	2b 4d f0	 sub	 ecx, DWORD PTR tv149[ebp]
  0009e	d1 f9		 sar	 ecx, 1
  000a0	89 4d e8	 mov	 DWORD PTR tv76[ebp], ecx
  000a3	8b 55 e8	 mov	 edx, DWORD PTR tv76[ebp]
  000a6	89 55 f8	 mov	 DWORD PTR _lRet$1[ebp], edx
; Line 2205
  000a9	83 7d f8 02	 cmp	 DWORD PTR _lRet$1[ebp], 2
  000ad	7d 21		 jge	 SHORT $LN9@ImeUi_Fina
  000af	8b f4		 mov	 esi, esp
  000b1	68 9d 08 00 00	 push	 2205			; 0000089dH
  000b6	68 00 00 00 00	 push	 OFFSET $SG154017
  000bb	68 00 00 00 00	 push	 OFFSET $SG154018
  000c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  000c6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN9@ImeUi_Fina:
; Line 2208
  000d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hklCurrent
  000d6	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  000dc	0f b7 d1	 movzx	 edx, cx
  000df	81 fa 04 04 00
	00		 cmp	 edx, 1028		; 00000404H
  000e5	75 22		 jne	 SHORT $LN2@ImeUi_Fina
  000e7	83 7d f8 01	 cmp	 DWORD PTR _lRet$1[ebp], 1
  000eb	7c 1c		 jl	 SHORT $LN2@ImeUi_Fina
  000ed	8b 45 f8	 mov	 eax, DWORD PTR _lRet$1[ebp]
  000f0	0f b7 0c 45 fe
	ff ff ff	 movzx	 ecx, WORD PTR _g_szCompositionString[eax*2-2]
  000f8	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  000fe	75 09		 jne	 SHORT $LN2@ImeUi_Fina
; Line 2210
  00100	8b 55 f8	 mov	 edx, DWORD PTR _lRet$1[ebp]
  00103	83 ea 01	 sub	 edx, 1
  00106	89 55 f8	 mov	 DWORD PTR _lRet$1[ebp], edx
$LN2@ImeUi_Fina:
; Line 2212
  00109	8b f4		 mov	 esi, esp
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __SendCompString
  00111	3b f4		 cmp	 esi, esp
  00113	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@ImeUi_Fina:
; Line 2215
  00118	e8 00 00 00 00	 call	 ?InitCompStringData@@YAXXZ ; InitCompStringData
; Line 2217
  0011d	6a 00		 push	 0
  0011f	6a 04		 push	 4
  00121	6a 15		 push	 21			; 00000015H
  00123	8b 45 fc	 mov	 eax, DWORD PTR _himc$[ebp]
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 _ImmNotifyIME@16
; Line 2218
  0012c	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bUILessMode
  00133	85 c9		 test	 ecx, ecx
  00135	74 19		 je	 SHORT $LN1@ImeUi_Fina
; Line 2221
  00137	6a 02		 push	 2
  00139	68 00 00 00 00	 push	 OFFSET $SG154027
  0013e	6a 02		 push	 2
  00140	68 00 00 00 00	 push	 OFFSET $SG154028
  00145	6a 09		 push	 9
  00147	8b 55 fc	 mov	 edx, DWORD PTR _himc$[ebp]
  0014a	52		 push	 edx
  0014b	e8 00 00 00 00	 call	 _ImmSetCompositionStringW@24
$LN1@ImeUi_Fina:
; Line 2224
  00150	6a 00		 push	 0
  00152	6a 00		 push	 0
  00154	6a 11		 push	 17			; 00000011H
  00156	8b 45 fc	 mov	 eax, DWORD PTR _himc$[ebp]
  00159	50		 push	 eax
  0015a	e8 00 00 00 00	 call	 _ImmNotifyIME@16
; Line 2225
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _himc$[ebp]
  00162	51		 push	 ecx
  00163	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndCurr
  00169	52		 push	 edx
  0016a	e8 00 00 00 00	 call	 _ImmReleaseContext@8
; Line 2228
  0016f	e8 00 00 00 00	 call	 ?CloseCandidateList@@YAXXZ ; CloseCandidateList
; Line 2229
  00174	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?bProcessing@?1??ImeUi_FinalizeString@@YAX_N@Z@4_NA, 0
$LN7@ImeUi_Fina:
; Line 2231
  0017b	5e		 pop	 esi
  0017c	83 c4 18	 add	 esp, 24			; 00000018H
  0017f	3b ec		 cmp	 ebp, esp
  00181	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00186	8b e5		 mov	 esp, ebp
  00188	5d		 pop	 ebp
  00189	c3		 ret	 0
?ImeUi_FinalizeString@@YAX_N@Z ENDP			; ImeUi_FinalizeString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_IsEnabled@@YA_NXZ PROC				; ImeUi_IsEnabled
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 1683
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1684
  00003	a0 00 00 00 00	 mov	 al, BYTE PTR _g_bImeEnabled
; Line 1685
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?ImeUi_IsEnabled@@YA_NXZ ENDP				; ImeUi_IsEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -8						; size = 4
_himcDbg$1 = -4						; size = 4
_bEnable$ = 8						; size = 1
?ImeUi_EnableIme@@YAX_N@Z PROC				; ImeUi_EnableIme
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 1663
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 1664
  00014	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  0001b	85 c0		 test	 eax, eax
  0001d	74 09		 je	 SHORT $LN4@ImeUi_Enab
  0001f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_hwndCurr, 0
  00026	75 02		 jne	 SHORT $LN5@ImeUi_Enab
$LN4@ImeUi_Enab:
; Line 1665
  00028	eb 69		 jmp	 SHORT $LN6@ImeUi_Enab
$LN5@ImeUi_Enab:
; Line 1666
  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_bDisableImeCompletely, 0
  00031	74 04		 je	 SHORT $LN3@ImeUi_Enab
; Line 1667
  00033	c6 45 08 00	 mov	 BYTE PTR _bEnable$[ebp], 0
$LN3@ImeUi_Enab:
; Line 1669
  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hwndCurr
  0003d	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _g_hwndMain
  00043	75 2c		 jne	 SHORT $LN2@ImeUi_Enab
; Line 1672
  00045	0f b6 55 08	 movzx	 edx, BYTE PTR _bEnable$[ebp]
  00049	85 d2		 test	 edx, edx
  0004b	74 0a		 je	 SHORT $LN8@ImeUi_Enab
  0004d	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_himcOrg
  00052	89 45 f8	 mov	 DWORD PTR tv72[ebp], eax
  00055	eb 07		 jmp	 SHORT $LN9@ImeUi_Enab
$LN8@ImeUi_Enab:
  00057	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN9@ImeUi_Enab:
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR tv72[ebp]
  00061	51		 push	 ecx
  00062	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndCurr
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 _ImmAssociateContext@8
  0006e	89 45 fc	 mov	 DWORD PTR _himcDbg$1[ebp], eax
$LN2@ImeUi_Enab:
; Line 1674
  00071	8a 45 08	 mov	 al, BYTE PTR _bEnable$[ebp]
  00074	a2 00 00 00 00	 mov	 BYTE PTR _g_bImeEnabled, al
; Line 1675
  00079	0f b6 4d 08	 movzx	 ecx, BYTE PTR _bEnable$[ebp]
  0007d	85 c9		 test	 ecx, ecx
  0007f	74 05		 je	 SHORT $LN1@ImeUi_Enab
; Line 1677
  00081	e8 00 00 00 00	 call	 ?CheckToggleState@@YAXXZ ; CheckToggleState
$LN1@ImeUi_Enab:
; Line 1679
  00086	0f b6 55 08	 movzx	 edx, BYTE PTR _bEnable$[ebp]
  0008a	52		 push	 edx
  0008b	e8 00 00 00 00	 call	 ?EnableUiUpdates@CTsfUiLessMode@@SAX_N@Z ; CTsfUiLessMode::EnableUiUpdates
  00090	83 c4 04	 add	 esp, 4
$LN6@ImeUi_Enab:
; Line 1680
  00093	83 c4 08	 add	 esp, 8
  00096	3b ec		 cmp	 ebp, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
?ImeUi_EnableIme@@YAX_N@Z ENDP				; ImeUi_EnableIme
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetState@@YAKXZ PROC				; ImeUi_GetState
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 1655
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1656
  00003	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  0000a	85 c0		 test	 eax, eax
  0000c	75 04		 jne	 SHORT $LN1@ImeUi_GetS
; Line 1657
  0000e	33 c0		 xor	 eax, eax
  00010	eb 0a		 jmp	 SHORT $LN2@ImeUi_GetS
$LN1@ImeUi_GetS:
; Line 1658
  00012	e8 00 00 00 00	 call	 ?CheckToggleState@@YAXXZ ; CheckToggleState
; Line 1659
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwState
$LN2@ImeUi_GetS:
; Line 1660
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?ImeUi_GetState@@YAKXZ ENDP				; ImeUi_GetState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv132 = -48						; size = 4
tv81 = -44						; size = 4
tv73 = -40						; size = 4
_dwSentMode$1 = -32					; size = 4
_dwConvMode$2 = -20					; size = 4
_dwId$3 = -12						; size = 4
_bOn$4 = -5						; size = 1
_himc$ = -4						; size = 4
_dwState$ = 8						; size = 4
?ImeUi_SetState@@YAXK@Z PROC				; ImeUi_SetState
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 1596
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000a	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
; Line 1597
  00016	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  0001d	85 c0		 test	 eax, eax
  0001f	75 05		 jne	 SHORT $LN17@ImeUi_SetS
; Line 1598
  00021	e9 81 01 00 00	 jmp	 $LN18@ImeUi_SetS
$LN17@ImeUi_SetS:
; Line 1600
  00026	83 7d 08 01	 cmp	 DWORD PTR _dwState$[ebp], 1
  0002a	75 0a		 jne	 SHORT $LN16@ImeUi_SetS
; Line 1602
  0002c	6a 01		 push	 1
  0002e	e8 00 00 00 00	 call	 ?ImeUi_EnableIme@@YAX_N@Z ; ImeUi_EnableIme
  00033	83 c4 04	 add	 esp, 4
$LN16@ImeUi_SetS:
; Line 1604
  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hwndCurr
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 _ImmGetContext@4
  00042	89 45 fc	 mov	 DWORD PTR _himc$[ebp], eax
; Line 1605
  00045	83 7d fc 00	 cmp	 DWORD PTR _himc$[ebp], 0
  00049	0f 84 58 01 00
	00		 je	 $LN18@ImeUi_SetS
; Line 1607
  0004f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_bDisableImeCompletely, 0
  00056	74 07		 je	 SHORT $LN14@ImeUi_SetS
; Line 1608
  00058	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _dwState$[ebp], 0
$LN14@ImeUi_SetS:
; Line 1610
  0005f	83 7d 08 01	 cmp	 DWORD PTR _dwState$[ebp], 1
  00063	75 09		 jne	 SHORT $LN20@ImeUi_SetS
  00065	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  0006c	eb 07		 jmp	 SHORT $LN21@ImeUi_SetS
$LN20@ImeUi_SetS:
  0006e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN21@ImeUi_SetS:
  00075	8a 55 d8	 mov	 dl, BYTE PTR tv73[ebp]
  00078	88 55 fb	 mov	 BYTE PTR _bOn$4[ebp], dl
; Line 1611
  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hklCurrent
  00080	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00085	0f b7 c8	 movzx	 ecx, ax
  00088	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  0008e	0f b7 d1	 movzx	 edx, cx
  00091	89 55 d4	 mov	 DWORD PTR tv81[ebp], edx
  00094	83 7d d4 04	 cmp	 DWORD PTR tv81[ebp], 4
  00098	74 19		 je	 SHORT $LN11@ImeUi_SetS
  0009a	83 7d d4 11	 cmp	 DWORD PTR tv81[ebp], 17	; 00000011H
  0009e	0f 84 e1 00 00
	00		 je	 $LN1@ImeUi_SetS
  000a4	83 7d d4 12	 cmp	 DWORD PTR tv81[ebp], 18	; 00000012H
  000a8	0f 84 a5 00 00
	00		 je	 $LN5@ImeUi_SetS
  000ae	e9 e0 00 00 00	 jmp	 $LN12@ImeUi_SetS
$LN11@ImeUi_SetS:
; Line 1617
  000b3	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwConvMode$2[ebp], 0
  000ba	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _dwSentMode$1[ebp], 0
; Line 1619
  000c1	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bChineseIME
  000c8	85 c0		 test	 eax, eax
  000ca	74 06		 je	 SHORT $LN8@ImeUi_SetS
  000cc	83 7d 08 00	 cmp	 DWORD PTR _dwState$[ebp], 0
  000d0	74 11		 je	 SHORT $LN9@ImeUi_SetS
$LN8@ImeUi_SetS:
  000d2	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bChineseIME
  000d9	85 c9		 test	 ecx, ecx
  000db	75 19		 jne	 SHORT $LN10@ImeUi_SetS
  000dd	83 7d 08 00	 cmp	 DWORD PTR _dwState$[ebp], 0
  000e1	74 13		 je	 SHORT $LN10@ImeUi_SetS
$LN9@ImeUi_SetS:
; Line 1621
  000e3	6a 70		 push	 112			; 00000070H
  000e5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndCurr
  000eb	52		 push	 edx
  000ec	e8 00 00 00 00	 call	 _ImmSimulateHotKey@8
; Line 1622
  000f1	e8 00 00 00 00	 call	 ?_PumpMessage@@YAXXZ	; _PumpMessage
$LN10@ImeUi_SetS:
; Line 1624
  000f6	83 7d 08 00	 cmp	 DWORD PTR _dwState$[ebp], 0
  000fa	74 55		 je	 SHORT $LN7@ImeUi_SetS
; Line 1626
  000fc	6a 00		 push	 0
  000fe	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  00103	83 c4 04	 add	 esp, 4
  00106	89 45 f4	 mov	 DWORD PTR _dwId$3[ebp], eax
; Line 1627
  00109	83 7d f4 00	 cmp	 DWORD PTR _dwId$3[ebp], 0
  0010d	74 42		 je	 SHORT $LN7@ImeUi_SetS
; Line 1629
  0010f	8d 45 e0	 lea	 eax, DWORD PTR _dwSentMode$1[ebp]
  00112	50		 push	 eax
  00113	8d 4d ec	 lea	 ecx, DWORD PTR _dwConvMode$2[ebp]
  00116	51		 push	 ecx
  00117	8b 55 fc	 mov	 edx, DWORD PTR _himc$[ebp]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 _ImmGetConversionStatus@12
; Line 1632
  00120	83 7d 08 01	 cmp	 DWORD PTR _dwState$[ebp], 1
  00124	75 0b		 jne	 SHORT $LN22@ImeUi_SetS
  00126	8b 45 ec	 mov	 eax, DWORD PTR _dwConvMode$2[ebp]
  00129	83 c8 01	 or	 eax, 1
  0012c	89 45 d0	 mov	 DWORD PTR tv132[ebp], eax
  0012f	eb 09		 jmp	 SHORT $LN23@ImeUi_SetS
$LN22@ImeUi_SetS:
  00131	8b 4d ec	 mov	 ecx, DWORD PTR _dwConvMode$2[ebp]
  00134	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00137	89 4d d0	 mov	 DWORD PTR tv132[ebp], ecx
$LN23@ImeUi_SetS:
  0013a	8b 55 d0	 mov	 edx, DWORD PTR tv132[ebp]
  0013d	89 55 ec	 mov	 DWORD PTR _dwConvMode$2[ebp], edx
; Line 1633
  00140	8b 45 e0	 mov	 eax, DWORD PTR _dwSentMode$1[ebp]
  00143	50		 push	 eax
  00144	8b 4d ec	 mov	 ecx, DWORD PTR _dwConvMode$2[ebp]
  00147	51		 push	 ecx
  00148	8b 55 fc	 mov	 edx, DWORD PTR _himc$[ebp]
  0014b	52		 push	 edx
  0014c	e8 00 00 00 00	 call	 _ImmSetConversionStatus@12
$LN7@ImeUi_SetS:
; Line 1636
  00151	eb 40		 jmp	 SHORT $LN12@ImeUi_SetS
$LN5@ImeUi_SetS:
; Line 1640
  00153	0f b6 45 fb	 movzx	 eax, BYTE PTR _bOn$4[ebp]
  00157	85 c0		 test	 eax, eax
  00159	74 09		 je	 SHORT $LN2@ImeUi_SetS
  0015b	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _g_dwState, 1
  00162	75 11		 jne	 SHORT $LN3@ImeUi_SetS
$LN2@ImeUi_SetS:
  00164	0f b6 4d fb	 movzx	 ecx, BYTE PTR _bOn$4[ebp]
  00168	85 c9		 test	 ecx, ecx
  0016a	75 17		 jne	 SHORT $LN4@ImeUi_SetS
  0016c	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR _g_dwState, 1
  00173	75 0e		 jne	 SHORT $LN4@ImeUi_SetS
$LN3@ImeUi_SetS:
; Line 1642
  00175	6a 52		 push	 82			; 00000052H
  00177	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndCurr
  0017d	52		 push	 edx
  0017e	e8 00 00 00 00	 call	 _ImmSimulateHotKey@8
$LN4@ImeUi_SetS:
; Line 1644
  00183	eb 0e		 jmp	 SHORT $LN12@ImeUi_SetS
$LN1@ImeUi_SetS:
; Line 1646
  00185	0f b6 45 fb	 movzx	 eax, BYTE PTR _bOn$4[ebp]
  00189	50		 push	 eax
  0018a	8b 4d fc	 mov	 ecx, DWORD PTR _himc$[ebp]
  0018d	51		 push	 ecx
  0018e	e8 00 00 00 00	 call	 _ImmSetOpenStatus@8
$LN12@ImeUi_SetS:
; Line 1649
  00193	8b 55 fc	 mov	 edx, DWORD PTR _himc$[ebp]
  00196	52		 push	 edx
  00197	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hwndCurr
  0019c	50		 push	 eax
  0019d	e8 00 00 00 00	 call	 _ImmReleaseContext@8
; Line 1650
  001a2	e8 00 00 00 00	 call	 ?CheckToggleState@@YAXXZ ; CheckToggleState
$LN18@ImeUi_SetS:
; Line 1652
  001a7	52		 push	 edx
  001a8	8b cd		 mov	 ecx, ebp
  001aa	50		 push	 eax
  001ab	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN27@ImeUi_SetS
  001b1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001b6	58		 pop	 eax
  001b7	5a		 pop	 edx
  001b8	5f		 pop	 edi
  001b9	83 c4 30	 add	 esp, 48			; 00000030H
  001bc	3b ec		 cmp	 ebp, esp
  001be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c3	8b e5		 mov	 esp, ebp
  001c5	5d		 pop	 ebp
  001c6	c3		 ret	 0
  001c7	90		 npad	 1
$LN27@ImeUi_SetS:
  001c8	02 00 00 00	 DD	 2
  001cc	00 00 00 00	 DD	 $LN26@ImeUi_SetS
$LN26@ImeUi_SetS:
  001d0	ec ff ff ff	 DD	 -20			; ffffffecH
  001d4	04 00 00 00	 DD	 4
  001d8	00 00 00 00	 DD	 $LN24@ImeUi_SetS
  001dc	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001e0	04 00 00 00	 DD	 4
  001e4	00 00 00 00	 DD	 $LN25@ImeUi_SetS
$LN25@ImeUi_SetS:
  001e8	64		 DB	 100			; 00000064H
  001e9	77		 DB	 119			; 00000077H
  001ea	53		 DB	 83			; 00000053H
  001eb	65		 DB	 101			; 00000065H
  001ec	6e		 DB	 110			; 0000006eH
  001ed	74		 DB	 116			; 00000074H
  001ee	4d		 DB	 77			; 0000004dH
  001ef	6f		 DB	 111			; 0000006fH
  001f0	64		 DB	 100			; 00000064H
  001f1	65		 DB	 101			; 00000065H
  001f2	00		 DB	 0
$LN24@ImeUi_SetS:
  001f3	64		 DB	 100			; 00000064H
  001f4	77		 DB	 119			; 00000077H
  001f5	43		 DB	 67			; 00000043H
  001f6	6f		 DB	 111			; 0000006fH
  001f7	6e		 DB	 110			; 0000006eH
  001f8	76		 DB	 118			; 00000076H
  001f9	4d		 DB	 77			; 0000004dH
  001fa	6f		 DB	 111			; 0000006fH
  001fb	64		 DB	 100			; 00000064H
  001fc	65		 DB	 101			; 00000065H
  001fd	00		 DB	 0
?ImeUi_SetState@@YAXK@Z ENDP				; ImeUi_SetState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bInsert$ = 8						; size = 1
?ImeUi_SetInsertMode@@YAX_N@Z PROC			; ImeUi_SetInsertMode
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2333
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 2334
  00003	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  0000a	85 c0		 test	 eax, eax
  0000c	75 02		 jne	 SHORT $LN1@ImeUi_SetI
; Line 2335
  0000e	eb 09		 jmp	 SHORT $LN2@ImeUi_SetI
$LN1@ImeUi_SetI:
; Line 2336
  00010	8a 4d 08	 mov	 cl, BYTE PTR _bInsert$[ebp]
  00013	88 0d 00 00 00
	00		 mov	 BYTE PTR _g_bInsertMode, cl
$LN2@ImeUi_SetI:
; Line 2337
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?ImeUi_SetInsertMode@@YAX_N@Z ENDP			; ImeUi_SetInsertMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv70 = -4						; size = 4
?ImeUi_GetCaretStatus@@YA_NXZ PROC			; ImeUi_GetCaretStatus
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2340
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 2341
  0000b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  00012	85 c0		 test	 eax, eax
  00014	74 1c		 je	 SHORT $LN3@ImeUi_GetC
  00016	b9 02 00 00 00	 mov	 ecx, 2
  0001b	6b d1 00	 imul	 edx, ecx, 0
  0001e	0f b7 82 00 00
	00 00		 movzx	 eax, WORD PTR _g_szCompositionString[edx]
  00025	85 c0		 test	 eax, eax
  00027	74 09		 je	 SHORT $LN3@ImeUi_GetC
  00029	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  00030	eb 07		 jmp	 SHORT $LN4@ImeUi_GetC
$LN3@ImeUi_GetC:
  00032	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
$LN4@ImeUi_GetC:
  00039	8a 45 fc	 mov	 al, BYTE PTR tv70[ebp]
; Line 2342
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
?ImeUi_GetCaretStatus@@YA_NXZ ENDP			; ImeUi_GetCaretStatus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pFont$ = 8						; size = 4
_color$ = 12						; size = 4
_prc$ = 16						; size = 4
?ImeUi_SetCompStringAppearance@@YAXPAVCImeUiFont_Base@@KPBUtagRECT@@@Z PROC ; ImeUi_SetCompStringAppearance
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 1579
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1580
  00003	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  0000a	85 c0		 test	 eax, eax
  0000c	75 02		 jne	 SHORT $LN5@ImeUi_SetC
; Line 1581
  0000e	eb 6b		 jmp	 SHORT $LN6@ImeUi_SetC
$LN5@ImeUi_SetC:
; Line 1582
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _pFont$[ebp]
  00013	89 0d 08 00 00
	00		 mov	 DWORD PTR _g_CaretInfo+8, ecx
; Line 1583
  00019	8b 55 10	 mov	 edx, DWORD PTR _prc$[ebp]
  0001c	8b 02		 mov	 eax, DWORD PTR [edx]
  0001e	a3 14 00 00 00	 mov	 DWORD PTR _g_CaretInfo+20, eax
  00023	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00026	89 0d 18 00 00
	00		 mov	 DWORD PTR _g_CaretInfo+24, ecx
  0002c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002f	a3 1c 00 00 00	 mov	 DWORD PTR _g_CaretInfo+28, eax
  00034	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00037	89 0d 20 00 00
	00		 mov	 DWORD PTR _g_CaretInfo+32, ecx
; Line 1585
  0003d	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR _gSkinIME+28, 0
  00044	75 0b		 jne	 SHORT $LN4@ImeUi_SetC
; Line 1586
  00046	8b 55 0c	 mov	 edx, DWORD PTR _color$[ebp]
  00049	89 15 10 00 00
	00		 mov	 DWORD PTR _g_CaretInfo+16, edx
; Line 1587
  0004f	eb 0a		 jmp	 SHORT $LN3@ImeUi_SetC
$LN4@ImeUi_SetC:
; Line 1588
  00051	a1 1c 00 00 00	 mov	 eax, DWORD PTR _gSkinIME+28
  00056	a3 10 00 00 00	 mov	 DWORD PTR _g_CaretInfo+16, eax
$LN3@ImeUi_SetC:
; Line 1589
  0005b	83 3d 38 00 00
	00 00		 cmp	 DWORD PTR _gSkinIME+56, 0
  00062	75 0b		 jne	 SHORT $LN2@ImeUi_SetC
; Line 1590
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _color$[ebp]
  00067	89 0d 0c 00 00
	00		 mov	 DWORD PTR _g_CaretInfo+12, ecx
; Line 1591
  0006d	eb 0c		 jmp	 SHORT $LN6@ImeUi_SetC
$LN2@ImeUi_SetC:
; Line 1592
  0006f	8b 15 38 00 00
	00		 mov	 edx, DWORD PTR _gSkinIME+56
  00075	89 15 0c 00 00
	00		 mov	 DWORD PTR _g_CaretInfo+12, edx
$LN6@ImeUi_SetC:
; Line 1593
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
?ImeUi_SetCompStringAppearance@@YAXPAVCImeUiFont_Base@@KPBUtagRECT@@@Z ENDP ; ImeUi_SetCompStringAppearance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?ImeUi_SetCaretPosition@@YAXII@Z PROC			; ImeUi_SetCaretPosition
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 1570
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1571
  00003	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  0000a	85 c0		 test	 eax, eax
  0000c	75 02		 jne	 SHORT $LN1@ImeUi_SetC
; Line 1572
  0000e	eb 12		 jmp	 SHORT $LN2@ImeUi_SetC
$LN1@ImeUi_SetC:
; Line 1573
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00013	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_CaretInfo, ecx
; Line 1574
  00019	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  0001c	89 15 04 00 00
	00		 mov	 DWORD PTR _g_CaretInfo+4, edx
$LN2@ImeUi_SetC:
; Line 1575
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?ImeUi_SetCaretPosition@@YAXII@Z ENDP			; ImeUi_SetCaretPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bDrawCompAttr$ = 8					; size = 1
_bDrawOtherUi$ = 12					; size = 1
?ImeUi_RenderUI@@YAX_N0@Z PROC				; ImeUi_RenderUI
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 576
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 577
  00003	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  0000a	85 c0		 test	 eax, eax
  0000c	74 14		 je	 SHORT $LN6@ImeUi_Rend
  0000e	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bImeEnabled
  00015	85 c9		 test	 ecx, ecx
  00017	74 09		 je	 SHORT $LN6@ImeUi_Rend
  00019	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR _g_CaretInfo+8, 0
  00020	75 02		 jne	 SHORT $LN7@ImeUi_Rend
$LN6@ImeUi_Rend:
; Line 578
  00022	eb 4c		 jmp	 SHORT $LN8@ImeUi_Rend
$LN7@ImeUi_Rend:
; Line 579
  00024	0f b6 55 08	 movzx	 edx, BYTE PTR _bDrawCompAttr$[ebp]
  00028	85 d2		 test	 edx, edx
  0002a	75 0a		 jne	 SHORT $LN5@ImeUi_Rend
  0002c	0f b6 45 0c	 movzx	 eax, BYTE PTR _bDrawOtherUi$[ebp]
  00030	85 c0		 test	 eax, eax
  00032	75 02		 jne	 SHORT $LN5@ImeUi_Rend
; Line 580
  00034	eb 3a		 jmp	 SHORT $LN8@ImeUi_Rend
$LN5@ImeUi_Rend:
; Line 581
  00036	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR _g_dwIMELevel, 2
  0003d	75 0a		 jne	 SHORT $LN4@ImeUi_Rend
; Line 583
  0003f	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _bDrawOtherUi$[ebp]
  00043	85 c9		 test	 ecx, ecx
  00045	75 02		 jne	 SHORT $LN4@ImeUi_Rend
; Line 584
  00047	eb 27		 jmp	 SHORT $LN8@ImeUi_Rend
$LN4@ImeUi_Rend:
; Line 587
  00049	0f b6 55 0c	 movzx	 edx, BYTE PTR _bDrawOtherUi$[ebp]
  0004d	85 d2		 test	 edx, edx
  0004f	74 05		 je	 SHORT $LN2@ImeUi_Rend
; Line 588
  00051	e8 00 00 00 00	 call	 ?DrawImeIndicator@@YAXXZ ; DrawImeIndicator
$LN2@ImeUi_Rend:
; Line 590
  00056	0f b6 45 08	 movzx	 eax, BYTE PTR _bDrawCompAttr$[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ?DrawCompositionString@@YAX_N@Z ; DrawCompositionString
  00060	83 c4 04	 add	 esp, 4
; Line 592
  00063	0f b6 4d 0c	 movzx	 ecx, BYTE PTR _bDrawOtherUi$[ebp]
  00067	85 c9		 test	 ecx, ecx
  00069	74 05		 je	 SHORT $LN8@ImeUi_Rend
; Line 593
  0006b	e8 00 00 00 00	 call	 ?DrawCandidateList@@YAXXZ ; DrawCandidateList
$LN8@ImeUi_Rend:
; Line 594
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?ImeUi_RenderUI@@YAX_N0@Z ENDP				; ImeUi_RenderUI
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?ImeUi_SetScreenDimension@@YAXII@Z PROC			; ImeUi_SetScreenDimension
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2345
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 2346
  00003	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  0000a	85 c0		 test	 eax, eax
  0000c	75 02		 jne	 SHORT $LN1@ImeUi_SetS
; Line 2347
  0000e	eb 12		 jmp	 SHORT $LN2@ImeUi_SetS
$LN1@ImeUi_SetS:
; Line 2348
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00013	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_screenWidth, ecx
; Line 2349
  00019	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  0001c	89 15 00 00 00
	00		 mov	 DWORD PTR _g_screenHeight, edx
$LN2@ImeUi_SetS:
; Line 2350
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?ImeUi_SetScreenDimension@@YAXII@Z ENDP			; ImeUi_SetScreenDimension
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv419 = -772						; size = 4
tv358 = -768						; size = 4
tv287 = -764						; size = 4
tv278 = -760						; size = 4
tv262 = -756						; size = 4
tv635 = -750						; size = 2
tv632 = -748						; size = 4
tv629 = -744						; size = 4
tv217 = -740						; size = 4
tv209 = -736						; size = 4
tv586 = -730						; size = 2
tv583 = -728						; size = 4
tv580 = -724						; size = 4
tv193 = -720						; size = 4
tv561 = -714						; size = 2
tv558 = -712						; size = 4
tv555 = -708						; size = 4
tv159 = -704						; size = 4
tv525 = -698						; size = 2
tv522 = -696						; size = 4
tv519 = -692						; size = 4
tv136 = -688						; size = 4
tv500 = -682						; size = 2
tv497 = -680						; size = 4
tv494 = -676						; size = 4
tv84 = -672						; size = 4
tv470 = -666						; size = 2
tv467 = -664						; size = 4
tv464 = -660						; size = 4
tv67 = -656						; size = 4
$T1 = -652						; size = 4
$T2 = -648						; size = 4
$T3 = -644						; size = 4
$T4 = -640						; size = 4
$T5 = -636						; size = 4
$T6 = -632						; size = 4
_dwId$7 = -628						; size = 4
_j$8 = -624						; size = 4
_i$9 = -620						; size = 4
_uLen$10 = -616						; size = 4
_i$11 = -612						; size = 4
_cChars$12 = -608					; size = 4
_maxCandChar$13 = -604					; size = 4
_startOfPage$14 = -600					; size = 4
_dwBufLen$15 = -596					; size = 4
_dwIndex$16 = -592					; size = 4
_lpCandList$17 = -584					; size = 4
_dwFlag$18 = -576					; size = 4
_dwSentMode$19 = -568					; size = 4
_dwConvMode$20 = -556					; size = 4
_pszTmp$21 = -548					; size = 4
_chars$22 = -544					; size = 4
_i$23 = -540						; size = 4
_szCompStr$24 = -532					; size = 512
_lRet$25 = -16						; size = 4
_len$ = -12						; size = 4
_himc$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_trapped$ = 24						; size = 4
?ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z PROC	; ImeUi_ProcessMessage
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 1231
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 03 00
	00		 sub	 esp, 772		; 00000304H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd fc fc ff
	ff		 lea	 edi, DWORD PTR [ebp-772]
  00011	b9 c1 00 00 00	 mov	 ecx, 193		; 000000c1H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; Line 1236
  00027	8b 45 18	 mov	 eax, DWORD PTR _trapped$[ebp]
  0002a	c6 00 00	 mov	 BYTE PTR [eax], 0
; Line 1237
  0002d	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bInitialized
  00034	85 c9		 test	 ecx, ecx
  00036	74 09		 je	 SHORT $LN75@ImeUi_Proc
  00038	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_bDisableImeCompletely, 0
  0003f	74 07		 je	 SHORT $LN76@ImeUi_Proc
$LN75@ImeUi_Proc:
; Line 1239
  00041	33 c0		 xor	 eax, eax
  00043	e9 f9 0d 00 00	 jmp	 $LN78@ImeUi_Proc
$LN76@ImeUi_Proc:
; Line 1242
  00048	8b 55 0c	 mov	 edx, DWORD PTR _uMsg$[ebp]
  0004b	89 95 70 fd ff
	ff		 mov	 DWORD PTR tv67[ebp], edx
  00051	81 bd 70 fd ff
	ff 0d 01 00 00	 cmp	 DWORD PTR tv67[ebp], 269 ; 0000010dH
  0005b	77 43		 ja	 SHORT $LN94@ImeUi_Proc
  0005d	81 bd 70 fd ff
	ff 0d 01 00 00	 cmp	 DWORD PTR tv67[ebp], 269 ; 0000010dH
  00067	0f 84 99 00 00
	00		 je	 $LN70@ImeUi_Proc
  0006d	8b 85 70 fd ff
	ff		 mov	 eax, DWORD PTR tv67[ebp]
  00073	83 e8 51	 sub	 eax, 81			; 00000051H
  00076	89 85 70 fd ff
	ff		 mov	 DWORD PTR tv67[ebp], eax
  0007c	81 bd 70 fd ff
	ff b4 00 00 00	 cmp	 DWORD PTR tv67[ebp], 180 ; 000000b4H
  00086	0f 87 b3 0d 00
	00		 ja	 $LN73@ImeUi_Proc
  0008c	8b 8d 70 fd ff
	ff		 mov	 ecx, DWORD PTR tv67[ebp]
  00092	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN96@ImeUi_Proc[ecx]
  00099	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN110@ImeUi_Proc[edx*4]
$LN94@ImeUi_Proc:
  000a0	81 bd 70 fd ff
	ff 81 02 00 00	 cmp	 DWORD PTR tv67[ebp], 641 ; 00000281H
  000aa	77 2d		 ja	 SHORT $LN95@ImeUi_Proc
  000ac	81 bd 70 fd ff
	ff 81 02 00 00	 cmp	 DWORD PTR tv67[ebp], 641 ; 00000281H
  000b6	74 40		 je	 SHORT $LN71@ImeUi_Proc
  000b8	81 bd 70 fd ff
	ff 0e 01 00 00	 cmp	 DWORD PTR tv67[ebp], 270 ; 0000010eH
  000c2	0f 84 f9 05 00
	00		 je	 $LN51@ImeUi_Proc
  000c8	81 bd 70 fd ff
	ff 0f 01 00 00	 cmp	 DWORD PTR tv67[ebp], 271 ; 0000010fH
  000d2	74 42		 je	 SHORT $LN69@ImeUi_Proc
  000d4	e9 66 0d 00 00	 jmp	 $LN73@ImeUi_Proc
$LN95@ImeUi_Proc:
  000d9	81 bd 70 fd ff
	ff 82 02 00 00	 cmp	 DWORD PTR tv67[ebp], 642 ; 00000282H
  000e3	0f 84 f4 05 00
	00		 je	 $LN50@ImeUi_Proc
  000e9	e9 51 0d 00 00	 jmp	 $LN73@ImeUi_Proc
$LN72@ImeUi_Proc:
; Line 1248
  000ee	e8 00 00 00 00	 call	 ?OnInputLangChange@@YAXXZ ; OnInputLangChange
; Line 1249
  000f3	e9 47 0d 00 00	 jmp	 $LN73@ImeUi_Proc
$LN71@ImeUi_Proc:
; Line 1256
  000f8	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  000fb	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; Line 1257
  00101	e9 39 0d 00 00	 jmp	 $LN73@ImeUi_Proc
$LN70@ImeUi_Proc:
; Line 1260
  00106	e8 00 00 00 00	 call	 ?InitCompStringData@@YAXXZ ; InitCompStringData
; Line 1261
  0010b	8b 4d 18	 mov	 ecx, DWORD PTR _trapped$[ebp]
  0010e	c6 01 01	 mov	 BYTE PTR [ecx], 1
; Line 1262
  00111	e9 29 0d 00 00	 jmp	 $LN73@ImeUi_Proc
$LN69@ImeUi_Proc:
; Line 1269
  00116	8b 55 18	 mov	 edx, DWORD PTR _trapped$[ebp]
  00119	c6 02 01	 mov	 BYTE PTR [edx], 1
; Line 1270
  0011c	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 _ImmGetContext@4
  00125	89 45 f8	 mov	 DWORD PTR _himc$[ebp], eax
; Line 1271
  00128	83 7d f8 00	 cmp	 DWORD PTR _himc$[ebp], 0
  0012c	75 05		 jne	 SHORT $LN68@ImeUi_Proc
; Line 1273
  0012e	e9 0c 0d 00 00	 jmp	 $LN73@ImeUi_Proc
$LN68@ImeUi_Proc:
; Line 1277
  00133	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00136	8b 11		 mov	 edx, DWORD PTR [ecx]
  00138	81 e2 00 08 00
	00		 and	 edx, 2048		; 00000800H
  0013e	0f 84 f6 00 00
	00		 je	 $LN67@ImeUi_Proc
; Line 1280
  00144	8b f4		 mov	 esi, esp
  00146	68 00 01 00 00	 push	 256			; 00000100H
  0014b	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _szCompStr$24[ebp]
  00151	50		 push	 eax
  00152	68 00 08 00 00	 push	 2048			; 00000800H
  00157	8b 4d f8	 mov	 ecx, DWORD PTR _himc$[ebp]
  0015a	51		 push	 ecx
  0015b	ff 15 00 00 00
	00		 call	 DWORD PTR __ImmGetCompositionString
  00161	3b f4		 cmp	 esi, esp
  00163	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00168	d1 e8		 shr	 eax, 1
  0016a	89 45 f0	 mov	 DWORD PTR _lRet$25[ebp], eax
; Line 1281
  0016d	8b 55 f0	 mov	 edx, DWORD PTR _lRet$25[ebp]
  00170	d1 e2		 shl	 edx, 1
  00172	89 95 88 fd ff
	ff		 mov	 DWORD PTR $T6[ebp], edx
  00178	81 bd 88 fd ff
	ff 00 02 00 00	 cmp	 DWORD PTR $T6[ebp], 512	; 00000200H
  00182	73 02		 jae	 SHORT $LN79@ImeUi_Proc
  00184	eb 05		 jmp	 SHORT $LN80@ImeUi_Proc
$LN79@ImeUi_Proc:
  00186	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN80@ImeUi_Proc:
  0018b	33 c0		 xor	 eax, eax
  0018d	8b 8d 88 fd ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp]
  00193	66 89 84 0d ec
	fd ff ff	 mov	 WORD PTR _szCompStr$24[ebp+ecx], ax
; Line 1282
  0019b	8d 95 ec fd ff
	ff		 lea	 edx, DWORD PTR _szCompStr$24[ebp]
  001a1	89 95 6c fd ff
	ff		 mov	 DWORD PTR tv464[ebp], edx
  001a7	8b 85 6c fd ff
	ff		 mov	 eax, DWORD PTR tv464[ebp]
  001ad	83 c0 02	 add	 eax, 2
  001b0	89 85 68 fd ff
	ff		 mov	 DWORD PTR tv467[ebp], eax
$LL97@ImeUi_Proc:
  001b6	8b 8d 6c fd ff
	ff		 mov	 ecx, DWORD PTR tv464[ebp]
  001bc	66 8b 11	 mov	 dx, WORD PTR [ecx]
  001bf	66 89 95 66 fd
	ff ff		 mov	 WORD PTR tv470[ebp], dx
  001c6	83 85 6c fd ff
	ff 02		 add	 DWORD PTR tv464[ebp], 2
  001cd	66 83 bd 66 fd
	ff ff 00	 cmp	 WORD PTR tv470[ebp], 0
  001d5	75 df		 jne	 SHORT $LL97@ImeUi_Proc
  001d7	8b 85 6c fd ff
	ff		 mov	 eax, DWORD PTR tv464[ebp]
  001dd	2b 85 68 fd ff
	ff		 sub	 eax, DWORD PTR tv467[ebp]
  001e3	d1 f8		 sar	 eax, 1
  001e5	89 85 60 fd ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
  001eb	8b 8d 60 fd ff
	ff		 mov	 ecx, DWORD PTR tv84[ebp]
  001f1	51		 push	 ecx
  001f2	6a 00		 push	 0
  001f4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndCurr
  001fa	52		 push	 edx
  001fb	e8 00 00 00 00	 call	 ?CancelCompString@@YAXPAUHWND__@@_NH@Z ; CancelCompString
  00200	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1283
  00203	8b f4		 mov	 esi, esp
  00205	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _szCompStr$24[ebp]
  0020b	50		 push	 eax
  0020c	68 00 01 00 00	 push	 256			; 00000100H
  00211	68 00 00 00 00	 push	 OFFSET _g_szCompositionString
  00216	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  0021c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021f	3b f4		 cmp	 esi, esp
  00221	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1284
  00226	8b f4		 mov	 esi, esp
  00228	ff 15 00 00 00
	00		 call	 DWORD PTR __SendCompString
  0022e	3b f4		 cmp	 esi, esp
  00230	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1285
  00235	e8 00 00 00 00	 call	 ?InitCompStringData@@YAXXZ ; InitCompStringData
$LN67@ImeUi_Proc:
; Line 1290
  0023a	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  0023d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0023f	83 e2 08	 and	 edx, 8
  00242	0f 84 67 04 00
	00		 je	 $LN66@ImeUi_Proc
; Line 1295
  00248	8b f4		 mov	 esi, esp
  0024a	68 00 01 00 00	 push	 256			; 00000100H
  0024f	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _szCompStr$24[ebp]
  00255	50		 push	 eax
  00256	6a 08		 push	 8
  00258	8b 4d f8	 mov	 ecx, DWORD PTR _himc$[ebp]
  0025b	51		 push	 ecx
  0025c	ff 15 00 00 00
	00		 call	 DWORD PTR __ImmGetCompositionString
  00262	3b f4		 cmp	 esi, esp
  00264	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00269	d1 e8		 shr	 eax, 1
  0026b	89 45 f0	 mov	 DWORD PTR _lRet$25[ebp], eax
; Line 1296
  0026e	8b 55 f0	 mov	 edx, DWORD PTR _lRet$25[ebp]
  00271	d1 e2		 shl	 edx, 1
  00273	89 95 84 fd ff
	ff		 mov	 DWORD PTR $T5[ebp], edx
  00279	81 bd 84 fd ff
	ff 00 02 00 00	 cmp	 DWORD PTR $T5[ebp], 512	; 00000200H
  00283	73 02		 jae	 SHORT $LN81@ImeUi_Proc
  00285	eb 05		 jmp	 SHORT $LN82@ImeUi_Proc
$LN81@ImeUi_Proc:
  00287	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN82@ImeUi_Proc:
  0028c	33 c0		 xor	 eax, eax
  0028e	8b 8d 84 fd ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp]
  00294	66 89 84 0d ec
	fd ff ff	 mov	 WORD PTR _szCompStr$24[ebp+ecx], ax
; Line 1300
  0029c	8d 95 ec fd ff
	ff		 lea	 edx, DWORD PTR _szCompStr$24[ebp]
  002a2	89 95 5c fd ff
	ff		 mov	 DWORD PTR tv494[ebp], edx
  002a8	8b 85 5c fd ff
	ff		 mov	 eax, DWORD PTR tv494[ebp]
  002ae	83 c0 02	 add	 eax, 2
  002b1	89 85 58 fd ff
	ff		 mov	 DWORD PTR tv497[ebp], eax
$LL98@ImeUi_Proc:
  002b7	8b 8d 5c fd ff
	ff		 mov	 ecx, DWORD PTR tv494[ebp]
  002bd	66 8b 11	 mov	 dx, WORD PTR [ecx]
  002c0	66 89 95 56 fd
	ff ff		 mov	 WORD PTR tv500[ebp], dx
  002c7	83 85 5c fd ff
	ff 02		 add	 DWORD PTR tv494[ebp], 2
  002ce	66 83 bd 56 fd
	ff ff 00	 cmp	 WORD PTR tv500[ebp], 0
  002d6	75 df		 jne	 SHORT $LL98@ImeUi_Proc
  002d8	8b 85 5c fd ff
	ff		 mov	 eax, DWORD PTR tv494[ebp]
  002de	2b 85 58 fd ff
	ff		 sub	 eax, DWORD PTR tv497[ebp]
  002e4	d1 f8		 sar	 eax, 1
  002e6	89 85 50 fd ff
	ff		 mov	 DWORD PTR tv136[ebp], eax
  002ec	8b 8d 50 fd ff
	ff		 mov	 ecx, DWORD PTR tv136[ebp]
  002f2	51		 push	 ecx
  002f3	6a 00		 push	 0
  002f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndCurr
  002fb	52		 push	 edx
  002fc	e8 00 00 00 00	 call	 ?CancelCompString@@YAXPAUHWND__@@_NH@Z ; CancelCompString
  00301	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1302
  00304	8b f4		 mov	 esi, esp
  00306	8d 85 ec fd ff
	ff		 lea	 eax, DWORD PTR _szCompStr$24[ebp]
  0030c	50		 push	 eax
  0030d	68 00 01 00 00	 push	 256			; 00000100H
  00312	68 00 00 00 00	 push	 OFFSET _g_szCompositionString
  00317	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  0031d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00320	3b f4		 cmp	 esi, esp
  00322	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1304
  00327	8b f4		 mov	 esi, esp
  00329	68 00 01 00 00	 push	 256			; 00000100H
  0032e	68 00 00 00 00	 push	 OFFSET _g_szCompAttrString
  00333	6a 10		 push	 16			; 00000010H
  00335	8b 4d f8	 mov	 ecx, DWORD PTR _himc$[ebp]
  00338	51		 push	 ecx
  00339	ff 15 00 00 00
	00		 call	 DWORD PTR __ImmGetCompositionString
  0033f	3b f4		 cmp	 esi, esp
  00341	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00346	89 45 f0	 mov	 DWORD PTR _lRet$25[ebp], eax
; Line 1305
  00349	8b 55 f0	 mov	 edx, DWORD PTR _lRet$25[ebp]
  0034c	89 95 80 fd ff
	ff		 mov	 DWORD PTR $T4[ebp], edx
  00352	81 bd 80 fd ff
	ff 00 01 00 00	 cmp	 DWORD PTR $T4[ebp], 256	; 00000100H
  0035c	73 02		 jae	 SHORT $LN83@ImeUi_Proc
  0035e	eb 05		 jmp	 SHORT $LN84@ImeUi_Proc
$LN83@ImeUi_Proc:
  00360	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN84@ImeUi_Proc:
  00365	8b 85 80 fd ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  0036b	c6 80 00 00 00
	00 00		 mov	 BYTE PTR _g_szCompAttrString[eax], 0
; Line 1307
  00372	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hklCurrent
  00378	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0037e	0f b7 d1	 movzx	 edx, cx
  00381	81 fa 04 04 00
	00		 cmp	 edx, 1028		; 00000404H
  00387	0f 85 6f 02 00
	00		 jne	 $LN65@ImeUi_Proc
  0038d	6a 00		 push	 0
  0038f	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  00394	83 c4 04	 add	 esp, 4
  00397	85 c0		 test	 eax, eax
  00399	0f 85 5d 02 00
	00		 jne	 $LN65@ImeUi_Proc
; Line 1309
  0039f	c7 85 4c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv519[ebp], OFFSET _g_szCompositionString
  003a9	8b 85 4c fd ff
	ff		 mov	 eax, DWORD PTR tv519[ebp]
  003af	83 c0 02	 add	 eax, 2
  003b2	89 85 48 fd ff
	ff		 mov	 DWORD PTR tv522[ebp], eax
$LL99@ImeUi_Proc:
  003b8	8b 8d 4c fd ff
	ff		 mov	 ecx, DWORD PTR tv519[ebp]
  003be	66 8b 11	 mov	 dx, WORD PTR [ecx]
  003c1	66 89 95 46 fd
	ff ff		 mov	 WORD PTR tv525[ebp], dx
  003c8	83 85 4c fd ff
	ff 02		 add	 DWORD PTR tv519[ebp], 2
  003cf	66 83 bd 46 fd
	ff ff 00	 cmp	 WORD PTR tv525[ebp], 0
  003d7	75 df		 jne	 SHORT $LL99@ImeUi_Proc
  003d9	8b 85 4c fd ff
	ff		 mov	 eax, DWORD PTR tv519[ebp]
  003df	2b 85 48 fd ff
	ff		 sub	 eax, DWORD PTR tv522[ebp]
  003e5	d1 f8		 sar	 eax, 1
  003e7	89 85 40 fd ff
	ff		 mov	 DWORD PTR tv159[ebp], eax
  003ed	8b 8d 40 fd ff
	ff		 mov	 ecx, DWORD PTR tv159[ebp]
  003f3	89 8d e0 fd ff
	ff		 mov	 DWORD PTR _chars$22[ebp], ecx
; Line 1310
  003f9	83 bd e0 fd ff
	ff 00		 cmp	 DWORD PTR _chars$22[ebp], 0
  00400	0f 84 ec 01 00
	00		 je	 $LN64@ImeUi_Proc
; Line 1312
  00406	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR _g_dwCount, 4
; Line 1313
  00410	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _g_dwSelection, -1
; Line 1315
  0041a	c7 85 e4 fd ff
	ff 03 00 00 00	 mov	 DWORD PTR _i$23[ebp], 3
  00424	eb 0f		 jmp	 SHORT $LN63@ImeUi_Proc
$LN62@ImeUi_Proc:
  00426	8b 95 e4 fd ff
	ff		 mov	 edx, DWORD PTR _i$23[ebp]
  0042c	83 ea 01	 sub	 edx, 1
  0042f	89 95 e4 fd ff
	ff		 mov	 DWORD PTR _i$23[ebp], edx
$LN63@ImeUi_Proc:
  00435	83 bd e4 fd ff
	ff 00		 cmp	 DWORD PTR _i$23[ebp], 0
  0043c	7c 75		 jl	 SHORT $LN61@ImeUi_Proc
; Line 1317
  0043e	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _chars$22[ebp]
  00444	83 e8 01	 sub	 eax, 1
  00447	39 85 e4 fd ff
	ff		 cmp	 DWORD PTR _i$23[ebp], eax
  0044d	7e 1d		 jle	 SHORT $LN60@ImeUi_Proc
; Line 1318
  0044f	8b 8d e4 fd ff
	ff		 mov	 ecx, DWORD PTR _i$23[ebp]
  00455	c1 e1 09	 shl	 ecx, 9
  00458	ba 02 00 00 00	 mov	 edx, 2
  0045d	6b c2 00	 imul	 eax, edx, 0
  00460	33 d2		 xor	 edx, edx
  00462	66 89 94 01 00
	00 00 00	 mov	 WORD PTR _g_szCandidate[ecx+eax], dx
; Line 1319
  0046a	eb 42		 jmp	 SHORT $LN59@ImeUi_Proc
$LN60@ImeUi_Proc:
; Line 1321
  0046c	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00472	c1 e0 09	 shl	 eax, 9
  00475	b9 02 00 00 00	 mov	 ecx, 2
  0047a	6b d1 00	 imul	 edx, ecx, 0
  0047d	8b 8d e4 fd ff
	ff		 mov	 ecx, DWORD PTR _i$23[ebp]
  00483	66 8b 0c 4d 00
	00 00 00	 mov	 cx, WORD PTR _g_szCompositionString[ecx*2]
  0048b	66 89 8c 10 00
	00 00 00	 mov	 WORD PTR _g_szCandidate[eax+edx], cx
; Line 1322
  00493	8b 95 e4 fd ff
	ff		 mov	 edx, DWORD PTR _i$23[ebp]
  00499	c1 e2 09	 shl	 edx, 9
  0049c	b8 02 00 00 00	 mov	 eax, 2
  004a1	c1 e0 00	 shl	 eax, 0
  004a4	33 c9		 xor	 ecx, ecx
  004a6	66 89 8c 02 00
	00 00 00	 mov	 WORD PTR _g_szCandidate[edx+eax], cx
$LN59@ImeUi_Proc:
; Line 1324
  004ae	e9 73 ff ff ff	 jmp	 $LN62@ImeUi_Proc
$LN61@ImeUi_Proc:
; Line 1325
  004b3	c7 05 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR _g_uCandPageSize, 10 ; 0000000aH
; Line 1326
  004bd	33 d2		 xor	 edx, edx
  004bf	89 15 00 00 00
	00		 mov	 DWORD PTR _g_szCompositionString, edx
  004c5	89 15 04 00 00
	00		 mov	 DWORD PTR _g_szCompositionString+4, edx
; Line 1327
  004cb	c6 05 00 00 00
	00 01		 mov	 BYTE PTR _g_bReadingWindow, 1
; Line 1328
  004d2	6a 00		 push	 0
  004d4	e8 00 00 00 00	 call	 ?GetReadingWindowOrientation@@YAXK@Z ; GetReadingWindowOrientation
  004d9	83 c4 04	 add	 esp, 4
; Line 1329
  004dc	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bHorizontalReading
  004e3	85 c0		 test	 eax, eax
  004e5	0f 84 05 01 00
	00		 je	 $LN58@ImeUi_Proc
; Line 1331
  004eb	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _g_iReadingError, -1
; Line 1332
  004f5	b9 02 00 00 00	 mov	 ecx, 2
  004fa	6b d1 00	 imul	 edx, ecx, 0
  004fd	89 95 7c fd ff
	ff		 mov	 DWORD PTR $T3[ebp], edx
  00503	83 bd 7c fd ff
	ff 40		 cmp	 DWORD PTR $T3[ebp], 64	; 00000040H
  0050a	73 02		 jae	 SHORT $LN85@ImeUi_Proc
  0050c	eb 05		 jmp	 SHORT $LN86@ImeUi_Proc
$LN85@ImeUi_Proc:
  0050e	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN86@ImeUi_Proc:
  00513	33 c0		 xor	 eax, eax
  00515	8b 8d 7c fd ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  0051b	66 89 81 00 00
	00 00		 mov	 WORD PTR _g_szReadingString[ecx], ax
; Line 1333
  00522	c7 85 e4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$23[ebp], 0
  0052c	eb 0f		 jmp	 SHORT $LN57@ImeUi_Proc
$LN56@ImeUi_Proc:
  0052e	8b 95 e4 fd ff
	ff		 mov	 edx, DWORD PTR _i$23[ebp]
  00534	83 c2 01	 add	 edx, 1
  00537	89 95 e4 fd ff
	ff		 mov	 DWORD PTR _i$23[ebp], edx
$LN57@ImeUi_Proc:
  0053d	8b 85 e4 fd ff
	ff		 mov	 eax, DWORD PTR _i$23[ebp]
  00543	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _g_dwCount
  00549	0f 8d a1 00 00
	00		 jge	 $LN58@ImeUi_Proc
; Line 1335
  0054f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_dwSelection
  00555	3b 8d e4 fd ff
	ff		 cmp	 ecx, DWORD PTR _i$23[ebp]
  0055b	75 59		 jne	 SHORT $LN54@ImeUi_Proc
; Line 1336
  0055d	c7 85 3c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv555[ebp], OFFSET _g_szReadingString
  00567	8b 95 3c fd ff
	ff		 mov	 edx, DWORD PTR tv555[ebp]
  0056d	83 c2 02	 add	 edx, 2
  00570	89 95 38 fd ff
	ff		 mov	 DWORD PTR tv558[ebp], edx
$LL100@ImeUi_Proc:
  00576	8b 85 3c fd ff
	ff		 mov	 eax, DWORD PTR tv555[ebp]
  0057c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0057f	66 89 8d 36 fd
	ff ff		 mov	 WORD PTR tv561[ebp], cx
  00586	83 85 3c fd ff
	ff 02		 add	 DWORD PTR tv555[ebp], 2
  0058d	66 83 bd 36 fd
	ff ff 00	 cmp	 WORD PTR tv561[ebp], 0
  00595	75 df		 jne	 SHORT $LL100@ImeUi_Proc
  00597	8b 95 3c fd ff
	ff		 mov	 edx, DWORD PTR tv555[ebp]
  0059d	2b 95 38 fd ff
	ff		 sub	 edx, DWORD PTR tv558[ebp]
  005a3	d1 fa		 sar	 edx, 1
  005a5	89 95 30 fd ff
	ff		 mov	 DWORD PTR tv193[ebp], edx
  005ab	8b 85 30 fd ff
	ff		 mov	 eax, DWORD PTR tv193[ebp]
  005b1	a3 00 00 00 00	 mov	 DWORD PTR _g_iReadingError, eax
$LN54@ImeUi_Proc:
; Line 1337
  005b6	8b 8d e4 fd ff
	ff		 mov	 ecx, DWORD PTR _i$23[ebp]
  005bc	c1 e1 09	 shl	 ecx, 9
  005bf	81 c1 00 00 00
	00		 add	 ecx, OFFSET _g_szCandidate
  005c5	89 8d dc fd ff
	ff		 mov	 DWORD PTR _pszTmp$21[ebp], ecx
; Line 1338
  005cb	8b f4		 mov	 esi, esp
  005cd	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR _pszTmp$21[ebp]
  005d3	52		 push	 edx
  005d4	6a 20		 push	 32			; 00000020H
  005d6	68 00 00 00 00	 push	 OFFSET _g_szReadingString
  005db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscat_s
  005e1	83 c4 0c	 add	 esp, 12			; 0000000cH
  005e4	3b f4		 cmp	 esi, esp
  005e6	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1339
  005eb	e9 3e ff ff ff	 jmp	 $LN56@ImeUi_Proc
$LN58@ImeUi_Proc:
; Line 1342
  005f0	eb 0a		 jmp	 SHORT $LN65@ImeUi_Proc
$LN64@ImeUi_Proc:
; Line 1343
  005f2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_dwCount, 0
$LN65@ImeUi_Proc:
; Line 1347
  005fc	8b f4		 mov	 esi, esp
  005fe	6a 00		 push	 0
  00600	6a 00		 push	 0
  00602	68 80 00 00 00	 push	 128			; 00000080H
  00607	8b 45 f8	 mov	 eax, DWORD PTR _himc$[ebp]
  0060a	50		 push	 eax
  0060b	ff 15 00 00 00
	00		 call	 DWORD PTR __ImmGetCompositionString
  00611	3b f4		 cmp	 esi, esp
  00613	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00618	a3 00 00 00 00	 mov	 DWORD PTR _g_IMECursorBytes, eax
; Line 1348
  0061d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_IMECursorBytes
  00623	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_IMECursorChars, ecx
; Line 1350
  00629	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR _g_dwIMELevel, 3
  00630	75 7d		 jne	 SHORT $LN66@ImeUi_Proc
; Line 1353
  00632	8b f4		 mov	 esi, esp
  00634	ff 15 00 00 00
	00		 call	 DWORD PTR __SendCompString
  0063a	3b f4		 cmp	 esi, esp
  0063c	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1355
  00641	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_IMECursorBytes
  00647	8d 04 55 00 00
	00 00		 lea	 eax, DWORD PTR _g_szCompositionString[edx*2]
  0064e	89 85 2c fd ff
	ff		 mov	 DWORD PTR tv580[ebp], eax
  00654	8b 8d 2c fd ff
	ff		 mov	 ecx, DWORD PTR tv580[ebp]
  0065a	83 c1 02	 add	 ecx, 2
  0065d	89 8d 28 fd ff
	ff		 mov	 DWORD PTR tv583[ebp], ecx
$LL101@ImeUi_Proc:
  00663	8b 95 2c fd ff
	ff		 mov	 edx, DWORD PTR tv580[ebp]
  00669	66 8b 02	 mov	 ax, WORD PTR [edx]
  0066c	66 89 85 26 fd
	ff ff		 mov	 WORD PTR tv586[ebp], ax
  00673	83 85 2c fd ff
	ff 02		 add	 DWORD PTR tv580[ebp], 2
  0067a	66 83 bd 26 fd
	ff ff 00	 cmp	 WORD PTR tv586[ebp], 0
  00682	75 df		 jne	 SHORT $LL101@ImeUi_Proc
  00684	8b 8d 2c fd ff
	ff		 mov	 ecx, DWORD PTR tv580[ebp]
  0068a	2b 8d 28 fd ff
	ff		 sub	 ecx, DWORD PTR tv583[ebp]
  00690	d1 f9		 sar	 ecx, 1
  00692	89 8d 20 fd ff
	ff		 mov	 DWORD PTR tv209[ebp], ecx
  00698	8b 95 20 fd ff
	ff		 mov	 edx, DWORD PTR tv209[ebp]
  0069e	89 55 f4	 mov	 DWORD PTR _len$[ebp], edx
; Line 1356
  006a1	8b 45 f4	 mov	 eax, DWORD PTR _len$[ebp]
  006a4	50		 push	 eax
  006a5	6a 25		 push	 37			; 00000025H
  006a7	e8 00 00 00 00	 call	 ?SendControlKeys@@YAXII@Z ; SendControlKeys
  006ac	83 c4 08	 add	 esp, 8
$LN66@ImeUi_Proc:
; Line 1359
  006af	8b 4d f8	 mov	 ecx, DWORD PTR _himc$[ebp]
  006b2	51		 push	 ecx
  006b3	8b 55 08	 mov	 edx, DWORD PTR _hWnd$[ebp]
  006b6	52		 push	 edx
  006b7	e8 00 00 00 00	 call	 _ImmReleaseContext@8
; Line 1361
  006bc	e9 7e 07 00 00	 jmp	 $LN73@ImeUi_Proc
$LN51@ImeUi_Proc:
; Line 1364
  006c1	6a 00		 push	 0
  006c3	6a 01		 push	 1
  006c5	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hwndCurr
  006ca	50		 push	 eax
  006cb	e8 00 00 00 00	 call	 ?CancelCompString@@YAXPAUHWND__@@_NH@Z ; CancelCompString
  006d0	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1365
  006d3	e8 00 00 00 00	 call	 ?InitCompStringData@@YAXXZ ; InitCompStringData
; Line 1366
  006d8	e9 62 07 00 00	 jmp	 $LN73@ImeUi_Proc
$LN50@ImeUi_Proc:
; Line 1369
  006dd	8b 4d 10	 mov	 ecx, DWORD PTR _wParam$[ebp]
  006e0	89 8d 1c fd ff
	ff		 mov	 DWORD PTR tv217[ebp], ecx
  006e6	8b 95 1c fd ff
	ff		 mov	 edx, DWORD PTR tv217[ebp]
  006ec	83 ea 03	 sub	 edx, 3
  006ef	89 95 1c fd ff
	ff		 mov	 DWORD PTR tv217[ebp], edx
  006f5	83 bd 1c fd ff
	ff 0b		 cmp	 DWORD PTR tv217[ebp], 11 ; 0000000bH
  006fc	0f 87 ac 05 00
	00		 ja	 $LN13@ImeUi_Proc
  00702	8b 85 1c fd ff
	ff		 mov	 eax, DWORD PTR tv217[ebp]
  00708	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN102@ImeUi_Proc[eax]
  0070f	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN111@ImeUi_Proc[ecx*4]
$LN47@ImeUi_Proc:
; Line 1375
  00716	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hklCurrent
  0071c	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00722	0f b7 c2	 movzx	 eax, dx
  00725	3d 04 04 00 00	 cmp	 eax, 1028		; 00000404H
  0072a	75 64		 jne	 SHORT $LN46@ImeUi_Proc
  0072c	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?bNoReentrance@?CL@??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4_NA
  00733	85 c9		 test	 ecx, ecx
  00735	75 59		 jne	 SHORT $LN46@ImeUi_Proc
; Line 1377
  00737	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?bNoReentrance@?CL@??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4_NA, 1
; Line 1379
  0073e	8d 95 c8 fd ff
	ff		 lea	 edx, DWORD PTR _dwSentMode$19[ebp]
  00744	52		 push	 edx
  00745	8d 85 d4 fd ff
	ff		 lea	 eax, DWORD PTR _dwConvMode$20[ebp]
  0074b	50		 push	 eax
  0074c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_himcOrg
  00752	51		 push	 ecx
  00753	e8 00 00 00 00	 call	 _ImmGetConversionStatus@12
; Line 1380
  00758	c7 85 c0 fd ff
	ff 80 04 00 00	 mov	 DWORD PTR _dwFlag$18[ebp], 1152 ; 00000480H
; Line 1381
  00762	8b 95 d4 fd ff
	ff		 mov	 edx, DWORD PTR _dwConvMode$20[ebp]
  00768	81 e2 80 04 00
	00		 and	 edx, 1152		; 00000480H
  0076e	74 20		 je	 SHORT $LN46@ImeUi_Proc
; Line 1382
  00770	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _dwSentMode$19[ebp]
  00776	50		 push	 eax
  00777	8b 8d d4 fd ff
	ff		 mov	 ecx, DWORD PTR _dwConvMode$20[ebp]
  0077d	81 e1 7f fb ff
	ff		 and	 ecx, -1153		; fffffb7fH
  00783	51		 push	 ecx
  00784	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_himcOrg
  0078a	52		 push	 edx
  0078b	e8 00 00 00 00	 call	 _ImmSetConversionStatus@12
$LN46@ImeUi_Proc:
; Line 1384
  00790	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?bNoReentrance@?CL@??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4_NA, 0
$LN44@ImeUi_Proc:
; Line 1388
  00797	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bUILessMode
  0079e	85 c0		 test	 eax, eax
  007a0	74 05		 je	 SHORT $LN43@ImeUi_Proc
; Line 1389
  007a2	e9 0d 05 00 00	 jmp	 $LN48@ImeUi_Proc
$LN43@ImeUi_Proc:
; Line 1390
  007a7	e8 00 00 00 00	 call	 ?CheckToggleState@@YAXXZ ; CheckToggleState
; Line 1391
  007ac	e9 03 05 00 00	 jmp	 $LN48@ImeUi_Proc
$LN42@ImeUi_Proc:
; Line 1395
  007b1	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bUILessMode
  007b8	85 c9		 test	 ecx, ecx
  007ba	74 05		 je	 SHORT $LN41@ImeUi_Proc
; Line 1397
  007bc	e9 f3 04 00 00	 jmp	 $LN48@ImeUi_Proc
$LN41@ImeUi_Proc:
; Line 1400
  007c1	c6 05 00 00 00
	00 01		 mov	 BYTE PTR _g_bCandList, 1
; Line 1401
  007c8	8b 55 18	 mov	 edx, DWORD PTR _trapped$[ebp]
  007cb	c6 02 01	 mov	 BYTE PTR [edx], 1
; Line 1402
  007ce	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  007d1	50		 push	 eax
  007d2	e8 00 00 00 00	 call	 _ImmGetContext@4
  007d7	89 45 f8	 mov	 DWORD PTR _himc$[ebp], eax
; Line 1403
  007da	83 7d f8 00	 cmp	 DWORD PTR _himc$[ebp], 0
  007de	75 05		 jne	 SHORT $LN40@ImeUi_Proc
; Line 1404
  007e0	e9 cf 04 00 00	 jmp	 $LN48@ImeUi_Proc
$LN40@ImeUi_Proc:
; Line 1409
  007e5	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _g_bReadingWindow, 0
; Line 1410
  007ec	c7 85 b0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _dwIndex$16[ebp], 0
; Line 1411
  007f6	8b f4		 mov	 esi, esp
  007f8	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR _lpCandList$17[ebp]
  007fe	51		 push	 ecx
  007ff	8b 95 b0 fd ff
	ff		 mov	 edx, DWORD PTR _dwIndex$16[ebp]
  00805	52		 push	 edx
  00806	8b 45 f8	 mov	 eax, DWORD PTR _himc$[ebp]
  00809	50		 push	 eax
  0080a	ff 15 00 00 00
	00		 call	 DWORD PTR __GetCandidateList
  00810	83 c4 0c	 add	 esp, 12			; 0000000cH
  00813	3b f4		 cmp	 esi, esp
  00815	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0081a	89 85 ac fd ff
	ff		 mov	 DWORD PTR _dwBufLen$15[ebp], eax
; Line 1413
  00820	83 bd ac fd ff
	ff 00		 cmp	 DWORD PTR _dwBufLen$15[ebp], 0
  00827	0f 84 33 03 00
	00		 je	 $LN39@ImeUi_Proc
; Line 1415
  0082d	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _lpCandList$17[ebp]
  00833	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00836	89 15 00 00 00
	00		 mov	 DWORD PTR _g_dwSelection, edx
; Line 1416
  0083c	8b 85 b8 fd ff
	ff		 mov	 eax, DWORD PTR _lpCandList$17[ebp]
  00842	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00845	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwCount, ecx
; Line 1418
  0084b	c7 85 a8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _startOfPage$14[ebp], 0
; Line 1419
  00855	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hklCurrent
  0085b	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00861	0f b7 c2	 movzx	 eax, dx
  00864	3d 04 08 00 00	 cmp	 eax, 2052		; 00000804H
  00869	0f 85 28 01 00
	00		 jne	 $LN38@ImeUi_Proc
  0086f	6a 00		 push	 0
  00871	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  00876	83 c4 04	 add	 esp, 4
  00879	85 c0		 test	 eax, eax
  0087b	0f 84 16 01 00
	00		 je	 $LN38@ImeUi_Proc
; Line 1423
  00881	c7 85 a4 fd ff
	ff 12 00 00 00	 mov	 DWORD PTR _maxCandChar$13[ebp], 18 ; 00000012H
; Line 1424
  0088b	c7 85 a0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _cChars$12[ebp], 0
; Line 1426
  00895	c7 85 9c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$11[ebp], 0
  0089f	eb 0f		 jmp	 SHORT $LN37@ImeUi_Proc
$LN36@ImeUi_Proc:
  008a1	8b 8d 9c fd ff
	ff		 mov	 ecx, DWORD PTR _i$11[ebp]
  008a7	83 c1 01	 add	 ecx, 1
  008aa	89 8d 9c fd ff
	ff		 mov	 DWORD PTR _i$11[ebp], ecx
$LN37@ImeUi_Proc:
  008b0	8b 95 9c fd ff
	ff		 mov	 edx, DWORD PTR _i$11[ebp]
  008b6	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _g_dwCount
  008bc	0f 83 c1 00 00
	00		 jae	 $LN35@ImeUi_Proc
; Line 1430
  008c2	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR _i$11[ebp]
  008c8	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _lpCandList$17[ebp]
  008ce	8b 95 b8 fd ff
	ff		 mov	 edx, DWORD PTR _lpCandList$17[ebp]
  008d4	03 54 81 18	 add	 edx, DWORD PTR [ecx+eax*4+24]
  008d8	89 95 18 fd ff
	ff		 mov	 DWORD PTR tv629[ebp], edx
  008de	8b 85 18 fd ff
	ff		 mov	 eax, DWORD PTR tv629[ebp]
  008e4	83 c0 02	 add	 eax, 2
  008e7	89 85 14 fd ff
	ff		 mov	 DWORD PTR tv632[ebp], eax
$LL103@ImeUi_Proc:
  008ed	8b 8d 18 fd ff
	ff		 mov	 ecx, DWORD PTR tv629[ebp]
  008f3	66 8b 11	 mov	 dx, WORD PTR [ecx]
  008f6	66 89 95 12 fd
	ff ff		 mov	 WORD PTR tv635[ebp], dx
  008fd	83 85 18 fd ff
	ff 02		 add	 DWORD PTR tv629[ebp], 2
  00904	66 83 bd 12 fd
	ff ff 00	 cmp	 WORD PTR tv635[ebp], 0
  0090c	75 df		 jne	 SHORT $LL103@ImeUi_Proc
  0090e	8b 85 18 fd ff
	ff		 mov	 eax, DWORD PTR tv629[ebp]
  00914	2b 85 14 fd ff
	ff		 sub	 eax, DWORD PTR tv632[ebp]
  0091a	d1 f8		 sar	 eax, 1
  0091c	89 85 0c fd ff
	ff		 mov	 DWORD PTR tv262[ebp], eax
  00922	8b 8d 0c fd ff
	ff		 mov	 ecx, DWORD PTR tv262[ebp]
  00928	83 c1 01	 add	 ecx, 1
  0092b	89 8d 98 fd ff
	ff		 mov	 DWORD PTR _uLen$10[ebp], ecx
; Line 1431
  00931	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _uLen$10[ebp]
  00937	03 95 a0 fd ff
	ff		 add	 edx, DWORD PTR _cChars$12[ebp]
  0093d	83 fa 12	 cmp	 edx, 18			; 00000012H
  00940	76 2a		 jbe	 SHORT $LN34@ImeUi_Proc
; Line 1433
  00942	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR _i$11[ebp]
  00948	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _g_dwSelection
  0094e	76 02		 jbe	 SHORT $LN33@ImeUi_Proc
; Line 1435
  00950	eb 31		 jmp	 SHORT $LN35@ImeUi_Proc
$LN33@ImeUi_Proc:
; Line 1437
  00952	8b 8d 9c fd ff
	ff		 mov	 ecx, DWORD PTR _i$11[ebp]
  00958	89 8d a8 fd ff
	ff		 mov	 DWORD PTR _startOfPage$14[ebp], ecx
; Line 1438
  0095e	8b 95 98 fd ff
	ff		 mov	 edx, DWORD PTR _uLen$10[ebp]
  00964	89 95 a0 fd ff
	ff		 mov	 DWORD PTR _cChars$12[ebp], edx
; Line 1440
  0096a	eb 12		 jmp	 SHORT $LN32@ImeUi_Proc
$LN34@ImeUi_Proc:
; Line 1442
  0096c	8b 85 a0 fd ff
	ff		 mov	 eax, DWORD PTR _cChars$12[ebp]
  00972	03 85 98 fd ff
	ff		 add	 eax, DWORD PTR _uLen$10[ebp]
  00978	89 85 a0 fd ff
	ff		 mov	 DWORD PTR _cChars$12[ebp], eax
$LN32@ImeUi_Proc:
; Line 1444
  0097e	e9 1e ff ff ff	 jmp	 $LN36@ImeUi_Proc
$LN35@ImeUi_Proc:
; Line 1445
  00983	8b 8d 9c fd ff
	ff		 mov	 ecx, DWORD PTR _i$11[ebp]
  00989	2b 8d a8 fd ff
	ff		 sub	 ecx, DWORD PTR _startOfPage$14[ebp]
  0098f	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_uCandPageSize, ecx
; Line 1447
  00995	eb 78		 jmp	 SHORT $LN31@ImeUi_Proc
$LN38@ImeUi_Proc:
; Line 1449
  00997	c7 85 78 fd ff
	ff 0a 00 00 00	 mov	 DWORD PTR $T2[ebp], 10	; 0000000aH
  009a1	8b 95 b8 fd ff
	ff		 mov	 edx, DWORD PTR _lpCandList$17[ebp]
  009a7	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  009aa	89 85 74 fd ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  009b0	8d 8d 78 fd ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  009b6	51		 push	 ecx
  009b7	8d 95 74 fd ff
	ff		 lea	 edx, DWORD PTR $T1[ebp]
  009bd	52		 push	 edx
  009be	e8 00 00 00 00	 call	 ??$min@I@std@@YAABIABI0@Z ; std::min<unsigned int>
  009c3	83 c4 08	 add	 esp, 8
  009c6	8b 00		 mov	 eax, DWORD PTR [eax]
  009c8	a3 00 00 00 00	 mov	 DWORD PTR _g_uCandPageSize, eax
; Line 1451
  009cd	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR _g_bUILessMode
  009d4	85 c9		 test	 ecx, ecx
  009d6	74 11		 je	 SHORT $LN87@ImeUi_Proc
  009d8	8b 95 b8 fd ff
	ff		 mov	 edx, DWORD PTR _lpCandList$17[ebp]
  009de	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  009e1	89 85 08 fd ff
	ff		 mov	 DWORD PTR tv278[ebp], eax
  009e7	eb 1a		 jmp	 SHORT $LN88@ImeUi_Proc
$LN87@ImeUi_Proc:
  009e9	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwSelection
  009ee	33 d2		 xor	 edx, edx
  009f0	f7 35 00 00 00
	00		 div	 DWORD PTR _g_uCandPageSize
  009f6	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR _g_uCandPageSize
  009fd	89 85 08 fd ff
	ff		 mov	 DWORD PTR tv278[ebp], eax
$LN88@ImeUi_Proc:
  00a03	8b 8d 08 fd ff
	ff		 mov	 ecx, DWORD PTR tv278[ebp]
  00a09	89 8d a8 fd ff
	ff		 mov	 DWORD PTR _startOfPage$14[ebp], ecx
$LN31@ImeUi_Proc:
; Line 1455
  00a0f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hklCurrent
  00a15	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00a1b	0f b7 c2	 movzx	 eax, dx
  00a1e	3d 04 08 00 00	 cmp	 eax, 2052		; 00000804H
  00a23	75 1a		 jne	 SHORT $LN89@ImeUi_Proc
  00a25	6a 00		 push	 0
  00a27	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  00a2c	83 c4 04	 add	 esp, 4
  00a2f	85 c0		 test	 eax, eax
  00a31	75 0c		 jne	 SHORT $LN89@ImeUi_Proc
  00a33	c7 85 04 fd ff
	ff ff ff ff ff	 mov	 DWORD PTR tv287[ebp], -1
  00a3d	eb 12		 jmp	 SHORT $LN90@ImeUi_Proc
$LN89@ImeUi_Proc:
  00a3f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_dwSelection
  00a45	2b 8d a8 fd ff
	ff		 sub	 ecx, DWORD PTR _startOfPage$14[ebp]
  00a4b	89 8d 04 fd ff
	ff		 mov	 DWORD PTR tv287[ebp], ecx
$LN90@ImeUi_Proc:
  00a51	8b 95 04 fd ff
	ff		 mov	 edx, DWORD PTR tv287[ebp]
  00a57	89 15 00 00 00
	00		 mov	 DWORD PTR _g_dwSelection, edx
; Line 1457
  00a5d	68 00 14 00 00	 push	 5120			; 00001400H
  00a62	6a 00		 push	 0
  00a64	68 00 00 00 00	 push	 OFFSET _g_szCandidate
  00a69	e8 00 00 00 00	 call	 _memset
  00a6e	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1458
  00a71	8b 85 a8 fd ff
	ff		 mov	 eax, DWORD PTR _startOfPage$14[ebp]
  00a77	89 85 94 fd ff
	ff		 mov	 DWORD PTR _i$9[ebp], eax
  00a7d	c7 85 90 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$8[ebp], 0
; Line 1459
  00a87	eb 1e		 jmp	 SHORT $LN30@ImeUi_Proc
$LN29@ImeUi_Proc:
; Line 1460
  00a89	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _i$9[ebp]
  00a8f	83 c1 01	 add	 ecx, 1
  00a92	89 8d 94 fd ff
	ff		 mov	 DWORD PTR _i$9[ebp], ecx
  00a98	8b 95 90 fd ff
	ff		 mov	 edx, DWORD PTR _j$8[ebp]
  00a9e	83 c2 01	 add	 edx, 1
  00aa1	89 95 90 fd ff
	ff		 mov	 DWORD PTR _j$8[ebp], edx
$LN30@ImeUi_Proc:
  00aa7	8b 85 b8 fd ff
	ff		 mov	 eax, DWORD PTR _lpCandList$17[ebp]
  00aad	8b 8d 94 fd ff
	ff		 mov	 ecx, DWORD PTR _i$9[ebp]
  00ab3	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00ab6	73 36		 jae	 SHORT $LN28@ImeUi_Proc
  00ab8	8b 95 90 fd ff
	ff		 mov	 edx, DWORD PTR _j$8[ebp]
  00abe	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _g_uCandPageSize
  00ac4	73 28		 jae	 SHORT $LN28@ImeUi_Proc
; Line 1463
  00ac6	8b 85 94 fd ff
	ff		 mov	 eax, DWORD PTR _i$9[ebp]
  00acc	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _lpCandList$17[ebp]
  00ad2	8b 95 b8 fd ff
	ff		 mov	 edx, DWORD PTR _lpCandList$17[ebp]
  00ad8	03 54 81 18	 add	 edx, DWORD PTR [ecx+eax*4+24]
  00adc	52		 push	 edx
  00add	8b 85 90 fd ff
	ff		 mov	 eax, DWORD PTR _j$8[ebp]
  00ae3	50		 push	 eax
  00ae4	e8 00 00 00 00	 call	 ?ComposeCandidateLine@@YAXHPB_W@Z ; ComposeCandidateLine
  00ae9	83 c4 08	 add	 esp, 8
; Line 1464
  00aec	eb 9b		 jmp	 SHORT $LN29@ImeUi_Proc
$LN28@ImeUi_Proc:
; Line 1465
  00aee	8b f4		 mov	 esi, esp
  00af0	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR _lpCandList$17[ebp]
  00af6	51		 push	 ecx
  00af7	ff 15 00 00 00
	00		 call	 DWORD PTR ?ImeUiCallback_Free@@3P6AXPAX@ZA ; ImeUiCallback_Free
  00afd	83 c4 04	 add	 esp, 4
  00b00	3b f4		 cmp	 esi, esp
  00b02	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1466
  00b07	8b 55 f8	 mov	 edx, DWORD PTR _himc$[ebp]
  00b0a	52		 push	 edx
  00b0b	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  00b0e	50		 push	 eax
  00b0f	e8 00 00 00 00	 call	 _ImmReleaseContext@8
; Line 1470
  00b14	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hklCurrent
  00b1a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00b20	0f b7 d1	 movzx	 edx, cx
  00b23	81 e2 ff 03 00
	00		 and	 edx, 1023		; 000003ffH
  00b29	0f b7 c2	 movzx	 eax, dx
  00b2c	83 f8 12	 cmp	 eax, 18			; 00000012H
  00b2f	74 25		 je	 SHORT $LN26@ImeUi_Proc
  00b31	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hklCurrent
  00b37	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00b3d	0f b7 d1	 movzx	 edx, cx
  00b40	81 fa 04 04 00
	00		 cmp	 edx, 1028		; 00000404H
  00b46	75 18		 jne	 SHORT $LN39@ImeUi_Proc
  00b48	6a 00		 push	 0
  00b4a	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  00b4f	83 c4 04	 add	 esp, 4
  00b52	85 c0		 test	 eax, eax
  00b54	75 0a		 jne	 SHORT $LN39@ImeUi_Proc
$LN26@ImeUi_Proc:
; Line 1471
  00b56	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR _g_dwSelection, -1
$LN39@ImeUi_Proc:
; Line 1473
  00b60	e9 4f 01 00 00	 jmp	 $LN48@ImeUi_Proc
$LN25@ImeUi_Proc:
; Line 1477
  00b65	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bUILessMode
  00b6c	85 c0		 test	 eax, eax
  00b6e	74 05		 je	 SHORT $LN24@ImeUi_Proc
; Line 1479
  00b70	e9 3f 01 00 00	 jmp	 $LN48@ImeUi_Proc
$LN24@ImeUi_Proc:
; Line 1481
  00b75	e8 00 00 00 00	 call	 ?CloseCandidateList@@YAXXZ ; CloseCandidateList
; Line 1482
  00b7a	8b 4d 18	 mov	 ecx, DWORD PTR _trapped$[ebp]
  00b7d	c6 01 01	 mov	 BYTE PTR [ecx], 1
; Line 1483
  00b80	e9 2f 01 00 00	 jmp	 $LN48@ImeUi_Proc
$LN23@ImeUi_Proc:
; Line 1488
  00b85	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR _g_bCandList
  00b8c	85 d2		 test	 edx, edx
  00b8e	75 0c		 jne	 SHORT $LN22@ImeUi_Proc
; Line 1490
  00b90	8b 45 08	 mov	 eax, DWORD PTR _hWnd$[ebp]
  00b93	50		 push	 eax
  00b94	e8 00 00 00 00	 call	 ?GetReadingString@@YAXPAUHWND__@@@Z ; GetReadingString
  00b99	83 c4 04	 add	 esp, 4
$LN22@ImeUi_Proc:
; Line 1493
  00b9c	6a 00		 push	 0
  00b9e	e8 00 00 00 00	 call	 ?GetImeId@@YAKI@Z	; GetImeId
  00ba3	83 c4 04	 add	 esp, 4
  00ba6	89 85 8c fd ff
	ff		 mov	 DWORD PTR _dwId$7[ebp], eax
; Line 1494
  00bac	8b 8d 8c fd ff
	ff		 mov	 ecx, DWORD PTR _dwId$7[ebp]
  00bb2	89 8d 00 fd ff
	ff		 mov	 DWORD PTR tv358[ebp], ecx
  00bb8	81 bd 00 fd ff
	ff 04 04 00 05	 cmp	 DWORD PTR tv358[ebp], 83887108 ; 05000404H
  00bc2	77 62		 ja	 SHORT $LN91@ImeUi_Proc
  00bc4	81 bd 00 fd ff
	ff 04 04 00 05	 cmp	 DWORD PTR tv358[ebp], 83887108 ; 05000404H
  00bce	0f 84 aa 00 00
	00		 je	 $LN16@ImeUi_Proc
  00bd4	81 bd 00 fd ff
	ff 04 08 02 04	 cmp	 DWORD PTR tv358[ebp], 67241988 ; 04020804H
  00bde	77 29		 ja	 SHORT $LN92@ImeUi_Proc
  00be0	81 bd 00 fd ff
	ff 04 08 02 04	 cmp	 DWORD PTR tv358[ebp], 67241988 ; 04020804H
  00bea	74 7a		 je	 SHORT $LN19@ImeUi_Proc
  00bec	81 bd 00 fd ff
	ff 04 08 01 04	 cmp	 DWORD PTR tv358[ebp], 67176452 ; 04010804H
  00bf6	74 6e		 je	 SHORT $LN19@ImeUi_Proc
  00bf8	81 bd 00 fd ff
	ff 04 04 02 04	 cmp	 DWORD PTR tv358[ebp], 67240964 ; 04020404H
  00c02	74 62		 je	 SHORT $LN19@ImeUi_Proc
  00c04	e9 a3 00 00 00	 jmp	 $LN20@ImeUi_Proc
$LN92@ImeUi_Proc:
  00c09	81 bd 00 fd ff
	ff 04 04 03 04	 cmp	 DWORD PTR tv358[ebp], 67306500 ; 04030404H
  00c13	74 51		 je	 SHORT $LN19@ImeUi_Proc
  00c15	81 bd 00 fd ff
	ff 04 04 04 04	 cmp	 DWORD PTR tv358[ebp], 67372036 ; 04040404H
  00c1f	74 45		 je	 SHORT $LN19@ImeUi_Proc
  00c21	e9 86 00 00 00	 jmp	 $LN20@ImeUi_Proc
$LN91@ImeUi_Proc:
  00c26	81 bd 00 fd ff
	ff 04 08 03 05	 cmp	 DWORD PTR tv358[ebp], 84084740 ; 05030804H
  00c30	77 26		 ja	 SHORT $LN93@ImeUi_Proc
  00c32	81 bd 00 fd ff
	ff 04 08 03 05	 cmp	 DWORD PTR tv358[ebp], 84084740 ; 05030804H
  00c3c	74 40		 je	 SHORT $LN16@ImeUi_Proc
  00c3e	81 bd 00 fd ff
	ff 04 04 01 05	 cmp	 DWORD PTR tv358[ebp], 83952644 ; 05010404H
  00c48	74 34		 je	 SHORT $LN16@ImeUi_Proc
  00c4a	81 bd 00 fd ff
	ff 04 04 02 05	 cmp	 DWORD PTR tv358[ebp], 84018180 ; 05020404H
  00c54	74 28		 je	 SHORT $LN16@ImeUi_Proc
  00c56	eb 54		 jmp	 SHORT $LN20@ImeUi_Proc
$LN93@ImeUi_Proc:
  00c58	81 bd 00 fd ff
	ff 04 04 00 06	 cmp	 DWORD PTR tv358[ebp], 100664324 ; 06000404H
  00c62	74 1a		 je	 SHORT $LN16@ImeUi_Proc
  00c64	eb 46		 jmp	 SHORT $LN20@ImeUi_Proc
$LN19@ImeUi_Proc:
; Line 1501
  00c66	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  00c69	83 3a 01	 cmp	 DWORD PTR [edx], 1
  00c6c	74 08		 je	 SHORT $LN17@ImeUi_Proc
  00c6e	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00c71	83 38 02	 cmp	 DWORD PTR [eax], 2
  00c74	75 06		 jne	 SHORT $LN18@ImeUi_Proc
$LN17@ImeUi_Proc:
; Line 1503
  00c76	8b 4d 18	 mov	 ecx, DWORD PTR _trapped$[ebp]
  00c79	c6 01 01	 mov	 BYTE PTR [ecx], 1
$LN18@ImeUi_Proc:
; Line 1505
  00c7c	eb 2e		 jmp	 SHORT $LN20@ImeUi_Proc
$LN16@ImeUi_Proc:
; Line 1512
  00c7e	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  00c81	83 3a 10	 cmp	 DWORD PTR [edx], 16	; 00000010H
  00c84	74 20		 je	 SHORT $LN14@ImeUi_Proc
  00c86	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00c89	83 38 11	 cmp	 DWORD PTR [eax], 17	; 00000011H
  00c8c	74 18		 je	 SHORT $LN14@ImeUi_Proc
  00c8e	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00c91	83 39 1a	 cmp	 DWORD PTR [ecx], 26	; 0000001aH
  00c94	74 10		 je	 SHORT $LN14@ImeUi_Proc
  00c96	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  00c99	83 3a 1b	 cmp	 DWORD PTR [edx], 27	; 0000001bH
  00c9c	74 08		 je	 SHORT $LN14@ImeUi_Proc
  00c9e	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00ca1	83 38 1c	 cmp	 DWORD PTR [eax], 28	; 0000001cH
  00ca4	75 06		 jne	 SHORT $LN20@ImeUi_Proc
$LN14@ImeUi_Proc:
; Line 1514
  00ca6	8b 4d 18	 mov	 ecx, DWORD PTR _trapped$[ebp]
  00ca9	c6 01 01	 mov	 BYTE PTR [ecx], 1
$LN20@ImeUi_Proc:
; Line 1519
  00cac	eb 06		 jmp	 SHORT $LN48@ImeUi_Proc
$LN13@ImeUi_Proc:
; Line 1522
  00cae	8b 55 18	 mov	 edx, DWORD PTR _trapped$[ebp]
  00cb1	c6 02 01	 mov	 BYTE PTR [edx], 1
$LN48@ImeUi_Proc:
; Line 1525
  00cb4	e9 86 01 00 00	 jmp	 $LN73@ImeUi_Proc
$LN12@ImeUi_Proc:
; Line 1532
  00cb9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lAlt@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
  00cbe	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00cc3	75 60		 jne	 SHORT $LN11@ImeUi_Proc
  00cc5	83 7d 10 12	 cmp	 DWORD PTR _wParam$[ebp], 18 ; 00000012H
  00cc9	74 5a		 je	 SHORT $LN11@ImeUi_Proc
  00ccb	8b f4		 mov	 esi, esp
  00ccd	6a 12		 push	 18			; 00000012H
  00ccf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetAsyncKeyState@4
  00cd5	3b f4		 cmp	 esi, esp
  00cd7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00cdc	0f bf c8	 movsx	 ecx, ax
  00cdf	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  00ce5	75 3e		 jne	 SHORT $LN11@ImeUi_Proc
; Line 1534
  00ce7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?lAlt@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
  00ced	81 e2 00 00 ff
	01		 and	 edx, 33488896		; 01ff0000H
  00cf3	81 ca 01 00 00
	c0		 or	 edx, -1073741823	; c0000001H
  00cf9	8b f4		 mov	 esi, esp
  00cfb	52		 push	 edx
  00cfc	6a 12		 push	 18			; 00000012H
  00cfe	68 01 01 00 00	 push	 257			; 00000101H
  00d03	8b fc		 mov	 edi, esp
  00d05	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFocus@0
  00d0b	3b fc		 cmp	 edi, esp
  00d0d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d12	50		 push	 eax
  00d13	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  00d19	3b f4		 cmp	 esi, esp
  00d1b	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1536
  00d20	e9 d0 00 00 00	 jmp	 $LN6@ImeUi_Proc
$LN11@ImeUi_Proc:
; Line 1537
  00d25	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lCtrl@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
  00d2a	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00d2f	75 5d		 jne	 SHORT $LN9@ImeUi_Proc
  00d31	83 7d 10 11	 cmp	 DWORD PTR _wParam$[ebp], 17 ; 00000011H
  00d35	74 57		 je	 SHORT $LN9@ImeUi_Proc
  00d37	8b f4		 mov	 esi, esp
  00d39	6a 11		 push	 17			; 00000011H
  00d3b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetAsyncKeyState@4
  00d41	3b f4		 cmp	 esi, esp
  00d43	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d48	0f bf c8	 movsx	 ecx, ax
  00d4b	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  00d51	75 3b		 jne	 SHORT $LN9@ImeUi_Proc
; Line 1539
  00d53	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?lCtrl@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
  00d59	81 e2 00 00 ff
	01		 and	 edx, 33488896		; 01ff0000H
  00d5f	81 ca 01 00 00
	c0		 or	 edx, -1073741823	; c0000001H
  00d65	8b f4		 mov	 esi, esp
  00d67	52		 push	 edx
  00d68	6a 11		 push	 17			; 00000011H
  00d6a	68 01 01 00 00	 push	 257			; 00000101H
  00d6f	8b fc		 mov	 edi, esp
  00d71	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFocus@0
  00d77	3b fc		 cmp	 edi, esp
  00d79	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d7e	50		 push	 eax
  00d7f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  00d85	3b f4		 cmp	 esi, esp
  00d87	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d8c	eb 67		 jmp	 SHORT $LN6@ImeUi_Proc
$LN9@ImeUi_Proc:
; Line 1541
  00d8e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lShift@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
  00d93	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00d98	75 5b		 jne	 SHORT $LN6@ImeUi_Proc
  00d9a	83 7d 10 10	 cmp	 DWORD PTR _wParam$[ebp], 16 ; 00000010H
  00d9e	74 55		 je	 SHORT $LN6@ImeUi_Proc
  00da0	8b f4		 mov	 esi, esp
  00da2	6a 10		 push	 16			; 00000010H
  00da4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetAsyncKeyState@4
  00daa	3b f4		 cmp	 esi, esp
  00dac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00db1	0f bf c8	 movsx	 ecx, ax
  00db4	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  00dba	75 39		 jne	 SHORT $LN6@ImeUi_Proc
; Line 1543
  00dbc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?lShift@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
  00dc2	81 e2 00 00 ff
	01		 and	 edx, 33488896		; 01ff0000H
  00dc8	81 ca 01 00 00
	c0		 or	 edx, -1073741823	; c0000001H
  00dce	8b f4		 mov	 esi, esp
  00dd0	52		 push	 edx
  00dd1	6a 10		 push	 16			; 00000010H
  00dd3	68 01 01 00 00	 push	 257			; 00000101H
  00dd8	8b fc		 mov	 edi, esp
  00dda	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFocus@0
  00de0	3b fc		 cmp	 edi, esp
  00de2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00de7	50		 push	 eax
  00de8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  00dee	3b f4		 cmp	 esi, esp
  00df0	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@ImeUi_Proc:
; Line 1549
  00df5	8b 45 10	 mov	 eax, DWORD PTR _wParam$[ebp]
  00df8	89 85 fc fc ff
	ff		 mov	 DWORD PTR tv419[ebp], eax
  00dfe	83 bd fc fc ff
	ff 10		 cmp	 DWORD PTR tv419[ebp], 16 ; 00000010H
  00e05	74 21		 je	 SHORT $LN2@ImeUi_Proc
  00e07	83 bd fc fc ff
	ff 11		 cmp	 DWORD PTR tv419[ebp], 17 ; 00000011H
  00e0e	74 25		 je	 SHORT $LN1@ImeUi_Proc
  00e10	83 bd fc fc ff
	ff 12		 cmp	 DWORD PTR tv419[ebp], 18 ; 00000012H
  00e17	74 02		 je	 SHORT $LN3@ImeUi_Proc
  00e19	eb 24		 jmp	 SHORT $LN73@ImeUi_Proc
$LN3@ImeUi_Proc:
; Line 1552
  00e1b	8b 4d 14	 mov	 ecx, DWORD PTR _lParam$[ebp]
  00e1e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00e20	89 15 00 00 00
	00		 mov	 DWORD PTR ?lAlt@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA, edx
; Line 1553
  00e26	eb 17		 jmp	 SHORT $LN73@ImeUi_Proc
$LN2@ImeUi_Proc:
; Line 1555
  00e28	8b 45 14	 mov	 eax, DWORD PTR _lParam$[ebp]
  00e2b	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e2d	89 0d 00 00 00
	00		 mov	 DWORD PTR ?lShift@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA, ecx
; Line 1556
  00e33	eb 0a		 jmp	 SHORT $LN73@ImeUi_Proc
$LN1@ImeUi_Proc:
; Line 1558
  00e35	8b 55 14	 mov	 edx, DWORD PTR _lParam$[ebp]
  00e38	8b 02		 mov	 eax, DWORD PTR [edx]
  00e3a	a3 00 00 00 00	 mov	 DWORD PTR ?lCtrl@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA, eax
$LN73@ImeUi_Proc:
; Line 1564
  00e3f	33 c0		 xor	 eax, eax
$LN78@ImeUi_Proc:
; Line 1565
  00e41	52		 push	 edx
  00e42	8b cd		 mov	 ecx, ebp
  00e44	50		 push	 eax
  00e45	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN109@ImeUi_Proc
  00e4b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00e50	58		 pop	 eax
  00e51	5a		 pop	 edx
  00e52	5f		 pop	 edi
  00e53	5e		 pop	 esi
  00e54	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00e57	33 cd		 xor	 ecx, ebp
  00e59	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00e5e	81 c4 04 03 00
	00		 add	 esp, 772		; 00000304H
  00e64	3b ec		 cmp	 ebp, esp
  00e66	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e6b	8b e5		 mov	 esp, ebp
  00e6d	5d		 pop	 ebp
  00e6e	c3		 ret	 0
  00e6f	90		 npad	 1
$LN109@ImeUi_Proc:
  00e70	04 00 00 00	 DD	 4
  00e74	00 00 00 00	 DD	 $LN108@ImeUi_Proc
$LN108@ImeUi_Proc:
  00e78	ec fd ff ff	 DD	 -532			; fffffdecH
  00e7c	00 02 00 00	 DD	 512			; 00000200H
  00e80	00 00 00 00	 DD	 $LN104@ImeUi_Proc
  00e84	d4 fd ff ff	 DD	 -556			; fffffdd4H
  00e88	04 00 00 00	 DD	 4
  00e8c	00 00 00 00	 DD	 $LN105@ImeUi_Proc
  00e90	c8 fd ff ff	 DD	 -568			; fffffdc8H
  00e94	04 00 00 00	 DD	 4
  00e98	00 00 00 00	 DD	 $LN106@ImeUi_Proc
  00e9c	b8 fd ff ff	 DD	 -584			; fffffdb8H
  00ea0	04 00 00 00	 DD	 4
  00ea4	00 00 00 00	 DD	 $LN107@ImeUi_Proc
$LN107@ImeUi_Proc:
  00ea8	6c		 DB	 108			; 0000006cH
  00ea9	70		 DB	 112			; 00000070H
  00eaa	43		 DB	 67			; 00000043H
  00eab	61		 DB	 97			; 00000061H
  00eac	6e		 DB	 110			; 0000006eH
  00ead	64		 DB	 100			; 00000064H
  00eae	4c		 DB	 76			; 0000004cH
  00eaf	69		 DB	 105			; 00000069H
  00eb0	73		 DB	 115			; 00000073H
  00eb1	74		 DB	 116			; 00000074H
  00eb2	00		 DB	 0
$LN106@ImeUi_Proc:
  00eb3	64		 DB	 100			; 00000064H
  00eb4	77		 DB	 119			; 00000077H
  00eb5	53		 DB	 83			; 00000053H
  00eb6	65		 DB	 101			; 00000065H
  00eb7	6e		 DB	 110			; 0000006eH
  00eb8	74		 DB	 116			; 00000074H
  00eb9	4d		 DB	 77			; 0000004dH
  00eba	6f		 DB	 111			; 0000006fH
  00ebb	64		 DB	 100			; 00000064H
  00ebc	65		 DB	 101			; 00000065H
  00ebd	00		 DB	 0
$LN105@ImeUi_Proc:
  00ebe	64		 DB	 100			; 00000064H
  00ebf	77		 DB	 119			; 00000077H
  00ec0	43		 DB	 67			; 00000043H
  00ec1	6f		 DB	 111			; 0000006fH
  00ec2	6e		 DB	 110			; 0000006eH
  00ec3	76		 DB	 118			; 00000076H
  00ec4	4d		 DB	 77			; 0000004dH
  00ec5	6f		 DB	 111			; 0000006fH
  00ec6	64		 DB	 100			; 00000064H
  00ec7	65		 DB	 101			; 00000065H
  00ec8	00		 DB	 0
$LN104@ImeUi_Proc:
  00ec9	73		 DB	 115			; 00000073H
  00eca	7a		 DB	 122			; 0000007aH
  00ecb	43		 DB	 67			; 00000043H
  00ecc	6f		 DB	 111			; 0000006fH
  00ecd	6d		 DB	 109			; 0000006dH
  00ece	70		 DB	 112			; 00000070H
  00ecf	53		 DB	 83			; 00000053H
  00ed0	74		 DB	 116			; 00000074H
  00ed1	72		 DB	 114			; 00000072H
  00ed2	00		 DB	 0
  00ed3	90		 npad	 1
$LN110@ImeUi_Proc:
  00ed4	00 00 00 00	 DD	 $LN72@ImeUi_Proc
  00ed8	00 00 00 00	 DD	 $LN6@ImeUi_Proc
  00edc	00 00 00 00	 DD	 $LN12@ImeUi_Proc
  00ee0	00 00 00 00	 DD	 $LN73@ImeUi_Proc
$LN96@ImeUi_Proc:
  00ee4	00		 DB	 0
  00ee5	03		 DB	 3
  00ee6	03		 DB	 3
  00ee7	03		 DB	 3
  00ee8	03		 DB	 3
  00ee9	03		 DB	 3
  00eea	03		 DB	 3
  00eeb	03		 DB	 3
  00eec	03		 DB	 3
  00eed	03		 DB	 3
  00eee	03		 DB	 3
  00eef	03		 DB	 3
  00ef0	03		 DB	 3
  00ef1	03		 DB	 3
  00ef2	03		 DB	 3
  00ef3	03		 DB	 3
  00ef4	03		 DB	 3
  00ef5	03		 DB	 3
  00ef6	03		 DB	 3
  00ef7	03		 DB	 3
  00ef8	03		 DB	 3
  00ef9	03		 DB	 3
  00efa	03		 DB	 3
  00efb	03		 DB	 3
  00efc	03		 DB	 3
  00efd	03		 DB	 3
  00efe	03		 DB	 3
  00eff	03		 DB	 3
  00f00	03		 DB	 3
  00f01	03		 DB	 3
  00f02	03		 DB	 3
  00f03	03		 DB	 3
  00f04	03		 DB	 3
  00f05	03		 DB	 3
  00f06	03		 DB	 3
  00f07	03		 DB	 3
  00f08	03		 DB	 3
  00f09	03		 DB	 3
  00f0a	03		 DB	 3
  00f0b	03		 DB	 3
  00f0c	03		 DB	 3
  00f0d	03		 DB	 3
  00f0e	03		 DB	 3
  00f0f	03		 DB	 3
  00f10	03		 DB	 3
  00f11	03		 DB	 3
  00f12	03		 DB	 3
  00f13	03		 DB	 3
  00f14	03		 DB	 3
  00f15	03		 DB	 3
  00f16	03		 DB	 3
  00f17	03		 DB	 3
  00f18	03		 DB	 3
  00f19	03		 DB	 3
  00f1a	03		 DB	 3
  00f1b	03		 DB	 3
  00f1c	03		 DB	 3
  00f1d	03		 DB	 3
  00f1e	03		 DB	 3
  00f1f	03		 DB	 3
  00f20	03		 DB	 3
  00f21	03		 DB	 3
  00f22	03		 DB	 3
  00f23	03		 DB	 3
  00f24	03		 DB	 3
  00f25	03		 DB	 3
  00f26	03		 DB	 3
  00f27	03		 DB	 3
  00f28	03		 DB	 3
  00f29	03		 DB	 3
  00f2a	03		 DB	 3
  00f2b	03		 DB	 3
  00f2c	03		 DB	 3
  00f2d	03		 DB	 3
  00f2e	03		 DB	 3
  00f2f	03		 DB	 3
  00f30	03		 DB	 3
  00f31	03		 DB	 3
  00f32	03		 DB	 3
  00f33	03		 DB	 3
  00f34	03		 DB	 3
  00f35	03		 DB	 3
  00f36	03		 DB	 3
  00f37	03		 DB	 3
  00f38	03		 DB	 3
  00f39	03		 DB	 3
  00f3a	03		 DB	 3
  00f3b	03		 DB	 3
  00f3c	03		 DB	 3
  00f3d	03		 DB	 3
  00f3e	03		 DB	 3
  00f3f	03		 DB	 3
  00f40	03		 DB	 3
  00f41	03		 DB	 3
  00f42	03		 DB	 3
  00f43	03		 DB	 3
  00f44	03		 DB	 3
  00f45	03		 DB	 3
  00f46	03		 DB	 3
  00f47	03		 DB	 3
  00f48	03		 DB	 3
  00f49	03		 DB	 3
  00f4a	03		 DB	 3
  00f4b	03		 DB	 3
  00f4c	03		 DB	 3
  00f4d	03		 DB	 3
  00f4e	03		 DB	 3
  00f4f	03		 DB	 3
  00f50	03		 DB	 3
  00f51	03		 DB	 3
  00f52	03		 DB	 3
  00f53	03		 DB	 3
  00f54	03		 DB	 3
  00f55	03		 DB	 3
  00f56	03		 DB	 3
  00f57	03		 DB	 3
  00f58	03		 DB	 3
  00f59	03		 DB	 3
  00f5a	03		 DB	 3
  00f5b	03		 DB	 3
  00f5c	03		 DB	 3
  00f5d	03		 DB	 3
  00f5e	03		 DB	 3
  00f5f	03		 DB	 3
  00f60	03		 DB	 3
  00f61	03		 DB	 3
  00f62	03		 DB	 3
  00f63	03		 DB	 3
  00f64	03		 DB	 3
  00f65	03		 DB	 3
  00f66	03		 DB	 3
  00f67	03		 DB	 3
  00f68	03		 DB	 3
  00f69	03		 DB	 3
  00f6a	03		 DB	 3
  00f6b	03		 DB	 3
  00f6c	03		 DB	 3
  00f6d	03		 DB	 3
  00f6e	03		 DB	 3
  00f6f	03		 DB	 3
  00f70	03		 DB	 3
  00f71	03		 DB	 3
  00f72	03		 DB	 3
  00f73	03		 DB	 3
  00f74	03		 DB	 3
  00f75	03		 DB	 3
  00f76	03		 DB	 3
  00f77	03		 DB	 3
  00f78	03		 DB	 3
  00f79	03		 DB	 3
  00f7a	03		 DB	 3
  00f7b	03		 DB	 3
  00f7c	03		 DB	 3
  00f7d	03		 DB	 3
  00f7e	03		 DB	 3
  00f7f	03		 DB	 3
  00f80	03		 DB	 3
  00f81	03		 DB	 3
  00f82	03		 DB	 3
  00f83	03		 DB	 3
  00f84	03		 DB	 3
  00f85	03		 DB	 3
  00f86	03		 DB	 3
  00f87	03		 DB	 3
  00f88	03		 DB	 3
  00f89	03		 DB	 3
  00f8a	03		 DB	 3
  00f8b	03		 DB	 3
  00f8c	03		 DB	 3
  00f8d	03		 DB	 3
  00f8e	03		 DB	 3
  00f8f	03		 DB	 3
  00f90	03		 DB	 3
  00f91	03		 DB	 3
  00f92	03		 DB	 3
  00f93	01		 DB	 1
  00f94	02		 DB	 2
  00f95	03		 DB	 3
  00f96	03		 DB	 3
  00f97	01		 DB	 1
  00f98	02		 DB	 2
  00f99	8d 49 00	 npad	 3
$LN111@ImeUi_Proc:
  00f9c	00 00 00 00	 DD	 $LN42@ImeUi_Proc
  00fa0	00 00 00 00	 DD	 $LN25@ImeUi_Proc
  00fa4	00 00 00 00	 DD	 $LN47@ImeUi_Proc
  00fa8	00 00 00 00	 DD	 $LN44@ImeUi_Proc
  00fac	00 00 00 00	 DD	 $LN23@ImeUi_Proc
  00fb0	00 00 00 00	 DD	 $LN13@ImeUi_Proc
$LN102@ImeUi_Proc:
  00fb4	00		 DB	 0
  00fb5	01		 DB	 1
  00fb6	00		 DB	 0
  00fb7	02		 DB	 2
  00fb8	05		 DB	 5
  00fb9	03		 DB	 3
  00fba	05		 DB	 5
  00fbb	05		 DB	 5
  00fbc	05		 DB	 5
  00fbd	05		 DB	 5
  00fbe	05		 DB	 5
  00fbf	04		 DB	 4
?ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z ENDP	; ImeUi_ProcessMessage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv141 = -15						; size = 1
tv135 = -14						; size = 1
tv129 = -13						; size = 1
_i$1 = -12						; size = 4
_uVkReal$2 = -8						; size = 4
_bAlt$3 = -3						; size = 1
_bShift$4 = -2						; size = 1
_bCtrl$5 = -1						; size = 1
_pmsg$ = 8						; size = 4
?ImeUi_IgnoreHotKey@@YA_NPBUtagMSG@@@Z PROC		; ImeUi_IgnoreHotKey
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2148
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 2149
  00018	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  0001f	85 c0		 test	 eax, eax
  00021	74 06		 je	 SHORT $LN10@ImeUi_Igno
  00023	83 7d 08 00	 cmp	 DWORD PTR _pmsg$[ebp], 0
  00027	75 07		 jne	 SHORT $LN11@ImeUi_Igno
$LN10@ImeUi_Igno:
; Line 2150
  00029	32 c0		 xor	 al, al
  0002b	e9 87 01 00 00	 jmp	 $LN12@ImeUi_Igno
$LN11@ImeUi_Igno:
; Line 2152
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _pmsg$[ebp]
  00033	81 79 08 e5 00
	00 00		 cmp	 DWORD PTR [ecx+8], 229	; 000000e5H
  0003a	0f 85 75 01 00
	00		 jne	 $LN9@ImeUi_Igno
  00040	8b 55 08	 mov	 edx, DWORD PTR _pmsg$[ebp]
  00043	81 7a 04 00 01
	00 00		 cmp	 DWORD PTR [edx+4], 256	; 00000100H
  0004a	74 10		 je	 SHORT $LN8@ImeUi_Igno
  0004c	8b 45 08	 mov	 eax, DWORD PTR _pmsg$[ebp]
  0004f	81 78 04 04 01
	00 00		 cmp	 DWORD PTR [eax+4], 260	; 00000104H
  00056	0f 85 59 01 00
	00		 jne	 $LN9@ImeUi_Igno
$LN8@ImeUi_Igno:
; Line 2155
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _pmsg$[ebp]
  0005f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00061	52		 push	 edx
  00062	e8 00 00 00 00	 call	 _ImmGetVirtualKey@4
  00067	89 45 f8	 mov	 DWORD PTR _uVkReal$2[ebp], eax
; Line 2158
  0006a	83 7d f8 17	 cmp	 DWORD PTR _uVkReal$2[ebp], 23 ; 00000017H
  0006e	75 07		 jne	 SHORT $LN7@ImeUi_Igno
; Line 2160
  00070	b0 01		 mov	 al, 1
  00072	e9 40 01 00 00	 jmp	 $LN12@ImeUi_Igno
$LN7@ImeUi_Igno:
; Line 2163
  00077	83 7d f8 27	 cmp	 DWORD PTR _uVkReal$2[ebp], 39 ; 00000027H
  0007b	75 29		 jne	 SHORT $LN6@ImeUi_Igno
  0007d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bCandList
  00084	85 c0		 test	 eax, eax
  00086	74 1e		 je	 SHORT $LN6@ImeUi_Igno
  00088	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hklCurrent
  0008e	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00094	0f b7 d1	 movzx	 edx, cx
  00097	81 fa 04 04 00
	00		 cmp	 edx, 1028		; 00000404H
  0009d	75 07		 jne	 SHORT $LN6@ImeUi_Igno
; Line 2165
  0009f	b0 01		 mov	 al, 1
  000a1	e9 11 01 00 00	 jmp	 $LN12@ImeUi_Igno
$LN6@ImeUi_Igno:
; Line 2169
  000a6	83 7d f8 19	 cmp	 DWORD PTR _uVkReal$2[ebp], 25 ; 00000019H
  000aa	75 22		 jne	 SHORT $LN5@ImeUi_Igno
  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hklCurrent
  000b1	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000b6	0f b7 c8	 movzx	 ecx, ax
  000b9	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  000bf	0f b7 d1	 movzx	 edx, cx
  000c2	83 fa 12	 cmp	 edx, 18			; 00000012H
  000c5	75 07		 jne	 SHORT $LN5@ImeUi_Igno
; Line 2171
  000c7	b0 01		 mov	 al, 1
  000c9	e9 e9 00 00 00	 jmp	 $LN12@ImeUi_Igno
$LN5@ImeUi_Igno:
; Line 2174
  000ce	8b f4		 mov	 esi, esp
  000d0	6a 11		 push	 17			; 00000011H
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyState@4
  000d8	3b f4		 cmp	 esi, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	98		 cwde
  000e0	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  000e5	74 06		 je	 SHORT $LN14@ImeUi_Igno
  000e7	c6 45 f3 01	 mov	 BYTE PTR tv129[ebp], 1
  000eb	eb 04		 jmp	 SHORT $LN15@ImeUi_Igno
$LN14@ImeUi_Igno:
  000ed	c6 45 f3 00	 mov	 BYTE PTR tv129[ebp], 0
$LN15@ImeUi_Igno:
  000f1	8a 4d f3	 mov	 cl, BYTE PTR tv129[ebp]
  000f4	88 4d ff	 mov	 BYTE PTR _bCtrl$5[ebp], cl
; Line 2175
  000f7	8b f4		 mov	 esi, esp
  000f9	6a 10		 push	 16			; 00000010H
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyState@4
  00101	3b f4		 cmp	 esi, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00108	0f bf d0	 movsx	 edx, ax
  0010b	81 e2 00 80 00
	00		 and	 edx, 32768		; 00008000H
  00111	74 06		 je	 SHORT $LN16@ImeUi_Igno
  00113	c6 45 f2 01	 mov	 BYTE PTR tv135[ebp], 1
  00117	eb 04		 jmp	 SHORT $LN17@ImeUi_Igno
$LN16@ImeUi_Igno:
  00119	c6 45 f2 00	 mov	 BYTE PTR tv135[ebp], 0
$LN17@ImeUi_Igno:
  0011d	8a 45 f2	 mov	 al, BYTE PTR tv135[ebp]
  00120	88 45 fe	 mov	 BYTE PTR _bShift$4[ebp], al
; Line 2176
  00123	8b f4		 mov	 esi, esp
  00125	6a 12		 push	 18			; 00000012H
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetKeyState@4
  0012d	3b f4		 cmp	 esi, esp
  0012f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00134	0f bf c8	 movsx	 ecx, ax
  00137	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  0013d	74 06		 je	 SHORT $LN18@ImeUi_Igno
  0013f	c6 45 f1 01	 mov	 BYTE PTR tv141[ebp], 1
  00143	eb 04		 jmp	 SHORT $LN19@ImeUi_Igno
$LN18@ImeUi_Igno:
  00145	c6 45 f1 00	 mov	 BYTE PTR tv141[ebp], 0
$LN19@ImeUi_Igno:
  00149	8a 55 f1	 mov	 dl, BYTE PTR tv141[ebp]
  0014c	88 55 fd	 mov	 BYTE PTR _bAlt$3[ebp], dl
; Line 2177
  0014f	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00156	eb 09		 jmp	 SHORT $LN4@ImeUi_Igno
$LN3@ImeUi_Igno:
  00158	8b 45 f4	 mov	 eax, DWORD PTR _i$1[ebp]
  0015b	83 c0 01	 add	 eax, 1
  0015e	89 45 f4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@ImeUi_Igno:
  00161	83 7d f4 17	 cmp	 DWORD PTR _i$1[ebp], 23	; 00000017H
  00165	73 4e		 jae	 SHORT $LN9@ImeUi_Igno
; Line 2182
  00167	8b 4d f4	 mov	 ecx, DWORD PTR _i$1[ebp]
  0016a	0f b6 14 cd 00
	00 00 00	 movzx	 edx, BYTE PTR _aHotKeys[ecx*8]
  00172	0f b6 45 ff	 movzx	 eax, BYTE PTR _bCtrl$5[ebp]
  00176	3b d0		 cmp	 edx, eax
  00178	75 39		 jne	 SHORT $LN1@ImeUi_Igno
  0017a	8b 4d f4	 mov	 ecx, DWORD PTR _i$1[ebp]
  0017d	0f b6 14 cd 01
	00 00 00	 movzx	 edx, BYTE PTR _aHotKeys[ecx*8+1]
  00185	0f b6 45 fe	 movzx	 eax, BYTE PTR _bShift$4[ebp]
  00189	3b d0		 cmp	 edx, eax
  0018b	75 26		 jne	 SHORT $LN1@ImeUi_Igno
  0018d	8b 4d f4	 mov	 ecx, DWORD PTR _i$1[ebp]
  00190	0f b6 14 cd 02
	00 00 00	 movzx	 edx, BYTE PTR _aHotKeys[ecx*8+2]
  00198	0f b6 45 fd	 movzx	 eax, BYTE PTR _bAlt$3[ebp]
  0019c	3b d0		 cmp	 edx, eax
  0019e	75 13		 jne	 SHORT $LN1@ImeUi_Igno
  001a0	8b 4d f4	 mov	 ecx, DWORD PTR _i$1[ebp]
  001a3	8b 14 cd 04 00
	00 00		 mov	 edx, DWORD PTR _aHotKeys[ecx*8+4]
  001aa	3b 55 f8	 cmp	 edx, DWORD PTR _uVkReal$2[ebp]
  001ad	75 04		 jne	 SHORT $LN1@ImeUi_Igno
; Line 2183
  001af	b0 01		 mov	 al, 1
  001b1	eb 04		 jmp	 SHORT $LN12@ImeUi_Igno
$LN1@ImeUi_Igno:
; Line 2184
  001b3	eb a3		 jmp	 SHORT $LN3@ImeUi_Igno
$LN9@ImeUi_Igno:
; Line 2186
  001b5	32 c0		 xor	 al, al
$LN12@ImeUi_Igno:
; Line 2187
  001b7	5e		 pop	 esi
  001b8	83 c4 10	 add	 esp, 16			; 00000010H
  001bb	3b ec		 cmp	 ebp, esp
  001bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	c3		 ret	 0
?ImeUi_IgnoreHotKey@@YA_NPBUtagMSG@@@Z ENDP		; ImeUi_IgnoreHotKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pia$ = 8						; size = 4
?ImeUi_GetAppearance@@YAXPAUIMEUI_APPEARANCE@@@Z PROC	; ImeUi_GetAppearance
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2283
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 2284
  00005	83 7d 08 00	 cmp	 DWORD PTR _pia$[ebp], 0
  00009	74 2c		 je	 SHORT $LN4@ImeUi_GetA
; Line 2286
  0000b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  00012	85 c0		 test	 eax, eax
  00014	74 11		 je	 SHORT $LN2@ImeUi_GetA
; Line 2288
  00016	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0001b	be 00 00 00 00	 mov	 esi, OFFSET _gSkinIME
  00020	8b 7d 08	 mov	 edi, DWORD PTR _pia$[ebp]
  00023	f3 a5		 rep movsd
; Line 2290
  00025	eb 10		 jmp	 SHORT $LN4@ImeUi_GetA
$LN2@ImeUi_GetA:
; Line 2292
  00027	6a 40		 push	 64			; 00000040H
  00029	6a 00		 push	 0
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _pia$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 _memset
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@ImeUi_GetA:
; Line 2295
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?ImeUi_GetAppearance@@YAXPAUIMEUI_APPEARANCE@@@Z ENDP	; ImeUi_GetAppearance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pia$ = 8						; size = 4
?ImeUi_SetAppearance@@YAXPBUIMEUI_APPEARANCE@@@Z PROC	; ImeUi_SetAppearance
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 2267
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; Line 2268
  00005	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  0000c	85 c0		 test	 eax, eax
  0000e	74 06		 je	 SHORT $LN1@ImeUi_SetA
  00010	83 7d 08 00	 cmp	 DWORD PTR _pia$[ebp], 0
  00014	75 05		 jne	 SHORT $LN2@ImeUi_SetA
$LN1@ImeUi_SetA:
; Line 2269
  00016	e9 9e 00 00 00	 jmp	 $LN3@ImeUi_SetA
$LN2@ImeUi_SetA:
; Line 2270
  0001b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00020	8b 75 08	 mov	 esi, DWORD PTR _pia$[ebp]
  00023	bf 00 00 00 00	 mov	 edi, OFFSET _gSkinIME
  00028	f3 a5		 rep movsd
; Line 2271
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _gSkinIME
  00030	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00036	89 0d 00 00 00
	00		 mov	 DWORD PTR _gSkinIME, ecx
; Line 2272
  0003c	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR _gSkinIME+4
  00042	81 e2 ff ff ff
	00		 and	 edx, 16777215		; 00ffffffH
  00048	89 15 04 00 00
	00		 mov	 DWORD PTR _gSkinIME+4, edx
; Line 2273
  0004e	a1 08 00 00 00	 mov	 eax, DWORD PTR _gSkinIME+8
  00053	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00058	a3 08 00 00 00	 mov	 DWORD PTR _gSkinIME+8, eax
; Line 2274
  0005d	8b 0d 20 00 00
	00		 mov	 ecx, DWORD PTR _gSkinIME+32
  00063	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00069	89 0d 20 00 00
	00		 mov	 DWORD PTR _gSkinIME+32, ecx
; Line 2275
  0006f	8b 15 24 00 00
	00		 mov	 edx, DWORD PTR _gSkinIME+36
  00075	81 e2 ff ff ff
	00		 and	 edx, 16777215		; 00ffffffH
  0007b	89 15 24 00 00
	00		 mov	 DWORD PTR _gSkinIME+36, edx
; Line 2276
  00081	a1 28 00 00 00	 mov	 eax, DWORD PTR _gSkinIME+40
  00086	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0008b	a3 28 00 00 00	 mov	 DWORD PTR _gSkinIME+40, eax
; Line 2277
  00090	8b 0d 2c 00 00
	00		 mov	 ecx, DWORD PTR _gSkinIME+44
  00096	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  0009c	89 0d 2c 00 00
	00		 mov	 DWORD PTR _gSkinIME+44, ecx
; Line 2278
  000a2	8b 15 30 00 00
	00		 mov	 edx, DWORD PTR _gSkinIME+48
  000a8	81 e2 ff ff ff
	00		 and	 edx, 16777215		; 00ffffffH
  000ae	89 15 30 00 00
	00		 mov	 DWORD PTR _gSkinIME+48, edx
; Line 2279
  000b4	e8 00 00 00 00	 call	 ?SetCompStringColor@@YAXXZ ; SetCompStringColor
$LN3@ImeUi_SetA:
; Line 2280
  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	3b ec		 cmp	 ebp, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c2	5d		 pop	 ebp
  000c3	c3		 ret	 0
?ImeUi_SetAppearance@@YAXPBUIMEUI_APPEARANCE@@@Z ENDP	; ImeUi_SetAppearance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_Uninitialize@@YAXXZ PROC				; ImeUi_Uninitialize
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 1777
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; Line 1778
  00004	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  0000b	85 c0		 test	 eax, eax
  0000d	75 02		 jne	 SHORT $LN3@ImeUi_Unin
; Line 1780
  0000f	eb 6e		 jmp	 SHORT $LN4@ImeUi_Unin
$LN3@ImeUi_Unin:
; Line 1782
  00011	e8 00 00 00 00	 call	 ?ReleaseSinks@CTsfUiLessMode@@SAXXZ ; CTsfUiLessMode::ReleaseSinks
; Line 1783
  00016	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_hwndMain, 0
  0001d	74 13		 je	 SHORT $LN2@ImeUi_Unin
; Line 1785
  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_himcOrg
  00025	51		 push	 ecx
  00026	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndMain
  0002c	52		 push	 edx
  0002d	e8 00 00 00 00	 call	 _ImmAssociateContext@8
$LN2@ImeUi_Unin:
; Line 1787
  00032	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_hwndMain, 0
; Line 1788
  0003c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_himcOrg, 0
; Line 1789
  00046	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_hImmDll, 0
  0004d	74 1f		 je	 SHORT $LN1@ImeUi_Unin
; Line 1791
  0004f	8b f4		 mov	 esi, esp
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hImmDll
  00056	50		 push	 eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1792
  00064	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_hImmDll, 0
$LN1@ImeUi_Unin:
; Line 1794
  0006e	b9 00 00 00 00	 mov	 ecx, OFFSET _g_disableCicero
  00073	e8 00 00 00 00	 call	 ?Uninitialize@CDisableCicero@@QAEXXZ ; CDisableCicero::Uninitialize
; Line 1795
  00078	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _g_bInitialized, 0
$LN4@ImeUi_Unin:
; Line 1796
  0007f	5e		 pop	 esi
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
?ImeUi_Uninitialize@@YAXXZ ENDP				; ImeUi_Uninitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv149 = -12						; size = 4
tv136 = -8						; size = 4
__ImmDisableTextFrameService$1 = -4			; size = 4
_hwnd$ = 8						; size = 4
_bDisable$ = 12						; size = 1
?ImeUi_Initialize@@YA_NPAUHWND__@@_N@Z PROC		; ImeUi_Initialize
; File d:\engine class\assignment 1\new scratch\dxut\optional\imeui.cpp
; Line 1688
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 1689
  0001c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bInitialized
  00023	85 c0		 test	 eax, eax
  00025	74 07		 je	 SHORT $LN8@ImeUi_Init
; Line 1691
  00027	b0 01		 mov	 al, 1
  00029	e9 ce 02 00 00	 jmp	 $LN9@ImeUi_Init
$LN8@ImeUi_Init:
; Line 1693
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _hwnd$[ebp]
  00031	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_hwndMain, ecx
; Line 1694
  00037	b9 00 00 00 00	 mov	 ecx, OFFSET _g_disableCicero
  0003c	e8 00 00 00 00	 call	 ?Initialize@CDisableCicero@@QAEXXZ ; CDisableCicero::Initialize
; Line 1696
  00041	8b f4		 mov	 esi, esp
  00043	68 00 08 00 00	 push	 2048			; 00000800H
  00048	6a 00		 push	 0
  0004a	68 00 00 00 00	 push	 OFFSET $SG153642
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryExW@12
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	a3 00 00 00 00	 mov	 DWORD PTR _g_hImmDll, eax
; Line 1697
  00061	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_bDisableImeCompletely, 0
; Line 1699
  0006b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_hImmDll, 0
  00072	0f 84 b2 00 00
	00		 je	 $LN7@ImeUi_Init
; Line 1701
  00078	8b f4		 mov	 esi, esp
  0007a	68 00 00 00 00	 push	 OFFSET $SG153646
  0007f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hImmDll
  00085	52		 push	 edx
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	a3 00 00 00 00	 mov	 DWORD PTR __ImmLockIMC, eax
; Line 1702
  00098	8b f4		 mov	 esi, esp
  0009a	68 00 00 00 00	 push	 OFFSET $SG153649
  0009f	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hImmDll
  000a4	50		 push	 eax
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  000ab	3b f4		 cmp	 esi, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b2	a3 00 00 00 00	 mov	 DWORD PTR __ImmUnlockIMC, eax
; Line 1703
  000b7	8b f4		 mov	 esi, esp
  000b9	68 00 00 00 00	 push	 OFFSET $SG153652
  000be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hImmDll
  000c4	51		 push	 ecx
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  000cb	3b f4		 cmp	 esi, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d2	a3 00 00 00 00	 mov	 DWORD PTR __ImmLockIMCC, eax
; Line 1704
  000d7	8b f4		 mov	 esi, esp
  000d9	68 00 00 00 00	 push	 OFFSET $SG153655
  000de	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hImmDll
  000e4	52		 push	 edx
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  000eb	3b f4		 cmp	 esi, esp
  000ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f2	a3 00 00 00 00	 mov	 DWORD PTR __ImmUnlockIMCC, eax
; Line 1705
  000f7	8b f4		 mov	 esi, esp
  000f9	68 00 00 00 00	 push	 OFFSET $SG153660
  000fe	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hImmDll
  00103	50		 push	 eax
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  0010a	3b f4		 cmp	 esi, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00111	89 45 fc	 mov	 DWORD PTR __ImmDisableTextFrameService$1[ebp], eax
; Line 1707
  00114	83 7d fc 00	 cmp	 DWORD PTR __ImmDisableTextFrameService$1[ebp], 0
  00118	74 0e		 je	 SHORT $LN6@ImeUi_Init
; Line 1709
  0011a	8b f4		 mov	 esi, esp
  0011c	6a ff		 push	 -1
  0011e	ff 55 fc	 call	 DWORD PTR __ImmDisableTextFrameService$1[ebp]
  00121	3b f4		 cmp	 esi, esp
  00123	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@ImeUi_Init:
; Line 1712
  00128	eb 11		 jmp	 SHORT $LN5@ImeUi_Init
$LN7@ImeUi_Init:
; Line 1714
  0012a	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _g_bDisableImeCompletely, 1
; Line 1715
  00134	32 c0		 xor	 al, al
  00136	e9 c1 01 00 00	 jmp	 $LN9@ImeUi_Init
$LN5@ImeUi_Init:
; Line 1717
  0013b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR __ImmGetCompositionString, OFFSET _ImmGetCompositionStringW@16
; Line 1718
  00145	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR __ImmGetCandidateList, OFFSET _ImmGetCandidateListW@16
; Line 1719
  0014f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR __GetCandidateList, OFFSET ?GetCandidateList@@YAKPAUHIMC__@@KPAPAUtagCANDIDATELIST@@@Z ; GetCandidateList
; Line 1720
  00159	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR __SendCompString, OFFSET ?SendCompString@@YAXXZ ; SendCompString
; Line 1721
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__SendMessageW@16
  00169	89 0d 00 00 00
	00		 mov	 DWORD PTR __SendMessage, ecx
; Line 1724
  0016f	c6 05 00 00 00
	00 01		 mov	 BYTE PTR _g_bInitialized, 1
; Line 1726
  00176	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndMain
  0017c	52		 push	 edx
  0017d	e8 00 00 00 00	 call	 ?ImeUi_SetWindow@@YAXPAUHWND__@@@Z ; ImeUi_SetWindow
  00182	83 c4 04	 add	 esp, 4
; Line 1727
  00185	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hwndMain
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 _ImmGetContext@4
  00190	a3 00 00 00 00	 mov	 DWORD PTR _g_himcOrg, eax
; Line 1728
  00195	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_himcOrg
  0019b	51		 push	 ecx
  0019c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_hwndMain
  001a2	52		 push	 edx
  001a3	e8 00 00 00 00	 call	 _ImmReleaseContext@8
; Line 1730
  001a8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_himcOrg, 0
  001af	75 04		 jne	 SHORT $LN4@ImeUi_Init
; Line 1732
  001b1	c6 45 0c 01	 mov	 BYTE PTR _bDisable$[ebp], 1
$LN4@ImeUi_Init:
; Line 1739
  001b5	0f b6 45 0c	 movzx	 eax, BYTE PTR _bDisable$[ebp]
  001b9	85 c0		 test	 eax, eax
  001bb	75 12		 jne	 SHORT $LN2@ImeUi_Init
  001bd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ImeUiCallback_Malloc@@3P6APAXI@ZA, 0 ; ImeUiCallback_Malloc
  001c4	74 09		 je	 SHORT $LN2@ImeUi_Init
  001c6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?ImeUiCallback_Free@@3P6AXPAX@ZA, 0 ; ImeUiCallback_Free
  001cd	75 24		 jne	 SHORT $LN3@ImeUi_Init
$LN2@ImeUi_Init:
; Line 1741
  001cf	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _g_bDisableImeCompletely, 1
; Line 1742
  001d9	6a 00		 push	 0
  001db	e8 00 00 00 00	 call	 ?ImeUi_EnableIme@@YAX_N@Z ; ImeUi_EnableIme
  001e0	83 c4 04	 add	 esp, 4
; Line 1743
  001e3	8a 4d 0c	 mov	 cl, BYTE PTR _bDisable$[ebp]
  001e6	88 0d 00 00 00
	00		 mov	 BYTE PTR _g_bInitialized, cl
; Line 1744
  001ec	32 c0		 xor	 al, al
  001ee	e9 09 01 00 00	 jmp	 $LN9@ImeUi_Init
$LN3@ImeUi_Init:
; Line 1747
  001f3	8b f4		 mov	 esi, esp
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCaretBlinkTime@0
  001fb	3b f4		 cmp	 esi, esp
  001fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00202	a3 00 00 00 00	 mov	 DWORD PTR _g_uCaretBlinkTime, eax
; Line 1749
  00207	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_CaretInfo, 0
; Line 1750
  00211	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_CaretInfo+4, 0
; Line 1751
  0021b	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_CaretInfo+8, 0
; Line 1752
  00225	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_CaretInfo+12, 0
; Line 1753
  0022f	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_CaretInfo+16, 0
; Line 1754
  00239	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_CaretInfo+20, 0
; Line 1755
  00243	c7 05 1c 00 00
	00 80 02 00 00	 mov	 DWORD PTR _g_CaretInfo+28, 640 ; 00000280H
; Line 1756
  0024d	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_CaretInfo+24, 0
; Line 1757
  00257	c7 05 20 00 00
	00 e0 01 00 00	 mov	 DWORD PTR _g_CaretInfo+32, 480 ; 000001e0H
; Line 1759
  00261	e8 00 00 00 00	 call	 ?CheckInputLocale@@YAXXZ ; CheckInputLocale
; Line 1760
  00266	e8 00 00 00 00	 call	 ?OnInputLangChangeWorker@@YAXXZ ; OnInputLangChangeWorker
; Line 1761
  0026b	6a 02		 push	 2
  0026d	e8 00 00 00 00	 call	 ?ImeUi_SetSupportLevel@@YAXK@Z ; ImeUi_SetSupportLevel
  00272	83 c4 04	 add	 esp, 4
; Line 1764
  00275	e8 00 00 00 00	 call	 ?SetupSinks@CTsfUiLessMode@@SAHXZ ; CTsfUiLessMode::SetupSinks
  0027a	85 c0		 test	 eax, eax
  0027c	74 09		 je	 SHORT $LN11@ImeUi_Init
  0027e	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv136[ebp], 1
  00285	eb 07		 jmp	 SHORT $LN12@ImeUi_Init
$LN11@ImeUi_Init:
  00287	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv136[ebp], 0
$LN12@ImeUi_Init:
  0028e	8a 55 f8	 mov	 dl, BYTE PTR tv136[ebp]
  00291	88 15 00 00 00
	00		 mov	 BYTE PTR _g_bUILessMode, dl
; Line 1765
  00297	e8 00 00 00 00	 call	 ?CheckToggleState@@YAXXZ ; CheckToggleState
; Line 1766
  0029c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR _g_bUILessMode
  002a3	85 c0		 test	 eax, eax
  002a5	74 49		 je	 SHORT $LN1@ImeUi_Init
; Line 1768
  002a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_hklCurrent
  002ad	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  002b3	0f b7 d1	 movzx	 edx, cx
  002b6	81 e2 ff 03 00
	00		 and	 edx, 1023		; 000003ffH
  002bc	0f b7 c2	 movzx	 eax, dx
  002bf	83 f8 04	 cmp	 eax, 4
  002c2	75 12		 jne	 SHORT $LN13@ImeUi_Init
  002c4	e8 00 00 00 00	 call	 ?CurrentInputLocaleIsIme@CTsfUiLessMode@@SAHXZ ; CTsfUiLessMode::CurrentInputLocaleIsIme
  002c9	85 c0		 test	 eax, eax
  002cb	74 09		 je	 SHORT $LN13@ImeUi_Init
  002cd	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv149[ebp], 1
  002d4	eb 07		 jmp	 SHORT $LN14@ImeUi_Init
$LN13@ImeUi_Init:
  002d6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$LN14@ImeUi_Init:
  002dd	8a 4d f4	 mov	 cl, BYTE PTR tv149[ebp]
  002e0	88 0d 00 00 00
	00		 mov	 BYTE PTR _g_bChineseIME, cl
; Line 1769
  002e6	6a 00		 push	 0
  002e8	e8 00 00 00 00	 call	 ?UpdateImeState@CTsfUiLessMode@@SAXH@Z ; CTsfUiLessMode::UpdateImeState
  002ed	83 c4 04	 add	 esp, 4
$LN1@ImeUi_Init:
; Line 1771
  002f0	6a 00		 push	 0
  002f2	e8 00 00 00 00	 call	 ?ImeUi_EnableIme@@YAX_N@Z ; ImeUi_EnableIme
  002f7	83 c4 04	 add	 esp, 4
; Line 1773
  002fa	b0 01		 mov	 al, 1
$LN9@ImeUi_Init:
; Line 1774
  002fc	5e		 pop	 esi
  002fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00300	3b ec		 cmp	 ebp, esp
  00302	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00307	8b e5		 mov	 esp, ebp
  00309	5d		 pop	 ebp
  0030a	c3		 ret	 0
?ImeUi_Initialize@@YA_NPAUHWND__@@_N@Z ENDP		; ImeUi_Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 1132
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]
  00009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0000e	e8 00 00 00 00	 call	 _sinf
  00013	83 c4 04	 add	 esp, 4
  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 1052
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]
  00009	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0000e	e8 00 00 00 00	 call	 _cosf
  00013	83 c4 04	 add	 esp, 4
  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _sinf
_TEXT	SEGMENT
tv70 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 764
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 765
  0000b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]
  00010	e8 00 00 00 00	 call	 ___libm_sse2_sinf
  00015	f3 0f 11 45 fc	 movss	 DWORD PTR tv70[ebp], xmm0
  0001a	d9 45 fc	 fld	 DWORD PTR tv70[ebp]
; Line 766
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _cosf
_TEXT	SEGMENT
tv70 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 663
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 664
  0000b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]
  00010	e8 00 00 00 00	 call	 ___libm_sse2_cosf
  00015	f3 0f 11 45 fc	 movss	 DWORD PTR tv70[ebp], xmm0
  0001a	d9 45 fc	 fld	 DWORD PTR tv70[ebp]
; Line 665
  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv70 = -8						; size = 4
tv68 = -4						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT
; File c:\program files (x86)\windows kits\8.1\include\shared\guiddef.h
; Line 160
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 161
  00014	6a 10		 push	 16			; 00000010H
  00016	8b 45 0c	 mov	 eax, DWORD PTR _rguid2$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _rguid1$[ebp]
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 _memcmp
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	89 45 fc	 mov	 DWORD PTR tv68[ebp], eax
  00029	83 7d fc 00	 cmp	 DWORD PTR tv68[ebp], 0
  0002d	75 09		 jne	 SHORT $LN3@IsEqualGUI
  0002f	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00036	eb 07		 jmp	 SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
  00038	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@IsEqualGUI:
  0003f	8b 45 f8	 mov	 eax, DWORD PTR tv70[ebp]
; Line 162
  00042	83 c4 08	 add	 esp, 8
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_IsEqualGUID ENDP
_TEXT	ENDS
END
