; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	D:\Engine Class\Assignment 1\New Scratch\DXUT\Optional\SDKmesh.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_D3DAUTHENTICATEDCONFIGURE_CRYPTOSESSION
PUBLIC	_D3DAUTHENTICATEDCONFIGURE_SHAREDRESOURCE
PUBLIC	_D3DAUTHENTICATEDCONFIGURE_ENCRYPTIONWHENACCESSIBLE
PUBLIC	?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR0
PUBLIC	?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR1
PUBLIC	?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR2
PUBLIC	?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR3
PUBLIC	?g_XMMask3@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMMask3
PUBLIC	?g_XMOne@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOne
PUBLIC	?g_XMZero@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMZero
PUBLIC	_D3DCRYPTOTYPE_AES128_CTR
PUBLIC	_D3DCRYPTOTYPE_PROPRIETARY
PUBLIC	_D3DKEYEXCHANGE_RSAES_OAEP
PUBLIC	_D3DKEYEXCHANGE_DXVA
PUBLIC	?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMEpsilon
PUBLIC	?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMInfinity
PUBLIC	?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMQNaN
PUBLIC	_IID_IDirect3D9
PUBLIC	_IID_IDirect3DDevice9
PUBLIC	_IID_IDirect3DResource9
PUBLIC	_IID_IDirect3DBaseTexture9
PUBLIC	_IID_IDirect3DTexture9
PUBLIC	_IID_IDirect3DCubeTexture9
PUBLIC	_IID_IDirect3DVolumeTexture9
PUBLIC	_IID_IDirect3DVertexBuffer9
PUBLIC	_IID_IDirect3DIndexBuffer9
PUBLIC	_IID_IDirect3DSurface9
PUBLIC	_IID_IDirect3DVolume9
PUBLIC	_IID_IDirect3DSwapChain9
PUBLIC	_IID_IDirect3DVertexDeclaration9
PUBLIC	_IID_IDirect3DVertexShader9
PUBLIC	_IID_IDirect3DPixelShader9
PUBLIC	_IID_IDirect3DStateBlock9
PUBLIC	_IID_IDirect3DQuery9
PUBLIC	_IID_HelperName
PUBLIC	_IID_IDirect3D9Ex
PUBLIC	_IID_IDirect3DDevice9Ex
PUBLIC	_IID_IDirect3DSwapChain9Ex
PUBLIC	_IID_IDirect3D9ExOverlayExtension
PUBLIC	_IID_IDirect3DDevice9Video
PUBLIC	_IID_IDirect3DAuthenticatedChannel9
PUBLIC	_IID_IDirect3DCryptoSession9
PUBLIC	_D3DAUTHENTICATEDQUERY_PROTECTION
PUBLIC	_D3DAUTHENTICATEDQUERY_CHANNELTYPE
PUBLIC	_D3DAUTHENTICATEDQUERY_DEVICEHANDLE
PUBLIC	_D3DAUTHENTICATEDQUERY_CRYPTOSESSION
PUBLIC	_D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESSCOUNT
PUBLIC	_D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESS
PUBLIC	_D3DAUTHENTICATEDQUERY_UNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT
PUBLIC	_D3DAUTHENTICATEDQUERY_OUTPUTIDCOUNT
PUBLIC	_D3DAUTHENTICATEDQUERY_OUTPUTID
PUBLIC	_D3DAUTHENTICATEDQUERY_ACCESSIBILITYATTRIBUTES
PUBLIC	_D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUIDCOUNT
PUBLIC	_D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUID
PUBLIC	_D3DAUTHENTICATEDQUERY_CURRENTENCRYPTIONWHENACCESSIBLE
PUBLIC	_WKPDID_D3DDebugObjectName
PUBLIC	_D3DAUTHENTICATEDCONFIGURE_INITIALIZE
PUBLIC	_D3DAUTHENTICATEDCONFIGURE_PROTECTION
;	COMDAT _D3DAUTHENTICATEDCONFIGURE_PROTECTION
CONST	SEGMENT
_D3DAUTHENTICATEDCONFIGURE_PROTECTION DD 050455658H
	DW	03f47H
	DW	04362H
	DB	0bfH
	DB	099H
	DB	0bfH
	DB	0dfH
	DB	0cdH
	DB	0e9H
	DB	0edH
	DB	029H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDCONFIGURE_INITIALIZE
CONST	SEGMENT
_D3DAUTHENTICATEDCONFIGURE_INITIALIZE DD 06114bdbH
	DW	03523H
	DW	0470aH
	DB	08dH
	DB	0caH
	DB	0fbH
	DB	0c2H
	DB	084H
	DB	051H
	DB	054H
	DB	0f0H
CONST	ENDS
;	COMDAT _WKPDID_D3DDebugObjectName
CONST	SEGMENT
_WKPDID_D3DDebugObjectName DD 0429b8c22H
	DW	09188H
	DW	04b0cH
	DB	087H
	DB	042H
	DB	0acH
	DB	0b0H
	DB	0bfH
	DB	085H
	DB	0c2H
	DB	00H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_CURRENTENCRYPTIONWHENACCESSIBLE
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_CURRENTENCRYPTIONWHENACCESSIBLE DD 0ec1791c7H
	DW	0dad3H
	DW	04f15H
	DB	09eH
	DB	0c3H
	DB	0faH
	DB	0a9H
	DB	03dH
	DB	060H
	DB	0d4H
	DB	0f0H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUID
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUID DD 0f83a5958H
	DW	0e986H
	DW	04bdaH
	DB	0beH
	DB	0b0H
	DB	041H
	DB	01fH
	DB	06aH
	DB	07aH
	DB	01H
	DB	0b7H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUIDCOUNT
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_ENCRYPTIONWHENACCESSIBLEGUIDCOUNT DD 0b30f7066H
	DW	0203cH
	DW	04b07H
	DB	093H
	DB	0fcH
	DB	0ceH
	DB	0aaH
	DB	0fdH
	DB	061H
	DB	024H
	DB	01eH
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_ACCESSIBILITYATTRIBUTES
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_ACCESSIBILITYATTRIBUTES DD 06214d9d2H
	DW	0432cH
	DW	04abbH
	DB	09fH
	DB	0ceH
	DB	021H
	DB	06eH
	DB	0eaH
	DB	026H
	DB	09eH
	DB	03bH
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_OUTPUTID
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_OUTPUTID DD 0839ddca3H
	DW	09b4eH
	DW	041e4H
	DB	0b0H
	DB	053H
	DB	089H
	DB	02bH
	DB	0d2H
	DB	0a1H
	DB	01eH
	DB	0e7H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_OUTPUTIDCOUNT
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_OUTPUTIDCOUNT DD 02c042b5eH
	DW	08c07H
	DW	046d5H
	DB	0aaH
	DB	0beH
	DB	08fH
	DB	075H
	DB	0cbH
	DB	0adH
	DB	04cH
	DB	031H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_UNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_UNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT DD 012f0bd6H
	DW	0e662H
	DW	04474H
	DB	0beH
	DB	0fdH
	DB	0aaH
	DB	053H
	DB	0e5H
	DB	014H
	DB	03cH
	DB	06dH
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESS
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESS DD 0649bbadbH
	DW	0f0f4H
	DW	04639H
	DB	0a1H
	DB	05bH
	DB	024H
	DB	039H
	DB	03fH
	DB	0c3H
	DB	0abH
	DB	0acH
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESSCOUNT
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_RESTRICTEDSHAREDRESOURCEPROCESSCOUNT DD 0db207b3H
	DW	09450H
	DW	046a6H
	DB	082H
	DB	0deH
	DB	01bH
	DB	096H
	DB	0d4H
	DB	04fH
	DB	09cH
	DB	0f2H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_CRYPTOSESSION
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_CRYPTOSESSION DD 02634499eH
	DW	0d018H
	DW	04d74H
	DB	0acH
	DB	017H
	DB	07fH
	DB	072H
	DB	040H
	DB	059H
	DB	052H
	DB	08dH
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_DEVICEHANDLE
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_DEVICEHANDLE DD 0ec1c539dH
	DW	08cffH
	DW	04e2aH
	DB	0bcH
	DB	0c4H
	DB	0f5H
	DB	069H
	DB	02fH
	DB	099H
	DB	0f4H
	DB	080H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_CHANNELTYPE
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_CHANNELTYPE DD 0bc1b18a5H
	DW	0b1fbH
	DW	042abH
	DB	0bdH
	DB	094H
	DB	0b5H
	DB	082H
	DB	08bH
	DB	04bH
	DB	0f7H
	DB	0beH
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDQUERY_PROTECTION
CONST	SEGMENT
_D3DAUTHENTICATEDQUERY_PROTECTION DD 0a84eb584H
	DW	0c495H
	DW	048aaH
	DB	0b9H
	DB	04dH
	DB	08bH
	DB	0d2H
	DB	0d6H
	DB	0fbH
	DB	0ceH
	DB	05H
CONST	ENDS
;	COMDAT _IID_IDirect3DCryptoSession9
CONST	SEGMENT
_IID_IDirect3DCryptoSession9 DD 0fa0ab799H
	DW	07a9cH
	DW	048caH
	DB	08cH
	DB	05bH
	DB	023H
	DB	07eH
	DB	071H
	DB	0a5H
	DB	044H
	DB	034H
CONST	ENDS
;	COMDAT _IID_IDirect3DAuthenticatedChannel9
CONST	SEGMENT
_IID_IDirect3DAuthenticatedChannel9 DD 0ff24beeeH
	DW	0da21H
	DW	04bebH
	DB	098H
	DB	0b5H
	DB	0d2H
	DB	0f8H
	DB	099H
	DB	0f9H
	DB	08aH
	DB	0f9H
CONST	ENDS
;	COMDAT _IID_IDirect3DDevice9Video
CONST	SEGMENT
_IID_IDirect3DDevice9Video DD 026dc4561H
	DW	0a1eeH
	DW	04ae7H
	DB	096H
	DB	0daH
	DB	011H
	DB	08aH
	DB	036H
	DB	0c0H
	DB	0ecH
	DB	095H
CONST	ENDS
;	COMDAT _IID_IDirect3D9ExOverlayExtension
CONST	SEGMENT
_IID_IDirect3D9ExOverlayExtension DD 0187aeb13H
	DW	0aaf5H
	DW	04c59H
	DB	087H
	DB	06dH
	DB	0e0H
	DB	059H
	DB	08H
	DB	08cH
	DB	0dH
	DB	0f8H
CONST	ENDS
;	COMDAT _IID_IDirect3DSwapChain9Ex
CONST	SEGMENT
_IID_IDirect3DSwapChain9Ex DD 091886cafH
	DW	01c3dH
	DW	04d2eH
	DB	0a0H
	DB	0abH
	DB	03eH
	DB	04cH
	DB	07dH
	DB	08dH
	DB	033H
	DB	03H
CONST	ENDS
;	COMDAT _IID_IDirect3DDevice9Ex
CONST	SEGMENT
_IID_IDirect3DDevice9Ex DD 0b18b10ceH
	DW	02649H
	DW	0405aH
	DB	087H
	DB	0fH
	DB	095H
	DB	0f7H
	DB	077H
	DB	0d4H
	DB	031H
	DB	03aH
CONST	ENDS
;	COMDAT _IID_IDirect3D9Ex
CONST	SEGMENT
_IID_IDirect3D9Ex DD 02177241H
	DW	069fcH
	DW	0400cH
	DB	08fH
	DB	0f1H
	DB	093H
	DB	0a4H
	DB	04dH
	DB	0f6H
	DB	086H
	DB	01dH
CONST	ENDS
;	COMDAT _IID_HelperName
CONST	SEGMENT
_IID_HelperName DD 0e4a36723H
	DW	0fdfeH
	DW	04b22H
	DB	0b1H
	DB	046H
	DB	03cH
	DB	04H
	DB	0c0H
	DB	07fH
	DB	04cH
	DB	0c8H
CONST	ENDS
;	COMDAT _IID_IDirect3DQuery9
CONST	SEGMENT
_IID_IDirect3DQuery9 DD 0d9771460H
	DW	0a695H
	DW	04f26H
	DB	0bbH
	DB	0d3H
	DB	027H
	DB	0b8H
	DB	040H
	DB	0b5H
	DB	041H
	DB	0ccH
CONST	ENDS
;	COMDAT _IID_IDirect3DStateBlock9
CONST	SEGMENT
_IID_IDirect3DStateBlock9 DD 0b07c4fe5H
	DW	0310dH
	DW	04ba8H
	DB	0a2H
	DB	03cH
	DB	04fH
	DB	0fH
	DB	020H
	DB	06fH
	DB	021H
	DB	08bH
CONST	ENDS
;	COMDAT _IID_IDirect3DPixelShader9
CONST	SEGMENT
_IID_IDirect3DPixelShader9 DD 06d3bdbdcH
	DW	05b02H
	DW	04415H
	DB	0b8H
	DB	052H
	DB	0ceH
	DB	05eH
	DB	08bH
	DB	0ccH
	DB	0b2H
	DB	089H
CONST	ENDS
;	COMDAT _IID_IDirect3DVertexShader9
CONST	SEGMENT
_IID_IDirect3DVertexShader9 DD 0efc5557eH
	DW	06265H
	DW	04613H
	DB	08aH
	DB	094H
	DB	043H
	DB	085H
	DB	078H
	DB	089H
	DB	0ebH
	DB	036H
CONST	ENDS
;	COMDAT _IID_IDirect3DVertexDeclaration9
CONST	SEGMENT
_IID_IDirect3DVertexDeclaration9 DD 0dd13c59cH
	DW	036faH
	DW	04098H
	DB	0a8H
	DB	0fbH
	DB	0c7H
	DB	0edH
	DB	039H
	DB	0dcH
	DB	085H
	DB	046H
CONST	ENDS
;	COMDAT _IID_IDirect3DSwapChain9
CONST	SEGMENT
_IID_IDirect3DSwapChain9 DD 0794950f2H
	DW	0adfcH
	DW	0458aH
	DB	090H
	DB	05eH
	DB	010H
	DB	0a1H
	DB	0bH
	DB	0bH
	DB	050H
	DB	03bH
CONST	ENDS
;	COMDAT _IID_IDirect3DVolume9
CONST	SEGMENT
_IID_IDirect3DVolume9 DD 024f416e6H
	DW	01f67H
	DW	04aa7H
	DB	0b8H
	DB	08eH
	DB	0d3H
	DB	03fH
	DB	06fH
	DB	031H
	DB	028H
	DB	0a1H
CONST	ENDS
;	COMDAT _IID_IDirect3DSurface9
CONST	SEGMENT
_IID_IDirect3DSurface9 DD 0cfbaf3aH
	DW	09ff6H
	DW	0429aH
	DB	099H
	DB	0b3H
	DB	0a2H
	DB	079H
	DB	06aH
	DB	0f8H
	DB	0b8H
	DB	09bH
CONST	ENDS
;	COMDAT _IID_IDirect3DIndexBuffer9
CONST	SEGMENT
_IID_IDirect3DIndexBuffer9 DD 07c9dd65eH
	DW	0d3f7H
	DW	04529H
	DB	0acH
	DB	0eeH
	DB	078H
	DB	058H
	DB	030H
	DB	0acH
	DB	0deH
	DB	035H
CONST	ENDS
;	COMDAT _IID_IDirect3DVertexBuffer9
CONST	SEGMENT
_IID_IDirect3DVertexBuffer9 DD 0b64bb1b5H
	DW	0fd70H
	DW	04df6H
	DB	0bfH
	DB	091H
	DB	019H
	DB	0d0H
	DB	0a1H
	DB	024H
	DB	055H
	DB	0e3H
CONST	ENDS
;	COMDAT _IID_IDirect3DVolumeTexture9
CONST	SEGMENT
_IID_IDirect3DVolumeTexture9 DD 02518526cH
	DW	0e789H
	DW	04111H
	DB	0a7H
	DB	0b9H
	DB	047H
	DB	0efH
	DB	032H
	DB	08dH
	DB	013H
	DB	0e6H
CONST	ENDS
;	COMDAT _IID_IDirect3DCubeTexture9
CONST	SEGMENT
_IID_IDirect3DCubeTexture9 DD 0fff32f81H
	DW	0d953H
	DW	0473aH
	DB	092H
	DB	023H
	DB	093H
	DB	0d6H
	DB	052H
	DB	0abH
	DB	0a9H
	DB	03fH
CONST	ENDS
;	COMDAT _IID_IDirect3DTexture9
CONST	SEGMENT
_IID_IDirect3DTexture9 DD 085c31227H
	DW	03de5H
	DW	04f00H
	DB	09bH
	DB	03aH
	DB	0f1H
	DB	01aH
	DB	0c3H
	DB	08cH
	DB	018H
	DB	0b5H
CONST	ENDS
;	COMDAT _IID_IDirect3DBaseTexture9
CONST	SEGMENT
_IID_IDirect3DBaseTexture9 DD 0580ca87eH
	DW	01d3cH
	DW	04d54H
	DB	099H
	DB	01dH
	DB	0b7H
	DB	0d3H
	DB	0e3H
	DB	0c2H
	DB	098H
	DB	0ceH
CONST	ENDS
;	COMDAT _IID_IDirect3DResource9
CONST	SEGMENT
_IID_IDirect3DResource9 DD 05eec05dH
	DW	08f7dH
	DW	04362H
	DB	0b9H
	DB	099H
	DB	0d1H
	DB	0baH
	DB	0f3H
	DB	057H
	DB	0c7H
	DB	04H
CONST	ENDS
;	COMDAT _IID_IDirect3DDevice9
CONST	SEGMENT
_IID_IDirect3DDevice9 DD 0d0223b96H
	DW	0bf7aH
	DW	043fdH
	DB	092H
	DB	0bdH
	DB	0a4H
	DB	03bH
	DB	0dH
	DB	082H
	DB	0b9H
	DB	0ebH
CONST	ENDS
;	COMDAT _IID_IDirect3D9
CONST	SEGMENT
_IID_IDirect3D9 DD 081bdcbcaH
	DW	064d4H
	DW	0426dH
	DB	0aeH
	DB	08dH
	DB	0adH
	DB	01H
	DB	047H
	DB	0f4H
	DB	027H
	DB	05cH
CONST	ENDS
CONST	SEGMENT
$SG154787 DB	'%s%s', 00H
	ORG $+3
$SG154792 DB	'%s%s', 00H
	ORG $+3
$SG154797 DB	'%s%s', 00H
	ORG $+3
$SG154817 DB	'CDXUTSDKMesh', 00H
	ORG $+3
$SG154834 DB	'CDXUTSDKMesh', 00H
	ORG $+3
$SG154847 DB	'D', 00H, 'X', 00H, 'U', 00H, 'T', 00H, 'F', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'D', 00H, 'X', 00H, 'S', 00H, 'D', 00H, 'K'
	DB	00H, 'M', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 'F', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, 'C', 00H, 'c', 00H, 'h', 00H, '('
	DB	00H, ' ', 00H, 'm', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 'W', 00H, ',', 00H, ' '
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H
	DB	'(', 00H, ' ', 00H, 'm', 00H, '_', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'P', 00H, 'a', 00H, 't', 00H, 'h', 00H, 'W', 00H, ' ', 00H
	DB	')', 00H, ' ', 00H, '/', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, ' ', 00H, 'W', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, ' ', 00H, ')', 00H, ','
	DB	00H, ' ', 00H, 's', 00H, 'z', 00H, 'F', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, ')'
	DB	00H, 00H, 00H
$SG154848 DB	'SDKmesh.cpp', 00H
$SG154992 DB	'S', 00H, 'D', 00H, 'K', 00H, 'm', 00H, 'e', 00H, 's', 00H
	DB	'h', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG154993 DB	'P', 00H, 'r', 00H, 'i', 00H, 'm', 00H, 'T', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'D'
	DB	00H, '3', 00H, 'D', 00H, '1', 00H, '1', 00H, '_', 00H, 'P', 00H
	DB	'R', 00H, 'I', 00H, 'M', 00H, 'I', 00H, 'T', 00H, 'I', 00H, 'V'
	DB	00H, 'E', 00H, '_', 00H, 'T', 00H, 'O', 00H, 'P', 00H, 'O', 00H
	DB	'L', 00H, 'O', 00H, 'G', 00H, 'Y', 00H, '_', 00H, 'T', 00H, 'R'
	DB	00H, 'I', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'L', 00H, 'E', 00H
	DB	'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, 00H, 00H
$SG155005 DB	'S', 00H, 'D', 00H, 'K', 00H, 'm', 00H, 'e', 00H, 's', 00H
	DB	'h', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG155006 DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'd', 00H, 'e', 00H
	DB	' ', 00H, '%', 00H, ' ', 00H, '4', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+4
$SG155239 DB	'D', 00H, 'X', 00H, 'U', 00H, 'T', 00H, 'F', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'D', 00H, 'X', 00H, 'S', 00H, 'D', 00H, 'K'
	DB	00H, 'M', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 'a', 00H, 'F', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, 'C', 00H, 'c', 00H, 'h', 00H, '('
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'P', 00H, 'a', 00H
	DB	't', 00H, 'h', 00H, ',', 00H, ' ', 00H, 'M', 00H, 'A', 00H, 'X'
	DB	00H, '_', 00H, 'P', 00H, 'A', 00H, 'T', 00H, 'H', 00H, ',', 00H
	DB	' ', 00H, 's', 00H, 'z', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e'
	DB	00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, ')', 00H
	DB	00H, 00H
	ORG $+2
$SG155240 DB	'SDKmesh.cpp', 00H
$SG155481 DB	'S', 00H, 'D', 00H, 'K', 00H, 'm', 00H, 'e', 00H, 's', 00H
	DB	'h', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG155482 DB	'i', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, 'm', 00H, '_', 00H, 'p', 00H, 'M'
	DB	00H, 'e', 00H, 's', 00H, 'h', 00H, 'H', 00H, 'e', 00H, 'a', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'N', 00H, 'u'
	DB	00H, 'm', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	's', 00H, 00H, 00H
CONST	ENDS
;	COMDAT ?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B DD 07fc00000H	; DirectX::g_XMQNaN
	DD	07fc00000H
	DD	07fc00000H
	DD	07fc00000H
CONST	ENDS
;	COMDAT ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B DD 07f800000H	; DirectX::g_XMInfinity
	DD	07f800000H
	DD	07f800000H
	DD	07f800000H
CONST	ENDS
;	COMDAT ?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B DD 034000000r ; 1.19209e-007 ; DirectX::g_XMEpsilon
	DD	034000000r			; 1.19209e-007
	DD	034000000r			; 1.19209e-007
	DD	034000000r			; 1.19209e-007
CONST	ENDS
;	COMDAT _D3DKEYEXCHANGE_DXVA
CONST	SEGMENT
_D3DKEYEXCHANGE_DXVA DD 043d3775cH
	DW	038e5H
	DW	04924H
	DB	08dH
	DB	086H
	DB	0d3H
	DB	0fcH
	DB	0cfH
	DB	015H
	DB	03eH
	DB	09bH
CONST	ENDS
;	COMDAT _D3DKEYEXCHANGE_RSAES_OAEP
CONST	SEGMENT
_D3DKEYEXCHANGE_RSAES_OAEP DD 0c1949895H
	DW	0d72aH
	DW	04a1dH
	DB	08eH
	DB	05dH
	DB	0edH
	DB	085H
	DB	07dH
	DB	017H
	DB	015H
	DB	020H
CONST	ENDS
;	COMDAT _D3DCRYPTOTYPE_PROPRIETARY
CONST	SEGMENT
_D3DCRYPTOTYPE_PROPRIETARY DD 0ab4e9afdH
	DW	01d1cH
	DW	046e6H
	DB	0a7H
	DB	02fH
	DB	08H
	DB	069H
	DB	091H
	DB	07bH
	DB	0dH
	DB	0e8H
CONST	ENDS
;	COMDAT _D3DCRYPTOTYPE_AES128_CTR
CONST	SEGMENT
_D3DCRYPTOTYPE_AES128_CTR DD 09b6bd711H
	DW	04f74H
	DW	041c9H
	DB	09eH
	DB	07bH
	DB	0bH
	DB	0e2H
	DB	0d7H
	DB	0d9H
	DB	03bH
	DB	04fH
CONST	ENDS
;	COMDAT ?g_XMZero@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMZero@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0	; DirectX::g_XMZero
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMOne@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOne@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1	; DirectX::g_XMOne
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMask3@DirectX@@3UXMVECTORI32@1@B DD 0ffffffffH	; DirectX::g_XMMask3
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR3
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR2
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMIdentityR0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDCONFIGURE_ENCRYPTIONWHENACCESSIBLE
CONST	SEGMENT
_D3DAUTHENTICATEDCONFIGURE_ENCRYPTIONWHENACCESSIBLE DD 041fff286H
	DW	06ae0H
	DW	04d43H
	DB	09dH
	DB	055H
	DB	0a4H
	DB	06eH
	DB	09eH
	DB	0fdH
	DB	015H
	DB	08aH
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDCONFIGURE_SHAREDRESOURCE
CONST	SEGMENT
_D3DAUTHENTICATEDCONFIGURE_SHAREDRESOURCE DD 0772d047H
	DW	01b40H
	DW	048e8H
	DB	09cH
	DB	0a6H
	DB	0b5H
	DB	0f5H
	DB	010H
	DB	0deH
	DB	09fH
	DB	01H
CONST	ENDS
;	COMDAT _D3DAUTHENTICATEDCONFIGURE_CRYPTOSESSION
CONST	SEGMENT
_D3DAUTHENTICATEDCONFIGURE_CRYPTOSESSION DD 06346cc54H
	DW	02cfcH
	DW	04ad4H
	DB	082H
	DB	024H
	DB	0d1H
	DB	058H
	DB	037H
	DB	0deH
	DB	077H
	DB	00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?wcsrchr@@YAPA_WPA_W_W@Z			; wcsrchr
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ	; DirectX::XMVECTORF32::operator __m128
PUBLIC	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ	; DirectX::XMVECTORI32::operator __m128
PUBLIC	??0XMMATRIX@DirectX@@QAE@XZ			; DirectX::XMMATRIX::XMMATRIX
PUBLIC	??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z		; DirectX::XMMATRIX::operator=
PUBLIC	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z		; DirectX::XMMATRIX::operator*
PUBLIC	??0XMFLOAT3@DirectX@@QAE@XZ			; DirectX::XMFLOAT3::XMFLOAT3
PUBLIC	??0XMFLOAT3@DirectX@@QAE@MMM@Z			; DirectX::XMFLOAT3::XMFLOAT3
PUBLIC	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z		; DirectX::XMFLOAT3::operator=
PUBLIC	??0XMFLOAT4X4@DirectX@@QAE@XZ			; DirectX::XMFLOAT4X4::XMFLOAT4X4
PUBLIC	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
PUBLIC	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
PUBLIC	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
PUBLIC	?XMVectorZero@DirectX@@YQ?AT__m128@@XZ		; DirectX::XMVectorZero
PUBLIC	?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z	; DirectX::XMVectorSet
PUBLIC	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z	; DirectX::XMVectorSelect
PUBLIC	?XMVectorLessOrEqual@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorLessOrEqual
PUBLIC	?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVectorDivide
PUBLIC	?XMVector4Equal@DirectX@@YQ_NT__m128@@0@Z	; DirectX::XMVector4Equal
PUBLIC	?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVector4Dot
PUBLIC	?XMVector4LengthSq@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVector4LengthSq
PUBLIC	?XMVector4Normalize@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVector4Normalize
PUBLIC	?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
PUBLIC	?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z ; DirectX::XMMatrixTranspose
PUBLIC	?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
PUBLIC	?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
PUBLIC	?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationQuaternion
PUBLIC	?XMQuaternionNormalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionNormalize
PUBLIC	?XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionConjugate
PUBLIC	?XMQuaternionInverse@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionInverse
PUBLIC	?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ	; DirectX::XMQuaternionIdentity
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	?DXUT_SetDebugName@@YAXPAUID3D11DeviceChild@@PBD@Z ; DXUT_SetDebugName
PUBLIC	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	??0?$allocator@PAE@std@@QAE@XZ			; std::allocator<unsigned char *>::allocator<unsigned char *>
PUBLIC	?deallocate@?$allocator@PAE@std@@QAEXPAPAEI@Z	; std::allocator<unsigned char *>::deallocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<unsigned char *> >::_Wrap_alloc<std::allocator<unsigned char *> >
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAEXPAPAEI@Z ; std::_Wrap_alloc<std::allocator<unsigned char *> >::deallocate
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<unsigned char *> >::_Vector_val<std::_Simple_types<unsigned char *> >
PUBLIC	??1?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<unsigned char *> >::~_Vector_val<std::_Simple_types<unsigned char *> >
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >
PUBLIC	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::~_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Free_proxy
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAE@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
PUBLIC	??0?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::vector<unsigned char *,std::allocator<unsigned char *> >
PUBLIC	??1?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::~vector<unsigned char *,std::allocator<unsigned char *> >
PUBLIC	?_Destroy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXPAPAE0@Z ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Destroy
PUBLIC	?_Tidy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXXZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Tidy
PUBLIC	?LoadMaterials@CDXUTSDKMesh@@IAEXPAUID3D11Device@@PAUSDKMESH_MATERIAL@@IPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::LoadMaterials
PUBLIC	?CreateVertexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_VERTEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::CreateVertexBuffer
PUBLIC	?CreateIndexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_INDEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::CreateIndexBuffer
PUBLIC	?CreateFromFile@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::CreateFromFile
PUBLIC	?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::CreateFromMemory
PUBLIC	?TransformBindPoseFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@@Z ; CDXUTSDKMesh::TransformBindPoseFrame
PUBLIC	?TransformFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@N@Z ; CDXUTSDKMesh::TransformFrame
PUBLIC	?TransformFrameAbsolute@CDXUTSDKMesh@@IAEXIN@Z	; CDXUTSDKMesh::TransformFrameAbsolute
PUBLIC	?RenderMesh@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderMesh
PUBLIC	?RenderFrame@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderFrame
PUBLIC	??0CDXUTSDKMesh@@QAE@XZ				; CDXUTSDKMesh::CDXUTSDKMesh
PUBLIC	??1CDXUTSDKMesh@@UAE@XZ				; CDXUTSDKMesh::~CDXUTSDKMesh
PUBLIC	?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::Create
PUBLIC	?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::Create
PUBLIC	?LoadAnimation@CDXUTSDKMesh@@UAEJPB_W@Z		; CDXUTSDKMesh::LoadAnimation
PUBLIC	?Destroy@CDXUTSDKMesh@@UAEXXZ			; CDXUTSDKMesh::Destroy
PUBLIC	?TransformMesh@CDXUTSDKMesh@@QAEXABUXMMATRIX@DirectX@@N@Z ; CDXUTSDKMesh::TransformMesh
PUBLIC	?Render@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::Render
PUBLIC	?RenderAdjacent@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderAdjacent
PUBLIC	?GetPrimitiveType11@CDXUTSDKMesh@@SA?AW4D3D_PRIMITIVE_TOPOLOGY@@W4SDKMESH_PRIMITIVE_TYPE@@@Z ; CDXUTSDKMesh::GetPrimitiveType11
PUBLIC	?GetIBFormat11@CDXUTSDKMesh@@QBE?AW4DXGI_FORMAT@@I@Z ; CDXUTSDKMesh::GetIBFormat11
PUBLIC	?GetVB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@II@Z	; CDXUTSDKMesh::GetVB11
PUBLIC	?GetIB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z	; CDXUTSDKMesh::GetIB11
PUBLIC	?GetIndexType@CDXUTSDKMesh@@QBE?AW4SDKMESH_INDEX_TYPE@@I@Z ; CDXUTSDKMesh::GetIndexType
PUBLIC	?GetAdjIB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z ; CDXUTSDKMesh::GetAdjIB11
PUBLIC	?GetMeshPathA@CDXUTSDKMesh@@QBEPBDXZ		; CDXUTSDKMesh::GetMeshPathA
PUBLIC	?GetMeshPathW@CDXUTSDKMesh@@QBEPB_WXZ		; CDXUTSDKMesh::GetMeshPathW
PUBLIC	?GetNumMeshes@CDXUTSDKMesh@@QBEIXZ		; CDXUTSDKMesh::GetNumMeshes
PUBLIC	?GetNumMaterials@CDXUTSDKMesh@@QBEIXZ		; CDXUTSDKMesh::GetNumMaterials
PUBLIC	?GetNumVBs@CDXUTSDKMesh@@QBEIXZ			; CDXUTSDKMesh::GetNumVBs
PUBLIC	?GetNumIBs@CDXUTSDKMesh@@QBEIXZ			; CDXUTSDKMesh::GetNumIBs
PUBLIC	?GetVB11At@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z ; CDXUTSDKMesh::GetVB11At
PUBLIC	?GetIB11At@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z ; CDXUTSDKMesh::GetIB11At
PUBLIC	?GetRawVerticesAt@CDXUTSDKMesh@@QBEPAEI@Z	; CDXUTSDKMesh::GetRawVerticesAt
PUBLIC	?GetRawIndicesAt@CDXUTSDKMesh@@QBEPAEI@Z	; CDXUTSDKMesh::GetRawIndicesAt
PUBLIC	?GetMaterial@CDXUTSDKMesh@@QBEPAUSDKMESH_MATERIAL@@I@Z ; CDXUTSDKMesh::GetMaterial
PUBLIC	?GetMesh@CDXUTSDKMesh@@QBEPAUSDKMESH_MESH@@I@Z	; CDXUTSDKMesh::GetMesh
PUBLIC	?GetNumSubsets@CDXUTSDKMesh@@QBEII@Z		; CDXUTSDKMesh::GetNumSubsets
PUBLIC	?GetSubset@CDXUTSDKMesh@@QBEPAUSDKMESH_SUBSET@@II@Z ; CDXUTSDKMesh::GetSubset
PUBLIC	?GetVertexStride@CDXUTSDKMesh@@QBEIII@Z		; CDXUTSDKMesh::GetVertexStride
PUBLIC	?GetNumFrames@CDXUTSDKMesh@@QBEIXZ		; CDXUTSDKMesh::GetNumFrames
PUBLIC	?GetFrame@CDXUTSDKMesh@@QBEPAUSDKMESH_FRAME@@I@Z ; CDXUTSDKMesh::GetFrame
PUBLIC	?FindFrame@CDXUTSDKMesh@@QBEPAUSDKMESH_FRAME@@PBD@Z ; CDXUTSDKMesh::FindFrame
PUBLIC	?GetNumVertices@CDXUTSDKMesh@@QBE_KII@Z		; CDXUTSDKMesh::GetNumVertices
PUBLIC	?GetNumIndices@CDXUTSDKMesh@@QBE_KI@Z		; CDXUTSDKMesh::GetNumIndices
PUBLIC	?GetMeshBBoxCenter@CDXUTSDKMesh@@QBE?AT__m128@@I@Z ; CDXUTSDKMesh::GetMeshBBoxCenter
PUBLIC	?GetMeshBBoxExtents@CDXUTSDKMesh@@QBE?AT__m128@@I@Z ; CDXUTSDKMesh::GetMeshBBoxExtents
PUBLIC	?GetOutstandingResources@CDXUTSDKMesh@@QBEIXZ	; CDXUTSDKMesh::GetOutstandingResources
PUBLIC	?GetOutstandingBufferResources@CDXUTSDKMesh@@QBEIXZ ; CDXUTSDKMesh::GetOutstandingBufferResources
PUBLIC	?CheckLoadDone@CDXUTSDKMesh@@QAE_NXZ		; CDXUTSDKMesh::CheckLoadDone
PUBLIC	?IsLoaded@CDXUTSDKMesh@@QBE_NXZ			; CDXUTSDKMesh::IsLoaded
PUBLIC	?IsLoading@CDXUTSDKMesh@@QBE_NXZ		; CDXUTSDKMesh::IsLoading
PUBLIC	?SetLoading@CDXUTSDKMesh@@QAEX_N@Z		; CDXUTSDKMesh::SetLoading
PUBLIC	?HadLoadingError@CDXUTSDKMesh@@QBEHXZ		; CDXUTSDKMesh::HadLoadingError
PUBLIC	?GetNumInfluences@CDXUTSDKMesh@@QBEII@Z		; CDXUTSDKMesh::GetNumInfluences
PUBLIC	?GetMeshInfluenceMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@II@Z ; CDXUTSDKMesh::GetMeshInfluenceMatrix
PUBLIC	?GetAnimationKeyFromTime@CDXUTSDKMesh@@QBEIN@Z	; CDXUTSDKMesh::GetAnimationKeyFromTime
PUBLIC	?GetWorldMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@I@Z ; CDXUTSDKMesh::GetWorldMatrix
PUBLIC	?GetInfluenceMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@I@Z ; CDXUTSDKMesh::GetInfluenceMatrix
PUBLIC	?GetAnimationProperties@CDXUTSDKMesh@@QBE_NPAIPAM@Z ; CDXUTSDKMesh::GetAnimationProperties
PUBLIC	??_GCDXUTSDKMesh@@UAEPAXI@Z			; CDXUTSDKMesh::`scalar deleting destructor'
PUBLIC	??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >
PUBLIC	??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAE0@Z ; std::_Ptr_cat<unsigned char *,unsigned char *>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >
PUBLIC	??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ ; `string'
PUBLIC	??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B ; `DirectX::XMMatrixRotationQuaternion'::`2'::Constant1110
PUBLIC	?NegativeOne3@?1??XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionConjugate'::`2'::NegativeOne3
PUBLIC	??_7CDXUTSDKMesh@@6B@				; CDXUTSDKMesh::`vftable'
PUBLIC	??_R4CDXUTSDKMesh@@6B@				; CDXUTSDKMesh::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDXUTSDKMesh@@@8			; CDXUTSDKMesh `RTTI Type Descriptor'
PUBLIC	??_R3CDXUTSDKMesh@@8				; CDXUTSDKMesh::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDXUTSDKMesh@@8				; CDXUTSDKMesh::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDXUTSDKMesh@@8			; CDXUTSDKMesh::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@7f7fffff
PUBLIC	__real@ff7fffff
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp___stricmp:PROC
EXTRN	__imp__wcsrchr:PROC
EXTRN	__imp__CreateFileW@28:PROC
EXTRN	__imp__GetFileSizeEx@8:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__SetFilePointerEx@20:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	__imp___wassert:PROC
EXTRN	??_U@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new[]
EXTRN	??_V@YAXPAXABUnothrow_t@std@@@Z:PROC		; operator delete[]
EXTRN	__imp__sprintf_s:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp_??0_Container_base12@std@@QAE@XZ:PROC
EXTRN	__imp_??1_Container_base12@std@@QAE@XZ:PROC
EXTRN	__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:PROC
EXTRN	__imp_?_Xbad_alloc@std@@YAXXZ:PROC
EXTRN	?DXUTGetD3D11DeviceContext@@YGPAUID3D11DeviceContext@@XZ:PROC ; DXUTGetD3D11DeviceContext
EXTRN	?DXUTTrace@@YGJPBDKJPB_W_N@Z:PROC		; DXUTTrace
EXTRN	??_ECDXUTSDKMesh@@UAEPAXI@Z:PROC		; CDXUTSDKMesh::`vector deleting destructor'
EXTRN	?CreateTextureFromFile@CDXUTResourceCache@@QAEJPAUID3D11Device@@PAUID3D11DeviceContext@@PBDPAPAUID3D11ShaderResourceView@@_N@Z:PROC ; CDXUTResourceCache::CreateTextureFromFile
EXTRN	?DXUTGetGlobalResourceCache@@YGAAVCDXUTResourceCache@@XZ:PROC ; DXUTGetGlobalResourceCache
EXTRN	?DXUTFindDXSDKMediaFileCch@@YGJPA_WHPB_W@Z:PROC	; DXUTFindDXSDKMediaFileCch
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__allmul:PROC
EXTRN	__dtoui3:PROC
EXTRN	_memcpy:PROC
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@ff7fffff
CONST	SEGMENT
__real@ff7fffff DD 0ff7fffffr			; -3.40282e+038
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CDXUTSDKMesh@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDXUTSDKMesh@@8 DD FLAT:??_R0?AVCDXUTSDKMesh@@@8 ; CDXUTSDKMesh::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDXUTSDKMesh@@8
rdata$r	ENDS
;	COMDAT ??_R2CDXUTSDKMesh@@8
rdata$r	SEGMENT
??_R2CDXUTSDKMesh@@8 DD FLAT:??_R1A@?0A@EA@CDXUTSDKMesh@@8 ; CDXUTSDKMesh::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDXUTSDKMesh@@8
rdata$r	SEGMENT
??_R3CDXUTSDKMesh@@8 DD 00H				; CDXUTSDKMesh::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDXUTSDKMesh@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDXUTSDKMesh@@@8
data$r	SEGMENT
??_R0?AVCDXUTSDKMesh@@@8 DD FLAT:??_7type_info@@6B@	; CDXUTSDKMesh `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDXUTSDKMesh@@', 00H
data$r	ENDS
;	COMDAT ??_R4CDXUTSDKMesh@@6B@
rdata$r	SEGMENT
??_R4CDXUTSDKMesh@@6B@ DD 00H				; CDXUTSDKMesh::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDXUTSDKMesh@@@8
	DD	FLAT:??_R3CDXUTSDKMesh@@8
rdata$r	ENDS
;	COMDAT ??_7CDXUTSDKMesh@@6B@
CONST	SEGMENT
??_7CDXUTSDKMesh@@6B@ DD FLAT:??_R4CDXUTSDKMesh@@6B@	; CDXUTSDKMesh::`vftable'
	DD	FLAT:?CreateFromFile@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z
	DD	FLAT:?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z
	DD	FLAT:??_ECDXUTSDKMesh@@UAEPAXI@Z
	DD	FLAT:?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z
	DD	FLAT:?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z
	DD	FLAT:?LoadAnimation@CDXUTSDKMesh@@UAEJPB_W@Z
	DD	FLAT:?Destroy@CDXUTSDKMesh@@UAEXXZ
	DD	FLAT:?Render@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z
	DD	FLAT:?RenderAdjacent@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z
CONST	ENDS
;	COMDAT ?NegativeOne3@?1??XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?NegativeOne3@?1??XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B DD 0bf800000r ; -1 ; `DirectX::XMQuaternionConjugate'::`2'::NegativeOne3
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B DD 03f800000r ; 1 ; `DirectX::XMMatrixRotationQuaternion'::`2'::Constant1110
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ DB 'p'
	DB	00H, 'D', 00H, 'e', 00H, 's', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ DB 'p', 00H
	DB	'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
CONST	SEGMENT
??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'k', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '8', 00H, '.', 00H, '1', 00H, '\'
	DB	00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H
	DB	'e', 00H, '\', 00H, 'u', 00H, 'm', 00H, '\', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'X', 00H, 'M', 00H
	DB	'a', 00H, 't', 00H, 'h', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'v'
	DB	00H, 'e', 00H, 'r', 00H, 't', 00H, '.', 00H, 'i', 00H, 'n', 00H
	DB	'l', 00H, 00H, 00H				; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??1CDXUTSDKMesh@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDXUTSDKMesh@@UAE@XZ$0
__unwindtable$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z$8
__ehfuncinfo$??1CDXUTSDKMesh@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CDXUTSDKMesh@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z$0
__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 89
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 90
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAE0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAE0@Z PROC ; std::_Ptr_cat<unsigned char *,unsigned char *>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 444
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 446
  0001b	8a 45 fb	 mov	 al, BYTE PTR __Cat$[ebp]
; Line 447
  0001e	52		 push	 edx
  0001f	8b cd		 mov	 ecx, ebp
  00021	50		 push	 eax
  00022	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Ptr_cat
  00028	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0002d	58		 pop	 eax
  0002e	5a		 pop	 edx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
  00033	90		 npad	 1
$LN5@Ptr_cat:
  00034	01 00 00 00	 DD	 1
  00038	00 00 00 00	 DD	 $LN4@Ptr_cat
$LN4@Ptr_cat:
  0003c	fb ff ff ff	 DD	 -5			; fffffffbH
  00040	01 00 00 00	 DD	 1
  00044	00 00 00 00	 DD	 $LN3@Ptr_cat
$LN3@Ptr_cat:
  00048	5f		 DB	 95			; 0000005fH
  00049	43		 DB	 67			; 00000043H
  0004a	61		 DB	 97			; 00000061H
  0004b	74		 DB	 116			; 00000074H
  0004c	00		 DB	 0
??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAE0@Z ENDP ; std::_Ptr_cat<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 95
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 96
  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000e	50		 push	 eax
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00012	51		 push	 ecx
  00013	e8 00 00 00 00	 call	 ??$_Ptr_cat@PAEPAE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAE0@Z ; std::_Ptr_cat<unsigned char *,unsigned char *>
  00018	83 c4 08	 add	 esp, 8
  0001b	88 45 ff	 mov	 BYTE PTR $T1[ebp], al
  0001e	0f b6 55 ff	 movzx	 edx, BYTE PTR $T1[ebp]
  00022	52		 push	 edx
  00023	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >
  00034	83 c4 10	 add	 esp, 16			; 00000010H
; Line 97
  00037	83 c4 04	 add	 esp, 4
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z PROC ; IsErrorResource<ID3D11ShaderResourceView *>, COMDAT
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.h
; Line 45
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 46
  00003	83 7d 08 01	 cmp	 DWORD PTR _data$[ebp], 1
  00007	75 07		 jne	 SHORT $LN1@IsErrorRes
; Line 47
  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	eb 02		 jmp	 SHORT $LN2@IsErrorRes
$LN1@IsErrorRes:
; Line 48
  00010	33 c0		 xor	 eax, eax
$LN2@IsErrorRes:
; Line 49
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ENDP ; IsErrorResource<ID3D11ShaderResourceView *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCDXUTSDKMesh@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDXUTSDKMesh@@UAEPAXI@Z PROC			; CDXUTSDKMesh::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CDXUTSDKMesh@@UAE@XZ	; CDXUTSDKMesh::~CDXUTSDKMesh
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0c		 je	 SHORT $LN1@scalar
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00027	83 c4 04	 add	 esp, 4
$LN1@scalar:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??_GCDXUTSDKMesh@@UAEPAXI@Z ENDP			; CDXUTSDKMesh::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv87 = -16						; size = 8
tv83 = -8						; size = 4
_this$ = -4						; size = 4
_pNumKeys$ = 8						; size = 4
_pFrameTime$ = 12					; size = 4
?GetAnimationProperties@CDXUTSDKMesh@@QBE_NPAIPAM@Z PROC ; CDXUTSDKMesh::GetAnimationProperties
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1303
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1304
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 b8 6c 03 00
	00 00		 cmp	 DWORD PTR [eax+876], 0
  00024	75 1c		 jne	 SHORT $LN1@GetAnimati
; Line 1306
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _pNumKeys$[ebp]
  00029	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; Line 1307
  0002f	8b 55 0c	 mov	 edx, DWORD PTR _pFrameTime$[ebp]
  00032	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@00000000
  0003a	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
; Line 1308
  0003e	32 c0		 xor	 al, al
  00040	eb 53		 jmp	 SHORT $LN2@GetAnimati
$LN1@GetAnimati:
; Line 1311
  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 88 6c 03 00
	00		 mov	 ecx, DWORD PTR [eax+876]
  0004b	8b 55 08	 mov	 edx, DWORD PTR _pNumKeys$[ebp]
  0004e	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00051	89 02		 mov	 DWORD PTR [edx], eax
; Line 1312
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	8b 91 6c 03 00
	00		 mov	 edx, DWORD PTR [ecx+876]
  0005c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0005f	89 45 f8	 mov	 DWORD PTR tv83[ebp], eax
  00062	f2 0f 2a 45 f8	 cvtsi2sd xmm0, DWORD PTR tv83[ebp]
  00067	8b 4d f8	 mov	 ecx, DWORD PTR tv83[ebp]
  0006a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0006d	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00076	f2 0f 11 45 f0	 movsd	 QWORD PTR tv87[ebp], xmm0
  0007b	f2 0f 5a 45 f0	 cvtsd2ss xmm0, QWORD PTR tv87[ebp]
  00080	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00088	f3 0f 5e c8	 divss	 xmm1, xmm0
  0008c	8b 55 0c	 mov	 edx, DWORD PTR _pFrameTime$[ebp]
  0008f	f3 0f 11 0a	 movss	 DWORD PTR [edx], xmm1
; Line 1314
  00093	b0 01		 mov	 al, 1
$LN2@GetAnimati:
; Line 1315
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 08 00	 ret	 8
?GetAnimationProperties@CDXUTSDKMesh@@QBE_NPAIPAM@Z ENDP ; CDXUTSDKMesh::GetAnimationProperties
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -144						; size = 64
$T2 = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_iFrameIndex$ = 12					; size = 4
?GetInfluenceMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@I@Z PROC ; CDXUTSDKMesh::GetInfluenceMatrix
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1280
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 68 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-152]
  00025	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1281
  0003f	8b 4b 0c	 mov	 ecx, DWORD PTR _iFrameIndex$[ebx]
  00042	c1 e1 06	 shl	 ecx, 6
  00045	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	03 88 78 03 00
	00		 add	 ecx, DWORD PTR [eax+888]
  0004e	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  00053	0f 29 5d a0	 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00057	0f 29 55 90	 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  0005b	0f 29 4d 80	 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  0005f	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00066	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0006b	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00071	8d 7d b0	 lea	 edi, DWORD PTR $T2[ebp]
  00074	f3 a5		 rep movsd
  00076	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0007b	8d 75 b0	 lea	 esi, DWORD PTR $T2[ebp]
  0007e	8b 7b 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebx]
  00081	f3 a5		 rep movsd
  00083	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 1282
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008b	33 cd		 xor	 ecx, ebp
  0008d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	8b e3		 mov	 esp, ebx
  00097	5b		 pop	 ebx
  00098	c2 08 00	 ret	 8
?GetInfluenceMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@I@Z ENDP ; CDXUTSDKMesh::GetInfluenceMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -144						; size = 64
$T2 = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_iFrameIndex$ = 12					; size = 4
?GetWorldMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@I@Z PROC ; CDXUTSDKMesh::GetWorldMatrix
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1275
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 68 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-152]
  00025	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1276
  0003f	8b 4b 0c	 mov	 ecx, DWORD PTR _iFrameIndex$[ebx]
  00042	c1 e1 06	 shl	 ecx, 6
  00045	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	03 88 7c 03 00
	00		 add	 ecx, DWORD PTR [eax+892]
  0004e	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  00053	0f 29 5d a0	 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00057	0f 29 55 90	 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  0005b	0f 29 4d 80	 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  0005f	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00066	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0006b	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00071	8d 7d b0	 lea	 edi, DWORD PTR $T2[ebp]
  00074	f3 a5		 rep movsd
  00076	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0007b	8d 75 b0	 lea	 esi, DWORD PTR $T2[ebp]
  0007e	8b 7b 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebx]
  00081	f3 a5		 rep movsd
  00083	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 1277
  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008b	33 cd		 xor	 ecx, ebp
  0008d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	8b e3		 mov	 esp, ebx
  00097	5b		 pop	 ebx
  00098	c2 08 00	 ret	 8
?GetWorldMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@I@Z ENDP ; CDXUTSDKMesh::GetWorldMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv83 = -12						; size = 4
_iTick$ = -8						; size = 4
_this$ = -4						; size = 4
_fTime$ = 8						; size = 8
?GetAnimationKeyFromTime@CDXUTSDKMesh@@QBEIN@Z PROC	; CDXUTSDKMesh::GetAnimationKeyFromTime
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1287
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1288
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 b8 6c 03 00
	00 00		 cmp	 DWORD PTR [eax+876], 0
  00028	75 04		 jne	 SHORT $LN1@GetAnimati
; Line 1290
  0002a	33 c0		 xor	 eax, eax
  0002c	eb 55		 jmp	 SHORT $LN2@GetAnimati
$LN1@GetAnimati:
; Line 1293
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	8b 91 6c 03 00
	00		 mov	 edx, DWORD PTR [ecx+876]
  00037	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0003a	89 45 f4	 mov	 DWORD PTR tv83[ebp], eax
  0003d	f2 0f 2a 45 f4	 cvtsi2sd xmm0, DWORD PTR tv83[ebp]
  00042	8b 4d f4	 mov	 ecx, DWORD PTR tv83[ebp]
  00045	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00048	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00051	f2 0f 59 45 08	 mulsd	 xmm0, QWORD PTR _fTime$[ebp]
  00056	e8 00 00 00 00	 call	 __dtoui3
  0005b	89 45 f8	 mov	 DWORD PTR _iTick$[ebp], eax
; Line 1295
  0005e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 82 6c 03 00
	00		 mov	 eax, DWORD PTR [edx+876]
  00067	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0006a	83 e9 01	 sub	 ecx, 1
  0006d	8b 45 f8	 mov	 eax, DWORD PTR _iTick$[ebp]
  00070	33 d2		 xor	 edx, edx
  00072	f7 f1		 div	 ecx
  00074	89 55 f8	 mov	 DWORD PTR _iTick$[ebp], edx
; Line 1296
  00077	8b 55 f8	 mov	 edx, DWORD PTR _iTick$[ebp]
  0007a	83 c2 01	 add	 edx, 1
  0007d	89 55 f8	 mov	 DWORD PTR _iTick$[ebp], edx
; Line 1298
  00080	8b 45 f8	 mov	 eax, DWORD PTR _iTick$[ebp]
$LN2@GetAnimati:
; Line 1299
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
?GetAnimationKeyFromTime@CDXUTSDKMesh@@QBEIN@Z ENDP	; CDXUTSDKMesh::GetAnimationKeyFromTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -144						; size = 64
$T2 = -80						; size = 64
_iFrame$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_iMesh$ = 12						; size = 4
_iInfluence$ = 16					; size = 4
?GetMeshInfluenceMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@II@Z PROC ; CDXUTSDKMesh::GetMeshInfluenceMatrix
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1269
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 68 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-152]
  00025	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1270
  0003f	69 43 0c e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebx], 224
  00046	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	8b 91 58 03 00
	00		 mov	 edx, DWORD PTR [ecx+856]
  0004f	8b 84 02 d8 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+216]
  00056	8b 4b 10	 mov	 ecx, DWORD PTR _iInfluence$[ebx]
  00059	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  0005c	89 55 f4	 mov	 DWORD PTR _iFrame$[ebp], edx
; Line 1271
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR _iFrame$[ebp]
  00062	c1 e1 06	 shl	 ecx, 6
  00065	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00068	03 88 78 03 00
	00		 add	 ecx, DWORD PTR [eax+888]
  0006e	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  00073	0f 29 5d a0	 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00077	0f 29 55 90	 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  0007b	0f 29 4d 80	 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  0007f	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00086	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0008b	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00091	8d 7d b0	 lea	 edi, DWORD PTR $T2[ebp]
  00094	f3 a5		 rep movsd
  00096	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0009b	8d 75 b0	 lea	 esi, DWORD PTR $T2[ebp]
  0009e	8b 7b 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebx]
  000a1	f3 a5		 rep movsd
  000a3	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 1272
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ab	33 cd		 xor	 ecx, ebp
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	8b e3		 mov	 esp, ebx
  000b7	5b		 pop	 ebx
  000b8	c2 0c 00	 ret	 12			; 0000000cH
?GetMeshInfluenceMatrix@CDXUTSDKMesh@@QBE?AUXMMATRIX@DirectX@@II@Z ENDP ; CDXUTSDKMesh::GetMeshInfluenceMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetNumInfluences@CDXUTSDKMesh@@QBEII@Z PROC		; CDXUTSDKMesh::GetNumInfluences
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1263
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1264
  0000e	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebp], 224
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 91 58 03 00
	00		 mov	 edx, DWORD PTR [ecx+856]
  0001e	8b 84 02 b0 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+176]
; Line 1265
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?GetNumInfluences@CDXUTSDKMesh@@QBEII@Z ENDP		; CDXUTSDKMesh::GetNumInfluences
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HadLoadingError@CDXUTSDKMesh@@QBEHXZ PROC		; CDXUTSDKMesh::HadLoadingError
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1257
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1258
  0000e	33 c0		 xor	 eax, eax
; Line 1259
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?HadLoadingError@CDXUTSDKMesh@@QBEHXZ ENDP		; CDXUTSDKMesh::HadLoadingError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bLoading$ = 8						; size = 1
?SetLoading@CDXUTSDKMesh@@QAEX_N@Z PROC			; CDXUTSDKMesh::SetLoading
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1251
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1252
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 4d 08	 mov	 cl, BYTE PTR _bLoading$[ebp]
  00014	88 48 08	 mov	 BYTE PTR [eax+8], cl
; Line 1253
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?SetLoading@CDXUTSDKMesh@@QAEX_N@Z ENDP			; CDXUTSDKMesh::SetLoading
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLoading@CDXUTSDKMesh@@QBE_NXZ PROC			; CDXUTSDKMesh::IsLoading
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1245
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1246
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8a 40 08	 mov	 al, BYTE PTR [eax+8]
; Line 1247
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?IsLoading@CDXUTSDKMesh@@QBE_NXZ ENDP			; CDXUTSDKMesh::IsLoading
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsLoaded@CDXUTSDKMesh@@QBE_NXZ PROC			; CDXUTSDKMesh::IsLoaded
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1234
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1235
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00015	74 0f		 je	 SHORT $LN1@IsLoaded
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	0f b6 51 08	 movzx	 edx, BYTE PTR [ecx+8]
  0001e	85 d2		 test	 edx, edx
  00020	75 04		 jne	 SHORT $LN1@IsLoaded
; Line 1237
  00022	b0 01		 mov	 al, 1
  00024	eb 02		 jmp	 SHORT $LN2@IsLoaded
$LN1@IsLoaded:
; Line 1240
  00026	32 c0		 xor	 al, al
$LN2@IsLoaded:
; Line 1241
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?IsLoaded@CDXUTSDKMesh@@QBE_NXZ ENDP			; CDXUTSDKMesh::IsLoaded
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CheckLoadDone@CDXUTSDKMesh@@QAE_NXZ PROC		; CDXUTSDKMesh::CheckLoadDone
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1222
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1223
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetOutstandingResources@CDXUTSDKMesh@@QBEIXZ ; CDXUTSDKMesh::GetOutstandingResources
  00016	85 c0		 test	 eax, eax
  00018	75 0b		 jne	 SHORT $LN1@CheckLoadD
; Line 1225
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c6 40 08 00	 mov	 BYTE PTR [eax+8], 0
; Line 1226
  00021	b0 01		 mov	 al, 1
  00023	eb 02		 jmp	 SHORT $LN2@CheckLoadD
$LN1@CheckLoadD:
; Line 1229
  00025	32 c0		 xor	 al, al
$LN2@CheckLoadD:
; Line 1230
  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?CheckLoadDone@CDXUTSDKMesh@@QAE_NXZ ENDP		; CDXUTSDKMesh::CheckLoadDone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_outstandingResources$ = -8				; size = 4
_this$ = -4						; size = 4
?GetOutstandingBufferResources@CDXUTSDKMesh@@QBEIXZ PROC ; CDXUTSDKMesh::GetOutstandingBufferResources
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1212
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1213
  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _outstandingResources$[ebp], 0
; Line 1214
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 b8 4c 03 00
	00 00		 cmp	 DWORD PTR [eax+844], 0
  00028	75 07		 jne	 SHORT $LN1@GetOutstan
; Line 1215
  0002a	b8 01 00 00 00	 mov	 eax, 1
  0002f	eb 03		 jmp	 SHORT $LN2@GetOutstan
$LN1@GetOutstan:
; Line 1217
  00031	8b 45 f8	 mov	 eax, DWORD PTR _outstandingResources$[ebp]
$LN2@GetOutstan:
; Line 1218
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?GetOutstandingBufferResources@CDXUTSDKMesh@@QBEIXZ ENDP ; CDXUTSDKMesh::GetOutstandingBufferResources
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_outstandingResources$ = -8				; size = 4
_this$ = -4						; size = 4
?GetOutstandingResources@CDXUTSDKMesh@@QBEIXZ PROC	; CDXUTSDKMesh::GetOutstandingResources
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1176
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1177
  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _outstandingResources$[ebp], 0
; Line 1178
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	83 b8 4c 03 00
	00 00		 cmp	 DWORD PTR [eax+844], 0
  0002f	75 0a		 jne	 SHORT $LN11@GetOutstan
; Line 1179
  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	e9 91 01 00 00	 jmp	 $LN12@GetOutstan
$LN11@GetOutstan:
; Line 1181
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?GetOutstandingBufferResources@CDXUTSDKMesh@@QBEIXZ ; CDXUTSDKMesh::GetOutstandingBufferResources
  00043	03 45 f8	 add	 eax, DWORD PTR _outstandingResources$[ebp]
  00046	89 45 f8	 mov	 DWORD PTR _outstandingResources$[ebp], eax
; Line 1183
  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00050	0f 84 73 01 00
	00		 je	 $LN10@GetOutstan
; Line 1185
  00056	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0005d	eb 09		 jmp	 SHORT $LN9@GetOutstan
$LN8@GetOutstan:
  0005f	8b 55 f4	 mov	 edx, DWORD PTR _i$1[ebp]
  00062	83 c2 01	 add	 edx, 1
  00065	89 55 f4	 mov	 DWORD PTR _i$1[ebp], edx
$LN9@GetOutstan:
  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 88 4c 03 00
	00		 mov	 ecx, DWORD PTR [eax+844]
  00071	8b 55 f4	 mov	 edx, DWORD PTR _i$1[ebp]
  00074	3b 51 34	 cmp	 edx, DWORD PTR [ecx+52]
  00077	0f 83 4c 01 00
	00		 jae	 $LN10@GetOutstan
; Line 1187
  0007d	69 45 f4 e8 04
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 1256
  00084	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	8b 91 64 03 00
	00		 mov	 edx, DWORD PTR [ecx+868]
  0008d	03 d0		 add	 edx, eax
  0008f	b8 01 00 00 00	 mov	 eax, 1
  00094	6b c8 00	 imul	 ecx, eax, 0
  00097	0f be 94 0a 68
	01 00 00	 movsx	 edx, BYTE PTR [edx+ecx+360]
  0009f	85 d2		 test	 edx, edx
  000a1	74 47		 je	 SHORT $LN6@GetOutstan
; Line 1189
  000a3	69 45 f4 e8 04
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 1256
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	8b 91 64 03 00
	00		 mov	 edx, DWORD PTR [ecx+868]
  000b3	83 bc 02 d0 04
	00 00 00	 cmp	 DWORD PTR [edx+eax+1232], 0
  000bb	75 2d		 jne	 SHORT $LN6@GetOutstan
  000bd	69 45 f4 e8 04
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 1256
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	8b 91 64 03 00
	00		 mov	 edx, DWORD PTR [ecx+868]
  000cd	8b 84 02 d0 04
	00 00		 mov	 eax, DWORD PTR [edx+eax+1232]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
  000da	83 c4 04	 add	 esp, 4
  000dd	85 c0		 test	 eax, eax
  000df	75 09		 jne	 SHORT $LN6@GetOutstan
; Line 1190
  000e1	8b 4d f8	 mov	 ecx, DWORD PTR _outstandingResources$[ebp]
  000e4	83 c1 01	 add	 ecx, 1
  000e7	89 4d f8	 mov	 DWORD PTR _outstandingResources$[ebp], ecx
$LN6@GetOutstan:
; Line 1193
  000ea	69 55 f4 e8 04
	00 00		 imul	 edx, DWORD PTR _i$1[ebp], 1256
  000f1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f4	8b 88 64 03 00
	00		 mov	 ecx, DWORD PTR [eax+868]
  000fa	03 ca		 add	 ecx, edx
  000fc	ba 01 00 00 00	 mov	 edx, 1
  00101	6b c2 00	 imul	 eax, edx, 0
  00104	0f be 8c 01 6c
	02 00 00	 movsx	 ecx, BYTE PTR [ecx+eax+620]
  0010c	85 c9		 test	 ecx, ecx
  0010e	74 47		 je	 SHORT $LN4@GetOutstan
; Line 1195
  00110	69 55 f4 e8 04
	00 00		 imul	 edx, DWORD PTR _i$1[ebp], 1256
  00117	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	8b 88 64 03 00
	00		 mov	 ecx, DWORD PTR [eax+868]
  00120	83 bc 11 d8 04
	00 00 00	 cmp	 DWORD PTR [ecx+edx+1240], 0
  00128	75 2d		 jne	 SHORT $LN4@GetOutstan
  0012a	69 55 f4 e8 04
	00 00		 imul	 edx, DWORD PTR _i$1[ebp], 1256
  00131	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00134	8b 88 64 03 00
	00		 mov	 ecx, DWORD PTR [eax+868]
  0013a	8b 94 11 d8 04
	00 00		 mov	 edx, DWORD PTR [ecx+edx+1240]
  00141	52		 push	 edx
  00142	e8 00 00 00 00	 call	 ??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
  00147	83 c4 04	 add	 esp, 4
  0014a	85 c0		 test	 eax, eax
  0014c	75 09		 jne	 SHORT $LN4@GetOutstan
; Line 1196
  0014e	8b 45 f8	 mov	 eax, DWORD PTR _outstandingResources$[ebp]
  00151	83 c0 01	 add	 eax, 1
  00154	89 45 f8	 mov	 DWORD PTR _outstandingResources$[ebp], eax
$LN4@GetOutstan:
; Line 1199
  00157	69 4d f4 e8 04
	00 00		 imul	 ecx, DWORD PTR _i$1[ebp], 1256
  0015e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00161	8b 82 64 03 00
	00		 mov	 eax, DWORD PTR [edx+868]
  00167	03 c1		 add	 eax, ecx
  00169	b9 01 00 00 00	 mov	 ecx, 1
  0016e	6b d1 00	 imul	 edx, ecx, 0
  00171	0f be 84 10 70
	03 00 00	 movsx	 eax, BYTE PTR [eax+edx+880]
  00179	85 c0		 test	 eax, eax
  0017b	74 47		 je	 SHORT $LN2@GetOutstan
; Line 1201
  0017d	69 4d f4 e8 04
	00 00		 imul	 ecx, DWORD PTR _i$1[ebp], 1256
  00184	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00187	8b 82 64 03 00
	00		 mov	 eax, DWORD PTR [edx+868]
  0018d	83 bc 08 e0 04
	00 00 00	 cmp	 DWORD PTR [eax+ecx+1248], 0
  00195	75 2d		 jne	 SHORT $LN2@GetOutstan
  00197	69 4d f4 e8 04
	00 00		 imul	 ecx, DWORD PTR _i$1[ebp], 1256
  0019e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a1	8b 82 64 03 00
	00		 mov	 eax, DWORD PTR [edx+868]
  001a7	8b 8c 08 e0 04
	00 00		 mov	 ecx, DWORD PTR [eax+ecx+1248]
  001ae	51		 push	 ecx
  001af	e8 00 00 00 00	 call	 ??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
  001b4	83 c4 04	 add	 esp, 4
  001b7	85 c0		 test	 eax, eax
  001b9	75 09		 jne	 SHORT $LN2@GetOutstan
; Line 1202
  001bb	8b 55 f8	 mov	 edx, DWORD PTR _outstandingResources$[ebp]
  001be	83 c2 01	 add	 edx, 1
  001c1	89 55 f8	 mov	 DWORD PTR _outstandingResources$[ebp], edx
$LN2@GetOutstan:
; Line 1204
  001c4	e9 96 fe ff ff	 jmp	 $LN8@GetOutstan
$LN10@GetOutstan:
; Line 1207
  001c9	8b 45 f8	 mov	 eax, DWORD PTR _outstandingResources$[ebp]
$LN12@GetOutstan:
; Line 1208
  001cc	83 c4 0c	 add	 esp, 12			; 0000000cH
  001cf	3b ec		 cmp	 ebp, esp
  001d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d6	8b e5		 mov	 esp, ebp
  001d8	5d		 pop	 ebp
  001d9	c3		 ret	 0
?GetOutstandingResources@CDXUTSDKMesh@@QBEIXZ ENDP	; CDXUTSDKMesh::GetOutstandingResources
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iMesh$ = 12						; size = 4
?GetMeshBBoxExtents@CDXUTSDKMesh@@QBE?AT__m128@@I@Z PROC ; CDXUTSDKMesh::GetMeshBBoxExtents
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1170
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1171
  00039	69 43 0c e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebx], 224
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 91 58 03 00
	00		 mov	 edx, DWORD PTR [ecx+856]
  00049	8d 8c 02 c0 00
	00 00		 lea	 ecx, DWORD PTR [edx+eax+192]
  00050	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  00055	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00059	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
  0005c	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  00060	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00063	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 1172
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	8b e3		 mov	 esp, ebx
  0006b	5b		 pop	 ebx
  0006c	c2 08 00	 ret	 8
?GetMeshBBoxExtents@CDXUTSDKMesh@@QBE?AT__m128@@I@Z ENDP ; CDXUTSDKMesh::GetMeshBBoxExtents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iMesh$ = 12						; size = 4
?GetMeshBBoxCenter@CDXUTSDKMesh@@QBE?AT__m128@@I@Z PROC	; CDXUTSDKMesh::GetMeshBBoxCenter
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1164
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1165
  00039	69 43 0c e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebx], 224
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 91 58 03 00
	00		 mov	 edx, DWORD PTR [ecx+856]
  00049	8d 8c 02 b4 00
	00 00		 lea	 ecx, DWORD PTR [edx+eax+180]
  00050	e8 00 00 00 00	 call	 ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
  00055	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00059	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
  0005c	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  00060	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00063	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 1166
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	8b e3		 mov	 esp, ebx
  0006b	5b		 pop	 ebx
  0006c	c2 08 00	 ret	 8
?GetMeshBBoxCenter@CDXUTSDKMesh@@QBE?AT__m128@@I@Z ENDP	; CDXUTSDKMesh::GetMeshBBoxCenter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetNumIndices@CDXUTSDKMesh@@QBE_KI@Z PROC		; CDXUTSDKMesh::GetNumIndices
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1158
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1159
  0000e	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebp], 224
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 91 58 03 00
	00		 mov	 edx, DWORD PTR [ecx+856]
  0001e	8b 8c 02 a8 00
	00 00		 mov	 ecx, DWORD PTR [edx+eax+168]
  00025	c1 e1 05	 shl	 ecx, 5
  00028	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	8b 92 54 03 00
	00		 mov	 edx, DWORD PTR [edx+852]
  00031	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00034	8b 54 0a 04	 mov	 edx, DWORD PTR [edx+ecx+4]
; Line 1160
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?GetNumIndices@CDXUTSDKMesh@@QBE_KI@Z ENDP		; CDXUTSDKMesh::GetNumIndices
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
_iVB$ = 12						; size = 4
?GetNumVertices@CDXUTSDKMesh@@QBE_KII@Z PROC		; CDXUTSDKMesh::GetNumVertices
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1152
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1153
  0000e	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebp], 224
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 91 58 03 00
	00		 mov	 edx, DWORD PTR [ecx+856]
  0001e	03 d0		 add	 edx, eax
  00020	8b 45 0c	 mov	 eax, DWORD PTR _iVB$[ebp]
  00023	69 4c 82 68 20
	01 00 00	 imul	 ecx, DWORD PTR [edx+eax*4+104], 288
  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	8b 92 50 03 00
	00		 mov	 edx, DWORD PTR [edx+848]
  00034	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00037	8b 54 0a 04	 mov	 edx, DWORD PTR [edx+ecx+4]
; Line 1154
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
?GetNumVertices@CDXUTSDKMesh@@QBE_KII@Z ENDP		; CDXUTSDKMesh::GetNumVertices
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_pszName$ = 8						; size = 4
?FindFrame@CDXUTSDKMesh@@QBEPAUSDKMESH_FRAME@@PBD@Z PROC ; CDXUTSDKMesh::FindFrame
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1139
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1140
  00018	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0001f	eb 09		 jmp	 SHORT $LN4@FindFrame
$LN3@FindFrame:
  00021	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00024	83 c0 01	 add	 eax, 1
  00027	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@FindFrame:
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  00033	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00036	3b 42 30	 cmp	 eax, DWORD PTR [edx+48]
  00039	73 41		 jae	 SHORT $LN2@FindFrame
; Line 1142
  0003b	8b f4		 mov	 esi, esp
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _pszName$[ebp]
  00040	51		 push	 ecx
  00041	69 55 f8 b8 00
	00 00		 imul	 edx, DWORD PTR _i$1[ebp], 184
  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 88 60 03 00
	00		 mov	 ecx, DWORD PTR [eax+864]
  00051	03 ca		 add	 ecx, edx
  00053	51		 push	 ecx
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___stricmp
  0005a	83 c4 08	 add	 esp, 8
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	85 c0		 test	 eax, eax
  00066	75 12		 jne	 SHORT $LN1@FindFrame
; Line 1144
  00068	69 45 f8 b8 00
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 184
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00072	03 82 60 03 00
	00		 add	 eax, DWORD PTR [edx+864]
  00078	eb 04		 jmp	 SHORT $LN5@FindFrame
$LN1@FindFrame:
; Line 1146
  0007a	eb a5		 jmp	 SHORT $LN3@FindFrame
$LN2@FindFrame:
; Line 1147
  0007c	33 c0		 xor	 eax, eax
$LN5@FindFrame:
; Line 1148
  0007e	5e		 pop	 esi
  0007f	83 c4 08	 add	 esp, 8
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
?FindFrame@CDXUTSDKMesh@@QBEPAUSDKMESH_FRAME@@PBD@Z ENDP ; CDXUTSDKMesh::FindFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iFrame$ = 8						; size = 4
?GetFrame@CDXUTSDKMesh@@QBEPAUSDKMESH_FRAME@@I@Z PROC	; CDXUTSDKMesh::GetFrame
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1132
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1133
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 88 4c 03 00
	00		 mov	 ecx, DWORD PTR [eax+844]
  00018	8b 55 08	 mov	 edx, DWORD PTR _iFrame$[ebp]
  0001b	3b 51 30	 cmp	 edx, DWORD PTR [ecx+48]
  0001e	72 21		 jb	 SHORT $LN3@GetFrame
  00020	8b f4		 mov	 esi, esp
  00022	68 6d 04 00 00	 push	 1133			; 0000046dH
  00027	68 00 00 00 00	 push	 OFFSET $SG155481
  0002c	68 00 00 00 00	 push	 OFFSET $SG155482
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	3b f4		 cmp	 esi, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@GetFrame:
; Line 1134
  00041	69 45 08 b8 00
	00 00		 imul	 eax, DWORD PTR _iFrame$[ebp], 184
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	03 81 60 03 00
	00		 add	 eax, DWORD PTR [ecx+864]
; Line 1135
  00051	5e		 pop	 esi
  00052	83 c4 04	 add	 esp, 4
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
?GetFrame@CDXUTSDKMesh@@QBEPAUSDKMESH_FRAME@@I@Z ENDP	; CDXUTSDKMesh::GetFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumFrames@CDXUTSDKMesh@@QBEIXZ PROC			; CDXUTSDKMesh::GetNumFrames
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1126
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1127
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 88 4c 03 00
	00		 mov	 ecx, DWORD PTR [eax+844]
  00017	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
; Line 1128
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?GetNumFrames@CDXUTSDKMesh@@QBEIXZ ENDP			; CDXUTSDKMesh::GetNumFrames
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
_iVB$ = 12						; size = 4
?GetVertexStride@CDXUTSDKMesh@@QBEIII@Z PROC		; CDXUTSDKMesh::GetVertexStride
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1120
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1121
  0000e	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebp], 224
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 91 58 03 00
	00		 mov	 edx, DWORD PTR [ecx+856]
  0001e	03 d0		 add	 edx, eax
  00020	8b 45 0c	 mov	 eax, DWORD PTR _iVB$[ebp]
  00023	69 4c 82 68 20
	01 00 00	 imul	 ecx, DWORD PTR [edx+eax*4+104], 288
  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	8b 82 50 03 00
	00		 mov	 eax, DWORD PTR [edx+848]
  00034	8b 44 08 10	 mov	 eax, DWORD PTR [eax+ecx+16]
; Line 1122
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
?GetVertexStride@CDXUTSDKMesh@@QBEIII@Z ENDP		; CDXUTSDKMesh::GetVertexStride
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
_iSubset$ = 12						; size = 4
?GetSubset@CDXUTSDKMesh@@QBEPAUSDKMESH_SUBSET@@II@Z PROC ; CDXUTSDKMesh::GetSubset
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1114
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1115
  0000e	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebp], 224
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 91 58 03 00
	00		 mov	 edx, DWORD PTR [ecx+856]
  0001e	8b 84 02 d0 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+208]
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _iSubset$[ebp]
  00028	69 04 88 90 00
	00 00		 imul	 eax, DWORD PTR [eax+ecx*4], 144
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00032	03 82 5c 03 00
	00		 add	 eax, DWORD PTR [edx+860]
; Line 1116
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
?GetSubset@CDXUTSDKMesh@@QBEPAUSDKMESH_SUBSET@@II@Z ENDP ; CDXUTSDKMesh::GetSubset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetNumSubsets@CDXUTSDKMesh@@QBEII@Z PROC		; CDXUTSDKMesh::GetNumSubsets
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1108
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1109
  0000e	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebp], 224
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 91 58 03 00
	00		 mov	 edx, DWORD PTR [ecx+856]
  0001e	8b 84 02 ac 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+172]
; Line 1110
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?GetNumSubsets@CDXUTSDKMesh@@QBEII@Z ENDP		; CDXUTSDKMesh::GetNumSubsets
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetMesh@CDXUTSDKMesh@@QBEPAUSDKMESH_MESH@@I@Z PROC	; CDXUTSDKMesh::GetMesh
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1102
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1103
  0000e	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebp], 224
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	03 81 58 03 00
	00		 add	 eax, DWORD PTR [ecx+856]
; Line 1104
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?GetMesh@CDXUTSDKMesh@@QBEPAUSDKMESH_MESH@@I@Z ENDP	; CDXUTSDKMesh::GetMesh
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMaterial$ = 8						; size = 4
?GetMaterial@CDXUTSDKMesh@@QBEPAUSDKMESH_MATERIAL@@I@Z PROC ; CDXUTSDKMesh::GetMaterial
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1096
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1097
  0000e	69 45 08 e8 04
	00 00		 imul	 eax, DWORD PTR _iMaterial$[ebp], 1256
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	03 81 64 03 00
	00		 add	 eax, DWORD PTR [ecx+868]
; Line 1098
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?GetMaterial@CDXUTSDKMesh@@QBEPAUSDKMESH_MATERIAL@@I@Z ENDP ; CDXUTSDKMesh::GetMaterial
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIB$ = 8						; size = 4
?GetRawIndicesAt@CDXUTSDKMesh@@QBEPAEI@Z PROC		; CDXUTSDKMesh::GetRawIndicesAt
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1090
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1091
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00014	8b 55 08	 mov	 edx, DWORD PTR _iIB$[ebp]
  00017	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
; Line 1092
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?GetRawIndicesAt@CDXUTSDKMesh@@QBEPAEI@Z ENDP		; CDXUTSDKMesh::GetRawIndicesAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iVB$ = 8						; size = 4
?GetRawVerticesAt@CDXUTSDKMesh@@QBEPAEI@Z PROC		; CDXUTSDKMesh::GetRawVerticesAt
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1084
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1085
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00014	8b 55 08	 mov	 edx, DWORD PTR _iVB$[ebp]
  00017	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
; Line 1086
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?GetRawVerticesAt@CDXUTSDKMesh@@QBEPAEI@Z ENDP		; CDXUTSDKMesh::GetRawVerticesAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iIB$ = 8						; size = 4
?GetIB11At@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z PROC	; CDXUTSDKMesh::GetIB11At
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1078
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1079
  0000e	8b 45 08	 mov	 eax, DWORD PTR _iIB$[ebp]
  00011	c1 e0 05	 shl	 eax, 5
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	8b 91 54 03 00
	00		 mov	 edx, DWORD PTR [ecx+852]
  0001d	8b 44 02 18	 mov	 eax, DWORD PTR [edx+eax+24]
; Line 1080
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?GetIB11At@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z ENDP	; CDXUTSDKMesh::GetIB11At
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iVB$ = 8						; size = 4
?GetVB11At@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z PROC	; CDXUTSDKMesh::GetVB11At
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1072
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1073
  0000e	69 45 08 20 01
	00 00		 imul	 eax, DWORD PTR _iVB$[ebp], 288
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 91 50 03 00
	00		 mov	 edx, DWORD PTR [ecx+848]
  0001e	8b 84 02 18 01
	00 00		 mov	 eax, DWORD PTR [edx+eax+280]
; Line 1074
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?GetVB11At@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z ENDP	; CDXUTSDKMesh::GetVB11At
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumIBs@CDXUTSDKMesh@@QBEIXZ PROC			; CDXUTSDKMesh::GetNumIBs
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1064
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1065
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 b8 4c 03 00
	00 00		 cmp	 DWORD PTR [eax+844], 0
  00018	75 04		 jne	 SHORT $LN1@GetNumIBs
; Line 1066
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 0c		 jmp	 SHORT $LN2@GetNumIBs
$LN1@GetNumIBs:
; Line 1067
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  00027	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
$LN2@GetNumIBs:
; Line 1068
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?GetNumIBs@CDXUTSDKMesh@@QBEIXZ ENDP			; CDXUTSDKMesh::GetNumIBs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumVBs@CDXUTSDKMesh@@QBEIXZ PROC			; CDXUTSDKMesh::GetNumVBs
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1056
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1057
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 b8 4c 03 00
	00 00		 cmp	 DWORD PTR [eax+844], 0
  00018	75 04		 jne	 SHORT $LN1@GetNumVBs
; Line 1058
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 0c		 jmp	 SHORT $LN2@GetNumVBs
$LN1@GetNumVBs:
; Line 1059
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  00027	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
$LN2@GetNumVBs:
; Line 1060
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?GetNumVBs@CDXUTSDKMesh@@QBEIXZ ENDP			; CDXUTSDKMesh::GetNumVBs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumMaterials@CDXUTSDKMesh@@QBEIXZ PROC		; CDXUTSDKMesh::GetNumMaterials
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1048
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1049
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 b8 4c 03 00
	00 00		 cmp	 DWORD PTR [eax+844], 0
  00018	75 04		 jne	 SHORT $LN1@GetNumMate
; Line 1050
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 0c		 jmp	 SHORT $LN2@GetNumMate
$LN1@GetNumMate:
; Line 1051
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  00027	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
$LN2@GetNumMate:
; Line 1052
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?GetNumMaterials@CDXUTSDKMesh@@QBEIXZ ENDP		; CDXUTSDKMesh::GetNumMaterials
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNumMeshes@CDXUTSDKMesh@@QBEIXZ PROC			; CDXUTSDKMesh::GetNumMeshes
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1040
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1041
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 b8 4c 03 00
	00 00		 cmp	 DWORD PTR [eax+844], 0
  00018	75 04		 jne	 SHORT $LN1@GetNumMesh
; Line 1042
  0001a	33 c0		 xor	 eax, eax
  0001c	eb 0c		 jmp	 SHORT $LN2@GetNumMesh
$LN1@GetNumMesh:
; Line 1043
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  00027	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
$LN2@GetNumMesh:
; Line 1044
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?GetNumMeshes@CDXUTSDKMesh@@QBEIXZ ENDP			; CDXUTSDKMesh::GetNumMeshes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMeshPathW@CDXUTSDKMesh@@QBEPB_WXZ PROC		; CDXUTSDKMesh::GetMeshPathW
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1034
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1035
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 c0 40	 add	 eax, 64			; 00000040H
; Line 1036
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?GetMeshPathW@CDXUTSDKMesh@@QBEPB_WXZ ENDP		; CDXUTSDKMesh::GetMeshPathW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMeshPathA@CDXUTSDKMesh@@QBEPBDXZ PROC		; CDXUTSDKMesh::GetMeshPathA
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1028
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1029
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	05 48 02 00 00	 add	 eax, 584		; 00000248H
; Line 1030
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?GetMeshPathA@CDXUTSDKMesh@@QBEPBDXZ ENDP		; CDXUTSDKMesh::GetMeshPathA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetAdjIB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z PROC	; CDXUTSDKMesh::GetAdjIB11
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1022
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1023
  0000e	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebp], 224
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 91 58 03 00
	00		 mov	 edx, DWORD PTR [ecx+856]
  0001e	8b 84 02 a8 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+168]
  00025	c1 e0 05	 shl	 eax, 5
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 91 68 03 00
	00		 mov	 edx, DWORD PTR [ecx+872]
  00031	8b 44 02 18	 mov	 eax, DWORD PTR [edx+eax+24]
; Line 1024
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?GetAdjIB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z ENDP	; CDXUTSDKMesh::GetAdjIB11
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetIndexType@CDXUTSDKMesh@@QBE?AW4SDKMESH_INDEX_TYPE@@I@Z PROC ; CDXUTSDKMesh::GetIndexType
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1017
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1018
  0000e	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebp], 224
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 91 58 03 00
	00		 mov	 edx, DWORD PTR [ecx+856]
  0001e	8b 84 02 a8 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+168]
  00025	c1 e0 05	 shl	 eax, 5
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 91 54 03 00
	00		 mov	 edx, DWORD PTR [ecx+852]
  00031	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
; Line 1019
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?GetIndexType@CDXUTSDKMesh@@QBE?AW4SDKMESH_INDEX_TYPE@@I@Z ENDP ; CDXUTSDKMesh::GetIndexType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetIB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z PROC	; CDXUTSDKMesh::GetIB11
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1013
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1014
  0000e	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebp], 224
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 91 58 03 00
	00		 mov	 edx, DWORD PTR [ecx+856]
  0001e	8b 84 02 a8 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+168]
  00025	c1 e0 05	 shl	 eax, 5
  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 91 54 03 00
	00		 mov	 edx, DWORD PTR [ecx+852]
  00031	8b 44 02 18	 mov	 eax, DWORD PTR [edx+eax+24]
; Line 1015
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?GetIB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@I@Z ENDP	; CDXUTSDKMesh::GetIB11
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
_iVB$ = 12						; size = 4
?GetVB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@II@Z PROC	; CDXUTSDKMesh::GetVB11
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 1007
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1008
  0000e	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebp], 224
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 91 58 03 00
	00		 mov	 edx, DWORD PTR [ecx+856]
  0001e	03 d0		 add	 edx, eax
  00020	8b 45 0c	 mov	 eax, DWORD PTR _iVB$[ebp]
  00023	69 4c 82 68 20
	01 00 00	 imul	 ecx, DWORD PTR [edx+eax*4+104], 288
  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	8b 82 50 03 00
	00		 mov	 eax, DWORD PTR [edx+848]
  00034	8b 84 08 18 01
	00 00		 mov	 eax, DWORD PTR [eax+ecx+280]
; Line 1009
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
?GetVB11@CDXUTSDKMesh@@QBEPAUID3D11Buffer@@II@Z ENDP	; CDXUTSDKMesh::GetVB11
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
?GetIBFormat11@CDXUTSDKMesh@@QBE?AW4DXGI_FORMAT@@I@Z PROC ; CDXUTSDKMesh::GetIBFormat11
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 994
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 995
  00017	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebp], 224
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	8b 91 58 03 00
	00		 mov	 edx, DWORD PTR [ecx+856]
  00027	8b 84 02 a8 00
	00 00		 mov	 eax, DWORD PTR [edx+eax+168]
  0002e	c1 e0 05	 shl	 eax, 5
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 91 54 03 00
	00		 mov	 edx, DWORD PTR [ecx+852]
  0003a	8b 44 02 10	 mov	 eax, DWORD PTR [edx+eax+16]
  0003e	89 45 f8	 mov	 DWORD PTR tv73[ebp], eax
  00041	83 7d f8 00	 cmp	 DWORD PTR tv73[ebp], 0
  00045	74 08		 je	 SHORT $LN2@GetIBForma
  00047	83 7d f8 01	 cmp	 DWORD PTR tv73[ebp], 1
  0004b	74 09		 je	 SHORT $LN1@GetIBForma
  0004d	eb 0e		 jmp	 SHORT $LN3@GetIBForma
$LN2@GetIBForma:
; Line 998
  0004f	b8 39 00 00 00	 mov	 eax, 57			; 00000039H
  00054	eb 0c		 jmp	 SHORT $LN5@GetIBForma
$LN1@GetIBForma:
; Line 1000
  00056	b8 2a 00 00 00	 mov	 eax, 42			; 0000002aH
  0005b	eb 05		 jmp	 SHORT $LN5@GetIBForma
$LN3@GetIBForma:
; Line 1002
  0005d	b8 39 00 00 00	 mov	 eax, 57			; 00000039H
$LN5@GetIBForma:
; Line 1003
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?GetIBFormat11@CDXUTSDKMesh@@QBE?AW4DXGI_FORMAT@@I@Z ENDP ; CDXUTSDKMesh::GetIBFormat11
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -8						; size = 4
_retType$ = -4						; size = 4
_PrimType$ = 8						; size = 4
?GetPrimitiveType11@CDXUTSDKMesh@@SA?AW4D3D_PRIMITIVE_TOPOLOGY@@W4SDKMESH_PRIMITIVE_TYPE@@@Z PROC ; CDXUTSDKMesh::GetPrimitiveType11
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 955
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 956
  00014	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _retType$[ebp], 4
; Line 958
  0001b	8b 45 08	 mov	 eax, DWORD PTR _PrimType$[ebp]
  0001e	89 45 f8	 mov	 DWORD PTR tv64[ebp], eax
  00021	83 7d f8 08	 cmp	 DWORD PTR tv64[ebp], 8
  00025	77 59		 ja	 SHORT $LN10@GetPrimiti
  00027	8b 4d f8	 mov	 ecx, DWORD PTR tv64[ebp]
  0002a	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN14@GetPrimiti[ecx*4]
$LN9@GetPrimiti:
; Line 961
  00031	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR _retType$[ebp], 4
; Line 962
  00038	eb 46		 jmp	 SHORT $LN10@GetPrimiti
$LN8@GetPrimiti:
; Line 964
  0003a	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR _retType$[ebp], 5
; Line 965
  00041	eb 3d		 jmp	 SHORT $LN10@GetPrimiti
$LN7@GetPrimiti:
; Line 967
  00043	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _retType$[ebp], 2
; Line 968
  0004a	eb 34		 jmp	 SHORT $LN10@GetPrimiti
$LN6@GetPrimiti:
; Line 970
  0004c	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _retType$[ebp], 3
; Line 971
  00053	eb 2b		 jmp	 SHORT $LN10@GetPrimiti
$LN5@GetPrimiti:
; Line 973
  00055	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _retType$[ebp], 1
; Line 974
  0005c	eb 22		 jmp	 SHORT $LN10@GetPrimiti
$LN4@GetPrimiti:
; Line 976
  0005e	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR _retType$[ebp], 12 ; 0000000cH
; Line 977
  00065	eb 19		 jmp	 SHORT $LN10@GetPrimiti
$LN3@GetPrimiti:
; Line 979
  00067	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR _retType$[ebp], 13 ; 0000000dH
; Line 980
  0006e	eb 10		 jmp	 SHORT $LN10@GetPrimiti
$LN2@GetPrimiti:
; Line 982
  00070	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR _retType$[ebp], 10 ; 0000000aH
; Line 983
  00077	eb 07		 jmp	 SHORT $LN10@GetPrimiti
$LN1@GetPrimiti:
; Line 985
  00079	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR _retType$[ebp], 11 ; 0000000bH
$LN10@GetPrimiti:
; Line 989
  00080	8b 45 fc	 mov	 eax, DWORD PTR _retType$[ebp]
; Line 990
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
  00087	90		 npad	 1
$LN14@GetPrimiti:
  00088	00 00 00 00	 DD	 $LN9@GetPrimiti
  0008c	00 00 00 00	 DD	 $LN8@GetPrimiti
  00090	00 00 00 00	 DD	 $LN7@GetPrimiti
  00094	00 00 00 00	 DD	 $LN6@GetPrimiti
  00098	00 00 00 00	 DD	 $LN5@GetPrimiti
  0009c	00 00 00 00	 DD	 $LN4@GetPrimiti
  000a0	00 00 00 00	 DD	 $LN3@GetPrimiti
  000a4	00 00 00 00	 DD	 $LN2@GetPrimiti
  000a8	00 00 00 00	 DD	 $LN1@GetPrimiti
?GetPrimitiveType11@CDXUTSDKMesh@@SA?AW4D3D_PRIMITIVE_TOPOLOGY@@W4SDKMESH_PRIMITIVE_TYPE@@@Z ENDP ; CDXUTSDKMesh::GetPrimitiveType11
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pd3dDeviceContext$ = 8					; size = 4
_iDiffuseSlot$ = 12					; size = 4
_iNormalSlot$ = 16					; size = 4
_iSpecularSlot$ = 20					; size = 4
?RenderAdjacent@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z PROC ; CDXUTSDKMesh::RenderAdjacent
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 948
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 949
  0000e	8b 45 14	 mov	 eax, DWORD PTR _iSpecularSlot$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 10	 mov	 ecx, DWORD PTR _iNormalSlot$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 0c	 mov	 edx, DWORD PTR _iDiffuseSlot$[ebp]
  00019	52		 push	 edx
  0001a	8b 45 08	 mov	 eax, DWORD PTR _pd3dDeviceContext$[ebp]
  0001d	50		 push	 eax
  0001e	6a 01		 push	 1
  00020	6a 00		 push	 0
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ?RenderFrame@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderFrame
; Line 950
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 10 00	 ret	 16			; 00000010H
?RenderAdjacent@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z ENDP ; CDXUTSDKMesh::RenderAdjacent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pd3dDeviceContext$ = 8					; size = 4
_iDiffuseSlot$ = 12					; size = 4
_iNormalSlot$ = 16					; size = 4
_iSpecularSlot$ = 20					; size = 4
?Render@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z PROC ; CDXUTSDKMesh::Render
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 938
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 939
  0000e	8b 45 14	 mov	 eax, DWORD PTR _iSpecularSlot$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 10	 mov	 ecx, DWORD PTR _iNormalSlot$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 0c	 mov	 edx, DWORD PTR _iDiffuseSlot$[ebp]
  00019	52		 push	 edx
  0001a	8b 45 08	 mov	 eax, DWORD PTR _pd3dDeviceContext$[ebp]
  0001d	50		 push	 eax
  0001e	6a 00		 push	 0
  00020	6a 00		 push	 0
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ?RenderFrame@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderFrame
; Line 940
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c2 10 00	 ret	 16			; 00000010H
?Render@CDXUTSDKMesh@@UAEXPAUID3D11DeviceContext@@III@Z ENDP ; CDXUTSDKMesh::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -672						; size = 64
$T2 = -608						; size = 64
$T3 = -544						; size = 64
_i$4 = -472						; size = 4
_mFinal$5 = -464					; size = 64
$T6 = -384						; size = 64
$T7 = -320						; size = 64
_mInvBindPose$8 = -240					; size = 64
$T9 = -160						; size = 64
_m$10 = -80						; size = 64
_i$11 = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_world$ = 8						; size = 4
_fTime$ = 12						; size = 8
?TransformMesh@CDXUTSDKMesh@@QAEXABUXMMATRIX@DirectX@@N@Z PROC ; CDXUTSDKMesh::TransformMesh
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 908
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec a8 02 00
	00		 sub	 esp, 680		; 000002a8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 58 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-680]
  00025	b9 aa 00 00 00	 mov	 ecx, 170		; 000000aaH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 909
  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 b8 6c 03 00
	00 00		 cmp	 DWORD PTR [eax+876], 0
  00049	74 13		 je	 SHORT $LN9@TransformM
  0004b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	8b 91 6c 03 00
	00		 mov	 edx, DWORD PTR [ecx+876]
  00054	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00058	0f 85 98 01 00
	00		 jne	 $LN10@TransformM
$LN9@TransformM:
; Line 911
  0005e	83 ec 08	 sub	 esp, 8
  00061	f2 0f 10 43 0c	 movsd	 xmm0, QWORD PTR _fTime$[ebx]
  00066	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0006b	8b 43 08	 mov	 eax, DWORD PTR _world$[ebx]
  0006e	50		 push	 eax
  0006f	6a 00		 push	 0
  00071	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ?TransformFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@N@Z ; CDXUTSDKMesh::TransformFrame
; Line 915
  00079	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$11[ebp], 0
  00080	eb 09		 jmp	 SHORT $LN8@TransformM
$LN7@TransformM:
  00082	8b 4d f4	 mov	 ecx, DWORD PTR _i$11[ebp]
  00085	83 c1 01	 add	 ecx, 1
  00088	89 4d f4	 mov	 DWORD PTR _i$11[ebp], ecx
$LN8@TransformM:
  0008b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0008e	8b 82 4c 03 00
	00		 mov	 eax, DWORD PTR [edx+844]
  00094	8b 4d f4	 mov	 ecx, DWORD PTR _i$11[ebp]
  00097	3b 48 30	 cmp	 ecx, DWORD PTR [eax+48]
  0009a	0f 83 54 01 00
	00		 jae	 $LN6@TransformM
; Line 917
  000a0	8b 4d f4	 mov	 ecx, DWORD PTR _i$11[ebp]
  000a3	c1 e1 06	 shl	 ecx, 6
  000a6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000a9	03 8a 74 03 00
	00		 add	 ecx, DWORD PTR [edx+884]
  000af	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  000b4	0f 29 9d 10 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+48], xmm3
  000bb	0f 29 95 00 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+32], xmm2
  000c2	0f 29 8d f0 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+16], xmm1
  000c9	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  000d0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000d5	8d b5 e0 fd ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  000db	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR $T9[ebp]
  000e1	f3 a5		 rep movsd
  000e3	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000e8	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR $T9[ebp]
  000ee	8d 7d b0	 lea	 edi, DWORD PTR _m$10[ebp]
  000f1	f3 a5		 rep movsd
; Line 918
  000f3	33 c9		 xor	 ecx, ecx
  000f5	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _m$10[ebp]
  000f9	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _m$10[ebp+16]
  000fd	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _m$10[ebp+32]
  00101	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _m$10[ebp+48]
  00105	e8 00 00 00 00	 call	 ?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
  0010a	0f 29 9d d0 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+48], xmm3
  00111	0f 29 95 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+32], xmm2
  00118	0f 29 8d b0 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+16], xmm1
  0011f	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00126	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0012b	8d b5 a0 fd ff
	ff		 lea	 esi, DWORD PTR $T2[ebp]
  00131	8d bd c0 fe ff
	ff		 lea	 edi, DWORD PTR $T7[ebp]
  00137	f3 a5		 rep movsd
  00139	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0013e	8d b5 c0 fe ff
	ff		 lea	 esi, DWORD PTR $T7[ebp]
  00144	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR _mInvBindPose$8[ebp]
  0014a	f3 a5		 rep movsd
; Line 919
  0014c	8b 4d f4	 mov	 ecx, DWORD PTR _i$11[ebp]
  0014f	c1 e1 06	 shl	 ecx, 6
  00152	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00155	03 88 78 03 00
	00		 add	 ecx, DWORD PTR [eax+888]
  0015b	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  00160	0f 29 9d 90 fd
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00167	0f 29 95 80 fd
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  0016e	0f 29 8d 70 fd
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  00175	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0017c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00181	8d b5 60 fd ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00187	8d bd 80 fe ff
	ff		 lea	 edi, DWORD PTR $T6[ebp]
  0018d	f3 a5		 rep movsd
  0018f	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00195	51		 push	 ecx
  00196	8d 4d b0	 lea	 ecx, DWORD PTR _m$10[ebp]
  00199	e8 00 00 00 00	 call	 ??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMMATRIX::operator=
; Line 920
  0019e	8d 95 30 fe ff
	ff		 lea	 edx, DWORD PTR _mFinal$5[ebp]
  001a4	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR _mInvBindPose$8[ebp]
  001aa	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _m$10[ebp]
  001ae	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _m$10[ebp+16]
  001b2	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _m$10[ebp+32]
  001b6	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _m$10[ebp+48]
  001ba	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
; Line 921
  001bf	8b 4d f4	 mov	 ecx, DWORD PTR _i$11[ebp]
  001c2	c1 e1 06	 shl	 ecx, 6
  001c5	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001c8	03 8a 78 03 00
	00		 add	 ecx, DWORD PTR [edx+888]
  001ce	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _mFinal$5[ebp]
  001d5	0f 28 8d 40 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _mFinal$5[ebp+16]
  001dc	0f 28 95 50 fe
	ff ff		 movaps	 xmm2, XMMWORD PTR _mFinal$5[ebp+32]
  001e3	0f 28 9d 60 fe
	ff ff		 movaps	 xmm3, XMMWORD PTR _mFinal$5[ebp+48]
  001ea	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 922
  001ef	e9 8e fe ff ff	 jmp	 $LN7@TransformM
$LN6@TransformM:
; Line 924
  001f4	eb 5c		 jmp	 SHORT $LN1@TransformM
$LN10@TransformM:
  001f6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f9	8b 88 6c 03 00
	00		 mov	 ecx, DWORD PTR [eax+876]
  001ff	83 79 08 01	 cmp	 DWORD PTR [ecx+8], 1
  00203	75 4d		 jne	 SHORT $LN1@TransformM
; Line 926
  00205	c7 85 28 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$4[ebp], 0
  0020f	eb 0f		 jmp	 SHORT $LN3@TransformM
$LN2@TransformM:
  00211	8b 95 28 fe ff
	ff		 mov	 edx, DWORD PTR _i$4[ebp]
  00217	83 c2 01	 add	 edx, 1
  0021a	89 95 28 fe ff
	ff		 mov	 DWORD PTR _i$4[ebp], edx
$LN3@TransformM:
  00220	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00223	8b 88 6c 03 00
	00		 mov	 ecx, DWORD PTR [eax+876]
  00229	8b 95 28 fe ff
	ff		 mov	 edx, DWORD PTR _i$4[ebp]
  0022f	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00232	73 1e		 jae	 SHORT $LN1@TransformM
; Line 927
  00234	83 ec 08	 sub	 esp, 8
  00237	f2 0f 10 43 0c	 movsd	 xmm0, QWORD PTR _fTime$[ebx]
  0023c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00241	8b 85 28 fe ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00247	50		 push	 eax
  00248	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0024b	e8 00 00 00 00	 call	 ?TransformFrameAbsolute@CDXUTSDKMesh@@IAEXIN@Z ; CDXUTSDKMesh::TransformFrameAbsolute
  00250	eb bf		 jmp	 SHORT $LN2@TransformM
$LN1@TransformM:
; Line 929
  00252	52		 push	 edx
  00253	8b cd		 mov	 ecx, ebp
  00255	50		 push	 eax
  00256	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@TransformM
  0025c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00261	58		 pop	 eax
  00262	5a		 pop	 edx
  00263	5f		 pop	 edi
  00264	5e		 pop	 esi
  00265	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00268	33 cd		 xor	 ecx, ebp
  0026a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0026f	8b e5		 mov	 esp, ebp
  00271	5d		 pop	 ebp
  00272	8b e3		 mov	 esp, ebx
  00274	5b		 pop	 ebx
  00275	c2 0c 00	 ret	 12			; 0000000cH
$LN17@TransformM:
  00278	03 00 00 00	 DD	 3
  0027c	00 00 00 00	 DD	 $LN16@TransformM
$LN16@TransformM:
  00280	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00284	40 00 00 00	 DD	 64			; 00000040H
  00288	00 00 00 00	 DD	 $LN13@TransformM
  0028c	10 ff ff ff	 DD	 -240			; ffffff10H
  00290	40 00 00 00	 DD	 64			; 00000040H
  00294	00 00 00 00	 DD	 $LN14@TransformM
  00298	30 fe ff ff	 DD	 -464			; fffffe30H
  0029c	40 00 00 00	 DD	 64			; 00000040H
  002a0	00 00 00 00	 DD	 $LN15@TransformM
$LN15@TransformM:
  002a4	6d		 DB	 109			; 0000006dH
  002a5	46		 DB	 70			; 00000046H
  002a6	69		 DB	 105			; 00000069H
  002a7	6e		 DB	 110			; 0000006eH
  002a8	61		 DB	 97			; 00000061H
  002a9	6c		 DB	 108			; 0000006cH
  002aa	00		 DB	 0
$LN14@TransformM:
  002ab	6d		 DB	 109			; 0000006dH
  002ac	49		 DB	 73			; 00000049H
  002ad	6e		 DB	 110			; 0000006eH
  002ae	76		 DB	 118			; 00000076H
  002af	42		 DB	 66			; 00000042H
  002b0	69		 DB	 105			; 00000069H
  002b1	6e		 DB	 110			; 0000006eH
  002b2	64		 DB	 100			; 00000064H
  002b3	50		 DB	 80			; 00000050H
  002b4	6f		 DB	 111			; 0000006fH
  002b5	73		 DB	 115			; 00000073H
  002b6	65		 DB	 101			; 00000065H
  002b7	00		 DB	 0
$LN13@TransformM:
  002b8	6d		 DB	 109			; 0000006dH
  002b9	00		 DB	 0
?TransformMesh@CDXUTSDKMesh@@QAEXABUXMMATRIX@DirectX@@N@Z ENDP ; CDXUTSDKMesh::TransformMesh
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv887 = -100						; size = 8
tv811 = -92						; size = 8
tv736 = -84						; size = 8
tv452 = -76						; size = 8
$T1 = -68						; size = 4
$T2 = -64						; size = 4
$T3 = -60						; size = 4
$T4 = -56						; size = 4
$T5 = -52						; size = 4
$T6 = -48						; size = 4
$T7 = -44						; size = 4
$T8 = -40						; size = 4
_i$9 = -36						; size = 8
_i$10 = -28						; size = 8
_i$11 = -20						; size = 8
_m$12 = -12						; size = 8
_this$ = -4						; size = 4
?Destroy@CDXUTSDKMesh@@UAEXXZ PROC			; CDXUTSDKMesh::Destroy
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 823
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  0000c	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 824
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?CheckLoadDone@CDXUTSDKMesh@@QAE_NXZ ; CDXUTSDKMesh::CheckLoadDone
  00024	0f b6 c0	 movzx	 eax, al
  00027	85 c0		 test	 eax, eax
  00029	75 05		 jne	 SHORT $LN34@Destroy
; Line 825
  0002b	e9 4d 08 00 00	 jmp	 $LN35@Destroy
$LN34@Destroy:
; Line 827
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00037	0f 84 6d 05 00
	00		 je	 $LN33@Destroy
; Line 829
  0003d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00040	83 ba 64 03 00
	00 00		 cmp	 DWORD PTR [edx+868], 0
  00047	0f 84 81 03 00
	00		 je	 $LN32@Destroy
; Line 831
  0004d	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00051	66 0f 13 45 f4	 movlpd	 QWORD PTR _m$12[ebp], xmm0
  00056	eb 12		 jmp	 SHORT $LN31@Destroy
$LN30@Destroy:
  00058	8b 45 f4	 mov	 eax, DWORD PTR _m$12[ebp]
  0005b	83 c0 01	 add	 eax, 1
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _m$12[ebp+4]
  00061	83 d1 00	 adc	 ecx, 0
  00064	89 45 f4	 mov	 DWORD PTR _m$12[ebp], eax
  00067	89 4d f8	 mov	 DWORD PTR _m$12[ebp+4], ecx
$LN31@Destroy:
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006d	8b 82 4c 03 00
	00		 mov	 eax, DWORD PTR [edx+844]
  00073	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00076	33 d2		 xor	 edx, edx
  00078	89 4d b4	 mov	 DWORD PTR tv452[ebp], ecx
  0007b	89 55 b8	 mov	 DWORD PTR tv452[ebp+4], edx
  0007e	8b 45 f8	 mov	 eax, DWORD PTR _m$12[ebp+4]
  00081	3b 45 b8	 cmp	 eax, DWORD PTR tv452[ebp+4]
  00084	0f 87 44 03 00
	00		 ja	 $LN32@Destroy
  0008a	72 0c		 jb	 SHORT $LN37@Destroy
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR _m$12[ebp]
  0008f	3b 4d b4	 cmp	 ecx, DWORD PTR tv452[ebp]
  00092	0f 83 36 03 00
	00		 jae	 $LN32@Destroy
$LN37@Destroy:
; Line 833
  00098	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	83 7a 24 00	 cmp	 DWORD PTR [edx+36], 0
  0009f	0f 84 24 03 00
	00		 je	 $LN28@Destroy
; Line 835
  000a5	6a 00		 push	 0
  000a7	68 e8 04 00 00	 push	 1256			; 000004e8H
  000ac	8b 45 f8	 mov	 eax, DWORD PTR _m$12[ebp+4]
  000af	50		 push	 eax
  000b0	8b 4d f4	 mov	 ecx, DWORD PTR _m$12[ebp]
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 __allmul
  000b9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bc	8b 8a 64 03 00
	00		 mov	 ecx, DWORD PTR [edx+868]
  000c2	83 bc 01 d0 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1232], 0
  000ca	0f 84 e1 00 00
	00		 je	 $LN27@Destroy
  000d0	6a 00		 push	 0
  000d2	68 e8 04 00 00	 push	 1256			; 000004e8H
  000d7	8b 55 f8	 mov	 edx, DWORD PTR _m$12[ebp+4]
  000da	52		 push	 edx
  000db	8b 45 f4	 mov	 eax, DWORD PTR _m$12[ebp]
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 __allmul
  000e4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	8b 91 64 03 00
	00		 mov	 edx, DWORD PTR [ecx+868]
  000ed	8b 84 02 d0 04
	00 00		 mov	 eax, DWORD PTR [edx+eax+1232]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 ??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
  000fa	83 c4 04	 add	 esp, 4
  000fd	85 c0		 test	 eax, eax
  000ff	0f 85 ac 00 00
	00		 jne	 $LN27@Destroy
; Line 840
  00105	6a 00		 push	 0
  00107	68 e8 04 00 00	 push	 1256			; 000004e8H
  0010c	8b 4d f8	 mov	 ecx, DWORD PTR _m$12[ebp+4]
  0010f	51		 push	 ecx
  00110	8b 55 f4	 mov	 edx, DWORD PTR _m$12[ebp]
  00113	52		 push	 edx
  00114	e8 00 00 00 00	 call	 __allmul
  00119	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011c	8b 91 64 03 00
	00		 mov	 edx, DWORD PTR [ecx+868]
  00122	83 bc 02 d0 04
	00 00 00	 cmp	 DWORD PTR [edx+eax+1232], 0
  0012a	0f 84 81 00 00
	00		 je	 $LN27@Destroy
  00130	6a 00		 push	 0
  00132	68 e8 04 00 00	 push	 1256			; 000004e8H
  00137	8b 45 f8	 mov	 eax, DWORD PTR _m$12[ebp+4]
  0013a	50		 push	 eax
  0013b	8b 4d f4	 mov	 ecx, DWORD PTR _m$12[ebp]
  0013e	51		 push	 ecx
  0013f	e8 00 00 00 00	 call	 __allmul
  00144	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00147	8b 8a 64 03 00
	00		 mov	 ecx, DWORD PTR [edx+868]
  0014d	8b b4 01 d0 04
	00 00		 mov	 esi, DWORD PTR [ecx+eax+1232]
  00154	6a 00		 push	 0
  00156	68 e8 04 00 00	 push	 1256			; 000004e8H
  0015b	8b 55 f8	 mov	 edx, DWORD PTR _m$12[ebp+4]
  0015e	52		 push	 edx
  0015f	8b 45 f4	 mov	 eax, DWORD PTR _m$12[ebp]
  00162	50		 push	 eax
  00163	e8 00 00 00 00	 call	 __allmul
  00168	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016b	8b 91 64 03 00
	00		 mov	 edx, DWORD PTR [ecx+868]
  00171	8b 84 02 d0 04
	00 00		 mov	 eax, DWORD PTR [edx+eax+1232]
  00178	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0017a	8b f4		 mov	 esi, esp
  0017c	50		 push	 eax
  0017d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00180	ff d2		 call	 edx
  00182	3b f4		 cmp	 esi, esp
  00184	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00189	6a 00		 push	 0
  0018b	68 e8 04 00 00	 push	 1256			; 000004e8H
  00190	8b 45 f8	 mov	 eax, DWORD PTR _m$12[ebp+4]
  00193	50		 push	 eax
  00194	8b 4d f4	 mov	 ecx, DWORD PTR _m$12[ebp]
  00197	51		 push	 ecx
  00198	e8 00 00 00 00	 call	 __allmul
  0019d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001a0	8b 8a 64 03 00
	00		 mov	 ecx, DWORD PTR [edx+868]
  001a6	c7 84 01 d0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+1232], 0
$LN27@Destroy:
; Line 842
  001b1	6a 00		 push	 0
  001b3	68 e8 04 00 00	 push	 1256			; 000004e8H
  001b8	8b 55 f8	 mov	 edx, DWORD PTR _m$12[ebp+4]
  001bb	52		 push	 edx
  001bc	8b 45 f4	 mov	 eax, DWORD PTR _m$12[ebp]
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 __allmul
  001c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c8	8b 91 64 03 00
	00		 mov	 edx, DWORD PTR [ecx+868]
  001ce	83 bc 02 d8 04
	00 00 00	 cmp	 DWORD PTR [edx+eax+1240], 0
  001d6	0f 84 e1 00 00
	00		 je	 $LN25@Destroy
  001dc	6a 00		 push	 0
  001de	68 e8 04 00 00	 push	 1256			; 000004e8H
  001e3	8b 45 f8	 mov	 eax, DWORD PTR _m$12[ebp+4]
  001e6	50		 push	 eax
  001e7	8b 4d f4	 mov	 ecx, DWORD PTR _m$12[ebp]
  001ea	51		 push	 ecx
  001eb	e8 00 00 00 00	 call	 __allmul
  001f0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001f3	8b 8a 64 03 00
	00		 mov	 ecx, DWORD PTR [edx+868]
  001f9	8b 94 01 d8 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1240]
  00200	52		 push	 edx
  00201	e8 00 00 00 00	 call	 ??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
  00206	83 c4 04	 add	 esp, 4
  00209	85 c0		 test	 eax, eax
  0020b	0f 85 ac 00 00
	00		 jne	 $LN25@Destroy
; Line 847
  00211	6a 00		 push	 0
  00213	68 e8 04 00 00	 push	 1256			; 000004e8H
  00218	8b 45 f8	 mov	 eax, DWORD PTR _m$12[ebp+4]
  0021b	50		 push	 eax
  0021c	8b 4d f4	 mov	 ecx, DWORD PTR _m$12[ebp]
  0021f	51		 push	 ecx
  00220	e8 00 00 00 00	 call	 __allmul
  00225	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00228	8b 8a 64 03 00
	00		 mov	 ecx, DWORD PTR [edx+868]
  0022e	83 bc 01 d8 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1240], 0
  00236	0f 84 81 00 00
	00		 je	 $LN25@Destroy
  0023c	6a 00		 push	 0
  0023e	68 e8 04 00 00	 push	 1256			; 000004e8H
  00243	8b 55 f8	 mov	 edx, DWORD PTR _m$12[ebp+4]
  00246	52		 push	 edx
  00247	8b 45 f4	 mov	 eax, DWORD PTR _m$12[ebp]
  0024a	50		 push	 eax
  0024b	e8 00 00 00 00	 call	 __allmul
  00250	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00253	8b 91 64 03 00
	00		 mov	 edx, DWORD PTR [ecx+868]
  00259	8b b4 02 d8 04
	00 00		 mov	 esi, DWORD PTR [edx+eax+1240]
  00260	6a 00		 push	 0
  00262	68 e8 04 00 00	 push	 1256			; 000004e8H
  00267	8b 45 f8	 mov	 eax, DWORD PTR _m$12[ebp+4]
  0026a	50		 push	 eax
  0026b	8b 4d f4	 mov	 ecx, DWORD PTR _m$12[ebp]
  0026e	51		 push	 ecx
  0026f	e8 00 00 00 00	 call	 __allmul
  00274	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00277	8b 8a 64 03 00
	00		 mov	 ecx, DWORD PTR [edx+868]
  0027d	8b 94 01 d8 04
	00 00		 mov	 edx, DWORD PTR [ecx+eax+1240]
  00284	8b 06		 mov	 eax, DWORD PTR [esi]
  00286	8b f4		 mov	 esi, esp
  00288	52		 push	 edx
  00289	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0028c	ff d1		 call	 ecx
  0028e	3b f4		 cmp	 esi, esp
  00290	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00295	6a 00		 push	 0
  00297	68 e8 04 00 00	 push	 1256			; 000004e8H
  0029c	8b 55 f8	 mov	 edx, DWORD PTR _m$12[ebp+4]
  0029f	52		 push	 edx
  002a0	8b 45 f4	 mov	 eax, DWORD PTR _m$12[ebp]
  002a3	50		 push	 eax
  002a4	e8 00 00 00 00	 call	 __allmul
  002a9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ac	8b 91 64 03 00
	00		 mov	 edx, DWORD PTR [ecx+868]
  002b2	c7 84 02 d8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+eax+1240], 0
$LN25@Destroy:
; Line 849
  002bd	6a 00		 push	 0
  002bf	68 e8 04 00 00	 push	 1256			; 000004e8H
  002c4	8b 45 f8	 mov	 eax, DWORD PTR _m$12[ebp+4]
  002c7	50		 push	 eax
  002c8	8b 4d f4	 mov	 ecx, DWORD PTR _m$12[ebp]
  002cb	51		 push	 ecx
  002cc	e8 00 00 00 00	 call	 __allmul
  002d1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002d4	8b 8a 64 03 00
	00		 mov	 ecx, DWORD PTR [edx+868]
  002da	83 bc 01 e0 04
	00 00 00	 cmp	 DWORD PTR [ecx+eax+1248], 0
  002e2	0f 84 e1 00 00
	00		 je	 $LN28@Destroy
  002e8	6a 00		 push	 0
  002ea	68 e8 04 00 00	 push	 1256			; 000004e8H
  002ef	8b 55 f8	 mov	 edx, DWORD PTR _m$12[ebp+4]
  002f2	52		 push	 edx
  002f3	8b 45 f4	 mov	 eax, DWORD PTR _m$12[ebp]
  002f6	50		 push	 eax
  002f7	e8 00 00 00 00	 call	 __allmul
  002fc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ff	8b 91 64 03 00
	00		 mov	 edx, DWORD PTR [ecx+868]
  00305	8b 84 02 e0 04
	00 00		 mov	 eax, DWORD PTR [edx+eax+1248]
  0030c	50		 push	 eax
  0030d	e8 00 00 00 00	 call	 ??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
  00312	83 c4 04	 add	 esp, 4
  00315	85 c0		 test	 eax, eax
  00317	0f 85 ac 00 00
	00		 jne	 $LN28@Destroy
; Line 854
  0031d	6a 00		 push	 0
  0031f	68 e8 04 00 00	 push	 1256			; 000004e8H
  00324	8b 4d f8	 mov	 ecx, DWORD PTR _m$12[ebp+4]
  00327	51		 push	 ecx
  00328	8b 55 f4	 mov	 edx, DWORD PTR _m$12[ebp]
  0032b	52		 push	 edx
  0032c	e8 00 00 00 00	 call	 __allmul
  00331	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00334	8b 91 64 03 00
	00		 mov	 edx, DWORD PTR [ecx+868]
  0033a	83 bc 02 e0 04
	00 00 00	 cmp	 DWORD PTR [edx+eax+1248], 0
  00342	0f 84 81 00 00
	00		 je	 $LN28@Destroy
  00348	6a 00		 push	 0
  0034a	68 e8 04 00 00	 push	 1256			; 000004e8H
  0034f	8b 45 f8	 mov	 eax, DWORD PTR _m$12[ebp+4]
  00352	50		 push	 eax
  00353	8b 4d f4	 mov	 ecx, DWORD PTR _m$12[ebp]
  00356	51		 push	 ecx
  00357	e8 00 00 00 00	 call	 __allmul
  0035c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0035f	8b 8a 64 03 00
	00		 mov	 ecx, DWORD PTR [edx+868]
  00365	8b b4 01 e0 04
	00 00		 mov	 esi, DWORD PTR [ecx+eax+1248]
  0036c	6a 00		 push	 0
  0036e	68 e8 04 00 00	 push	 1256			; 000004e8H
  00373	8b 55 f8	 mov	 edx, DWORD PTR _m$12[ebp+4]
  00376	52		 push	 edx
  00377	8b 45 f4	 mov	 eax, DWORD PTR _m$12[ebp]
  0037a	50		 push	 eax
  0037b	e8 00 00 00 00	 call	 __allmul
  00380	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00383	8b 91 64 03 00
	00		 mov	 edx, DWORD PTR [ecx+868]
  00389	8b 84 02 e0 04
	00 00		 mov	 eax, DWORD PTR [edx+eax+1248]
  00390	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00392	8b f4		 mov	 esi, esp
  00394	50		 push	 eax
  00395	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00398	ff d2		 call	 edx
  0039a	3b f4		 cmp	 esi, esp
  0039c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a1	6a 00		 push	 0
  003a3	68 e8 04 00 00	 push	 1256			; 000004e8H
  003a8	8b 45 f8	 mov	 eax, DWORD PTR _m$12[ebp+4]
  003ab	50		 push	 eax
  003ac	8b 4d f4	 mov	 ecx, DWORD PTR _m$12[ebp]
  003af	51		 push	 ecx
  003b0	e8 00 00 00 00	 call	 __allmul
  003b5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003b8	8b 8a 64 03 00
	00		 mov	 ecx, DWORD PTR [edx+868]
  003be	c7 84 01 e0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+1248], 0
$LN28@Destroy:
; Line 857
  003c9	e9 8a fc ff ff	 jmp	 $LN30@Destroy
$LN32@Destroy:
; Line 859
  003ce	66 0f 57 c0	 xorpd	 xmm0, xmm0
  003d2	66 0f 13 45 ec	 movlpd	 QWORD PTR _i$11[ebp], xmm0
  003d7	eb 12		 jmp	 SHORT $LN21@Destroy
$LN20@Destroy:
  003d9	8b 55 ec	 mov	 edx, DWORD PTR _i$11[ebp]
  003dc	83 c2 01	 add	 edx, 1
  003df	8b 45 f0	 mov	 eax, DWORD PTR _i$11[ebp+4]
  003e2	83 d0 00	 adc	 eax, 0
  003e5	89 55 ec	 mov	 DWORD PTR _i$11[ebp], edx
  003e8	89 45 f0	 mov	 DWORD PTR _i$11[ebp+4], eax
$LN21@Destroy:
  003eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003ee	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  003f4	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  003f7	33 c9		 xor	 ecx, ecx
  003f9	89 45 ac	 mov	 DWORD PTR tv736[ebp], eax
  003fc	89 4d b0	 mov	 DWORD PTR tv736[ebp+4], ecx
  003ff	8b 55 f0	 mov	 edx, DWORD PTR _i$11[ebp+4]
  00402	3b 55 b0	 cmp	 edx, DWORD PTR tv736[ebp+4]
  00405	0f 87 bf 00 00
	00		 ja	 $LN19@Destroy
  0040b	72 0c		 jb	 SHORT $LN38@Destroy
  0040d	8b 45 ec	 mov	 eax, DWORD PTR _i$11[ebp]
  00410	3b 45 ac	 cmp	 eax, DWORD PTR tv736[ebp]
  00413	0f 83 b1 00 00
	00		 jae	 $LN19@Destroy
$LN38@Destroy:
; Line 861
  00419	6a 00		 push	 0
  0041b	68 20 01 00 00	 push	 288			; 00000120H
  00420	8b 4d f0	 mov	 ecx, DWORD PTR _i$11[ebp+4]
  00423	51		 push	 ecx
  00424	8b 55 ec	 mov	 edx, DWORD PTR _i$11[ebp]
  00427	52		 push	 edx
  00428	e8 00 00 00 00	 call	 __allmul
  0042d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00430	8b 91 50 03 00
	00		 mov	 edx, DWORD PTR [ecx+848]
  00436	83 bc 02 18 01
	00 00 00	 cmp	 DWORD PTR [edx+eax+280], 0
  0043e	0f 84 81 00 00
	00		 je	 $LN18@Destroy
  00444	6a 00		 push	 0
  00446	68 20 01 00 00	 push	 288			; 00000120H
  0044b	8b 45 f0	 mov	 eax, DWORD PTR _i$11[ebp+4]
  0044e	50		 push	 eax
  0044f	8b 4d ec	 mov	 ecx, DWORD PTR _i$11[ebp]
  00452	51		 push	 ecx
  00453	e8 00 00 00 00	 call	 __allmul
  00458	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0045b	8b 8a 50 03 00
	00		 mov	 ecx, DWORD PTR [edx+848]
  00461	8b b4 01 18 01
	00 00		 mov	 esi, DWORD PTR [ecx+eax+280]
  00468	6a 00		 push	 0
  0046a	68 20 01 00 00	 push	 288			; 00000120H
  0046f	8b 55 f0	 mov	 edx, DWORD PTR _i$11[ebp+4]
  00472	52		 push	 edx
  00473	8b 45 ec	 mov	 eax, DWORD PTR _i$11[ebp]
  00476	50		 push	 eax
  00477	e8 00 00 00 00	 call	 __allmul
  0047c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0047f	8b 91 50 03 00
	00		 mov	 edx, DWORD PTR [ecx+848]
  00485	8b 84 02 18 01
	00 00		 mov	 eax, DWORD PTR [edx+eax+280]
  0048c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0048e	8b f4		 mov	 esi, esp
  00490	50		 push	 eax
  00491	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00494	ff d2		 call	 edx
  00496	3b f4		 cmp	 esi, esp
  00498	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0049d	6a 00		 push	 0
  0049f	68 20 01 00 00	 push	 288			; 00000120H
  004a4	8b 45 f0	 mov	 eax, DWORD PTR _i$11[ebp+4]
  004a7	50		 push	 eax
  004a8	8b 4d ec	 mov	 ecx, DWORD PTR _i$11[ebp]
  004ab	51		 push	 ecx
  004ac	e8 00 00 00 00	 call	 __allmul
  004b1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004b4	8b 8a 50 03 00
	00		 mov	 ecx, DWORD PTR [edx+848]
  004ba	c7 84 01 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+280], 0
$LN18@Destroy:
; Line 862
  004c5	e9 0f ff ff ff	 jmp	 $LN20@Destroy
$LN19@Destroy:
; Line 864
  004ca	66 0f 57 c0	 xorpd	 xmm0, xmm0
  004ce	66 0f 13 45 e4	 movlpd	 QWORD PTR _i$10[ebp], xmm0
  004d3	eb 12		 jmp	 SHORT $LN17@Destroy
$LN16@Destroy:
  004d5	8b 55 e4	 mov	 edx, DWORD PTR _i$10[ebp]
  004d8	83 c2 01	 add	 edx, 1
  004db	8b 45 e8	 mov	 eax, DWORD PTR _i$10[ebp+4]
  004de	83 d0 00	 adc	 eax, 0
  004e1	89 55 e4	 mov	 DWORD PTR _i$10[ebp], edx
  004e4	89 45 e8	 mov	 DWORD PTR _i$10[ebp+4], eax
$LN17@Destroy:
  004e7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004ea	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  004f0	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  004f3	33 c9		 xor	 ecx, ecx
  004f5	89 45 a4	 mov	 DWORD PTR tv811[ebp], eax
  004f8	89 4d a8	 mov	 DWORD PTR tv811[ebp+4], ecx
  004fb	8b 55 e8	 mov	 edx, DWORD PTR _i$10[ebp+4]
  004fe	3b 55 a8	 cmp	 edx, DWORD PTR tv811[ebp+4]
  00501	0f 87 a3 00 00
	00		 ja	 $LN33@Destroy
  00507	72 0c		 jb	 SHORT $LN39@Destroy
  00509	8b 45 e4	 mov	 eax, DWORD PTR _i$10[ebp]
  0050c	3b 45 a4	 cmp	 eax, DWORD PTR tv811[ebp]
  0050f	0f 83 95 00 00
	00		 jae	 $LN33@Destroy
$LN39@Destroy:
; Line 866
  00515	6a 00		 push	 0
  00517	6a 20		 push	 32			; 00000020H
  00519	8b 4d e8	 mov	 ecx, DWORD PTR _i$10[ebp+4]
  0051c	51		 push	 ecx
  0051d	8b 55 e4	 mov	 edx, DWORD PTR _i$10[ebp]
  00520	52		 push	 edx
  00521	e8 00 00 00 00	 call	 __allmul
  00526	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00529	8b 91 54 03 00
	00		 mov	 edx, DWORD PTR [ecx+852]
  0052f	83 7c 02 18 00	 cmp	 DWORD PTR [edx+eax+24], 0
  00534	74 6f		 je	 SHORT $LN14@Destroy
  00536	6a 00		 push	 0
  00538	6a 20		 push	 32			; 00000020H
  0053a	8b 45 e8	 mov	 eax, DWORD PTR _i$10[ebp+4]
  0053d	50		 push	 eax
  0053e	8b 4d e4	 mov	 ecx, DWORD PTR _i$10[ebp]
  00541	51		 push	 ecx
  00542	e8 00 00 00 00	 call	 __allmul
  00547	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0054a	8b 8a 54 03 00
	00		 mov	 ecx, DWORD PTR [edx+852]
  00550	8b 74 01 18	 mov	 esi, DWORD PTR [ecx+eax+24]
  00554	6a 00		 push	 0
  00556	6a 20		 push	 32			; 00000020H
  00558	8b 55 e8	 mov	 edx, DWORD PTR _i$10[ebp+4]
  0055b	52		 push	 edx
  0055c	8b 45 e4	 mov	 eax, DWORD PTR _i$10[ebp]
  0055f	50		 push	 eax
  00560	e8 00 00 00 00	 call	 __allmul
  00565	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00568	8b 91 54 03 00
	00		 mov	 edx, DWORD PTR [ecx+852]
  0056e	8b 44 02 18	 mov	 eax, DWORD PTR [edx+eax+24]
  00572	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00574	8b f4		 mov	 esi, esp
  00576	50		 push	 eax
  00577	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0057a	ff d2		 call	 edx
  0057c	3b f4		 cmp	 esi, esp
  0057e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00583	6a 00		 push	 0
  00585	6a 20		 push	 32			; 00000020H
  00587	8b 45 e8	 mov	 eax, DWORD PTR _i$10[ebp+4]
  0058a	50		 push	 eax
  0058b	8b 4d e4	 mov	 ecx, DWORD PTR _i$10[ebp]
  0058e	51		 push	 ecx
  0058f	e8 00 00 00 00	 call	 __allmul
  00594	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00597	8b 8a 54 03 00
	00		 mov	 ecx, DWORD PTR [edx+852]
  0059d	c7 44 01 18 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+24], 0
$LN14@Destroy:
; Line 867
  005a5	e9 2b ff ff ff	 jmp	 $LN16@Destroy
$LN33@Destroy:
; Line 870
  005aa	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005ad	83 ba 68 03 00
	00 00		 cmp	 DWORD PTR [edx+872], 0
  005b4	0f 84 e0 00 00
	00		 je	 $LN13@Destroy
; Line 872
  005ba	66 0f 57 c0	 xorpd	 xmm0, xmm0
  005be	66 0f 13 45 dc	 movlpd	 QWORD PTR _i$9[ebp], xmm0
  005c3	eb 12		 jmp	 SHORT $LN12@Destroy
$LN11@Destroy:
  005c5	8b 45 dc	 mov	 eax, DWORD PTR _i$9[ebp]
  005c8	83 c0 01	 add	 eax, 1
  005cb	8b 4d e0	 mov	 ecx, DWORD PTR _i$9[ebp+4]
  005ce	83 d1 00	 adc	 ecx, 0
  005d1	89 45 dc	 mov	 DWORD PTR _i$9[ebp], eax
  005d4	89 4d e0	 mov	 DWORD PTR _i$9[ebp+4], ecx
$LN12@Destroy:
  005d7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005da	8b 82 4c 03 00
	00		 mov	 eax, DWORD PTR [edx+844]
  005e0	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  005e3	33 d2		 xor	 edx, edx
  005e5	89 4d 9c	 mov	 DWORD PTR tv887[ebp], ecx
  005e8	89 55 a0	 mov	 DWORD PTR tv887[ebp+4], edx
  005eb	8b 45 e0	 mov	 eax, DWORD PTR _i$9[ebp+4]
  005ee	3b 45 a0	 cmp	 eax, DWORD PTR tv887[ebp+4]
  005f1	0f 87 a3 00 00
	00		 ja	 $LN13@Destroy
  005f7	72 0c		 jb	 SHORT $LN40@Destroy
  005f9	8b 4d dc	 mov	 ecx, DWORD PTR _i$9[ebp]
  005fc	3b 4d 9c	 cmp	 ecx, DWORD PTR tv887[ebp]
  005ff	0f 83 95 00 00
	00		 jae	 $LN13@Destroy
$LN40@Destroy:
; Line 874
  00605	6a 00		 push	 0
  00607	6a 20		 push	 32			; 00000020H
  00609	8b 55 e0	 mov	 edx, DWORD PTR _i$9[ebp+4]
  0060c	52		 push	 edx
  0060d	8b 45 dc	 mov	 eax, DWORD PTR _i$9[ebp]
  00610	50		 push	 eax
  00611	e8 00 00 00 00	 call	 __allmul
  00616	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00619	8b 91 68 03 00
	00		 mov	 edx, DWORD PTR [ecx+872]
  0061f	83 7c 02 18 00	 cmp	 DWORD PTR [edx+eax+24], 0
  00624	74 6f		 je	 SHORT $LN9@Destroy
  00626	6a 00		 push	 0
  00628	6a 20		 push	 32			; 00000020H
  0062a	8b 45 e0	 mov	 eax, DWORD PTR _i$9[ebp+4]
  0062d	50		 push	 eax
  0062e	8b 4d dc	 mov	 ecx, DWORD PTR _i$9[ebp]
  00631	51		 push	 ecx
  00632	e8 00 00 00 00	 call	 __allmul
  00637	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0063a	8b 8a 68 03 00
	00		 mov	 ecx, DWORD PTR [edx+872]
  00640	8b 74 01 18	 mov	 esi, DWORD PTR [ecx+eax+24]
  00644	6a 00		 push	 0
  00646	6a 20		 push	 32			; 00000020H
  00648	8b 55 e0	 mov	 edx, DWORD PTR _i$9[ebp+4]
  0064b	52		 push	 edx
  0064c	8b 45 dc	 mov	 eax, DWORD PTR _i$9[ebp]
  0064f	50		 push	 eax
  00650	e8 00 00 00 00	 call	 __allmul
  00655	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00658	8b 91 68 03 00
	00		 mov	 edx, DWORD PTR [ecx+872]
  0065e	8b 44 02 18	 mov	 eax, DWORD PTR [edx+eax+24]
  00662	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00664	8b f4		 mov	 esi, esp
  00666	50		 push	 eax
  00667	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0066a	ff d2		 call	 edx
  0066c	3b f4		 cmp	 esi, esp
  0066e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00673	6a 00		 push	 0
  00675	6a 20		 push	 32			; 00000020H
  00677	8b 45 e0	 mov	 eax, DWORD PTR _i$9[ebp+4]
  0067a	50		 push	 eax
  0067b	8b 4d dc	 mov	 ecx, DWORD PTR _i$9[ebp]
  0067e	51		 push	 ecx
  0067f	e8 00 00 00 00	 call	 __allmul
  00684	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00687	8b 8a 68 03 00
	00		 mov	 ecx, DWORD PTR [edx+872]
  0068d	c7 44 01 18 00
	00 00 00	 mov	 DWORD PTR [ecx+eax+24], 0
$LN9@Destroy:
; Line 875
  00695	e9 2b ff ff ff	 jmp	 $LN11@Destroy
$LN13@Destroy:
; Line 877
  0069a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0069d	83 ba 68 03 00
	00 00		 cmp	 DWORD PTR [edx+872], 0
  006a4	74 25		 je	 SHORT $LN8@Destroy
  006a6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006a9	8b 88 68 03 00
	00		 mov	 ecx, DWORD PTR [eax+872]
  006af	89 4d d8	 mov	 DWORD PTR $T8[ebp], ecx
  006b2	8b 55 d8	 mov	 edx, DWORD PTR $T8[ebp]
  006b5	52		 push	 edx
  006b6	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  006bb	83 c4 04	 add	 esp, 4
  006be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006c1	c7 80 68 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+872], 0
$LN8@Destroy:
; Line 879
  006cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006ce	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  006d2	74 1f		 je	 SHORT $LN7@Destroy
  006d4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006d7	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  006da	89 45 d4	 mov	 DWORD PTR $T7[ebp], eax
  006dd	8b 4d d4	 mov	 ecx, DWORD PTR $T7[ebp]
  006e0	51		 push	 ecx
  006e1	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  006e6	83 c4 04	 add	 esp, 4
  006e9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006ec	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
$LN7@Destroy:
; Line 880
  006f3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006f6	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
; Line 881
  006fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00700	83 79 34 00	 cmp	 DWORD PTR [ecx+52], 0
  00704	74 1f		 je	 SHORT $LN6@Destroy
  00706	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00709	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0070c	89 45 d0	 mov	 DWORD PTR $T6[ebp], eax
  0070f	8b 4d d0	 mov	 ecx, DWORD PTR $T6[ebp]
  00712	51		 push	 ecx
  00713	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00718	83 c4 04	 add	 esp, 4
  0071b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0071e	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
$LN6@Destroy:
; Line 882
  00725	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00728	83 b8 74 03 00
	00 00		 cmp	 DWORD PTR [eax+884], 0
  0072f	74 25		 je	 SHORT $LN5@Destroy
  00731	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00734	8b 91 74 03 00
	00		 mov	 edx, DWORD PTR [ecx+884]
  0073a	89 55 cc	 mov	 DWORD PTR $T5[ebp], edx
  0073d	8b 45 cc	 mov	 eax, DWORD PTR $T5[ebp]
  00740	50		 push	 eax
  00741	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00746	83 c4 04	 add	 esp, 4
  00749	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0074c	c7 81 74 03 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+884], 0
$LN5@Destroy:
; Line 883
  00756	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00759	83 ba 78 03 00
	00 00		 cmp	 DWORD PTR [edx+888], 0
  00760	74 25		 je	 SHORT $LN4@Destroy
  00762	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00765	8b 88 78 03 00
	00		 mov	 ecx, DWORD PTR [eax+888]
  0076b	89 4d c8	 mov	 DWORD PTR $T4[ebp], ecx
  0076e	8b 55 c8	 mov	 edx, DWORD PTR $T4[ebp]
  00771	52		 push	 edx
  00772	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00777	83 c4 04	 add	 esp, 4
  0077a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0077d	c7 80 78 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+888], 0
$LN4@Destroy:
; Line 884
  00787	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0078a	83 b9 7c 03 00
	00 00		 cmp	 DWORD PTR [ecx+892], 0
  00791	74 25		 je	 SHORT $LN3@Destroy
  00793	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00796	8b 82 7c 03 00
	00		 mov	 eax, DWORD PTR [edx+892]
  0079c	89 45 c4	 mov	 DWORD PTR $T3[ebp], eax
  0079f	8b 4d c4	 mov	 ecx, DWORD PTR $T3[ebp]
  007a2	51		 push	 ecx
  007a3	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  007a8	83 c4 04	 add	 esp, 4
  007ab	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007ae	c7 82 7c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+892], 0
$LN3@Destroy:
; Line 886
  007b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007bb	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  007bf	74 1f		 je	 SHORT $LN2@Destroy
  007c1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007c4	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  007c7	89 55 c0	 mov	 DWORD PTR $T2[ebp], edx
  007ca	8b 45 c0	 mov	 eax, DWORD PTR $T2[ebp]
  007cd	50		 push	 eax
  007ce	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  007d3	83 c4 04	 add	 esp, 4
  007d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007d9	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
$LN2@Destroy:
; Line 887
  007e0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007e3	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  007e7	74 1f		 je	 SHORT $LN1@Destroy
  007e9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007ec	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  007ef	89 4d bc	 mov	 DWORD PTR $T1[ebp], ecx
  007f2	8b 55 bc	 mov	 edx, DWORD PTR $T1[ebp]
  007f5	52		 push	 edx
  007f6	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  007fb	83 c4 04	 add	 esp, 4
  007fe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00801	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0
$LN1@Destroy:
; Line 889
  00808	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0080b	c7 81 4c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+844], 0
; Line 890
  00815	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00818	c7 82 50 03 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+848], 0
; Line 891
  00822	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00825	c7 80 54 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+852], 0
; Line 892
  0082f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00832	c7 81 58 03 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+856], 0
; Line 893
  0083c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0083f	c7 82 5c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+860], 0
; Line 894
  00849	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0084c	c7 80 60 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+864], 0
; Line 895
  00856	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00859	c7 81 64 03 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+868], 0
; Line 897
  00863	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00866	c7 82 6c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+876], 0
; Line 898
  00870	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00873	c7 80 70 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+880], 0
$LN35@Destroy:
; Line 900
  0087d	5f		 pop	 edi
  0087e	5e		 pop	 esi
  0087f	83 c4 64	 add	 esp, 100		; 00000064H
  00882	3b ec		 cmp	 ebp, esp
  00884	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00889	8b e5		 mov	 esp, ebp
  0088b	5d		 pop	 ebp
  0088c	c3		 ret	 0
?Destroy@CDXUTSDKMesh@@UAEXXZ ENDP			; CDXUTSDKMesh::Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -640						; size = 4
_pFrame$2 = -636					; size = 4
_i$3 = -632						; size = 4
_BaseOffset$ = -628					; size = 8
_fileheader$ = -616					; size = 40
_hFile$ = -572						; size = 4
_strPath$ = -564					; size = 520
_liMove$ = -36						; size = 8
_dwBytesRead$ = -20					; size = 4
_hr$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_szFileName$ = 8					; size = 4
?LoadAnimation@CDXUTSDKMesh@@UAEJPB_W@Z PROC		; CDXUTSDKMesh::LoadAnimation
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 761
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 02 00
	00		 sub	 esp, 640		; 00000280H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd 80 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-640]
  00012	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 762
  0002c	c7 45 f4 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
; Line 763
  00033	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _dwBytesRead$[ebp], 0
; Line 768
  0003a	8b 45 08	 mov	 eax, DWORD PTR _szFileName$[ebp]
  0003d	50		 push	 eax
  0003e	68 04 01 00 00	 push	 260			; 00000104H
  00043	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR _strPath$[ebp]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 ?DXUTFindDXSDKMediaFileCch@@YGJPA_WHPB_W@Z ; DXUTFindDXSDKMediaFileCch
  0004f	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
  00052	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00056	7d 1f		 jge	 SHORT $LN14@LoadAnimat
  00058	6a 01		 push	 1
  0005a	68 00 00 00 00	 push	 OFFSET $SG155239
  0005f	8b 55 f4	 mov	 edx, DWORD PTR _hr$[ebp]
  00062	52		 push	 edx
  00063	68 00 03 00 00	 push	 768			; 00000300H
  00068	68 00 00 00 00	 push	 OFFSET $SG155240
  0006d	e8 00 00 00 00	 call	 ?DXUTTrace@@YGJPBDKJPB_W_N@Z ; DXUTTrace
  00072	e9 3c 02 00 00	 jmp	 $LN15@LoadAnimat
$LN14@LoadAnimat:
; Line 772
  00077	8b f4		 mov	 esi, esp
  00079	6a 00		 push	 0
  0007b	68 00 00 00 08	 push	 134217728		; 08000000H
  00080	6a 03		 push	 3
  00082	6a 00		 push	 0
  00084	6a 01		 push	 1
  00086	6a 01		 push	 1
  00088	8d 85 cc fd ff
	ff		 lea	 eax, DWORD PTR _strPath$[ebp]
  0008e	50		 push	 eax
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileW@28
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	89 85 c4 fd ff
	ff		 mov	 DWORD PTR _hFile$[ebp], eax
; Line 773
  000a2	83 bd c4 fd ff
	ff ff		 cmp	 DWORD PTR _hFile$[ebp], -1
  000a9	75 0a		 jne	 SHORT $LN13@LoadAnimat
; Line 774
  000ab	b8 03 09 04 80	 mov	 eax, -2147219197	; 80040903H
  000b0	e9 fe 01 00 00	 jmp	 $LN15@LoadAnimat
$LN13@LoadAnimat:
; Line 779
  000b5	8b f4		 mov	 esi, esp
  000b7	6a 00		 push	 0
  000b9	8d 4d ec	 lea	 ecx, DWORD PTR _dwBytesRead$[ebp]
  000bc	51		 push	 ecx
  000bd	6a 28		 push	 40			; 00000028H
  000bf	8d 95 98 fd ff
	ff		 lea	 edx, DWORD PTR _fileheader$[ebp]
  000c5	52		 push	 edx
  000c6	8b 85 c4 fd ff
	ff		 mov	 eax, DWORD PTR _hFile$[ebp]
  000cc	50		 push	 eax
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  000d3	3b f4		 cmp	 esi, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	85 c0		 test	 eax, eax
  000dc	75 0a		 jne	 SHORT $LN12@LoadAnimat
; Line 780
  000de	e9 b7 01 00 00	 jmp	 $Error$23
  000e3	e9 b2 01 00 00	 jmp	 $Error$23
$LN12@LoadAnimat:
; Line 783
  000e8	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  000ed	8b 8d b0 fd ff
	ff		 mov	 ecx, DWORD PTR _fileheader$[ebp+24]
  000f3	83 c1 28	 add	 ecx, 40			; 00000028H
  000f6	8b 95 b4 fd ff
	ff		 mov	 edx, DWORD PTR _fileheader$[ebp+28]
  000fc	83 d2 00	 adc	 edx, 0
  000ff	51		 push	 ecx
  00100	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  00105	83 c4 08	 add	 esp, 8
  00108	89 85 80 fd ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0010e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00111	8b 8d 80 fd ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00117	89 48 34	 mov	 DWORD PTR [eax+52], ecx
; Line 784
  0011a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0011d	83 7a 34 00	 cmp	 DWORD PTR [edx+52], 0
  00121	75 11		 jne	 SHORT $LN10@LoadAnimat
; Line 786
  00123	c7 45 f4 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
; Line 787
  0012a	e9 6b 01 00 00	 jmp	 $Error$23
  0012f	e9 66 01 00 00	 jmp	 $Error$23
$LN10@LoadAnimat:
; Line 791
  00134	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00138	66 0f 13 45 dc	 movlpd	 QWORD PTR _liMove$[ebp], xmm0
; Line 792
  0013d	8b f4		 mov	 esi, esp
  0013f	6a 00		 push	 0
  00141	6a 00		 push	 0
  00143	8b 45 e0	 mov	 eax, DWORD PTR _liMove$[ebp+4]
  00146	50		 push	 eax
  00147	8b 4d dc	 mov	 ecx, DWORD PTR _liMove$[ebp]
  0014a	51		 push	 ecx
  0014b	8b 95 c4 fd ff
	ff		 mov	 edx, DWORD PTR _hFile$[ebp]
  00151	52		 push	 edx
  00152	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointerEx@20
  00158	3b f4		 cmp	 esi, esp
  0015a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015f	85 c0		 test	 eax, eax
  00161	75 0a		 jne	 SHORT $LN8@LoadAnimat
; Line 793
  00163	e9 32 01 00 00	 jmp	 $Error$23
  00168	e9 2d 01 00 00	 jmp	 $Error$23
$LN8@LoadAnimat:
; Line 795
  0016d	8b f4		 mov	 esi, esp
  0016f	6a 00		 push	 0
  00171	8d 45 ec	 lea	 eax, DWORD PTR _dwBytesRead$[ebp]
  00174	50		 push	 eax
  00175	8b 8d b0 fd ff
	ff		 mov	 ecx, DWORD PTR _fileheader$[ebp+24]
  0017b	83 c1 28	 add	 ecx, 40			; 00000028H
  0017e	8b 95 b4 fd ff
	ff		 mov	 edx, DWORD PTR _fileheader$[ebp+28]
  00184	83 d2 00	 adc	 edx, 0
  00187	51		 push	 ecx
  00188	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0018b	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0018e	51		 push	 ecx
  0018f	8b 95 c4 fd ff
	ff		 mov	 edx, DWORD PTR _hFile$[ebp]
  00195	52		 push	 edx
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  0019c	3b f4		 cmp	 esi, esp
  0019e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a3	85 c0		 test	 eax, eax
  001a5	75 0a		 jne	 SHORT $LN6@LoadAnimat
; Line 796
  001a7	e9 ee 00 00 00	 jmp	 $Error$23
  001ac	e9 e9 00 00 00	 jmp	 $Error$23
$LN6@LoadAnimat:
; Line 799
  001b1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001b4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b7	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  001ba	89 90 6c 03 00
	00		 mov	 DWORD PTR [eax+876], edx
; Line 800
  001c0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001c3	8b 88 6c 03 00
	00		 mov	 ecx, DWORD PTR [eax+876]
  001c9	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  001cc	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001cf	03 50 34	 add	 edx, DWORD PTR [eax+52]
  001d2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001d5	89 91 70 03 00
	00		 mov	 DWORD PTR [ecx+880], edx
; Line 802
  001db	c7 85 8c fd ff
	ff 28 00 00 00	 mov	 DWORD PTR _BaseOffset$[ebp], 40 ; 00000028H
  001e5	c7 85 90 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _BaseOffset$[ebp+4], 0
; Line 803
  001ef	c7 85 88 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$3[ebp], 0
  001f9	eb 0f		 jmp	 SHORT $LN4@LoadAnimat
$LN3@LoadAnimat:
  001fb	8b 95 88 fd ff
	ff		 mov	 edx, DWORD PTR _i$3[ebp]
  00201	83 c2 01	 add	 edx, 1
  00204	89 95 88 fd ff
	ff		 mov	 DWORD PTR _i$3[ebp], edx
$LN4@LoadAnimat:
  0020a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0020d	8b 88 6c 03 00
	00		 mov	 ecx, DWORD PTR [eax+876]
  00213	8b 95 88 fd ff
	ff		 mov	 edx, DWORD PTR _i$3[ebp]
  00219	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0021c	73 75		 jae	 SHORT $LN2@LoadAnimat
; Line 807
  0021e	6b 85 88 fd ff
	ff 70		 imul	 eax, DWORD PTR _i$3[ebp], 112
  00225	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00228	8b 91 70 03 00
	00		 mov	 edx, DWORD PTR [ecx+880]
  0022e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00231	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  00234	03 4c 02 68	 add	 ecx, DWORD PTR [edx+eax+104]
  00238	03 8d 8c fd ff
	ff		 add	 ecx, DWORD PTR _BaseOffset$[ebp]
  0023e	6b 95 88 fd ff
	ff 70		 imul	 edx, DWORD PTR _i$3[ebp], 112
  00245	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00248	8b 80 70 03 00
	00		 mov	 eax, DWORD PTR [eax+880]
  0024e	89 4c 10 68	 mov	 DWORD PTR [eax+edx+104], ecx
; Line 808
  00252	6b 8d 88 fd ff
	ff 70		 imul	 ecx, DWORD PTR _i$3[ebp], 112
  00259	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0025c	8b 82 70 03 00
	00		 mov	 eax, DWORD PTR [edx+880]
  00262	03 c1		 add	 eax, ecx
  00264	50		 push	 eax
  00265	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00268	e8 00 00 00 00	 call	 ?FindFrame@CDXUTSDKMesh@@QBEPAUSDKMESH_FRAME@@PBD@Z ; CDXUTSDKMesh::FindFrame
  0026d	89 85 84 fd ff
	ff		 mov	 DWORD PTR _pFrame$2[ebp], eax
; Line 809
  00273	83 bd 84 fd ff
	ff 00		 cmp	 DWORD PTR _pFrame$2[ebp], 0
  0027a	74 12		 je	 SHORT $LN1@LoadAnimat
; Line 811
  0027c	8b 8d 84 fd ff
	ff		 mov	 ecx, DWORD PTR _pFrame$2[ebp]
  00282	8b 95 88 fd ff
	ff		 mov	 edx, DWORD PTR _i$3[ebp]
  00288	89 91 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], edx
$LN1@LoadAnimat:
; Line 813
  0028e	e9 68 ff ff ff	 jmp	 $LN3@LoadAnimat
$LN2@LoadAnimat:
; Line 815
  00293	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$Error$23:
; Line 817
  0029a	8b f4		 mov	 esi, esp
  0029c	8b 85 c4 fd ff
	ff		 mov	 eax, DWORD PTR _hFile$[ebp]
  002a2	50		 push	 eax
  002a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  002a9	3b f4		 cmp	 esi, esp
  002ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 818
  002b0	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]
$LN15@LoadAnimat:
; Line 819
  002b3	52		 push	 edx
  002b4	8b cd		 mov	 ecx, ebp
  002b6	50		 push	 eax
  002b7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN22@LoadAnimat
  002bd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002c2	58		 pop	 eax
  002c3	5a		 pop	 edx
  002c4	5f		 pop	 edi
  002c5	5e		 pop	 esi
  002c6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c9	33 cd		 xor	 ecx, ebp
  002cb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d0	81 c4 80 02 00
	00		 add	 esp, 640		; 00000280H
  002d6	3b ec		 cmp	 ebp, esp
  002d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002dd	8b e5		 mov	 esp, ebp
  002df	5d		 pop	 ebp
  002e0	c2 04 00	 ret	 4
  002e3	90		 npad	 1
$LN22@LoadAnimat:
  002e4	04 00 00 00	 DD	 4
  002e8	00 00 00 00	 DD	 $LN21@LoadAnimat
$LN21@LoadAnimat:
  002ec	ec ff ff ff	 DD	 -20			; ffffffecH
  002f0	04 00 00 00	 DD	 4
  002f4	00 00 00 00	 DD	 $LN17@LoadAnimat
  002f8	dc ff ff ff	 DD	 -36			; ffffffdcH
  002fc	08 00 00 00	 DD	 8
  00300	00 00 00 00	 DD	 $LN18@LoadAnimat
  00304	cc fd ff ff	 DD	 -564			; fffffdccH
  00308	08 02 00 00	 DD	 520			; 00000208H
  0030c	00 00 00 00	 DD	 $LN19@LoadAnimat
  00310	98 fd ff ff	 DD	 -616			; fffffd98H
  00314	28 00 00 00	 DD	 40			; 00000028H
  00318	00 00 00 00	 DD	 $LN20@LoadAnimat
$LN20@LoadAnimat:
  0031c	66		 DB	 102			; 00000066H
  0031d	69		 DB	 105			; 00000069H
  0031e	6c		 DB	 108			; 0000006cH
  0031f	65		 DB	 101			; 00000065H
  00320	68		 DB	 104			; 00000068H
  00321	65		 DB	 101			; 00000065H
  00322	61		 DB	 97			; 00000061H
  00323	64		 DB	 100			; 00000064H
  00324	65		 DB	 101			; 00000065H
  00325	72		 DB	 114			; 00000072H
  00326	00		 DB	 0
$LN19@LoadAnimat:
  00327	73		 DB	 115			; 00000073H
  00328	74		 DB	 116			; 00000074H
  00329	72		 DB	 114			; 00000072H
  0032a	50		 DB	 80			; 00000050H
  0032b	61		 DB	 97			; 00000061H
  0032c	74		 DB	 116			; 00000074H
  0032d	68		 DB	 104			; 00000068H
  0032e	00		 DB	 0
$LN18@LoadAnimat:
  0032f	6c		 DB	 108			; 0000006cH
  00330	69		 DB	 105			; 00000069H
  00331	4d		 DB	 77			; 0000004dH
  00332	6f		 DB	 111			; 0000006fH
  00333	76		 DB	 118			; 00000076H
  00334	65		 DB	 101			; 00000065H
  00335	00		 DB	 0
$LN17@LoadAnimat:
  00336	64		 DB	 100			; 00000064H
  00337	77		 DB	 119			; 00000077H
  00338	42		 DB	 66			; 00000042H
  00339	79		 DB	 121			; 00000079H
  0033a	74		 DB	 116			; 00000074H
  0033b	65		 DB	 101			; 00000065H
  0033c	73		 DB	 115			; 00000073H
  0033d	52		 DB	 82			; 00000052H
  0033e	65		 DB	 101			; 00000065H
  0033f	61		 DB	 97			; 00000061H
  00340	64		 DB	 100			; 00000064H
  00341	00		 DB	 0
?LoadAnimation@CDXUTSDKMesh@@UAEJPB_W@Z ENDP		; CDXUTSDKMesh::LoadAnimation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDev11$ = 8						; size = 4
_pData$ = 12						; size = 4
_DataBytes$ = 16					; size = 4
_bCopyStatic$ = 20					; size = 1
_pLoaderCallbacks$ = 24					; size = 4
?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z PROC ; CDXUTSDKMesh::Create
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 754
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 755
  0000f	8b f4		 mov	 esi, esp
  00011	8b 45 18	 mov	 eax, DWORD PTR _pLoaderCallbacks$[ebp]
  00014	50		 push	 eax
  00015	0f b6 4d 14	 movzx	 ecx, BYTE PTR _bCopyStatic$[ebp]
  00019	51		 push	 ecx
  0001a	8b 55 10	 mov	 edx, DWORD PTR _DataBytes$[ebp]
  0001d	52		 push	 edx
  0001e	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _pDev11$[ebp]
  00025	51		 push	 ecx
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	8b 02		 mov	 eax, DWORD PTR [edx]
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00031	ff d2		 call	 edx
  00033	3b f4		 cmp	 esi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 756
  0003a	5e		 pop	 esi
  0003b	83 c4 04	 add	 esp, 4
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 14 00	 ret	 20			; 00000014H
?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z ENDP ; CDXUTSDKMesh::Create
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pDev11$ = 8						; size = 4
_szFileName$ = 12					; size = 4
_pLoaderCallbacks$ = 16					; size = 4
?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z PROC ; CDXUTSDKMesh::Create
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 747
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 748
  0000f	8b f4		 mov	 esi, esp
  00011	8b 45 10	 mov	 eax, DWORD PTR _pLoaderCallbacks$[ebp]
  00014	50		 push	 eax
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR _szFileName$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 08	 mov	 edx, DWORD PTR _pDev11$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 10		 mov	 edx, DWORD PTR [eax]
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8b 02		 mov	 eax, DWORD PTR [edx]
  00027	ff d0		 call	 eax
  00029	3b f4		 cmp	 esi, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 749
  00030	5e		 pop	 esi
  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 0c 00	 ret	 12			; 0000000cH
?Create@CDXUTSDKMesh@@UAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z ENDP ; CDXUTSDKMesh::Create
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDXUTSDKMesh@@UAE@XZ PROC				; CDXUTSDKMesh::~CDXUTSDKMesh
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 740
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CDXUTSDKMesh@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CDXUTSDKMesh@@6B@
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; Line 741
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?Destroy@CDXUTSDKMesh@@UAEXXZ ; CDXUTSDKMesh::Destroy
; Line 742
  00045	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	83 c1 14	 add	 ecx, 20			; 00000014H
  00052	e8 00 00 00 00	 call	 ??1?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::~vector<unsigned char *,std::allocator<unsigned char *> >
  00057	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00061	59		 pop	 ecx
  00062	83 c4 10	 add	 esp, 16			; 00000010H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CDXUTSDKMesh@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::~vector<unsigned char *,std::allocator<unsigned char *> >
__ehhandler$??1CDXUTSDKMesh@@UAE@XZ:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CDXUTSDKMesh@@UAE@XZ
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CDXUTSDKMesh@@UAE@XZ ENDP				; CDXUTSDKMesh::~CDXUTSDKMesh
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDXUTSDKMesh@@QAE@XZ PROC				; CDXUTSDKMesh::CDXUTSDKMesh
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 734
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CDXUTSDKMesh@@6B@
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	c6 42 08 00	 mov	 BYTE PTR [edx+8], 0
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	83 c1 14	 add	 ecx, 20			; 00000014H
  00042	e8 00 00 00 00	 call	 ??0?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::vector<unsigned char *,std::allocator<unsigned char *> >
  00047	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004a	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0
  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  00065	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00068	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00072	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0
  00083	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00086	c7 82 4c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+844], 0
  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	c7 80 68 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+872], 0
  0009d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	c7 81 6c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+876], 0
  000aa	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ad	c7 82 74 03 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+884], 0
  000b7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ba	c7 80 78 03 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+888], 0
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	c7 81 7c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+892], 0
; Line 735
  000d1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	83 c4 04	 add	 esp, 4
  000d7	3b ec		 cmp	 ebp, esp
  000d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
??0CDXUTSDKMesh@@QAE@XZ ENDP				; CDXUTSDKMesh::CDXUTSDKMesh
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iFrame$ = 8						; size = 4
_bAdjacent$ = 12					; size = 1
_pd3dDeviceContext$ = 16				; size = 4
_iDiffuseSlot$ = 20					; size = 4
_iNormalSlot$ = 24					; size = 4
_iSpecularSlot$ = 28					; size = 4
?RenderFrame@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z PROC ; CDXUTSDKMesh::RenderFrame
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 692
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 693
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00015	74 0c		 je	 SHORT $LN4@RenderFram
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 b9 60 03 00
	00 00		 cmp	 DWORD PTR [ecx+864], 0
  00021	75 05		 jne	 SHORT $LN5@RenderFram
$LN4@RenderFram:
; Line 694
  00023	e9 db 00 00 00	 jmp	 $LN6@RenderFram
$LN5@RenderFram:
; Line 696
  00028	69 55 08 b8 00
	00 00		 imul	 edx, DWORD PTR _iFrame$[ebp], 184
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 88 60 03 00
	00		 mov	 ecx, DWORD PTR [eax+864]
  00038	83 7c 11 64 ff	 cmp	 DWORD PTR [ecx+edx+100], -1
  0003d	74 32		 je	 SHORT $LN3@RenderFram
; Line 703
  0003f	8b 55 1c	 mov	 edx, DWORD PTR _iSpecularSlot$[ebp]
  00042	52		 push	 edx
  00043	8b 45 18	 mov	 eax, DWORD PTR _iNormalSlot$[ebp]
  00046	50		 push	 eax
  00047	8b 4d 14	 mov	 ecx, DWORD PTR _iDiffuseSlot$[ebp]
  0004a	51		 push	 ecx
  0004b	8b 55 10	 mov	 edx, DWORD PTR _pd3dDeviceContext$[ebp]
  0004e	52		 push	 edx
  0004f	0f b6 45 0c	 movzx	 eax, BYTE PTR _bAdjacent$[ebp]
  00053	50		 push	 eax
  00054	69 4d 08 b8 00
	00 00		 imul	 ecx, DWORD PTR _iFrame$[ebp], 184
  0005b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 82 60 03 00
	00		 mov	 eax, DWORD PTR [edx+864]
  00064	8b 4c 08 64	 mov	 ecx, DWORD PTR [eax+ecx+100]
  00068	51		 push	 ecx
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?RenderMesh@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderMesh
$LN3@RenderFram:
; Line 707
  00071	69 55 08 b8 00
	00 00		 imul	 edx, DWORD PTR _iFrame$[ebp], 184
  00078	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 88 60 03 00
	00		 mov	 ecx, DWORD PTR [eax+864]
  00081	83 7c 11 6c ff	 cmp	 DWORD PTR [ecx+edx+108], -1
  00086	74 32		 je	 SHORT $LN2@RenderFram
; Line 709
  00088	8b 55 1c	 mov	 edx, DWORD PTR _iSpecularSlot$[ebp]
  0008b	52		 push	 edx
  0008c	8b 45 18	 mov	 eax, DWORD PTR _iNormalSlot$[ebp]
  0008f	50		 push	 eax
  00090	8b 4d 14	 mov	 ecx, DWORD PTR _iDiffuseSlot$[ebp]
  00093	51		 push	 ecx
  00094	8b 55 10	 mov	 edx, DWORD PTR _pd3dDeviceContext$[ebp]
  00097	52		 push	 edx
  00098	0f b6 45 0c	 movzx	 eax, BYTE PTR _bAdjacent$[ebp]
  0009c	50		 push	 eax
  0009d	69 4d 08 b8 00
	00 00		 imul	 ecx, DWORD PTR _iFrame$[ebp], 184
  000a4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a7	8b 82 60 03 00
	00		 mov	 eax, DWORD PTR [edx+864]
  000ad	8b 4c 08 6c	 mov	 ecx, DWORD PTR [eax+ecx+108]
  000b1	51		 push	 ecx
  000b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	e8 00 00 00 00	 call	 ?RenderFrame@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderFrame
$LN2@RenderFram:
; Line 712
  000ba	69 55 08 b8 00
	00 00		 imul	 edx, DWORD PTR _iFrame$[ebp], 184
  000c1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	8b 88 60 03 00
	00		 mov	 ecx, DWORD PTR [eax+864]
  000ca	83 7c 11 70 ff	 cmp	 DWORD PTR [ecx+edx+112], -1
  000cf	74 32		 je	 SHORT $LN6@RenderFram
; Line 714
  000d1	8b 55 1c	 mov	 edx, DWORD PTR _iSpecularSlot$[ebp]
  000d4	52		 push	 edx
  000d5	8b 45 18	 mov	 eax, DWORD PTR _iNormalSlot$[ebp]
  000d8	50		 push	 eax
  000d9	8b 4d 14	 mov	 ecx, DWORD PTR _iDiffuseSlot$[ebp]
  000dc	51		 push	 ecx
  000dd	8b 55 10	 mov	 edx, DWORD PTR _pd3dDeviceContext$[ebp]
  000e0	52		 push	 edx
  000e1	0f b6 45 0c	 movzx	 eax, BYTE PTR _bAdjacent$[ebp]
  000e5	50		 push	 eax
  000e6	69 4d 08 b8 00
	00 00		 imul	 ecx, DWORD PTR _iFrame$[ebp], 184
  000ed	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f0	8b 82 60 03 00
	00		 mov	 eax, DWORD PTR [edx+864]
  000f6	8b 4c 08 70	 mov	 ecx, DWORD PTR [eax+ecx+112]
  000fa	51		 push	 ecx
  000fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fe	e8 00 00 00 00	 call	 ?RenderFrame@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ; CDXUTSDKMesh::RenderFrame
$LN6@RenderFram:
; Line 715
  00103	83 c4 04	 add	 esp, 4
  00106	3b ec		 cmp	 ebp, esp
  00108	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 18 00	 ret	 24			; 00000018H
?RenderFrame@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ENDP ; CDXUTSDKMesh::RenderFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv181 = -484						; size = 4
tv148 = -480						; size = 4
tv273 = -476						; size = 8
_VertexStart$1 = -468					; size = 4
_IndexStart$2 = -464					; size = 4
_IndexCount$3 = -460					; size = 4
_subset$4 = -456					; size = 4
_PrimType$ = -452					; size = 4
_pMat$ = -448						; size = 4
_pSubset$ = -444					; size = 4
_ibFormat$ = -440					; size = 4
_pIB$ = -436						; size = 4
_pIndexBufferArray$ = -432				; size = 4
_i$5 = -428						; size = 8
_pVB$ = -416						; size = 128
_Offsets$ = -280					; size = 128
_Strides$ = -144					; size = 128
_pMesh$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_iMesh$ = 8						; size = 4
_bAdjacent$ = 12					; size = 1
_pd3dDeviceContext$ = 16				; size = 4
_iDiffuseSlot$ = 20					; size = 4
_iNormalSlot$ = 24					; size = 4
_iSpecularSlot$ = 28					; size = 4
?RenderMesh@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z PROC ; CDXUTSDKMesh::RenderMesh
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 592
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 01 00
	00		 sub	 esp, 484		; 000001e4H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd 1c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-484]
  00012	b9 79 00 00 00	 mov	 ecx, 121		; 00000079H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 593
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?GetOutstandingBufferResources@CDXUTSDKMesh@@QBEIXZ ; CDXUTSDKMesh::GetOutstandingBufferResources
  00034	85 c0		 test	 eax, eax
  00036	76 05		 jbe	 SHORT $LN25@RenderMesh
; Line 594
  00038	e9 c0 04 00 00	 jmp	 $LN26@RenderMesh
$LN25@RenderMesh:
; Line 596
  0003d	69 45 08 e0 00
	00 00		 imul	 eax, DWORD PTR _iMesh$[ebp], 224
  00044	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	03 81 58 03 00
	00		 add	 eax, DWORD PTR [ecx+856]
  0004d	89 45 f4	 mov	 DWORD PTR _pMesh$[ebp], eax
; Line 602
  00050	8b 55 f4	 mov	 edx, DWORD PTR _pMesh$[ebp]
  00053	0f b6 42 64	 movzx	 eax, BYTE PTR [edx+100]
  00057	83 f8 20	 cmp	 eax, 32			; 00000020H
  0005a	7e 05		 jle	 SHORT $LN24@RenderMesh
; Line 603
  0005c	e9 9c 04 00 00	 jmp	 $LN26@RenderMesh
$LN24@RenderMesh:
; Line 605
  00061	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00065	66 0f 13 85 54
	fe ff ff	 movlpd	 QWORD PTR _i$5[ebp], xmm0
  0006d	eb 1e		 jmp	 SHORT $LN23@RenderMesh
$LN22@RenderMesh:
  0006f	8b 8d 54 fe ff
	ff		 mov	 ecx, DWORD PTR _i$5[ebp]
  00075	83 c1 01	 add	 ecx, 1
  00078	8b 95 58 fe ff
	ff		 mov	 edx, DWORD PTR _i$5[ebp+4]
  0007e	83 d2 00	 adc	 edx, 0
  00081	89 8d 54 fe ff
	ff		 mov	 DWORD PTR _i$5[ebp], ecx
  00087	89 95 58 fe ff
	ff		 mov	 DWORD PTR _i$5[ebp+4], edx
$LN23@RenderMesh:
  0008d	8b 45 f4	 mov	 eax, DWORD PTR _pMesh$[ebp]
  00090	0f b6 40 64	 movzx	 eax, BYTE PTR [eax+100]
  00094	99		 cdq
  00095	89 85 24 fe ff
	ff		 mov	 DWORD PTR tv273[ebp], eax
  0009b	89 95 28 fe ff
	ff		 mov	 DWORD PTR tv273[ebp+4], edx
  000a1	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _i$5[ebp+4]
  000a7	3b 8d 28 fe ff
	ff		 cmp	 ecx, DWORD PTR tv273[ebp+4]
  000ad	0f 87 d8 00 00
	00		 ja	 $LN21@RenderMesh
  000b3	72 12		 jb	 SHORT $LN28@RenderMesh
  000b5	8b 95 54 fe ff
	ff		 mov	 edx, DWORD PTR _i$5[ebp]
  000bb	3b 95 24 fe ff
	ff		 cmp	 edx, DWORD PTR tv273[ebp]
  000c1	0f 83 c4 00 00
	00		 jae	 $LN21@RenderMesh
$LN28@RenderMesh:
; Line 607
  000c7	6a 00		 push	 0
  000c9	6a 04		 push	 4
  000cb	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp+4]
  000d1	50		 push	 eax
  000d2	8b 8d 54 fe ff
	ff		 mov	 ecx, DWORD PTR _i$5[ebp]
  000d8	51		 push	 ecx
  000d9	e8 00 00 00 00	 call	 __allmul
  000de	8b 55 f4	 mov	 edx, DWORD PTR _pMesh$[ebp]
  000e1	69 74 02 68 20
	01 00 00	 imul	 esi, DWORD PTR [edx+eax+104], 288
  000e9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ec	8b b8 50 03 00
	00		 mov	 edi, DWORD PTR [eax+848]
  000f2	6a 00		 push	 0
  000f4	6a 04		 push	 4
  000f6	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _i$5[ebp+4]
  000fc	51		 push	 ecx
  000fd	8b 95 54 fe ff
	ff		 mov	 edx, DWORD PTR _i$5[ebp]
  00103	52		 push	 edx
  00104	e8 00 00 00 00	 call	 __allmul
  00109	8b 8c 37 18 01
	00 00		 mov	 ecx, DWORD PTR [edi+esi+280]
  00110	89 8c 05 60 fe
	ff ff		 mov	 DWORD PTR _pVB$[ebp+eax], ecx
; Line 608
  00117	6a 00		 push	 0
  00119	6a 04		 push	 4
  0011b	8b 95 58 fe ff
	ff		 mov	 edx, DWORD PTR _i$5[ebp+4]
  00121	52		 push	 edx
  00122	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 __allmul
  0012e	8b 4d f4	 mov	 ecx, DWORD PTR _pMesh$[ebp]
  00131	69 54 01 68 20
	01 00 00	 imul	 edx, DWORD PTR [ecx+eax+104], 288
  00139	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0013c	8b 88 50 03 00
	00		 mov	 ecx, DWORD PTR [eax+848]
  00142	8b 74 11 10	 mov	 esi, DWORD PTR [ecx+edx+16]
  00146	6a 00		 push	 0
  00148	6a 04		 push	 4
  0014a	8b 95 58 fe ff
	ff		 mov	 edx, DWORD PTR _i$5[ebp+4]
  00150	52		 push	 edx
  00151	8b 85 54 fe ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 __allmul
  0015d	89 b4 05 70 ff
	ff ff		 mov	 DWORD PTR _Strides$[ebp+eax], esi
; Line 609
  00164	6a 00		 push	 0
  00166	6a 04		 push	 4
  00168	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR _i$5[ebp+4]
  0016e	51		 push	 ecx
  0016f	8b 95 54 fe ff
	ff		 mov	 edx, DWORD PTR _i$5[ebp]
  00175	52		 push	 edx
  00176	e8 00 00 00 00	 call	 __allmul
  0017b	c7 84 05 e8 fe
	ff ff 00 00 00
	00		 mov	 DWORD PTR _Offsets$[ebp+eax], 0
; Line 610
  00186	e9 e4 fe ff ff	 jmp	 $LN22@RenderMesh
$LN21@RenderMesh:
; Line 613
  0018b	0f b6 45 0c	 movzx	 eax, BYTE PTR _bAdjacent$[ebp]
  0018f	85 c0		 test	 eax, eax
  00191	74 11		 je	 SHORT $LN20@RenderMesh
; Line 614
  00193	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00196	8b 91 68 03 00
	00		 mov	 edx, DWORD PTR [ecx+872]
  0019c	89 95 50 fe ff
	ff		 mov	 DWORD PTR _pIndexBufferArray$[ebp], edx
; Line 615
  001a2	eb 0f		 jmp	 SHORT $LN19@RenderMesh
$LN20@RenderMesh:
; Line 616
  001a4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001a7	8b 88 54 03 00
	00		 mov	 ecx, DWORD PTR [eax+852]
  001ad	89 8d 50 fe ff
	ff		 mov	 DWORD PTR _pIndexBufferArray$[ebp], ecx
$LN19@RenderMesh:
; Line 618
  001b3	8b 55 f4	 mov	 edx, DWORD PTR _pMesh$[ebp]
  001b6	8b 82 a8 00 00
	00		 mov	 eax, DWORD PTR [edx+168]
  001bc	c1 e0 05	 shl	 eax, 5
  001bf	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR _pIndexBufferArray$[ebp]
  001c5	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  001c9	89 95 4c fe ff
	ff		 mov	 DWORD PTR _pIB$[ebp], edx
; Line 619
  001cf	c7 85 48 fe ff
	ff 39 00 00 00	 mov	 DWORD PTR _ibFormat$[ebp], 57 ; 00000039H
; Line 620
  001d9	8b 45 f4	 mov	 eax, DWORD PTR _pMesh$[ebp]
  001dc	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  001e2	c1 e1 05	 shl	 ecx, 5
  001e5	8b 95 50 fe ff
	ff		 mov	 edx, DWORD PTR _pIndexBufferArray$[ebp]
  001eb	8b 44 0a 10	 mov	 eax, DWORD PTR [edx+ecx+16]
  001ef	89 85 20 fe ff
	ff		 mov	 DWORD PTR tv148[ebp], eax
  001f5	83 bd 20 fe ff
	ff 00		 cmp	 DWORD PTR tv148[ebp], 0
  001fc	74 0b		 je	 SHORT $LN16@RenderMesh
  001fe	83 bd 20 fe ff
	ff 01		 cmp	 DWORD PTR tv148[ebp], 1
  00205	74 0e		 je	 SHORT $LN15@RenderMesh
  00207	eb 16		 jmp	 SHORT $LN17@RenderMesh
$LN16@RenderMesh:
; Line 623
  00209	c7 85 48 fe ff
	ff 39 00 00 00	 mov	 DWORD PTR _ibFormat$[ebp], 57 ; 00000039H
; Line 624
  00213	eb 0a		 jmp	 SHORT $LN17@RenderMesh
$LN15@RenderMesh:
; Line 626
  00215	c7 85 48 fe ff
	ff 2a 00 00 00	 mov	 DWORD PTR _ibFormat$[ebp], 42 ; 0000002aH
$LN17@RenderMesh:
; Line 630
  0021f	8b f4		 mov	 esi, esp
  00221	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _Offsets$[ebp]
  00227	51		 push	 ecx
  00228	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR _Strides$[ebp]
  0022e	52		 push	 edx
  0022f	8d 85 60 fe ff
	ff		 lea	 eax, DWORD PTR _pVB$[ebp]
  00235	50		 push	 eax
  00236	8b 4d f4	 mov	 ecx, DWORD PTR _pMesh$[ebp]
  00239	0f b6 51 64	 movzx	 edx, BYTE PTR [ecx+100]
  0023d	52		 push	 edx
  0023e	6a 00		 push	 0
  00240	8b 45 10	 mov	 eax, DWORD PTR _pd3dDeviceContext$[ebp]
  00243	8b 08		 mov	 ecx, DWORD PTR [eax]
  00245	8b 55 10	 mov	 edx, DWORD PTR _pd3dDeviceContext$[ebp]
  00248	52		 push	 edx
  00249	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]
  0024c	ff d0		 call	 eax
  0024e	3b f4		 cmp	 esi, esp
  00250	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 631
  00255	8b f4		 mov	 esi, esp
  00257	6a 00		 push	 0
  00259	8b 8d 48 fe ff
	ff		 mov	 ecx, DWORD PTR _ibFormat$[ebp]
  0025f	51		 push	 ecx
  00260	8b 95 4c fe ff
	ff		 mov	 edx, DWORD PTR _pIB$[ebp]
  00266	52		 push	 edx
  00267	8b 45 10	 mov	 eax, DWORD PTR _pd3dDeviceContext$[ebp]
  0026a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0026c	8b 55 10	 mov	 edx, DWORD PTR _pd3dDeviceContext$[ebp]
  0026f	52		 push	 edx
  00270	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  00273	ff d0		 call	 eax
  00275	3b f4		 cmp	 esi, esp
  00277	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 633
  0027c	c7 85 44 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pSubset$[ebp], 0
; Line 634
  00286	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _pMat$[ebp], 0
; Line 637
  00290	c7 85 38 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _subset$4[ebp], 0
  0029a	eb 0f		 jmp	 SHORT $LN14@RenderMesh
$LN13@RenderMesh:
  0029c	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR _subset$4[ebp]
  002a2	83 c1 01	 add	 ecx, 1
  002a5	89 8d 38 fe ff
	ff		 mov	 DWORD PTR _subset$4[ebp], ecx
$LN14@RenderMesh:
  002ab	8b 55 f4	 mov	 edx, DWORD PTR _pMesh$[ebp]
  002ae	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR _subset$4[ebp]
  002b4	3b 82 ac 00 00
	00		 cmp	 eax, DWORD PTR [edx+172]
  002ba	0f 83 3d 02 00
	00		 jae	 $LN26@RenderMesh
; Line 639
  002c0	8b 4d f4	 mov	 ecx, DWORD PTR _pMesh$[ebp]
  002c3	8b 91 d0 00 00
	00		 mov	 edx, DWORD PTR [ecx+208]
  002c9	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR _subset$4[ebp]
  002cf	69 0c 82 90 00
	00 00		 imul	 ecx, DWORD PTR [edx+eax*4], 144
  002d6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002d9	03 8a 5c 03 00
	00		 add	 ecx, DWORD PTR [edx+860]
  002df	89 8d 44 fe ff
	ff		 mov	 DWORD PTR _pSubset$[ebp], ecx
; Line 641
  002e5	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR _pSubset$[ebp]
  002eb	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  002ee	51		 push	 ecx
  002ef	e8 00 00 00 00	 call	 ?GetPrimitiveType11@CDXUTSDKMesh@@SA?AW4D3D_PRIMITIVE_TOPOLOGY@@W4SDKMESH_PRIMITIVE_TYPE@@@Z ; CDXUTSDKMesh::GetPrimitiveType11
  002f4	83 c4 04	 add	 esp, 4
  002f7	89 85 3c fe ff
	ff		 mov	 DWORD PTR _PrimType$[ebp], eax
; Line 642
  002fd	0f b6 55 0c	 movzx	 edx, BYTE PTR _bAdjacent$[ebp]
  00301	85 d2		 test	 edx, edx
  00303	74 5f		 je	 SHORT $LN11@RenderMesh
; Line 644
  00305	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR _PrimType$[ebp]
  0030b	89 85 1c fe ff
	ff		 mov	 DWORD PTR tv181[ebp], eax
  00311	8b 8d 1c fe ff
	ff		 mov	 ecx, DWORD PTR tv181[ebp]
  00317	83 e9 02	 sub	 ecx, 2
  0031a	89 8d 1c fe ff
	ff		 mov	 DWORD PTR tv181[ebp], ecx
  00320	83 bd 1c fe ff
	ff 03		 cmp	 DWORD PTR tv181[ebp], 3
  00327	77 3b		 ja	 SHORT $LN11@RenderMesh
  00329	8b 95 1c fe ff
	ff		 mov	 edx, DWORD PTR tv181[ebp]
  0032f	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN34@RenderMesh[edx*4]
$LN8@RenderMesh:
; Line 647
  00336	c7 85 3c fe ff
	ff 0c 00 00 00	 mov	 DWORD PTR _PrimType$[ebp], 12 ; 0000000cH
; Line 648
  00340	eb 22		 jmp	 SHORT $LN11@RenderMesh
$LN7@RenderMesh:
; Line 650
  00342	c7 85 3c fe ff
	ff 0d 00 00 00	 mov	 DWORD PTR _PrimType$[ebp], 13 ; 0000000dH
; Line 651
  0034c	eb 16		 jmp	 SHORT $LN11@RenderMesh
$LN6@RenderMesh:
; Line 653
  0034e	c7 85 3c fe ff
	ff 0a 00 00 00	 mov	 DWORD PTR _PrimType$[ebp], 10 ; 0000000aH
; Line 654
  00358	eb 0a		 jmp	 SHORT $LN11@RenderMesh
$LN5@RenderMesh:
; Line 656
  0035a	c7 85 3c fe ff
	ff 0b 00 00 00	 mov	 DWORD PTR _PrimType$[ebp], 11 ; 0000000bH
$LN11@RenderMesh:
; Line 661
  00364	8b f4		 mov	 esi, esp
  00366	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR _PrimType$[ebp]
  0036c	50		 push	 eax
  0036d	8b 4d 10	 mov	 ecx, DWORD PTR _pd3dDeviceContext$[ebp]
  00370	8b 11		 mov	 edx, DWORD PTR [ecx]
  00372	8b 45 10	 mov	 eax, DWORD PTR _pd3dDeviceContext$[ebp]
  00375	50		 push	 eax
  00376	8b 4a 60	 mov	 ecx, DWORD PTR [edx+96]
  00379	ff d1		 call	 ecx
  0037b	3b f4		 cmp	 esi, esp
  0037d	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 663
  00382	8b 95 44 fe ff
	ff		 mov	 edx, DWORD PTR _pSubset$[ebp]
  00388	69 42 64 e8 04
	00 00		 imul	 eax, DWORD PTR [edx+100], 1256
  0038f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00392	03 81 64 03 00
	00		 add	 eax, DWORD PTR [ecx+868]
  00398	89 85 40 fe ff
	ff		 mov	 DWORD PTR _pMat$[ebp], eax
; Line 664
  0039e	83 7d 14 ff	 cmp	 DWORD PTR _iDiffuseSlot$[ebp], -1
  003a2	74 43		 je	 SHORT $LN4@RenderMesh
  003a4	8b 95 40 fe ff
	ff		 mov	 edx, DWORD PTR _pMat$[ebp]
  003aa	8b 82 d0 04 00
	00		 mov	 eax, DWORD PTR [edx+1232]
  003b0	50		 push	 eax
  003b1	e8 00 00 00 00	 call	 ??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
  003b6	83 c4 04	 add	 esp, 4
  003b9	85 c0		 test	 eax, eax
  003bb	75 2a		 jne	 SHORT $LN4@RenderMesh
; Line 665
  003bd	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR _pMat$[ebp]
  003c3	81 c1 d0 04 00
	00		 add	 ecx, 1232		; 000004d0H
  003c9	8b f4		 mov	 esi, esp
  003cb	51		 push	 ecx
  003cc	6a 01		 push	 1
  003ce	8b 55 14	 mov	 edx, DWORD PTR _iDiffuseSlot$[ebp]
  003d1	52		 push	 edx
  003d2	8b 45 10	 mov	 eax, DWORD PTR _pd3dDeviceContext$[ebp]
  003d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d7	8b 55 10	 mov	 edx, DWORD PTR _pd3dDeviceContext$[ebp]
  003da	52		 push	 edx
  003db	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  003de	ff d0		 call	 eax
  003e0	3b f4		 cmp	 esi, esp
  003e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@RenderMesh:
; Line 666
  003e7	83 7d 18 ff	 cmp	 DWORD PTR _iNormalSlot$[ebp], -1
  003eb	74 42		 je	 SHORT $LN3@RenderMesh
  003ed	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR _pMat$[ebp]
  003f3	8b 91 d8 04 00
	00		 mov	 edx, DWORD PTR [ecx+1240]
  003f9	52		 push	 edx
  003fa	e8 00 00 00 00	 call	 ??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
  003ff	83 c4 04	 add	 esp, 4
  00402	85 c0		 test	 eax, eax
  00404	75 29		 jne	 SHORT $LN3@RenderMesh
; Line 667
  00406	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _pMat$[ebp]
  0040c	05 d8 04 00 00	 add	 eax, 1240		; 000004d8H
  00411	8b f4		 mov	 esi, esp
  00413	50		 push	 eax
  00414	6a 01		 push	 1
  00416	8b 4d 18	 mov	 ecx, DWORD PTR _iNormalSlot$[ebp]
  00419	51		 push	 ecx
  0041a	8b 55 10	 mov	 edx, DWORD PTR _pd3dDeviceContext$[ebp]
  0041d	8b 02		 mov	 eax, DWORD PTR [edx]
  0041f	8b 4d 10	 mov	 ecx, DWORD PTR _pd3dDeviceContext$[ebp]
  00422	51		 push	 ecx
  00423	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00426	ff d2		 call	 edx
  00428	3b f4		 cmp	 esi, esp
  0042a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@RenderMesh:
; Line 668
  0042f	83 7d 1c ff	 cmp	 DWORD PTR _iSpecularSlot$[ebp], -1
  00433	74 43		 je	 SHORT $LN2@RenderMesh
  00435	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _pMat$[ebp]
  0043b	8b 88 e0 04 00
	00		 mov	 ecx, DWORD PTR [eax+1248]
  00441	51		 push	 ecx
  00442	e8 00 00 00 00	 call	 ??$IsErrorResource@PAUID3D11ShaderResourceView@@@@YAHPAUID3D11ShaderResourceView@@@Z ; IsErrorResource<ID3D11ShaderResourceView *>
  00447	83 c4 04	 add	 esp, 4
  0044a	85 c0		 test	 eax, eax
  0044c	75 2a		 jne	 SHORT $LN2@RenderMesh
; Line 669
  0044e	8b 95 40 fe ff
	ff		 mov	 edx, DWORD PTR _pMat$[ebp]
  00454	81 c2 e0 04 00
	00		 add	 edx, 1248		; 000004e0H
  0045a	8b f4		 mov	 esi, esp
  0045c	52		 push	 edx
  0045d	6a 01		 push	 1
  0045f	8b 45 1c	 mov	 eax, DWORD PTR _iSpecularSlot$[ebp]
  00462	50		 push	 eax
  00463	8b 4d 10	 mov	 ecx, DWORD PTR _pd3dDeviceContext$[ebp]
  00466	8b 11		 mov	 edx, DWORD PTR [ecx]
  00468	8b 45 10	 mov	 eax, DWORD PTR _pd3dDeviceContext$[ebp]
  0046b	50		 push	 eax
  0046c	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  0046f	ff d1		 call	 ecx
  00471	3b f4		 cmp	 esi, esp
  00473	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@RenderMesh:
; Line 671
  00478	8b 95 44 fe ff
	ff		 mov	 edx, DWORD PTR _pSubset$[ebp]
  0047e	8b 42 78	 mov	 eax, DWORD PTR [edx+120]
  00481	89 85 34 fe ff
	ff		 mov	 DWORD PTR _IndexCount$3[ebp], eax
; Line 672
  00487	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR _pSubset$[ebp]
  0048d	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  00490	89 95 30 fe ff
	ff		 mov	 DWORD PTR _IndexStart$2[ebp], edx
; Line 673
  00496	8b 85 44 fe ff
	ff		 mov	 eax, DWORD PTR _pSubset$[ebp]
  0049c	8b 88 80 00 00
	00		 mov	 ecx, DWORD PTR [eax+128]
  004a2	89 8d 2c fe ff
	ff		 mov	 DWORD PTR _VertexStart$1[ebp], ecx
; Line 674
  004a8	0f b6 55 0c	 movzx	 edx, BYTE PTR _bAdjacent$[ebp]
  004ac	85 d2		 test	 edx, edx
  004ae	74 1c		 je	 SHORT $LN1@RenderMesh
; Line 676
  004b0	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR _IndexCount$3[ebp]
  004b6	d1 e0		 shl	 eax, 1
  004b8	89 85 34 fe ff
	ff		 mov	 DWORD PTR _IndexCount$3[ebp], eax
; Line 677
  004be	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR _IndexStart$2[ebp]
  004c4	d1 e1		 shl	 ecx, 1
  004c6	89 8d 30 fe ff
	ff		 mov	 DWORD PTR _IndexStart$2[ebp], ecx
$LN1@RenderMesh:
; Line 680
  004cc	8b f4		 mov	 esi, esp
  004ce	8b 95 2c fe ff
	ff		 mov	 edx, DWORD PTR _VertexStart$1[ebp]
  004d4	52		 push	 edx
  004d5	8b 85 30 fe ff
	ff		 mov	 eax, DWORD PTR _IndexStart$2[ebp]
  004db	50		 push	 eax
  004dc	8b 8d 34 fe ff
	ff		 mov	 ecx, DWORD PTR _IndexCount$3[ebp]
  004e2	51		 push	 ecx
  004e3	8b 55 10	 mov	 edx, DWORD PTR _pd3dDeviceContext$[ebp]
  004e6	8b 02		 mov	 eax, DWORD PTR [edx]
  004e8	8b 4d 10	 mov	 ecx, DWORD PTR _pd3dDeviceContext$[ebp]
  004eb	51		 push	 ecx
  004ec	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  004ef	ff d2		 call	 edx
  004f1	3b f4		 cmp	 esi, esp
  004f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 681
  004f8	e9 9f fd ff ff	 jmp	 $LN13@RenderMesh
$LN26@RenderMesh:
; Line 682
  004fd	52		 push	 edx
  004fe	8b cd		 mov	 ecx, ebp
  00500	50		 push	 eax
  00501	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN33@RenderMesh
  00507	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0050c	58		 pop	 eax
  0050d	5a		 pop	 edx
  0050e	5f		 pop	 edi
  0050f	5e		 pop	 esi
  00510	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00513	33 cd		 xor	 ecx, ebp
  00515	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0051a	81 c4 e4 01 00
	00		 add	 esp, 484		; 000001e4H
  00520	3b ec		 cmp	 ebp, esp
  00522	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00527	8b e5		 mov	 esp, ebp
  00529	5d		 pop	 ebp
  0052a	c2 18 00	 ret	 24			; 00000018H
  0052d	8d 49 00	 npad	 3
$LN33@RenderMesh:
  00530	03 00 00 00	 DD	 3
  00534	00 00 00 00	 DD	 $LN32@RenderMesh
$LN32@RenderMesh:
  00538	70 ff ff ff	 DD	 -144			; ffffff70H
  0053c	80 00 00 00	 DD	 128			; 00000080H
  00540	00 00 00 00	 DD	 $LN29@RenderMesh
  00544	e8 fe ff ff	 DD	 -280			; fffffee8H
  00548	80 00 00 00	 DD	 128			; 00000080H
  0054c	00 00 00 00	 DD	 $LN30@RenderMesh
  00550	60 fe ff ff	 DD	 -416			; fffffe60H
  00554	80 00 00 00	 DD	 128			; 00000080H
  00558	00 00 00 00	 DD	 $LN31@RenderMesh
$LN31@RenderMesh:
  0055c	70		 DB	 112			; 00000070H
  0055d	56		 DB	 86			; 00000056H
  0055e	42		 DB	 66			; 00000042H
  0055f	00		 DB	 0
$LN30@RenderMesh:
  00560	4f		 DB	 79			; 0000004fH
  00561	66		 DB	 102			; 00000066H
  00562	66		 DB	 102			; 00000066H
  00563	73		 DB	 115			; 00000073H
  00564	65		 DB	 101			; 00000065H
  00565	74		 DB	 116			; 00000074H
  00566	73		 DB	 115			; 00000073H
  00567	00		 DB	 0
$LN29@RenderMesh:
  00568	53		 DB	 83			; 00000053H
  00569	74		 DB	 116			; 00000074H
  0056a	72		 DB	 114			; 00000072H
  0056b	69		 DB	 105			; 00000069H
  0056c	64		 DB	 100			; 00000064H
  0056d	65		 DB	 101			; 00000065H
  0056e	73		 DB	 115			; 00000073H
  0056f	00		 DB	 0
$LN34@RenderMesh:
  00570	00 00 00 00	 DD	 $LN6@RenderMesh
  00574	00 00 00 00	 DD	 $LN5@RenderMesh
  00578	00 00 00 00	 DD	 $LN8@RenderMesh
  0057c	00 00 00 00	 DD	 $LN7@RenderMesh
?RenderMesh@CDXUTSDKMesh@@IAEXI_NPAUID3D11DeviceContext@@III@Z ENDP ; CDXUTSDKMesh::RenderMesh
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -1264						; size = 64
$T2 = -1200						; size = 64
$T3 = -1136						; size = 64
$T4 = -1072						; size = 64
_mOutput$5 = -992					; size = 64
_mFrom$6 = -912						; size = 64
$T7 = -832						; size = 64
_mRot2$8 = -752						; size = 64
$T9 = -672						; size = 16
_quat2$10 = -656					; size = 16
_mInvTo$11 = -624					; size = 64
$T12 = -544						; size = 64
_mRot1$13 = -464					; size = 64
$T14 = -384						; size = 16
$T15 = -368						; size = 16
_quat1$16 = -352					; size = 16
$T17 = -336						; size = 64
_mTrans2$18 = -256					; size = 64
$T19 = -176						; size = 64
_mTrans1$20 = -96					; size = 64
_pDataOrig$21 = -24					; size = 4
_pData$22 = -20						; size = 4
_pFrameData$23 = -16					; size = 4
_iTick$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_iFrame$ = 8						; size = 4
_fTime$ = 12						; size = 8
?TransformFrameAbsolute@CDXUTSDKMesh@@IAEXIN@Z PROC	; CDXUTSDKMesh::TransformFrameAbsolute
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 556
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec f8 04 00
	00		 sub	 esp, 1272		; 000004f8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 08 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1272]
  00025	b9 3e 01 00 00	 mov	 ecx, 318		; 0000013eH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 557
  0003f	83 ec 08	 sub	 esp, 8
  00042	f2 0f 10 43 0c	 movsd	 xmm0, QWORD PTR _fTime$[ebx]
  00047	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?GetAnimationKeyFromTime@CDXUTSDKMesh@@QBEIN@Z ; CDXUTSDKMesh::GetAnimationKeyFromTime
  00054	89 45 f4	 mov	 DWORD PTR _iTick$[ebp], eax
; Line 559
  00057	69 43 08 b8 00
	00 00		 imul	 eax, DWORD PTR _iFrame$[ebx], 184
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	8b 91 60 03 00
	00		 mov	 edx, DWORD PTR [ecx+864]
  00067	83 bc 02 b4 00
	00 00 ff	 cmp	 DWORD PTR [edx+eax+180], -1
  0006f	0f 84 f5 02 00
	00		 je	 $LN1@TransformF
; Line 561
  00075	69 43 08 b8 00
	00 00		 imul	 eax, DWORD PTR _iFrame$[ebx], 184
  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	8b 91 60 03 00
	00		 mov	 edx, DWORD PTR [ecx+864]
  00085	6b 84 02 b4 00
	00 00 70	 imul	 eax, DWORD PTR [edx+eax+180], 112
  0008d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	03 81 70 03 00
	00		 add	 eax, DWORD PTR [ecx+880]
  00096	89 45 f0	 mov	 DWORD PTR _pFrameData$23[ebp], eax
; Line 562
  00099	6b 55 f4 28	 imul	 edx, DWORD PTR _iTick$[ebp], 40
  0009d	8b 45 f0	 mov	 eax, DWORD PTR _pFrameData$23[ebp]
  000a0	03 50 68	 add	 edx, DWORD PTR [eax+104]
  000a3	89 55 ec	 mov	 DWORD PTR _pData$22[ebp], edx
; Line 563
  000a6	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  000ab	6b d1 00	 imul	 edx, ecx, 0
  000ae	8b 45 f0	 mov	 eax, DWORD PTR _pFrameData$23[ebp]
  000b1	03 50 68	 add	 edx, DWORD PTR [eax+104]
  000b4	89 55 e8	 mov	 DWORD PTR _pDataOrig$21[ebp], edx
; Line 565
  000b7	8b 4d e8	 mov	 ecx, DWORD PTR _pDataOrig$21[ebp]
  000ba	f3 0f 10 51 08	 movss	 xmm2, DWORD PTR [ecx+8]
  000bf	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  000c6	8b 55 e8	 mov	 edx, DWORD PTR _pDataOrig$21[ebp]
  000c9	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  000ce	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  000d5	8b 45 e8	 mov	 eax, DWORD PTR _pDataOrig$21[ebp]
  000d8	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000dc	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000e3	e8 00 00 00 00	 call	 ?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
  000e8	0f 29 9d 00 fc
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+48], xmm3
  000ef	0f 29 95 f0 fb
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+32], xmm2
  000f6	0f 29 8d e0 fb
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+16], xmm1
  000fd	0f 29 85 d0 fb
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00104	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00109	8d b5 d0 fb ff
	ff		 lea	 esi, DWORD PTR $T4[ebp]
  0010f	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR $T19[ebp]
  00115	f3 a5		 rep movsd
  00117	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0011c	8d b5 50 ff ff
	ff		 lea	 esi, DWORD PTR $T19[ebp]
  00122	8d 7d a0	 lea	 edi, DWORD PTR _mTrans1$20[ebp]
  00125	f3 a5		 rep movsd
; Line 566
  00127	8b 4d ec	 mov	 ecx, DWORD PTR _pData$22[ebp]
  0012a	f3 0f 10 51 08	 movss	 xmm2, DWORD PTR [ecx+8]
  0012f	8b 55 ec	 mov	 edx, DWORD PTR _pData$22[ebp]
  00132	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00137	8b 45 ec	 mov	 eax, DWORD PTR _pData$22[ebp]
  0013a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0013e	e8 00 00 00 00	 call	 ?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
  00143	0f 29 9d c0 fb
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+48], xmm3
  0014a	0f 29 95 b0 fb
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+32], xmm2
  00151	0f 29 8d a0 fb
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+16], xmm1
  00158	0f 29 85 90 fb
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0015f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00164	8d b5 90 fb ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  0016a	8d bd b0 fe ff
	ff		 lea	 edi, DWORD PTR $T17[ebp]
  00170	f3 a5		 rep movsd
  00172	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00177	8d b5 b0 fe ff
	ff		 lea	 esi, DWORD PTR $T17[ebp]
  0017d	8d bd 00 ff ff
	ff		 lea	 edi, DWORD PTR _mTrans2$18[ebp]
  00183	f3 a5		 rep movsd
; Line 568
  00185	8b 4d e8	 mov	 ecx, DWORD PTR _pDataOrig$21[ebp]
  00188	f3 0f 10 59 18	 movss	 xmm3, DWORD PTR [ecx+24]
  0018d	8b 55 e8	 mov	 edx, DWORD PTR _pDataOrig$21[ebp]
  00190	f3 0f 10 52 14	 movss	 xmm2, DWORD PTR [edx+20]
  00195	8b 45 e8	 mov	 eax, DWORD PTR _pDataOrig$21[ebp]
  00198	f3 0f 10 48 10	 movss	 xmm1, DWORD PTR [eax+16]
  0019d	8b 4d e8	 mov	 ecx, DWORD PTR _pDataOrig$21[ebp]
  001a0	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  001a5	e8 00 00 00 00	 call	 ?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
  001aa	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  001b1	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  001b8	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _quat1$16[ebp], xmm0
; Line 569
  001bf	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _quat1$16[ebp]
  001c6	e8 00 00 00 00	 call	 ?XMQuaternionInverse@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionInverse
  001cb	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  001d2	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  001d9	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _quat1$16[ebp], xmm0
; Line 570
  001e0	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _quat1$16[ebp]
  001e7	e8 00 00 00 00	 call	 ?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationQuaternion
  001ec	0f 29 9d 80 fb
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+48], xmm3
  001f3	0f 29 95 70 fb
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+32], xmm2
  001fa	0f 29 8d 60 fb
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+16], xmm1
  00201	0f 29 85 50 fb
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00208	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0020d	8d b5 50 fb ff
	ff		 lea	 esi, DWORD PTR $T2[ebp]
  00213	8d bd e0 fd ff
	ff		 lea	 edi, DWORD PTR $T12[ebp]
  00219	f3 a5		 rep movsd
  0021b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00220	8d b5 e0 fd ff
	ff		 lea	 esi, DWORD PTR $T12[ebp]
  00226	8d bd 30 fe ff
	ff		 lea	 edi, DWORD PTR _mRot1$13[ebp]
  0022c	f3 a5		 rep movsd
; Line 571
  0022e	8d 95 90 fd ff
	ff		 lea	 edx, DWORD PTR _mInvTo$11[ebp]
  00234	8d 4d a0	 lea	 ecx, DWORD PTR _mTrans1$20[ebp]
  00237	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _mRot1$13[ebp]
  0023e	0f 28 8d 40 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _mRot1$13[ebp+16]
  00245	0f 28 95 50 fe
	ff ff		 movaps	 xmm2, XMMWORD PTR _mRot1$13[ebp+32]
  0024c	0f 28 9d 60 fe
	ff ff		 movaps	 xmm3, XMMWORD PTR _mRot1$13[ebp+48]
  00253	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
; Line 573
  00258	8b 55 ec	 mov	 edx, DWORD PTR _pData$22[ebp]
  0025b	f3 0f 10 5a 18	 movss	 xmm3, DWORD PTR [edx+24]
  00260	8b 45 ec	 mov	 eax, DWORD PTR _pData$22[ebp]
  00263	f3 0f 10 50 14	 movss	 xmm2, DWORD PTR [eax+20]
  00268	8b 4d ec	 mov	 ecx, DWORD PTR _pData$22[ebp]
  0026b	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  00270	8b 55 ec	 mov	 edx, DWORD PTR _pData$22[ebp]
  00273	f3 0f 10 42 0c	 movss	 xmm0, DWORD PTR [edx+12]
  00278	e8 00 00 00 00	 call	 ?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
  0027d	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00284	0f 28 85 60 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  0028b	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR _quat2$10[ebp], xmm0
; Line 574
  00292	0f 28 85 70 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _quat2$10[ebp]
  00299	e8 00 00 00 00	 call	 ?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationQuaternion
  0029e	0f 29 9d 40 fb
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  002a5	0f 29 95 30 fb
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  002ac	0f 29 8d 20 fb
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  002b3	0f 29 85 10 fb
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  002ba	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002bf	8d b5 10 fb ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  002c5	8d bd c0 fc ff
	ff		 lea	 edi, DWORD PTR $T7[ebp]
  002cb	f3 a5		 rep movsd
  002cd	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002d2	8d b5 c0 fc ff
	ff		 lea	 esi, DWORD PTR $T7[ebp]
  002d8	8d bd 10 fd ff
	ff		 lea	 edi, DWORD PTR _mRot2$8[ebp]
  002de	f3 a5		 rep movsd
; Line 575
  002e0	8d 95 70 fc ff
	ff		 lea	 edx, DWORD PTR _mFrom$6[ebp]
  002e6	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR _mRot2$8[ebp]
  002ec	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _mTrans2$18[ebp]
  002f3	0f 28 8d 10 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mTrans2$18[ebp+16]
  002fa	0f 28 95 20 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _mTrans2$18[ebp+32]
  00301	0f 28 9d 30 ff
	ff ff		 movaps	 xmm3, XMMWORD PTR _mTrans2$18[ebp+48]
  00308	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
; Line 577
  0030d	8d 95 20 fc ff
	ff		 lea	 edx, DWORD PTR _mOutput$5[ebp]
  00313	8d 8d 90 fd ff
	ff		 lea	 ecx, DWORD PTR _mInvTo$11[ebp]
  00319	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _mFrom$6[ebp]
  00320	0f 28 8d 80 fc
	ff ff		 movaps	 xmm1, XMMWORD PTR _mFrom$6[ebp+16]
  00327	0f 28 95 90 fc
	ff ff		 movaps	 xmm2, XMMWORD PTR _mFrom$6[ebp+32]
  0032e	0f 28 9d a0 fc
	ff ff		 movaps	 xmm3, XMMWORD PTR _mFrom$6[ebp+48]
  00335	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
; Line 578
  0033a	8b 4b 08	 mov	 ecx, DWORD PTR _iFrame$[ebx]
  0033d	c1 e1 06	 shl	 ecx, 6
  00340	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00343	03 88 78 03 00
	00		 add	 ecx, DWORD PTR [eax+888]
  00349	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _mOutput$5[ebp]
  00350	0f 28 8d 30 fc
	ff ff		 movaps	 xmm1, XMMWORD PTR _mOutput$5[ebp+16]
  00357	0f 28 95 40 fc
	ff ff		 movaps	 xmm2, XMMWORD PTR _mOutput$5[ebp+32]
  0035e	0f 28 9d 50 fc
	ff ff		 movaps	 xmm3, XMMWORD PTR _mOutput$5[ebp+48]
  00365	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
$LN1@TransformF:
; Line 580
  0036a	52		 push	 edx
  0036b	8b cd		 mov	 ecx, ebp
  0036d	50		 push	 eax
  0036e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@TransformF
  00374	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00379	58		 pop	 eax
  0037a	5a		 pop	 edx
  0037b	5f		 pop	 edi
  0037c	5e		 pop	 esi
  0037d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00380	33 cd		 xor	 ecx, ebp
  00382	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00387	8b e5		 mov	 esp, ebp
  00389	5d		 pop	 ebp
  0038a	8b e3		 mov	 esp, ebx
  0038c	5b		 pop	 ebx
  0038d	c2 0c 00	 ret	 12			; 0000000cH
$LN12@TransformF:
  00390	07 00 00 00	 DD	 7
  00394	00 00 00 00	 DD	 $LN11@TransformF
$LN11@TransformF:
  00398	a0 ff ff ff	 DD	 -96			; ffffffa0H
  0039c	40 00 00 00	 DD	 64			; 00000040H
  003a0	00 00 00 00	 DD	 $LN4@TransformF
  003a4	00 ff ff ff	 DD	 -256			; ffffff00H
  003a8	40 00 00 00	 DD	 64			; 00000040H
  003ac	00 00 00 00	 DD	 $LN5@TransformF
  003b0	30 fe ff ff	 DD	 -464			; fffffe30H
  003b4	40 00 00 00	 DD	 64			; 00000040H
  003b8	00 00 00 00	 DD	 $LN6@TransformF
  003bc	90 fd ff ff	 DD	 -624			; fffffd90H
  003c0	40 00 00 00	 DD	 64			; 00000040H
  003c4	00 00 00 00	 DD	 $LN7@TransformF
  003c8	10 fd ff ff	 DD	 -752			; fffffd10H
  003cc	40 00 00 00	 DD	 64			; 00000040H
  003d0	00 00 00 00	 DD	 $LN8@TransformF
  003d4	70 fc ff ff	 DD	 -912			; fffffc70H
  003d8	40 00 00 00	 DD	 64			; 00000040H
  003dc	00 00 00 00	 DD	 $LN9@TransformF
  003e0	20 fc ff ff	 DD	 -992			; fffffc20H
  003e4	40 00 00 00	 DD	 64			; 00000040H
  003e8	00 00 00 00	 DD	 $LN10@TransformF
$LN10@TransformF:
  003ec	6d		 DB	 109			; 0000006dH
  003ed	4f		 DB	 79			; 0000004fH
  003ee	75		 DB	 117			; 00000075H
  003ef	74		 DB	 116			; 00000074H
  003f0	70		 DB	 112			; 00000070H
  003f1	75		 DB	 117			; 00000075H
  003f2	74		 DB	 116			; 00000074H
  003f3	00		 DB	 0
$LN9@TransformF:
  003f4	6d		 DB	 109			; 0000006dH
  003f5	46		 DB	 70			; 00000046H
  003f6	72		 DB	 114			; 00000072H
  003f7	6f		 DB	 111			; 0000006fH
  003f8	6d		 DB	 109			; 0000006dH
  003f9	00		 DB	 0
$LN8@TransformF:
  003fa	6d		 DB	 109			; 0000006dH
  003fb	52		 DB	 82			; 00000052H
  003fc	6f		 DB	 111			; 0000006fH
  003fd	74		 DB	 116			; 00000074H
  003fe	32		 DB	 50			; 00000032H
  003ff	00		 DB	 0
$LN7@TransformF:
  00400	6d		 DB	 109			; 0000006dH
  00401	49		 DB	 73			; 00000049H
  00402	6e		 DB	 110			; 0000006eH
  00403	76		 DB	 118			; 00000076H
  00404	54		 DB	 84			; 00000054H
  00405	6f		 DB	 111			; 0000006fH
  00406	00		 DB	 0
$LN6@TransformF:
  00407	6d		 DB	 109			; 0000006dH
  00408	52		 DB	 82			; 00000052H
  00409	6f		 DB	 111			; 0000006fH
  0040a	74		 DB	 116			; 00000074H
  0040b	31		 DB	 49			; 00000031H
  0040c	00		 DB	 0
$LN5@TransformF:
  0040d	6d		 DB	 109			; 0000006dH
  0040e	54		 DB	 84			; 00000054H
  0040f	72		 DB	 114			; 00000072H
  00410	61		 DB	 97			; 00000061H
  00411	6e		 DB	 110			; 0000006eH
  00412	73		 DB	 115			; 00000073H
  00413	32		 DB	 50			; 00000032H
  00414	00		 DB	 0
$LN4@TransformF:
  00415	6d		 DB	 109			; 0000006dH
  00416	54		 DB	 84			; 00000054H
  00417	72		 DB	 114			; 00000072H
  00418	61		 DB	 97			; 00000061H
  00419	6e		 DB	 110			; 0000006eH
  0041a	73		 DB	 115			; 00000073H
  0041b	31		 DB	 49			; 00000031H
  0041c	00		 DB	 0
?TransformFrameAbsolute@CDXUTSDKMesh@@IAEXIN@Z ENDP	; CDXUTSDKMesh::TransformFrameAbsolute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -1056						; size = 64
$T2 = -992						; size = 64
$T3 = -928						; size = 64
$T4 = -864						; size = 64
$T5 = -800						; size = 64
_mLocalWorld$ = -720					; size = 64
$T6 = -640						; size = 64
$T7 = -576						; size = 64
$T8 = -512						; size = 64
_mQuat$9 = -432						; size = 64
$T10 = -352						; size = 16
$T11 = -336						; size = 16
$T12 = -320						; size = 16
$T13 = -304						; size = 16
_quat$14 = -288						; size = 16
$T15 = -272						; size = 64
_mTranslate$16 = -192					; size = 64
_parentPos$17 = -112					; size = 12
_pData$18 = -96						; size = 4
_pFrameData$19 = -92					; size = 4
_iTick$ = -88						; size = 4
_mLocalTransform$ = -80					; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_iFrame$ = 8						; size = 4
_parentWorld$ = 12					; size = 4
_fTime$ = 16						; size = 8
?TransformFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@N@Z PROC ; CDXUTSDKMesh::TransformFrame
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 505
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 28 04 00
	00		 sub	 esp, 1064		; 00000428H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd d8 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1064]
  00025	b9 0a 01 00 00	 mov	 ecx, 266		; 0000010aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 507
  0003f	8d 4d b0	 lea	 ecx, DWORD PTR _mLocalTransform$[ebp]
  00042	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 509
  00047	83 ec 08	 sub	 esp, 8
  0004a	f2 0f 10 43 10	 movsd	 xmm0, QWORD PTR _fTime$[ebx]
  0004f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00054	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?GetAnimationKeyFromTime@CDXUTSDKMesh@@QBEIN@Z ; CDXUTSDKMesh::GetAnimationKeyFromTime
  0005c	89 45 a8	 mov	 DWORD PTR _iTick$[ebp], eax
; Line 511
  0005f	69 43 08 b8 00
	00 00		 imul	 eax, DWORD PTR _iFrame$[ebx], 184
  00066	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	8b 91 60 03 00
	00		 mov	 edx, DWORD PTR [ecx+864]
  0006f	83 bc 02 b4 00
	00 00 ff	 cmp	 DWORD PTR [edx+eax+180], -1
  00077	0f 84 bd 01 00
	00		 je	 $LN5@TransformF
; Line 513
  0007d	69 43 08 b8 00
	00 00		 imul	 eax, DWORD PTR _iFrame$[ebx], 184
  00084	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	8b 91 60 03 00
	00		 mov	 edx, DWORD PTR [ecx+864]
  0008d	6b 84 02 b4 00
	00 00 70	 imul	 eax, DWORD PTR [edx+eax+180], 112
  00095	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	03 81 70 03 00
	00		 add	 eax, DWORD PTR [ecx+880]
  0009e	89 45 a4	 mov	 DWORD PTR _pFrameData$19[ebp], eax
; Line 514
  000a1	6b 55 a8 28	 imul	 edx, DWORD PTR _iTick$[ebp], 40
  000a5	8b 45 a4	 mov	 eax, DWORD PTR _pFrameData$19[ebp]
  000a8	03 50 68	 add	 edx, DWORD PTR [eax+104]
  000ab	89 55 a0	 mov	 DWORD PTR _pData$18[ebp], edx
; Line 517
  000ae	8b 4d a0	 mov	 ecx, DWORD PTR _pData$18[ebp]
  000b1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b3	89 55 90	 mov	 DWORD PTR _parentPos$17[ebp], edx
  000b6	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000b9	89 45 94	 mov	 DWORD PTR _parentPos$17[ebp+4], eax
  000bc	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  000bf	89 4d 98	 mov	 DWORD PTR _parentPos$17[ebp+8], ecx
; Line 518
  000c2	f3 0f 10 55 98	 movss	 xmm2, DWORD PTR _parentPos$17[ebp+8]
  000c7	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _parentPos$17[ebp+4]
  000cc	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _parentPos$17[ebp]
  000d1	e8 00 00 00 00	 call	 ?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
  000d6	0f 29 9d d0 fc
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+48], xmm3
  000dd	0f 29 95 c0 fc
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+32], xmm2
  000e4	0f 29 8d b0 fc
	ff ff		 movaps	 XMMWORD PTR $T4[ebp+16], xmm1
  000eb	0f 29 85 a0 fc
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  000f2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000f7	8d b5 a0 fc ff
	ff		 lea	 esi, DWORD PTR $T4[ebp]
  000fd	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR $T15[ebp]
  00103	f3 a5		 rep movsd
  00105	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0010a	8d b5 f0 fe ff
	ff		 lea	 esi, DWORD PTR $T15[ebp]
  00110	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR _mTranslate$16[ebp]
  00116	f3 a5		 rep movsd
; Line 520
  00118	8b 55 a0	 mov	 edx, DWORD PTR _pData$18[ebp]
  0011b	f3 0f 10 5a 18	 movss	 xmm3, DWORD PTR [edx+24]
  00120	8b 45 a0	 mov	 eax, DWORD PTR _pData$18[ebp]
  00123	f3 0f 10 50 14	 movss	 xmm2, DWORD PTR [eax+20]
  00128	8b 4d a0	 mov	 ecx, DWORD PTR _pData$18[ebp]
  0012b	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  00130	8b 55 a0	 mov	 edx, DWORD PTR _pData$18[ebp]
  00133	f3 0f 10 42 0c	 movss	 xmm0, DWORD PTR [edx+12]
  00138	e8 00 00 00 00	 call	 ?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
  0013d	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00144	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  0014b	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _quat$14[ebp], xmm0
; Line 521
  00152	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  00158	50		 push	 eax
  00159	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
  0015e	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00163	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  00166	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _quat$14[ebp]
  0016d	e8 00 00 00 00	 call	 ?XMVector4Equal@DirectX@@YQ_NT__m128@@0@Z ; DirectX::XMVector4Equal
  00172	0f b6 c8	 movzx	 ecx, al
  00175	85 c9		 test	 ecx, ecx
  00177	74 1a		 je	 SHORT $LN4@TransformF
; Line 522
  00179	e8 00 00 00 00	 call	 ?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ ; DirectX::XMQuaternionIdentity
  0017e	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00185	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  0018c	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _quat$14[ebp], xmm0
$LN4@TransformF:
; Line 523
  00193	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _quat$14[ebp]
  0019a	e8 00 00 00 00	 call	 ?XMQuaternionNormalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionNormalize
  0019f	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  001a6	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  001ad	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _quat$14[ebp], xmm0
; Line 524
  001b4	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _quat$14[ebp]
  001bb	e8 00 00 00 00	 call	 ?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationQuaternion
  001c0	0f 29 9d 90 fc
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+48], xmm3
  001c7	0f 29 95 80 fc
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+32], xmm2
  001ce	0f 29 8d 70 fc
	ff ff		 movaps	 XMMWORD PTR $T3[ebp+16], xmm1
  001d5	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  001dc	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001e1	8d b5 60 fc ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  001e7	8d bd 00 fe ff
	ff		 lea	 edi, DWORD PTR $T8[ebp]
  001ed	f3 a5		 rep movsd
  001ef	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001f4	8d b5 00 fe ff
	ff		 lea	 esi, DWORD PTR $T8[ebp]
  001fa	8d bd 50 fe ff
	ff		 lea	 edi, DWORD PTR _mQuat$9[ebp]
  00200	f3 a5		 rep movsd
; Line 525
  00202	8d 95 c0 fd ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  00208	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR _mQuat$9[ebp]
  0020e	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _mTranslate$16[ebp]
  00215	0f 28 8d 50 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mTranslate$16[ebp+16]
  0021c	0f 28 95 60 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _mTranslate$16[ebp+32]
  00223	0f 28 9d 70 ff
	ff ff		 movaps	 xmm3, XMMWORD PTR _mTranslate$16[ebp+48]
  0022a	e8 00 00 00 00	 call	 ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ; DirectX::XMMATRIX::operator*
  0022f	50		 push	 eax
  00230	8d 4d b0	 lea	 ecx, DWORD PTR _mLocalTransform$[ebp]
  00233	e8 00 00 00 00	 call	 ??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMMATRIX::operator=
; Line 527
  00238	eb 57		 jmp	 SHORT $LN3@TransformF
$LN5@TransformF:
; Line 529
  0023a	69 53 08 b8 00
	00 00		 imul	 edx, DWORD PTR _iFrame$[ebx], 184
  00241	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00244	8b 88 60 03 00
	00		 mov	 ecx, DWORD PTR [eax+864]
  0024a	8d 4c 11 74	 lea	 ecx, DWORD PTR [ecx+edx+116]
  0024e	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  00253	0f 29 9d 50 fc
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+48], xmm3
  0025a	0f 29 95 40 fc
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+32], xmm2
  00261	0f 29 8d 30 fc
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+16], xmm1
  00268	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0026f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00274	8d b5 20 fc ff
	ff		 lea	 esi, DWORD PTR $T2[ebp]
  0027a	8d bd 80 fd ff
	ff		 lea	 edi, DWORD PTR $T6[ebp]
  00280	f3 a5		 rep movsd
  00282	8d 95 80 fd ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00288	52		 push	 edx
  00289	8d 4d b0	 lea	 ecx, DWORD PTR _mLocalTransform$[ebp]
  0028c	e8 00 00 00 00	 call	 ??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMMATRIX::operator=
$LN3@TransformF:
; Line 533
  00291	8b 4b 0c	 mov	 ecx, DWORD PTR _parentWorld$[ebx]
  00294	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _mLocalTransform$[ebp]
  00298	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _mLocalTransform$[ebp+16]
  0029c	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _mLocalTransform$[ebp+32]
  002a0	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _mLocalTransform$[ebp+48]
  002a4	e8 00 00 00 00	 call	 ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
  002a9	0f 29 9d 10 fc
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  002b0	0f 29 95 00 fc
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  002b7	0f 29 8d f0 fb
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  002be	0f 29 85 e0 fb
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  002c5	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002ca	8d b5 e0 fb ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  002d0	8d bd e0 fc ff
	ff		 lea	 edi, DWORD PTR $T5[ebp]
  002d6	f3 a5		 rep movsd
  002d8	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002dd	8d b5 e0 fc ff
	ff		 lea	 esi, DWORD PTR $T5[ebp]
  002e3	8d bd 30 fd ff
	ff		 lea	 edi, DWORD PTR _mLocalWorld$[ebp]
  002e9	f3 a5		 rep movsd
; Line 534
  002eb	8b 4b 08	 mov	 ecx, DWORD PTR _iFrame$[ebx]
  002ee	c1 e1 06	 shl	 ecx, 6
  002f1	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002f4	03 88 78 03 00
	00		 add	 ecx, DWORD PTR [eax+888]
  002fa	0f 28 85 30 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _mLocalWorld$[ebp]
  00301	0f 28 8d 40 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _mLocalWorld$[ebp+16]
  00308	0f 28 95 50 fd
	ff ff		 movaps	 xmm2, XMMWORD PTR _mLocalWorld$[ebp+32]
  0030f	0f 28 9d 60 fd
	ff ff		 movaps	 xmm3, XMMWORD PTR _mLocalWorld$[ebp+48]
  00316	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 535
  0031b	8b 4b 08	 mov	 ecx, DWORD PTR _iFrame$[ebx]
  0031e	c1 e1 06	 shl	 ecx, 6
  00321	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00324	03 8a 7c 03 00
	00		 add	 ecx, DWORD PTR [edx+892]
  0032a	0f 28 85 30 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _mLocalWorld$[ebp]
  00331	0f 28 8d 40 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _mLocalWorld$[ebp+16]
  00338	0f 28 95 50 fd
	ff ff		 movaps	 xmm2, XMMWORD PTR _mLocalWorld$[ebp+32]
  0033f	0f 28 9d 60 fd
	ff ff		 movaps	 xmm3, XMMWORD PTR _mLocalWorld$[ebp+48]
  00346	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 538
  0034b	69 43 08 b8 00
	00 00		 imul	 eax, DWORD PTR _iFrame$[ebx], 184
  00352	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00355	8b 91 60 03 00
	00		 mov	 edx, DWORD PTR [ecx+864]
  0035b	83 7c 02 70 ff	 cmp	 DWORD PTR [edx+eax+112], -1
  00360	74 2e		 je	 SHORT $LN2@TransformF
; Line 540
  00362	83 ec 08	 sub	 esp, 8
  00365	f2 0f 10 43 10	 movsd	 xmm0, QWORD PTR _fTime$[ebx]
  0036a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0036f	8b 43 0c	 mov	 eax, DWORD PTR _parentWorld$[ebx]
  00372	50		 push	 eax
  00373	69 4b 08 b8 00
	00 00		 imul	 ecx, DWORD PTR _iFrame$[ebx], 184
  0037a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0037d	8b 82 60 03 00
	00		 mov	 eax, DWORD PTR [edx+864]
  00383	8b 4c 08 70	 mov	 ecx, DWORD PTR [eax+ecx+112]
  00387	51		 push	 ecx
  00388	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0038b	e8 00 00 00 00	 call	 ?TransformFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@N@Z ; CDXUTSDKMesh::TransformFrame
$LN2@TransformF:
; Line 544
  00390	69 53 08 b8 00
	00 00		 imul	 edx, DWORD PTR _iFrame$[ebx], 184
  00397	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0039a	8b 88 60 03 00
	00		 mov	 ecx, DWORD PTR [eax+864]
  003a0	83 7c 11 6c ff	 cmp	 DWORD PTR [ecx+edx+108], -1
  003a5	74 31		 je	 SHORT $LN1@TransformF
; Line 546
  003a7	83 ec 08	 sub	 esp, 8
  003aa	f2 0f 10 43 10	 movsd	 xmm0, QWORD PTR _fTime$[ebx]
  003af	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  003b4	8d 95 30 fd ff
	ff		 lea	 edx, DWORD PTR _mLocalWorld$[ebp]
  003ba	52		 push	 edx
  003bb	69 43 08 b8 00
	00 00		 imul	 eax, DWORD PTR _iFrame$[ebx], 184
  003c2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003c5	8b 91 60 03 00
	00		 mov	 edx, DWORD PTR [ecx+864]
  003cb	8b 44 02 6c	 mov	 eax, DWORD PTR [edx+eax+108]
  003cf	50		 push	 eax
  003d0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003d3	e8 00 00 00 00	 call	 ?TransformFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@N@Z ; CDXUTSDKMesh::TransformFrame
$LN1@TransformF:
; Line 548
  003d8	52		 push	 edx
  003d9	8b cd		 mov	 ecx, ebp
  003db	50		 push	 eax
  003dc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@TransformF
  003e2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003e7	58		 pop	 eax
  003e8	5a		 pop	 edx
  003e9	5f		 pop	 edi
  003ea	5e		 pop	 esi
  003eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ee	33 cd		 xor	 ecx, ebp
  003f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003f5	8b e5		 mov	 esp, ebp
  003f7	5d		 pop	 ebp
  003f8	8b e3		 mov	 esp, ebx
  003fa	5b		 pop	 ebx
  003fb	c2 10 00	 ret	 16			; 00000010H
  003fe	8b ff		 npad	 2
$LN14@TransformF:
  00400	05 00 00 00	 DD	 5
  00404	00 00 00 00	 DD	 $LN13@TransformF
$LN13@TransformF:
  00408	b0 ff ff ff	 DD	 -80			; ffffffb0H
  0040c	40 00 00 00	 DD	 64			; 00000040H
  00410	00 00 00 00	 DD	 $LN8@TransformF
  00414	90 ff ff ff	 DD	 -112			; ffffff90H
  00418	0c 00 00 00	 DD	 12			; 0000000cH
  0041c	00 00 00 00	 DD	 $LN9@TransformF
  00420	40 ff ff ff	 DD	 -192			; ffffff40H
  00424	40 00 00 00	 DD	 64			; 00000040H
  00428	00 00 00 00	 DD	 $LN10@TransformF
  0042c	50 fe ff ff	 DD	 -432			; fffffe50H
  00430	40 00 00 00	 DD	 64			; 00000040H
  00434	00 00 00 00	 DD	 $LN11@TransformF
  00438	30 fd ff ff	 DD	 -720			; fffffd30H
  0043c	40 00 00 00	 DD	 64			; 00000040H
  00440	00 00 00 00	 DD	 $LN12@TransformF
$LN12@TransformF:
  00444	6d		 DB	 109			; 0000006dH
  00445	4c		 DB	 76			; 0000004cH
  00446	6f		 DB	 111			; 0000006fH
  00447	63		 DB	 99			; 00000063H
  00448	61		 DB	 97			; 00000061H
  00449	6c		 DB	 108			; 0000006cH
  0044a	57		 DB	 87			; 00000057H
  0044b	6f		 DB	 111			; 0000006fH
  0044c	72		 DB	 114			; 00000072H
  0044d	6c		 DB	 108			; 0000006cH
  0044e	64		 DB	 100			; 00000064H
  0044f	00		 DB	 0
$LN11@TransformF:
  00450	6d		 DB	 109			; 0000006dH
  00451	51		 DB	 81			; 00000051H
  00452	75		 DB	 117			; 00000075H
  00453	61		 DB	 97			; 00000061H
  00454	74		 DB	 116			; 00000074H
  00455	00		 DB	 0
$LN10@TransformF:
  00456	6d		 DB	 109			; 0000006dH
  00457	54		 DB	 84			; 00000054H
  00458	72		 DB	 114			; 00000072H
  00459	61		 DB	 97			; 00000061H
  0045a	6e		 DB	 110			; 0000006eH
  0045b	73		 DB	 115			; 00000073H
  0045c	6c		 DB	 108			; 0000006cH
  0045d	61		 DB	 97			; 00000061H
  0045e	74		 DB	 116			; 00000074H
  0045f	65		 DB	 101			; 00000065H
  00460	00		 DB	 0
$LN9@TransformF:
  00461	70		 DB	 112			; 00000070H
  00462	61		 DB	 97			; 00000061H
  00463	72		 DB	 114			; 00000072H
  00464	65		 DB	 101			; 00000065H
  00465	6e		 DB	 110			; 0000006eH
  00466	74		 DB	 116			; 00000074H
  00467	50		 DB	 80			; 00000050H
  00468	6f		 DB	 111			; 0000006fH
  00469	73		 DB	 115			; 00000073H
  0046a	00		 DB	 0
$LN8@TransformF:
  0046b	6d		 DB	 109			; 0000006dH
  0046c	4c		 DB	 76			; 0000004cH
  0046d	6f		 DB	 111			; 0000006fH
  0046e	63		 DB	 99			; 00000063H
  0046f	61		 DB	 97			; 00000061H
  00470	6c		 DB	 108			; 0000006cH
  00471	54		 DB	 84			; 00000054H
  00472	72		 DB	 114			; 00000072H
  00473	61		 DB	 97			; 00000061H
  00474	6e		 DB	 110			; 0000006eH
  00475	73		 DB	 115			; 00000073H
  00476	66		 DB	 102			; 00000066H
  00477	6f		 DB	 111			; 0000006fH
  00478	72		 DB	 114			; 00000072H
  00479	6d		 DB	 109			; 0000006dH
  0047a	00		 DB	 0
?TransformFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@N@Z ENDP ; CDXUTSDKMesh::TransformFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -448						; size = 64
$T2 = -384						; size = 64
$T3 = -320						; size = 64
_mLocalWorld$ = -240					; size = 64
$T4 = -160						; size = 64
_m$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_iFrame$ = 8						; size = 4
_parentWorld$ = 12					; size = 4
?TransformBindPoseFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@@Z PROC ; CDXUTSDKMesh::TransformBindPoseFrame
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 477
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c8 01 00
	00		 sub	 esp, 456		; 000001c8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 38 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-456]
  00025	b9 72 00 00 00	 mov	 ecx, 114		; 00000072H
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 478
  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 b8 74 03 00
	00 00		 cmp	 DWORD PTR [eax+884], 0
  00049	75 05		 jne	 SHORT $LN3@TransformB
; Line 479
  0004b	e9 55 01 00 00	 jmp	 $LN4@TransformB
$LN3@TransformB:
; Line 482
  00050	69 4b 08 b8 00
	00 00		 imul	 ecx, DWORD PTR _iFrame$[ebx], 184
  00057	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0005a	8b 82 60 03 00
	00		 mov	 eax, DWORD PTR [edx+864]
  00060	8d 4c 08 74	 lea	 ecx, DWORD PTR [eax+ecx+116]
  00064	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
  00069	0f 29 9d b0 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+48], xmm3
  00070	0f 29 95 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+32], xmm2
  00077	0f 29 8d 90 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp+16], xmm1
  0007e	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00085	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0008a	8d b5 80 fe ff
	ff		 lea	 esi, DWORD PTR $T2[ebp]
  00090	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR $T4[ebp]
  00096	f3 a5		 rep movsd
  00098	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0009d	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR $T4[ebp]
  000a3	8d 7d b0	 lea	 edi, DWORD PTR _m$[ebp]
  000a6	f3 a5		 rep movsd
; Line 483
  000a8	8b 4b 0c	 mov	 ecx, DWORD PTR _parentWorld$[ebx]
  000ab	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _m$[ebp]
  000af	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _m$[ebp+16]
  000b3	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _m$[ebp+32]
  000b7	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _m$[ebp+48]
  000bb	e8 00 00 00 00	 call	 ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
  000c0	0f 29 9d 70 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  000c7	0f 29 95 60 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  000ce	0f 29 8d 50 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  000d5	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000dc	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000e1	8d b5 40 fe ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  000e7	8d bd c0 fe ff
	ff		 lea	 edi, DWORD PTR $T3[ebp]
  000ed	f3 a5		 rep movsd
  000ef	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000f4	8d b5 c0 fe ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  000fa	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR _mLocalWorld$[ebp]
  00100	f3 a5		 rep movsd
; Line 484
  00102	8b 4b 08	 mov	 ecx, DWORD PTR _iFrame$[ebx]
  00105	c1 e1 06	 shl	 ecx, 6
  00108	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0010b	03 8a 74 03 00
	00		 add	 ecx, DWORD PTR [edx+884]
  00111	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _mLocalWorld$[ebp]
  00118	0f 28 8d 20 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mLocalWorld$[ebp+16]
  0011f	0f 28 95 30 ff
	ff ff		 movaps	 xmm2, XMMWORD PTR _mLocalWorld$[ebp+32]
  00126	0f 28 9d 40 ff
	ff ff		 movaps	 xmm3, XMMWORD PTR _mLocalWorld$[ebp+48]
  0012d	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 487
  00132	69 43 08 b8 00
	00 00		 imul	 eax, DWORD PTR _iFrame$[ebx], 184
  00139	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013c	8b 91 60 03 00
	00		 mov	 edx, DWORD PTR [ecx+864]
  00142	83 7c 02 70 ff	 cmp	 DWORD PTR [edx+eax+112], -1
  00147	74 21		 je	 SHORT $LN2@TransformB
; Line 489
  00149	8b 43 0c	 mov	 eax, DWORD PTR _parentWorld$[ebx]
  0014c	50		 push	 eax
  0014d	69 4b 08 b8 00
	00 00		 imul	 ecx, DWORD PTR _iFrame$[ebx], 184
  00154	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00157	8b 82 60 03 00
	00		 mov	 eax, DWORD PTR [edx+864]
  0015d	8b 4c 08 70	 mov	 ecx, DWORD PTR [eax+ecx+112]
  00161	51		 push	 ecx
  00162	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00165	e8 00 00 00 00	 call	 ?TransformBindPoseFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@@Z ; CDXUTSDKMesh::TransformBindPoseFrame
$LN2@TransformB:
; Line 493
  0016a	69 53 08 b8 00
	00 00		 imul	 edx, DWORD PTR _iFrame$[ebx], 184
  00171	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00174	8b 88 60 03 00
	00		 mov	 ecx, DWORD PTR [eax+864]
  0017a	83 7c 11 6c ff	 cmp	 DWORD PTR [ecx+edx+108], -1
  0017f	74 24		 je	 SHORT $LN4@TransformB
; Line 495
  00181	8d 95 10 ff ff
	ff		 lea	 edx, DWORD PTR _mLocalWorld$[ebp]
  00187	52		 push	 edx
  00188	69 43 08 b8 00
	00 00		 imul	 eax, DWORD PTR _iFrame$[ebx], 184
  0018f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00192	8b 91 60 03 00
	00		 mov	 edx, DWORD PTR [ecx+864]
  00198	8b 44 02 6c	 mov	 eax, DWORD PTR [edx+eax+108]
  0019c	50		 push	 eax
  0019d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a0	e8 00 00 00 00	 call	 ?TransformBindPoseFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@@Z ; CDXUTSDKMesh::TransformBindPoseFrame
$LN4@TransformB:
; Line 497
  001a5	52		 push	 edx
  001a6	8b cd		 mov	 ecx, ebp
  001a8	50		 push	 eax
  001a9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@TransformB
  001af	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001b4	58		 pop	 eax
  001b5	5a		 pop	 edx
  001b6	5f		 pop	 edi
  001b7	5e		 pop	 esi
  001b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001bb	33 cd		 xor	 ecx, ebp
  001bd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	8b e3		 mov	 esp, ebx
  001c7	5b		 pop	 ebx
  001c8	c2 08 00	 ret	 8
  001cb	90		 npad	 1
$LN9@TransformB:
  001cc	02 00 00 00	 DD	 2
  001d0	00 00 00 00	 DD	 $LN8@TransformB
$LN8@TransformB:
  001d4	b0 ff ff ff	 DD	 -80			; ffffffb0H
  001d8	40 00 00 00	 DD	 64			; 00000040H
  001dc	00 00 00 00	 DD	 $LN6@TransformB
  001e0	10 ff ff ff	 DD	 -240			; ffffff10H
  001e4	40 00 00 00	 DD	 64			; 00000040H
  001e8	00 00 00 00	 DD	 $LN7@TransformB
$LN7@TransformB:
  001ec	6d		 DB	 109			; 0000006dH
  001ed	4c		 DB	 76			; 0000004cH
  001ee	6f		 DB	 111			; 0000006fH
  001ef	63		 DB	 99			; 00000063H
  001f0	61		 DB	 97			; 00000061H
  001f1	6c		 DB	 108			; 0000006cH
  001f2	57		 DB	 87			; 00000057H
  001f3	6f		 DB	 111			; 0000006fH
  001f4	72		 DB	 114			; 00000072H
  001f5	6c		 DB	 108			; 0000006cH
  001f6	64		 DB	 100			; 00000064H
  001f7	00		 DB	 0
$LN6@TransformB:
  001f8	6d		 DB	 109			; 0000006dH
  001f9	00		 DB	 0
?TransformBindPoseFrame@CDXUTSDKMesh@@IAEXIABUXMMATRIX@DirectX@@@Z ENDP ; CDXUTSDKMesh::TransformBindPoseFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv344 = -244						; size = 4
tv323 = -240						; size = 4
tv302 = -236						; size = 4
$T2 = -232						; size = 4
$T3 = -228						; size = 4
$T4 = -224						; size = 4
$T5 = -220						; size = 4
$T6 = -216						; size = 4
$T7 = -212						; size = 4
$T8 = -208						; size = 4
$T9 = -204						; size = 4
$T10 = -200						; size = 4
$T11 = -196						; size = 4
$T12 = -192						; size = 4
$T13 = -188						; size = 4
_half$14 = -180						; size = 12
_pt$15 = -164						; size = 4
_ind_div2$16 = -160					; size = 4
_current_ind$17 = -156					; size = 4
_vertind$18 = -152					; size = 4
_stride$19 = -148					; size = 4
_verts$20 = -144					; size = 4
_ind$21 = -140						; size = 4
_IndexStart$22 = -136					; size = 4
_IndexCount$23 = -132					; size = 4
_subset$24 = -128					; size = 4
_indsize$25 = -124					; size = 4
_meshi$26 = -120					; size = 4
_tris$ = -116						; size = 4
_currentMesh$ = -112					; size = 4
_PrimType$ = -108					; size = 4
_pSubset$ = -104					; size = 4
_pIndices$27 = -100					; size = 4
_i$28 = -96						; size = 4
_pVertices$29 = -92					; size = 4
_i$30 = -88						; size = 4
_BufferDataStart$ = -84					; size = 8
_pBufferData$ = -76					; size = 4
_i$31 = -72						; size = 4
_StaticSize$32 = -68					; size = 4
_pHeader$33 = -64					; size = 4
_upper$ = -56						; size = 12
_lower$ = -36						; size = 12
_hr$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pDev11$ = 8						; size = 4
_pData$ = 12						; size = 4
_DataBytes$ = 16					; size = 4
_bCopyStatic$ = 20					; size = 1
_pLoaderCallbacks11$ = 24				; size = 4
?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z PROC ; CDXUTSDKMesh::CreateFromMemory
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 240
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 0c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-244]
  00021	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
; Line 241
  00042	c7 45 ec 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
; Line 242
  00049	8d 4d dc	 lea	 ecx, DWORD PTR _lower$[ebp]
  0004c	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
; Line 243
  00051	8d 4d c8	 lea	 ecx, DWORD PTR _upper$[ebp]
  00054	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@XZ ; DirectX::XMFLOAT3::XMFLOAT3
; Line 245
  00059	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _pDev11$[ebp]
  0005f	89 48 24	 mov	 DWORD PTR [eax+36], ecx
; Line 247
  00062	83 7d 10 68	 cmp	 DWORD PTR _DataBytes$[ebp], 104 ; 00000068H
  00066	73 0a		 jae	 SHORT $LN50@CreateFrom
; Line 248
  00068	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  0006d	e9 c9 0a 00 00	 jmp	 $LN51@CreateFrom
$LN50@CreateFrom:
; Line 251
  00072	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00075	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
; Line 253
  0007c	0f b6 45 14	 movzx	 eax, BYTE PTR _bCopyStatic$[ebp]
  00080	85 c0		 test	 eax, eax
  00082	0f 84 88 00 00
	00		 je	 $LN49@CreateFrom
; Line 255
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  0008b	89 4d c0	 mov	 DWORD PTR _pHeader$33[ebp], ecx
; Line 257
  0008e	8b 55 c0	 mov	 edx, DWORD PTR _pHeader$33[ebp]
  00091	8b 45 c0	 mov	 eax, DWORD PTR _pHeader$33[ebp]
  00094	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00097	03 48 10	 add	 ecx, DWORD PTR [eax+16]
  0009a	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  0009d	13 50 14	 adc	 edx, DWORD PTR [eax+20]
  000a0	89 4d bc	 mov	 DWORD PTR _StaticSize$32[ebp], ecx
; Line 258
  000a3	8b 45 10	 mov	 eax, DWORD PTR _DataBytes$[ebp]
  000a6	3b 45 bc	 cmp	 eax, DWORD PTR _StaticSize$32[ebp]
  000a9	73 0a		 jae	 SHORT $LN48@CreateFrom
; Line 259
  000ab	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  000b0	e9 86 0a 00 00	 jmp	 $LN51@CreateFrom
$LN48@CreateFrom:
; Line 261
  000b5	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  000ba	8b 4d bc	 mov	 ecx, DWORD PTR _StaticSize$32[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  000c3	83 c4 08	 add	 esp, 8
  000c6	89 85 44 ff ff
	ff		 mov	 DWORD PTR $T13[ebp], eax
  000cc	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000cf	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR $T13[ebp]
  000d5	89 42 30	 mov	 DWORD PTR [edx+48], eax
; Line 262
  000d8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	83 79 30 00	 cmp	 DWORD PTR [ecx+48], 0
  000df	75 0a		 jne	 SHORT $LN47@CreateFrom
; Line 263
  000e1	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  000e6	e9 50 0a 00 00	 jmp	 $LN51@CreateFrom
$LN47@CreateFrom:
; Line 265
  000eb	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ee	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f1	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  000f4	89 4a 2c	 mov	 DWORD PTR [edx+44], ecx
; Line 267
  000f7	8b 55 bc	 mov	 edx, DWORD PTR _StaticSize$32[ebp]
  000fa	52		 push	 edx
  000fb	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  000fe	50		 push	 eax
  000ff	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00102	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00105	52		 push	 edx
  00106	e8 00 00 00 00	 call	 _memcpy
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 269
  0010e	eb 12		 jmp	 SHORT $LN46@CreateFrom
$LN49@CreateFrom:
; Line 271
  00110	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00113	8b 4d 0c	 mov	 ecx, DWORD PTR _pData$[ebp]
  00116	89 48 30	 mov	 DWORD PTR [eax+48], ecx
; Line 272
  00119	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0011c	8b 45 0c	 mov	 eax, DWORD PTR _pData$[ebp]
  0011f	89 42 2c	 mov	 DWORD PTR [edx+44], eax
$LN46@CreateFrom:
; Line 276
  00122	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00125	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00128	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0012b	89 81 4c 03 00
	00		 mov	 DWORD PTR [ecx+844], eax
; Line 279
  00131	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  0013a	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0013d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00140	03 41 2c	 add	 eax, DWORD PTR [ecx+44]
  00143	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00146	89 82 50 03 00
	00		 mov	 DWORD PTR [edx+848], eax
; Line 281
  0014c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0014f	8b 88 4c 03 00
	00		 mov	 ecx, DWORD PTR [eax+844]
  00155	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00158	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0015b	03 50 2c	 add	 edx, DWORD PTR [eax+44]
  0015e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00161	89 91 54 03 00
	00		 mov	 DWORD PTR [ecx+852], edx
; Line 282
  00167	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0016a	8b 82 4c 03 00
	00		 mov	 eax, DWORD PTR [edx+844]
  00170	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00173	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00176	03 4a 2c	 add	 ecx, DWORD PTR [edx+44]
  00179	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0017c	89 88 58 03 00
	00		 mov	 DWORD PTR [eax+856], ecx
; Line 283
  00182	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00185	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  0018b	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0018e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00191	03 41 2c	 add	 eax, DWORD PTR [ecx+44]
  00194	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00197	89 82 5c 03 00
	00		 mov	 DWORD PTR [edx+860], eax
; Line 284
  0019d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001a0	8b 88 4c 03 00
	00		 mov	 ecx, DWORD PTR [eax+844]
  001a6	8b 51 58	 mov	 edx, DWORD PTR [ecx+88]
  001a9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001ac	03 50 2c	 add	 edx, DWORD PTR [eax+44]
  001af	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001b2	89 91 60 03 00
	00		 mov	 DWORD PTR [ecx+864], edx
; Line 285
  001b8	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001bb	8b 82 4c 03 00
	00		 mov	 eax, DWORD PTR [edx+844]
  001c1	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  001c4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001c7	03 4a 2c	 add	 ecx, DWORD PTR [edx+44]
  001ca	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001cd	89 88 64 03 00
	00		 mov	 DWORD PTR [eax+868], ecx
; Line 288
  001d3	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _i$31[ebp], 0
  001da	eb 09		 jmp	 SHORT $LN45@CreateFrom
$LN44@CreateFrom:
  001dc	8b 4d b8	 mov	 ecx, DWORD PTR _i$31[ebp]
  001df	83 c1 01	 add	 ecx, 1
  001e2	89 4d b8	 mov	 DWORD PTR _i$31[ebp], ecx
$LN45@CreateFrom:
  001e5	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001e8	8b 82 4c 03 00
	00		 mov	 eax, DWORD PTR [edx+844]
  001ee	8b 4d b8	 mov	 ecx, DWORD PTR _i$31[ebp]
  001f1	3b 48 28	 cmp	 ecx, DWORD PTR [eax+40]
  001f4	73 6d		 jae	 SHORT $LN43@CreateFrom
; Line 290
  001f6	69 55 b8 e0 00
	00 00		 imul	 edx, DWORD PTR _i$31[ebp], 224
  001fd	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00200	8b 88 58 03 00
	00		 mov	 ecx, DWORD PTR [eax+856]
  00206	8b 94 11 d0 00
	00 00		 mov	 edx, DWORD PTR [ecx+edx+208]
  0020d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00210	03 50 2c	 add	 edx, DWORD PTR [eax+44]
  00213	69 4d b8 e0 00
	00 00		 imul	 ecx, DWORD PTR _i$31[ebp], 224
  0021a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0021d	8b 80 58 03 00
	00		 mov	 eax, DWORD PTR [eax+856]
  00223	89 94 08 d0 00
	00 00		 mov	 DWORD PTR [eax+ecx+208], edx
; Line 291
  0022a	69 4d b8 e0 00
	00 00		 imul	 ecx, DWORD PTR _i$31[ebp], 224
  00231	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00234	8b 82 58 03 00
	00		 mov	 eax, DWORD PTR [edx+856]
  0023a	8b 8c 08 d8 00
	00 00		 mov	 ecx, DWORD PTR [eax+ecx+216]
  00241	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00244	03 4a 2c	 add	 ecx, DWORD PTR [edx+44]
  00247	69 45 b8 e0 00
	00 00		 imul	 eax, DWORD PTR _i$31[ebp], 224
  0024e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00251	8b 92 58 03 00
	00		 mov	 edx, DWORD PTR [edx+856]
  00257	89 8c 02 d8 00
	00 00		 mov	 DWORD PTR [edx+eax+216], ecx
; Line 292
  0025e	e9 79 ff ff ff	 jmp	 $LN44@CreateFrom
$LN43@CreateFrom:
; Line 295
  00263	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00266	8b 88 4c 03 00
	00		 mov	 ecx, DWORD PTR [eax+844]
  0026c	83 39 65	 cmp	 DWORD PTR [ecx], 101	; 00000065H
  0026f	74 0c		 je	 SHORT $LN42@CreateFrom
; Line 297
  00271	c7 45 ec 02 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467262 ; 80004002H
; Line 298
  00278	e9 bb 08 00 00	 jmp	 $Error$70
$LN42@CreateFrom:
; Line 302
  0027d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00280	8b 82 4c 03 00
	00		 mov	 eax, DWORD PTR [edx+844]
  00286	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00289	03 4d 0c	 add	 ecx, DWORD PTR _pData$[ebp]
  0028c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0028f	8b 82 4c 03 00
	00		 mov	 eax, DWORD PTR [edx+844]
  00295	03 48 10	 add	 ecx, DWORD PTR [eax+16]
  00298	89 4d b4	 mov	 DWORD PTR _pBufferData$[ebp], ecx
; Line 305
  0029b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0029e	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  002a4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002a7	8b 88 4c 03 00
	00		 mov	 ecx, DWORD PTR [eax+844]
  002ad	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002b0	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  002b3	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  002b6	13 51 14	 adc	 edx, DWORD PTR [ecx+20]
  002b9	89 45 ac	 mov	 DWORD PTR _BufferDataStart$[ebp], eax
  002bc	89 55 b0	 mov	 DWORD PTR _BufferDataStart$[ebp+4], edx
; Line 308
  002bf	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  002c4	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002c7	8b 88 4c 03 00
	00		 mov	 ecx, DWORD PTR [eax+844]
  002cd	33 db		 xor	 ebx, ebx
  002cf	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  002d2	ba 04 00 00 00	 mov	 edx, 4
  002d7	f7 e2		 mul	 edx
  002d9	0f 90 c3	 seto	 bl
  002dc	f7 db		 neg	 ebx
  002de	0b d8		 or	 ebx, eax
  002e0	53		 push	 ebx
  002e1	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  002e6	83 c4 08	 add	 esp, 8
  002e9	89 85 40 ff ff
	ff		 mov	 DWORD PTR $T12[ebp], eax
  002ef	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  002f2	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR $T12[ebp]
  002f8	89 48 38	 mov	 DWORD PTR [eax+56], ecx
; Line 309
  002fb	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  002fe	83 7a 38 00	 cmp	 DWORD PTR [edx+56], 0
  00302	75 0c		 jne	 SHORT $LN40@CreateFrom
; Line 311
  00304	c7 45 ec 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
; Line 312
  0030b	e9 28 08 00 00	 jmp	 $Error$70
$LN40@CreateFrom:
; Line 314
  00310	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _i$30[ebp], 0
  00317	eb 09		 jmp	 SHORT $LN38@CreateFrom
$LN37@CreateFrom:
  00319	8b 45 a8	 mov	 eax, DWORD PTR _i$30[ebp]
  0031c	83 c0 01	 add	 eax, 1
  0031f	89 45 a8	 mov	 DWORD PTR _i$30[ebp], eax
$LN38@CreateFrom:
  00322	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00325	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  0032b	8b 45 a8	 mov	 eax, DWORD PTR _i$30[ebp]
  0032e	3b 42 20	 cmp	 eax, DWORD PTR [edx+32]
  00331	73 70		 jae	 SHORT $LN36@CreateFrom
; Line 316
  00333	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _pVertices$29[ebp], 0
; Line 317
  0033a	69 4d a8 20 01
	00 00		 imul	 ecx, DWORD PTR _i$30[ebp], 288
  00341	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00344	8b 82 50 03 00
	00		 mov	 eax, DWORD PTR [edx+848]
  0034a	8b 94 08 18 01
	00 00		 mov	 edx, DWORD PTR [eax+ecx+280]
  00351	2b 55 ac	 sub	 edx, DWORD PTR _BufferDataStart$[ebp]
  00354	8b 84 08 1c 01
	00 00		 mov	 eax, DWORD PTR [eax+ecx+284]
  0035b	1b 45 b0	 sbb	 eax, DWORD PTR _BufferDataStart$[ebp+4]
  0035e	03 55 b4	 add	 edx, DWORD PTR _pBufferData$[ebp]
  00361	89 55 a4	 mov	 DWORD PTR _pVertices$29[ebp], edx
; Line 319
  00364	83 7d 08 00	 cmp	 DWORD PTR _pDev11$[ebp], 0
  00368	74 25		 je	 SHORT $LN35@CreateFrom
; Line 320
  0036a	8b 4d 18	 mov	 ecx, DWORD PTR _pLoaderCallbacks11$[ebp]
  0036d	51		 push	 ecx
  0036e	8b 55 a4	 mov	 edx, DWORD PTR _pVertices$29[ebp]
  00371	52		 push	 edx
  00372	69 45 a8 20 01
	00 00		 imul	 eax, DWORD PTR _i$30[ebp], 288
  00379	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0037c	03 81 50 03 00
	00		 add	 eax, DWORD PTR [ecx+848]
  00382	50		 push	 eax
  00383	8b 55 08	 mov	 edx, DWORD PTR _pDev11$[ebp]
  00386	52		 push	 edx
  00387	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0038a	e8 00 00 00 00	 call	 ?CreateVertexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_VERTEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::CreateVertexBuffer
$LN35@CreateFrom:
; Line 322
  0038f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00392	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00395	8b 55 a8	 mov	 edx, DWORD PTR _i$30[ebp]
  00398	8b 45 a4	 mov	 eax, DWORD PTR _pVertices$29[ebp]
  0039b	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
; Line 323
  0039e	e9 76 ff ff ff	 jmp	 $LN37@CreateFrom
$LN36@CreateFrom:
; Line 326
  003a3	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  003a8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  003ab	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  003b1	33 c9		 xor	 ecx, ecx
  003b3	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  003b6	ba 04 00 00 00	 mov	 edx, 4
  003bb	f7 e2		 mul	 edx
  003bd	0f 90 c1	 seto	 cl
  003c0	f7 d9		 neg	 ecx
  003c2	0b c8		 or	 ecx, eax
  003c4	51		 push	 ecx
  003c5	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  003ca	83 c4 08	 add	 esp, 8
  003cd	89 85 3c ff ff
	ff		 mov	 DWORD PTR $T11[ebp], eax
  003d3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  003d6	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR $T11[ebp]
  003dc	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
; Line 327
  003df	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  003e2	83 7a 3c 00	 cmp	 DWORD PTR [edx+60], 0
  003e6	75 0c		 jne	 SHORT $LN34@CreateFrom
; Line 329
  003e8	c7 45 ec 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
; Line 330
  003ef	e9 44 07 00 00	 jmp	 $Error$70
$LN34@CreateFrom:
; Line 333
  003f4	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _i$28[ebp], 0
  003fb	eb 09		 jmp	 SHORT $LN32@CreateFrom
$LN31@CreateFrom:
  003fd	8b 45 a0	 mov	 eax, DWORD PTR _i$28[ebp]
  00400	83 c0 01	 add	 eax, 1
  00403	89 45 a0	 mov	 DWORD PTR _i$28[ebp], eax
$LN32@CreateFrom:
  00406	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00409	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  0040f	8b 45 a0	 mov	 eax, DWORD PTR _i$28[ebp]
  00412	3b 42 24	 cmp	 eax, DWORD PTR [edx+36]
  00415	73 65		 jae	 SHORT $LN30@CreateFrom
; Line 335
  00417	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _pIndices$27[ebp], 0
; Line 336
  0041e	8b 4d a0	 mov	 ecx, DWORD PTR _i$28[ebp]
  00421	c1 e1 05	 shl	 ecx, 5
  00424	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00427	8b 82 54 03 00
	00		 mov	 eax, DWORD PTR [edx+852]
  0042d	8b 54 08 18	 mov	 edx, DWORD PTR [eax+ecx+24]
  00431	2b 55 ac	 sub	 edx, DWORD PTR _BufferDataStart$[ebp]
  00434	8b 44 08 1c	 mov	 eax, DWORD PTR [eax+ecx+28]
  00438	1b 45 b0	 sbb	 eax, DWORD PTR _BufferDataStart$[ebp+4]
  0043b	03 55 b4	 add	 edx, DWORD PTR _pBufferData$[ebp]
  0043e	89 55 9c	 mov	 DWORD PTR _pIndices$27[ebp], edx
; Line 338
  00441	83 7d 08 00	 cmp	 DWORD PTR _pDev11$[ebp], 0
  00445	74 24		 je	 SHORT $LN29@CreateFrom
; Line 339
  00447	8b 4d 18	 mov	 ecx, DWORD PTR _pLoaderCallbacks11$[ebp]
  0044a	51		 push	 ecx
  0044b	8b 55 9c	 mov	 edx, DWORD PTR _pIndices$27[ebp]
  0044e	52		 push	 edx
  0044f	8b 45 a0	 mov	 eax, DWORD PTR _i$28[ebp]
  00452	c1 e0 05	 shl	 eax, 5
  00455	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00458	03 81 54 03 00
	00		 add	 eax, DWORD PTR [ecx+852]
  0045e	50		 push	 eax
  0045f	8b 55 08	 mov	 edx, DWORD PTR _pDev11$[ebp]
  00462	52		 push	 edx
  00463	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00466	e8 00 00 00 00	 call	 ?CreateIndexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_INDEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::CreateIndexBuffer
$LN29@CreateFrom:
; Line 341
  0046b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0046e	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00471	8b 55 a0	 mov	 edx, DWORD PTR _i$28[ebp]
  00474	8b 45 9c	 mov	 eax, DWORD PTR _pIndices$27[ebp]
  00477	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
; Line 342
  0047a	eb 81		 jmp	 SHORT $LN31@CreateFrom
$LN30@CreateFrom:
; Line 345
  0047c	83 7d 08 00	 cmp	 DWORD PTR _pDev11$[ebp], 0
  00480	74 27		 je	 SHORT $LN28@CreateFrom
; Line 346
  00482	8b 4d 18	 mov	 ecx, DWORD PTR _pLoaderCallbacks11$[ebp]
  00485	51		 push	 ecx
  00486	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00489	8b 82 4c 03 00
	00		 mov	 eax, DWORD PTR [edx+844]
  0048f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00492	51		 push	 ecx
  00493	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00496	8b 82 64 03 00
	00		 mov	 eax, DWORD PTR [edx+868]
  0049c	50		 push	 eax
  0049d	8b 4d 08	 mov	 ecx, DWORD PTR _pDev11$[ebp]
  004a0	51		 push	 ecx
  004a1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  004a4	e8 00 00 00 00	 call	 ?LoadMaterials@CDXUTSDKMesh@@IAEXPAUID3D11Device@@PAUSDKMESH_MATERIAL@@IPAUSDKMESH_CALLBACKS11@@@Z ; CDXUTSDKMesh::LoadMaterials
$LN28@CreateFrom:
; Line 349
  004a9	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  004ac	8b 82 4c 03 00
	00		 mov	 eax, DWORD PTR [edx+844]
  004b2	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  004b5	89 8d 38 ff ff
	ff		 mov	 DWORD PTR $T10[ebp], ecx
  004bb	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  004c0	33 c9		 xor	 ecx, ecx
  004c2	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T10[ebp]
  004c8	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  004cd	f7 e2		 mul	 edx
  004cf	0f 90 c1	 seto	 cl
  004d2	f7 d9		 neg	 ecx
  004d4	0b c8		 or	 ecx, eax
  004d6	51		 push	 ecx
  004d7	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  004dc	83 c4 08	 add	 esp, 8
  004df	89 85 30 ff ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  004e5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  004ec	83 bd 30 ff ff
	ff 00		 cmp	 DWORD PTR $T8[ebp], 0
  004f3	74 28		 je	 SHORT $LN53@CreateFrom
  004f5	68 00 00 00 00	 push	 OFFSET ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
  004fa	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR $T10[ebp]
  00500	50		 push	 eax
  00501	6a 40		 push	 64			; 00000040H
  00503	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR $T8[ebp]
  00509	51		 push	 ecx
  0050a	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z
  0050f	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR $T8[ebp]
  00515	89 95 14 ff ff
	ff		 mov	 DWORD PTR tv302[ebp], edx
  0051b	eb 0a		 jmp	 SHORT $LN54@CreateFrom
$LN53@CreateFrom:
  0051d	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv302[ebp], 0
$LN54@CreateFrom:
  00527	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv302[ebp]
  0052d	89 85 34 ff ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
  00533	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0053a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0053d	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR $T9[ebp]
  00543	89 91 74 03 00
	00		 mov	 DWORD PTR [ecx+884], edx
; Line 350
  00549	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0054c	83 b8 74 03 00
	00 00		 cmp	 DWORD PTR [eax+884], 0
  00553	75 0c		 jne	 SHORT $LN27@CreateFrom
; Line 352
  00555	c7 45 ec 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
; Line 353
  0055c	e9 d7 05 00 00	 jmp	 $Error$70
$LN27@CreateFrom:
; Line 357
  00561	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00564	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  0056a	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0056d	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  00573	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00578	33 c9		 xor	 ecx, ecx
  0057a	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  00580	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00585	f7 e2		 mul	 edx
  00587	0f 90 c1	 seto	 cl
  0058a	f7 d9		 neg	 ecx
  0058c	0b c8		 or	 ecx, eax
  0058e	51		 push	 ecx
  0058f	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  00594	83 c4 08	 add	 esp, 8
  00597	89 85 24 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  0059d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  005a4	83 bd 24 ff ff
	ff 00		 cmp	 DWORD PTR $T5[ebp], 0
  005ab	74 28		 je	 SHORT $LN55@CreateFrom
  005ad	68 00 00 00 00	 push	 OFFSET ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
  005b2	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  005b8	50		 push	 eax
  005b9	6a 40		 push	 64			; 00000040H
  005bb	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp]
  005c1	51		 push	 ecx
  005c2	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z
  005c7	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR $T5[ebp]
  005cd	89 95 10 ff ff
	ff		 mov	 DWORD PTR tv323[ebp], edx
  005d3	eb 0a		 jmp	 SHORT $LN56@CreateFrom
$LN55@CreateFrom:
  005d5	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv323[ebp], 0
$LN56@CreateFrom:
  005df	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR tv323[ebp]
  005e5	89 85 28 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  005eb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005f2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  005f5	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR $T6[ebp]
  005fb	89 91 78 03 00
	00		 mov	 DWORD PTR [ecx+888], edx
; Line 358
  00601	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00604	83 b8 78 03 00
	00 00		 cmp	 DWORD PTR [eax+888], 0
  0060b	75 0c		 jne	 SHORT $LN25@CreateFrom
; Line 360
  0060d	c7 45 ec 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
; Line 361
  00614	e9 1f 05 00 00	 jmp	 $Error$70
$LN25@CreateFrom:
; Line 364
  00619	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0061c	8b 91 4c 03 00
	00		 mov	 edx, DWORD PTR [ecx+844]
  00622	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00625	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  0062b	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00630	33 c9		 xor	 ecx, ecx
  00632	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00638	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0063d	f7 e2		 mul	 edx
  0063f	0f 90 c1	 seto	 cl
  00642	f7 d9		 neg	 ecx
  00644	0b c8		 or	 ecx, eax
  00646	51		 push	 ecx
  00647	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  0064c	83 c4 08	 add	 esp, 8
  0064f	89 85 18 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00655	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0065c	83 bd 18 ff ff
	ff 00		 cmp	 DWORD PTR $T2[ebp], 0
  00663	74 28		 je	 SHORT $LN57@CreateFrom
  00665	68 00 00 00 00	 push	 OFFSET ??0XMFLOAT4X4@DirectX@@QAE@XZ ; DirectX::XMFLOAT4X4::XMFLOAT4X4
  0066a	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00670	50		 push	 eax
  00671	6a 40		 push	 64			; 00000040H
  00673	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00679	51		 push	 ecx
  0067a	e8 00 00 00 00	 call	 ??_H@YGXPAXIHP6EPAX0@Z@Z
  0067f	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00685	89 95 0c ff ff
	ff		 mov	 DWORD PTR tv344[ebp], edx
  0068b	eb 0a		 jmp	 SHORT $LN58@CreateFrom
$LN57@CreateFrom:
  0068d	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv344[ebp], 0
$LN58@CreateFrom:
  00697	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv344[ebp]
  0069d	89 85 1c ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  006a3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  006aa	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  006ad	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR $T3[ebp]
  006b3	89 91 7c 03 00
	00		 mov	 DWORD PTR [ecx+892], edx
; Line 365
  006b9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  006bc	83 b8 7c 03 00
	00 00		 cmp	 DWORD PTR [eax+892], 0
  006c3	75 0c		 jne	 SHORT $LN23@CreateFrom
; Line 367
  006c5	c7 45 ec 0e 00
	07 80		 mov	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
; Line 368
  006cc	e9 67 04 00 00	 jmp	 $Error$70
$LN23@CreateFrom:
; Line 371
  006d1	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _pSubset$[ebp], 0
; Line 375
  006d8	b9 e0 00 00 00	 mov	 ecx, 224		; 000000e0H
  006dd	6b d1 00	 imul	 edx, ecx, 0
  006e0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  006e3	03 90 58 03 00
	00		 add	 edx, DWORD PTR [eax+856]
  006e9	89 55 90	 mov	 DWORD PTR _currentMesh$[ebp], edx
; Line 376
  006ec	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _tris$[ebp], 0
; Line 377
  006f3	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _meshi$26[ebp], 0
  006fa	eb 09		 jmp	 SHORT $LN21@CreateFrom
$LN20@CreateFrom:
  006fc	8b 4d 88	 mov	 ecx, DWORD PTR _meshi$26[ebp]
  006ff	83 c1 01	 add	 ecx, 1
  00702	89 4d 88	 mov	 DWORD PTR _meshi$26[ebp], ecx
$LN21@CreateFrom:
  00705	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00708	8b 82 4c 03 00
	00		 mov	 eax, DWORD PTR [edx+844]
  0070e	8b 4d 88	 mov	 ecx, DWORD PTR _meshi$26[ebp]
  00711	3b 48 28	 cmp	 ecx, DWORD PTR [eax+40]
  00714	0f 83 17 04 00
	00		 jae	 $LN19@CreateFrom
; Line 378
  0071a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  00722	f3 0f 11 45 dc	 movss	 DWORD PTR _lower$[ebp], xmm0
  00727	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  0072f	f3 0f 11 45 e0	 movss	 DWORD PTR _lower$[ebp+4], xmm0
  00734	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  0073c	f3 0f 11 45 e4	 movss	 DWORD PTR _lower$[ebp+8], xmm0
; Line 379
  00741	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@ff7fffff
  00749	f3 0f 11 45 c8	 movss	 DWORD PTR _upper$[ebp], xmm0
  0074e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@ff7fffff
  00756	f3 0f 11 45 cc	 movss	 DWORD PTR _upper$[ebp+4], xmm0
  0075b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@ff7fffff
  00763	f3 0f 11 45 d0	 movss	 DWORD PTR _upper$[ebp+8], xmm0
; Line 380
  00768	8b 55 88	 mov	 edx, DWORD PTR _meshi$26[ebp]
  0076b	52		 push	 edx
  0076c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0076f	e8 00 00 00 00	 call	 ?GetMesh@CDXUTSDKMesh@@QBEPAUSDKMESH_MESH@@I@Z ; CDXUTSDKMesh::GetMesh
  00774	89 45 90	 mov	 DWORD PTR _currentMesh$[ebp], eax
; Line 382
  00777	8b 45 90	 mov	 eax, DWORD PTR _currentMesh$[ebp]
  0077a	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00780	c1 e1 05	 shl	 ecx, 5
  00783	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00786	8b 82 54 03 00
	00		 mov	 eax, DWORD PTR [edx+852]
  0078c	83 7c 08 10 00	 cmp	 DWORD PTR [eax+ecx+16], 0
  00791	75 09		 jne	 SHORT $LN18@CreateFrom
; Line 383
  00793	c7 45 84 02 00
	00 00		 mov	 DWORD PTR _indsize$25[ebp], 2
; Line 384
  0079a	eb 07		 jmp	 SHORT $LN17@CreateFrom
$LN18@CreateFrom:
; Line 385
  0079c	c7 45 84 04 00
	00 00		 mov	 DWORD PTR _indsize$25[ebp], 4
$LN17@CreateFrom:
; Line 388
  007a3	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _subset$24[ebp], 0
  007aa	eb 09		 jmp	 SHORT $LN16@CreateFrom
$LN15@CreateFrom:
  007ac	8b 4d 80	 mov	 ecx, DWORD PTR _subset$24[ebp]
  007af	83 c1 01	 add	 ecx, 1
  007b2	89 4d 80	 mov	 DWORD PTR _subset$24[ebp], ecx
$LN16@CreateFrom:
  007b5	8b 55 90	 mov	 edx, DWORD PTR _currentMesh$[ebp]
  007b8	8b 45 80	 mov	 eax, DWORD PTR _subset$24[ebp]
  007bb	3b 82 ac 00 00
	00		 cmp	 eax, DWORD PTR [edx+172]
  007c1	0f 83 b5 02 00
	00		 jae	 $LN14@CreateFrom
; Line 390
  007c7	8b 4d 80	 mov	 ecx, DWORD PTR _subset$24[ebp]
  007ca	51		 push	 ecx
  007cb	8b 55 88	 mov	 edx, DWORD PTR _meshi$26[ebp]
  007ce	52		 push	 edx
  007cf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  007d2	e8 00 00 00 00	 call	 ?GetSubset@CDXUTSDKMesh@@QBEPAUSDKMESH_SUBSET@@II@Z ; CDXUTSDKMesh::GetSubset
  007d7	89 45 98	 mov	 DWORD PTR _pSubset$[ebp], eax
; Line 392
  007da	8b 45 98	 mov	 eax, DWORD PTR _pSubset$[ebp]
  007dd	8b 48 68	 mov	 ecx, DWORD PTR [eax+104]
  007e0	51		 push	 ecx
  007e1	e8 00 00 00 00	 call	 ?GetPrimitiveType11@CDXUTSDKMesh@@SA?AW4D3D_PRIMITIVE_TOPOLOGY@@W4SDKMESH_PRIMITIVE_TYPE@@@Z ; CDXUTSDKMesh::GetPrimitiveType11
  007e6	83 c4 04	 add	 esp, 4
  007e9	89 45 94	 mov	 DWORD PTR _PrimType$[ebp], eax
; Line 393
  007ec	83 7d 94 04	 cmp	 DWORD PTR _PrimType$[ebp], 4
  007f0	74 21		 je	 SHORT $LN59@CreateFrom
  007f2	8b f4		 mov	 esi, esp
  007f4	68 89 01 00 00	 push	 393			; 00000189H
  007f9	68 00 00 00 00	 push	 OFFSET $SG154992
  007fe	68 00 00 00 00	 push	 OFFSET $SG154993
  00803	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00809	83 c4 0c	 add	 esp, 12			; 0000000cH
  0080c	3b f4		 cmp	 esi, esp
  0080e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN59@CreateFrom:
; Line 395
  00813	8b 45 98	 mov	 eax, DWORD PTR _pSubset$[ebp]
  00816	8b 48 78	 mov	 ecx, DWORD PTR [eax+120]
  00819	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _IndexCount$23[ebp], ecx
; Line 396
  0081f	8b 55 98	 mov	 edx, DWORD PTR _pSubset$[ebp]
  00822	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  00825	89 85 78 ff ff
	ff		 mov	 DWORD PTR _IndexStart$22[ebp], eax
; Line 406
  0082b	8b 4d 90	 mov	 ecx, DWORD PTR _currentMesh$[ebp]
  0082e	8b 91 a8 00 00
	00		 mov	 edx, DWORD PTR [ecx+168]
  00834	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00837	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0083a	8b 14 91	 mov	 edx, DWORD PTR [ecx+edx*4]
  0083d	89 95 74 ff ff
	ff		 mov	 DWORD PTR _ind$21[ebp], edx
; Line 407
  00843	b8 04 00 00 00	 mov	 eax, 4
  00848	6b c8 00	 imul	 ecx, eax, 0
  0084b	8b 55 90	 mov	 edx, DWORD PTR _currentMesh$[ebp]
  0084e	8b 44 0a 68	 mov	 eax, DWORD PTR [edx+ecx+104]
  00852	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00855	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00858	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0085b	89 85 70 ff ff
	ff		 mov	 DWORD PTR _verts$20[ebp], eax
; Line 408
  00861	b9 04 00 00 00	 mov	 ecx, 4
  00866	6b d1 00	 imul	 edx, ecx, 0
  00869	8b 45 90	 mov	 eax, DWORD PTR _currentMesh$[ebp]
  0086c	69 4c 10 68 20
	01 00 00	 imul	 ecx, DWORD PTR [eax+edx+104], 288
  00874	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00877	8b 82 50 03 00
	00		 mov	 eax, DWORD PTR [edx+848]
  0087d	8b 4c 08 10	 mov	 ecx, DWORD PTR [eax+ecx+16]
  00881	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _stride$19[ebp], ecx
; Line 409
  00887	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _stride$19[ebp]
  0088d	33 d2		 xor	 edx, edx
  0088f	b9 04 00 00 00	 mov	 ecx, 4
  00894	f7 f1		 div	 ecx
  00896	85 d2		 test	 edx, edx
  00898	74 21		 je	 SHORT $LN60@CreateFrom
  0089a	8b f4		 mov	 esi, esp
  0089c	68 99 01 00 00	 push	 409			; 00000199H
  008a1	68 00 00 00 00	 push	 OFFSET $SG155005
  008a6	68 00 00 00 00	 push	 OFFSET $SG155006
  008ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  008b1	83 c4 0c	 add	 esp, 12			; 0000000cH
  008b4	3b f4		 cmp	 esi, esp
  008b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN60@CreateFrom:
; Line 410
  008bb	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _stride$19[ebp]
  008c1	c1 e8 02	 shr	 eax, 2
  008c4	89 85 6c ff ff
	ff		 mov	 DWORD PTR _stride$19[ebp], eax
; Line 411
  008ca	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR _IndexStart$22[ebp]
  008d0	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _vertind$18[ebp], ecx
  008d6	eb 0f		 jmp	 SHORT $LN13@CreateFrom
$LN12@CreateFrom:
  008d8	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _vertind$18[ebp]
  008de	83 c2 01	 add	 edx, 1
  008e1	89 95 68 ff ff
	ff		 mov	 DWORD PTR _vertind$18[ebp], edx
$LN13@CreateFrom:
  008e7	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _IndexStart$22[ebp]
  008ed	03 85 7c ff ff
	ff		 add	 eax, DWORD PTR _IndexCount$23[ebp]
  008f3	39 85 68 ff ff
	ff		 cmp	 DWORD PTR _vertind$18[ebp], eax
  008f9	0f 83 78 01 00
	00		 jae	 $LN11@CreateFrom
; Line 412
  008ff	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _current_ind$17[ebp], 0
; Line 413
  00909	83 7d 84 02	 cmp	 DWORD PTR _indsize$25[ebp], 2
  0090d	75 67		 jne	 SHORT $LN10@CreateFrom
; Line 414
  0090f	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _vertind$18[ebp]
  00915	d1 e9		 shr	 ecx, 1
  00917	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _ind_div2$16[ebp], ecx
; Line 415
  0091d	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _ind_div2$16[ebp]
  00923	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _ind$21[ebp]
  00929	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0092c	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _current_ind$17[ebp], ecx
; Line 416
  00932	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _vertind$18[ebp]
  00938	33 d2		 xor	 edx, edx
  0093a	b9 02 00 00 00	 mov	 ecx, 2
  0093f	f7 f1		 div	 ecx
  00941	85 d2		 test	 edx, edx
  00943	75 20		 jne	 SHORT $LN9@CreateFrom
; Line 417
  00945	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _current_ind$17[ebp]
  0094b	c1 e2 10	 shl	 edx, 16			; 00000010H
  0094e	89 95 64 ff ff
	ff		 mov	 DWORD PTR _current_ind$17[ebp], edx
; Line 418
  00954	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _current_ind$17[ebp]
  0095a	c1 e8 10	 shr	 eax, 16			; 00000010H
  0095d	89 85 64 ff ff
	ff		 mov	 DWORD PTR _current_ind$17[ebp], eax
; Line 419
  00963	eb 0f		 jmp	 SHORT $LN8@CreateFrom
$LN9@CreateFrom:
; Line 420
  00965	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _current_ind$17[ebp]
  0096b	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0096e	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _current_ind$17[ebp], ecx
$LN8@CreateFrom:
; Line 422
  00974	eb 15		 jmp	 SHORT $LN7@CreateFrom
$LN10@CreateFrom:
; Line 423
  00976	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _vertind$18[ebp]
  0097c	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _ind$21[ebp]
  00982	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  00985	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _current_ind$17[ebp], ecx
$LN7@CreateFrom:
; Line 425
  0098b	8b 55 8c	 mov	 edx, DWORD PTR _tris$[ebp]
  0098e	83 c2 01	 add	 edx, 1
  00991	89 55 8c	 mov	 DWORD PTR _tris$[ebp], edx
; Line 426
  00994	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _stride$19[ebp]
  0099a	0f af 85 64 ff
	ff ff		 imul	 eax, DWORD PTR _current_ind$17[ebp]
  009a1	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _verts$20[ebp]
  009a7	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  009aa	89 95 5c ff ff
	ff		 mov	 DWORD PTR _pt$15[ebp], edx
; Line 427
  009b0	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _pt$15[ebp]
  009b6	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _lower$[ebp]
  009bb	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  009be	76 0f		 jbe	 SHORT $LN6@CreateFrom
; Line 428
  009c0	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pt$15[ebp]
  009c6	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  009ca	f3 0f 11 45 dc	 movss	 DWORD PTR _lower$[ebp], xmm0
$LN6@CreateFrom:
; Line 430
  009cf	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _pt$15[ebp]
  009d5	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _lower$[ebp+4]
  009da	0f 2f 42 04	 comiss	 xmm0, DWORD PTR [edx+4]
  009de	76 10		 jbe	 SHORT $LN5@CreateFrom
; Line 431
  009e0	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _pt$15[ebp]
  009e6	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  009eb	f3 0f 11 45 e0	 movss	 DWORD PTR _lower$[ebp+4], xmm0
$LN5@CreateFrom:
; Line 433
  009f0	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pt$15[ebp]
  009f6	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _lower$[ebp+8]
  009fb	0f 2f 41 08	 comiss	 xmm0, DWORD PTR [ecx+8]
  009ff	76 10		 jbe	 SHORT $LN4@CreateFrom
; Line 434
  00a01	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _pt$15[ebp]
  00a07	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00a0c	f3 0f 11 45 e4	 movss	 DWORD PTR _lower$[ebp+8], xmm0
$LN4@CreateFrom:
; Line 436
  00a11	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _pt$15[ebp]
  00a17	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00a1b	0f 2f 45 c8	 comiss	 xmm0, DWORD PTR _upper$[ebp]
  00a1f	76 0f		 jbe	 SHORT $LN3@CreateFrom
; Line 437
  00a21	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pt$15[ebp]
  00a27	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00a2b	f3 0f 11 45 c8	 movss	 DWORD PTR _upper$[ebp], xmm0
$LN3@CreateFrom:
; Line 439
  00a30	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _pt$15[ebp]
  00a36	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00a3b	0f 2f 45 cc	 comiss	 xmm0, DWORD PTR _upper$[ebp+4]
  00a3f	76 10		 jbe	 SHORT $LN2@CreateFrom
; Line 440
  00a41	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _pt$15[ebp]
  00a47	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00a4c	f3 0f 11 45 cc	 movss	 DWORD PTR _upper$[ebp+4], xmm0
$LN2@CreateFrom:
; Line 442
  00a51	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _pt$15[ebp]
  00a57	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00a5c	0f 2f 45 d0	 comiss	 xmm0, DWORD PTR _upper$[ebp+8]
  00a60	76 10		 jbe	 SHORT $LN1@CreateFrom
; Line 443
  00a62	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _pt$15[ebp]
  00a68	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00a6d	f3 0f 11 45 d0	 movss	 DWORD PTR _upper$[ebp+8], xmm0
$LN1@CreateFrom:
; Line 447
  00a72	e9 61 fe ff ff	 jmp	 $LN12@CreateFrom
$LN11@CreateFrom:
; Line 449
  00a77	e9 30 fd ff ff	 jmp	 $LN15@CreateFrom
$LN14@CreateFrom:
; Line 453
  00a7c	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _upper$[ebp+8]
  00a81	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR _lower$[ebp+8]
  00a86	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00a8e	51		 push	 ecx
  00a8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a94	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _upper$[ebp+4]
  00a99	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _lower$[ebp+4]
  00a9e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00aa6	51		 push	 ecx
  00aa7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aac	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _upper$[ebp]
  00ab1	f3 0f 5c 45 dc	 subss	 xmm0, DWORD PTR _lower$[ebp]
  00ab6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00abe	51		 push	 ecx
  00abf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac4	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _half$14[ebp]
  00aca	e8 00 00 00 00	 call	 ??0XMFLOAT3@DirectX@@QAE@MMM@Z ; DirectX::XMFLOAT3::XMFLOAT3
; Line 455
  00acf	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _lower$[ebp]
  00ad4	f3 0f 58 85 4c
	ff ff ff	 addss	 xmm0, DWORD PTR _half$14[ebp]
  00adc	8b 45 90	 mov	 eax, DWORD PTR _currentMesh$[ebp]
  00adf	f3 0f 11 80 b4
	00 00 00	 movss	 DWORD PTR [eax+180], xmm0
; Line 456
  00ae7	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _lower$[ebp+4]
  00aec	f3 0f 58 85 50
	ff ff ff	 addss	 xmm0, DWORD PTR _half$14[ebp+4]
  00af4	8b 4d 90	 mov	 ecx, DWORD PTR _currentMesh$[ebp]
  00af7	f3 0f 11 81 b8
	00 00 00	 movss	 DWORD PTR [ecx+184], xmm0
; Line 457
  00aff	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _lower$[ebp+8]
  00b04	f3 0f 58 85 54
	ff ff ff	 addss	 xmm0, DWORD PTR _half$14[ebp+8]
  00b0c	8b 55 90	 mov	 edx, DWORD PTR _currentMesh$[ebp]
  00b0f	f3 0f 11 82 bc
	00 00 00	 movss	 DWORD PTR [edx+188], xmm0
; Line 459
  00b17	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _half$14[ebp]
  00b1d	50		 push	 eax
  00b1e	8b 4d 90	 mov	 ecx, DWORD PTR _currentMesh$[ebp]
  00b21	81 c1 c0 00 00
	00		 add	 ecx, 192		; 000000c0H
  00b27	e8 00 00 00 00	 call	 ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ; DirectX::XMFLOAT3::operator=
; Line 461
  00b2c	e9 cb fb ff ff	 jmp	 $LN20@CreateFrom
$LN19@CreateFrom:
; Line 466
  00b31	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
$Error$70:
; Line 468
  00b38	8b 45 ec	 mov	 eax, DWORD PTR _hr$[ebp]
$LN51@CreateFrom:
; Line 469
  00b3b	52		 push	 edx
  00b3c	8b cd		 mov	 ecx, ebp
  00b3e	50		 push	 eax
  00b3f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN69@CreateFrom
  00b45	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00b4a	58		 pop	 eax
  00b4b	5a		 pop	 edx
  00b4c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00b4f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00b56	59		 pop	 ecx
  00b57	5f		 pop	 edi
  00b58	5e		 pop	 esi
  00b59	5b		 pop	 ebx
  00b5a	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  00b60	3b ec		 cmp	 ebp, esp
  00b62	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b67	8b e5		 mov	 esp, ebp
  00b69	5d		 pop	 ebp
  00b6a	c2 14 00	 ret	 20			; 00000014H
  00b6d	8d 49 00	 npad	 3
$LN69@CreateFrom:
  00b70	03 00 00 00	 DD	 3
  00b74	00 00 00 00	 DD	 $LN68@CreateFrom
$LN68@CreateFrom:
  00b78	dc ff ff ff	 DD	 -36			; ffffffdcH
  00b7c	0c 00 00 00	 DD	 12			; 0000000cH
  00b80	00 00 00 00	 DD	 $LN64@CreateFrom
  00b84	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00b88	0c 00 00 00	 DD	 12			; 0000000cH
  00b8c	00 00 00 00	 DD	 $LN65@CreateFrom
  00b90	4c ff ff ff	 DD	 -180			; ffffff4cH
  00b94	0c 00 00 00	 DD	 12			; 0000000cH
  00b98	00 00 00 00	 DD	 $LN66@CreateFrom
$LN66@CreateFrom:
  00b9c	68		 DB	 104			; 00000068H
  00b9d	61		 DB	 97			; 00000061H
  00b9e	6c		 DB	 108			; 0000006cH
  00b9f	66		 DB	 102			; 00000066H
  00ba0	00		 DB	 0
$LN65@CreateFrom:
  00ba1	75		 DB	 117			; 00000075H
  00ba2	70		 DB	 112			; 00000070H
  00ba3	70		 DB	 112			; 00000070H
  00ba4	65		 DB	 101			; 00000065H
  00ba5	72		 DB	 114			; 00000072H
  00ba6	00		 DB	 0
$LN64@CreateFrom:
  00ba7	6c		 DB	 108			; 0000006cH
  00ba8	6f		 DB	 111			; 0000006fH
  00ba9	77		 DB	 119			; 00000077H
  00baa	65		 DB	 101			; 00000065H
  00bab	72		 DB	 114			; 00000072H
  00bac	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z$6:
  00000	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00005	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR $T8[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??_V@YAXPAXABUnothrow_t@std@@@Z ; operator delete[]
  00011	83 c4 08	 add	 esp, 8
  00014	c3		 ret	 0
__unwindfunclet$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z$7:
  00015	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  0001a	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??_V@YAXPAXABUnothrow_t@std@@@Z ; operator delete[]
  00026	83 c4 08	 add	 esp, 8
  00029	c3		 ret	 0
__unwindfunclet$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z$8:
  0002a	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  0002f	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??_V@YAXPAXABUnothrow_t@std@@@Z ; operator delete[]
  0003b	83 c4 08	 add	 esp, 8
  0003e	c3		 ret	 0
__ehhandler$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z:
  0003f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00043	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00046	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0004c	33 c8		 xor	 ecx, eax
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z
  00058	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateFromMemory@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PAEI_NPAUSDKMESH_CALLBACKS11@@@Z ENDP ; CDXUTSDKMesh::CreateFromMemory
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
_dwBytesRead$ = -40					; size = 4
_cBytes$ = -32						; size = 4
_FileSize$ = -24					; size = 8
_pLastBSlash$ = -12					; size = 4
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
_pDev11$ = 8						; size = 4
_szFileName$ = 12					; size = 4
_pLoaderCallbacks11$ = 16				; size = 4
?CreateFromFile@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z PROC ; CDXUTSDKMesh::CreateFromFile
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 179
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000c	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 180
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
; Line 183
  00023	8b 45 0c	 mov	 eax, DWORD PTR _szFileName$[ebp]
  00026	50		 push	 eax
  00027	68 04 01 00 00	 push	 260			; 00000104H
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	83 c1 40	 add	 ecx, 64			; 00000040H
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 ?DXUTFindDXSDKMediaFileCch@@YGJPA_WHPB_W@Z ; DXUTFindDXSDKMediaFileCch
  00038	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
  0003b	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003f	7d 1f		 jge	 SHORT $LN8@CreateFrom
  00041	6a 01		 push	 1
  00043	68 00 00 00 00	 push	 OFFSET $SG154847
  00048	8b 55 f8	 mov	 edx, DWORD PTR _hr$[ebp]
  0004b	52		 push	 edx
  0004c	68 b7 00 00 00	 push	 183			; 000000b7H
  00051	68 00 00 00 00	 push	 OFFSET $SG154848
  00056	e8 00 00 00 00	 call	 ?DXUTTrace@@YGJPBDKJPB_W_N@Z ; DXUTTrace
  0005b	e9 a4 01 00 00	 jmp	 $LN9@CreateFrom
$LN8@CreateFrom:
; Line 187
  00060	8b f4		 mov	 esi, esp
  00062	6a 00		 push	 0
  00064	68 00 00 00 08	 push	 134217728		; 08000000H
  00069	6a 03		 push	 3
  0006b	6a 00		 push	 0
  0006d	6a 01		 push	 1
  0006f	6a 01		 push	 1
  00071	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	83 c0 40	 add	 eax, 64			; 00000040H
  00077	50		 push	 eax
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileW@28
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; Line 188
  0008b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008e	83 7a 0c ff	 cmp	 DWORD PTR [edx+12], -1
  00092	75 0a		 jne	 SHORT $LN7@CreateFrom
; Line 189
  00094	b8 03 09 04 80	 mov	 eax, -2147219197	; 80040903H
  00099	e9 66 01 00 00	 jmp	 $LN9@CreateFrom
$LN7@CreateFrom:
; Line 192
  0009e	6a 5c		 push	 92			; 0000005cH
  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	83 c0 40	 add	 eax, 64			; 00000040H
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?wcsrchr@@YAPA_WPA_W_W@Z ; wcsrchr
  000ac	83 c4 08	 add	 esp, 8
  000af	89 45 f4	 mov	 DWORD PTR _pLastBSlash$[ebp], eax
; Line 193
  000b2	83 7d f4 00	 cmp	 DWORD PTR _pLastBSlash$[ebp], 0
  000b6	74 0b		 je	 SHORT $LN6@CreateFrom
; Line 194
  000b8	33 c9		 xor	 ecx, ecx
  000ba	8b 55 f4	 mov	 edx, DWORD PTR _pLastBSlash$[ebp]
  000bd	66 89 4a 02	 mov	 WORD PTR [edx+2], cx
; Line 195
  000c1	eb 12		 jmp	 SHORT $LN5@CreateFrom
$LN6@CreateFrom:
; Line 196
  000c3	b8 02 00 00 00	 mov	 eax, 2
  000c8	6b c8 00	 imul	 ecx, eax, 0
  000cb	33 d2		 xor	 edx, edx
  000cd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d0	66 89 54 08 40	 mov	 WORD PTR [eax+ecx+64], dx
$LN5@CreateFrom:
; Line 198
  000d5	8b f4		 mov	 esi, esp
  000d7	6a 00		 push	 0
  000d9	6a 00		 push	 0
  000db	68 04 01 00 00	 push	 260			; 00000104H
  000e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e3	81 c1 48 02 00
	00		 add	 ecx, 584		; 00000248H
  000e9	51		 push	 ecx
  000ea	6a ff		 push	 -1
  000ec	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	83 c2 40	 add	 edx, 64			; 00000040H
  000f2	52		 push	 edx
  000f3	6a 00		 push	 0
  000f5	6a 00		 push	 0
  000f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  000fd	3b f4		 cmp	 esi, esp
  000ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 202
  00104	8b f4		 mov	 esi, esp
  00106	8d 45 e8	 lea	 eax, DWORD PTR _FileSize$[ebp]
  00109	50		 push	 eax
  0010a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00110	52		 push	 edx
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSizeEx@8
  00117	3b f4		 cmp	 esi, esp
  00119	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 203
  0011e	8b 45 e8	 mov	 eax, DWORD PTR _FileSize$[ebp]
  00121	89 45 e0	 mov	 DWORD PTR _cBytes$[ebp], eax
; Line 206
  00124	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00129	8b 4d e0	 mov	 ecx, DWORD PTR _cBytes$[ebp]
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  00132	83 c4 08	 add	 esp, 8
  00135	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00138	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0013b	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  0013e	89 42 2c	 mov	 DWORD PTR [edx+44], eax
; Line 207
  00141	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00144	83 79 2c 00	 cmp	 DWORD PTR [ecx+44], 0
  00148	75 20		 jne	 SHORT $LN4@CreateFrom
; Line 209
  0014a	8b f4		 mov	 esi, esp
  0014c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0014f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00152	50		 push	 eax
  00153	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00159	3b f4		 cmp	 esi, esp
  0015b	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 210
  00160	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  00165	e9 9a 00 00 00	 jmp	 $LN9@CreateFrom
$LN4@CreateFrom:
; Line 215
  0016a	8b f4		 mov	 esi, esp
  0016c	6a 00		 push	 0
  0016e	8d 4d d8	 lea	 ecx, DWORD PTR _dwBytesRead$[ebp]
  00171	51		 push	 ecx
  00172	8b 55 e0	 mov	 edx, DWORD PTR _cBytes$[ebp]
  00175	52		 push	 edx
  00176	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00179	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0017c	51		 push	 ecx
  0017d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00180	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00183	50		 push	 eax
  00184	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  0018a	3b f4		 cmp	 esi, esp
  0018c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00191	85 c0		 test	 eax, eax
  00193	75 07		 jne	 SHORT $LN3@CreateFrom
; Line 216
  00195	c7 45 f8 05 40
	00 80		 mov	 DWORD PTR _hr$[ebp], -2147467259 ; 80004005H
$LN3@CreateFrom:
; Line 218
  0019c	8b f4		 mov	 esi, esp
  0019e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a1	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001a4	52		 push	 edx
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  001ab	3b f4		 cmp	 esi, esp
  001ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 220
  001b2	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001b6	7c 49		 jl	 SHORT $LN2@CreateFrom
; Line 226
  001b8	8b f4		 mov	 esi, esp
  001ba	8b 45 10	 mov	 eax, DWORD PTR _pLoaderCallbacks11$[ebp]
  001bd	50		 push	 eax
  001be	6a 00		 push	 0
  001c0	8b 4d e0	 mov	 ecx, DWORD PTR _cBytes$[ebp]
  001c3	51		 push	 ecx
  001c4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001c7	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  001ca	50		 push	 eax
  001cb	8b 4d 08	 mov	 ecx, DWORD PTR _pDev11$[ebp]
  001ce	51		 push	 ecx
  001cf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001d2	8b 02		 mov	 eax, DWORD PTR [edx]
  001d4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001d7	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  001da	ff d2		 call	 edx
  001dc	3b f4		 cmp	 esi, esp
  001de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e3	89 45 f8	 mov	 DWORD PTR _hr$[ebp], eax
; Line 227
  001e6	83 7d f8 00	 cmp	 DWORD PTR _hr$[ebp], 0
  001ea	7d 15		 jge	 SHORT $LN2@CreateFrom
; Line 228
  001ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ef	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  001f2	89 4d cc	 mov	 DWORD PTR $T1[ebp], ecx
  001f5	8b 55 cc	 mov	 edx, DWORD PTR $T1[ebp]
  001f8	52		 push	 edx
  001f9	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  001fe	83 c4 04	 add	 esp, 4
$LN2@CreateFrom:
; Line 231
  00201	8b 45 f8	 mov	 eax, DWORD PTR _hr$[ebp]
$LN9@CreateFrom:
; Line 232
  00204	52		 push	 edx
  00205	8b cd		 mov	 ecx, ebp
  00207	50		 push	 eax
  00208	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@CreateFrom
  0020e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00213	58		 pop	 eax
  00214	5a		 pop	 edx
  00215	5f		 pop	 edi
  00216	5e		 pop	 esi
  00217	83 c4 34	 add	 esp, 52			; 00000034H
  0021a	3b ec		 cmp	 ebp, esp
  0021c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00221	8b e5		 mov	 esp, ebp
  00223	5d		 pop	 ebp
  00224	c2 0c 00	 ret	 12			; 0000000cH
  00227	90		 npad	 1
$LN14@CreateFrom:
  00228	02 00 00 00	 DD	 2
  0022c	00 00 00 00	 DD	 $LN13@CreateFrom
$LN13@CreateFrom:
  00230	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00234	08 00 00 00	 DD	 8
  00238	00 00 00 00	 DD	 $LN11@CreateFrom
  0023c	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00240	04 00 00 00	 DD	 4
  00244	00 00 00 00	 DD	 $LN12@CreateFrom
$LN12@CreateFrom:
  00248	64		 DB	 100			; 00000064H
  00249	77		 DB	 119			; 00000077H
  0024a	42		 DB	 66			; 00000042H
  0024b	79		 DB	 121			; 00000079H
  0024c	74		 DB	 116			; 00000074H
  0024d	65		 DB	 101			; 00000065H
  0024e	73		 DB	 115			; 00000073H
  0024f	52		 DB	 82			; 00000052H
  00250	65		 DB	 101			; 00000065H
  00251	61		 DB	 97			; 00000061H
  00252	64		 DB	 100			; 00000064H
  00253	00		 DB	 0
$LN11@CreateFrom:
  00254	46		 DB	 70			; 00000046H
  00255	69		 DB	 105			; 00000069H
  00256	6c		 DB	 108			; 0000006cH
  00257	65		 DB	 101			; 00000065H
  00258	53		 DB	 83			; 00000053H
  00259	69		 DB	 105			; 00000069H
  0025a	7a		 DB	 122			; 0000007aH
  0025b	65		 DB	 101			; 00000065H
  0025c	00		 DB	 0
?CreateFromFile@CDXUTSDKMesh@@MAEJPAUID3D11Device@@PB_WPAUSDKMESH_CALLBACKS11@@@Z ENDP ; CDXUTSDKMesh::CreateFromFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_InitData$1 = -60					; size = 12
_bufferDesc$ = -40					; size = 24
_hr$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_pHeader$ = 12						; size = 4
_pIndices$ = 16						; size = 4
_pLoaderCallbacks$ = 20					; size = 4
?CreateIndexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_INDEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z PROC ; CDXUTSDKMesh::CreateIndexBuffer
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 143
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0000c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 144
  00026	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
; Line 145
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _pHeader$[ebp]
  00030	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  00037	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
; Line 148
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _pHeader$[ebp]
  00041	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00044	89 55 d8	 mov	 DWORD PTR _bufferDesc$[ebp], edx
; Line 149
  00047	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _bufferDesc$[ebp+4], 0
; Line 150
  0004e	c7 45 e0 02 00
	00 00		 mov	 DWORD PTR _bufferDesc$[ebp+8], 2
; Line 151
  00055	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bufferDesc$[ebp+12], 0
; Line 152
  0005c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bufferDesc$[ebp+16], 0
; Line 154
  00063	83 7d 14 00	 cmp	 DWORD PTR _pLoaderCallbacks$[ebp], 0
  00067	74 5a		 je	 SHORT $LN3@CreateInde
  00069	8b 45 14	 mov	 eax, DWORD PTR _pLoaderCallbacks$[ebp]
  0006c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00070	74 51		 je	 SHORT $LN3@CreateInde
; Line 157
  00072	8b f4		 mov	 esi, esp
  00074	8b 4d 14	 mov	 ecx, DWORD PTR _pLoaderCallbacks$[ebp]
  00077	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0007a	52		 push	 edx
  0007b	8b 45 10	 mov	 eax, DWORD PTR _pIndices$[ebp]
  0007e	50		 push	 eax
  0007f	83 ec 18	 sub	 esp, 24			; 00000018H
  00082	8b cc		 mov	 ecx, esp
  00084	8b 55 d8	 mov	 edx, DWORD PTR _bufferDesc$[ebp]
  00087	89 11		 mov	 DWORD PTR [ecx], edx
  00089	8b 45 dc	 mov	 eax, DWORD PTR _bufferDesc$[ebp+4]
  0008c	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0008f	8b 55 e0	 mov	 edx, DWORD PTR _bufferDesc$[ebp+8]
  00092	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00095	8b 45 e4	 mov	 eax, DWORD PTR _bufferDesc$[ebp+12]
  00098	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0009b	8b 55 e8	 mov	 edx, DWORD PTR _bufferDesc$[ebp+16]
  0009e	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  000a1	8b 45 ec	 mov	 eax, DWORD PTR _bufferDesc$[ebp+20]
  000a4	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  000a7	8b 4d 0c	 mov	 ecx, DWORD PTR _pHeader$[ebp]
  000aa	83 c1 18	 add	 ecx, 24			; 00000018H
  000ad	51		 push	 ecx
  000ae	8b 55 08	 mov	 edx, DWORD PTR _pd3dDevice$[ebp]
  000b1	52		 push	 edx
  000b2	8b 45 14	 mov	 eax, DWORD PTR _pLoaderCallbacks$[ebp]
  000b5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b8	ff d1		 call	 ecx
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 159
  000c1	eb 49		 jmp	 SHORT $LN2@CreateInde
$LN3@CreateInde:
; Line 162
  000c3	8b 55 10	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000c6	89 55 c4	 mov	 DWORD PTR _InitData$1[ebp], edx
; Line 163
  000c9	8b 45 0c	 mov	 eax, DWORD PTR _pHeader$[ebp]
  000cc	83 c0 18	 add	 eax, 24			; 00000018H
  000cf	8b f4		 mov	 esi, esp
  000d1	50		 push	 eax
  000d2	8d 4d c4	 lea	 ecx, DWORD PTR _InitData$1[ebp]
  000d5	51		 push	 ecx
  000d6	8d 55 d8	 lea	 edx, DWORD PTR _bufferDesc$[ebp]
  000d9	52		 push	 edx
  000da	8b 45 08	 mov	 eax, DWORD PTR _pd3dDevice$[ebp]
  000dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000df	8b 55 08	 mov	 edx, DWORD PTR _pd3dDevice$[ebp]
  000e2	52		 push	 edx
  000e3	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000e6	ff d0		 call	 eax
  000e8	3b f4		 cmp	 esi, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ef	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
; Line 164
  000f2	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  000f6	7c 14		 jl	 SHORT $LN2@CreateInde
; Line 166
  000f8	68 00 00 00 00	 push	 OFFSET $SG154834
  000fd	8b 4d 0c	 mov	 ecx, DWORD PTR _pHeader$[ebp]
  00100	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00103	52		 push	 edx
  00104	e8 00 00 00 00	 call	 ?DXUT_SetDebugName@@YAXPAUID3D11DeviceChild@@PBD@Z ; DXUT_SetDebugName
  00109	83 c4 08	 add	 esp, 8
$LN2@CreateInde:
; Line 170
  0010c	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]
; Line 171
  0010f	52		 push	 edx
  00110	8b cd		 mov	 ecx, ebp
  00112	50		 push	 eax
  00113	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@CreateInde
  00119	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011e	58		 pop	 eax
  0011f	5a		 pop	 edx
  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00125	33 cd		 xor	 ecx, ebp
  00127	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012c	83 c4 40	 add	 esp, 64			; 00000040H
  0012f	3b ec		 cmp	 ebp, esp
  00131	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c2 10 00	 ret	 16			; 00000010H
$LN9@CreateInde:
  0013c	02 00 00 00	 DD	 2
  00140	00 00 00 00	 DD	 $LN8@CreateInde
$LN8@CreateInde:
  00144	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00148	18 00 00 00	 DD	 24			; 00000018H
  0014c	00 00 00 00	 DD	 $LN6@CreateInde
  00150	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00154	0c 00 00 00	 DD	 12			; 0000000cH
  00158	00 00 00 00	 DD	 $LN7@CreateInde
$LN7@CreateInde:
  0015c	49		 DB	 73			; 00000049H
  0015d	6e		 DB	 110			; 0000006eH
  0015e	69		 DB	 105			; 00000069H
  0015f	74		 DB	 116			; 00000074H
  00160	44		 DB	 68			; 00000044H
  00161	61		 DB	 97			; 00000061H
  00162	74		 DB	 116			; 00000074H
  00163	61		 DB	 97			; 00000061H
  00164	00		 DB	 0
$LN6@CreateInde:
  00165	62		 DB	 98			; 00000062H
  00166	75		 DB	 117			; 00000075H
  00167	66		 DB	 102			; 00000066H
  00168	66		 DB	 102			; 00000066H
  00169	65		 DB	 101			; 00000065H
  0016a	72		 DB	 114			; 00000072H
  0016b	44		 DB	 68			; 00000044H
  0016c	65		 DB	 101			; 00000065H
  0016d	73		 DB	 115			; 00000073H
  0016e	63		 DB	 99			; 00000063H
  0016f	00		 DB	 0
?CreateIndexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_INDEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z ENDP ; CDXUTSDKMesh::CreateIndexBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_InitData$1 = -60					; size = 12
_bufferDesc$ = -40					; size = 24
_hr$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_pHeader$ = 12						; size = 4
_pVertices$ = 16					; size = 4
_pLoaderCallbacks$ = 20					; size = 4
?CreateVertexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_VERTEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z PROC ; CDXUTSDKMesh::CreateVertexBuffer
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 108
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0000c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 109
  00026	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _hr$[ebp], 0
; Line 110
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _pHeader$[ebp]
  00030	c7 80 18 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+280], 0
  0003a	c7 80 1c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+284], 0
; Line 113
  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _pHeader$[ebp]
  00047	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0004a	89 55 d8	 mov	 DWORD PTR _bufferDesc$[ebp], edx
; Line 114
  0004d	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _bufferDesc$[ebp+4], 0
; Line 115
  00054	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _bufferDesc$[ebp+8], 1
; Line 116
  0005b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _bufferDesc$[ebp+12], 0
; Line 117
  00062	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bufferDesc$[ebp+16], 0
; Line 119
  00069	83 7d 14 00	 cmp	 DWORD PTR _pLoaderCallbacks$[ebp], 0
  0006d	74 5d		 je	 SHORT $LN3@CreateVert
  0006f	8b 45 14	 mov	 eax, DWORD PTR _pLoaderCallbacks$[ebp]
  00072	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00076	74 54		 je	 SHORT $LN3@CreateVert
; Line 122
  00078	8b f4		 mov	 esi, esp
  0007a	8b 4d 14	 mov	 ecx, DWORD PTR _pLoaderCallbacks$[ebp]
  0007d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00080	52		 push	 edx
  00081	8b 45 10	 mov	 eax, DWORD PTR _pVertices$[ebp]
  00084	50		 push	 eax
  00085	83 ec 18	 sub	 esp, 24			; 00000018H
  00088	8b cc		 mov	 ecx, esp
  0008a	8b 55 d8	 mov	 edx, DWORD PTR _bufferDesc$[ebp]
  0008d	89 11		 mov	 DWORD PTR [ecx], edx
  0008f	8b 45 dc	 mov	 eax, DWORD PTR _bufferDesc$[ebp+4]
  00092	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00095	8b 55 e0	 mov	 edx, DWORD PTR _bufferDesc$[ebp+8]
  00098	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0009b	8b 45 e4	 mov	 eax, DWORD PTR _bufferDesc$[ebp+12]
  0009e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  000a1	8b 55 e8	 mov	 edx, DWORD PTR _bufferDesc$[ebp+16]
  000a4	89 51 10	 mov	 DWORD PTR [ecx+16], edx
  000a7	8b 45 ec	 mov	 eax, DWORD PTR _bufferDesc$[ebp+20]
  000aa	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  000ad	8b 4d 0c	 mov	 ecx, DWORD PTR _pHeader$[ebp]
  000b0	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  000b6	51		 push	 ecx
  000b7	8b 55 08	 mov	 edx, DWORD PTR _pd3dDevice$[ebp]
  000ba	52		 push	 edx
  000bb	8b 45 14	 mov	 eax, DWORD PTR _pLoaderCallbacks$[ebp]
  000be	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c1	ff d1		 call	 ecx
  000c3	3b f4		 cmp	 esi, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 124
  000ca	eb 4e		 jmp	 SHORT $LN2@CreateVert
$LN3@CreateVert:
; Line 127
  000cc	8b 55 10	 mov	 edx, DWORD PTR _pVertices$[ebp]
  000cf	89 55 c4	 mov	 DWORD PTR _InitData$1[ebp], edx
; Line 128
  000d2	8b 45 0c	 mov	 eax, DWORD PTR _pHeader$[ebp]
  000d5	05 18 01 00 00	 add	 eax, 280		; 00000118H
  000da	8b f4		 mov	 esi, esp
  000dc	50		 push	 eax
  000dd	8d 4d c4	 lea	 ecx, DWORD PTR _InitData$1[ebp]
  000e0	51		 push	 ecx
  000e1	8d 55 d8	 lea	 edx, DWORD PTR _bufferDesc$[ebp]
  000e4	52		 push	 edx
  000e5	8b 45 08	 mov	 eax, DWORD PTR _pd3dDevice$[ebp]
  000e8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ea	8b 55 08	 mov	 edx, DWORD PTR _pd3dDevice$[ebp]
  000ed	52		 push	 edx
  000ee	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000f1	ff d0		 call	 eax
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	89 45 f4	 mov	 DWORD PTR _hr$[ebp], eax
; Line 129
  000fd	83 7d f4 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00101	7c 17		 jl	 SHORT $LN2@CreateVert
; Line 131
  00103	68 00 00 00 00	 push	 OFFSET $SG154817
  00108	8b 4d 0c	 mov	 ecx, DWORD PTR _pHeader$[ebp]
  0010b	8b 91 18 01 00
	00		 mov	 edx, DWORD PTR [ecx+280]
  00111	52		 push	 edx
  00112	e8 00 00 00 00	 call	 ?DXUT_SetDebugName@@YAXPAUID3D11DeviceChild@@PBD@Z ; DXUT_SetDebugName
  00117	83 c4 08	 add	 esp, 8
$LN2@CreateVert:
; Line 135
  0011a	8b 45 f4	 mov	 eax, DWORD PTR _hr$[ebp]
; Line 136
  0011d	52		 push	 edx
  0011e	8b cd		 mov	 ecx, ebp
  00120	50		 push	 eax
  00121	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@CreateVert
  00127	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0012c	58		 pop	 eax
  0012d	5a		 pop	 edx
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00133	33 cd		 xor	 ecx, ebp
  00135	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013a	83 c4 40	 add	 esp, 64			; 00000040H
  0013d	3b ec		 cmp	 ebp, esp
  0013f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c2 10 00	 ret	 16			; 00000010H
  0014a	8b ff		 npad	 2
$LN9@CreateVert:
  0014c	02 00 00 00	 DD	 2
  00150	00 00 00 00	 DD	 $LN8@CreateVert
$LN8@CreateVert:
  00154	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00158	18 00 00 00	 DD	 24			; 00000018H
  0015c	00 00 00 00	 DD	 $LN6@CreateVert
  00160	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00164	0c 00 00 00	 DD	 12			; 0000000cH
  00168	00 00 00 00	 DD	 $LN7@CreateVert
$LN7@CreateVert:
  0016c	49		 DB	 73			; 00000049H
  0016d	6e		 DB	 110			; 0000006eH
  0016e	69		 DB	 105			; 00000069H
  0016f	74		 DB	 116			; 00000074H
  00170	44		 DB	 68			; 00000044H
  00171	61		 DB	 97			; 00000061H
  00172	74		 DB	 116			; 00000074H
  00173	61		 DB	 97			; 00000061H
  00174	00		 DB	 0
$LN6@CreateVert:
  00175	62		 DB	 98			; 00000062H
  00176	75		 DB	 117			; 00000075H
  00177	66		 DB	 102			; 00000066H
  00178	66		 DB	 102			; 00000066H
  00179	65		 DB	 101			; 00000065H
  0017a	72		 DB	 114			; 00000072H
  0017b	44		 DB	 68			; 00000044H
  0017c	65		 DB	 101			; 00000065H
  0017d	73		 DB	 115			; 00000073H
  0017e	63		 DB	 99			; 00000063H
  0017f	00		 DB	 0
?CreateVertexBuffer@CDXUTSDKMesh@@IAEJPAUID3D11Device@@PAUSDKMESH_VERTEX_BUFFER_HEADER@@PAXPAUSDKMESH_CALLBACKS11@@@Z ENDP ; CDXUTSDKMesh::CreateVertexBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_m$1 = -284						; size = 4
_m$2 = -280						; size = 4
_strPath$ = -272					; size = 260
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_pMaterials$ = 12					; size = 4
_numMaterials$ = 16					; size = 4
_pLoaderCallbacks$ = 20					; size = 4
?LoadMaterials@CDXUTSDKMesh@@IAEXPAUID3D11Device@@PAUSDKMESH_MATERIAL@@IPAUSDKMESH_CALLBACKS11@@@Z PROC ; CDXUTSDKMesh::LoadMaterials
; _this$ = ecx
; File d:\engine class\assignment 1\new scratch\dxut\optional\sdkmesh.cpp
; Line 28
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd e4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-284]
  00012	b9 47 00 00 00	 mov	 ecx, 71			; 00000047H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; Line 31
  0002c	83 7d 14 00	 cmp	 DWORD PTR _pLoaderCallbacks$[ebp], 0
  00030	0f 84 02 02 00
	00		 je	 $LN17@LoadMateri
  00036	8b 45 14	 mov	 eax, DWORD PTR _pLoaderCallbacks$[ebp]
  00039	83 38 00	 cmp	 DWORD PTR [eax], 0
  0003c	0f 84 f6 01 00
	00		 je	 $LN17@LoadMateri
; Line 33
  00042	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$2[ebp], 0
  0004c	eb 0f		 jmp	 SHORT $LN16@LoadMateri
$LN15@LoadMateri:
  0004e	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _m$2[ebp]
  00054	83 c1 01	 add	 ecx, 1
  00057	89 8d e8 fe ff
	ff		 mov	 DWORD PTR _m$2[ebp], ecx
$LN16@LoadMateri:
  0005d	8b 95 e8 fe ff
	ff		 mov	 edx, DWORD PTR _m$2[ebp]
  00063	3b 55 10	 cmp	 edx, DWORD PTR _numMaterials$[ebp]
  00066	0f 83 c7 01 00
	00		 jae	 $LN14@LoadMateri
; Line 35
  0006c	69 85 e8 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$2[ebp], 1256
  00076	8b 4d 0c	 mov	 ecx, DWORD PTR _pMaterials$[ebp]
  00079	c7 84 01 b8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+1208], 0
; Line 36
  00084	69 95 e8 fe ff
	ff e8 04 00 00	 imul	 edx, DWORD PTR _m$2[ebp], 1256
  0008e	8b 45 0c	 mov	 eax, DWORD PTR _pMaterials$[ebp]
  00091	c7 84 10 c0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [eax+edx+1216], 0
; Line 37
  0009c	69 8d e8 fe ff
	ff e8 04 00 00	 imul	 ecx, DWORD PTR _m$2[ebp], 1256
  000a6	8b 55 0c	 mov	 edx, DWORD PTR _pMaterials$[ebp]
  000a9	c7 84 0a c8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+ecx+1224], 0
; Line 38
  000b4	69 85 e8 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$2[ebp], 1256
  000be	8b 4d 0c	 mov	 ecx, DWORD PTR _pMaterials$[ebp]
  000c1	c7 84 01 d0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+1232], 0
; Line 39
  000cc	69 95 e8 fe ff
	ff e8 04 00 00	 imul	 edx, DWORD PTR _m$2[ebp], 1256
  000d6	8b 45 0c	 mov	 eax, DWORD PTR _pMaterials$[ebp]
  000d9	c7 84 10 d8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [eax+edx+1240], 0
; Line 40
  000e4	69 8d e8 fe ff
	ff e8 04 00 00	 imul	 ecx, DWORD PTR _m$2[ebp], 1256
  000ee	8b 55 0c	 mov	 edx, DWORD PTR _pMaterials$[ebp]
  000f1	c7 84 0a e0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+ecx+1248], 0
; Line 43
  000fc	69 85 e8 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$2[ebp], 1256
  00106	03 45 0c	 add	 eax, DWORD PTR _pMaterials$[ebp]
  00109	b9 01 00 00 00	 mov	 ecx, 1
  0010e	6b d1 00	 imul	 edx, ecx, 0
  00111	0f be 84 10 68
	01 00 00	 movsx	 eax, BYTE PTR [eax+edx+360]
  00119	85 c0		 test	 eax, eax
  0011b	74 45		 je	 SHORT $LN13@LoadMateri
; Line 47
  0011d	8b f4		 mov	 esi, esp
  0011f	8b 4d 14	 mov	 ecx, DWORD PTR _pLoaderCallbacks$[ebp]
  00122	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00125	52		 push	 edx
  00126	69 85 e8 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$2[ebp], 1256
  00130	8b 4d 0c	 mov	 ecx, DWORD PTR _pMaterials$[ebp]
  00133	8d 94 01 d0 04
	00 00		 lea	 edx, DWORD PTR [ecx+eax+1232]
  0013a	52		 push	 edx
  0013b	69 85 e8 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$2[ebp], 1256
  00145	8b 4d 0c	 mov	 ecx, DWORD PTR _pMaterials$[ebp]
  00148	8d 94 01 68 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+360]
  0014f	52		 push	 edx
  00150	8b 45 08	 mov	 eax, DWORD PTR _pd3dDevice$[ebp]
  00153	50		 push	 eax
  00154	8b 4d 14	 mov	 ecx, DWORD PTR _pLoaderCallbacks$[ebp]
  00157	8b 11		 mov	 edx, DWORD PTR [ecx]
  00159	ff d2		 call	 edx
  0015b	3b f4		 cmp	 esi, esp
  0015d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@LoadMateri:
; Line 49
  00162	69 85 e8 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$2[ebp], 1256
  0016c	03 45 0c	 add	 eax, DWORD PTR _pMaterials$[ebp]
  0016f	b9 01 00 00 00	 mov	 ecx, 1
  00174	6b d1 00	 imul	 edx, ecx, 0
  00177	0f be 84 10 6c
	02 00 00	 movsx	 eax, BYTE PTR [eax+edx+620]
  0017f	85 c0		 test	 eax, eax
  00181	74 45		 je	 SHORT $LN12@LoadMateri
; Line 53
  00183	8b f4		 mov	 esi, esp
  00185	8b 4d 14	 mov	 ecx, DWORD PTR _pLoaderCallbacks$[ebp]
  00188	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0018b	52		 push	 edx
  0018c	69 85 e8 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$2[ebp], 1256
  00196	8b 4d 0c	 mov	 ecx, DWORD PTR _pMaterials$[ebp]
  00199	8d 94 01 d8 04
	00 00		 lea	 edx, DWORD PTR [ecx+eax+1240]
  001a0	52		 push	 edx
  001a1	69 85 e8 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$2[ebp], 1256
  001ab	8b 4d 0c	 mov	 ecx, DWORD PTR _pMaterials$[ebp]
  001ae	8d 94 01 6c 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+620]
  001b5	52		 push	 edx
  001b6	8b 45 08	 mov	 eax, DWORD PTR _pd3dDevice$[ebp]
  001b9	50		 push	 eax
  001ba	8b 4d 14	 mov	 ecx, DWORD PTR _pLoaderCallbacks$[ebp]
  001bd	8b 11		 mov	 edx, DWORD PTR [ecx]
  001bf	ff d2		 call	 edx
  001c1	3b f4		 cmp	 esi, esp
  001c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN12@LoadMateri:
; Line 55
  001c8	69 85 e8 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$2[ebp], 1256
  001d2	03 45 0c	 add	 eax, DWORD PTR _pMaterials$[ebp]
  001d5	b9 01 00 00 00	 mov	 ecx, 1
  001da	6b d1 00	 imul	 edx, ecx, 0
  001dd	0f be 84 10 70
	03 00 00	 movsx	 eax, BYTE PTR [eax+edx+880]
  001e5	85 c0		 test	 eax, eax
  001e7	74 45		 je	 SHORT $LN11@LoadMateri
; Line 59
  001e9	8b f4		 mov	 esi, esp
  001eb	8b 4d 14	 mov	 ecx, DWORD PTR _pLoaderCallbacks$[ebp]
  001ee	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001f1	52		 push	 edx
  001f2	69 85 e8 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$2[ebp], 1256
  001fc	8b 4d 0c	 mov	 ecx, DWORD PTR _pMaterials$[ebp]
  001ff	8d 94 01 e0 04
	00 00		 lea	 edx, DWORD PTR [ecx+eax+1248]
  00206	52		 push	 edx
  00207	69 85 e8 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$2[ebp], 1256
  00211	8b 4d 0c	 mov	 ecx, DWORD PTR _pMaterials$[ebp]
  00214	8d 94 01 70 03
	00 00		 lea	 edx, DWORD PTR [ecx+eax+880]
  0021b	52		 push	 edx
  0021c	8b 45 08	 mov	 eax, DWORD PTR _pd3dDevice$[ebp]
  0021f	50		 push	 eax
  00220	8b 4d 14	 mov	 ecx, DWORD PTR _pLoaderCallbacks$[ebp]
  00223	8b 11		 mov	 edx, DWORD PTR [ecx]
  00225	ff d2		 call	 edx
  00227	3b f4		 cmp	 esi, esp
  00229	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN11@LoadMateri:
; Line 61
  0022e	e9 1b fe ff ff	 jmp	 $LN15@LoadMateri
$LN14@LoadMateri:
; Line 63
  00233	e9 e3 02 00 00	 jmp	 $LN18@LoadMateri
$LN17@LoadMateri:
; Line 65
  00238	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _m$1[ebp], 0
  00242	eb 0f		 jmp	 SHORT $LN9@LoadMateri
$LN8@LoadMateri:
  00244	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _m$1[ebp]
  0024a	83 c0 01	 add	 eax, 1
  0024d	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _m$1[ebp], eax
$LN9@LoadMateri:
  00253	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _m$1[ebp]
  00259	3b 4d 10	 cmp	 ecx, DWORD PTR _numMaterials$[ebp]
  0025c	0f 83 b9 02 00
	00		 jae	 $LN18@LoadMateri
; Line 67
  00262	69 95 e4 fe ff
	ff e8 04 00 00	 imul	 edx, DWORD PTR _m$1[ebp], 1256
  0026c	8b 45 0c	 mov	 eax, DWORD PTR _pMaterials$[ebp]
  0026f	c7 84 10 b8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [eax+edx+1208], 0
; Line 68
  0027a	69 8d e4 fe ff
	ff e8 04 00 00	 imul	 ecx, DWORD PTR _m$1[ebp], 1256
  00284	8b 55 0c	 mov	 edx, DWORD PTR _pMaterials$[ebp]
  00287	c7 84 0a c0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+ecx+1216], 0
; Line 69
  00292	69 85 e4 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$1[ebp], 1256
  0029c	8b 4d 0c	 mov	 ecx, DWORD PTR _pMaterials$[ebp]
  0029f	c7 84 01 c8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+1224], 0
; Line 70
  002aa	69 95 e4 fe ff
	ff e8 04 00 00	 imul	 edx, DWORD PTR _m$1[ebp], 1256
  002b4	8b 45 0c	 mov	 eax, DWORD PTR _pMaterials$[ebp]
  002b7	c7 84 10 d0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [eax+edx+1232], 0
; Line 71
  002c2	69 8d e4 fe ff
	ff e8 04 00 00	 imul	 ecx, DWORD PTR _m$1[ebp], 1256
  002cc	8b 55 0c	 mov	 edx, DWORD PTR _pMaterials$[ebp]
  002cf	c7 84 0a d8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [edx+ecx+1240], 0
; Line 72
  002da	69 85 e4 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$1[ebp], 1256
  002e4	8b 4d 0c	 mov	 ecx, DWORD PTR _pMaterials$[ebp]
  002e7	c7 84 01 e0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR [ecx+eax+1248], 0
; Line 75
  002f2	69 95 e4 fe ff
	ff e8 04 00 00	 imul	 edx, DWORD PTR _m$1[ebp], 1256
  002fc	03 55 0c	 add	 edx, DWORD PTR _pMaterials$[ebp]
  002ff	b8 01 00 00 00	 mov	 eax, 1
  00304	6b c8 00	 imul	 ecx, eax, 0
  00307	0f be 94 0a 68
	01 00 00	 movsx	 edx, BYTE PTR [edx+ecx+360]
  0030f	85 d2		 test	 edx, edx
  00311	0f 84 91 00 00
	00		 je	 $LN6@LoadMateri
; Line 77
  00317	69 85 e4 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$1[ebp], 1256
  00321	8b 4d 0c	 mov	 ecx, DWORD PTR _pMaterials$[ebp]
  00324	8d 94 01 68 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+360]
  0032b	8b f4		 mov	 esi, esp
  0032d	52		 push	 edx
  0032e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00331	05 48 02 00 00	 add	 eax, 584		; 00000248H
  00336	50		 push	 eax
  00337	68 00 00 00 00	 push	 OFFSET $SG154787
  0033c	68 04 01 00 00	 push	 260			; 00000104H
  00341	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _strPath$[ebp]
  00347	51		 push	 ecx
  00348	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf_s
  0034e	83 c4 14	 add	 esp, 20			; 00000014H
  00351	3b f4		 cmp	 esi, esp
  00353	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 80
  00358	6a 01		 push	 1
  0035a	69 95 e4 fe ff
	ff e8 04 00 00	 imul	 edx, DWORD PTR _m$1[ebp], 1256
  00364	8b 45 0c	 mov	 eax, DWORD PTR _pMaterials$[ebp]
  00367	8d 8c 10 d0 04
	00 00		 lea	 ecx, DWORD PTR [eax+edx+1232]
  0036e	51		 push	 ecx
  0036f	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _strPath$[ebp]
  00375	52		 push	 edx
  00376	e8 00 00 00 00	 call	 ?DXUTGetD3D11DeviceContext@@YGPAUID3D11DeviceContext@@XZ ; DXUTGetD3D11DeviceContext
  0037b	50		 push	 eax
  0037c	8b 45 08	 mov	 eax, DWORD PTR _pd3dDevice$[ebp]
  0037f	50		 push	 eax
  00380	e8 00 00 00 00	 call	 ?DXUTGetGlobalResourceCache@@YGAAVCDXUTResourceCache@@XZ ; DXUTGetGlobalResourceCache
  00385	8b c8		 mov	 ecx, eax
  00387	e8 00 00 00 00	 call	 ?CreateTextureFromFile@CDXUTResourceCache@@QAEJPAUID3D11Device@@PAUID3D11DeviceContext@@PBDPAPAUID3D11ShaderResourceView@@_N@Z ; CDXUTResourceCache::CreateTextureFromFile
  0038c	85 c0		 test	 eax, eax
  0038e	7d 18		 jge	 SHORT $LN6@LoadMateri
; Line 81
  00390	69 8d e4 fe ff
	ff e8 04 00 00	 imul	 ecx, DWORD PTR _m$1[ebp], 1256
  0039a	8b 55 0c	 mov	 edx, DWORD PTR _pMaterials$[ebp]
  0039d	c7 84 0a d0 04
	00 00 01 00 00
	00		 mov	 DWORD PTR [edx+ecx+1232], 1
$LN6@LoadMateri:
; Line 84
  003a8	69 85 e4 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$1[ebp], 1256
  003b2	03 45 0c	 add	 eax, DWORD PTR _pMaterials$[ebp]
  003b5	b9 01 00 00 00	 mov	 ecx, 1
  003ba	6b d1 00	 imul	 edx, ecx, 0
  003bd	0f be 84 10 6c
	02 00 00	 movsx	 eax, BYTE PTR [eax+edx+620]
  003c5	85 c0		 test	 eax, eax
  003c7	0f 84 92 00 00
	00		 je	 $LN4@LoadMateri
; Line 86
  003cd	69 8d e4 fe ff
	ff e8 04 00 00	 imul	 ecx, DWORD PTR _m$1[ebp], 1256
  003d7	8b 55 0c	 mov	 edx, DWORD PTR _pMaterials$[ebp]
  003da	8d 84 0a 6c 02
	00 00		 lea	 eax, DWORD PTR [edx+ecx+620]
  003e1	8b f4		 mov	 esi, esp
  003e3	50		 push	 eax
  003e4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003e7	81 c1 48 02 00
	00		 add	 ecx, 584		; 00000248H
  003ed	51		 push	 ecx
  003ee	68 00 00 00 00	 push	 OFFSET $SG154792
  003f3	68 04 01 00 00	 push	 260			; 00000104H
  003f8	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR _strPath$[ebp]
  003fe	52		 push	 edx
  003ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf_s
  00405	83 c4 14	 add	 esp, 20			; 00000014H
  00408	3b f4		 cmp	 esi, esp
  0040a	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 89
  0040f	6a 00		 push	 0
  00411	69 85 e4 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$1[ebp], 1256
  0041b	8b 4d 0c	 mov	 ecx, DWORD PTR _pMaterials$[ebp]
  0041e	8d 94 01 d8 04
	00 00		 lea	 edx, DWORD PTR [ecx+eax+1240]
  00425	52		 push	 edx
  00426	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _strPath$[ebp]
  0042c	50		 push	 eax
  0042d	e8 00 00 00 00	 call	 ?DXUTGetD3D11DeviceContext@@YGPAUID3D11DeviceContext@@XZ ; DXUTGetD3D11DeviceContext
  00432	50		 push	 eax
  00433	8b 4d 08	 mov	 ecx, DWORD PTR _pd3dDevice$[ebp]
  00436	51		 push	 ecx
  00437	e8 00 00 00 00	 call	 ?DXUTGetGlobalResourceCache@@YGAAVCDXUTResourceCache@@XZ ; DXUTGetGlobalResourceCache
  0043c	8b c8		 mov	 ecx, eax
  0043e	e8 00 00 00 00	 call	 ?CreateTextureFromFile@CDXUTResourceCache@@QAEJPAUID3D11Device@@PAUID3D11DeviceContext@@PBDPAPAUID3D11ShaderResourceView@@_N@Z ; CDXUTResourceCache::CreateTextureFromFile
  00443	85 c0		 test	 eax, eax
  00445	7d 18		 jge	 SHORT $LN4@LoadMateri
; Line 90
  00447	69 95 e4 fe ff
	ff e8 04 00 00	 imul	 edx, DWORD PTR _m$1[ebp], 1256
  00451	8b 45 0c	 mov	 eax, DWORD PTR _pMaterials$[ebp]
  00454	c7 84 10 d8 04
	00 00 01 00 00
	00		 mov	 DWORD PTR [eax+edx+1240], 1
$LN4@LoadMateri:
; Line 92
  0045f	69 8d e4 fe ff
	ff e8 04 00 00	 imul	 ecx, DWORD PTR _m$1[ebp], 1256
  00469	03 4d 0c	 add	 ecx, DWORD PTR _pMaterials$[ebp]
  0046c	ba 01 00 00 00	 mov	 edx, 1
  00471	6b c2 00	 imul	 eax, edx, 0
  00474	0f be 8c 01 70
	03 00 00	 movsx	 ecx, BYTE PTR [ecx+eax+880]
  0047c	85 c9		 test	 ecx, ecx
  0047e	0f 84 92 00 00
	00		 je	 $LN2@LoadMateri
; Line 94
  00484	69 95 e4 fe ff
	ff e8 04 00 00	 imul	 edx, DWORD PTR _m$1[ebp], 1256
  0048e	8b 45 0c	 mov	 eax, DWORD PTR _pMaterials$[ebp]
  00491	8d 8c 10 70 03
	00 00		 lea	 ecx, DWORD PTR [eax+edx+880]
  00498	8b f4		 mov	 esi, esp
  0049a	51		 push	 ecx
  0049b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0049e	81 c2 48 02 00
	00		 add	 edx, 584		; 00000248H
  004a4	52		 push	 edx
  004a5	68 00 00 00 00	 push	 OFFSET $SG154797
  004aa	68 04 01 00 00	 push	 260			; 00000104H
  004af	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _strPath$[ebp]
  004b5	50		 push	 eax
  004b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sprintf_s
  004bc	83 c4 14	 add	 esp, 20			; 00000014H
  004bf	3b f4		 cmp	 esi, esp
  004c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 97
  004c6	6a 00		 push	 0
  004c8	69 8d e4 fe ff
	ff e8 04 00 00	 imul	 ecx, DWORD PTR _m$1[ebp], 1256
  004d2	8b 55 0c	 mov	 edx, DWORD PTR _pMaterials$[ebp]
  004d5	8d 84 0a e0 04
	00 00		 lea	 eax, DWORD PTR [edx+ecx+1248]
  004dc	50		 push	 eax
  004dd	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _strPath$[ebp]
  004e3	51		 push	 ecx
  004e4	e8 00 00 00 00	 call	 ?DXUTGetD3D11DeviceContext@@YGPAUID3D11DeviceContext@@XZ ; DXUTGetD3D11DeviceContext
  004e9	50		 push	 eax
  004ea	8b 55 08	 mov	 edx, DWORD PTR _pd3dDevice$[ebp]
  004ed	52		 push	 edx
  004ee	e8 00 00 00 00	 call	 ?DXUTGetGlobalResourceCache@@YGAAVCDXUTResourceCache@@XZ ; DXUTGetGlobalResourceCache
  004f3	8b c8		 mov	 ecx, eax
  004f5	e8 00 00 00 00	 call	 ?CreateTextureFromFile@CDXUTResourceCache@@QAEJPAUID3D11Device@@PAUID3D11DeviceContext@@PBDPAPAUID3D11ShaderResourceView@@_N@Z ; CDXUTResourceCache::CreateTextureFromFile
  004fa	85 c0		 test	 eax, eax
  004fc	7d 18		 jge	 SHORT $LN2@LoadMateri
; Line 98
  004fe	69 85 e4 fe ff
	ff e8 04 00 00	 imul	 eax, DWORD PTR _m$1[ebp], 1256
  00508	8b 4d 0c	 mov	 ecx, DWORD PTR _pMaterials$[ebp]
  0050b	c7 84 01 e0 04
	00 00 01 00 00
	00		 mov	 DWORD PTR [ecx+eax+1248], 1
$LN2@LoadMateri:
; Line 100
  00516	e9 29 fd ff ff	 jmp	 $LN8@LoadMateri
$LN18@LoadMateri:
; Line 102
  0051b	52		 push	 edx
  0051c	8b cd		 mov	 ecx, ebp
  0051e	50		 push	 eax
  0051f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN22@LoadMateri
  00525	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0052a	58		 pop	 eax
  0052b	5a		 pop	 edx
  0052c	5f		 pop	 edi
  0052d	5e		 pop	 esi
  0052e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00531	33 cd		 xor	 ecx, ebp
  00533	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00538	81 c4 1c 01 00
	00		 add	 esp, 284		; 0000011cH
  0053e	3b ec		 cmp	 ebp, esp
  00540	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00545	8b e5		 mov	 esp, ebp
  00547	5d		 pop	 ebp
  00548	c2 10 00	 ret	 16			; 00000010H
  0054b	90		 npad	 1
$LN22@LoadMateri:
  0054c	01 00 00 00	 DD	 1
  00550	00 00 00 00	 DD	 $LN21@LoadMateri
$LN21@LoadMateri:
  00554	f0 fe ff ff	 DD	 -272			; fffffef0H
  00558	04 01 00 00	 DD	 260			; 00000104H
  0055c	00 00 00 00	 DD	 $LN20@LoadMateri
$LN20@LoadMateri:
  00560	73		 DB	 115			; 00000073H
  00561	74		 DB	 116			; 00000074H
  00562	72		 DB	 114			; 00000072H
  00563	50		 DB	 80			; 00000050H
  00564	61		 DB	 97			; 00000061H
  00565	74		 DB	 116			; 00000074H
  00566	68		 DB	 104			; 00000068H
  00567	00		 DB	 0
?LoadMaterials@CDXUTSDKMesh@@IAEXPAUID3D11Device@@PAUSDKMESH_MATERIAL@@IPAUSDKMESH_CALLBACKS11@@@Z ENDP ; CDXUTSDKMesh::LoadMaterials
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_Tidy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
?_Tidy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXXZ PROC ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Tidy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1622
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1623
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001f	74 70		 je	 SHORT $LN2@Tidy
; Line 1625
  00021	8b f4		 mov	 esi, esp
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
  0002c	3b f4		 cmp	 esi, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 1626
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00039	52		 push	 edx
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00040	51		 push	 ecx
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXPAPAE0@Z ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Destroy
; Line 1628
  00049	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00052	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  00055	c1 f9 02	 sar	 ecx, 2
  00058	51		 push	 ecx
  00059	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005f	50		 push	 eax
  00060	8d 4d fb	 lea	 ecx, DWORD PTR $T1[ebp]
  00063	51		 push	 ecx
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAE@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
  0006c	8b c8		 mov	 ecx, eax
  0006e	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAEXPAPAEI@Z ; std::_Wrap_alloc<std::allocator<unsigned char *> >::deallocate
; Line 1629
  00073	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00076	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
; Line 1630
  0007d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00080	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
; Line 1631
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$LN2@Tidy:
; Line 1633
  00091	5e		 pop	 esi
  00092	83 c4 08	 add	 esp, 8
  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
?_Tidy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXXZ ENDP ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_Destroy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXPAPAE0@Z
_TEXT	SEGMENT
__Alval$ = -9						; size = 1
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXPAPAE0@Z PROC ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Destroy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 1565
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 1566
  0001a	8d 45 f7	 lea	 eax, DWORD PTR __Alval$[ebp]
  0001d	50		 push	 eax
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAE@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
; Line 1567
  00026	8d 4d f7	 lea	 ecx, DWORD PTR __Alval$[ebp]
  00029	51		 push	 ecx
  0002a	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  0002d	52		 push	 edx
  0002e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@@std@@YAXPAPAE0AAU?$_Wrap_alloc@V?$allocator@PAE@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<unsigned char *> > >
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 1568
  0003a	52		 push	 edx
  0003b	8b cd		 mov	 ecx, ebp
  0003d	50		 push	 eax
  0003e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Destroy
  00044	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00049	58		 pop	 eax
  0004a	5a		 pop	 edx
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
  0005b	90		 npad	 1
$LN5@Destroy:
  0005c	01 00 00 00	 DD	 1
  00060	00 00 00 00	 DD	 $LN4@Destroy
$LN4@Destroy:
  00064	f7 ff ff ff	 DD	 -9			; fffffff7H
  00068	01 00 00 00	 DD	 1
  0006c	00 00 00 00	 DD	 $LN3@Destroy
$LN3@Destroy:
  00070	5f		 DB	 95			; 0000005fH
  00071	41		 DB	 65			; 00000041H
  00072	6c		 DB	 108			; 0000006cH
  00073	76		 DB	 118			; 00000076H
  00074	61		 DB	 97			; 00000061H
  00075	6c		 DB	 108			; 0000006cH
  00076	00		 DB	 0
?_Destroy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXPAPAE0@Z ENDP ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char *,std::allocator<unsigned char *> >::~vector<unsigned char *,std::allocator<unsigned char *> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 944
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 945
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAEV?$allocator@PAE@std@@@std@@IAEXXZ ; std::vector<unsigned char *,std::allocator<unsigned char *> >::_Tidy
; Line 946
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::~_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >
  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??1?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char *,std::allocator<unsigned char *> >::~vector<unsigned char *,std::allocator<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -5						; size = 1
_this$ = -4						; size = 4
??0?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char *,std::allocator<unsigned char *> >::vector<unsigned char *,std::allocator<unsigned char *> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 680
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	8d 4d fb	 lea	 ecx, DWORD PTR $T1[ebp]
  0001a	e8 00 00 00 00	 call	 ??0?$allocator@PAE@std@@QAE@XZ ; std::allocator<unsigned char *>::allocator<unsigned char *>
  0001f	50		 push	 eax
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >
; Line 681
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 c4 08	 add	 esp, 8
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??0?$vector@PAEV?$allocator@PAE@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char *,std::allocator<unsigned char *> >::vector<unsigned char *,std::allocator<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAE@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAE@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 641
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 642
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<unsigned char *> >::_Wrap_alloc<std::allocator<unsigned char *> >
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 643
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAE@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Alproxy$ = -9						; size = 1
_this$ = -4						; size = 4
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Free_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 630
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 632
  0001b	8d 4d f7	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  0001e	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 633
  00023	8b f4		 mov	 esi, esp
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 634
  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	51		 push	 ecx
  0003b	8d 4d f7	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  0003e	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; Line 635
  00043	6a 01		 push	 1
  00045	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00048	8b 02		 mov	 eax, DWORD PTR [edx]
  0004a	50		 push	 eax
  0004b	8d 4d f7	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  0004e	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
; Line 636
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; Line 637
  0005c	52		 push	 edx
  0005d	8b cd		 mov	 ecx, ebp
  0005f	50		 push	 eax
  00060	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Free_proxy
  00066	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006b	58		 pop	 eax
  0006c	5a		 pop	 edx
  0006d	5e		 pop	 esi
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN5@Free_proxy:
  0007c	01 00 00 00	 DD	 1
  00080	00 00 00 00	 DD	 $LN4@Free_proxy
$LN4@Free_proxy:
  00084	f7 ff ff ff	 DD	 -9			; fffffff7H
  00088	01 00 00 00	 DD	 1
  0008c	00 00 00 00	 DD	 $LN3@Free_proxy
$LN3@Free_proxy:
  00090	5f		 DB	 95			; 0000005fH
  00091	41		 DB	 65			; 00000041H
  00092	6c		 DB	 108			; 0000006cH
  00093	70		 DB	 112			; 00000070H
  00094	72		 DB	 114			; 00000072H
  00095	6f		 DB	 111			; 0000006fH
  00096	78		 DB	 120			; 00000078H
  00097	79		 DB	 121			; 00000079H
  00098	00		 DB	 0
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 8
__Alproxy$ = -9						; size = 1
_this$ = -4						; size = 4
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Alloc_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 621
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 623
  00020	8d 4d f7	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00023	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; Line 624
  00028	6a 01		 push	 1
  0002a	8d 4d f7	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  0002d	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	89 01		 mov	 DWORD PTR [ecx], eax
; Line 625
  00037	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  0003a	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy
  0003f	50		 push	 eax
  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	50		 push	 eax
  00046	8d 4d f7	 lea	 ecx, DWORD PTR __Alproxy$[ebp]
  00049	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
; Line 626
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	89 02		 mov	 DWORD PTR [edx], eax
; Line 627
  00058	52		 push	 edx
  00059	8b cd		 mov	 ecx, ebp
  0005b	50		 push	 eax
  0005c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Alloc_prox
  00062	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00067	58		 pop	 eax
  00068	5a		 pop	 edx
  00069	83 c4 18	 add	 esp, 24			; 00000018H
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
  00077	90		 npad	 1
$LN5@Alloc_prox:
  00078	01 00 00 00	 DD	 1
  0007c	00 00 00 00	 DD	 $LN4@Alloc_prox
$LN4@Alloc_prox:
  00080	f7 ff ff ff	 DD	 -9			; fffffff7H
  00084	01 00 00 00	 DD	 1
  00088	00 00 00 00	 DD	 $LN3@Alloc_prox
$LN3@Alloc_prox:
  0008c	5f		 DB	 95			; 0000005fH
  0008d	41		 DB	 65			; 00000041H
  0008e	6c		 DB	 108			; 0000006cH
  0008f	70		 DB	 112			; 00000070H
  00090	72		 DB	 114			; 00000072H
  00091	6f		 DB	 111			; 0000006fH
  00092	78		 DB	 120			; 00000078H
  00093	79		 DB	 121			; 00000079H
  00094	00		 DB	 0
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::~_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 607
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 608
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Free_proxy
; Line 609
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ??1?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ
  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::~_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 601
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<unsigned char *> >::_Vector_val<std::_Simple_types<unsigned char *> >
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; Line 603
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Alloc_proxy
; Line 604
  00044	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00058	59		 pop	 ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAEV?$allocator@PAE@std@@@std@@@std@@QAE@ABV?$allocator@PAE@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >::_Vector_alloc<0,std::_Vec_base_types<unsigned char *,std::allocator<unsigned char *> > >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned char *> >::~_Vector_val<std::_Simple_types<unsigned char *> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b f4		 mov	 esi, esp
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
  0001a	3b f4		 cmp	 esi, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00021	5e		 pop	 esi
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??1?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned char *> >::~_Vector_val<std::_Simple_types<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned char *> >::_Vector_val<std::_Simple_types<unsigned char *> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\vector
; Line 480
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b f4		 mov	 esi, esp
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
  0001a	3b f4		 cmp	 esi, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
; Line 482
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; Line 483
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; Line 484
  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
; Line 485
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	5e		 pop	 esi
  00043	83 c4 04	 add	 esp, 4
  00046	3b ec		 cmp	 ebp, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAE@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned char *> >::_Vector_val<std::_Simple_types<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAEXPAPAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAEXPAPAEI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned char *> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 858
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00015	51		 push	 ecx
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAE@std@@QAEXPAPAEI@Z ; std::allocator<unsigned char *>::deallocate
; Line 859
  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAEXPAPAEI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned char *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<unsigned char *> >::_Wrap_alloc<std::allocator<unsigned char *> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$allocator@PAE@std@@QAE@XZ ; std::allocator<unsigned char *>::allocator<unsigned char *>
; Line 802
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@PAE@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<unsigned char *> >::_Wrap_alloc<std::allocator<unsigned char *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$allocator@PAE@std@@QAEXPAPAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAE@std@@QAEXPAPAEI@Z PROC	; std::allocator<unsigned char *>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 573
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
; Line 574
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?deallocate@?$allocator@PAE@std@@QAEXPAPAEI@Z ENDP	; std::allocator<unsigned char *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$allocator@PAE@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAE@std@@QAE@XZ PROC			; std::allocator<unsigned char *>::allocator<unsigned char *>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 554
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@PAE@std@@QAE@XZ ENDP			; std::allocator<unsigned char *>::allocator<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 605
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 608
  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 598
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0001f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00022	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
; Line 600
  00039	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003c	50		 push	 eax
  0003d	6a 08		 push	 8
  0003f	e8 00 00 00 00	 call	 ??2@YAPAXIPAX@Z		; operator new
  00044	83 c4 08	 add	 esp, 8
  00047	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00051	83 7d e8 00	 cmp	 DWORD PTR $T2[ebp], 0
  00055	74 21		 je	 SHORT $LN3@construct
  00057	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
  00060	83 c4 04	 add	 esp, 4
  00063	8b 10		 mov	 edx, DWORD PTR [eax]
  00065	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00068	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  0006b	89 11		 mov	 DWORD PTR [ecx], edx
  0006d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00070	8b 55 e8	 mov	 edx, DWORD PTR $T2[ebp]
  00073	89 55 e4	 mov	 DWORD PTR tv74[ebp], edx
  00076	eb 07		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00078	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@construct:
  0007f	8b 45 e4	 mov	 eax, DWORD PTR tv74[ebp]
  00082	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
  00085	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; Line 601
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	83 c4 1c	 add	 esp, 28			; 0000001cH
  0009a	3b ec		 cmp	 ebp, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0:
  00000	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00003	50		 push	 eax
  00004	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z:
  00011	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00015	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00018	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0001b	33 c8		 xor	 ecx, eax
  0001d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00022	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
  00027	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 728
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 730
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
; Line 731
  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 720
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 723
  00003	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
  0000c	83 c4 04	 add	 esp, 4
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00013	51		 push	 ecx
  00014	8b 4d 08	 mov	 ecx, DWORD PTR __Al$[ebp]
  00017	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Line 724
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 1505
  00003	8b 45 08	 mov	 eax, DWORD PTR __Arg$[ebp]
; Line 1506
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 22
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
; Line 23
  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __Ptr$[ebp], 0
; Line 25
  00013	83 7d 08 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00017	75 02		 jne	 SHORT $LN4@Allocate
; Line 27
  00019	eb 30		 jmp	 SHORT $LN3@Allocate
$LN4@Allocate:
; Line 28
  0001b	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Count$[ebp], 536870911 ; 1fffffffH
  00022	77 18		 ja	 SHORT $LN1@Allocate
  00024	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00027	c1 e0 03	 shl	 eax, 3
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00030	83 c4 04	 add	 esp, 4
  00033	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
  00036	83 7d fc 00	 cmp	 DWORD PTR __Ptr$[ebp], 0
  0003a	75 0f		 jne	 SHORT $LN3@Allocate
$LN1@Allocate:
; Line 29
  0003c	8b f4		 mov	 esi, esp
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Allocate:
; Line 31
  0004b	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:
; Line 32
  0004e	5e		 pop	 esi
  0004f	83 c4 04	 add	 esp, 4
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 877
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 879
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	51		 push	 ecx
  00016	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
  0001b	83 c4 08	 add	 esp, 8
; Line 880
  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 868
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 872
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
  00017	83 c4 04	 add	 esp, 4
  0001a	50		 push	 eax
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 873
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 857
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 858
  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00015	51		 push	 ecx
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
; Line 859
  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c2 08 00	 ret	 8
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 846
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 847
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
; Line 848
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 801
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
; Line 802
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 577
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 578
  0000e	6a 00		 push	 0
  00010	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
  00019	83 c4 08	 add	 esp, 8
; Line 579
  0001c	83 c4 04	 add	 esp, 4
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 572
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 573
  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00017	83 c4 04	 add	 esp, 4
; Line 574
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ PROC	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
; Line 552
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; Line 554
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ENDP	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DXUT_SetDebugName@@YAXPAUID3D11DeviceChild@@PBD@Z
_TEXT	SEGMENT
tv72 = -16						; size = 4
tv82 = -9						; size = 1
tv79 = -8						; size = 4
tv76 = -4						; size = 4
_pObj$ = 8						; size = 4
_pstrName$ = 12						; size = 4
?DXUT_SetDebugName@@YAXPAUID3D11DeviceChild@@PBD@Z PROC	; DXUT_SetDebugName, COMDAT
; File d:\engine class\assignment 1\new scratch\dxut\core\dxutmisc.h
; Line 197
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 198
  00018	83 7d 08 00	 cmp	 DWORD PTR _pObj$[ebp], 0
  0001c	74 4e		 je	 SHORT $LN2@DXUT_SetDe
; Line 199
  0001e	8b 45 0c	 mov	 eax, DWORD PTR _pstrName$[ebp]
  00021	89 45 fc	 mov	 DWORD PTR tv76[ebp], eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR tv76[ebp]
  00027	83 c1 01	 add	 ecx, 1
  0002a	89 4d f8	 mov	 DWORD PTR tv79[ebp], ecx
$LL4@DXUT_SetDe:
  0002d	8b 55 fc	 mov	 edx, DWORD PTR tv76[ebp]
  00030	8a 02		 mov	 al, BYTE PTR [edx]
  00032	88 45 f7	 mov	 BYTE PTR tv82[ebp], al
  00035	83 45 fc 01	 add	 DWORD PTR tv76[ebp], 1
  00039	80 7d f7 00	 cmp	 BYTE PTR tv82[ebp], 0
  0003d	75 ee		 jne	 SHORT $LL4@DXUT_SetDe
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR tv76[ebp]
  00042	2b 4d f8	 sub	 ecx, DWORD PTR tv79[ebp]
  00045	89 4d f0	 mov	 DWORD PTR tv72[ebp], ecx
  00048	8b f4		 mov	 esi, esp
  0004a	8b 55 0c	 mov	 edx, DWORD PTR _pstrName$[ebp]
  0004d	52		 push	 edx
  0004e	8b 45 f0	 mov	 eax, DWORD PTR tv72[ebp]
  00051	50		 push	 eax
  00052	68 00 00 00 00	 push	 OFFSET _WKPDID_D3DDebugObjectName
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _pObj$[ebp]
  0005a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005c	8b 45 08	 mov	 eax, DWORD PTR _pObj$[ebp]
  0005f	50		 push	 eax
  00060	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00063	ff d1		 call	 ecx
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@DXUT_SetDe:
; Line 200
  0006c	5e		 pop	 esi
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?DXUT_SetDebugName@@YAXPAUID3D11DeviceChild@@PBD@Z ENDP	; DXUT_SetDebugName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 68
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; Line 69
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ
_TEXT	SEGMENT
?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ PROC	; DirectX::XMQuaternionIdentity, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 635
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; Line 637
  00003	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
; Line 640
  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ ENDP	; DirectX::XMQuaternionIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionInverse@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -192						; size = 16
$T2 = -176						; size = 16
_Result$ = -160						; size = 16
$T3 = -144						; size = 16
_Control$ = -128					; size = 16
$T4 = -112						; size = 16
_Conjugate$ = -96					; size = 16
$T5 = -80						; size = 16
_L$ = -64						; size = 16
$T6 = -48						; size = 16
_Zero$ = -32						; size = 16
_Q$ = -16						; size = 16
?XMQuaternionInverse@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMQuaternionInverse, COMDAT
; _Q$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 270
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00024	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 45 f0	 movaps	 XMMWORD PTR _Q$[ebp], xmm0
; Line 273
  00035	e8 00 00 00 00	 call	 ?XMVectorZero@DirectX@@YQ?AT__m128@@XZ ; DirectX::XMVectorZero
  0003a	0f 29 45 d0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0003e	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  00042	0f 29 45 e0	 movaps	 XMMWORD PTR _Zero$[ebp], xmm0
; Line 275
  00046	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _Q$[ebp]
  0004a	e8 00 00 00 00	 call	 ?XMVector4LengthSq@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector4LengthSq
  0004f	0f 29 45 b0	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00053	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00057	0f 29 45 c0	 movaps	 XMMWORD PTR _L$[ebp], xmm0
; Line 276
  0005b	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _Q$[ebp]
  0005f	e8 00 00 00 00	 call	 ?XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionConjugate
  00064	0f 29 45 90	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00068	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  0006c	0f 29 45 a0	 movaps	 XMMWORD PTR _Conjugate$[ebp], xmm0
; Line 278
  00070	0f 28 0d 00 00
	00 00		 movaps	 xmm1, XMMWORD PTR ?g_XMEpsilon@DirectX@@3UXMVECTORF32@1@B
  00077	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _L$[ebp]
  0007b	e8 00 00 00 00	 call	 ?XMVectorLessOrEqual@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorLessOrEqual
  00080	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00087	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0008e	0f 29 45 80	 movaps	 XMMWORD PTR _Control$[ebp], xmm0
; Line 280
  00092	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _L$[ebp]
  00096	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _Conjugate$[ebp]
  0009a	e8 00 00 00 00	 call	 ?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorDivide
  0009f	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000a6	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000ad	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 282
  000b4	0f 28 55 80	 movaps	 xmm2, XMMWORD PTR _Control$[ebp]
  000b8	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _Zero$[ebp]
  000bc	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
  000c3	e8 00 00 00 00	 call	 ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
  000c8	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000cf	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  000d6	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _Result$[ebp], xmm0
; Line 284
  000dd	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _Result$[ebp]
; Line 288
  000e4	5f		 pop	 edi
  000e5	8b e5		 mov	 esp, ebp
  000e7	5d		 pop	 ebp
  000e8	8b e3		 mov	 esp, ebx
  000ea	5b		 pop	 ebx
  000eb	c3		 ret	 0
?XMQuaternionInverse@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMQuaternionInverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
$T2 = -32						; size = 16
_Q$ = -16						; size = 16
?XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMQuaternionConjugate, COMDAT
; _Q$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 245
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 45 f0	 movaps	 XMMWORD PTR _Q$[ebp], xmm0
; Line 259
  0002f	8d 45 e0	 lea	 eax, DWORD PTR $T2[ebp]
  00032	50		 push	 eax
  00033	b9 00 00 00 00	 mov	 ecx, OFFSET ?NegativeOne3@?1??XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionConjugate'::`2'::NegativeOne3
  00038	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  0003d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00040	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _Q$[ebp]
  00044	0f 59 c8	 mulps	 xmm1, xmm0
  00047	0f 29 4d d0	 movaps	 XMMWORD PTR $T1[ebp], xmm1
  0004b	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 262
  0004f	5f		 pop	 edi
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	8b e3		 mov	 esp, ebx
  00055	5b		 pop	 ebx
  00056	c3		 ret	 0
?XMQuaternionConjugate@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMQuaternionConjugate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionNormalize@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_Q$ = -16						; size = 16
?XMQuaternionNormalize@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMQuaternionNormalize, COMDAT
; _Q$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 235
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	0f 29 45 f0	 movaps	 XMMWORD PTR _Q$[ebp], xmm0
; Line 236
  0003a	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _Q$[ebp]
  0003e	e8 00 00 00 00	 call	 ?XMVector4Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector4Normalize
  00043	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00047	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 237
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	8b e3		 mov	 esp, ebx
  00050	5b		 pop	 ebx
  00051	c3		 ret	 0
?XMQuaternionNormalize@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMQuaternionNormalize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z
_TEXT	SEGMENT
tv283 = -736						; size = 16
$T1 = -720						; size = 16
$T2 = -704						; size = 16
$T3 = -688						; size = 16
$T4 = -672						; size = 16
_M$ = -640						; size = 64
$T5 = -560						; size = 16
$T6 = -544						; size = 16
$T7 = -528						; size = 16
$T8 = -512						; size = 16
$T9 = -496						; size = 16
$T10 = -480						; size = 16
$T11 = -464						; size = 16
_R2$ = -448						; size = 16
$T12 = -432						; size = 16
_R1$ = -416						; size = 16
$T13 = -400						; size = 16
$T14 = -384						; size = 16
_V2$ = -368						; size = 16
$T15 = -352						; size = 16
$T16 = -336						; size = 16
$T17 = -320						; size = 16
$T18 = -304						; size = 16
$T19 = -288						; size = 16
$T20 = -272						; size = 16
$T21 = -256						; size = 16
_R0$ = -240						; size = 16
$T22 = -224						; size = 16
$T23 = -208						; size = 16
$T24 = -192						; size = 16
_V1$ = -176						; size = 16
$T25 = -160						; size = 16
$T26 = -144						; size = 16
$T27 = -128						; size = 16
_V0$ = -112						; size = 16
$T28 = -96						; size = 16
_Q1$ = -80						; size = 16
$T29 = -64						; size = 16
_Q0$ = -48						; size = 16
_Quaternion$ = -32					; size = 16
__$ArrayPad$ = -4					; size = 4
?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z PROC ; DirectX::XMMatrixRotationQuaternion, COMDAT
; _Quaternion$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1631
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e0 02 00
	00		 sub	 esp, 736		; 000002e0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 20 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-736]
  00024	b9 b8 00 00 00	 mov	 ecx, 184		; 000000b8H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	0f 29 45 e0	 movaps	 XMMWORD PTR _Quaternion$[ebp], xmm0
; Line 1668
  0003f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Quaternion$[ebp]
  00043	0f 58 45 e0	 addps	 xmm0, XMMWORD PTR _Quaternion$[ebp]
  00047	0f 29 45 c0	 movaps	 XMMWORD PTR $T29[ebp], xmm0
  0004b	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T29[ebp]
  0004f	0f 29 45 d0	 movaps	 XMMWORD PTR _Q0$[ebp], xmm0
; Line 1669
  00053	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Quaternion$[ebp]
  00057	0f 59 45 d0	 mulps	 xmm0, XMMWORD PTR _Q0$[ebp]
  0005b	0f 29 45 a0	 movaps	 XMMWORD PTR $T28[ebp], xmm0
  0005f	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  00063	0f 29 45 b0	 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 1671
  00067	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _Q1$[ebp]
  0006b	0f c6 45 b0 c1	 shufps	 xmm0, XMMWORD PTR _Q1$[ebp], 193 ; 000000c1H
  00070	0f 29 45 80	 movaps	 XMMWORD PTR $T27[ebp], xmm0
  00074	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T27[ebp]
  00078	0f 29 45 90	 movaps	 XMMWORD PTR _V0$[ebp], xmm0
; Line 1672
  0007c	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T26[ebp]
  00082	50		 push	 eax
  00083	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMMask3
  00088	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  0008d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00090	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _V0$[ebp]
  00094	0f 54 c8	 andps	 xmm1, xmm0
  00097	0f 29 8d 60 ff
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm1
  0009e	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  000a5	0f 29 45 90	 movaps	 XMMWORD PTR _V0$[ebp], xmm0
; Line 1673
  000a9	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _Q1$[ebp]
  000ad	0f c6 45 b0 da	 shufps	 xmm0, XMMWORD PTR _Q1$[ebp], 218 ; 000000daH
  000b2	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  000b9	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  000c0	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1674
  000c7	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  000cd	51		 push	 ecx
  000ce	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMMask3
  000d3	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  000d8	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000db	0f 28 8d 50 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _V1$[ebp]
  000e2	0f 54 c8	 andps	 xmm1, xmm0
  000e5	0f 29 8d 20 ff
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm1
  000ec	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  000f3	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1675
  000fa	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _V0$[ebp]
  000fe	8d 95 00 ff ff
	ff		 lea	 edx, DWORD PTR $T21[ebp]
  00104	52		 push	 edx
  00105	b9 00 00 00 00	 mov	 ecx, OFFSET ?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B ; `DirectX::XMMatrixRotationQuaternion'::`2'::Constant1110
  0010a	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR tv283[ebp], xmm0
  00111	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00116	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00119	0f 28 8d 20 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR tv283[ebp]
  00120	0f 5c c1	 subps	 xmm0, xmm1
  00123	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  0012a	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  00131	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _R0$[ebp], xmm0
; Line 1676
  00138	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R0$[ebp]
  0013f	0f 5c 85 50 ff
	ff ff		 subps	 xmm0, XMMWORD PTR _V1$[ebp]
  00146	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  0014d	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  00154	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _R0$[ebp], xmm0
; Line 1678
  0015b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Quaternion$[ebp]
  0015f	0f c6 45 e0 d0	 shufps	 xmm0, XMMWORD PTR _Quaternion$[ebp], 208 ; 000000d0H
  00164	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  0016b	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  00172	0f 29 45 90	 movaps	 XMMWORD PTR _V0$[ebp], xmm0
; Line 1679
  00176	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _Q0$[ebp]
  0017a	0f c6 45 d0 e6	 shufps	 xmm0, XMMWORD PTR _Q0$[ebp], 230 ; 000000e6H
  0017f	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00186	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  0018d	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1680
  00194	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _V0$[ebp]
  00198	0f 59 85 50 ff
	ff ff		 mulps	 xmm0, XMMWORD PTR _V1$[ebp]
  0019f	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  001a6	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  001ad	0f 29 45 90	 movaps	 XMMWORD PTR _V0$[ebp], xmm0
; Line 1682
  001b1	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _Quaternion$[ebp]
  001b5	0f c6 45 e0 ff	 shufps	 xmm0, XMMWORD PTR _Quaternion$[ebp], 255 ; 000000ffH
  001ba	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  001c1	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  001c8	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1683
  001cf	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _Q0$[ebp]
  001d3	0f c6 45 d0 c9	 shufps	 xmm0, XMMWORD PTR _Q0$[ebp], 201 ; 000000c9H
  001d8	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  001df	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  001e6	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR _V2$[ebp], xmm0
; Line 1684
  001ed	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  001f4	0f 59 85 90 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V2$[ebp]
  001fb	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00202	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  00209	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1686
  00210	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _V0$[ebp]
  00214	0f 58 85 50 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _V1$[ebp]
  0021b	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00222	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  00229	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _R1$[ebp], xmm0
; Line 1687
  00230	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _V0$[ebp]
  00234	0f 5c 85 50 ff
	ff ff		 subps	 xmm0, XMMWORD PTR _V1$[ebp]
  0023b	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00242	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  00249	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _R2$[ebp], xmm0
; Line 1689
  00250	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _R1$[ebp]
  00257	0f c6 85 40 fe
	ff ff 49	 shufps	 xmm0, XMMWORD PTR _R2$[ebp], 73 ; 00000049H
  0025f	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00266	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  0026d	0f 29 45 90	 movaps	 XMMWORD PTR _V0$[ebp], xmm0
; Line 1690
  00271	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _V0$[ebp]
  00275	0f c6 45 90 78	 shufps	 xmm0, XMMWORD PTR _V0$[ebp], 120 ; 00000078H
  0027a	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00281	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00288	0f 29 45 90	 movaps	 XMMWORD PTR _V0$[ebp], xmm0
; Line 1691
  0028c	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _R1$[ebp]
  00293	0f c6 85 40 fe
	ff ff a0	 shufps	 xmm0, XMMWORD PTR _R2$[ebp], 160 ; 000000a0H
  0029b	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  002a2	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  002a9	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1692
  002b0	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  002b7	0f c6 85 50 ff
	ff ff 88	 shufps	 xmm0, XMMWORD PTR _V1$[ebp], 136 ; 00000088H
  002bf	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  002c6	0f 28 85 f0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  002cd	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1694
  002d4	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R0$[ebp]
  002db	0f c6 45 90 4c	 shufps	 xmm0, XMMWORD PTR _V0$[ebp], 76 ; 0000004cH
  002e0	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  002e7	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  002ee	0f 29 45 b0	 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 1695
  002f2	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _Q1$[ebp]
  002f6	0f c6 45 b0 78	 shufps	 xmm0, XMMWORD PTR _Q1$[ebp], 120 ; 00000078H
  002fb	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00302	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00309	0f 29 45 b0	 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 1697
  0030d	8d 8d 80 fd ff
	ff		 lea	 ecx, DWORD PTR _M$[ebp]
  00313	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 1698
  00318	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0031d	6b c8 00	 imul	 ecx, eax, 0
  00320	0f 10 45 b0	 movups	 xmm0, XMMWORD PTR _Q1$[ebp]
  00324	0f 11 84 0d 80
	fd ff ff	 movups	 XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1700
  0032c	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R0$[ebp]
  00333	0f c6 45 90 ed	 shufps	 xmm0, XMMWORD PTR _V0$[ebp], 237 ; 000000edH
  00338	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0033f	0f 28 85 60 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  00346	0f 29 45 b0	 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 1701
  0034a	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _Q1$[ebp]
  0034e	0f c6 45 b0 72	 shufps	 xmm0, XMMWORD PTR _Q1$[ebp], 114 ; 00000072H
  00353	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0035a	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00361	0f 29 45 b0	 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 1702
  00365	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0036a	c1 e2 00	 shl	 edx, 0
  0036d	0f 10 45 b0	 movups	 xmm0, XMMWORD PTR _Q1$[ebp]
  00371	0f 11 84 15 80
	fd ff ff	 movups	 XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1704
  00379	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00380	0f c6 85 10 ff
	ff ff e4	 shufps	 xmm0, XMMWORD PTR _R0$[ebp], 228 ; 000000e4H
  00388	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0038f	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00396	0f 29 45 b0	 movaps	 XMMWORD PTR _Q1$[ebp], xmm0
; Line 1705
  0039a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0039f	d1 e0		 shl	 eax, 1
  003a1	0f 10 45 b0	 movups	 xmm0, XMMWORD PTR _Q1$[ebp]
  003a5	0f 11 84 05 80
	fd ff ff	 movups	 XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1706
  003ad	8d 8d 30 fd ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  003b3	51		 push	 ecx
  003b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR3
  003b9	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  003be	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  003c3	6b c2 03	 imul	 eax, edx, 3
  003c6	0f 10 85 30 fd
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  003cd	0f 11 84 05 80
	fd ff ff	 movups	 XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1707
  003d5	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR _M$[ebp]
  003dc	0f 28 8d 90 fd
	ff ff		 movaps	 xmm1, XMMWORD PTR _M$[ebp+16]
  003e3	0f 28 95 a0 fd
	ff ff		 movaps	 xmm2, XMMWORD PTR _M$[ebp+32]
  003ea	0f 28 9d b0 fd
	ff ff		 movaps	 xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1710
  003f1	52		 push	 edx
  003f2	8b cd		 mov	 ecx, ebp
  003f4	50		 push	 eax
  003f5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@XMMatrixRo
  003fb	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00400	58		 pop	 eax
  00401	5a		 pop	 edx
  00402	5f		 pop	 edi
  00403	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00406	33 cd		 xor	 ecx, ebp
  00408	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0040d	8b e5		 mov	 esp, ebp
  0040f	5d		 pop	 ebp
  00410	8b e3		 mov	 esp, ebx
  00412	5b		 pop	 ebx
  00413	c3		 ret	 0
$LN5@XMMatrixRo:
  00414	01 00 00 00	 DD	 1
  00418	00 00 00 00	 DD	 $LN4@XMMatrixRo
$LN4@XMMatrixRo:
  0041c	80 fd ff ff	 DD	 -640			; fffffd80H
  00420	40 00 00 00	 DD	 64			; 00000040H
  00424	00 00 00 00	 DD	 $LN3@XMMatrixRo
$LN3@XMMatrixRo:
  00428	4d		 DB	 77			; 0000004dH
  00429	00		 DB	 0
?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ENDP ; DirectX::XMMatrixRotationQuaternion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z
_TEXT	SEGMENT
$T1 = -128						; size = 16
_M$ = -96						; size = 64
_OffsetZ$ = -16						; size = 4
_OffsetY$ = -12						; size = 4
_OffsetX$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z PROC ; DirectX::XMMatrixTranslation, COMDAT
; _OffsetX$ = xmm0s
; _OffsetY$ = xmm1s
; _OffsetZ$ = xmm2s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1079
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00021	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	f3 0f 11 55 f0	 movss	 DWORD PTR _OffsetZ$[ebp], xmm2
  0003d	f3 0f 11 4d f4	 movss	 DWORD PTR _OffsetY$[ebp], xmm1
  00042	f3 0f 11 45 f8	 movss	 DWORD PTR _OffsetX$[ebp], xmm0
; Line 1105
  00047	8d 4d a0	 lea	 ecx, DWORD PTR _M$[ebp]
  0004a	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 1106
  0004f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00054	6b c8 00	 imul	 ecx, eax, 0
  00057	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
  0005e	0f 11 44 0d a0	 movups	 XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1107
  00063	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00068	c1 e2 00	 shl	 edx, 0
  0006b	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
  00072	0f 11 44 15 a0	 movups	 XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1108
  00077	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0007c	d1 e0		 shl	 eax, 1
  0007e	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
  00085	0f 11 44 05 a0	 movups	 XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1109
  0008a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00092	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _OffsetZ$[ebp]
  00097	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _OffsetY$[ebp]
  0009c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _OffsetX$[ebp]
  000a1	e8 00 00 00 00	 call	 ?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
  000a6	0f 29 45 80	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000aa	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000af	6b d1 03	 imul	 edx, ecx, 3
  000b2	0f 10 45 80	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  000b6	0f 11 44 15 a0	 movups	 XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1110
  000bb	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _M$[ebp]
  000bf	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _M$[ebp+16]
  000c3	0f 28 55 c0	 movaps	 xmm2, XMMWORD PTR _M$[ebp+32]
  000c7	0f 28 5d d0	 movaps	 xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1113
  000cb	52		 push	 edx
  000cc	8b cd		 mov	 ecx, ebp
  000ce	50		 push	 eax
  000cf	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@XMMatrixTr
  000d5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000da	58		 pop	 eax
  000db	5a		 pop	 edx
  000dc	5f		 pop	 edi
  000dd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e0	33 cd		 xor	 ecx, ebp
  000e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	8b e3		 mov	 esp, ebx
  000ec	5b		 pop	 ebx
  000ed	c3		 ret	 0
  000ee	8b ff		 npad	 2
$LN5@XMMatrixTr:
  000f0	01 00 00 00	 DD	 1
  000f4	00 00 00 00	 DD	 $LN4@XMMatrixTr
$LN4@XMMatrixTr:
  000f8	a0 ff ff ff	 DD	 -96			; ffffffa0H
  000fc	40 00 00 00	 DD	 64			; 00000040H
  00100	00 00 00 00	 DD	 $LN3@XMMatrixTr
$LN3@XMMatrixTr:
  00104	4d		 DB	 77			; 0000004dH
  00105	00		 DB	 0
?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ENDP ; DirectX::XMMatrixTranslation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z
_TEXT	SEGMENT
tv806 = -2208						; size = 16
$T1 = -2192						; size = 64
$T2 = -2128						; size = 16
$T3 = -2112						; size = 16
$T4 = -2096						; size = 16
$T5 = -2080						; size = 16
_mResult$ = -2048					; size = 64
$T6 = -1968						; size = 16
$T7 = -1952						; size = 16
$T8 = -1936						; size = 16
_vTemp$ = -1920						; size = 16
$T9 = -1904						; size = 16
$T10 = -1888						; size = 16
$T11 = -1872						; size = 16
$T12 = -1856						; size = 16
$T13 = -1840						; size = 16
$T14 = -1824						; size = 16
$T15 = -1808						; size = 16
$T16 = -1792						; size = 16
$T17 = -1776						; size = 16
$T18 = -1760						; size = 16
_C7$ = -1744						; size = 16
$T19 = -1728						; size = 16
$T20 = -1712						; size = 16
_C5$ = -1696						; size = 16
$T21 = -1680						; size = 16
$T22 = -1664						; size = 16
_C3$ = -1648						; size = 16
$T23 = -1632						; size = 16
$T24 = -1616						; size = 16
_C1$ = -1600						; size = 16
$T25 = -1584						; size = 16
$T26 = -1568						; size = 16
$T27 = -1552						; size = 16
$T28 = -1536						; size = 16
$T29 = -1520						; size = 16
$T30 = -1504						; size = 16
$T31 = -1488						; size = 16
$T32 = -1472						; size = 16
$T33 = -1456						; size = 16
$T34 = -1440						; size = 16
$T35 = -1424						; size = 16
$T36 = -1408						; size = 16
$T37 = -1392						; size = 16
$T38 = -1376						; size = 16
$T39 = -1360						; size = 16
$T40 = -1344						; size = 16
$T41 = -1328						; size = 16
$T42 = -1312						; size = 16
$T43 = -1296						; size = 16
$T44 = -1280						; size = 16
$T45 = -1264						; size = 16
$T46 = -1248						; size = 16
$T47 = -1232						; size = 16
$T48 = -1216						; size = 16
$T49 = -1200						; size = 16
$T50 = -1184						; size = 16
$T51 = -1168						; size = 16
$T52 = -1152						; size = 16
$T53 = -1136						; size = 16
$T54 = -1120						; size = 16
$T55 = -1104						; size = 16
$T56 = -1088						; size = 16
$T57 = -1072						; size = 16
$T58 = -1056						; size = 16
$T59 = -1040						; size = 16
_C6$ = -1024						; size = 16
$T60 = -1008						; size = 16
_C4$ = -992						; size = 16
$T61 = -976						; size = 16
_C2$ = -960						; size = 16
$T62 = -944						; size = 16
_C0$ = -928						; size = 16
$T63 = -912						; size = 16
$T64 = -896						; size = 16
_V03$ = -880						; size = 16
$T65 = -864						; size = 16
$T66 = -848						; size = 16
$T67 = -832						; size = 16
_V13$ = -816						; size = 16
$T68 = -800						; size = 16
$T69 = -784						; size = 16
$T70 = -768						; size = 16
$T71 = -752						; size = 16
$T72 = -736						; size = 16
$T73 = -720						; size = 16
$T74 = -704						; size = 16
$T75 = -688						; size = 16
$T76 = -672						; size = 16
$T77 = -656						; size = 16
$T78 = -640						; size = 16
$T79 = -624						; size = 16
$T80 = -608						; size = 16
$T81 = -592						; size = 16
$T82 = -576						; size = 16
$T83 = -560						; size = 16
$T84 = -544						; size = 16
$T85 = -528						; size = 16
_D2$ = -512						; size = 16
$T86 = -496						; size = 16
_D1$ = -480						; size = 16
$T87 = -464						; size = 16
_D0$ = -448						; size = 16
$T88 = -432						; size = 16
_V12$ = -416						; size = 16
$T89 = -400						; size = 16
_V02$ = -384						; size = 16
$T90 = -368						; size = 16
_V11$ = -352						; size = 16
$T91 = -336						; size = 16
_V01$ = -320						; size = 16
$T92 = -304						; size = 16
_V10$ = -288						; size = 16
$T93 = -272						; size = 16
_V00$ = -256						; size = 16
$T94 = -240						; size = 64
_MT$ = -160						; size = 64
_M$ = -80						; size = 64
_pDeterminant$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z PROC ; DirectX::XMMatrixInverse, COMDAT
; _pDeterminant$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 611
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec a8 08 00
	00		 sub	 esp, 2216		; 000008a8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 58 f7 ff
	ff		 lea	 edi, DWORD PTR [ebp-2216]
  00025	b9 2a 02 00 00	 mov	 ecx, 554		; 0000022aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	0f 29 5d e0	 movaps	 XMMWORD PTR _M$[ebp+48], xmm3
  00040	0f 29 55 d0	 movaps	 XMMWORD PTR _M$[ebp+32], xmm2
  00044	0f 29 4d c0	 movaps	 XMMWORD PTR _M$[ebp+16], xmm1
  00048	0f 29 45 b0	 movaps	 XMMWORD PTR _M$[ebp], xmm0
  0004c	89 4d f8	 mov	 DWORD PTR _pDeterminant$[ebp], ecx
; Line 706
  0004f	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _M$[ebp]
  00053	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _M$[ebp+16]
  00057	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _M$[ebp+32]
  0005b	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _M$[ebp+48]
  0005f	e8 00 00 00 00	 call	 ?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z ; DirectX::XMMatrixTranspose
  00064	0f 29 9d a0 f7
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  0006b	0f 29 95 90 f7
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  00072	0f 29 8d 80 f7
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  00079	0f 29 85 70 f7
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00080	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00085	8d b5 70 f7 ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  0008b	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR $T94[ebp]
  00091	f3 a5		 rep movsd
  00093	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00098	8d b5 10 ff ff
	ff		 lea	 esi, DWORD PTR $T94[ebp]
  0009e	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR _MT$[ebp]
  000a4	f3 a5		 rep movsd
; Line 707
  000a6	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000ab	d1 e0		 shl	 eax, 1
  000ad	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000b2	d1 e1		 shl	 ecx, 1
  000b4	0f 10 84 0d 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+ecx]
  000bc	0f c6 84 05 60
	ff ff ff 50	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 80 ; 00000050H
  000c5	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T93[ebp], xmm0
  000cc	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93[ebp]
  000d3	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 708
  000da	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000df	6b c2 03	 imul	 eax, edx, 3
  000e2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000e7	6b d1 03	 imul	 edx, ecx, 3
  000ea	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  000f2	0f c6 84 05 60
	ff ff ff ee	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 238 ; 000000eeH
  000fb	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T92[ebp], xmm0
  00102	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T92[ebp]
  00109	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _V10$[ebp], xmm0
; Line 709
  00110	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00115	6b c8 00	 imul	 ecx, eax, 0
  00118	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0011d	6b c2 00	 imul	 eax, edx, 0
  00120	0f 10 84 05 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+eax]
  00128	0f c6 84 0d 60
	ff ff ff 50	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 80 ; 00000050H
  00131	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T91[ebp], xmm0
  00138	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91[ebp]
  0013f	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 710
  00146	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0014b	c1 e1 00	 shl	 ecx, 0
  0014e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00153	c1 e2 00	 shl	 edx, 0
  00156	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  0015e	0f c6 84 0d 60
	ff ff ff ee	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 238 ; 000000eeH
  00167	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T90[ebp], xmm0
  0016e	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T90[ebp]
  00175	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 711
  0017c	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00181	6b c8 00	 imul	 ecx, eax, 0
  00184	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00189	d1 e2		 shl	 edx, 1
  0018b	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  00193	0f c6 84 0d 60
	ff ff ff 88	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 136 ; 00000088H
  0019c	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T89[ebp], xmm0
  001a3	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T89[ebp]
  001aa	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 712
  001b1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  001b6	c1 e0 00	 shl	 eax, 0
  001b9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001be	6b d1 03	 imul	 edx, ecx, 3
  001c1	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  001c9	0f c6 84 05 60
	ff ff ff dd	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 221 ; 000000ddH
  001d2	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T88[ebp], xmm0
  001d9	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T88[ebp]
  001e0	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _V12$[ebp], xmm0
; Line 714
  001e7	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V00$[ebp]
  001ee	0f 59 85 e0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V10$[ebp]
  001f5	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T87[ebp], xmm0
  001fc	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T87[ebp]
  00203	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _D0$[ebp], xmm0
; Line 715
  0020a	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V01$[ebp]
  00211	0f 59 85 a0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V11$[ebp]
  00218	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T86[ebp], xmm0
  0021f	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T86[ebp]
  00226	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _D1$[ebp], xmm0
; Line 716
  0022d	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V02$[ebp]
  00234	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V12$[ebp]
  0023b	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T85[ebp], xmm0
  00242	0f 28 85 f0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T85[ebp]
  00249	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _D2$[ebp], xmm0
; Line 718
  00250	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00255	d1 e0		 shl	 eax, 1
  00257	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0025c	d1 e1		 shl	 ecx, 1
  0025e	0f 10 84 0d 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+ecx]
  00266	0f c6 84 05 60
	ff ff ff ee	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 238 ; 000000eeH
  0026f	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T84[ebp], xmm0
  00276	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T84[ebp]
  0027d	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 719
  00284	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00289	6b c2 03	 imul	 eax, edx, 3
  0028c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00291	6b d1 03	 imul	 edx, ecx, 3
  00294	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  0029c	0f c6 84 05 60
	ff ff ff 50	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 80 ; 00000050H
  002a5	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T83[ebp], xmm0
  002ac	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T83[ebp]
  002b3	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _V10$[ebp], xmm0
; Line 720
  002ba	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  002bf	6b c8 00	 imul	 ecx, eax, 0
  002c2	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002c7	6b c2 00	 imul	 eax, edx, 0
  002ca	0f 10 84 05 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+eax]
  002d2	0f c6 84 0d 60
	ff ff ff ee	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 238 ; 000000eeH
  002db	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T82[ebp], xmm0
  002e2	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T82[ebp]
  002e9	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 721
  002f0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002f5	c1 e1 00	 shl	 ecx, 0
  002f8	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002fd	c1 e2 00	 shl	 edx, 0
  00300	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  00308	0f c6 84 0d 60
	ff ff ff 50	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 80 ; 00000050H
  00311	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T81[ebp], xmm0
  00318	0f 28 85 b0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T81[ebp]
  0031f	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 722
  00326	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0032b	6b c8 00	 imul	 ecx, eax, 0
  0032e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00333	d1 e2		 shl	 edx, 1
  00335	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  0033d	0f c6 84 0d 60
	ff ff ff dd	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 221 ; 000000ddH
  00346	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T80[ebp], xmm0
  0034d	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T80[ebp]
  00354	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 723
  0035b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00360	c1 e0 00	 shl	 eax, 0
  00363	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00368	6b d1 03	 imul	 edx, ecx, 3
  0036b	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  00373	0f c6 84 05 60
	ff ff ff 88	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 136 ; 00000088H
  0037c	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T79[ebp], xmm0
  00383	0f 28 85 90 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T79[ebp]
  0038a	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _V12$[ebp], xmm0
; Line 725
  00391	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V00$[ebp]
  00398	0f 59 85 e0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V10$[ebp]
  0039f	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T78[ebp], xmm0
  003a6	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T78[ebp]
  003ad	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 726
  003b4	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V01$[ebp]
  003bb	0f 59 85 a0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V11$[ebp]
  003c2	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T77[ebp], xmm0
  003c9	0f 28 85 70 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T77[ebp]
  003d0	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 727
  003d7	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V02$[ebp]
  003de	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V12$[ebp]
  003e5	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T76[ebp], xmm0
  003ec	0f 28 85 60 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T76[ebp]
  003f3	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 728
  003fa	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  00401	0f 5c 85 00 ff
	ff ff		 subps	 xmm0, XMMWORD PTR _V00$[ebp]
  00408	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR $T75[ebp], xmm0
  0040f	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T75[ebp]
  00416	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR _D0$[ebp], xmm0
; Line 729
  0041d	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  00424	0f 5c 85 c0 fe
	ff ff		 subps	 xmm0, XMMWORD PTR _V01$[ebp]
  0042b	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T74[ebp], xmm0
  00432	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T74[ebp]
  00439	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR _D1$[ebp], xmm0
; Line 730
  00440	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D2$[ebp]
  00447	0f 5c 85 80 fe
	ff ff		 subps	 xmm0, XMMWORD PTR _V02$[ebp]
  0044e	0f 29 85 30 fd
	ff ff		 movaps	 XMMWORD PTR $T73[ebp], xmm0
  00455	0f 28 85 30 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T73[ebp]
  0045c	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR _D2$[ebp], xmm0
; Line 732
  00463	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  0046a	0f c6 85 00 fe
	ff ff 5d	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 93 ; 0000005dH
  00472	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR $T72[ebp], xmm0
  00479	0f 28 85 20 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T72[ebp]
  00480	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 733
  00487	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0048c	c1 e0 00	 shl	 eax, 0
  0048f	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00494	c1 e1 00	 shl	 ecx, 0
  00497	0f 10 84 0d 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+ecx]
  0049f	0f c6 84 05 60
	ff ff ff 49	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 73 ; 00000049H
  004a8	0f 29 85 10 fd
	ff ff		 movaps	 XMMWORD PTR $T71[ebp], xmm0
  004af	0f 28 85 10 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T71[ebp]
  004b6	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 734
  004bd	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V11$[ebp]
  004c4	0f c6 85 40 fe
	ff ff 32	 shufps	 xmm0, XMMWORD PTR _D0$[ebp], 50 ; 00000032H
  004cc	0f 29 85 00 fd
	ff ff		 movaps	 XMMWORD PTR $T70[ebp], xmm0
  004d3	0f 28 85 00 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T70[ebp]
  004da	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _V10$[ebp], xmm0
; Line 735
  004e1	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  004e6	6b c2 00	 imul	 eax, edx, 0
  004e9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  004ee	6b d1 00	 imul	 edx, ecx, 0
  004f1	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  004f9	0f c6 84 05 60
	ff ff ff 12	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 18 ; 00000012H
  00502	0f 29 85 f0 fc
	ff ff		 movaps	 XMMWORD PTR $T69[ebp], xmm0
  00509	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T69[ebp]
  00510	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 736
  00517	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V11$[ebp]
  0051e	0f c6 85 40 fe
	ff ff 99	 shufps	 xmm0, XMMWORD PTR _D0$[ebp], 153 ; 00000099H
  00526	0f 29 85 e0 fc
	ff ff		 movaps	 XMMWORD PTR $T68[ebp], xmm0
  0052d	0f 28 85 e0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T68[ebp]
  00534	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 738
  0053b	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  00542	0f c6 85 00 fe
	ff ff fd	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 253 ; 000000fdH
  0054a	0f 29 85 c0 fc
	ff ff		 movaps	 XMMWORD PTR $T67[ebp], xmm0
  00551	0f 28 85 c0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T67[ebp]
  00558	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _V13$[ebp], xmm0
; Line 739
  0055f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00564	6b c8 03	 imul	 ecx, eax, 3
  00567	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0056c	6b c2 03	 imul	 eax, edx, 3
  0056f	0f 10 84 05 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+eax]
  00577	0f c6 84 0d 60
	ff ff ff 49	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 73 ; 00000049H
  00580	0f 29 85 b0 fc
	ff ff		 movaps	 XMMWORD PTR $T66[ebp], xmm0
  00587	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T66[ebp]
  0058e	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 740
  00595	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _V13$[ebp]
  0059c	0f c6 85 20 fe
	ff ff 32	 shufps	 xmm0, XMMWORD PTR _D1$[ebp], 50 ; 00000032H
  005a4	0f 29 85 a0 fc
	ff ff		 movaps	 XMMWORD PTR $T65[ebp], xmm0
  005ab	0f 28 85 a0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T65[ebp]
  005b2	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _V12$[ebp], xmm0
; Line 741
  005b9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  005be	d1 e1		 shl	 ecx, 1
  005c0	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  005c5	d1 e2		 shl	 edx, 1
  005c7	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  005cf	0f c6 84 0d 60
	ff ff ff 12	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 18 ; 00000012H
  005d8	0f 29 85 80 fc
	ff ff		 movaps	 XMMWORD PTR $T64[ebp], xmm0
  005df	0f 28 85 80 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T64[ebp]
  005e6	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _V03$[ebp], xmm0
; Line 742
  005ed	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _V13$[ebp]
  005f4	0f c6 85 20 fe
	ff ff 99	 shufps	 xmm0, XMMWORD PTR _D1$[ebp], 153 ; 00000099H
  005fc	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR $T63[ebp], xmm0
  00603	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T63[ebp]
  0060a	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _V13$[ebp], xmm0
; Line 744
  00611	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V00$[ebp]
  00618	0f 59 85 e0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V10$[ebp]
  0061f	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR $T62[ebp], xmm0
  00626	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T62[ebp]
  0062d	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR _C0$[ebp], xmm0
; Line 745
  00634	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V01$[ebp]
  0063b	0f 59 85 a0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V11$[ebp]
  00642	0f 29 85 30 fc
	ff ff		 movaps	 XMMWORD PTR $T61[ebp], xmm0
  00649	0f 28 85 30 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T61[ebp]
  00650	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR _C2$[ebp], xmm0
; Line 746
  00657	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V02$[ebp]
  0065e	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V12$[ebp]
  00665	0f 29 85 10 fc
	ff ff		 movaps	 XMMWORD PTR $T60[ebp], xmm0
  0066c	0f 28 85 10 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T60[ebp]
  00673	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR _C4$[ebp], xmm0
; Line 747
  0067a	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _V03$[ebp]
  00681	0f 59 85 d0 fc
	ff ff		 mulps	 xmm0, XMMWORD PTR _V13$[ebp]
  00688	0f 29 85 f0 fb
	ff ff		 movaps	 XMMWORD PTR $T59[ebp], xmm0
  0068f	0f 28 85 f0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T59[ebp]
  00696	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR _C6$[ebp], xmm0
; Line 750
  0069d	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  006a4	0f c6 85 00 fe
	ff ff 04	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 4
  006ac	0f 29 85 e0 fb
	ff ff		 movaps	 XMMWORD PTR $T58[ebp], xmm0
  006b3	0f 28 85 e0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T58[ebp]
  006ba	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 751
  006c1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  006c6	c1 e0 00	 shl	 eax, 0
  006c9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  006ce	c1 e1 00	 shl	 ecx, 0
  006d1	0f 10 84 0d 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+ecx]
  006d9	0f c6 84 05 60
	ff ff ff 9e	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 158 ; 0000009eH
  006e2	0f 29 85 d0 fb
	ff ff		 movaps	 XMMWORD PTR $T57[ebp], xmm0
  006e9	0f 28 85 d0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T57[ebp]
  006f0	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 752
  006f7	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  006fe	0f c6 85 a0 fe
	ff ff 93	 shufps	 xmm0, XMMWORD PTR _V11$[ebp], 147 ; 00000093H
  00706	0f 29 85 c0 fb
	ff ff		 movaps	 XMMWORD PTR $T56[ebp], xmm0
  0070d	0f 28 85 c0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T56[ebp]
  00714	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _V10$[ebp], xmm0
; Line 753
  0071b	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00720	6b c2 00	 imul	 eax, edx, 0
  00723	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00728	6b d1 00	 imul	 edx, ecx, 0
  0072b	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  00733	0f c6 84 05 60
	ff ff ff 7b	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 123 ; 0000007bH
  0073c	0f 29 85 b0 fb
	ff ff		 movaps	 XMMWORD PTR $T55[ebp], xmm0
  00743	0f 28 85 b0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T55[ebp]
  0074a	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 754
  00751	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  00758	0f c6 85 a0 fe
	ff ff 26	 shufps	 xmm0, XMMWORD PTR _V11$[ebp], 38 ; 00000026H
  00760	0f 29 85 a0 fb
	ff ff		 movaps	 XMMWORD PTR $T54[ebp], xmm0
  00767	0f 28 85 a0 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T54[ebp]
  0076e	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 756
  00775	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  0077c	0f c6 85 00 fe
	ff ff a4	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 164 ; 000000a4H
  00784	0f 29 85 90 fb
	ff ff		 movaps	 XMMWORD PTR $T53[ebp], xmm0
  0078b	0f 28 85 90 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T53[ebp]
  00792	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _V13$[ebp], xmm0
; Line 757
  00799	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0079e	6b c8 03	 imul	 ecx, eax, 3
  007a1	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  007a6	6b c2 03	 imul	 eax, edx, 3
  007a9	0f 10 84 05 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+eax]
  007b1	0f c6 84 0d 60
	ff ff ff 9e	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 158 ; 0000009eH
  007ba	0f 29 85 80 fb
	ff ff		 movaps	 XMMWORD PTR $T52[ebp], xmm0
  007c1	0f 28 85 80 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T52[ebp]
  007c8	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 758
  007cf	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  007d6	0f c6 85 d0 fc
	ff ff 93	 shufps	 xmm0, XMMWORD PTR _V13$[ebp], 147 ; 00000093H
  007de	0f 29 85 70 fb
	ff ff		 movaps	 XMMWORD PTR $T51[ebp], xmm0
  007e5	0f 28 85 70 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T51[ebp]
  007ec	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _V12$[ebp], xmm0
; Line 759
  007f3	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  007f8	d1 e1		 shl	 ecx, 1
  007fa	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  007ff	d1 e2		 shl	 edx, 1
  00801	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  00809	0f c6 84 0d 60
	ff ff ff 7b	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 123 ; 0000007bH
  00812	0f 29 85 60 fb
	ff ff		 movaps	 XMMWORD PTR $T50[ebp], xmm0
  00819	0f 28 85 60 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T50[ebp]
  00820	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _V03$[ebp], xmm0
; Line 760
  00827	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  0082e	0f c6 85 d0 fc
	ff ff 26	 shufps	 xmm0, XMMWORD PTR _V13$[ebp], 38 ; 00000026H
  00836	0f 29 85 50 fb
	ff ff		 movaps	 XMMWORD PTR $T49[ebp], xmm0
  0083d	0f 28 85 50 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T49[ebp]
  00844	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _V13$[ebp], xmm0
; Line 762
  0084b	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V00$[ebp]
  00852	0f 59 85 e0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V10$[ebp]
  00859	0f 29 85 40 fb
	ff ff		 movaps	 XMMWORD PTR $T48[ebp], xmm0
  00860	0f 28 85 40 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T48[ebp]
  00867	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 763
  0086e	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V01$[ebp]
  00875	0f 59 85 a0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V11$[ebp]
  0087c	0f 29 85 30 fb
	ff ff		 movaps	 XMMWORD PTR $T47[ebp], xmm0
  00883	0f 28 85 30 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T47[ebp]
  0088a	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 764
  00891	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V02$[ebp]
  00898	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V12$[ebp]
  0089f	0f 29 85 20 fb
	ff ff		 movaps	 XMMWORD PTR $T46[ebp], xmm0
  008a6	0f 28 85 20 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T46[ebp]
  008ad	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 765
  008b4	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _V03$[ebp]
  008bb	0f 59 85 d0 fc
	ff ff		 mulps	 xmm0, XMMWORD PTR _V13$[ebp]
  008c2	0f 29 85 10 fb
	ff ff		 movaps	 XMMWORD PTR $T45[ebp], xmm0
  008c9	0f 28 85 10 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T45[ebp]
  008d0	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _V03$[ebp], xmm0
; Line 766
  008d7	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C0$[ebp]
  008de	0f 5c 85 00 ff
	ff ff		 subps	 xmm0, XMMWORD PTR _V00$[ebp]
  008e5	0f 29 85 00 fb
	ff ff		 movaps	 XMMWORD PTR $T44[ebp], xmm0
  008ec	0f 28 85 00 fb
	ff ff		 movaps	 xmm0, XMMWORD PTR $T44[ebp]
  008f3	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR _C0$[ebp], xmm0
; Line 767
  008fa	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C2$[ebp]
  00901	0f 5c 85 c0 fe
	ff ff		 subps	 xmm0, XMMWORD PTR _V01$[ebp]
  00908	0f 29 85 f0 fa
	ff ff		 movaps	 XMMWORD PTR $T43[ebp], xmm0
  0090f	0f 28 85 f0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T43[ebp]
  00916	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR _C2$[ebp], xmm0
; Line 768
  0091d	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C4$[ebp]
  00924	0f 5c 85 80 fe
	ff ff		 subps	 xmm0, XMMWORD PTR _V02$[ebp]
  0092b	0f 29 85 e0 fa
	ff ff		 movaps	 XMMWORD PTR $T42[ebp], xmm0
  00932	0f 28 85 e0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T42[ebp]
  00939	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR _C4$[ebp], xmm0
; Line 769
  00940	0f 28 85 00 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C6$[ebp]
  00947	0f 5c 85 90 fc
	ff ff		 subps	 xmm0, XMMWORD PTR _V03$[ebp]
  0094e	0f 29 85 d0 fa
	ff ff		 movaps	 XMMWORD PTR $T41[ebp], xmm0
  00955	0f 28 85 d0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T41[ebp]
  0095c	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR _C6$[ebp], xmm0
; Line 771
  00963	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00968	c1 e0 00	 shl	 eax, 0
  0096b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00970	c1 e1 00	 shl	 ecx, 0
  00973	0f 10 84 0d 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+ecx]
  0097b	0f c6 84 05 60
	ff ff ff 33	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 51 ; 00000033H
  00984	0f 29 85 c0 fa
	ff ff		 movaps	 XMMWORD PTR $T40[ebp], xmm0
  0098b	0f 28 85 c0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T40[ebp]
  00992	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 773
  00999	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  009a0	0f c6 85 00 fe
	ff ff 4a	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 74 ; 0000004aH
  009a8	0f 29 85 b0 fa
	ff ff		 movaps	 XMMWORD PTR $T39[ebp], xmm0
  009af	0f 28 85 b0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T39[ebp]
  009b6	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _V10$[ebp], xmm0
; Line 774
  009bd	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V10$[ebp]
  009c4	0f c6 85 e0 fe
	ff ff 2c	 shufps	 xmm0, XMMWORD PTR _V10$[ebp], 44 ; 0000002cH
  009cc	0f 29 85 a0 fa
	ff ff		 movaps	 XMMWORD PTR $T38[ebp], xmm0
  009d3	0f 28 85 a0 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T38[ebp]
  009da	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR _V10$[ebp], xmm0
; Line 775
  009e1	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  009e6	6b c2 00	 imul	 eax, edx, 0
  009e9	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  009ee	6b d1 00	 imul	 edx, ecx, 0
  009f1	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  009f9	0f c6 84 05 60
	ff ff ff 8d	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+eax], 141 ; 0000008dH
  00a02	0f 29 85 90 fa
	ff ff		 movaps	 XMMWORD PTR $T37[ebp], xmm0
  00a09	0f 28 85 90 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T37[ebp]
  00a10	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 777
  00a17	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D0$[ebp]
  00a1e	0f c6 85 00 fe
	ff ff 4c	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 76 ; 0000004cH
  00a26	0f 29 85 80 fa
	ff ff		 movaps	 XMMWORD PTR $T36[ebp], xmm0
  00a2d	0f 28 85 80 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T36[ebp]
  00a34	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 778
  00a3b	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V11$[ebp]
  00a42	0f c6 85 a0 fe
	ff ff 93	 shufps	 xmm0, XMMWORD PTR _V11$[ebp], 147 ; 00000093H
  00a4a	0f 29 85 70 fa
	ff ff		 movaps	 XMMWORD PTR $T35[ebp], xmm0
  00a51	0f 28 85 70 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T35[ebp]
  00a58	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR _V11$[ebp], xmm0
; Line 779
  00a5f	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00a64	6b c8 03	 imul	 ecx, eax, 3
  00a67	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00a6c	6b c2 03	 imul	 eax, edx, 3
  00a6f	0f 10 84 05 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+eax]
  00a77	0f c6 84 0d 60
	ff ff ff 33	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 51 ; 00000033H
  00a80	0f 29 85 60 fa
	ff ff		 movaps	 XMMWORD PTR $T34[ebp], xmm0
  00a87	0f 28 85 60 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T34[ebp]
  00a8e	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 781
  00a95	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  00a9c	0f c6 85 00 fe
	ff ff ea	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 234 ; 000000eaH
  00aa4	0f 29 85 50 fa
	ff ff		 movaps	 XMMWORD PTR $T33[ebp], xmm0
  00aab	0f 28 85 50 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T33[ebp]
  00ab2	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _V12$[ebp], xmm0
; Line 782
  00ab9	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V12$[ebp]
  00ac0	0f c6 85 60 fe
	ff ff 2c	 shufps	 xmm0, XMMWORD PTR _V12$[ebp], 44 ; 0000002cH
  00ac8	0f 29 85 40 fa
	ff ff		 movaps	 XMMWORD PTR $T32[ebp], xmm0
  00acf	0f 28 85 40 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T32[ebp]
  00ad6	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR _V12$[ebp], xmm0
; Line 783
  00add	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00ae2	d1 e1		 shl	 ecx, 1
  00ae4	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00ae9	d1 e2		 shl	 edx, 1
  00aeb	0f 10 84 15 60
	ff ff ff	 movups	 xmm0, XMMWORD PTR _MT$[ebp+edx]
  00af3	0f c6 84 0d 60
	ff ff ff 8d	 shufps	 xmm0, XMMWORD PTR _MT$[ebp+ecx], 141 ; 0000008dH
  00afc	0f 29 85 30 fa
	ff ff		 movaps	 XMMWORD PTR $T31[ebp], xmm0
  00b03	0f 28 85 30 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T31[ebp]
  00b0a	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _V03$[ebp], xmm0
; Line 785
  00b11	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _D1$[ebp]
  00b18	0f c6 85 00 fe
	ff ff ec	 shufps	 xmm0, XMMWORD PTR _D2$[ebp], 236 ; 000000ecH
  00b20	0f 29 85 20 fa
	ff ff		 movaps	 XMMWORD PTR $T30[ebp], xmm0
  00b27	0f 28 85 20 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T30[ebp]
  00b2e	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _V13$[ebp], xmm0
; Line 786
  00b35	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _V13$[ebp]
  00b3c	0f c6 85 d0 fc
	ff ff 93	 shufps	 xmm0, XMMWORD PTR _V13$[ebp], 147 ; 00000093H
  00b44	0f 29 85 10 fa
	ff ff		 movaps	 XMMWORD PTR $T29[ebp], xmm0
  00b4b	0f 28 85 10 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T29[ebp]
  00b52	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR _V13$[ebp], xmm0
; Line 788
  00b59	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _V00$[ebp]
  00b60	0f 59 85 e0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V10$[ebp]
  00b67	0f 29 85 00 fa
	ff ff		 movaps	 XMMWORD PTR $T28[ebp], xmm0
  00b6e	0f 28 85 00 fa
	ff ff		 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  00b75	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _V00$[ebp], xmm0
; Line 789
  00b7c	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V01$[ebp]
  00b83	0f 59 85 a0 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V11$[ebp]
  00b8a	0f 29 85 f0 f9
	ff ff		 movaps	 XMMWORD PTR $T27[ebp], xmm0
  00b91	0f 28 85 f0 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T27[ebp]
  00b98	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _V01$[ebp], xmm0
; Line 790
  00b9f	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _V02$[ebp]
  00ba6	0f 59 85 60 fe
	ff ff		 mulps	 xmm0, XMMWORD PTR _V12$[ebp]
  00bad	0f 29 85 e0 f9
	ff ff		 movaps	 XMMWORD PTR $T26[ebp], xmm0
  00bb4	0f 28 85 e0 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  00bbb	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR _V02$[ebp], xmm0
; Line 791
  00bc2	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _V03$[ebp]
  00bc9	0f 59 85 d0 fc
	ff ff		 mulps	 xmm0, XMMWORD PTR _V13$[ebp]
  00bd0	0f 29 85 d0 f9
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm0
  00bd7	0f 28 85 d0 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  00bde	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR _V03$[ebp], xmm0
; Line 792
  00be5	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C0$[ebp]
  00bec	0f 5c 85 00 ff
	ff ff		 subps	 xmm0, XMMWORD PTR _V00$[ebp]
  00bf3	0f 29 85 b0 f9
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  00bfa	0f 28 85 b0 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  00c01	0f 29 85 c0 f9
	ff ff		 movaps	 XMMWORD PTR _C1$[ebp], xmm0
; Line 793
  00c08	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C0$[ebp]
  00c0f	0f 58 85 00 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _V00$[ebp]
  00c16	0f 29 85 a0 f9
	ff ff		 movaps	 XMMWORD PTR $T23[ebp], xmm0
  00c1d	0f 28 85 a0 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T23[ebp]
  00c24	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR _C0$[ebp], xmm0
; Line 794
  00c2b	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C2$[ebp]
  00c32	0f 58 85 c0 fe
	ff ff		 addps	 xmm0, XMMWORD PTR _V01$[ebp]
  00c39	0f 29 85 80 f9
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  00c40	0f 28 85 80 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  00c47	0f 29 85 90 f9
	ff ff		 movaps	 XMMWORD PTR _C3$[ebp], xmm0
; Line 795
  00c4e	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C2$[ebp]
  00c55	0f 5c 85 c0 fe
	ff ff		 subps	 xmm0, XMMWORD PTR _V01$[ebp]
  00c5c	0f 29 85 70 f9
	ff ff		 movaps	 XMMWORD PTR $T21[ebp], xmm0
  00c63	0f 28 85 70 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  00c6a	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR _C2$[ebp], xmm0
; Line 796
  00c71	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C4$[ebp]
  00c78	0f 5c 85 80 fe
	ff ff		 subps	 xmm0, XMMWORD PTR _V02$[ebp]
  00c7f	0f 29 85 50 f9
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  00c86	0f 28 85 50 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  00c8d	0f 29 85 60 f9
	ff ff		 movaps	 XMMWORD PTR _C5$[ebp], xmm0
; Line 797
  00c94	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C4$[ebp]
  00c9b	0f 58 85 80 fe
	ff ff		 addps	 xmm0, XMMWORD PTR _V02$[ebp]
  00ca2	0f 29 85 40 f9
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  00ca9	0f 28 85 40 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  00cb0	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR _C4$[ebp], xmm0
; Line 798
  00cb7	0f 28 85 00 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C6$[ebp]
  00cbe	0f 58 85 90 fc
	ff ff		 addps	 xmm0, XMMWORD PTR _V03$[ebp]
  00cc5	0f 29 85 20 f9
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  00ccc	0f 28 85 20 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  00cd3	0f 29 85 30 f9
	ff ff		 movaps	 XMMWORD PTR _C7$[ebp], xmm0
; Line 799
  00cda	0f 28 85 00 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C6$[ebp]
  00ce1	0f 5c 85 90 fc
	ff ff		 subps	 xmm0, XMMWORD PTR _V03$[ebp]
  00ce8	0f 29 85 10 f9
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00cef	0f 28 85 10 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  00cf6	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR _C6$[ebp], xmm0
; Line 801
  00cfd	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C0$[ebp]
  00d04	0f c6 85 c0 f9
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C1$[ebp], 216 ; 000000d8H
  00d0c	0f 29 85 00 f9
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  00d13	0f 28 85 00 f9
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  00d1a	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR _C0$[ebp], xmm0
; Line 802
  00d21	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C2$[ebp]
  00d28	0f c6 85 90 f9
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C3$[ebp], 216 ; 000000d8H
  00d30	0f 29 85 f0 f8
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  00d37	0f 28 85 f0 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  00d3e	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR _C2$[ebp], xmm0
; Line 803
  00d45	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C4$[ebp]
  00d4c	0f c6 85 60 f9
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C5$[ebp], 216 ; 000000d8H
  00d54	0f 29 85 e0 f8
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00d5b	0f 28 85 e0 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00d62	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR _C4$[ebp], xmm0
; Line 804
  00d69	0f 28 85 00 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C6$[ebp]
  00d70	0f c6 85 30 f9
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C7$[ebp], 216 ; 000000d8H
  00d78	0f 29 85 d0 f8
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00d7f	0f 28 85 d0 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  00d86	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR _C6$[ebp], xmm0
; Line 805
  00d8d	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C0$[ebp]
  00d94	0f c6 85 60 fc
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C0$[ebp], 216 ; 000000d8H
  00d9c	0f 29 85 c0 f8
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00da3	0f 28 85 c0 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  00daa	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR _C0$[ebp], xmm0
; Line 806
  00db1	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C2$[ebp]
  00db8	0f c6 85 40 fc
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C2$[ebp], 216 ; 000000d8H
  00dc0	0f 29 85 b0 f8
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  00dc7	0f 28 85 b0 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  00dce	0f 29 85 40 fc
	ff ff		 movaps	 XMMWORD PTR _C2$[ebp], xmm0
; Line 807
  00dd5	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C4$[ebp]
  00ddc	0f c6 85 20 fc
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C4$[ebp], 216 ; 000000d8H
  00de4	0f 29 85 a0 f8
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00deb	0f 28 85 a0 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  00df2	0f 29 85 20 fc
	ff ff		 movaps	 XMMWORD PTR _C4$[ebp], xmm0
; Line 808
  00df9	0f 28 85 00 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C6$[ebp]
  00e00	0f c6 85 00 fc
	ff ff d8	 shufps	 xmm0, XMMWORD PTR _C6$[ebp], 216 ; 000000d8H
  00e08	0f 29 85 90 f8
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00e0f	0f 28 85 90 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00e16	0f 29 85 00 fc
	ff ff		 movaps	 XMMWORD PTR _C6$[ebp], xmm0
; Line 810
  00e1d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00e22	6b c8 00	 imul	 ecx, eax, 0
  00e25	0f 10 8c 0d 60
	ff ff ff	 movups	 xmm1, XMMWORD PTR _MT$[ebp+ecx]
  00e2d	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C0$[ebp]
  00e34	e8 00 00 00 00	 call	 ?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector4Dot
  00e39	0f 29 85 70 f8
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  00e40	0f 28 85 70 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00e47	0f 29 85 80 f8
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 811
  00e4e	83 7d f8 00	 cmp	 DWORD PTR _pDeterminant$[ebp], 0
  00e52	74 0d		 je	 SHORT $LN1@XMMatrixIn
; Line 812
  00e54	8b 55 f8	 mov	 edx, DWORD PTR _pDeterminant$[ebp]
  00e57	0f 10 85 80 f8
	ff ff		 movups	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00e5e	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
$LN1@XMMatrixIn:
; Line 813
  00e61	0f 28 85 80 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00e68	8d 85 60 f8 ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00e6e	50		 push	 eax
  00e6f	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
  00e74	0f 29 85 60 f7
	ff ff		 movaps	 XMMWORD PTR tv806[ebp], xmm0
  00e7b	e8 00 00 00 00	 call	 ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
  00e80	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00e83	0f 28 8d 60 f7
	ff ff		 movaps	 xmm1, XMMWORD PTR tv806[ebp]
  00e8a	0f 5e c1	 divps	 xmm0, xmm1
  00e8d	0f 29 85 50 f8
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00e94	0f 28 85 50 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  00e9b	0f 29 85 80 f8
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 814
  00ea2	8d 8d 00 f8 ff
	ff		 lea	 ecx, DWORD PTR _mResult$[ebp]
  00ea8	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 815
  00ead	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C0$[ebp]
  00eb4	0f 59 85 80 f8
	ff ff		 mulps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00ebb	0f 29 85 e0 f7
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00ec2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00ec7	6b d1 00	 imul	 edx, ecx, 0
  00eca	0f 10 85 e0 f7
	ff ff		 movups	 xmm0, XMMWORD PTR $T5[ebp]
  00ed1	0f 11 84 15 00
	f8 ff ff	 movups	 XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 816
  00ed9	0f 28 85 40 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C2$[ebp]
  00ee0	0f 59 85 80 f8
	ff ff		 mulps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00ee7	0f 29 85 d0 f7
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00eee	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00ef3	c1 e0 00	 shl	 eax, 0
  00ef6	0f 10 85 d0 f7
	ff ff		 movups	 xmm0, XMMWORD PTR $T4[ebp]
  00efd	0f 11 84 05 00
	f8 ff ff	 movups	 XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 817
  00f05	0f 28 85 20 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C4$[ebp]
  00f0c	0f 59 85 80 f8
	ff ff		 mulps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00f13	0f 29 85 c0 f7
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00f1a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00f1f	d1 e1		 shl	 ecx, 1
  00f21	0f 10 85 c0 f7
	ff ff		 movups	 xmm0, XMMWORD PTR $T3[ebp]
  00f28	0f 11 84 0d 00
	f8 ff ff	 movups	 XMMWORD PTR _mResult$[ebp+ecx], xmm0
; Line 818
  00f30	0f 28 85 00 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR _C6$[ebp]
  00f37	0f 59 85 80 f8
	ff ff		 mulps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00f3e	0f 29 85 b0 f7
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00f45	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00f4a	6b c2 03	 imul	 eax, edx, 3
  00f4d	0f 10 85 b0 f7
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  00f54	0f 11 84 05 00
	f8 ff ff	 movups	 XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 819
  00f5c	0f 28 85 00 f8
	ff ff		 movaps	 xmm0, XMMWORD PTR _mResult$[ebp]
  00f63	0f 28 8d 10 f8
	ff ff		 movaps	 xmm1, XMMWORD PTR _mResult$[ebp+16]
  00f6a	0f 28 95 20 f8
	ff ff		 movaps	 xmm2, XMMWORD PTR _mResult$[ebp+32]
  00f71	0f 28 9d 30 f8
	ff ff		 movaps	 xmm3, XMMWORD PTR _mResult$[ebp+48]
; Line 822
  00f78	52		 push	 edx
  00f79	8b cd		 mov	 ecx, ebp
  00f7b	50		 push	 eax
  00f7c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@XMMatrixIn
  00f82	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00f87	58		 pop	 eax
  00f88	5a		 pop	 edx
  00f89	5f		 pop	 edi
  00f8a	5e		 pop	 esi
  00f8b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00f8e	33 cd		 xor	 ecx, ebp
  00f90	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00f95	8b e5		 mov	 esp, ebp
  00f97	5d		 pop	 ebp
  00f98	8b e3		 mov	 esp, ebx
  00f9a	5b		 pop	 ebx
  00f9b	c3		 ret	 0
$LN8@XMMatrixIn:
  00f9c	03 00 00 00	 DD	 3
  00fa0	00 00 00 00	 DD	 $LN7@XMMatrixIn
$LN7@XMMatrixIn:
  00fa4	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00fa8	40 00 00 00	 DD	 64			; 00000040H
  00fac	00 00 00 00	 DD	 $LN4@XMMatrixIn
  00fb0	60 ff ff ff	 DD	 -160			; ffffff60H
  00fb4	40 00 00 00	 DD	 64			; 00000040H
  00fb8	00 00 00 00	 DD	 $LN5@XMMatrixIn
  00fbc	00 f8 ff ff	 DD	 -2048			; fffff800H
  00fc0	40 00 00 00	 DD	 64			; 00000040H
  00fc4	00 00 00 00	 DD	 $LN6@XMMatrixIn
$LN6@XMMatrixIn:
  00fc8	6d		 DB	 109			; 0000006dH
  00fc9	52		 DB	 82			; 00000052H
  00fca	65		 DB	 101			; 00000065H
  00fcb	73		 DB	 115			; 00000073H
  00fcc	75		 DB	 117			; 00000075H
  00fcd	6c		 DB	 108			; 0000006cH
  00fce	74		 DB	 116			; 00000074H
  00fcf	00		 DB	 0
$LN5@XMMatrixIn:
  00fd0	4d		 DB	 77			; 0000004dH
  00fd1	54		 DB	 84			; 00000054H
  00fd2	00		 DB	 0
$LN4@XMMatrixIn:
  00fd3	4d		 DB	 77			; 0000004dH
  00fd4	00		 DB	 0
?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ENDP ; DirectX::XMMatrixInverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z
_TEXT	SEGMENT
$T1 = -384						; size = 16
$T2 = -368						; size = 16
$T3 = -352						; size = 16
$T4 = -336						; size = 16
_mResult$ = -304					; size = 64
$T5 = -224						; size = 16
_vTemp4$ = -208						; size = 16
$T6 = -192						; size = 16
_vTemp2$ = -176						; size = 16
$T7 = -160						; size = 16
_vTemp3$ = -144						; size = 16
$T8 = -128						; size = 16
_vTemp1$ = -112						; size = 16
_M$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z PROC	; DirectX::XMMatrixTranspose, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 543
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 80 01 00
	00		 sub	 esp, 384		; 00000180H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 80 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-384]
  00024	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	0f 29 5d e0	 movaps	 XMMWORD PTR _M$[ebp+48], xmm3
  0003f	0f 29 55 d0	 movaps	 XMMWORD PTR _M$[ebp+32], xmm2
  00043	0f 29 4d c0	 movaps	 XMMWORD PTR _M$[ebp+16], xmm1
  00047	0f 29 45 b0	 movaps	 XMMWORD PTR _M$[ebp], xmm0
; Line 581
  0004b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00050	c1 e0 00	 shl	 eax, 0
  00053	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00058	6b d1 00	 imul	 edx, ecx, 0
  0005b	0f 10 44 15 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+edx]
  00060	0f c6 44 05 b0
	44		 shufps	 xmm0, XMMWORD PTR _M$[ebp+eax], 68 ; 00000044H
  00066	0f 29 45 80	 movaps	 XMMWORD PTR $T8[ebp], xmm0
  0006a	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  0006e	0f 29 45 90	 movaps	 XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 583
  00072	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00077	c1 e0 00	 shl	 eax, 0
  0007a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0007f	6b d1 00	 imul	 edx, ecx, 0
  00082	0f 10 44 15 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+edx]
  00087	0f c6 44 05 b0
	ee		 shufps	 xmm0, XMMWORD PTR _M$[ebp+eax], 238 ; 000000eeH
  0008d	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00094	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0009b	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp3$[ebp], xmm0
; Line 585
  000a2	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000a7	6b c8 03	 imul	 ecx, eax, 3
  000aa	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000af	d1 e2		 shl	 edx, 1
  000b1	0f 10 44 15 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+edx]
  000b6	0f c6 44 0d b0
	44		 shufps	 xmm0, XMMWORD PTR _M$[ebp+ecx], 68 ; 00000044H
  000bc	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  000c3	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  000ca	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 587
  000d1	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000d6	6b c8 03	 imul	 ecx, eax, 3
  000d9	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000de	d1 e2		 shl	 edx, 1
  000e0	0f 10 44 15 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+edx]
  000e5	0f c6 44 0d b0
	ee		 shufps	 xmm0, XMMWORD PTR _M$[ebp+ecx], 238 ; 000000eeH
  000eb	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  000f2	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  000f9	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp4$[ebp], xmm0
; Line 588
  00100	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _mResult$[ebp]
  00106	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 591
  0010b	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vTemp1$[ebp]
  0010f	0f c6 85 50 ff
	ff ff 88	 shufps	 xmm0, XMMWORD PTR _vTemp2$[ebp], 136 ; 00000088H
  00117	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0011e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00123	6b c8 00	 imul	 ecx, eax, 0
  00126	0f 10 85 b0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T4[ebp]
  0012d	0f 11 84 0d d0
	fe ff ff	 movups	 XMMWORD PTR _mResult$[ebp+ecx], xmm0
; Line 593
  00135	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vTemp1$[ebp]
  00139	0f c6 85 50 ff
	ff ff dd	 shufps	 xmm0, XMMWORD PTR _vTemp2$[ebp], 221 ; 000000ddH
  00141	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00148	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0014d	c1 e2 00	 shl	 edx, 0
  00150	0f 10 85 a0 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T3[ebp]
  00157	0f 11 84 15 d0
	fe ff ff	 movups	 XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 595
  0015f	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vTemp3$[ebp]
  00166	0f c6 85 30 ff
	ff ff 88	 shufps	 xmm0, XMMWORD PTR _vTemp4$[ebp], 136 ; 00000088H
  0016e	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  00175	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0017a	d1 e0		 shl	 eax, 1
  0017c	0f 10 85 90 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  00183	0f 11 84 05 d0
	fe ff ff	 movups	 XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 597
  0018b	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vTemp3$[ebp]
  00192	0f c6 85 30 ff
	ff ff dd	 shufps	 xmm0, XMMWORD PTR _vTemp4$[ebp], 221 ; 000000ddH
  0019a	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  001a1	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001a6	6b d1 03	 imul	 edx, ecx, 3
  001a9	0f 10 85 80 fe
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  001b0	0f 11 84 15 d0
	fe ff ff	 movups	 XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 598
  001b8	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _mResult$[ebp]
  001bf	0f 28 8d e0 fe
	ff ff		 movaps	 xmm1, XMMWORD PTR _mResult$[ebp+16]
  001c6	0f 28 95 f0 fe
	ff ff		 movaps	 xmm2, XMMWORD PTR _mResult$[ebp+32]
  001cd	0f 28 9d 00 ff
	ff ff		 movaps	 xmm3, XMMWORD PTR _mResult$[ebp+48]
; Line 601
  001d4	52		 push	 edx
  001d5	8b cd		 mov	 ecx, ebp
  001d7	50		 push	 eax
  001d8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@XMMatrixTr
  001de	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001e3	58		 pop	 eax
  001e4	5a		 pop	 edx
  001e5	5f		 pop	 edi
  001e6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e9	33 cd		 xor	 ecx, ebp
  001eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f0	8b e5		 mov	 esp, ebp
  001f2	5d		 pop	 ebp
  001f3	8b e3		 mov	 esp, ebx
  001f5	5b		 pop	 ebx
  001f6	c3		 ret	 0
  001f7	90		 npad	 1
$LN6@XMMatrixTr:
  001f8	02 00 00 00	 DD	 2
  001fc	00 00 00 00	 DD	 $LN5@XMMatrixTr
$LN5@XMMatrixTr:
  00200	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00204	40 00 00 00	 DD	 64			; 00000040H
  00208	00 00 00 00	 DD	 $LN3@XMMatrixTr
  0020c	d0 fe ff ff	 DD	 -304			; fffffed0H
  00210	40 00 00 00	 DD	 64			; 00000040H
  00214	00 00 00 00	 DD	 $LN4@XMMatrixTr
$LN4@XMMatrixTr:
  00218	6d		 DB	 109			; 0000006dH
  00219	52		 DB	 82			; 00000052H
  0021a	65		 DB	 101			; 00000065H
  0021b	73		 DB	 115			; 00000073H
  0021c	75		 DB	 117			; 00000075H
  0021d	6c		 DB	 108			; 0000006cH
  0021e	74		 DB	 116			; 00000074H
  0021f	00		 DB	 0
$LN3@XMMatrixTr:
  00220	4d		 DB	 77			; 0000004dH
  00221	00		 DB	 0
?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z ENDP	; DirectX::XMMatrixTranspose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z
_TEXT	SEGMENT
$T1 = -944						; size = 16
$T2 = -928						; size = 16
$T3 = -912						; size = 16
$T4 = -896						; size = 16
$T5 = -880						; size = 16
$T6 = -864						; size = 16
$T7 = -848						; size = 16
$T8 = -832						; size = 16
$T9 = -816						; size = 16
$T10 = -800						; size = 16
$T11 = -784						; size = 16
$T12 = -768						; size = 16
$T13 = -752						; size = 16
$T14 = -736						; size = 16
$T15 = -720						; size = 16
$T16 = -704						; size = 16
$T17 = -688						; size = 16
$T18 = -672						; size = 16
$T19 = -656						; size = 16
$T20 = -640						; size = 16
$T21 = -624						; size = 16
$T22 = -608						; size = 16
$T23 = -592						; size = 16
$T24 = -576						; size = 16
$T25 = -560						; size = 16
$T26 = -544						; size = 16
$T27 = -528						; size = 16
$T28 = -512						; size = 16
$T29 = -496						; size = 16
$T30 = -480						; size = 16
$T31 = -464						; size = 16
$T32 = -448						; size = 16
$T33 = -432						; size = 16
$T34 = -416						; size = 16
$T35 = -400						; size = 16
$T36 = -384						; size = 16
$T37 = -368						; size = 16
$T38 = -352						; size = 16
$T39 = -336						; size = 16
$T40 = -320						; size = 16
$T41 = -304						; size = 16
$T42 = -288						; size = 16
_vZ$ = -272						; size = 16
$T43 = -256						; size = 16
_vY$ = -240						; size = 16
$T44 = -224						; size = 16
_vX$ = -208						; size = 16
_vW$ = -192						; size = 16
_mResult$ = -160					; size = 64
_M2$ = -88						; size = 4
_M1$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z PROC ; DirectX::XMMatrixMultiply, COMDAT
; _M2$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 228
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b0 03 00
	00		 sub	 esp, 944		; 000003b0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 50 fc ff
	ff		 lea	 edi, DWORD PTR [ebp-944]
  00024	b9 ec 00 00 00	 mov	 ecx, 236		; 000000ecH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	89 4d a8	 mov	 DWORD PTR _M2$[ebp], ecx
  0003e	0f 29 5d e0	 movaps	 XMMWORD PTR _M1$[ebp+48], xmm3
  00042	0f 29 55 d0	 movaps	 XMMWORD PTR _M1$[ebp+32], xmm2
  00046	0f 29 4d c0	 movaps	 XMMWORD PTR _M1$[ebp+16], xmm1
  0004a	0f 29 45 b0	 movaps	 XMMWORD PTR _M1$[ebp], xmm0
; Line 301
  0004e	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR _mResult$[ebp]
  00054	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 303
  00059	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0005e	6b c8 00	 imul	 ecx, eax, 0
  00061	0f 10 44 0d b0	 movups	 xmm0, XMMWORD PTR _M1$[ebp+ecx]
  00066	0f 11 85 40 ff
	ff ff		 movups	 XMMWORD PTR _vW$[ebp], xmm0
; Line 305
  0006d	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00074	0f c6 85 40 ff
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 0
  0007c	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T44[ebp], xmm0
  00083	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T44[ebp]
  0008a	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 306
  00091	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00098	0f c6 85 40 ff
	ff ff 55	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 85 ; 00000055H
  000a0	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T43[ebp], xmm0
  000a7	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T43[ebp]
  000ae	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 307
  000b5	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  000bc	0f c6 85 40 ff
	ff ff aa	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 170 ; 000000aaH
  000c4	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T42[ebp], xmm0
  000cb	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T42[ebp]
  000d2	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 308
  000d9	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  000e0	0f c6 85 40 ff
	ff ff ff	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 255 ; 000000ffH
  000e8	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T41[ebp], xmm0
  000ef	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T41[ebp]
  000f6	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 310
  000fd	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00102	6b c2 00	 imul	 eax, edx, 0
  00105	03 45 a8	 add	 eax, DWORD PTR _M2$[ebp]
  00108	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  0010f	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  00112	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T40[ebp], xmm0
  00119	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T40[ebp]
  00120	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 311
  00127	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0012c	c1 e1 00	 shl	 ecx, 0
  0012f	03 4d a8	 add	 ecx, DWORD PTR _M2$[ebp]
  00132	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  00139	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  0013c	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T39[ebp], xmm0
  00143	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T39[ebp]
  0014a	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 312
  00151	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00156	d1 e2		 shl	 edx, 1
  00158	03 55 a8	 add	 edx, DWORD PTR _M2$[ebp]
  0015b	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vZ$[ebp]
  00162	0f 59 02	 mulps	 xmm0, XMMWORD PTR [edx]
  00165	0f 29 85 a0 fe
	ff ff		 movaps	 XMMWORD PTR $T38[ebp], xmm0
  0016c	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T38[ebp]
  00173	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 313
  0017a	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0017f	6b c8 03	 imul	 ecx, eax, 3
  00182	03 4d a8	 add	 ecx, DWORD PTR _M2$[ebp]
  00185	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  0018c	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  0018f	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR $T37[ebp], xmm0
  00196	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T37[ebp]
  0019d	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 315
  001a4	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  001ab	0f 58 85 f0 fe
	ff ff		 addps	 xmm0, XMMWORD PTR _vZ$[ebp]
  001b2	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T36[ebp], xmm0
  001b9	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T36[ebp]
  001c0	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 316
  001c7	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  001ce	0f 58 85 40 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vW$[ebp]
  001d5	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T35[ebp], xmm0
  001dc	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T35[ebp]
  001e3	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 317
  001ea	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  001f1	0f 58 85 10 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vY$[ebp]
  001f8	0f 29 85 60 fe
	ff ff		 movaps	 XMMWORD PTR $T34[ebp], xmm0
  001ff	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T34[ebp]
  00206	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 318
  0020d	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00212	6b c2 00	 imul	 eax, edx, 0
  00215	0f 10 85 30 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _vX$[ebp]
  0021c	0f 11 84 05 60
	ff ff ff	 movups	 XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 320
  00224	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00229	c1 e1 00	 shl	 ecx, 0
  0022c	0f 10 44 0d b0	 movups	 xmm0, XMMWORD PTR _M1$[ebp+ecx]
  00231	0f 11 85 40 ff
	ff ff		 movups	 XMMWORD PTR _vW$[ebp], xmm0
; Line 321
  00238	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  0023f	0f c6 85 40 ff
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 0
  00247	0f 29 85 50 fe
	ff ff		 movaps	 XMMWORD PTR $T33[ebp], xmm0
  0024e	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T33[ebp]
  00255	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 322
  0025c	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00263	0f c6 85 40 ff
	ff ff 55	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 85 ; 00000055H
  0026b	0f 29 85 40 fe
	ff ff		 movaps	 XMMWORD PTR $T32[ebp], xmm0
  00272	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T32[ebp]
  00279	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 323
  00280	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00287	0f c6 85 40 ff
	ff ff aa	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 170 ; 000000aaH
  0028f	0f 29 85 30 fe
	ff ff		 movaps	 XMMWORD PTR $T31[ebp], xmm0
  00296	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T31[ebp]
  0029d	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 324
  002a4	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  002ab	0f c6 85 40 ff
	ff ff ff	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 255 ; 000000ffH
  002b3	0f 29 85 20 fe
	ff ff		 movaps	 XMMWORD PTR $T30[ebp], xmm0
  002ba	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T30[ebp]
  002c1	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 325
  002c8	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002cd	6b c2 00	 imul	 eax, edx, 0
  002d0	03 45 a8	 add	 eax, DWORD PTR _M2$[ebp]
  002d3	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  002da	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  002dd	0f 29 85 10 fe
	ff ff		 movaps	 XMMWORD PTR $T29[ebp], xmm0
  002e4	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T29[ebp]
  002eb	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 326
  002f2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002f7	c1 e1 00	 shl	 ecx, 0
  002fa	03 4d a8	 add	 ecx, DWORD PTR _M2$[ebp]
  002fd	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  00304	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  00307	0f 29 85 00 fe
	ff ff		 movaps	 XMMWORD PTR $T28[ebp], xmm0
  0030e	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T28[ebp]
  00315	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 327
  0031c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00321	d1 e2		 shl	 edx, 1
  00323	03 55 a8	 add	 edx, DWORD PTR _M2$[ebp]
  00326	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vZ$[ebp]
  0032d	0f 59 02	 mulps	 xmm0, XMMWORD PTR [edx]
  00330	0f 29 85 f0 fd
	ff ff		 movaps	 XMMWORD PTR $T27[ebp], xmm0
  00337	0f 28 85 f0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T27[ebp]
  0033e	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 328
  00345	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0034a	6b c8 03	 imul	 ecx, eax, 3
  0034d	03 4d a8	 add	 ecx, DWORD PTR _M2$[ebp]
  00350	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00357	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  0035a	0f 29 85 e0 fd
	ff ff		 movaps	 XMMWORD PTR $T26[ebp], xmm0
  00361	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T26[ebp]
  00368	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 329
  0036f	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  00376	0f 58 85 f0 fe
	ff ff		 addps	 xmm0, XMMWORD PTR _vZ$[ebp]
  0037d	0f 29 85 d0 fd
	ff ff		 movaps	 XMMWORD PTR $T25[ebp], xmm0
  00384	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T25[ebp]
  0038b	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 330
  00392	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  00399	0f 58 85 40 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vW$[ebp]
  003a0	0f 29 85 c0 fd
	ff ff		 movaps	 XMMWORD PTR $T24[ebp], xmm0
  003a7	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T24[ebp]
  003ae	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 331
  003b5	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  003bc	0f 58 85 10 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vY$[ebp]
  003c3	0f 29 85 b0 fd
	ff ff		 movaps	 XMMWORD PTR $T23[ebp], xmm0
  003ca	0f 28 85 b0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T23[ebp]
  003d1	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 332
  003d8	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  003dd	c1 e2 00	 shl	 edx, 0
  003e0	0f 10 85 30 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _vX$[ebp]
  003e7	0f 11 84 15 60
	ff ff ff	 movups	 XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 333
  003ef	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  003f4	d1 e0		 shl	 eax, 1
  003f6	0f 10 44 05 b0	 movups	 xmm0, XMMWORD PTR _M1$[ebp+eax]
  003fb	0f 11 85 40 ff
	ff ff		 movups	 XMMWORD PTR _vW$[ebp], xmm0
; Line 334
  00402	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00409	0f c6 85 40 ff
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 0
  00411	0f 29 85 a0 fd
	ff ff		 movaps	 XMMWORD PTR $T22[ebp], xmm0
  00418	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T22[ebp]
  0041f	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 335
  00426	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  0042d	0f c6 85 40 ff
	ff ff 55	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 85 ; 00000055H
  00435	0f 29 85 90 fd
	ff ff		 movaps	 XMMWORD PTR $T21[ebp], xmm0
  0043c	0f 28 85 90 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T21[ebp]
  00443	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 336
  0044a	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00451	0f c6 85 40 ff
	ff ff aa	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 170 ; 000000aaH
  00459	0f 29 85 80 fd
	ff ff		 movaps	 XMMWORD PTR $T20[ebp], xmm0
  00460	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T20[ebp]
  00467	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 337
  0046e	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00475	0f c6 85 40 ff
	ff ff ff	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 255 ; 000000ffH
  0047d	0f 29 85 70 fd
	ff ff		 movaps	 XMMWORD PTR $T19[ebp], xmm0
  00484	0f 28 85 70 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T19[ebp]
  0048b	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 338
  00492	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00497	6b d1 00	 imul	 edx, ecx, 0
  0049a	03 55 a8	 add	 edx, DWORD PTR _M2$[ebp]
  0049d	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  004a4	0f 59 02	 mulps	 xmm0, XMMWORD PTR [edx]
  004a7	0f 29 85 60 fd
	ff ff		 movaps	 XMMWORD PTR $T18[ebp], xmm0
  004ae	0f 28 85 60 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  004b5	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 339
  004bc	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  004c1	c1 e0 00	 shl	 eax, 0
  004c4	03 45 a8	 add	 eax, DWORD PTR _M2$[ebp]
  004c7	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  004ce	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  004d1	0f 29 85 50 fd
	ff ff		 movaps	 XMMWORD PTR $T17[ebp], xmm0
  004d8	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  004df	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 340
  004e6	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  004eb	d1 e1		 shl	 ecx, 1
  004ed	03 4d a8	 add	 ecx, DWORD PTR _M2$[ebp]
  004f0	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vZ$[ebp]
  004f7	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  004fa	0f 29 85 40 fd
	ff ff		 movaps	 XMMWORD PTR $T16[ebp], xmm0
  00501	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  00508	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 341
  0050f	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00514	6b c2 03	 imul	 eax, edx, 3
  00517	03 45 a8	 add	 eax, DWORD PTR _M2$[ebp]
  0051a	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00521	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  00524	0f 29 85 30 fd
	ff ff		 movaps	 XMMWORD PTR $T15[ebp], xmm0
  0052b	0f 28 85 30 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  00532	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 342
  00539	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  00540	0f 58 85 f0 fe
	ff ff		 addps	 xmm0, XMMWORD PTR _vZ$[ebp]
  00547	0f 29 85 20 fd
	ff ff		 movaps	 XMMWORD PTR $T14[ebp], xmm0
  0054e	0f 28 85 20 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00555	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 343
  0055c	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  00563	0f 58 85 40 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vW$[ebp]
  0056a	0f 29 85 10 fd
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  00571	0f 28 85 10 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  00578	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 344
  0057f	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  00586	0f 58 85 10 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vY$[ebp]
  0058d	0f 29 85 00 fd
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  00594	0f 28 85 00 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  0059b	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 345
  005a2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  005a7	d1 e1		 shl	 ecx, 1
  005a9	0f 10 85 30 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _vX$[ebp]
  005b0	0f 11 84 0d 60
	ff ff ff	 movups	 XMMWORD PTR _mResult$[ebp+ecx], xmm0
; Line 346
  005b8	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  005bd	6b c2 03	 imul	 eax, edx, 3
  005c0	0f 10 44 05 b0	 movups	 xmm0, XMMWORD PTR _M1$[ebp+eax]
  005c5	0f 11 85 40 ff
	ff ff		 movups	 XMMWORD PTR _vW$[ebp], xmm0
; Line 347
  005cc	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  005d3	0f c6 85 40 ff
	ff ff 00	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 0
  005db	0f 29 85 f0 fc
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  005e2	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  005e9	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 348
  005f0	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  005f7	0f c6 85 40 ff
	ff ff 55	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 85 ; 00000055H
  005ff	0f 29 85 e0 fc
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  00606	0f 28 85 e0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  0060d	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 349
  00614	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  0061b	0f c6 85 40 ff
	ff ff aa	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 170 ; 000000aaH
  00623	0f 29 85 d0 fc
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  0062a	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  00631	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 350
  00638	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  0063f	0f c6 85 40 ff
	ff ff ff	 shufps	 xmm0, XMMWORD PTR _vW$[ebp], 255 ; 000000ffH
  00647	0f 29 85 c0 fc
	ff ff		 movaps	 XMMWORD PTR $T8[ebp], xmm0
  0064e	0f 28 85 c0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T8[ebp]
  00655	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 351
  0065c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00661	6b d1 00	 imul	 edx, ecx, 0
  00664	03 55 a8	 add	 edx, DWORD PTR _M2$[ebp]
  00667	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  0066e	0f 59 02	 mulps	 xmm0, XMMWORD PTR [edx]
  00671	0f 29 85 b0 fc
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm0
  00678	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  0067f	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 352
  00686	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0068b	c1 e0 00	 shl	 eax, 0
  0068e	03 45 a8	 add	 eax, DWORD PTR _M2$[ebp]
  00691	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  00698	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  0069b	0f 29 85 a0 fc
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  006a2	0f 28 85 a0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  006a9	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 353
  006b0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  006b5	d1 e1		 shl	 ecx, 1
  006b7	03 4d a8	 add	 ecx, DWORD PTR _M2$[ebp]
  006ba	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vZ$[ebp]
  006c1	0f 59 01	 mulps	 xmm0, XMMWORD PTR [ecx]
  006c4	0f 29 85 90 fc
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  006cb	0f 28 85 90 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  006d2	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0
; Line 354
  006d9	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  006de	6b c2 03	 imul	 eax, edx, 3
  006e1	03 45 a8	 add	 eax, DWORD PTR _M2$[ebp]
  006e4	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  006eb	0f 59 00	 mulps	 xmm0, XMMWORD PTR [eax]
  006ee	0f 29 85 80 fc
	ff ff		 movaps	 XMMWORD PTR $T4[ebp], xmm0
  006f5	0f 28 85 80 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  006fc	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vW$[ebp], xmm0
; Line 355
  00703	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  0070a	0f 58 85 f0 fe
	ff ff		 addps	 xmm0, XMMWORD PTR _vZ$[ebp]
  00711	0f 29 85 70 fc
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00718	0f 28 85 70 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0071f	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 356
  00726	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  0072d	0f 58 85 40 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vW$[ebp]
  00734	0f 29 85 60 fc
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0073b	0f 28 85 60 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  00742	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0
; Line 357
  00749	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  00750	0f 58 85 10 ff
	ff ff		 addps	 xmm0, XMMWORD PTR _vY$[ebp]
  00757	0f 29 85 50 fc
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0075e	0f 28 85 50 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00765	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vX$[ebp], xmm0
; Line 358
  0076c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00771	6b d1 03	 imul	 edx, ecx, 3
  00774	0f 10 85 30 ff
	ff ff		 movups	 xmm0, XMMWORD PTR _vX$[ebp]
  0077b	0f 11 84 15 60
	ff ff ff	 movups	 XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 359
  00783	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _mResult$[ebp]
  0078a	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _mResult$[ebp+16]
  00791	0f 28 55 80	 movaps	 xmm2, XMMWORD PTR _mResult$[ebp+32]
  00795	0f 28 5d 90	 movaps	 xmm3, XMMWORD PTR _mResult$[ebp+48]
; Line 362
  00799	52		 push	 edx
  0079a	8b cd		 mov	 ecx, ebp
  0079c	50		 push	 eax
  0079d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@XMMatrixMu
  007a3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  007a8	58		 pop	 eax
  007a9	5a		 pop	 edx
  007aa	5f		 pop	 edi
  007ab	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007ae	33 cd		 xor	 ecx, ebp
  007b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007b5	8b e5		 mov	 esp, ebp
  007b7	5d		 pop	 ebp
  007b8	8b e3		 mov	 esp, ebx
  007ba	5b		 pop	 ebx
  007bb	c3		 ret	 0
$LN6@XMMatrixMu:
  007bc	02 00 00 00	 DD	 2
  007c0	00 00 00 00	 DD	 $LN5@XMMatrixMu
$LN5@XMMatrixMu:
  007c4	b0 ff ff ff	 DD	 -80			; ffffffb0H
  007c8	40 00 00 00	 DD	 64			; 00000040H
  007cc	00 00 00 00	 DD	 $LN3@XMMatrixMu
  007d0	60 ff ff ff	 DD	 -160			; ffffff60H
  007d4	40 00 00 00	 DD	 64			; 00000040H
  007d8	00 00 00 00	 DD	 $LN4@XMMatrixMu
$LN4@XMMatrixMu:
  007dc	6d		 DB	 109			; 0000006dH
  007dd	52		 DB	 82			; 00000052H
  007de	65		 DB	 101			; 00000065H
  007df	73		 DB	 115			; 00000073H
  007e0	75		 DB	 117			; 00000075H
  007e1	6c		 DB	 108			; 0000006cH
  007e2	74		 DB	 116			; 00000074H
  007e3	00		 DB	 0
$LN3@XMMatrixMu:
  007e4	4d		 DB	 77			; 0000004dH
  007e5	31		 DB	 49			; 00000031H
  007e6	00		 DB	 0
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ENDP ; DirectX::XMMatrixMultiply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector4Normalize@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -400						; size = 16
$T2 = -384						; size = 16
_vTemp2$ = -368						; size = 16
$T3 = -352						; size = 16
$T4 = -336						; size = 16
_vTemp1$ = -320						; size = 16
$T5 = -304						; size = 16
$T6 = -288						; size = 16
$T7 = -272						; size = 16
$T8 = -256						; size = 16
$T9 = -240						; size = 16
$T10 = -224						; size = 16
_vZeroMask$ = -208					; size = 16
$T11 = -192						; size = 16
_vResult$ = -176					; size = 16
$T12 = -160						; size = 16
$T13 = -144						; size = 16
$T14 = -128						; size = 16
$T15 = -112						; size = 16
$T16 = -96						; size = 16
$T17 = -80						; size = 16
_vTemp$ = -64						; size = 16
$T18 = -48						; size = 16
_vLengthSq$ = -32					; size = 16
_V$ = -16						; size = 16
?XMVector4Normalize@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVector4Normalize, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 13406
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 90 01 00
	00		 sub	 esp, 400		; 00000190H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 70 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-400]
  00024	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 13449
  00035	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00039	0f 59 45 f0	 mulps	 xmm0, XMMWORD PTR _V$[ebp]
  0003d	0f 29 45 d0	 movaps	 XMMWORD PTR $T18[ebp], xmm0
  00041	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T18[ebp]
  00045	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13451
  00049	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  0004d	0f c6 45 e0 ee	 shufps	 xmm0, XMMWORD PTR _vLengthSq$[ebp], 238 ; 000000eeH
  00052	0f 29 45 b0	 movaps	 XMMWORD PTR $T17[ebp], xmm0
  00056	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T17[ebp]
  0005a	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 13453
  0005e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  00062	0f 58 45 c0	 addps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00066	0f 29 45 a0	 movaps	 XMMWORD PTR $T16[ebp], xmm0
  0006a	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T16[ebp]
  0006e	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13455
  00072	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  00076	0f c6 45 e0 40	 shufps	 xmm0, XMMWORD PTR _vLengthSq$[ebp], 64 ; 00000040H
  0007b	0f 29 45 90	 movaps	 XMMWORD PTR $T15[ebp], xmm0
  0007f	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T15[ebp]
  00083	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13457
  00087	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0008b	0f c6 45 e0 f0	 shufps	 xmm0, XMMWORD PTR _vLengthSq$[ebp], 240 ; 000000f0H
  00090	0f 29 45 80	 movaps	 XMMWORD PTR $T14[ebp], xmm0
  00094	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T14[ebp]
  00098	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 13459
  0009c	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  000a0	0f 58 45 c0	 addps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  000a4	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T13[ebp], xmm0
  000ab	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T13[ebp]
  000b2	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13461
  000b6	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  000ba	0f c6 45 e0 aa	 shufps	 xmm0, XMMWORD PTR _vLengthSq$[ebp], 170 ; 000000aaH
  000bf	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T12[ebp], xmm0
  000c6	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T12[ebp]
  000cd	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13463
  000d1	0f 51 45 e0	 sqrtps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  000d5	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T11[ebp], xmm0
  000dc	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T11[ebp]
  000e3	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 13465
  000ea	0f 57 c0	 xorps	 xmm0, xmm0
  000ed	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T10[ebp], xmm0
  000f4	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T10[ebp]
  000fb	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vZeroMask$[ebp], xmm0
; Line 13467
  00102	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vZeroMask$[ebp]
  00109	0f c2 85 50 ff
	ff ff 04	 cmpneqps xmm0, XMMWORD PTR _vResult$[ebp]
  00111	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T9[ebp], xmm0
  00118	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T9[ebp]
  0011f	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR _vZeroMask$[ebp], xmm0
; Line 13470
  00126	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  0012c	50		 push	 eax
  0012d	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMInfinity
  00132	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  00137	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0013a	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vLengthSq$[ebp]
  0013e	0f c2 c8 04	 cmpneqps xmm1, xmm0
  00142	0f 29 8d f0 fe
	ff ff		 movaps	 XMMWORD PTR $T7[ebp], xmm1
  00149	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T7[ebp]
  00150	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13472
  00154	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00158	0f 5e 85 50 ff
	ff ff		 divps	 xmm0, XMMWORD PTR _vResult$[ebp]
  0015f	0f 29 85 e0 fe
	ff ff		 movaps	 XMMWORD PTR $T6[ebp], xmm0
  00166	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  0016d	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 13474
  00174	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  0017b	0f 54 85 30 ff
	ff ff		 andps	 xmm0, XMMWORD PTR _vZeroMask$[ebp]
  00182	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00189	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00190	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 13476
  00197	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0019d	51		 push	 ecx
  0019e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMQNaN
  001a3	e8 00 00 00 00	 call	 ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
  001a8	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  001ab	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vLengthSq$[ebp]
  001af	0f 55 c8	 andnps	 xmm1, xmm0
  001b2	0f 29 8d a0 fe
	ff ff		 movaps	 XMMWORD PTR $T3[ebp], xmm1
  001b9	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  001c0	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 13477
  001c7	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  001ce	0f 54 45 e0	 andps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  001d2	0f 29 85 80 fe
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  001d9	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  001e0	0f 29 85 90 fe
	ff ff		 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 13478
  001e7	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR _vTemp1$[ebp]
  001ee	0f 56 85 90 fe
	ff ff		 orps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  001f5	0f 29 85 70 fe
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  001fc	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00203	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0
; Line 13479
  0020a	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
; Line 13482
  00211	5f		 pop	 edi
  00212	8b e5		 mov	 esp, ebp
  00214	5d		 pop	 ebp
  00215	8b e3		 mov	 esp, ebx
  00217	5b		 pop	 ebx
  00218	c3		 ret	 0
?XMVector4Normalize@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVector4Normalize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector4LengthSq@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_V$ = -16						; size = 16
?XMVector4LengthSq@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVector4LengthSq, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 13126
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0
; Line 13127
  0003a	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V$[ebp]
  0003e	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00042	e8 00 00 00 00	 call	 ?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector4Dot
  00047	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0004b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 13128
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	8b e3		 mov	 esp, ebx
  00054	5b		 pop	 ebx
  00055	c3		 ret	 0
?XMVector4LengthSq@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVector4LengthSq
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
$T3 = -128						; size = 16
$T4 = -112						; size = 16
$T5 = -96						; size = 16
$T6 = -80						; size = 16
_vTemp$ = -64						; size = 16
_vTemp2$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z PROC		; DirectX::XMVector4Dot, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 12940
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-160]
  00024	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  00035	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 12959
  00039	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V2$[ebp]
  0003d	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 12960
  00041	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00045	0f 59 45 d0	 mulps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  00049	0f 29 45 b0	 movaps	 XMMWORD PTR $T6[ebp], xmm0
  0004d	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T6[ebp]
  00051	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12961
  00055	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  00059	0f c6 45 c0 40	 shufps	 xmm0, XMMWORD PTR _vTemp$[ebp], 64 ; 00000040H
  0005e	0f 29 45 a0	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00062	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  00066	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 12962
  0006a	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  0006e	0f 58 45 c0	 addps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00072	0f 29 45 90	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00076	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  0007a	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 12963
  0007e	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00082	0f c6 45 d0 30	 shufps	 xmm0, XMMWORD PTR _vTemp2$[ebp], 48 ; 00000030H
  00087	0f 29 45 80	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0008b	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0008f	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12964
  00093	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00097	0f 58 45 d0	 addps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  0009b	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000a2	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000a9	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12965
  000ad	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  000b1	0f c6 45 c0 aa	 shufps	 xmm0, XMMWORD PTR _vTemp$[ebp], 170 ; 000000aaH
  000b6	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000bd	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 12968
  000c4	5f		 pop	 edi
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	8b e3		 mov	 esp, ebx
  000ca	5b		 pop	 ebx
  000cb	c3		 ret	 0
?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z ENDP		; DirectX::XMVector4Dot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector4Equal@DirectX@@YQ_NT__m128@@0@Z
_TEXT	SEGMENT
tv72 = -72						; size = 4
tv70 = -68						; size = 4
$T1 = -64						; size = 16
_vTemp$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector4Equal@DirectX@@YQ_NT__m128@@0@Z PROC		; DirectX::XMVector4Equal, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 12373
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 50	 sub	 esp, 80			; 00000050H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0001e	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 12382
  00033	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00037	0f c2 45 e0 00	 cmpeqps xmm0, XMMWORD PTR _V2$[ebp]
  0003c	0f 29 45 c0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00040	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
  00044	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12383
  00048	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0004c	0f 50 c0	 movmskps eax, xmm0
  0004f	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  00052	75 09		 jne	 SHORT $LN3@XMVector4E
  00054	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  0005b	eb 07		 jmp	 SHORT $LN4@XMVector4E
$LN3@XMVector4E:
  0005d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
$LN4@XMVector4E:
  00064	83 7d bc 00	 cmp	 DWORD PTR tv70[ebp], 0
  00068	74 09		 je	 SHORT $LN5@XMVector4E
  0006a	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
  00071	eb 07		 jmp	 SHORT $LN6@XMVector4E
$LN5@XMVector4E:
  00073	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
$LN6@XMVector4E:
  0007a	8a 45 b8	 mov	 al, BYTE PTR tv72[ebp]
; Line 12387
  0007d	5f		 pop	 edi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	8b e3		 mov	 esp, ebx
  00083	5b		 pop	 ebx
  00084	c3		 ret	 0
?XMVector4Equal@DirectX@@YQ_NT__m128@@0@Z ENDP		; DirectX::XMVector4Equal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMVectorDivide, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 3005
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 3022
  00033	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00037	0f 5e 45 e0	 divps	 xmm0, XMMWORD PTR _V2$[ebp]
  0003b	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0003f	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 3025
  00043	5f		 pop	 edi
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	8b e3		 mov	 esp, ebx
  00049	5b		 pop	 ebx
  0004a	c3		 ret	 0
?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMVectorDivide
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorLessOrEqual@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorLessOrEqual@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMVectorLessOrEqual, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2075
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001e	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 2088
  00033	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00037	0f c2 45 e0 02	 cmpleps xmm0, XMMWORD PTR _V2$[ebp]
  0003c	0f 29 45 d0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00040	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 2091
  00044	5f		 pop	 edi
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	8b e3		 mov	 esp, ebx
  0004a	5b		 pop	 ebx
  0004b	c3		 ret	 0
?XMVectorLessOrEqual@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMVectorLessOrEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z
_TEXT	SEGMENT
$T1 = -128						; size = 16
$T2 = -112						; size = 16
_vTemp2$ = -96						; size = 16
$T3 = -80						; size = 16
_vTemp1$ = -64						; size = 16
_Control$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z PROC	; DirectX::XMVectorSelect, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; _Control$ = xmm2
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 1448
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00021	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	0f 29 55 d0	 movaps	 XMMWORD PTR _Control$[ebp], xmm2
  00032	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  00036	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0
; Line 1461
  0003a	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _Control$[ebp]
  0003e	0f 55 45 f0	 andnps	 xmm0, XMMWORD PTR _V1$[ebp]
  00042	0f 29 45 b0	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00046	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  0004a	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 1462
  0004e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V2$[ebp]
  00052	0f 54 45 d0	 andps	 xmm0, XMMWORD PTR _Control$[ebp]
  00056	0f 29 45 90	 movaps	 XMMWORD PTR $T2[ebp], xmm0
  0005a	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  0005e	0f 29 45 a0	 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 1463
  00062	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp1$[ebp]
  00066	0f 56 45 a0	 orps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  0006a	0f 29 45 80	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0006e	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 1466
  00072	5f		 pop	 edi
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	8b e3		 mov	 esp, ebx
  00078	5b		 pop	 ebx
  00079	c3		 ret	 0
?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ENDP	; DirectX::XMVectorSelect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_w$ = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z PROC		; DirectX::XMVectorSet, COMDAT
; _x$ = xmm0s
; _y$ = xmm1s
; _z$ = xmm2s
; _w$ = xmm3s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 72
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	f3 0f 11 5d f0	 movss	 DWORD PTR _w$[ebp], xmm3
  0003b	f3 0f 11 55 f4	 movss	 DWORD PTR _z$[ebp], xmm2
  00040	f3 0f 11 4d f8	 movss	 DWORD PTR _y$[ebp], xmm1
  00045	f3 0f 11 45 fc	 movss	 DWORD PTR _x$[ebp], xmm0
; Line 81
  0004a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _x$[ebp]
  0004f	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _y$[ebp]
  00054	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _z$[ebp]
  00059	f3 0f 10 5d f0	 movss	 xmm3, DWORD PTR _w$[ebp]
  0005e	0f 14 c2	 unpcklps xmm0, xmm2
  00061	0f 14 cb	 unpcklps xmm1, xmm3
  00064	0f 14 c1	 unpcklps xmm0, xmm1
  00067	0f 29 45 e0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  0006b	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 84
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	8b e3		 mov	 esp, ebx
  00074	5b		 pop	 ebx
  00075	c3		 ret	 0
?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ENDP		; DirectX::XMVectorSet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorZero@DirectX@@YQ?AT__m128@@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
?XMVectorZero@DirectX@@YQ?AT__m128@@XZ PROC		; DirectX::XMVectorZero, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 51
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 10	 sub	 esp, 16			; 00000010H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00021	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00024	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00027	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
; Line 58
  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	0f 29 45 f0	 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00031	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 61
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	8b e3		 mov	 esp, ebx
  0003a	5b		 pop	 ebx
  0003b	c3		 ret	 0
?XMVectorZero@DirectX@@YQ?AT__m128@@XZ ENDP		; DirectX::XMVectorZero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z
_TEXT	SEGMENT
_M$ = -80						; size = 64
_pDestination$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z PROC ; DirectX::XMStoreFloat4x4, COMDAT
; _pDestination$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 1875
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	51		 push	 ecx
  0001c	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  0001f	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	59		 pop	 ecx
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	0f 29 5d e0	 movaps	 XMMWORD PTR _M$[ebp+48], xmm3
  0003a	0f 29 55 d0	 movaps	 XMMWORD PTR _M$[ebp+32], xmm2
  0003e	0f 29 4d c0	 movaps	 XMMWORD PTR _M$[ebp+16], xmm1
  00042	0f 29 45 b0	 movaps	 XMMWORD PTR _M$[ebp], xmm0
  00046	89 4d f8	 mov	 DWORD PTR _pDestination$[ebp], ecx
; Line 1876
  00049	83 7d f8 00	 cmp	 DWORD PTR _pDestination$[ebp], 0
  0004d	75 21		 jne	 SHORT $LN3@XMStoreFlo
  0004f	8b f4		 mov	 esi, esp
  00051	68 54 07 00 00	 push	 1876			; 00000754H
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMStoreFlo:
; Line 1905
  00070	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00075	6b d1 00	 imul	 edx, ecx, 0
  00078	0f 10 44 15 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+edx]
  0007d	8b 45 f8	 mov	 eax, DWORD PTR _pDestination$[ebp]
  00080	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
; Line 1906
  00083	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00088	c1 e1 00	 shl	 ecx, 0
  0008b	0f 10 44 0d b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+ecx]
  00090	8b 55 f8	 mov	 edx, DWORD PTR _pDestination$[ebp]
  00093	83 c2 10	 add	 edx, 16			; 00000010H
  00096	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
; Line 1907
  00099	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0009e	d1 e0		 shl	 eax, 1
  000a0	0f 10 44 05 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+eax]
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _pDestination$[ebp]
  000a8	83 c1 20	 add	 ecx, 32			; 00000020H
  000ab	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; Line 1908
  000ae	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000b3	6b c2 03	 imul	 eax, edx, 3
  000b6	0f 10 44 05 b0	 movups	 xmm0, XMMWORD PTR _M$[ebp+eax]
  000bb	8b 4d f8	 mov	 ecx, DWORD PTR _pDestination$[ebp]
  000be	83 c1 30	 add	 ecx, 48			; 00000030H
  000c1	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
; Line 1911
  000c4	52		 push	 edx
  000c5	8b cd		 mov	 ecx, ebp
  000c7	50		 push	 eax
  000c8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@XMStoreFlo
  000ce	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d3	58		 pop	 eax
  000d4	5a		 pop	 edx
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000da	33 cd		 xor	 ecx, ebp
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	8b e3		 mov	 esp, ebx
  000e6	5b		 pop	 ebx
  000e7	c3		 ret	 0
$LN6@XMStoreFlo:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN5@XMStoreFlo
$LN5@XMStoreFlo:
  000f0	b0 ff ff ff	 DD	 -80			; ffffffb0H
  000f4	40 00 00 00	 DD	 64			; 00000040H
  000f8	00 00 00 00	 DD	 $LN4@XMStoreFlo
$LN4@XMStoreFlo:
  000fc	4d		 DB	 77			; 0000004dH
  000fd	00		 DB	 0
?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ENDP ; DirectX::XMStoreFloat4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
$T3 = -128						; size = 16
$T4 = -112						; size = 16
_M$ = -80						; size = 64
_pSource$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z PROC ; DirectX::XMLoadFloat4x4, COMDAT
; _pSource$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 1041
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 54 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-172]
  00025	b9 2b 00 00 00	 mov	 ecx, 43			; 0000002bH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	89 4d f8	 mov	 DWORD PTR _pSource$[ebp], ecx
; Line 1042
  0003f	83 7d f8 00	 cmp	 DWORD PTR _pSource$[ebp], 0
  00043	75 21		 jne	 SHORT $LN3@XMLoadFloa
  00045	8b f4		 mov	 esi, esp
  00047	68 12 04 00 00	 push	 1042			; 00000412H
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00051	68 00 00 00 00	 push	 OFFSET ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	3b f4		 cmp	 esi, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMLoadFloa:
; Line 1075
  00066	8d 4d b0	 lea	 ecx, DWORD PTR _M$[ebp]
  00069	e8 00 00 00 00	 call	 ??0XMMATRIX@DirectX@@QAE@XZ ; DirectX::XMMATRIX::XMMATRIX
; Line 1076
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _pSource$[ebp]
  00071	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00074	0f 29 45 90	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  00078	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0007d	6b c2 00	 imul	 eax, edx, 0
  00080	0f 10 45 90	 movups	 xmm0, XMMWORD PTR $T4[ebp]
  00084	0f 11 44 05 b0	 movups	 XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1077
  00089	8b 4d f8	 mov	 ecx, DWORD PTR _pSource$[ebp]
  0008c	83 c1 10	 add	 ecx, 16			; 00000010H
  0008f	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00092	0f 29 45 80	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  00096	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0009b	c1 e2 00	 shl	 edx, 0
  0009e	0f 10 45 80	 movups	 xmm0, XMMWORD PTR $T3[ebp]
  000a2	0f 11 44 15 b0	 movups	 XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1078
  000a7	8b 45 f8	 mov	 eax, DWORD PTR _pSource$[ebp]
  000aa	83 c0 20	 add	 eax, 32			; 00000020H
  000ad	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000b0	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000b7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000bc	d1 e1		 shl	 ecx, 1
  000be	0f 10 85 70 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  000c5	0f 11 44 0d b0	 movups	 XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1079
  000ca	8b 55 f8	 mov	 edx, DWORD PTR _pSource$[ebp]
  000cd	83 c2 30	 add	 edx, 48			; 00000030H
  000d0	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  000d3	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  000da	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000df	6b c8 03	 imul	 ecx, eax, 3
  000e2	0f 10 85 60 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]
  000e9	0f 11 44 0d b0	 movups	 XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1080
  000ee	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _M$[ebp]
  000f2	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _M$[ebp+16]
  000f6	0f 28 55 d0	 movaps	 xmm2, XMMWORD PTR _M$[ebp+32]
  000fa	0f 28 5d e0	 movaps	 xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1083
  000fe	52		 push	 edx
  000ff	8b cd		 mov	 ecx, ebp
  00101	50		 push	 eax
  00102	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@XMLoadFloa
  00108	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010d	58		 pop	 eax
  0010e	5a		 pop	 edx
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00114	33 cd		 xor	 ecx, ebp
  00116	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	8b e3		 mov	 esp, ebx
  00120	5b		 pop	 ebx
  00121	c3		 ret	 0
  00122	8b ff		 npad	 2
$LN6@XMLoadFloa:
  00124	01 00 00 00	 DD	 1
  00128	00 00 00 00	 DD	 $LN5@XMLoadFloa
$LN5@XMLoadFloa:
  0012c	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00130	40 00 00 00	 DD	 64			; 00000040H
  00134	00 00 00 00	 DD	 $LN4@XMLoadFloa
$LN4@XMLoadFloa:
  00138	4d		 DB	 77			; 0000004dH
  00139	00		 DB	 0
?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ENDP ; DirectX::XMLoadFloat4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
_xy$ = -128						; size = 16
$T3 = -112						; size = 16
_z$ = -96						; size = 16
$T4 = -80						; size = 16
_y$ = -64						; size = 16
$T5 = -48						; size = 16
_x$ = -32						; size = 16
_pSource$ = -4						; size = 4
?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z PROC ; DirectX::XMLoadFloat3, COMDAT
; _pSource$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 514
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 54 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-172]
  00025	b9 2b 00 00 00	 mov	 ecx, 43			; 0000002bH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	89 4d fc	 mov	 DWORD PTR _pSource$[ebp], ecx
; Line 515
  00035	83 7d fc 00	 cmp	 DWORD PTR _pSource$[ebp], 0
  00039	75 21		 jne	 SHORT $LN3@XMLoadFloa
  0003b	8b f4		 mov	 esi, esp
  0003d	68 03 02 00 00	 push	 515			; 00000203H
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@XMLoadFloa:
; Line 529
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _pSource$[ebp]
  0005f	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00063	0f 29 45 d0	 movaps	 XMMWORD PTR $T5[ebp], xmm0
  00067	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T5[ebp]
  0006b	0f 29 45 e0	 movaps	 XMMWORD PTR _x$[ebp], xmm0
; Line 530
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _pSource$[ebp]
  00072	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00077	0f 29 45 b0	 movaps	 XMMWORD PTR $T4[ebp], xmm0
  0007b	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T4[ebp]
  0007f	0f 29 45 c0	 movaps	 XMMWORD PTR _y$[ebp], xmm0
; Line 531
  00083	8b 45 fc	 mov	 eax, DWORD PTR _pSource$[ebp]
  00086	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0008b	0f 29 45 90	 movaps	 XMMWORD PTR $T3[ebp], xmm0
  0008f	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T3[ebp]
  00093	0f 29 45 a0	 movaps	 XMMWORD PTR _z$[ebp], xmm0
; Line 532
  00097	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _x$[ebp]
  0009b	0f 14 45 c0	 unpcklps xmm0, XMMWORD PTR _y$[ebp]
  0009f	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T2[ebp], xmm0
  000a6	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T2[ebp]
  000ad	0f 29 45 80	 movaps	 XMMWORD PTR _xy$[ebp], xmm0
; Line 533
  000b1	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _z$[ebp]
  000b5	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _xy$[ebp]
  000b9	0f 16 c8	 movlhps xmm1, xmm0
  000bc	0f 29 8d 60 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm1
  000c3	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T1[ebp]
; Line 536
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	8b e3		 mov	 esp, ebx
  000d1	5b		 pop	 ebx
  000d2	c3		 ret	 0
?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ENDP ; DirectX::XMLoadFloat3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT4X4@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMFLOAT4X4@DirectX@@QAE@XZ PROC			; DirectX::XMFLOAT4X4::XMFLOAT4X4, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 716
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0XMFLOAT4X4@DirectX@@QAE@XZ ENDP			; DirectX::XMFLOAT4X4::XMFLOAT4X4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Float3$ = 8						; size = 4
??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z PROC		; DirectX::XMFLOAT3::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 527
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _Float3$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 10		 mov	 DWORD PTR [eax], edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _Float3$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _Float3$[ebp]
  0002a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002d	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ENDP		; DirectX::XMFLOAT3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT3@DirectX@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0XMFLOAT3@DirectX@@QAE@MMM@Z PROC			; DirectX::XMFLOAT3::XMFLOAT3, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 524
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __x$[ebp]
  00016	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __y$[ebp]
  00022	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00027	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR __z$[ebp]
  0002f	f3 0f 11 42 08	 movss	 DWORD PTR [edx+8], xmm0
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 0c 00	 ret	 12			; 0000000cH
??0XMFLOAT3@DirectX@@QAE@MMM@Z ENDP			; DirectX::XMFLOAT3::XMFLOAT3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT3@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMFLOAT3@DirectX@@QAE@XZ PROC			; DirectX::XMFLOAT3::XMFLOAT3, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 523
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0XMFLOAT3@DirectX@@QAE@XZ ENDP			; DirectX::XMFLOAT3::XMFLOAT3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 64
$T2 = -160						; size = 64
_this$ = -92						; size = 4
___$ReturnUdt$ = -88					; size = 4
_M$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z PROC		; DirectX::XMMATRIX::operator*, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = edx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 3091
  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	51		 push	 ecx
  0001f	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00025	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  0002a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002f	f3 ab		 rep stosd
  00031	59		 pop	 ecx
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003c	0f 29 5d e0	 movaps	 XMMWORD PTR _M$[ebp+48], xmm3
  00040	0f 29 55 d0	 movaps	 XMMWORD PTR _M$[ebp+32], xmm2
  00044	0f 29 4d c0	 movaps	 XMMWORD PTR _M$[ebp+16], xmm1
  00048	0f 29 45 b0	 movaps	 XMMWORD PTR _M$[ebp], xmm0
  0004c	89 55 a8	 mov	 DWORD PTR ___$ReturnUdt$[ebp], edx
  0004f	89 4d a4	 mov	 DWORD PTR _this$[ebp], ecx
; Line 3092
  00052	8b 45 a4	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8d 4d b0	 lea	 ecx, DWORD PTR _M$[ebp]
  00058	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  0005b	0f 28 48 10	 movaps	 xmm1, XMMWORD PTR [eax+16]
  0005f	0f 28 50 20	 movaps	 xmm2, XMMWORD PTR [eax+32]
  00063	0f 28 58 30	 movaps	 xmm3, XMMWORD PTR [eax+48]
  00067	e8 00 00 00 00	 call	 ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
  0006c	0f 29 9d 50 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+48], xmm3
  00073	0f 29 95 40 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+32], xmm2
  0007a	0f 29 8d 30 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp+16], xmm1
  00081	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR $T1[ebp], xmm0
  00088	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0008d	8d b5 20 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00093	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR $T2[ebp]
  00099	f3 a5		 rep movsd
  0009b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000a0	8d b5 60 ff ff
	ff		 lea	 esi, DWORD PTR $T2[ebp]
  000a6	8b 7d a8	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  000a9	f3 a5		 rep movsd
  000ab	8b 45 a8	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 3093
  000ae	52		 push	 edx
  000af	8b cd		 mov	 ecx, ebp
  000b1	50		 push	 eax
  000b2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@operator
  000b8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bd	58		 pop	 eax
  000be	5a		 pop	 edx
  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c4	33 cd		 xor	 ecx, ebp
  000c6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	8b e3		 mov	 esp, ebx
  000d0	5b		 pop	 ebx
  000d1	c3		 ret	 0
  000d2	8b ff		 npad	 2
$LN5@operator:
  000d4	01 00 00 00	 DD	 1
  000d8	00 00 00 00	 DD	 $LN4@operator
$LN4@operator:
  000dc	b0 ff ff ff	 DD	 -80			; ffffffb0H
  000e0	40 00 00 00	 DD	 64			; 00000040H
  000e4	00 00 00 00	 DD	 $LN3@operator
$LN3@operator:
  000e8	4d		 DB	 77			; 0000004dH
  000e9	00		 DB	 0
??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ENDP		; DirectX::XMMATRIX::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_M$ = 8							; size = 4
??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z PROC		; DirectX::XMMATRIX::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 444
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00013	6b c8 00	 imul	 ecx, eax, 0
  00016	03 4d 08	 add	 ecx, DWORD PTR _M$[ebp]
  00019	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00024	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00027	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0002a	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0002f	c1 e1 00	 shl	 ecx, 0
  00032	03 4d 08	 add	 ecx, DWORD PTR _M$[ebp]
  00035	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0003a	c1 e2 00	 shl	 edx, 0
  0003d	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  00040	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00043	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  00046	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004b	d1 e0		 shl	 eax, 1
  0004d	03 45 08	 add	 eax, DWORD PTR _M$[ebp]
  00050	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00055	d1 e1		 shl	 ecx, 1
  00057	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  0005a	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0005d	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00060	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00065	6b c2 03	 imul	 eax, edx, 3
  00068	03 45 08	 add	 eax, DWORD PTR _M$[ebp]
  0006b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00070	6b d1 03	 imul	 edx, ecx, 3
  00073	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  00076	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00079	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z ENDP		; DirectX::XMMATRIX::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMMATRIX@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMMATRIX@DirectX@@QAE@XZ PROC			; DirectX::XMMATRIX::XMMATRIX, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 431
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0XMMATRIX@DirectX@@QAE@XZ ENDP			; DirectX::XMMATRIX::XMMATRIX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ PROC		; DirectX::XMVECTORI32::operator __m128, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 330
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00017	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ENDP		; DirectX::XMVECTORI32::operator __m128
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ PROC		; DirectX::XMVECTORF32::operator __m128, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 314
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00017	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ENDP		; DirectX::XMVECTORF32::operator __m128
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new.h
; Line 105
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new.h
; Line 103
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __Where$[ebp]
  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?wcsrchr@@YAPA_WPA_W_W@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__Ch$ = 12						; size = 2
?wcsrchr@@YAPA_WPA_W_W@Z PROC				; wcsrchr, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\string.h
; Line 387
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	0f b7 45 0c	 movzx	 eax, WORD PTR __Ch$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Str$[ebp]
  0000e	51		 push	 ecx
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcsrchr
  00015	83 c4 08	 add	 esp, 8
  00018	3b f4		 cmp	 esi, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5e		 pop	 esi
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?wcsrchr@@YAPA_WPA_W_W@Z ENDP				; wcsrchr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
$LN2@vector:
  00004	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00007	83 e8 01	 sub	 eax, 1
  0000a	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  0000d	78 1a		 js	 SHORT $LN3@vector
  0000f	8b f4		 mov	 esi, esp
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00014	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00021	03 4d 0c	 add	 ecx, DWORD PTR ___s$[ebp]
  00024	89 4d 08	 mov	 DWORD PTR ___t$[ebp], ecx
  00027	eb db		 jmp	 SHORT $LN2@vector
$LN3@vector:
  00029	5e		 pop	 esi
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	5d		 pop	 ebp
  00032	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
