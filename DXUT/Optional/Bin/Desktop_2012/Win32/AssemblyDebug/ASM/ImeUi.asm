; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	D:\Engine Class\Assignment 1\Scratch\DXSSE\DXUT\Optional\ImeUi.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__GUID_aa80e801_2021_11d2_93e0_0060b067b86e
PUBLIC	?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA ; _GetReadingString
PUBLIC	?_ShowReadingWindow@@3P6GHPAUHIMC__@@H@ZA	; _ShowReadingWindow
PUBLIC	?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A	; CTsfUiLessMode::m_tm
PUBLIC	?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA	; CTsfUiLessMode::m_dwUIElementSinkCookie
PUBLIC	?m_dwAlpnSinkCookie@CTsfUiLessMode@@1KA		; CTsfUiLessMode::m_dwAlpnSinkCookie
PUBLIC	?m_dwOpenModeSinkCookie@CTsfUiLessMode@@1KA	; CTsfUiLessMode::m_dwOpenModeSinkCookie
PUBLIC	?m_dwConvModeSinkCookie@CTsfUiLessMode@@1KA	; CTsfUiLessMode::m_dwConvModeSinkCookie
PUBLIC	?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
PUBLIC	?m_nCandidateRefCount@CTsfUiLessMode@@1HA	; CTsfUiLessMode::m_nCandidateRefCount
PUBLIC	?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA		; ImeUiCallback_DrawRect
PUBLIC	?ImeUiCallback_Malloc@@3P6APAXI@ZA		; ImeUiCallback_Malloc
PUBLIC	?ImeUiCallback_Free@@3P6AXPAX@ZA		; ImeUiCallback_Free
PUBLIC	?ImeUiCallback_DrawFans@@3P6GXPBUIMEUI_VERTEX@@I@ZA ; ImeUiCallback_DrawFans
PUBLIC	?ImeUiCallback_OnChar@@3P6GX_W@ZA		; ImeUiCallback_OnChar
PUBLIC	__GUID_87955690_e627_11d2_8ddb_00105a2799b5
PUBLIC	_GUID_TS_SERVICE_DATAOBJECT
PUBLIC	_GUID_TS_SERVICE_ACCESSIBLE
PUBLIC	_GUID_TS_SERVICE_ACTIVEX
PUBLIC	__GUID_3e90ade3_7594_4cb0_bb58_69628f5f458c
PUBLIC	__GUID_4ea48a35_60ae_446f_8fd6_e6a8d82459f7
PUBLIC	__GUID_ea1ea136_19df_11d7_a6d2_00065b84435c
PUBLIC	__GUID_71c6e74e_0f28_11d8_a82a_00065b84435c
PUBLIC	__GUID_743abd5f_f26d_48df_8cc5_238492419b64
PUBLIC	__GUID_ea1ea139_19df_11d7_a6d2_00065b84435c
PUBLIC	__GUID_ea1ea138_19df_11d7_a6d2_00065b84435c
PUBLIC	_TF_PROFILE_NEWPHONETIC
PUBLIC	_TF_PROFILE_PHONETIC
PUBLIC	_TF_PROFILE_NEWCHANGJIE
PUBLIC	_TF_PROFILE_CHANGJIE
PUBLIC	_TF_PROFILE_NEWQUICK
PUBLIC	_TF_PROFILE_QUICK
PUBLIC	_TF_PROFILE_CANTONESE
PUBLIC	_TF_PROFILE_PINYIN
PUBLIC	_TF_PROFILE_SIMPLEFAST
PUBLIC	_TF_PROFILE_WUBI
PUBLIC	_TF_PROFILE_DAYI
PUBLIC	_TF_PROFILE_ARRAY
PUBLIC	_TF_PROFILE_YI
PUBLIC	_TF_PROFILE_TIGRINYA
PUBLIC	__GUID_ea1ea135_19df_11d7_a6d2_00065b84435c
PUBLIC	__GUID_1f02b6c5_7842_4ee6_8a0b_9a24183a95ca
PUBLIC	__GUID_71c6e74c_0f28_11d8_a82a_00065b84435c
PUBLIC	?gSkinCompStr@@3U_SkinCompStr@@A		; gSkinCompStr
_BSS	SEGMENT
?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA DD 01H DUP (?) ; _GetReadingString
?_ShowReadingWindow@@3P6GHPAUHIMC__@@H@ZA DD 01H DUP (?) ; _ShowReadingWindow
_g_bImeEnabled DB 01H DUP (?)
	ALIGN	4

_g_IMECursorBytes DD 01H DUP (?)
_g_IMECursorChars DD 01H DUP (?)
_g_bDisableImeCompletely DD 01H DUP (?)
_g_bReadingWindow DB 01H DUP (?)
	ALIGN	4

_g_bHorizontalReading DB 01H DUP (?)
	ALIGN	4

_g_uCaretBlinkTime DD 01H DUP (?)
_g_uCaretBlinkLast DD 01H DUP (?)
_g_bCaretDraw DB 01H DUP (?)
	ALIGN	4

_bIsSendingKeyMessage DB 01H DUP (?)
	ALIGN	4

_g_bInitialized DB 01H DUP (?)
	ALIGN	4

_g_bCandList DB	01H DUP (?)
	ALIGN	4

_g_bUILessMode DB 01H DUP (?)
	ALIGN	4

_g_hImmDll DD	01H DUP (?)
_g_dwState DD	01H DUP (?)
_swirl	DD	01H DUP (?)
_g_hklCurrent DD 01H DUP (?)
_g_uCodePage DD	01H DUP (?)
?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A DD 01H DUP (?) ; CTsfUiLessMode::m_tm
?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A DD 01H DUP (?) ; CTsfUiLessMode::m_TsfSink
?m_nCandidateRefCount@CTsfUiLessMode@@1HA DD 01H DUP (?) ; CTsfUiLessMode::m_nCandidateRefCount
?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA DD 01H DUP (?)	; ImeUiCallback_DrawRect
?ImeUiCallback_Malloc@@3P6APAXI@ZA DD 01H DUP (?)	; ImeUiCallback_Malloc
?ImeUiCallback_Free@@3P6AXPAX@ZA DD 01H DUP (?)		; ImeUiCallback_Free
?ImeUiCallback_DrawFans@@3P6GXPBUIMEUI_VERTEX@@I@ZA DD 01H DUP (?) ; ImeUiCallback_DrawFans
?ImeUiCallback_OnChar@@3P6GX_W@ZA DD 01H DUP (?)	; ImeUiCallback_OnChar
?gSkinCompStr@@3U_SkinCompStr@@A DB 014H DUP (?)	; gSkinCompStr
_BSS	ENDS
;	COMDAT __GUID_71c6e74c_0f28_11d8_a82a_00065b84435c
CONST	SEGMENT
__GUID_71c6e74c_0f28_11d8_a82a_00065b84435c DD 071c6e74cH
	DW	0f28H
	DW	011d8H
	DB	0a8H
	DB	02aH
	DB	00H
	DB	06H
	DB	05bH
	DB	084H
	DB	043H
	DB	05cH
CONST	ENDS
;	COMDAT __GUID_1f02b6c5_7842_4ee6_8a0b_9a24183a95ca
CONST	SEGMENT
__GUID_1f02b6c5_7842_4ee6_8a0b_9a24183a95ca DD 01f02b6c5H
	DW	07842H
	DW	04ee6H
	DB	08aH
	DB	0bH
	DB	09aH
	DB	024H
	DB	018H
	DB	03aH
	DB	095H
	DB	0caH
CONST	ENDS
;	COMDAT __GUID_ea1ea135_19df_11d7_a6d2_00065b84435c
CONST	SEGMENT
__GUID_ea1ea135_19df_11d7_a6d2_00065b84435c DD 0ea1ea135H
	DW	019dfH
	DW	011d7H
	DB	0a6H
	DB	0d2H
	DB	00H
	DB	06H
	DB	05bH
	DB	084H
	DB	043H
	DB	05cH
CONST	ENDS
;	COMDAT _TF_PROFILE_TIGRINYA
CONST	SEGMENT
_TF_PROFILE_TIGRINYA DD 03cab88b7H
	DW	0cc3eH
	DW	046a6H
	DB	097H
	DB	065H
	DB	0b7H
	DB	072H
	DB	0adH
	DB	077H
	DB	061H
	DB	0ffH
CONST	ENDS
;	COMDAT _TF_PROFILE_YI
CONST	SEGMENT
_TF_PROFILE_YI DD 0409c8376H
	DW	07bH
	DW	04357H
	DB	0aeH
	DB	08eH
	DB	026H
	DB	031H
	DB	06eH
	DB	0e3H
	DB	0fbH
	DB	0dH
CONST	ENDS
;	COMDAT _TF_PROFILE_ARRAY
CONST	SEGMENT
_TF_PROFILE_ARRAY DD 0d38eff65H
	DW	0aa46H
	DW	04fd5H
	DB	091H
	DB	0a7H
	DB	067H
	DB	084H
	DB	05fH
	DB	0b0H
	DB	02fH
	DB	05bH
CONST	ENDS
;	COMDAT _TF_PROFILE_DAYI
CONST	SEGMENT
_TF_PROFILE_DAYI DD 037b2c25H
	DW	0480cH
	DW	04d7fH
	DB	0b0H
	DB	027H
	DB	0d6H
	DB	0caH
	DB	06bH
	DB	069H
	DB	078H
	DB	08aH
CONST	ENDS
;	COMDAT _TF_PROFILE_WUBI
CONST	SEGMENT
_TF_PROFILE_WUBI DD 082590c13H
	DW	0f4ddH
	DW	044f4H
	DB	0baH
	DB	01dH
	DB	086H
	DB	067H
	DB	024H
	DB	06fH
	DB	0dfH
	DB	08eH
CONST	ENDS
;	COMDAT _TF_PROFILE_SIMPLEFAST
CONST	SEGMENT
_TF_PROFILE_SIMPLEFAST DD 0fa550b04H
	DW	05ad7H
	DW	0411fH
	DB	0a5H
	DB	0acH
	DB	0caH
	DB	03H
	DB	08eH
	DB	0c5H
	DB	015H
	DB	0d7H
CONST	ENDS
;	COMDAT _TF_PROFILE_PINYIN
CONST	SEGMENT
_TF_PROFILE_PINYIN DD 0f3ba9077H
	DW	06c7eH
	DW	011d4H
	DB	097H
	DB	0faH
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT _TF_PROFILE_CANTONESE
CONST	SEGMENT
_TF_PROFILE_CANTONESE DD 0aec109cH
	DW	07e96H
	DW	011d4H
	DB	0b2H
	DB	0efH
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT _TF_PROFILE_QUICK
CONST	SEGMENT
_TF_PROFILE_QUICK DD 06024b45fH
	DW	05c54H
	DW	011d4H
	DB	0b9H
	DB	021H
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT _TF_PROFILE_NEWQUICK
CONST	SEGMENT
_TF_PROFILE_NEWQUICK DD 0b883ba0H
	DW	0c1c7H
	DW	011d4H
	DB	087H
	DB	0f9H
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT _TF_PROFILE_CHANGJIE
CONST	SEGMENT
_TF_PROFILE_CHANGJIE DD 04bdf9f03H
	DW	0c7d3H
	DW	011d4H
	DB	0b2H
	DB	0abH
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT _TF_PROFILE_NEWCHANGJIE
CONST	SEGMENT
_TF_PROFILE_NEWCHANGJIE DD 0f3ba907aH
	DW	06c7eH
	DW	011d4H
	DB	097H
	DB	0faH
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT _TF_PROFILE_PHONETIC
CONST	SEGMENT
_TF_PROFILE_PHONETIC DD 0761309deH
	DW	0317aH
	DW	011d4H
	DB	09bH
	DB	05dH
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT _TF_PROFILE_NEWPHONETIC
CONST	SEGMENT
_TF_PROFILE_NEWPHONETIC DD 0b2f9c502H
	DW	01742H
	DW	011d4H
	DB	097H
	DB	090H
	DB	00H
	DB	080H
	DB	0c8H
	DB	082H
	DB	068H
	DB	07eH
CONST	ENDS
;	COMDAT __GUID_ea1ea138_19df_11d7_a6d2_00065b84435c
CONST	SEGMENT
__GUID_ea1ea138_19df_11d7_a6d2_00065b84435c DD 0ea1ea138H
	DW	019dfH
	DW	011d7H
	DB	0a6H
	DB	0d2H
	DB	00H
	DB	06H
	DB	05bH
	DB	084H
	DB	043H
	DB	05cH
CONST	ENDS
;	COMDAT __GUID_ea1ea139_19df_11d7_a6d2_00065b84435c
CONST	SEGMENT
__GUID_ea1ea139_19df_11d7_a6d2_00065b84435c DD 0ea1ea139H
	DW	019dfH
	DW	011d7H
	DB	0a6H
	DB	0d2H
	DB	00H
	DB	06H
	DB	05bH
	DB	084H
	DB	043H
	DB	05cH
CONST	ENDS
;	COMDAT __GUID_743abd5f_f26d_48df_8cc5_238492419b64
CONST	SEGMENT
__GUID_743abd5f_f26d_48df_8cc5_238492419b64 DD 0743abd5fH
	DW	0f26dH
	DW	048dfH
	DB	08cH
	DB	0c5H
	DB	023H
	DB	084H
	DB	092H
	DB	041H
	DB	09bH
	DB	064H
CONST	ENDS
;	COMDAT __GUID_71c6e74e_0f28_11d8_a82a_00065b84435c
CONST	SEGMENT
__GUID_71c6e74e_0f28_11d8_a82a_00065b84435c DD 071c6e74eH
	DW	0f28H
	DW	011d8H
	DB	0a8H
	DB	02aH
	DB	00H
	DB	06H
	DB	05bH
	DB	084H
	DB	043H
	DB	05cH
CONST	ENDS
;	COMDAT __GUID_ea1ea136_19df_11d7_a6d2_00065b84435c
CONST	SEGMENT
__GUID_ea1ea136_19df_11d7_a6d2_00065b84435c DD 0ea1ea136H
	DW	019dfH
	DW	011d7H
	DB	0a6H
	DB	0d2H
	DB	00H
	DB	06H
	DB	05bH
	DB	084H
	DB	043H
	DB	05cH
CONST	ENDS
;	COMDAT __GUID_4ea48a35_60ae_446f_8fd6_e6a8d82459f7
CONST	SEGMENT
__GUID_4ea48a35_60ae_446f_8fd6_e6a8d82459f7 DD 04ea48a35H
	DW	060aeH
	DW	0446fH
	DB	08fH
	DB	0d6H
	DB	0e6H
	DB	0a8H
	DB	0d8H
	DB	024H
	DB	059H
	DB	0f7H
CONST	ENDS
;	COMDAT __GUID_3e90ade3_7594_4cb0_bb58_69628f5f458c
CONST	SEGMENT
__GUID_3e90ade3_7594_4cb0_bb58_69628f5f458c DD 03e90ade3H
	DW	07594H
	DW	04cb0H
	DB	0bbH
	DB	058H
	DB	069H
	DB	062H
	DB	08fH
	DB	05fH
	DB	045H
	DB	08cH
CONST	ENDS
;	COMDAT _GUID_TS_SERVICE_ACTIVEX
CONST	SEGMENT
_GUID_TS_SERVICE_ACTIVEX DD 0ea937a50H
	DW	0c9a6H
	DW	04b7dH
	DB	089H
	DB	04aH
	DB	049H
	DB	0d9H
	DB	09bH
	DB	078H
	DB	048H
	DB	034H
CONST	ENDS
;	COMDAT _GUID_TS_SERVICE_ACCESSIBLE
CONST	SEGMENT
_GUID_TS_SERVICE_ACCESSIBLE DD 0f9786200H
	DW	0a5bfH
	DW	04a0fH
	DB	08cH
	DB	024H
	DB	0fbH
	DB	016H
	DB	0f5H
	DB	0d1H
	DB	0aaH
	DB	0bbH
CONST	ENDS
;	COMDAT _GUID_TS_SERVICE_DATAOBJECT
CONST	SEGMENT
_GUID_TS_SERVICE_DATAOBJECT DD 06086fbb5H
	DW	0e225H
	DW	046ceH
	DB	0a7H
	DB	070H
	DB	0c1H
	DB	0bbH
	DB	0d3H
	DB	0e0H
	DB	05dH
	DB	07bH
CONST	ENDS
;	COMDAT __GUID_87955690_e627_11d2_8ddb_00105a2799b5
CONST	SEGMENT
__GUID_87955690_e627_11d2_8ddb_00105a2799b5 DD 087955690H
	DW	0e627H
	DW	011d2H
	DB	08dH
	DB	0dbH
	DB	00H
	DB	010H
	DB	05aH
	DB	027H
	DB	099H
	DB	0b5H
CONST	ENDS
_DATA	SEGMENT
_g_bVerticalCand DB 01H
_g_bInsertMode DB 01H
	ORG $+2
_g_dwImeUiFlags DD 01H
_g_aszIndicator DD FLAT:$SG152772
	DD	FLAT:$SG152773
	DD	FLAT:$SG152774
	DD	FLAT:$SG152775
	DD	FLAT:$SG152776
?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA DD 0ffffffffH ; CTsfUiLessMode::m_dwUIElementSinkCookie
?m_dwAlpnSinkCookie@CTsfUiLessMode@@1KA DD 0ffffffffH	; CTsfUiLessMode::m_dwAlpnSinkCookie
?m_dwOpenModeSinkCookie@CTsfUiLessMode@@1KA DD 0ffffffffH ; CTsfUiLessMode::m_dwOpenModeSinkCookie
?m_dwConvModeSinkCookie@CTsfUiLessMode@@1KA DD 0ffffffffH ; CTsfUiLessMode::m_dwConvModeSinkCookie
	ORG $+4
_aHotKeys DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	05dH
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	038H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	059H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	02eH
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	076H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	078H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	079H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	07aH
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	07bH
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	071H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	072H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	073H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	074H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	079H
	DB	00H
	DB	01H
	DB	00H
	ORG $+1
	DD	075H
	DB	00H
	DB	01H
	DB	00H
	ORG $+1
	DD	076H
	DB	00H
	DB	01H
	DB	00H
	ORG $+1
	DD	077H
	DB	01H
	DB	01H
	DB	00H
	ORG $+1
	DD	079H
	DB	01H
	DB	01H
	DB	00H
	ORG $+1
	DD	07aH
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	01cH
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	020H
	DB	01H
	DB	00H
	DB	01H
	ORG $+1
	DD	0bcH
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DD	09H
_signature DB	'%%%IMEUILIB:070111%%%', 00H
	ORG $+2
_gSkinIME DD	00H
	DD	0404040H
	DD	0ff000000H
	DB	018H
	DB	0a0H
	DB	00H
	ORG $+1
	DD	00H
	DD	0ffffffffH
	DD	0ff000000H
	DD	00H
	DD	0ffff00H
	DD	0ffH
	DD	0ff00H
	DD	0ff0000H
	DD	0ff0000H
	DB	080H
	ORG $+3
	DD	00H
	DB	02H
	DB	01H
	ORG $+2
_DATA	ENDS
;	COMDAT __GUID_aa80e801_2021_11d2_93e0_0060b067b86e
CONST	SEGMENT
__GUID_aa80e801_2021_11d2_93e0_0060b067b86e DD 0aa80e801H
	DW	02021H
	DW	011d2H
	DB	093H
	DB	0e0H
	DB	00H
	DB	060H
	DB	0b0H
	DB	067H
	DB	0b8H
	DB	06eH
CONST	ENDS
CONST	SEGMENT
$SG153642 DB	'i', 00H, 'm', 00H, 'm', 00H, '3', 00H, '2', 00H, '.', 00H
	DB	'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H
$SG153646 DB	'ImmLockIMC', 00H
	ORG $+1
$SG153649 DB	'ImmUnlockIMC', 00H
	ORG $+3
$SG153652 DB	'ImmLockIMCC', 00H
$SG153655 DB	'ImmUnlockIMCC', 00H
	ORG $+2
$SG153660 DB	'ImmDisableTextFrameService', 00H
	ORG $+1
$SG153753 DB	'TINTLGNT.IME', 00H
	ORG $+3
$SG153754 DB	'CINTLGNT.IME', 00H
	ORG $+3
$SG153755 DB	'MSTCIPHA.IME', 00H
	ORG $+3
$SG153756 DB	'PINTLGNT.IME', 00H
	ORG $+3
$SG153757 DB	'MSSCIPYA.IME', 00H
	ORG $+3
$SG153764 DB	'\', 00H
	ORG $+2
$SG152772 DB	'A', 00H, 00H, 00H
$SG152773 DB	080H, '{', 00H, 00H
$SG152774 DB	'A~', 00H, 00H
$SG152775 DB	00H, 0acH, 00H, 00H
$SG152776 DB	'B0', 00H, 00H
$SG154017 DB	'I', 00H, 'm', 00H, 'e', 00H, 'U', 00H, 'i', 00H, '.', 00H
	DB	'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG154018 DB	'l', 00H, 'R', 00H, 'e', 00H, 't', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '2', 00H, 00H, 00H
$SG154027 DB	00H, 00H
	ORG $+2
$SG154028 DB	00H, 00H
	ORG $+2
$SG153077 DB	' ', 00H, 00H, 00H
$SG154105 DB	'software\microsoft\windows\currentversion\', 00H
	ORG $+1
$SG154109 DB	'MSTCIPH', 00H
$SG154110 DB	'TINTLGNT', 00H
	ORG $+3
$SG154121 DB	'keyboard mapping', 00H
	ORG $+3
$SG153156 DB	'I', 00H, 'm', 00H, 'e', 00H, 'U', 00H, 'i', 00H, '.', 00H
	DB	'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
$SG153157 DB	'g', 00H, '_', 00H, 'C', 00H, 'a', 00H, 'r', 00H, 'e', 00H
	DB	't', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '.', 00H, 'p'
	DB	00H, 'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p'
	DB	00H, 't', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG154210 DB	'GetReadingString', 00H
	ORG $+3
$SG154214 DB	'ShowReadingWindow', 00H
	ORG $+2
$SG153194 DB	'%', 00H, 'd', 00H, 00H, 00H
CONST	ENDS
PUBLIC	_IsEqualGUID
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?ImeUi_Initialize@@YA_NPAUHWND__@@_N@Z		; ImeUi_Initialize
PUBLIC	?ImeUi_Uninitialize@@YAXXZ			; ImeUi_Uninitialize
PUBLIC	?ImeUi_SetAppearance@@YAXPBUIMEUI_APPEARANCE@@@Z ; ImeUi_SetAppearance
PUBLIC	?ImeUi_GetAppearance@@YAXPAUIMEUI_APPEARANCE@@@Z ; ImeUi_GetAppearance
PUBLIC	?ImeUi_IgnoreHotKey@@YA_NPBUtagMSG@@@Z		; ImeUi_IgnoreHotKey
PUBLIC	?ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z ; ImeUi_ProcessMessage
PUBLIC	?ImeUi_SetScreenDimension@@YAXII@Z		; ImeUi_SetScreenDimension
PUBLIC	?ImeUi_RenderUI@@YAX_N0@Z			; ImeUi_RenderUI
PUBLIC	?ImeUi_SetCaretPosition@@YAXII@Z		; ImeUi_SetCaretPosition
PUBLIC	?ImeUi_SetCompStringAppearance@@YAXPAVCImeUiFont_Base@@KPBUtagRECT@@@Z ; ImeUi_SetCompStringAppearance
PUBLIC	?ImeUi_GetCaretStatus@@YA_NXZ			; ImeUi_GetCaretStatus
PUBLIC	?ImeUi_SetInsertMode@@YAX_N@Z			; ImeUi_SetInsertMode
PUBLIC	?ImeUi_SetState@@YAXK@Z				; ImeUi_SetState
PUBLIC	?ImeUi_GetState@@YAKXZ				; ImeUi_GetState
PUBLIC	?ImeUi_EnableIme@@YAX_N@Z			; ImeUi_EnableIme
PUBLIC	?ImeUi_IsEnabled@@YA_NXZ			; ImeUi_IsEnabled
PUBLIC	?ImeUi_FinalizeString@@YAX_N@Z			; ImeUi_FinalizeString
PUBLIC	?ImeUi_ToggleLanguageBar@@YAXH@Z		; ImeUi_ToggleLanguageBar
PUBLIC	?ImeUi_IsSendingKeyMessage@@YA_NXZ		; ImeUi_IsSendingKeyMessage
PUBLIC	?ImeUi_SetWindow@@YAXPAUHWND__@@@Z		; ImeUi_SetWindow
PUBLIC	?ImeUi_GetInputCodePage@@YAIXZ			; ImeUi_GetInputCodePage
PUBLIC	?ImeUi_GetFlags@@YAKXZ				; ImeUi_GetFlags
PUBLIC	?ImeUi_SetFlags@@YAXK_N@Z			; ImeUi_SetFlags
PUBLIC	?ImeUi_GetPrimaryLanguage@@YAGXZ		; ImeUi_GetPrimaryLanguage
PUBLIC	?ImeUi_GetImeId@@YAKI@Z				; ImeUi_GetImeId
PUBLIC	?ImeUi_GetLanguage@@YAGXZ			; ImeUi_GetLanguage
PUBLIC	?ImeUi_GetIndicatior@@YAPA_WXZ			; ImeUi_GetIndicatior
PUBLIC	?ImeUi_IsShowReadingWindow@@YA_NXZ		; ImeUi_IsShowReadingWindow
PUBLIC	?ImeUi_IsShowCandListWindow@@YA_NXZ		; ImeUi_IsShowCandListWindow
PUBLIC	?ImeUi_IsVerticalCand@@YA_NXZ			; ImeUi_IsVerticalCand
PUBLIC	?ImeUi_IsHorizontalReading@@YA_NXZ		; ImeUi_IsHorizontalReading
PUBLIC	?ImeUi_GetCandidate@@YAPA_WI@Z			; ImeUi_GetCandidate
PUBLIC	?ImeUi_GetCompositionString@@YAPA_WXZ		; ImeUi_GetCompositionString
PUBLIC	?ImeUi_GetCandidateSelection@@YAKXZ		; ImeUi_GetCandidateSelection
PUBLIC	?ImeUi_GetCandidateCount@@YAKXZ			; ImeUi_GetCandidateCount
PUBLIC	?ImeUi_GetCompStringAttr@@YAPAEXZ		; ImeUi_GetCompStringAttr
PUBLIC	?ImeUi_GetImeCursorChars@@YAKXZ			; ImeUi_GetImeCursorChars
PUBLIC	??0ITfCompartmentEventSink@@QAE@XZ		; ITfCompartmentEventSink::ITfCompartmentEventSink
PUBLIC	??0ITfInputProcessorProfileActivationSink@@QAE@XZ ; ITfInputProcessorProfileActivationSink::ITfInputProcessorProfileActivationSink
PUBLIC	??0ITfUIElementSink@@QAE@XZ			; ITfUIElementSink::ITfUIElementSink
PUBLIC	??0CDisableCicero@@QAE@XZ			; CDisableCicero::CDisableCicero
PUBLIC	??1CDisableCicero@@QAE@XZ			; CDisableCicero::~CDisableCicero
PUBLIC	?Initialize@CDisableCicero@@QAEXXZ		; CDisableCicero::Initialize
PUBLIC	?Uninitialize@CDisableCicero@@QAEXXZ		; CDisableCicero::Uninitialize
PUBLIC	?DisableCiceroOnThisWnd@CDisableCicero@@QAEXPAUHWND__@@@Z ; CDisableCicero::DisableCiceroOnThisWnd
PUBLIC	?ImeUi_SetSupportLevel@@YAXK@Z			; ImeUi_SetSupportLevel
PUBLIC	?SendKeyMsg@@YAJPAUHWND__@@II@Z			; SendKeyMsg
PUBLIC	??0CUIElementSink@CTsfUiLessMode@@QAE@XZ	; CTsfUiLessMode::CUIElementSink::CUIElementSink
PUBLIC	??1CUIElementSink@CTsfUiLessMode@@QAE@XZ	; CTsfUiLessMode::CUIElementSink::~CUIElementSink
PUBLIC	?QueryInterface@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@PAPAX@Z ; CTsfUiLessMode::CUIElementSink::QueryInterface
PUBLIC	?AddRef@CUIElementSink@CTsfUiLessMode@@UAGKXZ	; CTsfUiLessMode::CUIElementSink::AddRef
PUBLIC	?Release@CUIElementSink@CTsfUiLessMode@@UAGKXZ	; CTsfUiLessMode::CUIElementSink::Release
PUBLIC	?BeginUIElement@CUIElementSink@CTsfUiLessMode@@UAGJKPAH@Z ; CTsfUiLessMode::CUIElementSink::BeginUIElement
PUBLIC	?UpdateUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z ; CTsfUiLessMode::CUIElementSink::UpdateUIElement
PUBLIC	?EndUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z ; CTsfUiLessMode::CUIElementSink::EndUIElement
PUBLIC	?OnActivated@CUIElementSink@CTsfUiLessMode@@UAGJKGABU_GUID@@00PAUHKL__@@K@Z ; CTsfUiLessMode::CUIElementSink::OnActivated
PUBLIC	?OnChange@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@@Z ; CTsfUiLessMode::CUIElementSink::OnChange
PUBLIC	??_GCUIElementSink@CTsfUiLessMode@@QAEPAXI@Z	; CTsfUiLessMode::CUIElementSink::`scalar deleting destructor'
PUBLIC	?MakeReadingInformationString@CTsfUiLessMode@@KAXPAUITfReadingInformationUIElement@@@Z ; CTsfUiLessMode::MakeReadingInformationString
PUBLIC	?MakeCandidateStrings@CTsfUiLessMode@@KAXPAUITfCandidateListUIElement@@@Z ; CTsfUiLessMode::MakeCandidateStrings
PUBLIC	?GetUIElement@CTsfUiLessMode@@KAPAUITfUIElement@@K@Z ; CTsfUiLessMode::GetUIElement
PUBLIC	?GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z ; CTsfUiLessMode::GetCompartments
PUBLIC	?SetupCompartmentSinks@CTsfUiLessMode@@KAHHPAUITfCompartment@@0@Z ; CTsfUiLessMode::SetupCompartmentSinks
PUBLIC	?SetupSinks@CTsfUiLessMode@@SAHXZ		; CTsfUiLessMode::SetupSinks
PUBLIC	?ReleaseSinks@CTsfUiLessMode@@SAXXZ		; CTsfUiLessMode::ReleaseSinks
PUBLIC	?CurrentInputLocaleIsIme@CTsfUiLessMode@@SAHXZ	; CTsfUiLessMode::CurrentInputLocaleIsIme
PUBLIC	?UpdateImeState@CTsfUiLessMode@@SAXH@Z		; CTsfUiLessMode::UpdateImeState
PUBLIC	?EnableUiUpdates@CTsfUiLessMode@@SAX_N@Z	; CTsfUiLessMode::EnableUiUpdates
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	??$min@K@std@@YAABKABK0@Z			; std::min<unsigned long>
PUBLIC	??$_Debug_lt@ABIABI@std@@YA_NABI0PB_WI@Z	; std::_Debug_lt<unsigned int const &,unsigned int const &>
PUBLIC	??$_Debug_lt@ABKABK@std@@YA_NABK0PB_WI@Z	; std::_Debug_lt<unsigned long const &,unsigned long const &>
PUBLIC	??$forward@ABI@std@@YAABIABI@Z			; std::forward<unsigned int const &>
PUBLIC	??$_Debug_lt_pred@U?$less@X@std@@ABIABI@std@@YA_NU?$less@X@0@ABI1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,unsigned int const &,unsigned int const &>
PUBLIC	??$forward@ABK@std@@YAABKABK@Z			; std::forward<unsigned long const &>
PUBLIC	??$_Debug_lt_pred@U?$less@X@std@@ABKABK@std@@YA_NU?$less@X@0@ABK1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,unsigned long const &,unsigned long const &>
PUBLIC	??$?RABIABI@?$less@X@std@@QBE_NABI0@Z		; std::less<void>::operator()<unsigned int const &,unsigned int const &>
PUBLIC	??$?RABKABK@?$less@X@std@@QBE_NABK0@Z		; std::less<void>::operator()<unsigned long const &,unsigned long const &>
PUBLIC	?QueryInterface@CUIElementSink@CTsfUiLessMode@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:CTsfUiLessMode::CUIElementSink::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CUIElementSink@CTsfUiLessMode@@W3AGKXZ	; [thunk]:CTsfUiLessMode::CUIElementSink::AddRef`adjustor{4}'
PUBLIC	?Release@CUIElementSink@CTsfUiLessMode@@W3AGKXZ	; [thunk]:CTsfUiLessMode::CUIElementSink::Release`adjustor{4}'
PUBLIC	?QueryInterface@CUIElementSink@CTsfUiLessMode@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:CTsfUiLessMode::CUIElementSink::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CUIElementSink@CTsfUiLessMode@@W7AGKXZ	; [thunk]:CTsfUiLessMode::CUIElementSink::AddRef`adjustor{8}'
PUBLIC	?Release@CUIElementSink@CTsfUiLessMode@@W7AGKXZ	; [thunk]:CTsfUiLessMode::CUIElementSink::Release`adjustor{8}'
PUBLIC	??_7CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@ ; CTsfUiLessMode::CUIElementSink::`vftable'
PUBLIC	??_7CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@ ; CTsfUiLessMode::CUIElementSink::`vftable'
PUBLIC	??_7CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@ ; CTsfUiLessMode::CUIElementSink::`vftable'
PUBLIC	??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ ; `string'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUITfCompartmentEventSink@@@8		; ITfCompartmentEventSink `RTTI Type Descriptor'
PUBLIC	??_R3ITfCompartmentEventSink@@8			; ITfCompartmentEventSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ITfCompartmentEventSink@@8			; ITfCompartmentEventSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ITfCompartmentEventSink@@8	; ITfCompartmentEventSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUITfInputProcessorProfileActivationSink@@@8 ; ITfInputProcessorProfileActivationSink `RTTI Type Descriptor'
PUBLIC	??_R3ITfInputProcessorProfileActivationSink@@8	; ITfInputProcessorProfileActivationSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ITfInputProcessorProfileActivationSink@@8	; ITfInputProcessorProfileActivationSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ITfInputProcessorProfileActivationSink@@8 ; ITfInputProcessorProfileActivationSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUITfUIElementSink@@@8			; ITfUIElementSink `RTTI Type Descriptor'
PUBLIC	??_R3ITfUIElementSink@@8			; ITfUIElementSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ITfUIElementSink@@8			; ITfUIElementSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ITfUIElementSink@@8		; ITfUIElementSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@ ; CTsfUiLessMode::CUIElementSink::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCUIElementSink@CTsfUiLessMode@@@8	; CTsfUiLessMode::CUIElementSink `RTTI Type Descriptor'
PUBLIC	??_R3CUIElementSink@CTsfUiLessMode@@8		; CTsfUiLessMode::CUIElementSink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CUIElementSink@CTsfUiLessMode@@8		; CTsfUiLessMode::CUIElementSink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CUIElementSink@CTsfUiLessMode@@8	; CTsfUiLessMode::CUIElementSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@ITfInputProcessorProfileActivationSink@@8 ; ITfInputProcessorProfileActivationSink::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@ITfCompartmentEventSink@@8		; ITfCompartmentEventSink::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R17?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R4CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@ ; CTsfUiLessMode::CUIElementSink::`RTTI Complete Object Locator'
PUBLIC	??_R4CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@ ; CTsfUiLessMode::CUIElementSink::`RTTI Complete Object Locator'
PUBLIC	__real@3f200000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@406f400000000000
PUBLIC	__real@40800000
PUBLIC	__real@40c90fda
PUBLIC	__real@41600000
PUBLIC	__real@42900000
PUBLIC	__real@42c00000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__imp__strcpy_s:PROC
EXTRN	__imp__strcat_s:PROC
EXTRN	__imp__wcscat_s:PROC
EXTRN	__imp__wcscpy_s:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryExA@12:PROC
EXTRN	__imp__LoadLibraryExW@12:PROC
EXTRN	__imp__GetKeyboardLayout@4:PROC
EXTRN	__imp__GetMessageA@16:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__SendMessageA@16:PROC
EXTRN	__imp__SendMessageW@16:PROC
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__CharNextW@4:PROC
EXTRN	__imp__GetFocus@0:PROC
EXTRN	__imp__GetKeyState@4:PROC
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	__imp__GetCaretBlinkTime@0:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp__CompareStringA@24:PROC
EXTRN	__imp__GetLocaleInfoA@16:PROC
EXTRN	__imp__IsDBCSLeadByteEx@8:PROC
EXTRN	_GetFileVersionInfoSizeA@8:PROC
EXTRN	_GetFileVersionInfoA@16:PROC
EXTRN	_VerQueryValueA@16:PROC
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__RegOpenKeyExA@20:PROC
EXTRN	__imp__RegQueryValueExA@24:PROC
EXTRN	__imp__CoUninitialize@0:PROC
EXTRN	__imp__CoInitializeEx@8:PROC
EXTRN	__imp__CoCreateInstance@20:PROC
EXTRN	__imp__CoInitialize@4:PROC
EXTRN	__imp__SysFreeString@4:PROC
EXTRN	__imp__VariantClear@4:PROC
EXTRN	_ImmGetDefaultIMEWnd@4:PROC
EXTRN	_ImmGetIMEFileNameA@12:PROC
EXTRN	_ImmIsIME@4:PROC
EXTRN	_ImmSimulateHotKey@8:PROC
EXTRN	_ImmGetContext@4:PROC
EXTRN	_ImmReleaseContext@8:PROC
EXTRN	_ImmAssociateContext@8:PROC
EXTRN	_ImmGetCompositionStringW@16:PROC
EXTRN	_ImmSetCompositionStringW@24:PROC
EXTRN	_ImmGetCandidateListW@16:PROC
EXTRN	_ImmGetConversionStatus@12:PROC
EXTRN	_ImmSetConversionStatus@12:PROC
EXTRN	_ImmGetOpenStatus@4:PROC
EXTRN	_ImmSetOpenStatus@8:PROC
EXTRN	_ImmNotifyIME@16:PROC
EXTRN	_ImmGetVirtualKey@4:PROC
EXTRN	__imp___wassert:PROC
EXTRN	??2@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new
EXTRN	??3@YAXPAXABUnothrow_t@std@@@Z:PROC		; operator delete
EXTRN	__imp__swprintf_s:PROC
EXTRN	__imp_?_Debug_message@std@@YAXPB_W0I@Z:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___libm_sse2_cosf:PROC
EXTRN	___libm_sse2_sinf:PROC
EXTRN	__ftoui3:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_IID_IUnknown:BYTE
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	_CLSID_TF_ThreadMgr:BYTE
EXTRN	_CLSID_TF_InputProcessorProfiles:BYTE
EXTRN	_CLSID_TF_LangBarMgr:BYTE
EXTRN	_GUID_COMPARTMENT_KEYBOARD_OPENCLOSE:BYTE
EXTRN	_GUID_TFCAT_TIP_KEYBOARD:BYTE
EXTRN	_IID_ITfCompartmentEventSink:BYTE
EXTRN	_IID_ITfCompartmentMgr:BYTE
EXTRN	_IID_ITfSource:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
	ALIGN	8

_g_disableCicero DQ 01H DUP (?)
_LeadByteTable DB 0100H DUP (?)
__ImmGetCompositionString DD 01H DUP (?)
__ImmGetCandidateList DD 01H DUP (?)
__ImmLockIMC DD	01H DUP (?)
__ImmUnlockIMC DD 01H DUP (?)
__ImmLockIMCC DD 01H DUP (?)
__ImmUnlockIMCC DD 01H DUP (?)
__SendCompString DD 01H DUP (?)
__SendMessage DD 01H DUP (?)
__GetCandidateList DD 01H DUP (?)
_g_hwndMain DD	01H DUP (?)
_g_hwndCurr DD	01H DUP (?)
_g_himcOrg DD	01H DUP (?)
_g_szCompositionString DW 0100H DUP (?)
_g_szCompAttrString DB 0100H DUP (?)
_g_szCandidate DW 0a00H DUP (?)
_g_dwSelection DD 01H DUP (?)
_g_dwCount DD	01H DUP (?)
_g_uCandPageSize DD 01H DUP (?)
_g_dwIMELevel DD 01H DUP (?)
_g_dwIMELevelSaved DD 01H DUP (?)
_g_szMultiLineCompString DW 0100H DUP (?)
_g_bChineseIME DB 01H DUP (?)
	ALIGN	4

_g_szReadingString DW 020H DUP (?)
_g_iReadingError DD 01H DUP (?)
_g_screenWidth DD 01H DUP (?)
_g_screenHeight DD 01H DUP (?)
_g_dwPrevFloat DD 01H DUP (?)
_g_osi	DB	094H DUP (?)
_g_dwCandX DD	01H DUP (?)
_g_dwCandY DD	01H DUP (?)
_g_dwCaretX DD	01H DUP (?)
_g_dwCaretY DD	01H DUP (?)
_g_hCompChar DD	01H DUP (?)
_g_iCandListIndexBase DD 01H DUP (?)
_g_CaretInfo DB	024H DUP (?)
_lastSwirl DQ	01H DUP (?)
_g_pszIndicatior DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ?uDigitWidth@?N@??DrawCandidateList@@YAXXZ@4KA
_BSS	SEGMENT
?uDigitWidth@?N@??DrawCandidateList@@YAXXZ@4KA DD 01H DUP (?) ; `DrawCandidateList'::`13'::uDigitWidth
_BSS	ENDS
;	COMDAT ?uDigitWidthList@?N@??DrawCandidateList@@YAXXZ@4PAKA
_BSS	SEGMENT
?uDigitWidthList@?N@??DrawCandidateList@@YAXXZ@4PAKA DD 0aH DUP (?) ; `DrawCandidateList'::`13'::uDigitWidthList
_BSS	ENDS
;	COMDAT ?pPrevFont@?N@??DrawCandidateList@@YAXXZ@4PAVCImeUiFont_Base@@A
_BSS	SEGMENT
?pPrevFont@?N@??DrawCandidateList@@YAXXZ@4PAVCImeUiFont_Base@@A DD 01H DUP (?) ; `DrawCandidateList'::`13'::pPrevFont
_BSS	ENDS
;	COMDAT ?bNoReentrance@?CL@??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4_NA
_BSS	SEGMENT
?bNoReentrance@?CL@??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4_NA DB 01H DUP (?) ; `ImeUi_ProcessMessage'::`43'::bNoReentrance
_BSS	ENDS
;	COMDAT ?hklPrev@?1??GetImeId@@YAKI@Z@4PAUHKL__@@A
_BSS	SEGMENT
?hklPrev@?1??GetImeId@@YAKI@Z@4PAUHKL__@@A DD 01H DUP (?) ; `GetImeId'::`2'::hklPrev
_BSS	ENDS
;	COMDAT ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA
_BSS	SEGMENT
?dwRet@?1??GetImeId@@YAKI@Z@4PAKA DD 02H DUP (?)	; `GetImeId'::`2'::dwRet
_BSS	ENDS
;	COMDAT ?bProcessing@?1??ImeUi_FinalizeString@@YAX_N@Z@4_NA
_BSS	SEGMENT
?bProcessing@?1??ImeUi_FinalizeString@@YAX_N@Z@4_NA DB 01H DUP (?) ; `ImeUi_FinalizeString'::`2'::bProcessing
_BSS	ENDS
;	COMDAT ?hklPrev@?1??CheckInputLocale@@YAXXZ@4PAUHKL__@@A
_BSS	SEGMENT
?hklPrev@?1??CheckInputLocale@@YAXXZ@4PAUHKL__@@A DD 01H DUP (?) ; `CheckInputLocale'::`2'::hklPrev
_BSS	ENDS
CRT$XCU	SEGMENT
_g_disableCicero$initializer$ DD FLAT:??__Eg_disableCicero@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@42c00000
CONST	SEGMENT
__real@42c00000 DD 042c00000r			; 96
CONST	ENDS
;	COMDAT __real@42900000
CONST	SEGMENT
__real@42900000 DD 042900000r			; 72
CONST	ENDS
;	COMDAT __real@41600000
CONST	SEGMENT
__real@41600000 DD 041600000r			; 14
CONST	ENDS
;	COMDAT __real@40c90fda
CONST	SEGMENT
__real@40c90fda DD 040c90fdar			; 6.28319
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@406f400000000000
CONST	SEGMENT
__real@406f400000000000 DQ 0406f400000000000r	; 250
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f200000
CONST	SEGMENT
__real@3f200000 DD 03f200000r			; 0.625
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R4CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@
rdata$r	SEGMENT
??_R4CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@ DD 00H ; CTsfUiLessMode::CUIElementSink::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCUIElementSink@CTsfUiLessMode@@@8
	DD	FLAT:??_R3CUIElementSink@CTsfUiLessMode@@8
rdata$r	ENDS
;	COMDAT ??_R4CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@
rdata$r	SEGMENT
??_R4CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@ DD 00H ; CTsfUiLessMode::CUIElementSink::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCUIElementSink@CTsfUiLessMode@@@8
	DD	FLAT:??_R3CUIElementSink@CTsfUiLessMode@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R17?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@ITfCompartmentEventSink@@8
rdata$r	SEGMENT
??_R17?0A@EA@ITfCompartmentEventSink@@8 DD FLAT:??_R0?AUITfCompartmentEventSink@@@8 ; ITfCompartmentEventSink::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ITfCompartmentEventSink@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@ITfInputProcessorProfileActivationSink@@8
rdata$r	SEGMENT
??_R13?0A@EA@ITfInputProcessorProfileActivationSink@@8 DD FLAT:??_R0?AUITfInputProcessorProfileActivationSink@@@8 ; ITfInputProcessorProfileActivationSink::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ITfInputProcessorProfileActivationSink@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CUIElementSink@CTsfUiLessMode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CUIElementSink@CTsfUiLessMode@@8 DD FLAT:??_R0?AVCUIElementSink@CTsfUiLessMode@@@8 ; CTsfUiLessMode::CUIElementSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CUIElementSink@CTsfUiLessMode@@8
rdata$r	ENDS
;	COMDAT ??_R2CUIElementSink@CTsfUiLessMode@@8
rdata$r	SEGMENT
??_R2CUIElementSink@CTsfUiLessMode@@8 DD FLAT:??_R1A@?0A@EA@CUIElementSink@CTsfUiLessMode@@8 ; CTsfUiLessMode::CUIElementSink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ITfUIElementSink@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ITfInputProcessorProfileActivationSink@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ITfCompartmentEventSink@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3CUIElementSink@CTsfUiLessMode@@8
rdata$r	SEGMENT
??_R3CUIElementSink@CTsfUiLessMode@@8 DD 00H		; CTsfUiLessMode::CUIElementSink::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	07H
	DD	FLAT:??_R2CUIElementSink@CTsfUiLessMode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCUIElementSink@CTsfUiLessMode@@@8
data$r	SEGMENT
??_R0?AVCUIElementSink@CTsfUiLessMode@@@8 DD FLAT:??_7type_info@@6B@ ; CTsfUiLessMode::CUIElementSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCUIElementSink@CTsfUiLessMode@@', 00H
data$r	ENDS
;	COMDAT ??_R4CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@
rdata$r	SEGMENT
??_R4CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@ DD 00H ; CTsfUiLessMode::CUIElementSink::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCUIElementSink@CTsfUiLessMode@@@8
	DD	FLAT:??_R3CUIElementSink@CTsfUiLessMode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ITfUIElementSink@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ITfUIElementSink@@8 DD FLAT:??_R0?AUITfUIElementSink@@@8 ; ITfUIElementSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ITfUIElementSink@@8
rdata$r	ENDS
;	COMDAT ??_R2ITfUIElementSink@@8
rdata$r	SEGMENT
??_R2ITfUIElementSink@@8 DD FLAT:??_R1A@?0A@EA@ITfUIElementSink@@8 ; ITfUIElementSink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ITfUIElementSink@@8
rdata$r	SEGMENT
??_R3ITfUIElementSink@@8 DD 00H				; ITfUIElementSink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ITfUIElementSink@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUITfUIElementSink@@@8
data$r	SEGMENT
??_R0?AUITfUIElementSink@@@8 DD FLAT:??_7type_info@@6B@	; ITfUIElementSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUITfUIElementSink@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ITfInputProcessorProfileActivationSink@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ITfInputProcessorProfileActivationSink@@8 DD FLAT:??_R0?AUITfInputProcessorProfileActivationSink@@@8 ; ITfInputProcessorProfileActivationSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ITfInputProcessorProfileActivationSink@@8
rdata$r	ENDS
;	COMDAT ??_R2ITfInputProcessorProfileActivationSink@@8
rdata$r	SEGMENT
??_R2ITfInputProcessorProfileActivationSink@@8 DD FLAT:??_R1A@?0A@EA@ITfInputProcessorProfileActivationSink@@8 ; ITfInputProcessorProfileActivationSink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ITfInputProcessorProfileActivationSink@@8
rdata$r	SEGMENT
??_R3ITfInputProcessorProfileActivationSink@@8 DD 00H	; ITfInputProcessorProfileActivationSink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ITfInputProcessorProfileActivationSink@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUITfInputProcessorProfileActivationSink@@@8
data$r	SEGMENT
??_R0?AUITfInputProcessorProfileActivationSink@@@8 DD FLAT:??_7type_info@@6B@ ; ITfInputProcessorProfileActivationSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUITfInputProcessorProfileActivationSink@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ITfCompartmentEventSink@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ITfCompartmentEventSink@@8 DD FLAT:??_R0?AUITfCompartmentEventSink@@@8 ; ITfCompartmentEventSink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ITfCompartmentEventSink@@8
rdata$r	ENDS
;	COMDAT ??_R2ITfCompartmentEventSink@@8
rdata$r	SEGMENT
??_R2ITfCompartmentEventSink@@8 DD FLAT:??_R1A@?0A@EA@ITfCompartmentEventSink@@8 ; ITfCompartmentEventSink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ITfCompartmentEventSink@@8
rdata$r	SEGMENT
??_R3ITfCompartmentEventSink@@8 DD 00H			; ITfCompartmentEventSink::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ITfCompartmentEventSink@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUITfCompartmentEventSink@@@8
data$r	SEGMENT
??_R0?AUITfCompartmentEventSink@@@8 DD FLAT:??_7type_info@@6B@ ; ITfCompartmentEventSink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUITfCompartmentEventSink@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
data$r	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
data$r	ENDS
;	COMDAT ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H, 'g'
	DB	00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?_GUID_COMPARTMENT_KEYBOARD_INPUTMODE_CONVERSION@?1??GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z@4U_GUID@@A
_DATA	SEGMENT
?_GUID_COMPARTMENT_KEYBOARD_INPUTMODE_CONVERSION@?1??GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z@4U_GUID@@A DD 0ccf05dd8H ; `CTsfUiLessMode::GetCompartments'::`2'::_GUID_COMPARTMENT_KEYBOARD_INPUTMODE_CONVERSION
	DW	04a87H
	DW	011d7H
	DB	0a6H
	DB	0e2H
	DB	00H
	DB	06H
	DB	05bH
	DB	084H
	DB	043H
	DB	05cH
_DATA	ENDS
;	COMDAT ?s_TF_PROFILE_DAYI@?1??OnActivated@CUIElementSink@CTsfUiLessMode@@UAGJKGABU_GUID@@00PAUHKL__@@K@Z@4U4@A
_DATA	SEGMENT
?s_TF_PROFILE_DAYI@?1??OnActivated@CUIElementSink@CTsfUiLessMode@@UAGJKGABU_GUID@@00PAUHKL__@@K@Z@4U4@A DD 037b2c25H ; `CTsfUiLessMode::CUIElementSink::OnActivated'::`2'::s_TF_PROFILE_DAYI
	DW	0480cH
	DW	04d7fH
	DB	0b0H
	DB	027H
	DB	0d6H
	DB	0caH
	DB	06bH
	DB	069H
	DB	078H
	DB	08aH
_DATA	ENDS
;	COMDAT ?iShowStatusWindow@?3??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA
_DATA	SEGMENT
?iShowStatusWindow@?3??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA DD 0ffffffffH ; `ImeUi_ToggleLanguageBar'::`4'::iShowStatusWindow
_DATA	ENDS
;	COMDAT ?prevRestore@?1??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA
_DATA	SEGMENT
?prevRestore@?1??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA DD 01H ; `ImeUi_ToggleLanguageBar'::`2'::prevRestore
_DATA	ENDS
;	COMDAT ?lShift@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
_DATA	SEGMENT
?lShift@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA DD 080000000H ; `ImeUi_ProcessMessage'::`2'::lShift
_DATA	ENDS
;	COMDAT ?lCtrl@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
_DATA	SEGMENT
?lCtrl@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA DD 080000000H ; `ImeUi_ProcessMessage'::`2'::lCtrl
_DATA	ENDS
;	COMDAT ?lAlt@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
_DATA	SEGMENT
?lAlt@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA DD 080000000H ; `ImeUi_ProcessMessage'::`2'::lAlt
_DATA	ENDS
;	COMDAT ??_7CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@
CONST	SEGMENT
??_7CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@ DD FLAT:??_R4CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@ ; CTsfUiLessMode::CUIElementSink::`vftable'
	DD	FLAT:?QueryInterface@CUIElementSink@CTsfUiLessMode@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CUIElementSink@CTsfUiLessMode@@W7AGKXZ
	DD	FLAT:?Release@CUIElementSink@CTsfUiLessMode@@W7AGKXZ
	DD	FLAT:?OnChange@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@@Z
CONST	ENDS
;	COMDAT ??_7CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@
CONST	SEGMENT
??_7CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@ DD FLAT:??_R4CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@ ; CTsfUiLessMode::CUIElementSink::`vftable'
	DD	FLAT:?QueryInterface@CUIElementSink@CTsfUiLessMode@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CUIElementSink@CTsfUiLessMode@@W3AGKXZ
	DD	FLAT:?Release@CUIElementSink@CTsfUiLessMode@@W3AGKXZ
	DD	FLAT:?OnActivated@CUIElementSink@CTsfUiLessMode@@UAGJKGABU_GUID@@00PAUHKL__@@K@Z
CONST	ENDS
;	COMDAT ??_7CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@
CONST	SEGMENT
??_7CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@ DD FLAT:??_R4CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@ ; CTsfUiLessMode::CUIElementSink::`vftable'
	DD	FLAT:?QueryInterface@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CUIElementSink@CTsfUiLessMode@@UAGKXZ
	DD	FLAT:?Release@CUIElementSink@CTsfUiLessMode@@UAGKXZ
	DD	FLAT:?BeginUIElement@CUIElementSink@CTsfUiLessMode@@UAGJKPAH@Z
	DD	FLAT:?UpdateUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z
	DD	FLAT:?EndUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?SetupSinks@CTsfUiLessMode@@SAHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupSinks@CTsfUiLessMode@@SAHXZ$0
__ehfuncinfo$?SetupSinks@CTsfUiLessMode@@SAHXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetupSinks@CTsfUiLessMode@@SAHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
__SendMessage$initializer$ DD FLAT:??__E_SendMessage@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_pszIndicatior$initializer$ DD FLAT:??__Eg_pszIndicatior@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odsp /RTCsu
;	COMDAT ?Release@CUIElementSink@CTsfUiLessMode@@W7AGKXZ
_TEXT	SEGMENT
?Release@CUIElementSink@CTsfUiLessMode@@W7AGKXZ PROC	; [thunk]:CTsfUiLessMode::CUIElementSink::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CUIElementSink@CTsfUiLessMode@@UAGKXZ ; CTsfUiLessMode::CUIElementSink::Release
?Release@CUIElementSink@CTsfUiLessMode@@W7AGKXZ ENDP	; [thunk]:CTsfUiLessMode::CUIElementSink::Release`adjustor{8}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu
;	COMDAT ?AddRef@CUIElementSink@CTsfUiLessMode@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CUIElementSink@CTsfUiLessMode@@W7AGKXZ PROC	; [thunk]:CTsfUiLessMode::CUIElementSink::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CUIElementSink@CTsfUiLessMode@@UAGKXZ ; CTsfUiLessMode::CUIElementSink::AddRef
?AddRef@CUIElementSink@CTsfUiLessMode@@W7AGKXZ ENDP	; [thunk]:CTsfUiLessMode::CUIElementSink::AddRef`adjustor{8}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu
;	COMDAT ?QueryInterface@CUIElementSink@CTsfUiLessMode@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CUIElementSink@CTsfUiLessMode@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:CTsfUiLessMode::CUIElementSink::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@PAPAX@Z ; CTsfUiLessMode::CUIElementSink::QueryInterface
?QueryInterface@CUIElementSink@CTsfUiLessMode@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:CTsfUiLessMode::CUIElementSink::QueryInterface`adjustor{8}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu
;	COMDAT ?Release@CUIElementSink@CTsfUiLessMode@@W3AGKXZ
_TEXT	SEGMENT
?Release@CUIElementSink@CTsfUiLessMode@@W3AGKXZ PROC	; [thunk]:CTsfUiLessMode::CUIElementSink::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CUIElementSink@CTsfUiLessMode@@UAGKXZ ; CTsfUiLessMode::CUIElementSink::Release
?Release@CUIElementSink@CTsfUiLessMode@@W3AGKXZ ENDP	; [thunk]:CTsfUiLessMode::CUIElementSink::Release`adjustor{4}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu
;	COMDAT ?AddRef@CUIElementSink@CTsfUiLessMode@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CUIElementSink@CTsfUiLessMode@@W3AGKXZ PROC	; [thunk]:CTsfUiLessMode::CUIElementSink::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CUIElementSink@CTsfUiLessMode@@UAGKXZ ; CTsfUiLessMode::CUIElementSink::AddRef
?AddRef@CUIElementSink@CTsfUiLessMode@@W3AGKXZ ENDP	; [thunk]:CTsfUiLessMode::CUIElementSink::AddRef`adjustor{4}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu
;	COMDAT ?QueryInterface@CUIElementSink@CTsfUiLessMode@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CUIElementSink@CTsfUiLessMode@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:CTsfUiLessMode::CUIElementSink::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@PAPAX@Z ; CTsfUiLessMode::CUIElementSink::QueryInterface
?QueryInterface@CUIElementSink@CTsfUiLessMode@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:CTsfUiLessMode::CUIElementSink::QueryInterface`adjustor{4}'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$?RABKABK@?$less@X@std@@QBE_NABK0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RABKABK@?$less@X@std@@QBE_NABK0@Z PROC		; std::less<void>::operator()<unsigned long const &,unsigned long const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 263
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 268
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]
; Line 269
	mov	esp, ebp
	pop	ebp
	ret	8
??$?RABKABK@?$less@X@std@@QBE_NABK0@Z ENDP		; std::less<void>::operator()<unsigned long const &,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$?RABIABI@?$less@X@std@@QBE_NABI0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RABIABI@?$less@X@std@@QBE_NABI0@Z PROC		; std::less<void>::operator()<unsigned int const &,unsigned int const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 263
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 268
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]
; Line 269
	mov	esp, ebp
	pop	ebp
	ret	8
??$?RABIABI@?$less@X@std@@QBE_NABI0@Z ENDP		; std::less<void>::operator()<unsigned int const &,unsigned int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Debug_lt_pred@U?$less@X@std@@ABKABK@std@@YA_NU?$less@X@0@ABK1PB_WI@Z
_TEXT	SEGMENT
__Pred$ = 8						; size = 1
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
__File$ = 20						; size = 4
__Line$ = 24						; size = 4
??$_Debug_lt_pred@U?$less@X@std@@ABKABK@std@@YA_NU?$less@X@0@ABK1PB_WI@Z PROC ; std::_Debug_lt_pred<std::less<void>,unsigned long const &,unsigned long const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 520
	push	ebp
	mov	ebp, esp
	push	esi
; Line 521
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$forward@ABK@std@@YAABKABK@Z		; std::forward<unsigned long const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$forward@ABK@std@@YAABKABK@Z		; std::forward<unsigned long const &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??$?RABKABK@?$less@X@std@@QBE_NABK0@Z	; std::less<void>::operator()<unsigned long const &,unsigned long const &>
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@Debug_lt_p
; Line 522
	xor	al, al
	jmp	SHORT $LN4@Debug_lt_p
	jmp	SHORT $LN2@Debug_lt_p
$LN3@Debug_lt_p:
; Line 523
	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$forward@ABK@std@@YAABKABK@Z		; std::forward<unsigned long const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$forward@ABK@std@@YAABKABK@Z		; std::forward<unsigned long const &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??$?RABKABK@?$less@X@std@@QBE_NABK0@Z	; std::less<void>::operator()<unsigned long const &,unsigned long const &>
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Debug_lt_p
; Line 524
	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_lt_p:
; Line 525
	mov	al, 1
$LN4@Debug_lt_p:
; Line 526
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Debug_lt_pred@U?$less@X@std@@ABKABK@std@@YA_NU?$less@X@0@ABK1PB_WI@Z ENDP ; std::_Debug_lt_pred<std::less<void>,unsigned long const &,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$forward@ABK@std@@YAABKABK@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABK@std@@YAABKABK@Z PROC			; std::forward<unsigned long const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@ABK@std@@YAABKABK@Z ENDP			; std::forward<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Debug_lt_pred@U?$less@X@std@@ABIABI@std@@YA_NU?$less@X@0@ABI1PB_WI@Z
_TEXT	SEGMENT
__Pred$ = 8						; size = 1
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
__File$ = 20						; size = 4
__Line$ = 24						; size = 4
??$_Debug_lt_pred@U?$less@X@std@@ABIABI@std@@YA_NU?$less@X@0@ABI1PB_WI@Z PROC ; std::_Debug_lt_pred<std::less<void>,unsigned int const &,unsigned int const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 520
	push	ebp
	mov	ebp, esp
	push	esi
; Line 521
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$forward@ABI@std@@YAABIABI@Z		; std::forward<unsigned int const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$forward@ABI@std@@YAABIABI@Z		; std::forward<unsigned int const &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??$?RABIABI@?$less@X@std@@QBE_NABI0@Z	; std::less<void>::operator()<unsigned int const &,unsigned int const &>
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@Debug_lt_p
; Line 522
	xor	al, al
	jmp	SHORT $LN4@Debug_lt_p
	jmp	SHORT $LN2@Debug_lt_p
$LN3@Debug_lt_p:
; Line 523
	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$forward@ABI@std@@YAABIABI@Z		; std::forward<unsigned int const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$forward@ABI@std@@YAABIABI@Z		; std::forward<unsigned int const &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??$?RABIABI@?$less@X@std@@QBE_NABI0@Z	; std::less<void>::operator()<unsigned int const &,unsigned int const &>
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Debug_lt_p
; Line 524
	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_lt_p:
; Line 525
	mov	al, 1
$LN4@Debug_lt_p:
; Line 526
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Debug_lt_pred@U?$less@X@std@@ABIABI@std@@YA_NU?$less@X@0@ABI1PB_WI@Z ENDP ; std::_Debug_lt_pred<std::less<void>,unsigned int const &,unsigned int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$forward@ABI@std@@YAABIABI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABI@std@@YAABIABI@Z PROC			; std::forward<unsigned int const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@ABI@std@@YAABIABI@Z ENDP			; std::forward<unsigned int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Debug_lt@ABKABK@std@@YA_NABK0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_lt@ABKABK@std@@YA_NABK0PB_WI@Z PROC		; std::_Debug_lt<unsigned long const &,unsigned long const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 532
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 534
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$forward@ABK@std@@YAABKABK@Z		; std::forward<unsigned long const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$forward@ABK@std@@YAABKABK@Z		; std::forward<unsigned long const &>
	add	esp, 4
	push	eax
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	call	??$_Debug_lt_pred@U?$less@X@std@@ABKABK@std@@YA_NU?$less@X@0@ABK1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,unsigned long const &,unsigned long const &>
	add	esp, 20					; 00000014H
; Line 535
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_lt@ABKABK@std@@YA_NABK0PB_WI@Z ENDP		; std::_Debug_lt<unsigned long const &,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Debug_lt@ABIABI@std@@YA_NABI0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_lt@ABIABI@std@@YA_NABI0PB_WI@Z PROC		; std::_Debug_lt<unsigned int const &,unsigned int const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 532
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 534
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$forward@ABI@std@@YAABIABI@Z		; std::forward<unsigned int const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$forward@ABI@std@@YAABIABI@Z		; std::forward<unsigned int const &>
	add	esp, 4
	push	eax
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	call	??$_Debug_lt_pred@U?$less@X@std@@ABIABI@std@@YA_NU?$less@X@0@ABI1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,unsigned int const &,unsigned int const &>
	add	esp, 20					; 00000014H
; Line 535
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_lt@ABIABI@std@@YA_NABI0PB_WI@Z ENDP		; std::_Debug_lt<unsigned int const &,unsigned int const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -8						; size = 4
_dwTranslucency$ = -4					; size = 4
?SetCompStringColor@@YAXXZ PROC				; SetCompStringColor
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2234
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2236
	cmp	DWORD PTR _g_dwIMELevel, 2
	jne	SHORT $LN3@SetCompStr
	mov	DWORD PTR tv67[ebp], -16777216		; ff000000H
	jmp	SHORT $LN4@SetCompStr
$LN3@SetCompStr:
	movzx	eax, BYTE PTR _gSkinIME+52
	shl	eax, 24					; 00000018H
	mov	DWORD PTR tv67[ebp], eax
$LN4@SetCompStr:
	mov	ecx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _dwTranslucency$[ebp], ecx
; Line 2237
	mov	edx, DWORD PTR _dwTranslucency$[ebp]
	or	edx, DWORD PTR _gSkinIME+32
	mov	DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A, edx
; Line 2238
	mov	eax, DWORD PTR _dwTranslucency$[ebp]
	or	eax, DWORD PTR _gSkinIME+36
	mov	DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+4, eax
; Line 2239
	mov	ecx, DWORD PTR _dwTranslucency$[ebp]
	or	ecx, DWORD PTR _gSkinIME+40
	mov	DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+8, ecx
; Line 2240
	mov	edx, DWORD PTR _dwTranslucency$[ebp]
	or	edx, DWORD PTR _gSkinIME+44
	mov	DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+12, edx
; Line 2241
	mov	eax, DWORD PTR _dwTranslucency$[ebp]
	or	eax, DWORD PTR _gSkinIME+48
	mov	DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+16, eax
; Line 2242
	mov	esp, ebp
	pop	ebp
	ret	0
?SetCompStringColor@@YAXXZ ENDP				; SetCompStringColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$min@K@std@@YAABKABK0@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@K@std@@YAABKABK0@Z PROC				; std::min<unsigned long>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 4120
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4121
	push	4121					; 00001019H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$_Debug_lt@ABKABK@std@@YA_NABK0PB_WI@Z ; std::_Debug_lt<unsigned long const &,unsigned long const &>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@min
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN4@min:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
; Line 4122
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$min@K@std@@YAABKABK0@Z ENDP				; std::min<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 4120
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4121
	push	4121					; 00001019H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$_Debug_lt@ABIABI@std@@YA_NABI0PB_WI@Z ; std::_Debug_lt<unsigned int const &,unsigned int const &>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@min
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN4@min:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
; Line 4122
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?CloseCandidateList@@YAXXZ PROC				; CloseCandidateList
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 1214
	push	ebp
	mov	ebp, esp
; Line 1215
	mov	BYTE PTR _g_bCandList, 0
; Line 1216
	movzx	eax, BYTE PTR _g_bReadingWindow
	test	eax, eax
	jne	SHORT $LN2@CloseCandi
; Line 1218
	mov	DWORD PTR _g_dwCount, 0
; Line 1219
	push	5120					; 00001400H
	push	0
	push	OFFSET _g_szCandidate
	call	_memset
	add	esp, 12					; 0000000cH
$LN2@CloseCandi:
; Line 1221
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?CloseCandidateList@@YAXXZ ENDP				; CloseCandidateList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_height$ = 16						; size = 4
?DrawCaret@@YAXKKK@Z PROC				; DrawCaret
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 561
	push	ebp
	mov	ebp, esp
	push	esi
; Line 562
	movzx	eax, BYTE PTR _g_bCaretDraw
	test	eax, eax
	je	SHORT $LN2@DrawCaret
	cmp	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
	je	SHORT $LN2@DrawCaret
; Line 564
	mov	esi, esp
	mov	ecx, DWORD PTR _g_CaretInfo+12
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _height$[ebp]
	movzx	eax, BYTE PTR _gSkinIME+61
	sub	edx, eax
	push	edx
	movzx	ecx, BYTE PTR _gSkinIME+60
	add	ecx, DWORD PTR _x$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _gSkinIME+61
	add	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DrawCaret:
; Line 565
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?DrawCaret@@YAXKKK@Z ENDP				; DrawCaret
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?InitCompStringData@@YAXXZ PROC				; InitCompStringData
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 553
	push	ebp
	mov	ebp, esp
; Line 554
	mov	DWORD PTR _g_IMECursorBytes, 0
; Line 555
	mov	DWORD PTR _g_IMECursorChars, 0
; Line 556
	push	512					; 00000200H
	push	0
	push	OFFSET _g_szCompositionString
	call	_memset
	add	esp, 12					; 0000000cH
; Line 557
	push	256					; 00000100H
	push	0
	push	OFFSET _g_szCompAttrString
	call	_memset
	add	esp, 12					; 0000000cH
; Line 558
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?InitCompStringData@@YAXXZ ENDP				; InitCompStringData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -24						; size = 4
tv129 = -18						; size = 2
tv94 = -16						; size = 4
tv91 = -12						; size = 4
_i$ = -8						; size = 4
_cc$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_bUseBackSpace$ = 12					; size = 1
_iNewStrLen$ = 16					; size = 4
?CancelCompString@@YAXPAUHWND__@@_NH@Z PROC		; CancelCompString
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 518
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 519
	cmp	DWORD PTR _g_dwIMELevel, 3
	je	SHORT $LN8@CancelComp
; Line 520
	jmp	$LN9@CancelComp
$LN8@CancelComp:
; Line 521
	mov	DWORD PTR tv91[ebp], OFFSET _g_szCompositionString
	mov	eax, DWORD PTR tv91[ebp]
	add	eax, 2
	mov	DWORD PTR tv94[ebp], eax
$LL11@CancelComp:
	mov	ecx, DWORD PTR tv91[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR tv129[ebp], dx
	add	DWORD PTR tv91[ebp], 2
	cmp	WORD PTR tv129[ebp], 0
	jne	SHORT $LL11@CancelComp
	mov	eax, DWORD PTR tv91[ebp]
	sub	eax, DWORD PTR tv94[ebp]
	sar	eax, 1
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _cc$[ebp], ecx
; Line 524
	mov	edx, DWORD PTR _cc$[ebp]
	sub	edx, DWORD PTR _g_IMECursorChars
	push	edx
	push	39					; 00000027H
	call	?SendControlKeys@@YAXII@Z		; SendControlKeys
	add	esp, 8
; Line 526
	movzx	eax, BYTE PTR _bUseBackSpace$[ebp]
	test	eax, eax
	jne	SHORT $LN6@CancelComp
	movzx	ecx, BYTE PTR _g_bInsertMode
	test	ecx, ecx
	je	SHORT $LN7@CancelComp
$LN6@CancelComp:
; Line 527
	mov	DWORD PTR _iNewStrLen$[ebp], 0
$LN7@CancelComp:
; Line 536
	mov	edx, DWORD PTR _iNewStrLen$[ebp]
	cmp	edx, DWORD PTR _cc$[ebp]
	jge	SHORT $LN5@CancelComp
; Line 538
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@CancelComp
$LN3@CancelComp:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@CancelComp:
	mov	ecx, DWORD PTR _cc$[ebp]
	sub	ecx, DWORD PTR _iNewStrLen$[ebp]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN2@CancelComp
; Line 540
	push	8
	push	256					; 00000100H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	?SendKeyMsg@@YAJPAUHWND__@@II@Z		; SendKeyMsg
	add	esp, 12					; 0000000cH
; Line 541
	push	8
	push	258					; 00000102H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	?SendKeyMsg@@YAJPAUHWND__@@II@Z		; SendKeyMsg
	add	esp, 12					; 0000000cH
; Line 542
	jmp	SHORT $LN3@CancelComp
$LN2@CancelComp:
; Line 543
	push	8
	push	257					; 00000101H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	?SendKeyMsg@@YAJPAUHWND__@@II@Z		; SendKeyMsg
	add	esp, 12					; 0000000cH
; Line 545
	jmp	SHORT $LN1@CancelComp
$LN5@CancelComp:
; Line 546
	mov	edx, DWORD PTR _cc$[ebp]
	mov	DWORD PTR _iNewStrLen$[ebp], edx
$LN1@CancelComp:
; Line 548
	mov	eax, DWORD PTR _iNewStrLen$[ebp]
	push	eax
	push	37					; 00000025H
	call	?SendControlKeys@@YAXII@Z		; SendControlKeys
	add	esp, 8
$LN9@CancelComp:
; Line 549
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CancelCompString@@YAXPAUHWND__@@_NH@Z ENDP		; CancelCompString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_vk$ = 8						; size = 4
_num$ = 12						; size = 4
?SendControlKeys@@YAXII@Z PROC				; SendControlKeys
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 506
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 507
	cmp	DWORD PTR _num$[ebp], 0
	jne	SHORT $LN4@SendContro
; Line 508
	jmp	SHORT $LN5@SendContro
$LN4@SendContro:
; Line 509
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@SendContro
$LN2@SendContro:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@SendContro:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _num$[ebp]
	jae	SHORT $LN1@SendContro
; Line 511
	mov	edx, DWORD PTR _vk$[ebp]
	push	edx
	push	256					; 00000100H
	mov	eax, DWORD PTR _g_hwndCurr
	push	eax
	call	?SendKeyMsg@@YAJPAUHWND__@@II@Z		; SendKeyMsg
	add	esp, 12					; 0000000cH
; Line 512
	jmp	SHORT $LN2@SendContro
$LN1@SendContro:
; Line 513
	mov	ecx, DWORD PTR _vk$[ebp]
	push	ecx
	push	257					; 00000101H
	mov	edx, DWORD PTR _g_hwndCurr
	push	edx
	call	?SendKeyMsg@@YAJPAUHWND__@@II@Z		; SendKeyMsg
	add	esp, 12					; 0000000cH
$LN5@SendContro:
; Line 514
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SendControlKeys@@YAXII@Z ENDP				; SendControlKeys
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dwBufLen$ = -4						; size = 4
_himc$ = 8						; size = 4
_dwIndex$ = 12						; size = 4
_ppCandList$ = 16					; size = 4
?GetCandidateList@@YAKPAUHIMC__@@KPAPAUtagCANDIDATELIST@@@Z PROC ; GetCandidateList
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 495
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 496
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _dwIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _himc$[ebp]
	push	ecx
	call	DWORD PTR __ImmGetCandidateList
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwBufLen$[ebp], eax
; Line 497
	cmp	DWORD PTR _dwBufLen$[ebp], 0
	je	SHORT $LN1@GetCandida
; Line 499
	mov	esi, esp
	mov	edx, DWORD PTR _dwBufLen$[ebp]
	push	edx
	call	DWORD PTR ?ImeUiCallback_Malloc@@3P6APAXI@ZA ; ImeUiCallback_Malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ppCandList$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 500
	mov	esi, esp
	mov	edx, DWORD PTR _dwBufLen$[ebp]
	push	edx
	mov	eax, DWORD PTR _ppCandList$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _dwIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _himc$[ebp]
	push	eax
	call	DWORD PTR __ImmGetCandidateList
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwBufLen$[ebp], eax
$LN1@GetCandida:
; Line 502
	mov	eax, DWORD PTR _dwBufLen$[ebp]
; Line 503
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCandidateList@@YAKPAUHIMC__@@KPAPAUtagCANDIDATELIST@@@Z ENDP ; GetCandidateList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -28						; size = 4
tv88 = -22						; size = 2
tv85 = -20						; size = 4
tv82 = -16						; size = 4
_pwz$1 = -12						; size = 4
_iLen$ = -8						; size = 4
_i$ = -4						; size = 4
?SendCompString@@YAXXZ PROC				; SendCompString
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 474
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 475
	mov	DWORD PTR tv82[ebp], OFFSET _g_szCompositionString
	mov	eax, DWORD PTR tv82[ebp]
	add	eax, 2
	mov	DWORD PTR tv85[ebp], eax
$LL10@SendCompSt:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR tv88[ebp], dx
	add	DWORD PTR tv82[ebp], 2
	cmp	WORD PTR tv88[ebp], 0
	jne	SHORT $LL10@SendCompSt
	mov	eax, DWORD PTR tv82[ebp]
	sub	eax, DWORD PTR tv85[ebp]
	sar	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR tv66[ebp]
	mov	DWORD PTR _iLen$[ebp], ecx
; Line 476
	cmp	DWORD PTR ?ImeUiCallback_OnChar@@3P6GX_W@ZA, 0 ; ImeUiCallback_OnChar
	je	SHORT $LN7@SendCompSt
; Line 479
	mov	DWORD PTR _pwz$1[ebp], OFFSET _g_szCompositionString
; Line 480
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@SendCompSt
$LN5@SendCompSt:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@SendCompSt:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _iLen$[ebp]
	jge	SHORT $LN4@SendCompSt
; Line 482
	mov	esi, esp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pwz$1[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	push	eax
	call	DWORD PTR ?ImeUiCallback_OnChar@@3P6GX_W@ZA ; ImeUiCallback_OnChar
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 483
	jmp	SHORT $LN5@SendCompSt
$LN4@SendCompSt:
; Line 484
	jmp	SHORT $LN8@SendCompSt
$LN7@SendCompSt:
; Line 486
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@SendCompSt
$LN2@SendCompSt:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@SendCompSt:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _iLen$[ebp]
	jge	SHORT $LN8@SendCompSt
; Line 490
	mov	eax, DWORD PTR _i$[ebp]
	movzx	ecx, WORD PTR _g_szCompositionString[eax*2]
	push	ecx
	push	258					; 00000102H
	mov	edx, DWORD PTR _g_hwndCurr
	push	edx
	call	?SendKeyMsg@@YAJPAUHWND__@@II@Z		; SendKeyMsg
	add	esp, 12					; 0000000cH
; Line 491
	jmp	SHORT $LN2@SendCompSt
$LN8@SendCompSt:
; Line 492
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SendCompString@@YAXXZ ENDP				; SendCompString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_psz$ = -4						; size = 4
_index$ = 8						; size = 4
_pszCandidate$ = 12					; size = 4
?ComposeCandidateLine@@YAXHPB_W@Z PROC			; ComposeCandidateLine
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 459
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 460
	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 9
	add	eax, OFFSET _g_szCandidate
	mov	DWORD PTR _psz$[ebp], eax
; Line 461
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, DWORD PTR _g_iCandListIndexBase
	cdq
	mov	ecx, 10					; 0000000aH
	idiv	ecx
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR _psz$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _psz$[ebp]
	add	ecx, 2
	mov	DWORD PTR _psz$[ebp], ecx
; Line 462
	movzx	edx, BYTE PTR _g_bVerticalCand
	test	edx, edx
	je	SHORT $LN2@ComposeCan
; Line 464
	mov	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _psz$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _psz$[ebp]
	add	edx, 2
	mov	DWORD PTR _psz$[ebp], edx
$LN2@ComposeCan:
; Line 466
	mov	eax, DWORD PTR _pszCandidate$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@ComposeCan
	mov	edx, DWORD PTR _index$[ebp]
	shl	edx, 9
	add	edx, OFFSET _g_szCandidate
	mov	eax, DWORD PTR _psz$[ebp]
	sub	eax, edx
	sar	eax, 1
	cmp	eax, 256				; 00000100H
	jae	SHORT $LN1@ComposeCan
; Line 468
	mov	ecx, DWORD PTR _psz$[ebp]
	mov	edx, DWORD PTR _pszCandidate$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ecx, DWORD PTR _psz$[ebp]
	add	ecx, 2
	mov	DWORD PTR _psz$[ebp], ecx
	mov	edx, DWORD PTR _pszCandidate$[ebp]
	add	edx, 2
	mov	DWORD PTR _pszCandidate$[ebp], edx
; Line 469
	jmp	SHORT $LN2@ComposeCan
$LN1@ComposeCan:
; Line 470
	xor	eax, eax
	mov	ecx, DWORD PTR _psz$[ebp]
	mov	WORD PTR [ecx], ax
; Line 471
	mov	esp, ebp
	pop	ebp
	ret	0
?ComposeCandidateLine@@YAXHPB_W@Z ENDP			; ComposeCandidateLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ul$1 = -8						; size = 4
_ulRet$ = -4						; size = 4
_psz$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?_strtoul@@YAKPBDPAPA_WH@Z PROC				; _strtoul
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 421
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 422
	cmp	DWORD PTR _psz$[ebp], 0
	jne	SHORT $LN14@strtoul
; Line 423
	xor	eax, eax
	jmp	$LN15@strtoul
$LN14@strtoul:
; Line 425
	mov	DWORD PTR _ulRet$[ebp], 0
; Line 426
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _psz$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 48					; 00000030H
	jne	$LN2@strtoul
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _psz$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 120				; 00000078H
	je	SHORT $LN12@strtoul
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _psz$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 88					; 00000058H
	jne	$LN2@strtoul
$LN12@strtoul:
; Line 428
	mov	ecx, DWORD PTR _psz$[ebp]
	add	ecx, 2
	mov	DWORD PTR _psz$[ebp], ecx
; Line 429
	mov	DWORD PTR _ul$1[ebp], 0
$LN11@strtoul:
; Line 430
	mov	edx, DWORD PTR _psz$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	$LN10@strtoul
; Line 432
	mov	ecx, DWORD PTR _psz$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN9@strtoul
	mov	eax, DWORD PTR _psz$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN9@strtoul
; Line 433
	mov	edx, DWORD PTR _psz$[ebp]
	movsx	eax, BYTE PTR [edx]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR _ul$1[ebp], eax
	jmp	SHORT $LN8@strtoul
$LN9@strtoul:
; Line 434
	mov	ecx, DWORD PTR _psz$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 65					; 00000041H
	jl	SHORT $LN7@strtoul
	mov	eax, DWORD PTR _psz$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 70					; 00000046H
	jg	SHORT $LN7@strtoul
; Line 435
	mov	edx, DWORD PTR _psz$[ebp]
	movsx	eax, BYTE PTR [edx]
	sub	eax, 55					; 00000037H
	mov	DWORD PTR _ul$1[ebp], eax
	jmp	SHORT $LN8@strtoul
$LN7@strtoul:
; Line 436
	mov	ecx, DWORD PTR _psz$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 97					; 00000061H
	jl	SHORT $LN5@strtoul
	mov	eax, DWORD PTR _psz$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 102				; 00000066H
	jg	SHORT $LN5@strtoul
; Line 437
	mov	edx, DWORD PTR _psz$[ebp]
	movsx	eax, BYTE PTR [edx]
	sub	eax, 87					; 00000057H
	mov	DWORD PTR _ul$1[ebp], eax
; Line 438
	jmp	SHORT $LN8@strtoul
$LN5@strtoul:
; Line 439
	jmp	SHORT $LN10@strtoul
$LN8@strtoul:
; Line 440
	mov	ecx, DWORD PTR _ulRet$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _ul$1[ebp]
	mov	DWORD PTR _ulRet$[ebp], ecx
; Line 441
	mov	edx, DWORD PTR _psz$[ebp]
	add	edx, 1
	mov	DWORD PTR _psz$[ebp], edx
; Line 442
	jmp	$LN11@strtoul
$LN10@strtoul:
; Line 444
	jmp	SHORT $LN3@strtoul
$LN2@strtoul:
; Line 446
	mov	eax, DWORD PTR _psz$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@strtoul
	mov	edx, DWORD PTR _psz$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN3@strtoul
	mov	ecx, DWORD PTR _psz$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 57					; 00000039H
	jg	SHORT $LN3@strtoul
; Line 448
	imul	eax, DWORD PTR _ulRet$[ebp], 10
	mov	ecx, DWORD PTR _psz$[ebp]
	movsx	edx, BYTE PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _ulRet$[ebp], eax
; Line 449
	mov	ecx, DWORD PTR _psz$[ebp]
	add	ecx, 1
	mov	DWORD PTR _psz$[ebp], ecx
; Line 450
	jmp	SHORT $LN2@strtoul
$LN3@strtoul:
; Line 452
	mov	eax, DWORD PTR _ulRet$[ebp]
$LN15@strtoul:
; Line 453
	mov	esp, ebp
	pop	ebp
	ret	0
?_strtoul@@YAKPBDPAPA_WH@Z ENDP				; _strtoul
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hr$ = -16						; size = 4
_srcTm$ = -8						; size = 4
_bEnable$ = 8						; size = 1
?EnableUiUpdates@CTsfUiLessMode@@SAX_N@Z PROC		; CTsfUiLessMode::EnableUiUpdates
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3053
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3056
	cmp	DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A, 0 ; CTsfUiLessMode::m_tm
	je	SHORT $LN5@EnableUiUp
	movzx	eax, BYTE PTR _bEnable$[ebp]
	test	eax, eax
	je	SHORT $LN4@EnableUiUp
	cmp	DWORD PTR ?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA, -1 ; CTsfUiLessMode::m_dwUIElementSinkCookie
	jne	SHORT $LN5@EnableUiUp
$LN4@EnableUiUp:
	movzx	ecx, BYTE PTR _bEnable$[ebp]
	test	ecx, ecx
	jne	SHORT $LN6@EnableUiUp
	cmp	DWORD PTR ?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA, -1 ; CTsfUiLessMode::m_dwUIElementSinkCookie
	jne	SHORT $LN6@EnableUiUp
$LN5@EnableUiUp:
; Line 3058
	jmp	$LN7@EnableUiUp
$LN6@EnableUiUp:
; Line 3060
	mov	DWORD PTR _srcTm$[ebp], 0
; Line 3061
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
; Line 3062
	mov	esi, esp
	lea	edx, DWORD PTR _srcTm$[ebp]
	push	edx
	push	OFFSET __GUID_4ea48a35_60ae_446f_8fd6_e6a8d82459f7
	mov	eax, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN7@EnableUiUp
; Line 3064
	movzx	ecx, BYTE PTR _bEnable$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@EnableUiUp
; Line 3067
	mov	esi, esp
	push	OFFSET ?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwUIElementSinkCookie
	mov	edx, DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
	push	edx
	push	OFFSET __GUID_ea1ea136_19df_11d7_a6d2_00065b84435c
	mov	eax, DWORD PTR _srcTm$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _srcTm$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 3069
	jmp	SHORT $LN1@EnableUiUp
$LN2@EnableUiUp:
; Line 3071
	mov	esi, esp
	mov	ecx, DWORD PTR ?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwUIElementSinkCookie
	push	ecx
	mov	edx, DWORD PTR _srcTm$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcTm$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 3072
	mov	DWORD PTR ?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA, -1 ; CTsfUiLessMode::m_dwUIElementSinkCookie
$LN1@EnableUiUp:
; Line 3074
	mov	eax, DWORD PTR _srcTm$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _srcTm$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@EnableUiUp:
; Line 3076
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@EnableUiUp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN11@EnableUiUp:
	DD	1
	DD	$LN10@EnableUiUp
$LN10@EnableUiUp:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@EnableUiUp
$LN9@EnableUiUp:
	DB	115					; 00000073H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	0
?EnableUiUpdates@CTsfUiLessMode@@SAX_N@Z ENDP		; CTsfUiLessMode::EnableUiUpdates
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv89 = -92						; size = 4
tv87 = -88						; size = 4
_valConvMode$1 = -80					; size = 16
_valOpenMode$2 = -56					; size = 16
_pTfConvMode$ = -32					; size = 4
_pTfOpenMode$ = -20					; size = 4
_pcm$ = -8						; size = 4
_bResetCompartmentEventSink$ = 8			; size = 4
?UpdateImeState@CTsfUiLessMode@@SAXH@Z PROC		; CTsfUiLessMode::UpdateImeState
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2826
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2828
	mov	DWORD PTR _pTfOpenMode$[ebp], 0
; Line 2829
	mov	DWORD PTR _pTfConvMode$[ebp], 0
; Line 2830
	lea	eax, DWORD PTR _pTfConvMode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pTfOpenMode$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pcm$[ebp]
	push	edx
	call	?GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z ; CTsfUiLessMode::GetCompartments
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN8@UpdateImeS
; Line 2833
	mov	esi, esp
	lea	eax, DWORD PTR _valOpenMode$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTfOpenMode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pTfOpenMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	$LN6@UpdateImeS
; Line 2836
	mov	esi, esp
	lea	edx, DWORD PTR _valConvMode$1[ebp]
	push	edx
	mov	eax, DWORD PTR _pTfConvMode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pTfConvMode$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN5@UpdateImeS
; Line 2838
	movzx	ecx, WORD PTR _valOpenMode$2[ebp]
	cmp	ecx, 3
	jne	SHORT $LN4@UpdateImeS
; Line 2840
	movzx	edx, BYTE PTR _g_bChineseIME
	test	edx, edx
	je	SHORT $LN3@UpdateImeS
; Line 2842
	cmp	DWORD PTR _valOpenMode$2[ebp+8], 0
	je	SHORT $LN10@UpdateImeS
	cmp	DWORD PTR _valConvMode$1[ebp+8], 0
	je	SHORT $LN10@UpdateImeS
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN11@UpdateImeS
$LN10@UpdateImeS:
	mov	DWORD PTR tv87[ebp], 2
$LN11@UpdateImeS:
	mov	eax, DWORD PTR tv87[ebp]
	mov	DWORD PTR _g_dwState, eax
; Line 2844
	jmp	SHORT $LN4@UpdateImeS
$LN3@UpdateImeS:
; Line 2846
	cmp	DWORD PTR _valOpenMode$2[ebp+8], 0
	je	SHORT $LN12@UpdateImeS
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN13@UpdateImeS
$LN12@UpdateImeS:
	mov	DWORD PTR tv89[ebp], 0
$LN13@UpdateImeS:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _g_dwState, ecx
$LN4@UpdateImeS:
; Line 2849
	mov	esi, esp
	lea	edx, DWORD PTR _valConvMode$1[ebp]
	push	edx
	call	DWORD PTR __imp__VariantClear@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@UpdateImeS:
; Line 2851
	mov	esi, esp
	lea	eax, DWORD PTR _valOpenMode$2[ebp]
	push	eax
	call	DWORD PTR __imp__VariantClear@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@UpdateImeS:
; Line 2854
	cmp	DWORD PTR _bResetCompartmentEventSink$[ebp], 0
	je	SHORT $LN1@UpdateImeS
; Line 2856
	mov	ecx, DWORD PTR _pTfConvMode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pTfOpenMode$[ebp]
	push	edx
	push	0
	call	?SetupCompartmentSinks@CTsfUiLessMode@@KAHHPAUITfCompartment@@0@Z ; CTsfUiLessMode::SetupCompartmentSinks
	add	esp, 12					; 0000000cH
$LN1@UpdateImeS:
; Line 2858
	mov	eax, DWORD PTR _pTfOpenMode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pTfOpenMode$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2859
	mov	ecx, DWORD PTR _pTfConvMode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pTfConvMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2860
	mov	edx, DWORD PTR _pcm$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pcm$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@UpdateImeS:
; Line 2862
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@UpdateImeS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@UpdateImeS:
	DD	5
	DD	$LN19@UpdateImeS
$LN19@UpdateImeS:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN14@UpdateImeS
	DD	-20					; ffffffecH
	DD	4
	DD	$LN15@UpdateImeS
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN16@UpdateImeS
	DD	-56					; ffffffc8H
	DD	16					; 00000010H
	DD	$LN17@UpdateImeS
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN18@UpdateImeS
$LN18@UpdateImeS:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN17@UpdateImeS:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	79					; 0000004fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN16@UpdateImeS:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	102					; 00000066H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN15@UpdateImeS:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	102					; 00000066H
	DB	79					; 0000004fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN14@UpdateImeS:
	DB	112					; 00000070H
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	0
?UpdateImeState@CTsfUiLessMode@@SAXH@Z ENDP		; CTsfUiLessMode::UpdateImeState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv91 = -120						; size = 4
_tip$1 = -112						; size = 72
_pProfileMgr$2 = -32					; size = 4
_pProfiles$ = -20					; size = 4
_hr$ = -12						; size = 4
_ret$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?CurrentInputLocaleIsIme@CTsfUiLessMode@@SAHXZ PROC	; CTsfUiLessMode::CurrentInputLocaleIsIme
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3023
	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 3024
	mov	DWORD PTR _ret$[ebp], 0
; Line 3029
	mov	esi, esp
	lea	eax, DWORD PTR _pProfiles$[ebp]
	push	eax
	push	OFFSET __GUID_1f02b6c5_7842_4ee6_8a0b_9a24183a95ca
	push	1
	push	0
	push	OFFSET _CLSID_TF_InputProcessorProfiles
	call	DWORD PTR __imp__CoCreateInstance@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 3030
	cmp	DWORD PTR _hr$[ebp], 0
	jl	$LN3@CurrentInp
; Line 3033
	mov	esi, esp
	lea	ecx, DWORD PTR _pProfileMgr$2[ebp]
	push	ecx
	push	OFFSET __GUID_71c6e74c_0f28_11d8_a82a_00065b84435c
	mov	edx, DWORD PTR _pProfiles$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pProfiles$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 3034
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN2@CurrentInp
; Line 3037
	mov	esi, esp
	lea	eax, DWORD PTR _tip$1[ebp]
	push	eax
	push	OFFSET _GUID_TFCAT_TIP_KEYBOARD
	mov	ecx, DWORD PTR _pProfileMgr$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pProfileMgr$2[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+40]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 3038
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN1@CurrentInp
; Line 3040
	mov	edx, DWORD PTR _tip$1[ebp]
	and	edx, 1
	je	SHORT $LN6@CurrentInp
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN7@CurrentInp
$LN6@CurrentInp:
	mov	DWORD PTR tv91[ebp], 0
$LN7@CurrentInp:
	mov	eax, DWORD PTR tv91[ebp]
	mov	DWORD PTR _ret$[ebp], eax
$LN1@CurrentInp:
; Line 3042
	mov	ecx, DWORD PTR _pProfileMgr$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pProfileMgr$2[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CurrentInp:
; Line 3044
	mov	edx, DWORD PTR _pProfiles$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pProfiles$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@CurrentInp:
; Line 3046
	mov	eax, DWORD PTR _ret$[ebp]
; Line 3047
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@CurrentInp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@CurrentInp:
	DD	3
	DD	$LN11@CurrentInp
$LN11@CurrentInp:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@CurrentInp
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN9@CurrentInp
	DD	-112					; ffffff90H
	DD	72					; 00000048H
	DD	$LN10@CurrentInp
$LN10@CurrentInp:
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	0
$LN9@CurrentInp:
	DB	112					; 00000070H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	77					; 0000004dH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	0
$LN8@CurrentInp:
	DB	112					; 00000070H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?CurrentInputLocaleIsIme@CTsfUiLessMode@@SAHXZ ENDP	; CTsfUiLessMode::CurrentInputLocaleIsIme
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_source$ = -12						; size = 4
_hr$ = -4						; size = 4
?ReleaseSinks@CTsfUiLessMode@@SAXXZ PROC		; CTsfUiLessMode::ReleaseSinks
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2666
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2671
	cmp	DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A, 0 ; CTsfUiLessMode::m_tm
	je	$LN4@ReleaseSin
	mov	esi, esp
	lea	eax, DWORD PTR _source$[ebp]
	push	eax
	push	OFFSET __GUID_4ea48a35_60ae_446f_8fd6_e6a8d82459f7
	mov	ecx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	$LN4@ReleaseSin
; Line 2673
	mov	esi, esp
	mov	edx, DWORD PTR ?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwUIElementSinkCookie
	push	edx
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2674
	mov	esi, esp
	mov	ecx, DWORD PTR ?m_dwAlpnSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwAlpnSinkCookie
	push	ecx
	mov	edx, DWORD PTR _source$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2675
	mov	eax, DWORD PTR _source$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2676
	push	0
	push	0
	push	1
	call	?SetupCompartmentSinks@CTsfUiLessMode@@KAHHPAUITfCompartment@@0@Z ; CTsfUiLessMode::SetupCompartmentSinks
	add	esp, 12					; 0000000cH
; Line 2677
	mov	ecx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2678
	cmp	DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A, 0 ; CTsfUiLessMode::m_tm
	je	SHORT $LN2@ReleaseSin
	mov	edx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A, 0 ; CTsfUiLessMode::m_tm
$LN2@ReleaseSin:
; Line 2679
	cmp	DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A, 0 ; CTsfUiLessMode::m_TsfSink
	je	SHORT $LN4@ReleaseSin
	mov	eax, DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A, 0 ; CTsfUiLessMode::m_TsfSink
$LN4@ReleaseSin:
; Line 2681
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@ReleaseSin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@ReleaseSin:
	DD	1
	DD	$LN7@ReleaseSin
$LN7@ReleaseSin:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN6@ReleaseSin
$LN6@ReleaseSin:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
?ReleaseSinks@CTsfUiLessMode@@SAXXZ ENDP		; CTsfUiLessMode::ReleaseSinks
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv159 = -60						; size = 4
tv87 = -56						; size = 4
$T2 = -52						; size = 4
$T3 = -48						; size = 4
_srcTm$4 = -40						; size = 4
_bRc$ = -32						; size = 4
_cid$ = -24						; size = 4
_hr$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?SetupSinks@CTsfUiLessMode@@SAHXZ PROC			; CTsfUiLessMode::SetupSinks
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2615
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetupSinks@CTsfUiLessMode@@SAHXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 2622
	mov	esi, esp
	push	OFFSET ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	push	OFFSET __GUID_3e90ade3_7594_4cb0_bb58_69628f5f458c
	push	1
	push	0
	push	OFFSET _CLSID_TF_ThreadMgr
	call	DWORD PTR __imp__CoCreateInstance@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2624
	cmp	DWORD PTR _hr$[ebp], 0
	je	SHORT $LN7@SetupSinks
; Line 2626
	xor	eax, eax
	jmp	$LN8@SetupSinks
$LN7@SetupSinks:
; Line 2631
	mov	esi, esp
	push	4
	lea	eax, DWORD PTR _cid$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	push	eax
	mov	ecx, DWORD PTR [edx+56]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN6@SetupSinks
; Line 2633
	xor	eax, eax
	jmp	$LN8@SetupSinks
$LN6@SetupSinks:
; Line 2637
	mov	DWORD PTR _bRc$[ebp], 0
; Line 2638
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	push	16					; 00000010H
	call	??2@YAPAXIABUnothrow_t@std@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN10@SetupSinks
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0CUIElementSink@CTsfUiLessMode@@QAE@XZ ; CTsfUiLessMode::CUIElementSink::CUIElementSink
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN11@SetupSinks
$LN10@SetupSinks:
	mov	DWORD PTR tv87[ebp], 0
$LN11@SetupSinks:
	mov	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A, eax ; CTsfUiLessMode::m_TsfSink
; Line 2639
	cmp	DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A, 0 ; CTsfUiLessMode::m_TsfSink
	je	$LN5@SetupSinks
; Line 2642
	mov	esi, esp
	lea	ecx, DWORD PTR _srcTm$4[ebp]
	push	ecx
	push	OFFSET __GUID_4ea48a35_60ae_446f_8fd6_e6a8d82459f7
	mov	edx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jl	$LN5@SetupSinks
; Line 2646
	mov	esi, esp
	push	OFFSET ?m_dwUIElementSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwUIElementSinkCookie
	mov	eax, DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
	push	eax
	push	OFFSET __GUID_ea1ea136_19df_11d7_a6d2_00065b84435c
	mov	ecx, DWORD PTR _srcTm$4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _srcTm$4[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN3@SetupSinks
; Line 2651
	cmp	DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A, 0 ; CTsfUiLessMode::m_TsfSink
	je	SHORT $LN12@SetupSinks
	mov	edx, DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
	add	edx, 4
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN13@SetupSinks
$LN12@SetupSinks:
	mov	DWORD PTR tv159[ebp], 0
$LN13@SetupSinks:
	mov	esi, esp
	push	OFFSET ?m_dwAlpnSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwAlpnSinkCookie
	mov	eax, DWORD PTR tv159[ebp]
	push	eax
	push	OFFSET __GUID_71c6e74e_0f28_11d8_a82a_00065b84435c
	mov	ecx, DWORD PTR _srcTm$4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _srcTm$4[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN3@SetupSinks
; Line 2653
	push	0
	push	0
	push	0
	call	?SetupCompartmentSinks@CTsfUiLessMode@@KAHHPAUITfCompartment@@0@Z ; CTsfUiLessMode::SetupCompartmentSinks
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@SetupSinks
; Line 2655
	mov	DWORD PTR _bRc$[ebp], 1
$LN3@SetupSinks:
; Line 2659
	mov	edx, DWORD PTR _srcTm$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _srcTm$4[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@SetupSinks:
; Line 2662
	mov	eax, DWORD PTR _bRc$[ebp]
$LN8@SetupSinks:
; Line 2663
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@SetupSinks
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN19@SetupSinks:
	DD	2
	DD	$LN18@SetupSinks
$LN18@SetupSinks:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@SetupSinks
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN16@SetupSinks
$LN16@SetupSinks:
	DB	115					; 00000073H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	0
$LN15@SetupSinks:
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetupSinks@CTsfUiLessMode@@SAHXZ$0:
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXABUnothrow_t@std@@@Z		; operator delete
	add	esp, 8
	ret	0
__ehhandler$?SetupSinks@CTsfUiLessMode@@SAHXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetupSinks@CTsfUiLessMode@@SAHXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetupSinks@CTsfUiLessMode@@SAHXZ ENDP			; CTsfUiLessMode::SetupSinks
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv167 = -56						; size = 4
tv132 = -52						; size = 4
_srcConvMode$1 = -44					; size = 4
_srcOpenMode$ = -32					; size = 4
_hr$ = -24						; size = 4
_bRc$ = -20						; size = 4
_pcm$ = -12						; size = 4
_bLocalCompartments$ = -1				; size = 1
_bRemoveOnly$ = 8					; size = 4
_pTfOpenMode$ = 12					; size = 4
_pTfConvMode$ = 16					; size = 4
?SetupCompartmentSinks@CTsfUiLessMode@@KAHHPAUITfCompartment@@0@Z PROC ; CTsfUiLessMode::SetupCompartmentSinks
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3118
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3119
	mov	BYTE PTR _bLocalCompartments$[ebp], 0
; Line 3120
	mov	DWORD PTR _pcm$[ebp], 0
; Line 3121
	mov	DWORD PTR _bRc$[ebp], 0
; Line 3122
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
; Line 3124
	cmp	DWORD PTR _pTfOpenMode$[ebp], 0
	jne	SHORT $LN12@SetupCompa
	cmp	DWORD PTR _pTfConvMode$[ebp], 0
	jne	SHORT $LN12@SetupCompa
; Line 3126
	mov	BYTE PTR _bLocalCompartments$[ebp], 1
; Line 3127
	lea	eax, DWORD PTR _pTfConvMode$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pTfOpenMode$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pcm$[ebp]
	push	edx
	call	?GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z ; CTsfUiLessMode::GetCompartments
	add	esp, 12					; 0000000cH
$LN12@SetupCompa:
; Line 3129
	cmp	DWORD PTR _pTfOpenMode$[ebp], 0
	je	SHORT $LN10@SetupCompa
	cmp	DWORD PTR _pTfConvMode$[ebp], 0
	jne	SHORT $LN11@SetupCompa
$LN10@SetupCompa:
; Line 3132
	xor	eax, eax
	jmp	$LN13@SetupCompa
$LN11@SetupCompa:
; Line 3134
	mov	DWORD PTR _srcOpenMode$[ebp], 0
; Line 3135
	mov	esi, esp
	lea	eax, DWORD PTR _srcOpenMode$[ebp]
	push	eax
	push	OFFSET _IID_ITfSource
	mov	ecx, DWORD PTR _pTfOpenMode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pTfOpenMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jl	$LN9@SetupCompa
; Line 3138
	cmp	DWORD PTR ?m_dwOpenModeSinkCookie@CTsfUiLessMode@@1KA, -1 ; CTsfUiLessMode::m_dwOpenModeSinkCookie
	je	SHORT $LN8@SetupCompa
; Line 3140
	mov	esi, esp
	mov	edx, DWORD PTR ?m_dwOpenModeSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwOpenModeSinkCookie
	push	edx
	mov	eax, DWORD PTR _srcOpenMode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _srcOpenMode$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3141
	mov	DWORD PTR ?m_dwOpenModeSinkCookie@CTsfUiLessMode@@1KA, -1 ; CTsfUiLessMode::m_dwOpenModeSinkCookie
$LN8@SetupCompa:
; Line 3146
	cmp	DWORD PTR _bRemoveOnly$[ebp], 0
	jne	SHORT $LN6@SetupCompa
	cmp	DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A, 0 ; CTsfUiLessMode::m_TsfSink
	je	SHORT $LN15@SetupCompa
	mov	ecx, DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
	add	ecx, 8
	mov	DWORD PTR tv132[ebp], ecx
	jmp	SHORT $LN16@SetupCompa
$LN15@SetupCompa:
	mov	DWORD PTR tv132[ebp], 0
$LN16@SetupCompa:
	mov	esi, esp
	push	OFFSET ?m_dwOpenModeSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwOpenModeSinkCookie
	mov	edx, DWORD PTR tv132[ebp]
	push	edx
	push	OFFSET _IID_ITfCompartmentEventSink
	mov	eax, DWORD PTR _srcOpenMode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _srcOpenMode$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jl	$LN7@SetupCompa
$LN6@SetupCompa:
; Line 3148
	mov	DWORD PTR _srcConvMode$1[ebp], 0
; Line 3149
	mov	esi, esp
	lea	ecx, DWORD PTR _srcConvMode$1[ebp]
	push	ecx
	push	OFFSET _IID_ITfSource
	mov	edx, DWORD PTR _pTfConvMode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pTfConvMode$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jl	$LN7@SetupCompa
; Line 3152
	cmp	DWORD PTR ?m_dwConvModeSinkCookie@CTsfUiLessMode@@1KA, -1 ; CTsfUiLessMode::m_dwConvModeSinkCookie
	je	SHORT $LN4@SetupCompa
; Line 3154
	mov	esi, esp
	mov	eax, DWORD PTR ?m_dwConvModeSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwConvModeSinkCookie
	push	eax
	mov	ecx, DWORD PTR _srcConvMode$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _srcConvMode$1[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3155
	mov	DWORD PTR ?m_dwConvModeSinkCookie@CTsfUiLessMode@@1KA, -1 ; CTsfUiLessMode::m_dwConvModeSinkCookie
$LN4@SetupCompa:
; Line 3160
	cmp	DWORD PTR _bRemoveOnly$[ebp], 0
	jne	SHORT $LN2@SetupCompa
	cmp	DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A, 0 ; CTsfUiLessMode::m_TsfSink
	je	SHORT $LN17@SetupCompa
	mov	edx, DWORD PTR ?m_TsfSink@CTsfUiLessMode@@1PAVCUIElementSink@1@A ; CTsfUiLessMode::m_TsfSink
	add	edx, 8
	mov	DWORD PTR tv167[ebp], edx
	jmp	SHORT $LN18@SetupCompa
$LN17@SetupCompa:
	mov	DWORD PTR tv167[ebp], 0
$LN18@SetupCompa:
	mov	esi, esp
	push	OFFSET ?m_dwConvModeSinkCookie@CTsfUiLessMode@@1KA ; CTsfUiLessMode::m_dwConvModeSinkCookie
	mov	eax, DWORD PTR tv167[ebp]
	push	eax
	push	OFFSET _IID_ITfCompartmentEventSink
	mov	ecx, DWORD PTR _srcConvMode$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _srcConvMode$1[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN3@SetupCompa
$LN2@SetupCompa:
; Line 3162
	mov	DWORD PTR _bRc$[ebp], 1
$LN3@SetupCompa:
; Line 3164
	mov	edx, DWORD PTR _srcConvMode$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _srcConvMode$1[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@SetupCompa:
; Line 3167
	mov	eax, DWORD PTR _srcOpenMode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _srcOpenMode$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@SetupCompa:
; Line 3169
	movzx	ecx, BYTE PTR _bLocalCompartments$[ebp]
	test	ecx, ecx
	je	SHORT $LN1@SetupCompa
; Line 3171
	mov	edx, DWORD PTR _pTfOpenMode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pTfOpenMode$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3172
	mov	eax, DWORD PTR _pTfConvMode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pTfConvMode$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3173
	mov	ecx, DWORD PTR _pcm$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pcm$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SetupCompa:
; Line 3175
	mov	eax, DWORD PTR _bRc$[ebp]
$LN13@SetupCompa:
; Line 3176
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@SetupCompa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@SetupCompa:
	DD	3
	DD	$LN22@SetupCompa
$LN22@SetupCompa:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN19@SetupCompa
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN20@SetupCompa
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN21@SetupCompa
$LN21@SetupCompa:
	DB	115					; 00000073H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN20@SetupCompa:
	DB	115					; 00000073H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN19@SetupCompa:
	DB	112					; 00000070H
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	0
?SetupCompartmentSinks@CTsfUiLessMode@@KAHHPAUITfCompartment@@0@Z ENDP ; CTsfUiLessMode::SetupCompartmentSinks
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hr$ = -40						; size = 4
_pTfConvMode$ = -32					; size = 4
_pTfOpenMode$ = -20					; size = 4
_pcm$ = -8						; size = 4
_ppcm$ = 8						; size = 4
_ppTfOpenMode$ = 12					; size = 4
_ppTfConvMode$ = 16					; size = 4
?GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z PROC ; CTsfUiLessMode::GetCompartments
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3082
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 3083
	mov	DWORD PTR _pcm$[ebp], 0
; Line 3084
	mov	DWORD PTR _pTfOpenMode$[ebp], 0
; Line 3085
	mov	DWORD PTR _pTfConvMode$[ebp], 0
; Line 3093
	mov	esi, esp
	lea	eax, DWORD PTR _pcm$[ebp]
	push	eax
	push	OFFSET _IID_ITfCompartmentMgr
	mov	ecx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jl	$LN3@GetCompart
; Line 3095
	mov	esi, esp
	lea	edx, DWORD PTR _pTfOpenMode$[ebp]
	push	edx
	push	OFFSET _GUID_COMPARTMENT_KEYBOARD_OPENCLOSE
	mov	eax, DWORD PTR _pcm$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pcm$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN2@GetCompart
; Line 3098
	mov	esi, esp
	lea	ecx, DWORD PTR _pTfConvMode$[ebp]
	push	ecx
	push	OFFSET ?_GUID_COMPARTMENT_KEYBOARD_INPUTMODE_CONVERSION@?1??GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z@4U_GUID@@A
	mov	edx, DWORD PTR _pcm$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pcm$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN1@GetCompart
; Line 3100
	mov	eax, DWORD PTR _ppcm$[ebp]
	mov	ecx, DWORD PTR _pcm$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 3101
	mov	edx, DWORD PTR _ppTfOpenMode$[ebp]
	mov	eax, DWORD PTR _pTfOpenMode$[ebp]
	mov	DWORD PTR [edx], eax
; Line 3102
	mov	ecx, DWORD PTR _ppTfConvMode$[ebp]
	mov	edx, DWORD PTR _pTfConvMode$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 3103
	mov	eax, 1
	jmp	SHORT $LN4@GetCompart
$LN1@GetCompart:
; Line 3105
	mov	eax, DWORD PTR _pTfOpenMode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pTfOpenMode$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@GetCompart:
; Line 3107
	mov	ecx, DWORD PTR _pcm$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pcm$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@GetCompart:
; Line 3109
	xor	eax, eax
$LN4@GetCompart:
; Line 3110
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@GetCompart
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@GetCompart:
	DD	3
	DD	$LN9@GetCompart
$LN9@GetCompart:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@GetCompart
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@GetCompart
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@GetCompart
$LN8@GetCompart:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	102					; 00000066H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN7@GetCompart:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	102					; 00000066H
	DB	79					; 0000004fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN6@GetCompart:
	DB	112					; 00000070H
	DB	99					; 00000063H
	DB	109					; 0000006dH
	DB	0
?GetCompartments@CTsfUiLessMode@@KAHPAPAUITfCompartmentMgr@@PAPAUITfCompartment@@1@Z ENDP ; CTsfUiLessMode::GetCompartments
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pElement$ = -20					; size = 4
_puiem$ = -8						; size = 4
_dwUIElementId$ = 8					; size = 4
?GetUIElement@CTsfUiLessMode@@KAPAUITfUIElement@@K@Z PROC ; CTsfUiLessMode::GetUIElement
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3009
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 3011
	mov	DWORD PTR _pElement$[ebp], 0
; Line 3013
	mov	esi, esp
	lea	eax, DWORD PTR _puiem$[ebp]
	push	eax
	push	OFFSET __GUID_ea1ea135_19df_11d7_a6d2_00065b84435c
	mov	ecx, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?m_tm@CTsfUiLessMode@@1PAUITfThreadMgrEx@@A ; CTsfUiLessMode::m_tm
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN1@GetUIEleme
; Line 3015
	mov	esi, esp
	lea	edx, DWORD PTR _pElement$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwUIElementId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _puiem$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _puiem$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 3016
	mov	edx, DWORD PTR _puiem$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _puiem$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@GetUIEleme:
; Line 3019
	mov	eax, DWORD PTR _pElement$[ebp]
; Line 3020
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@GetUIEleme
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@GetUIEleme:
	DD	2
	DD	$LN6@GetUIEleme
$LN6@GetUIEleme:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@GetUIEleme
	DD	-20					; ffffffecH
	DD	4
	DD	$LN5@GetUIEleme
$LN5@GetUIEleme:
	DB	112					; 00000070H
	DB	69					; 00000045H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN4@GetUIEleme:
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
?GetUIElement@CTsfUiLessMode@@KAPAUITfUIElement@@K@Z ENDP ; CTsfUiLessMode::GetUIElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv137 = -92						; size = 4
$T1 = -88						; size = 4
$T2 = -84						; size = 4
_j$3 = -80						; size = 4
_i$4 = -76						; size = 4
_bstr$ = -68						; size = 4
_dwPageSize$ = -60					; size = 4
_dwPageStart$ = -56					; size = 4
_uPageCnt$ = -48					; size = 4
_IndexList$ = -40					; size = 4
_uCurrentPage$ = -32					; size = 4
_uCount$ = -20						; size = 4
_uIndex$ = -8						; size = 4
_pcandidate$ = 8					; size = 4
?MakeCandidateStrings@CTsfUiLessMode@@KAXPAUITfCandidateListUIElement@@@Z PROC ; CTsfUiLessMode::MakeCandidateStrings
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2949
	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2950
	mov	DWORD PTR _uIndex$[ebp], 0
; Line 2951
	mov	DWORD PTR _uCount$[ebp], 0
; Line 2952
	mov	DWORD PTR _uCurrentPage$[ebp], 0
; Line 2953
	mov	DWORD PTR _IndexList$[ebp], 0
; Line 2954
	mov	DWORD PTR _uPageCnt$[ebp], 0
; Line 2955
	mov	DWORD PTR _dwPageStart$[ebp], 0
; Line 2956
	mov	DWORD PTR _dwPageSize$[ebp], 0
; Line 2959
	mov	esi, esp
	lea	eax, DWORD PTR _uIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcandidate$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pcandidate$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+40]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2960
	mov	esi, esp
	lea	edx, DWORD PTR _uCount$[ebp]
	push	edx
	mov	eax, DWORD PTR _pcandidate$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pcandidate$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2961
	mov	esi, esp
	lea	ecx, DWORD PTR _uCurrentPage$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcandidate$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pcandidate$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2962
	mov	eax, DWORD PTR _uIndex$[ebp]
	mov	DWORD PTR _g_dwSelection, eax
; Line 2963
	mov	ecx, DWORD PTR _uCount$[ebp]
	mov	DWORD PTR _g_dwCount, ecx
; Line 2964
	mov	BYTE PTR _g_bCandList, 1
; Line 2965
	mov	BYTE PTR _g_bReadingWindow, 0
; Line 2967
	mov	esi, esp
	lea	edx, DWORD PTR _uPageCnt$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _pcandidate$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pcandidate$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+48]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2968
	cmp	DWORD PTR _uPageCnt$[ebp], 0
	jbe	$LN9@MakeCandid
; Line 2970
	mov	ecx, DWORD PTR _uPageCnt$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	call	DWORD PTR ?ImeUiCallback_Malloc@@3P6APAXI@ZA ; ImeUiCallback_Malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _IndexList$[ebp], eax
; Line 2971
	cmp	DWORD PTR _IndexList$[ebp], 0
	je	SHORT $LN9@MakeCandid
; Line 2973
	mov	esi, esp
	lea	edx, DWORD PTR _uPageCnt$[ebp]
	push	edx
	mov	eax, DWORD PTR _uPageCnt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _IndexList$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcandidate$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pcandidate$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2974
	mov	eax, DWORD PTR _uCurrentPage$[ebp]
	mov	ecx, DWORD PTR _IndexList$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _dwPageStart$[ebp], edx
; Line 2977
	mov	eax, DWORD PTR _uPageCnt$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _uCurrentPage$[ebp], eax
	jae	SHORT $LN12@MakeCandid
	mov	ecx, DWORD PTR _uCurrentPage$[ebp]
	mov	edx, DWORD PTR _IndexList$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	lea	ecx, DWORD PTR _uCount$[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR _dwPageStart$[ebp]
	mov	DWORD PTR tv137[ebp], edx
	jmp	SHORT $LN13@MakeCandid
$LN12@MakeCandid:
	mov	eax, DWORD PTR _uCount$[ebp]
	sub	eax, DWORD PTR _dwPageStart$[ebp]
	mov	DWORD PTR tv137[ebp], eax
$LN13@MakeCandid:
	mov	ecx, DWORD PTR tv137[ebp]
	mov	DWORD PTR _dwPageSize$[ebp], ecx
$LN9@MakeCandid:
; Line 2981
	mov	DWORD PTR $T2[ebp], 10			; 0000000aH
	mov	edx, DWORD PTR _dwPageSize$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _g_uCandPageSize, edx
; Line 2982
	mov	eax, DWORD PTR _g_dwSelection
	sub	eax, DWORD PTR _dwPageStart$[ebp]
	mov	DWORD PTR _g_dwSelection, eax
; Line 2984
	push	5120					; 00001400H
	push	0
	push	OFFSET _g_szCandidate
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2985
	mov	ecx, DWORD PTR _dwPageStart$[ebp]
	mov	DWORD PTR _i$4[ebp], ecx
	mov	DWORD PTR _j$3[ebp], 0
	jmp	SHORT $LN7@MakeCandid
$LN6@MakeCandid:
	mov	edx, DWORD PTR _i$4[ebp]
	add	edx, 1
	mov	DWORD PTR _i$4[ebp], edx
	mov	eax, DWORD PTR _j$3[ebp]
	add	eax, 1
	mov	DWORD PTR _j$3[ebp], eax
$LN7@MakeCandid:
	mov	ecx, DWORD PTR _i$4[ebp]
	cmp	ecx, DWORD PTR _g_dwCount
	jae	SHORT $LN5@MakeCandid
	mov	edx, DWORD PTR _j$3[ebp]
	cmp	edx, DWORD PTR _g_uCandPageSize
	jae	SHORT $LN5@MakeCandid
; Line 2987
	mov	esi, esp
	lea	eax, DWORD PTR _bstr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _pcandidate$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pcandidate$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN4@MakeCandid
; Line 2989
	cmp	DWORD PTR _bstr$[ebp], 0
	je	SHORT $LN4@MakeCandid
; Line 2991
	mov	eax, DWORD PTR _bstr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$3[ebp]
	push	ecx
	call	?ComposeCandidateLine@@YAXHPB_W@Z	; ComposeCandidateLine
	add	esp, 8
; Line 2992
	mov	esi, esp
	mov	edx, DWORD PTR _bstr$[ebp]
	push	edx
	call	DWORD PTR __imp__SysFreeString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@MakeCandid:
; Line 2995
	jmp	SHORT $LN6@MakeCandid
$LN5@MakeCandid:
; Line 2997
	mov	eax, DWORD PTR _g_hklCurrent
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	and	ecx, 1023				; 000003ffH
	movzx	edx, cx
	cmp	edx, 18					; 00000012H
	jne	SHORT $LN2@MakeCandid
; Line 2999
	mov	DWORD PTR _g_dwSelection, -1
$LN2@MakeCandid:
; Line 3002
	cmp	DWORD PTR _IndexList$[ebp], 0
	je	SHORT $LN10@MakeCandid
; Line 3004
	mov	esi, esp
	mov	eax, DWORD PTR _IndexList$[ebp]
	push	eax
	call	DWORD PTR ?ImeUiCallback_Free@@3P6AXPAX@ZA ; ImeUiCallback_Free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@MakeCandid:
; Line 3006
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@MakeCandid
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@MakeCandid:
	DD	5
	DD	$LN19@MakeCandid
$LN19@MakeCandid:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN14@MakeCandid
	DD	-20					; ffffffecH
	DD	4
	DD	$LN15@MakeCandid
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN16@MakeCandid
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN17@MakeCandid
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN18@MakeCandid
$LN18@MakeCandid:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN17@MakeCandid:
	DB	117					; 00000075H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN16@MakeCandid:
	DB	117					; 00000075H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN15@MakeCandid:
	DB	117					; 00000075H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN14@MakeCandid:
	DB	117					; 00000075H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
?MakeCandidateStrings@CTsfUiLessMode@@KAXPAUITfCandidateListUIElement@@@Z ENDP ; CTsfUiLessMode::MakeCandidateStrings
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv85 = -88						; size = 4
tv81 = -84						; size = 4
_size$1 = -80						; size = 4
_pszNextSrc$2 = -76					; size = 4
_pszDest$3 = -72					; size = 4
_i$4 = -68						; size = 4
_pszSource$5 = -64					; size = 4
_bstr$ = -56						; size = 4
_dwFlags$ = -44						; size = 4
_fVertical$ = -32					; size = 4
_uErrorIndex$ = -20					; size = 4
_cchMax$ = -8						; size = 4
_preading$ = 8						; size = 4
?MakeReadingInformationString@CTsfUiLessMode@@KAXPAUITfReadingInformationUIElement@@@Z PROC ; CTsfUiLessMode::MakeReadingInformationString
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2897
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2899
	mov	DWORD PTR _uErrorIndex$[ebp], 0
; Line 2903
	mov	esi, esp
	lea	eax, DWORD PTR _dwFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _preading$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _preading$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2904
	mov	esi, esp
	lea	edx, DWORD PTR _cchMax$[ebp]
	push	edx
	mov	eax, DWORD PTR _preading$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _preading$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2905
	mov	esi, esp
	lea	ecx, DWORD PTR _uErrorIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _preading$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _preading$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2906
	mov	esi, esp
	lea	eax, DWORD PTR _fVertical$[ebp]
	push	eax
	mov	ecx, DWORD PTR _preading$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _preading$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+48]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2907
	mov	edx, DWORD PTR _uErrorIndex$[ebp]
	mov	DWORD PTR _g_iReadingError, edx
; Line 2908
	cmp	DWORD PTR _fVertical$[ebp], 0
	jne	SHORT $LN11@MakeReadin
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN12@MakeReadin
$LN11@MakeReadin:
	mov	DWORD PTR tv81[ebp], 0
$LN12@MakeReadin:
	mov	al, BYTE PTR tv81[ebp]
	mov	BYTE PTR _g_bHorizontalReading, al
; Line 2909
	mov	BYTE PTR _g_bReadingWindow, 1
; Line 2910
	mov	DWORD PTR _g_uCandPageSize, 10		; 0000000aH
; Line 2911
	cmp	DWORD PTR _g_iReadingError, 0
	je	SHORT $LN13@MakeReadin
	mov	ecx, DWORD PTR _g_iReadingError
	sub	ecx, 1
	mov	DWORD PTR tv85[ebp], ecx
	jmp	SHORT $LN14@MakeReadin
$LN13@MakeReadin:
	mov	DWORD PTR tv85[ebp], -1
$LN14@MakeReadin:
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _g_dwSelection, edx
; Line 2912
	mov	eax, DWORD PTR _g_iReadingError
	sub	eax, 1
	mov	DWORD PTR _g_iReadingError, eax
; Line 2915
	mov	esi, esp
	lea	ecx, DWORD PTR _bstr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _preading$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _preading$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+36]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	$LN9@MakeReadin
; Line 2917
	cmp	DWORD PTR _bstr$[ebp], 0
	je	$LN9@MakeReadin
; Line 2919
	mov	esi, esp
	mov	eax, DWORD PTR _bstr$[ebp]
	push	eax
	push	32					; 00000020H
	push	OFFSET _g_szReadingString
	call	DWORD PTR __imp__wcscpy_s
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2920
	mov	ecx, DWORD PTR _cchMax$[ebp]
	mov	DWORD PTR _g_dwCount, ecx
; Line 2921
	mov	DWORD PTR _pszSource$5[ebp], OFFSET _g_szReadingString
; Line 2922
	cmp	DWORD PTR _fVertical$[ebp], 0
	je	$LN6@MakeReadin
; Line 2925
	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN5@MakeReadin
$LN4@MakeReadin:
	mov	edx, DWORD PTR _i$4[ebp]
	add	edx, 1
	mov	DWORD PTR _i$4[ebp], edx
$LN5@MakeReadin:
	mov	eax, DWORD PTR _i$4[ebp]
	cmp	eax, DWORD PTR _cchMax$[ebp]
	jae	SHORT $LN3@MakeReadin
; Line 2927
	mov	ecx, DWORD PTR _i$4[ebp]
	shl	ecx, 9
	add	ecx, OFFSET _g_szCandidate
	mov	DWORD PTR _pszDest$3[ebp], ecx
; Line 2928
	mov	edx, DWORD PTR _pszSource$5[ebp]
	movzx	eax, WORD PTR [edx]
	test	eax, eax
	je	SHORT $LN2@MakeReadin
; Line 2930
	mov	esi, esp
	mov	ecx, DWORD PTR _pszSource$5[ebp]
	push	ecx
	call	DWORD PTR __imp__CharNextW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pszNextSrc$2[ebp], eax
; Line 2931
	mov	edx, DWORD PTR _pszNextSrc$2[ebp]
	sub	edx, DWORD PTR _pszSource$5[ebp]
	mov	DWORD PTR _size$1[ebp], edx
; Line 2932
	mov	eax, DWORD PTR _size$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszSource$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszDest$3[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2933
	mov	eax, DWORD PTR _pszNextSrc$2[ebp]
	mov	DWORD PTR _pszSource$5[ebp], eax
; Line 2934
	mov	ecx, DWORD PTR _size$1[ebp]
	mov	edx, DWORD PTR _pszDest$3[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _pszDest$3[ebp], eax
$LN2@MakeReadin:
; Line 2936
	xor	ecx, ecx
	mov	edx, DWORD PTR _pszDest$3[ebp]
	mov	WORD PTR [edx], cx
; Line 2937
	jmp	SHORT $LN4@MakeReadin
$LN3@MakeReadin:
; Line 2939
	jmp	SHORT $LN1@MakeReadin
$LN6@MakeReadin:
; Line 2941
	mov	eax, 512				; 00000200H
	imul	ecx, eax, 0
	mov	edx, 2
	imul	eax, edx, 0
	mov	edx, 32					; 00000020H
	mov	WORD PTR _g_szCandidate[ecx+eax], dx
$LN1@MakeReadin:
; Line 2943
	mov	esi, esp
	mov	eax, DWORD PTR _bstr$[ebp]
	push	eax
	call	DWORD PTR __imp__SysFreeString@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@MakeReadin:
; Line 2946
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@MakeReadin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN21@MakeReadin:
	DD	5
	DD	$LN20@MakeReadin
$LN20@MakeReadin:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN15@MakeReadin
	DD	-20					; ffffffecH
	DD	4
	DD	$LN16@MakeReadin
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN17@MakeReadin
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN18@MakeReadin
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN19@MakeReadin
$LN19@MakeReadin:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN18@MakeReadin:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	70					; 00000046H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	115					; 00000073H
	DB	0
$LN17@MakeReadin:
	DB	102					; 00000066H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN16@MakeReadin:
	DB	117					; 00000075H
	DB	69					; 00000045H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN15@MakeReadin:
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	0
?MakeReadingInformationString@CTsfUiLessMode@@KAXPAUITfReadingInformationUIElement@@@Z ENDP ; CTsfUiLessMode::MakeReadingInformationString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCUIElementSink@CTsfUiLessMode@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCUIElementSink@CTsfUiLessMode@@QAEPAXI@Z PROC	; CTsfUiLessMode::CUIElementSink::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CUIElementSink@CTsfUiLessMode@@QAE@XZ ; CTsfUiLessMode::CUIElementSink::~CUIElementSink
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCUIElementSink@CTsfUiLessMode@@QAEPAXI@Z ENDP	; CTsfUiLessMode::CUIElementSink::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_rguid$ = 12						; size = 4
?OnChange@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@@Z PROC ; CTsfUiLessMode::CUIElementSink::OnChange
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2890
	push	ebp
	mov	ebp, esp
; Line 2892
	push	0
	call	?UpdateImeState@CTsfUiLessMode@@SAXH@Z	; CTsfUiLessMode::UpdateImeState
	add	esp, 4
; Line 2893
	xor	eax, eax
; Line 2894
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?OnChange@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@@Z ENDP ; CTsfUiLessMode::CUIElementSink::OnChange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -8						; size = 4
tv68 = -4						; size = 4
_this$ = 8						; size = 4
_dwProfileType$ = 12					; size = 4
_langid$ = 16						; size = 2
_clsid$ = 20						; size = 4
_catid$ = 24						; size = 4
_guidProfile$ = 28					; size = 4
_hkl$ = 32						; size = 4
_dwFlags$ = 36						; size = 4
?OnActivated@CUIElementSink@CTsfUiLessMode@@UAGJKGABU_GUID@@00PAUHKL__@@K@Z PROC ; CTsfUiLessMode::CUIElementSink::OnActivated
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2866
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2874
	mov	eax, DWORD PTR _guidProfile$[ebp]
	push	eax
	push	OFFSET ?s_TF_PROFILE_DAYI@?1??OnActivated@CUIElementSink@CTsfUiLessMode@@UAGJKGABU_GUID@@00PAUHKL__@@K@Z@4U4@A
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@OnActivate
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN7@OnActivate
$LN6@OnActivate:
	mov	DWORD PTR tv68[ebp], 1
$LN7@OnActivate:
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _g_iCandListIndexBase, ecx
; Line 2875
	push	OFFSET _GUID_TFCAT_TIP_KEYBOARD
	mov	edx, DWORD PTR _catid$[ebp]
	push	edx
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@OnActivate
	mov	eax, DWORD PTR _dwFlags$[ebp]
	and	eax, 1
	je	SHORT $LN3@OnActivate
; Line 2877
	mov	ecx, DWORD PTR _dwProfileType$[ebp]
	and	ecx, 1
	je	SHORT $LN8@OnActivate
	movzx	edx, WORD PTR _langid$[ebp]
	cmp	edx, 1028				; 00000404H
	jne	SHORT $LN8@OnActivate
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN9@OnActivate
$LN8@OnActivate:
	mov	DWORD PTR tv79[ebp], 0
$LN9@OnActivate:
	mov	al, BYTE PTR tv79[ebp]
	mov	BYTE PTR _g_bChineseIME, al
; Line 2878
	mov	ecx, DWORD PTR _dwProfileType$[ebp]
	and	ecx, 1
	je	SHORT $LN2@OnActivate
; Line 2880
	push	1
	call	?UpdateImeState@CTsfUiLessMode@@SAXH@Z	; CTsfUiLessMode::UpdateImeState
	add	esp, 4
; Line 2882
	jmp	SHORT $LN1@OnActivate
$LN2@OnActivate:
; Line 2883
	mov	DWORD PTR _g_dwState, 0
$LN1@OnActivate:
; Line 2884
	call	?OnInputLangChange@@YAXXZ		; OnInputLangChange
$LN3@OnActivate:
; Line 2886
	xor	eax, eax
; Line 2887
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
?OnActivated@CUIElementSink@CTsfUiLessMode@@UAGJKGABU_GUID@@00PAUHKL__@@K@Z ENDP ; CTsfUiLessMode::CUIElementSink::OnActivated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pcandidate$ = -24					; size = 4
_preading$ = -12					; size = 4
_pElement$ = -4						; size = 4
_this$ = 8						; size = 4
_dwUIElementId$ = 12					; size = 4
?EndUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z PROC ; CTsfUiLessMode::CUIElementSink::EndUIElement
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2798
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2799
	mov	eax, DWORD PTR _dwUIElementId$[ebp]
	push	eax
	call	?GetUIElement@CTsfUiLessMode@@KAPAUITfUIElement@@K@Z ; CTsfUiLessMode::GetUIElement
	add	esp, 4
	mov	DWORD PTR _pElement$[ebp], eax
; Line 2800
	cmp	DWORD PTR _pElement$[ebp], 0
	jne	SHORT $LN4@EndUIEleme
; Line 2801
	mov	eax, -2147024809			; 80070057H
	jmp	$LN5@EndUIEleme
$LN4@EndUIEleme:
; Line 2803
	mov	DWORD PTR _preading$[ebp], 0
; Line 2805
	movzx	ecx, BYTE PTR _g_bCandList
	test	ecx, ecx
	jne	SHORT $LN3@EndUIEleme
	mov	esi, esp
	lea	edx, DWORD PTR _preading$[ebp]
	push	edx
	push	OFFSET __GUID_ea1ea139_19df_11d7_a6d2_00065b84435c
	mov	eax, DWORD PTR _pElement$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pElement$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN3@EndUIEleme
; Line 2807
	mov	DWORD PTR _g_dwCount, 0
; Line 2808
	mov	ecx, DWORD PTR _preading$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _preading$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@EndUIEleme:
; Line 2811
	mov	DWORD PTR _pcandidate$[ebp], 0
; Line 2813
	mov	esi, esp
	lea	edx, DWORD PTR _pcandidate$[ebp]
	push	edx
	push	OFFSET __GUID_ea1ea138_19df_11d7_a6d2_00065b84435c
	mov	eax, DWORD PTR _pElement$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pElement$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN2@EndUIEleme
; Line 2815
	mov	ecx, DWORD PTR ?m_nCandidateRefCount@CTsfUiLessMode@@1HA ; CTsfUiLessMode::m_nCandidateRefCount
	sub	ecx, 1
	mov	DWORD PTR ?m_nCandidateRefCount@CTsfUiLessMode@@1HA, ecx ; CTsfUiLessMode::m_nCandidateRefCount
; Line 2816
	jne	SHORT $LN1@EndUIEleme
; Line 2817
	call	?CloseCandidateList@@YAXXZ		; CloseCandidateList
$LN1@EndUIEleme:
; Line 2818
	mov	edx, DWORD PTR _pcandidate$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pcandidate$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@EndUIEleme:
; Line 2821
	mov	eax, DWORD PTR _pElement$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pElement$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2822
	xor	eax, eax
$LN5@EndUIEleme:
; Line 2823
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@EndUIEleme
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN10@EndUIEleme:
	DD	2
	DD	$LN9@EndUIEleme
$LN9@EndUIEleme:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@EndUIEleme
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@EndUIEleme
$LN8@EndUIEleme:
	DB	112					; 00000070H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN7@EndUIEleme:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
?EndUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z ENDP ; CTsfUiLessMode::CUIElementSink::EndUIElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pcandidate$ = -24					; size = 4
_preading$ = -12					; size = 4
_pElement$ = -4						; size = 4
_this$ = 8						; size = 4
_dwUIElementId$ = 12					; size = 4
?UpdateUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z PROC ; CTsfUiLessMode::CUIElementSink::UpdateUIElement
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2773
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2774
	mov	eax, DWORD PTR _dwUIElementId$[ebp]
	push	eax
	call	?GetUIElement@CTsfUiLessMode@@KAPAUITfUIElement@@K@Z ; CTsfUiLessMode::GetUIElement
	add	esp, 4
	mov	DWORD PTR _pElement$[ebp], eax
; Line 2775
	cmp	DWORD PTR _pElement$[ebp], 0
	jne	SHORT $LN4@UpdateUIEl
; Line 2776
	mov	eax, -2147024809			; 80070057H
	jmp	$LN5@UpdateUIEl
$LN4@UpdateUIEl:
; Line 2778
	mov	DWORD PTR _preading$[ebp], 0
; Line 2779
	mov	DWORD PTR _pcandidate$[ebp], 0
; Line 2781
	movzx	ecx, BYTE PTR _g_bCandList
	test	ecx, ecx
	jne	SHORT $LN3@UpdateUIEl
	mov	esi, esp
	lea	edx, DWORD PTR _preading$[ebp]
	push	edx
	push	OFFSET __GUID_ea1ea139_19df_11d7_a6d2_00065b84435c
	mov	eax, DWORD PTR _pElement$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pElement$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN3@UpdateUIEl
; Line 2783
	mov	ecx, DWORD PTR _preading$[ebp]
	push	ecx
	call	?MakeReadingInformationString@CTsfUiLessMode@@KAXPAUITfReadingInformationUIElement@@@Z ; CTsfUiLessMode::MakeReadingInformationString
	add	esp, 4
; Line 2784
	mov	edx, DWORD PTR _preading$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _preading$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2786
	jmp	SHORT $LN2@UpdateUIEl
$LN3@UpdateUIEl:
; Line 2787
	mov	esi, esp
	lea	eax, DWORD PTR _pcandidate$[ebp]
	push	eax
	push	OFFSET __GUID_ea1ea138_19df_11d7_a6d2_00065b84435c
	mov	ecx, DWORD PTR _pElement$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pElement$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN2@UpdateUIEl
; Line 2789
	mov	edx, DWORD PTR _pcandidate$[ebp]
	push	edx
	call	?MakeCandidateStrings@CTsfUiLessMode@@KAXPAUITfCandidateListUIElement@@@Z ; CTsfUiLessMode::MakeCandidateStrings
	add	esp, 4
; Line 2790
	mov	eax, DWORD PTR _pcandidate$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pcandidate$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@UpdateUIEl:
; Line 2793
	mov	ecx, DWORD PTR _pElement$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _pElement$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2794
	xor	eax, eax
$LN5@UpdateUIEl:
; Line 2795
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@UpdateUIEl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN10@UpdateUIEl:
	DD	2
	DD	$LN9@UpdateUIEl
$LN9@UpdateUIEl:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@UpdateUIEl
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@UpdateUIEl
$LN8@UpdateUIEl:
	DB	112					; 00000070H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN7@UpdateUIEl:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
?UpdateUIElement@CUIElementSink@CTsfUiLessMode@@UAGJK@Z ENDP ; CTsfUiLessMode::CUIElementSink::UpdateUIElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pcandidate$ = -24					; size = 4
_preading$ = -12					; size = 4
_pElement$ = -4						; size = 4
_this$ = 8						; size = 4
_dwUIElementId$ = 12					; size = 4
_pbShow$ = 16						; size = 4
?BeginUIElement@CUIElementSink@CTsfUiLessMode@@UAGJKPAH@Z PROC ; CTsfUiLessMode::CUIElementSink::BeginUIElement
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2746
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2747
	mov	eax, DWORD PTR _dwUIElementId$[ebp]
	push	eax
	call	?GetUIElement@CTsfUiLessMode@@KAPAUITfUIElement@@K@Z ; CTsfUiLessMode::GetUIElement
	add	esp, 4
	mov	DWORD PTR _pElement$[ebp], eax
; Line 2748
	cmp	DWORD PTR _pElement$[ebp], 0
	jne	SHORT $LN4@BeginUIEle
; Line 2749
	mov	eax, -2147024809			; 80070057H
	jmp	$LN5@BeginUIEle
$LN4@BeginUIEle:
; Line 2751
	mov	DWORD PTR _preading$[ebp], 0
; Line 2752
	mov	DWORD PTR _pcandidate$[ebp], 0
; Line 2753
	mov	ecx, DWORD PTR _pbShow$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 2755
	movzx	edx, BYTE PTR _g_bCandList
	test	edx, edx
	jne	SHORT $LN3@BeginUIEle
	mov	esi, esp
	lea	eax, DWORD PTR _preading$[ebp]
	push	eax
	push	OFFSET __GUID_ea1ea139_19df_11d7_a6d2_00065b84435c
	mov	ecx, DWORD PTR _pElement$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pElement$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN3@BeginUIEle
; Line 2757
	mov	edx, DWORD PTR _preading$[ebp]
	push	edx
	call	?MakeReadingInformationString@CTsfUiLessMode@@KAXPAUITfReadingInformationUIElement@@@Z ; CTsfUiLessMode::MakeReadingInformationString
	add	esp, 4
; Line 2758
	mov	eax, DWORD PTR _preading$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _preading$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2760
	jmp	SHORT $LN2@BeginUIEle
$LN3@BeginUIEle:
; Line 2761
	mov	esi, esp
	lea	ecx, DWORD PTR _pcandidate$[ebp]
	push	ecx
	push	OFFSET __GUID_ea1ea138_19df_11d7_a6d2_00065b84435c
	mov	edx, DWORD PTR _pElement$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pElement$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN2@BeginUIEle
; Line 2763
	mov	eax, DWORD PTR ?m_nCandidateRefCount@CTsfUiLessMode@@1HA ; CTsfUiLessMode::m_nCandidateRefCount
	add	eax, 1
	mov	DWORD PTR ?m_nCandidateRefCount@CTsfUiLessMode@@1HA, eax ; CTsfUiLessMode::m_nCandidateRefCount
; Line 2764
	mov	ecx, DWORD PTR _pcandidate$[ebp]
	push	ecx
	call	?MakeCandidateStrings@CTsfUiLessMode@@KAXPAUITfCandidateListUIElement@@@Z ; CTsfUiLessMode::MakeCandidateStrings
	add	esp, 4
; Line 2765
	mov	edx, DWORD PTR _pcandidate$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pcandidate$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@BeginUIEle:
; Line 2768
	mov	eax, DWORD PTR _pElement$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pElement$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2769
	xor	eax, eax
$LN5@BeginUIEle:
; Line 2770
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@BeginUIEle
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN10@BeginUIEle:
	DD	2
	DD	$LN9@BeginUIEle
$LN9@BeginUIEle:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@BeginUIEle
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@BeginUIEle
$LN8@BeginUIEle:
	DB	112					; 00000070H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN7@BeginUIEle:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
?BeginUIElement@CUIElementSink@CTsfUiLessMode@@UAGJKPAH@Z ENDP ; CTsfUiLessMode::CUIElementSink::BeginUIElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -20						; size = 4
tv66 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_cr$ = -4						; size = 4
_this$ = 8						; size = 4
?Release@CUIElementSink@CTsfUiLessMode@@UAGKXZ PROC	; CTsfUiLessMode::CUIElementSink::Release
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2734
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2735
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR tv66[ebp]
	mov	DWORD PTR _cr$[ebp], ecx
; Line 2737
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN1@Release
; Line 2739
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GCUIElementSink@CTsfUiLessMode@@QAEPAXI@Z
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN1@Release
$LN4@Release:
	mov	DWORD PTR tv73[ebp], 0
$LN1@Release:
; Line 2742
	mov	eax, DWORD PTR _cr$[ebp]
; Line 2743
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CUIElementSink@CTsfUiLessMode@@UAGKXZ ENDP	; CTsfUiLessMode::CUIElementSink::Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CUIElementSink@CTsfUiLessMode@@UAGKXZ PROC	; CTsfUiLessMode::CUIElementSink::AddRef
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2728
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2729
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR tv66[ebp]
; Line 2730
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CUIElementSink@CTsfUiLessMode@@UAGKXZ ENDP	; CTsfUiLessMode::CUIElementSink::AddRef
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv135 = -8						; size = 4
tv93 = -4						; size = 4
_this$ = 8						; size = 4
_riid$ = 12						; size = 4
_ppvObj$ = 16						; size = 4
?QueryInterface@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@PAPAX@Z PROC ; CTsfUiLessMode::CUIElementSink::QueryInterface
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2694
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2695
	cmp	DWORD PTR _ppvObj$[ebp], 0
	jne	SHORT $LN9@QueryInter
; Line 2696
	mov	eax, -2147024809			; 80070057H
	jmp	$LN10@QueryInter
$LN9@QueryInter:
; Line 2698
	mov	eax, DWORD PTR _ppvObj$[ebp]
	mov	DWORD PTR [eax], 0
; Line 2700
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@QueryInter
; Line 2702
	mov	edx, DWORD PTR _ppvObj$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN7@QueryInter
$LN8@QueryInter:
; Line 2704
	push	OFFSET __GUID_ea1ea136_19df_11d7_a6d2_00065b84435c
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@QueryInter
; Line 2706
	mov	edx, DWORD PTR _ppvObj$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN7@QueryInter
$LN6@QueryInter:
; Line 2708
	push	OFFSET __GUID_71c6e74e_0f28_11d8_a82a_00065b84435c
	mov	ecx, DWORD PTR _riid$[ebp]
	push	ecx
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@QueryInter
; Line 2710
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN12@QueryInter
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv93[ebp], edx
	jmp	SHORT $LN13@QueryInter
$LN12@QueryInter:
	mov	DWORD PTR tv93[ebp], 0
$LN13@QueryInter:
	mov	eax, DWORD PTR _ppvObj$[ebp]
	mov	ecx, DWORD PTR tv93[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN7@QueryInter
$LN4@QueryInter:
; Line 2712
	push	OFFSET __GUID_743abd5f_f26d_48df_8cc5_238492419b64
	mov	edx, DWORD PTR _riid$[ebp]
	push	edx
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@QueryInter
; Line 2714
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN14@QueryInter
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN15@QueryInter
$LN14@QueryInter:
	mov	DWORD PTR tv135[ebp], 0
$LN15@QueryInter:
	mov	ecx, DWORD PTR _ppvObj$[ebp]
	mov	edx, DWORD PTR tv135[ebp]
	mov	DWORD PTR [ecx], edx
$LN7@QueryInter:
; Line 2717
	mov	eax, DWORD PTR _ppvObj$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@QueryInter
; Line 2719
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2720
	xor	eax, eax
	jmp	SHORT $LN10@QueryInter
$LN1@QueryInter:
; Line 2723
	mov	eax, -2147467262			; 80004002H
$LN10@QueryInter:
; Line 2724
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CUIElementSink@CTsfUiLessMode@@UAGJABU_GUID@@PAPAX@Z ENDP ; CTsfUiLessMode::CUIElementSink::QueryInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CUIElementSink@CTsfUiLessMode@@QAE@XZ PROC		; CTsfUiLessMode::CUIElementSink::~CUIElementSink
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2690
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@
; Line 2691
	mov	esp, ebp
	pop	ebp
	ret	0
??1CUIElementSink@CTsfUiLessMode@@QAE@XZ ENDP		; CTsfUiLessMode::CUIElementSink::~CUIElementSink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CUIElementSink@CTsfUiLessMode@@QAE@XZ PROC		; CTsfUiLessMode::CUIElementSink::CUIElementSink
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2684
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ITfUIElementSink@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ITfInputProcessorProfileActivationSink@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0ITfCompartmentEventSink@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CUIElementSink@CTsfUiLessMode@@6BITfUIElementSink@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CUIElementSink@CTsfUiLessMode@@6BITfInputProcessorProfileActivationSink@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CUIElementSink@CTsfUiLessMode@@6BITfCompartmentEventSink@@@
; Line 2685
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 1
; Line 2686
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CUIElementSink@CTsfUiLessMode@@QAE@XZ ENDP		; CTsfUiLessMode::CUIElementSink::CUIElementSink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SendKeyMsg@@YAJPAUHWND__@@II@Z
_TEXT	SEGMENT
_lRc$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_msg$ = 12						; size = 4
_wp$ = 16						; size = 4
?SendKeyMsg@@YAJPAUHWND__@@II@Z PROC			; SendKeyMsg, COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 328
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 329
	mov	BYTE PTR _bIsSendingKeyMessage, 1
; Line 330
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __SendMessage
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lRc$[ebp], eax
; Line 331
	mov	BYTE PTR _bIsSendingKeyMessage, 0
; Line 332
	mov	eax, DWORD PTR _lRc$[ebp]
; Line 333
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SendKeyMsg@@YAJPAUHWND__@@II@Z ENDP			; SendKeyMsg
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dwImeLevel$ = 8					; size = 4
?ImeUi_SetSupportLevel@@YAXK@Z PROC			; ImeUi_SetSupportLevel
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2259
	push	ebp
	mov	ebp, esp
; Line 2260
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	jne	SHORT $LN1@ImeUi_SetS
; Line 2261
	jmp	SHORT $LN2@ImeUi_SetS
$LN1@ImeUi_SetS:
; Line 2262
	mov	ecx, DWORD PTR _dwImeLevel$[ebp]
	mov	DWORD PTR _g_dwIMELevelSaved, ecx
; Line 2263
	mov	edx, DWORD PTR _dwImeLevel$[ebp]
	push	edx
	call	?SetSupportLevel@@YAXK@Z		; SetSupportLevel
	add	esp, 4
$LN2@ImeUi_SetS:
; Line 2264
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?ImeUi_SetSupportLevel@@YAXK@Z ENDP			; ImeUi_SetSupportLevel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dwImeLevel$ = 8					; size = 4
?SetSupportLevel@@YAXK@Z PROC				; SetSupportLevel
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2245
	push	ebp
	mov	ebp, esp
; Line 2246
	cmp	DWORD PTR _dwImeLevel$[ebp], 2
	jb	SHORT $LN2@SetSupport
	cmp	DWORD PTR _dwImeLevel$[ebp], 3
	jbe	SHORT $LN3@SetSupport
$LN2@SetSupport:
; Line 2247
	jmp	SHORT $LN4@SetSupport
$LN3@SetSupport:
; Line 2248
	mov	eax, DWORD PTR _g_hklCurrent
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	and	ecx, 1023				; 000003ffH
	movzx	edx, cx
	cmp	edx, 18					; 00000012H
	jne	SHORT $LN1@SetSupport
; Line 2250
	mov	DWORD PTR _dwImeLevel$[ebp], 3
$LN1@SetSupport:
; Line 2252
	mov	eax, DWORD PTR _dwImeLevel$[ebp]
	mov	DWORD PTR _g_dwIMELevel, eax
; Line 2254
	push	0
	call	?ImeUi_FinalizeString@@YAX_N@Z		; ImeUi_FinalizeString
	add	esp, 4
; Line 2255
	call	?SetCompStringColor@@YAXXZ		; SetCompStringColor
$LN4@SetSupport:
; Line 2256
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?SetSupportLevel@@YAXK@Z ENDP				; SetSupportLevel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv78 = -32						; size = 4
tv73 = -28						; size = 4
_i$1 = -24						; size = 4
_szCodePage$ = -16					; size = 8
__$ArrayPad$ = -4					; size = 4
?CheckInputLocale@@YAXXZ PROC				; CheckInputLocale
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2524
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2526
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__GetKeyboardLayout@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _g_hklCurrent, eax
; Line 2527
	mov	eax, DWORD PTR ?hklPrev@?1??CheckInputLocale@@YAXXZ@4PAUHKL__@@A
	cmp	eax, DWORD PTR _g_hklCurrent
	jne	SHORT $LN15@CheckInput
; Line 2529
	jmp	$LN16@CheckInput
$LN15@CheckInput:
; Line 2531
	mov	ecx, DWORD PTR _g_hklCurrent
	mov	DWORD PTR ?hklPrev@?1??CheckInputLocale@@YAXXZ@4PAUHKL__@@A, ecx
; Line 2532
	mov	edx, DWORD PTR _g_hklCurrent
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	and	eax, 1023				; 000003ffH
	movzx	ecx, ax
	mov	DWORD PTR tv73[ebp], ecx
	cmp	DWORD PTR tv73[ebp], 4
	je	SHORT $LN12@CheckInput
	cmp	DWORD PTR tv73[ebp], 17			; 00000011H
	je	$LN5@CheckInput
	cmp	DWORD PTR tv73[ebp], 18			; 00000012H
	je	SHORT $LN6@CheckInput
	jmp	$LN4@CheckInput
$LN12@CheckInput:
; Line 2536
	mov	BYTE PTR _g_bVerticalCand, 1
; Line 2537
	mov	edx, DWORD PTR _g_hklCurrent
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	sar	eax, 10					; 0000000aH
	mov	DWORD PTR tv78[ebp], eax
	cmp	DWORD PTR tv78[ebp], 1
	je	SHORT $LN8@CheckInput
	cmp	DWORD PTR tv78[ebp], 2
	je	SHORT $LN9@CheckInput
	jmp	SHORT $LN7@CheckInput
$LN9@CheckInput:
; Line 2540
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _g_aszIndicator[ecx]
	mov	DWORD PTR _g_pszIndicatior, edx
; Line 2542
	mov	BYTE PTR _g_bVerticalCand, 0
; Line 2543
	jmp	SHORT $LN10@CheckInput
$LN8@CheckInput:
; Line 2545
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _g_aszIndicator[eax]
	mov	DWORD PTR _g_pszIndicatior, ecx
; Line 2546
	jmp	SHORT $LN10@CheckInput
$LN7@CheckInput:
; Line 2548
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _g_aszIndicator[eax]
	mov	DWORD PTR _g_pszIndicatior, ecx
$LN10@CheckInput:
; Line 2551
	jmp	SHORT $LN13@CheckInput
$LN6@CheckInput:
; Line 2554
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _g_aszIndicator[eax]
	mov	DWORD PTR _g_pszIndicatior, ecx
; Line 2555
	mov	BYTE PTR _g_bVerticalCand, 0
; Line 2556
	jmp	SHORT $LN13@CheckInput
$LN5@CheckInput:
; Line 2559
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _g_aszIndicator[edx]
	mov	DWORD PTR _g_pszIndicatior, eax
; Line 2560
	mov	BYTE PTR _g_bVerticalCand, 1
; Line 2561
	jmp	SHORT $LN13@CheckInput
$LN4@CheckInput:
; Line 2563
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _g_aszIndicator[edx]
	mov	DWORD PTR _g_pszIndicatior, eax
$LN13@CheckInput:
; Line 2567
	mov	esi, esp
	push	8
	lea	ecx, DWORD PTR _szCodePage$[ebp]
	push	ecx
	push	4100					; 00001004H
	mov	edx, DWORD PTR _g_hklCurrent
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	push	eax
	call	DWORD PTR __imp__GetLocaleInfoA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2568
	push	0
	push	0
	lea	ecx, DWORD PTR _szCodePage$[ebp]
	push	ecx
	call	?_strtoul@@YAKPBDPAPA_WH@Z		; _strtoul
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _g_uCodePage, eax
; Line 2569
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@CheckInput
$LN2@CheckInput:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN3@CheckInput:
	cmp	DWORD PTR _i$1[ebp], 256		; 00000100H
	jge	SHORT $LN16@CheckInput
; Line 2571
	mov	esi, esp
	movzx	eax, BYTE PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _g_uCodePage
	push	ecx
	call	DWORD PTR __imp__IsDBCSLeadByteEx@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _i$1[ebp]
	mov	BYTE PTR _LeadByteTable[edx], al
; Line 2572
	jmp	SHORT $LN2@CheckInput
$LN16@CheckInput:
; Line 2573
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@CheckInput
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@CheckInput:
	DD	1
	DD	$LN19@CheckInput
$LN19@CheckInput:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN18@CheckInput
$LN18@CheckInput:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
?CheckInputLocale@@YAXXZ ENDP				; CheckInputLocale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_himc$1 = -288						; size = 4
_hIme$ = -284						; size = 4
_kl$ = -280						; size = 4
_szImeFile$ = -272					; size = 261
__$ArrayPad$ = -4					; size = 4
?SetImeApi@@YAXXZ PROC					; SetImeApi
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2497
	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2498
	mov	DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA, 0 ; _GetReadingString
; Line 2499
	mov	DWORD PTR ?_ShowReadingWindow@@3P6GHPAUHIMC__@@H@ZA, 0 ; _ShowReadingWindow
; Line 2500
	movzx	eax, BYTE PTR _g_bUILessMode
	test	eax, eax
	je	SHORT $LN5@SetImeApi
; Line 2501
	jmp	$LN6@SetImeApi
$LN5@SetImeApi:
; Line 2504
	mov	ecx, DWORD PTR _g_hklCurrent
	mov	DWORD PTR _kl$[ebp], ecx
; Line 2505
	push	260					; 00000104H
	lea	edx, DWORD PTR _szImeFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _kl$[ebp]
	push	eax
	call	_ImmGetIMEFileNameA@12
	test	eax, eax
	ja	SHORT $LN4@SetImeApi
; Line 2506
	jmp	$LN6@SetImeApi
$LN4@SetImeApi:
; Line 2507
	mov	esi, esp
	push	2048					; 00000800H
	push	0
	lea	ecx, DWORD PTR _szImeFile$[ebp]
	push	ecx
	call	DWORD PTR __imp__LoadLibraryExA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hIme$[ebp], eax
; Line 2508
	cmp	DWORD PTR _hIme$[ebp], 0
	jne	SHORT $LN3@SetImeApi
; Line 2509
	jmp	$LN6@SetImeApi
$LN3@SetImeApi:
; Line 2510
	mov	esi, esp
	push	OFFSET $SG154210
	mov	edx, DWORD PTR _hIme$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA, eax ; _GetReadingString
; Line 2511
	mov	esi, esp
	push	OFFSET $SG154214
	mov	eax, DWORD PTR _hIme$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?_ShowReadingWindow@@3P6GHPAUHIMC__@@H@ZA, eax ; _ShowReadingWindow
; Line 2512
	cmp	DWORD PTR ?_ShowReadingWindow@@3P6GHPAUHIMC__@@H@ZA, 0 ; _ShowReadingWindow
	je	SHORT $LN6@SetImeApi
; Line 2514
	mov	ecx, DWORD PTR _g_hwndCurr
	push	ecx
	call	_ImmGetContext@4
	mov	DWORD PTR _himc$1[ebp], eax
; Line 2515
	cmp	DWORD PTR _himc$1[ebp], 0
	je	SHORT $LN6@SetImeApi
; Line 2517
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _himc$1[ebp]
	push	edx
	call	DWORD PTR ?_ShowReadingWindow@@3P6GHPAUHIMC__@@H@ZA ; _ShowReadingWindow
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2518
	mov	eax, DWORD PTR _himc$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _g_hwndCurr
	push	ecx
	call	_ImmReleaseContext@8
$LN6@SetImeApi:
; Line 2521
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SetImeApi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@SetImeApi:
	DD	1
	DD	$LN9@SetImeApi
$LN9@SetImeApi:
	DD	-272					; fffffef0H
	DD	261					; 00000105H
	DD	$LN8@SetImeApi
$LN8@SetImeApi:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	73					; 00000049H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?SetImeApi@@YAXXZ ENDP					; SetImeApi
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv84 = -12						; size = 4
_hwndImeDef$ = -8					; size = 4
_uLang$ = -4						; size = 4
?OnInputLangChange@@YAXXZ PROC				; OnInputLangChange
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2477
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2478
	mov	eax, DWORD PTR _g_hklCurrent
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	and	ecx, 1023				; 000003ffH
	movzx	edx, cx
	mov	DWORD PTR _uLang$[ebp], edx
; Line 2479
	call	?CheckToggleState@@YAXXZ		; CheckToggleState
; Line 2480
	call	?OnInputLangChangeWorker@@YAXXZ		; OnInputLangChangeWorker
; Line 2481
	mov	eax, DWORD PTR _g_hklCurrent
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	and	ecx, 1023				; 000003ffH
	movzx	edx, cx
	cmp	DWORD PTR _uLang$[ebp], edx
	je	SHORT $LN2@OnInputLan
; Line 2485
	mov	eax, DWORD PTR _g_hklCurrent
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	and	ecx, 1023				; 000003ffH
	movzx	edx, cx
	cmp	edx, 18					; 00000012H
	jne	SHORT $LN5@OnInputLan
	mov	DWORD PTR tv84[ebp], 3
	jmp	SHORT $LN6@OnInputLan
$LN5@OnInputLan:
	mov	eax, DWORD PTR _g_dwIMELevelSaved
	mov	DWORD PTR tv84[ebp], eax
$LN6@OnInputLan:
	mov	ecx, DWORD PTR tv84[ebp]
	push	ecx
	call	?SetSupportLevel@@YAXK@Z		; SetSupportLevel
	add	esp, 4
$LN2@OnInputLan:
; Line 2487
	mov	edx, DWORD PTR _g_hwndCurr
	push	edx
	call	_ImmGetDefaultIMEWnd@4
	mov	DWORD PTR _hwndImeDef$[ebp], eax
; Line 2488
	cmp	DWORD PTR _hwndImeDef$[ebp], 0
	je	SHORT $LN3@OnInputLan
; Line 2491
	mov	esi, esp
	push	0
	push	34					; 00000022H
	push	643					; 00000283H
	mov	eax, DWORD PTR _hwndImeDef$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2492
	mov	esi, esp
	push	0
	push	33					; 00000021H
	push	643					; 00000283H
	mov	ecx, DWORD PTR _hwndImeDef$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@OnInputLan:
; Line 2494
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnInputLangChange@@YAXXZ ENDP				; OnInputLangChange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -4						; size = 4
?OnInputLangChangeWorker@@YAXXZ PROC			; OnInputLangChangeWorker
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2468
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2469
	movzx	eax, BYTE PTR _g_bUILessMode
	test	eax, eax
	jne	SHORT $LN1@OnInputLan
; Line 2471
	cmp	DWORD PTR _g_hklCurrent, -536476668	; e0060404H
	jne	SHORT $LN4@OnInputLan
	mov	DWORD PTR tv67[ebp], 0
	jmp	SHORT $LN5@OnInputLan
$LN4@OnInputLan:
	mov	DWORD PTR tv67[ebp], 1
$LN5@OnInputLan:
	mov	ecx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _g_iCandListIndexBase, ecx
$LN1@OnInputLan:
; Line 2473
	call	?SetImeApi@@YAXXZ			; SetImeApi
; Line 2474
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?OnInputLangChangeWorker@@YAXXZ ENDP			; OnInputLangChangeWorker
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -336						; size = 4
tv67 = -332						; size = 4
_dwType$1 = -324					; size = 4
_dwMapping$2 = -312					; size = 4
_dwSize$3 = -300					; size = 4
_lRc$4 = -292						; size = 4
_dwVer$5 = -288						; size = 4
_hkey$6 = -280						; size = 4
_szRegPath$7 = -268					; size = 260
__$ArrayPad$ = -4					; size = 4
_dwId$ = 8						; size = 4
?GetReadingWindowOrientation@@YAXK@Z PROC		; GetReadingWindowOrientation
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2371
	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 2372
	cmp	DWORD PTR _g_hklCurrent, -535951356	; e00e0804H
	je	SHORT $LN10@GetReading
	cmp	DWORD PTR _g_hklCurrent, -536280060	; e0090404H
	je	SHORT $LN10@GetReading
	cmp	DWORD PTR _dwId$[ebp], 0
	je	SHORT $LN10@GetReading
	mov	DWORD PTR tv67[ebp], 0
	jmp	SHORT $LN11@GetReading
$LN10@GetReading:
	mov	DWORD PTR tv67[ebp], 1
$LN11@GetReading:
	mov	al, BYTE PTR tv67[ebp]
	mov	BYTE PTR _g_bHorizontalReading, al
; Line 2373
	movzx	ecx, BYTE PTR _g_bHorizontalReading
	test	ecx, ecx
	jne	$LN8@GetReading
	mov	edx, DWORD PTR _dwId$[ebp]
	and	edx, 65535				; 0000ffffH
	cmp	edx, 1028				; 00000404H
	jne	$LN8@GetReading
; Line 2377
	mov	eax, DWORD PTR _dwId$[ebp]
	and	eax, -65536				; ffff0000H
	mov	DWORD PTR _dwVer$5[ebp], eax
; Line 2378
	mov	esi, esp
	push	OFFSET $SG154105
	push	260					; 00000104H
	lea	ecx, DWORD PTR _szRegPath$7[ebp]
	push	ecx
	call	DWORD PTR __imp__strcpy_s
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2379
	cmp	DWORD PTR _dwVer$5[ebp], 83951616	; 05010000H
	jb	SHORT $LN12@GetReading
	mov	DWORD PTR tv79[ebp], OFFSET $SG154109
	jmp	SHORT $LN13@GetReading
$LN12@GetReading:
	mov	DWORD PTR tv79[ebp], OFFSET $SG154110
$LN13@GetReading:
	mov	esi, esp
	mov	edx, DWORD PTR tv79[ebp]
	push	edx
	push	260					; 00000104H
	lea	eax, DWORD PTR _szRegPath$7[ebp]
	push	eax
	call	DWORD PTR __imp__strcat_s
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2380
	mov	esi, esp
	lea	ecx, DWORD PTR _hkey$6[ebp]
	push	ecx
	push	131097					; 00020019H
	push	0
	lea	edx, DWORD PTR _szRegPath$7[ebp]
	push	edx
	push	-2147483647				; 80000001H
	call	DWORD PTR __imp__RegOpenKeyExA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lRc$4[ebp], eax
; Line 2381
	cmp	DWORD PTR _lRc$4[ebp], 0
	jne	$LN8@GetReading
; Line 2383
	mov	DWORD PTR _dwSize$3[ebp], 4
; Line 2384
	mov	esi, esp
	lea	eax, DWORD PTR _dwSize$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _dwMapping$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _dwType$1[ebp]
	push	edx
	push	0
	push	OFFSET $SG154121
	mov	eax, DWORD PTR _hkey$6[ebp]
	push	eax
	call	DWORD PTR __imp__RegQueryValueExA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lRc$4[ebp], eax
; Line 2385
	cmp	DWORD PTR _lRc$4[ebp], 0
	jne	SHORT $LN5@GetReading
; Line 2394
	cmp	DWORD PTR _dwVer$5[ebp], 83886080	; 05000000H
	ja	SHORT $LN2@GetReading
	movzx	ecx, BYTE PTR _dwMapping$2[ebp]
	cmp	ecx, 34					; 00000022H
	je	SHORT $LN3@GetReading
	movzx	edx, BYTE PTR _dwMapping$2[ebp]
	cmp	edx, 35					; 00000023H
	je	SHORT $LN3@GetReading
$LN2@GetReading:
	cmp	DWORD PTR _dwVer$5[ebp], 83951616	; 05010000H
	je	SHORT $LN1@GetReading
	cmp	DWORD PTR _dwVer$5[ebp], 84017152	; 05020000H
	jne	SHORT $LN5@GetReading
$LN1@GetReading:
	movzx	eax, BYTE PTR _dwMapping$2[ebp]
	cmp	eax, 34					; 00000022H
	jl	SHORT $LN5@GetReading
	movzx	ecx, BYTE PTR _dwMapping$2[ebp]
	cmp	ecx, 36					; 00000024H
	jg	SHORT $LN5@GetReading
$LN3@GetReading:
; Line 2396
	mov	BYTE PTR _g_bHorizontalReading, 1
$LN5@GetReading:
; Line 2399
	mov	esi, esp
	mov	edx, DWORD PTR _hkey$6[ebp]
	push	edx
	call	DWORD PTR __imp__RegCloseKey@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@GetReading:
; Line 2402
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@GetReading
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@GetReading:
	DD	5
	DD	$LN19@GetReading
$LN19@GetReading:
	DD	-268					; fffffef4H
	DD	260					; 00000104H
	DD	$LN14@GetReading
	DD	-280					; fffffee8H
	DD	4
	DD	$LN15@GetReading
	DD	-300					; fffffed4H
	DD	4
	DD	$LN16@GetReading
	DD	-312					; fffffec8H
	DD	4
	DD	$LN17@GetReading
	DD	-324					; fffffebcH
	DD	4
	DD	$LN18@GetReading
$LN18@GetReading:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN17@GetReading:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN16@GetReading:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN15@GetReading:
	DB	104					; 00000068H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
$LN14@GetReading:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	103					; 00000067H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
?GetReadingWindowOrientation@@YAXK@Z ENDP		; GetReadingWindowOrientation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv301 = -196						; size = 4
tv493 = -190						; size = 2
tv490 = -188						; size = 4
tv487 = -184						; size = 4
tv242 = -180						; size = 4
tv177 = -176						; size = 4
tv77 = -172						; size = 4
tv335 = -166						; size = 2
tv332 = -164						; size = 4
tv329 = -160						; size = 4
tv69 = -156						; size = 4
$T1 = -152						; size = 4
$T2 = -148						; size = 4
$T3 = -144						; size = 4
_y$4 = -140						; size = 4
_x$5 = -136						; size = 4
_bWrite$6 = -129					; size = 1
_cSave$7 = -128						; size = 2
_szChar$8 = -120					; size = 6
_bgColor$9 = -108					; size = 4
_bgXnext$ = -100					; size = 4
_dwCompLineStart$ = -92					; size = 4
_pszCurrentCompLine$ = -88				; size = 4
_cType$ = -84						; size = 4
_saveCandPos$ = -77					; size = 1
_temp$10 = -76						; size = 2
_hCompChar$ = -68					; size = 4
_wCompChar$ = -56					; size = 4
_pszMlcs$ = -48						; size = 4
_candY$ = -44						; size = 4
_candX$ = -40						; size = 4
_bgY$ = -36						; size = 4
_bgX$ = -32						; size = 4
_len$ = -28						; size = 4
_uDummy$ = -20						; size = 4
_i$ = -12						; size = 4
_uCurrentTime$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_bDrawCompAttr$ = 8					; size = 1
?DrawCompositionString@@YAX_N@Z PROC			; DrawCompositionString
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 754
	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 756
	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _uCurrentTime$[ebp], eax
; Line 757
	mov	eax, DWORD PTR _uCurrentTime$[ebp]
	sub	eax, DWORD PTR _g_uCaretBlinkLast
	cmp	eax, DWORD PTR _g_uCaretBlinkTime
	jbe	SHORT $LN39@DrawCompos
; Line 759
	mov	ecx, DWORD PTR _uCurrentTime$[ebp]
	mov	DWORD PTR _g_uCaretBlinkLast, ecx
; Line 760
	movzx	edx, BYTE PTR _g_bCaretDraw
	test	edx, edx
	jne	SHORT $LN42@DrawCompos
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN43@DrawCompos
$LN42@DrawCompos:
	mov	DWORD PTR tv69[ebp], 0
$LN43@DrawCompos:
	mov	al, BYTE PTR tv69[ebp]
	mov	BYTE PTR _g_bCaretDraw, al
$LN39@DrawCompos:
; Line 763
	mov	DWORD PTR _i$[ebp], 0
; Line 765
	mov	esi, esp
	mov	ecx, DWORD PTR _g_CaretInfo+12
	push	ecx
	mov	edx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 769
	mov	DWORD PTR tv329[ebp], OFFSET _g_szCompositionString
	mov	eax, DWORD PTR tv329[ebp]
	add	eax, 2
	mov	DWORD PTR tv332[ebp], eax
$LL52@DrawCompos:
	mov	ecx, DWORD PTR tv329[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR tv335[ebp], dx
	add	DWORD PTR tv329[ebp], 2
	cmp	WORD PTR tv335[ebp], 0
	jne	SHORT $LL52@DrawCompos
	mov	eax, DWORD PTR tv329[ebp]
	sub	eax, DWORD PTR tv332[ebp]
	sar	eax, 1
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _len$[ebp], ecx
; Line 771
	mov	edx, DWORD PTR _g_CaretInfo
	mov	DWORD PTR _bgX$[ebp], edx
; Line 772
	mov	eax, DWORD PTR _g_CaretInfo+4
	mov	DWORD PTR _bgY$[ebp], eax
; Line 773
	mov	DWORD PTR _g_dwCaretX, -1
; Line 774
	mov	DWORD PTR _g_dwCaretY, -1
; Line 775
	mov	DWORD PTR _candX$[ebp], -1
; Line 776
	mov	DWORD PTR _candY$[ebp], 0
; Line 777
	mov	DWORD PTR _pszMlcs$[ebp], OFFSET _g_szMultiLineCompString
; Line 779
	mov	DWORD PTR _wCompChar$[ebp], 0
; Line 780
	mov	DWORD PTR _hCompChar$[ebp], 0
; Line 781
	mov	esi, esp
	lea	ecx, DWORD PTR _hCompChar$[ebp]
	push	ecx
	lea	edx, DWORD PTR _uDummy$[ebp]
	push	edx
	push	OFFSET $SG153077
	mov	eax, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 782
	cmp	DWORD PTR _g_dwIMELevel, 3
	jne	$LN38@DrawCompos
	cmp	DWORD PTR _g_IMECursorBytes, 0
	je	$LN38@DrawCompos
	mov	ecx, 2
	imul	edx, ecx, 0
	movzx	eax, WORD PTR _g_szCompositionString[edx]
	test	eax, eax
	je	$LN38@DrawCompos
; Line 785
	mov	ecx, DWORD PTR _g_IMECursorBytes
	mov	dx, WORD PTR _g_szCompositionString[ecx*2]
	mov	WORD PTR _temp$10[ebp], dx
; Line 786
	mov	eax, DWORD PTR _g_IMECursorBytes
	shl	eax, 1
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 512			; 00000200H
	jae	SHORT $LN44@DrawCompos
	jmp	SHORT $LN45@DrawCompos
$LN44@DrawCompos:
	call	___report_rangecheckfailure
$LN45@DrawCompos:
	xor	ecx, ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	WORD PTR _g_szCompositionString[edx], cx
; Line 787
	mov	esi, esp
	lea	eax, DWORD PTR _hCompChar$[ebp]
	push	eax
	lea	ecx, DWORD PTR _wCompChar$[ebp]
	push	ecx
	push	OFFSET _g_szCompositionString
	mov	edx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 788
	mov	eax, DWORD PTR _g_IMECursorBytes
	mov	cx, WORD PTR _temp$10[ebp]
	mov	WORD PTR _g_szCompositionString[eax*2], cx
; Line 789
	mov	edx, DWORD PTR _bgX$[ebp]
	sub	edx, DWORD PTR _wCompChar$[ebp]
	mov	DWORD PTR _bgX$[ebp], edx
$LN38@DrawCompos:
; Line 795
	mov	BYTE PTR _saveCandPos$[ebp], 0
; Line 796
	mov	DWORD PTR _cType$[ebp], 1
; Line 797
	mov	DWORD PTR _pszCurrentCompLine$[ebp], OFFSET _g_szCompositionString
; Line 798
	mov	eax, DWORD PTR _bgX$[ebp]
	mov	DWORD PTR _dwCompLineStart$[ebp], eax
; Line 799
	mov	ecx, DWORD PTR _bgX$[ebp]
	mov	DWORD PTR _bgXnext$[ebp], ecx
; Line 801
	mov	edx, DWORD PTR _g_hklCurrent
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	and	eax, 1023				; 000003ffH
	movzx	ecx, ax
	cmp	ecx, 18					; 00000012H
	jne	SHORT $LN36@DrawCompos
	movzx	edx, BYTE PTR _g_bCaretDraw
	test	edx, edx
	je	$LN37@DrawCompos
$LN36@DrawCompos:
; Line 802
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN35@DrawCompos
$LN34@DrawCompos:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _cType$[ebp]
	mov	DWORD PTR _i$[ebp], eax
$LN35@DrawCompos:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	$LN37@DrawCompos
; Line 804
	mov	DWORD PTR _bgColor$9[ebp], 0
; Line 806
	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _i$[ebp]
	mov	dx, WORD PTR _g_szCompositionString[ecx*2]
	mov	WORD PTR _szChar$8[ebp+eax], dx
; Line 807
	mov	eax, 2
	shl	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 6
	jae	SHORT $LN46@DrawCompos
	jmp	SHORT $LN47@DrawCompos
$LN46@DrawCompos:
	call	___report_rangecheckfailure
$LN47@DrawCompos:
	xor	ecx, ecx
	mov	edx, DWORD PTR $T2[ebp]
	mov	WORD PTR _szChar$8[ebp+edx], cx
	mov	eax, 2
	shl	eax, 0
	xor	ecx, ecx
	mov	WORD PTR _szChar$8[ebp+eax], cx
; Line 808
	mov	edx, DWORD PTR _bgXnext$[ebp]
	mov	DWORD PTR _bgX$[ebp], edx
; Line 809
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _cType$[ebp]
	mov	cx, WORD PTR _g_szCompositionString[eax*2]
	mov	WORD PTR _cSave$7[ebp], cx
; Line 810
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _cType$[ebp]
	shl	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 512			; 00000200H
	jae	SHORT $LN48@DrawCompos
	jmp	SHORT $LN49@DrawCompos
$LN48@DrawCompos:
	call	___report_rangecheckfailure
$LN49@DrawCompos:
	xor	eax, eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	WORD PTR _g_szCompositionString[ecx], ax
; Line 811
	mov	esi, esp
	lea	edx, DWORD PTR _hCompChar$[ebp]
	push	edx
	lea	eax, DWORD PTR _bgXnext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszCurrentCompLine$[ebp]
	push	ecx
	mov	edx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 812
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _cType$[ebp]
	mov	cx, WORD PTR _cSave$7[ebp]
	mov	WORD PTR _g_szCompositionString[eax*2], cx
; Line 813
	mov	edx, DWORD PTR _bgXnext$[ebp]
	add	edx, DWORD PTR _dwCompLineStart$[ebp]
	mov	DWORD PTR _bgXnext$[ebp], edx
; Line 814
	mov	eax, DWORD PTR _bgXnext$[ebp]
	sub	eax, DWORD PTR _bgX$[ebp]
	mov	DWORD PTR _wCompChar$[ebp], eax
; Line 816
	mov	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR _g_szCompAttrString[ecx]
	mov	DWORD PTR tv177[ebp], edx
	cmp	DWORD PTR tv177[ebp], 4
	ja	SHORT $LN31@DrawCompos
	mov	eax, DWORD PTR tv177[ebp]
	jmp	DWORD PTR $LN61@DrawCompos[eax*4]
$LN30@DrawCompos:
; Line 819
	mov	ecx, DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A
	mov	DWORD PTR _bgColor$9[ebp], ecx
; Line 820
	jmp	SHORT $LN31@DrawCompos
$LN29@DrawCompos:
; Line 822
	mov	edx, DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+4
	mov	DWORD PTR _bgColor$9[ebp], edx
; Line 823
	push	0
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
	and	eax, 65535				; 0000ffffH
	cmp	eax, 2052				; 00000804H
	je	SHORT $LN28@DrawCompos
; Line 824
	mov	BYTE PTR _saveCandPos$[ebp], 1
$LN28@DrawCompos:
; Line 825
	jmp	SHORT $LN31@DrawCompos
$LN27@DrawCompos:
; Line 827
	mov	eax, DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+8
	mov	DWORD PTR _bgColor$9[ebp], eax
; Line 828
	jmp	SHORT $LN31@DrawCompos
$LN26@DrawCompos:
; Line 833
	mov	ecx, DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+12
	mov	DWORD PTR _bgColor$9[ebp], ecx
; Line 834
	jmp	SHORT $LN31@DrawCompos
$LN25@DrawCompos:
; Line 836
	mov	edx, DWORD PTR ?gSkinCompStr@@3U_SkinCompStr@@A+16
	mov	DWORD PTR _bgColor$9[ebp], edx
$LN31@DrawCompos:
; Line 843
	cmp	DWORD PTR _g_dwIMELevel, 3
	jne	$LN23@DrawCompos
	movzx	eax, BYTE PTR _bDrawCompAttr$[ebp]
	test	eax, eax
	je	$LN23@DrawCompos
; Line 845
	mov	ecx, DWORD PTR _bgX$[ebp]
	cmp	ecx, DWORD PTR _g_CaretInfo+20
	jl	SHORT $LN22@DrawCompos
	mov	edx, DWORD PTR _bgX$[ebp]
	cmp	edx, DWORD PTR _g_CaretInfo+28
	jg	SHORT $LN22@DrawCompos
; Line 847
	mov	eax, DWORD PTR _g_dwImeUiFlags
	and	eax, 1
	je	SHORT $LN21@DrawCompos
; Line 849
	cmp	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
	je	SHORT $LN20@DrawCompos
; Line 850
	mov	esi, esp
	mov	ecx, DWORD PTR _bgColor$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _bgY$[ebp]
	add	edx, DWORD PTR _hCompChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _bgX$[ebp]
	add	eax, DWORD PTR _wCompChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bgY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bgX$[ebp]
	push	edx
	call	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN20@DrawCompos:
; Line 852
	jmp	SHORT $LN22@DrawCompos
$LN21@DrawCompos:
; Line 854
	cmp	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
	je	SHORT $LN22@DrawCompos
; Line 855
	mov	esi, esp
	mov	eax, DWORD PTR _bgColor$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _bgY$[ebp]
	add	ecx, DWORD PTR _hCompChar$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bgX$[ebp]
	push	edx
	mov	eax, DWORD PTR _bgY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bgX$[ebp]
	sub	ecx, DWORD PTR _wCompChar$[ebp]
	push	ecx
	call	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@DrawCompos:
; Line 858
	jmp	$LN17@DrawCompos
$LN23@DrawCompos:
; Line 859
	cmp	DWORD PTR _g_dwIMELevel, 2
	jne	$LN17@DrawCompos
; Line 864
	mov	edx, DWORD PTR _pszMlcs$[ebp]
	sub	edx, OFFSET _g_szMultiLineCompString
	sar	edx, 1
	cmp	edx, 251				; 000000fbH
	jae	SHORT $LN50@DrawCompos
	mov	DWORD PTR tv242[ebp], 1
	jmp	SHORT $LN51@DrawCompos
$LN50@DrawCompos:
	mov	DWORD PTR tv242[ebp], 0
$LN51@DrawCompos:
	mov	al, BYTE PTR tv242[ebp]
	mov	BYTE PTR _bWrite$6[ebp], al
; Line 866
	mov	ecx, DWORD PTR _bgX$[ebp]
	add	ecx, DWORD PTR _wCompChar$[ebp]
	cmp	ecx, DWORD PTR _g_CaretInfo+28
	jl	SHORT $LN15@DrawCompos
; Line 868
	mov	edx, DWORD PTR _g_CaretInfo+20
	mov	DWORD PTR _bgXnext$[ebp], edx
	mov	eax, DWORD PTR _bgXnext$[ebp]
	mov	DWORD PTR _dwCompLineStart$[ebp], eax
	mov	ecx, DWORD PTR _dwCompLineStart$[ebp]
	mov	DWORD PTR _bgX$[ebp], ecx
; Line 869
	mov	edx, DWORD PTR _bgY$[ebp]
	add	edx, DWORD PTR _hCompChar$[ebp]
	mov	DWORD PTR _bgY$[ebp], edx
; Line 870
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR _g_szCompositionString[eax*2]
	mov	DWORD PTR _pszCurrentCompLine$[ebp], ecx
; Line 871
	movzx	edx, BYTE PTR _bWrite$6[ebp]
	test	edx, edx
	je	SHORT $LN15@DrawCompos
; Line 873
	cmp	DWORD PTR _pszMlcs$[ebp], OFFSET _g_szMultiLineCompString
	je	SHORT $LN12@DrawCompos
	mov	eax, 2
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _pszMlcs$[ebp]
	movzx	eax, WORD PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN13@DrawCompos
$LN12@DrawCompos:
; Line 874
	mov	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _pszMlcs$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _pszMlcs$[ebp]
	add	eax, 2
	mov	DWORD PTR _pszMlcs$[ebp], eax
$LN13@DrawCompos:
; Line 875
	xor	ecx, ecx
	mov	edx, DWORD PTR _pszMlcs$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _pszMlcs$[ebp]
	add	eax, 2
	mov	DWORD PTR _pszMlcs$[ebp], eax
$LN15@DrawCompos:
; Line 878
	cmp	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
	je	SHORT $LN11@DrawCompos
; Line 879
	mov	esi, esp
	mov	ecx, DWORD PTR _bgColor$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _bgY$[ebp]
	add	edx, DWORD PTR _hCompChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _bgX$[ebp]
	add	eax, DWORD PTR _wCompChar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bgY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bgX$[ebp]
	push	edx
	call	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@DrawCompos:
; Line 880
	movzx	eax, BYTE PTR _bWrite$6[ebp]
	test	eax, eax
	je	SHORT $LN10@DrawCompos
; Line 882
	mov	ecx, DWORD PTR _pszMlcs$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ax, WORD PTR _g_szCompositionString[edx*2]
	mov	WORD PTR [ecx], ax
	mov	ecx, DWORD PTR _pszMlcs$[ebp]
	add	ecx, 2
	mov	DWORD PTR _pszMlcs$[ebp], ecx
$LN10@DrawCompos:
; Line 884
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _g_IMECursorBytes
	jne	SHORT $LN17@DrawCompos
; Line 886
	mov	eax, DWORD PTR _bgX$[ebp]
	mov	DWORD PTR _g_dwCaretX, eax
; Line 887
	mov	ecx, DWORD PTR _bgY$[ebp]
	mov	DWORD PTR _g_dwCaretY, ecx
$LN17@DrawCompos:
; Line 891
	movzx	edx, BYTE PTR _saveCandPos$[ebp]
	test	edx, edx
	je	SHORT $LN6@DrawCompos
	cmp	DWORD PTR _candX$[ebp], -1
	je	SHORT $LN7@DrawCompos
$LN6@DrawCompos:
	push	0
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
	and	eax, 65535				; 0000ffffH
	cmp	eax, 2052				; 00000804H
	jne	SHORT $LN8@DrawCompos
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _g_IMECursorChars
	jne	SHORT $LN8@DrawCompos
$LN7@DrawCompos:
; Line 893
	mov	ecx, DWORD PTR _bgX$[ebp]
	mov	DWORD PTR _candX$[ebp], ecx
; Line 894
	mov	edx, DWORD PTR _bgY$[ebp]
	mov	DWORD PTR _candY$[ebp], edx
$LN8@DrawCompos:
; Line 896
	mov	BYTE PTR _saveCandPos$[ebp], 0
; Line 897
	jmp	$LN34@DrawCompos
$LN37@DrawCompos:
; Line 899
	mov	eax, DWORD PTR _bgXnext$[ebp]
	mov	DWORD PTR _bgX$[ebp], eax
; Line 900
	cmp	DWORD PTR _g_dwIMELevel, 2
	jne	$LN5@DrawCompos
; Line 903
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN4@DrawCompos
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _g_IMECursorBytes
	jne	SHORT $LN4@DrawCompos
; Line 905
	mov	edx, DWORD PTR _bgX$[ebp]
	mov	DWORD PTR _g_dwCaretX, edx
; Line 906
	mov	eax, DWORD PTR _bgY$[ebp]
	mov	DWORD PTR _g_dwCaretY, eax
$LN4@DrawCompos:
; Line 912
	xor	ecx, ecx
	mov	edx, DWORD PTR _pszMlcs$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _pszMlcs$[ebp]
	add	eax, 2
	mov	DWORD PTR _pszMlcs$[ebp], eax
; Line 913
	xor	ecx, ecx
	mov	edx, DWORD PTR _pszMlcs$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _pszMlcs$[ebp]
	add	eax, 2
	mov	DWORD PTR _pszMlcs$[ebp], eax
; Line 915
	mov	ecx, DWORD PTR _g_CaretInfo
	mov	DWORD PTR _x$5[ebp], ecx
; Line 916
	mov	edx, DWORD PTR _g_CaretInfo+4
	mov	DWORD PTR _y$4[ebp], edx
; Line 917
	mov	DWORD PTR _pszMlcs$[ebp], OFFSET _g_szMultiLineCompString
$LN3@DrawCompos:
; Line 920
	mov	eax, DWORD PTR _pszMlcs$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	$LN5@DrawCompos
	mov	edx, DWORD PTR _pszMlcs$[ebp]
	sub	edx, OFFSET _g_szMultiLineCompString
	sar	edx, 1
	cmp	edx, 256				; 00000100H
	jae	$LN5@DrawCompos
; Line 922
	mov	esi, esp
	mov	eax, DWORD PTR _y$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 923
	mov	esi, esp
	mov	eax, DWORD PTR _pszMlcs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 924
	mov	ecx, DWORD PTR _pszMlcs$[ebp]
	mov	DWORD PTR tv487[ebp], ecx
	mov	edx, DWORD PTR tv487[ebp]
	add	edx, 2
	mov	DWORD PTR tv490[ebp], edx
$LL53@DrawCompos:
	mov	eax, DWORD PTR tv487[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv493[ebp], cx
	add	DWORD PTR tv487[ebp], 2
	cmp	WORD PTR tv493[ebp], 0
	jne	SHORT $LL53@DrawCompos
	mov	edx, DWORD PTR tv487[ebp]
	sub	edx, DWORD PTR tv490[ebp]
	sar	edx, 1
	mov	DWORD PTR tv301[ebp], edx
	mov	eax, DWORD PTR tv301[ebp]
	mov	ecx, DWORD PTR _pszMlcs$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+2]
	mov	DWORD PTR _pszMlcs$[ebp], edx
; Line 925
	mov	eax, DWORD PTR _g_CaretInfo+20
	mov	DWORD PTR _x$5[ebp], eax
; Line 926
	mov	ecx, DWORD PTR _y$4[ebp]
	add	ecx, DWORD PTR _hCompChar$[ebp]
	mov	DWORD PTR _y$4[ebp], ecx
; Line 927
	jmp	$LN3@DrawCompos
$LN5@DrawCompos:
; Line 930
	cmp	DWORD PTR _g_dwCaretX, -1
	je	SHORT $LN1@DrawCompos
	cmp	DWORD PTR _g_dwCaretY, -1
	je	SHORT $LN1@DrawCompos
; Line 932
	mov	edx, DWORD PTR _hCompChar$[ebp]
	push	edx
	mov	eax, DWORD PTR _g_dwCaretY
	push	eax
	mov	ecx, DWORD PTR _g_dwCaretX
	push	ecx
	call	?DrawCaret@@YAXKKK@Z			; DrawCaret
	add	esp, 12					; 0000000cH
$LN1@DrawCompos:
; Line 934
	mov	edx, DWORD PTR _candX$[ebp]
	mov	DWORD PTR _g_dwCandX, edx
; Line 935
	mov	eax, DWORD PTR _candY$[ebp]
	mov	DWORD PTR _g_dwCandY, eax
; Line 936
	mov	ecx, DWORD PTR _hCompChar$[ebp]
	mov	DWORD PTR _g_hCompChar, ecx
$LN41@DrawCompos:
; Line 937
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN60@DrawCompos
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN60@DrawCompos:
	DD	5
	DD	$LN59@DrawCompos
$LN59@DrawCompos:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN54@DrawCompos
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN55@DrawCompos
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN56@DrawCompos
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN57@DrawCompos
	DD	-120					; ffffff88H
	DD	6
	DD	$LN58@DrawCompos
$LN58@DrawCompos:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	0
$LN57@DrawCompos:
	DB	98					; 00000062H
	DB	103					; 00000067H
	DB	88					; 00000058H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN56@DrawCompos:
	DB	104					; 00000068H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	0
$LN55@DrawCompos:
	DB	119					; 00000077H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	0
$LN54@DrawCompos:
	DB	117					; 00000075H
	DB	68					; 00000044H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
	npad	2
$LN61@DrawCompos:
	DD	$LN30@DrawCompos
	DD	$LN29@DrawCompos
	DD	$LN27@DrawCompos
	DD	$LN26@DrawCompos
	DD	$LN25@DrawCompos
?DrawCompositionString@@YAX_N@Z ENDP			; DrawCompositionString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -348						; size = 4
_dy$2 = -344						; size = 4
_dx$3 = -340						; size = 4
_szCandidateBody$4 = -336				; size = 4
_nOneDigit$5 = -332					; size = 4
_szOneDigit$6 = -324					; size = 4
_cSave$7 = -316						; size = 2
_psz$8 = -312						; size = 4
_szTemp$9 = -304					; size = 64
_iDummy$10 = -232					; size = 4
_iEnd$11 = -220						; size = 4
_iStart$12 = -208					; size = 4
_bottom$ = -200						; size = 4
_right$ = -196						; size = 4
_top$ = -192						; size = 4
_left$ = -188						; size = 4
_seperateLineX$ = -184					; size = 4
_dwCandHeight$ = -180					; size = 4
_slotsUsed$ = -176					; size = 4
_ty$13 = -168						; size = 4
_tx$14 = -156						; size = 4
_dwCandWidth$ = -148					; size = 4
_adwCandWidth$ = -140					; size = 40
_dwMarginX$ = -96					; size = 4
_ss$15 = -88						; size = 16
_uDH$16 = -64						; size = 4
_uDW$17 = -52						; size = 4
_cnt$18 = -44						; size = 4
_uSpaceWidth$ = -40					; size = 4
_largest$ = -32						; size = 8
_i$ = -20						; size = 4
_hCompChar$ = -16					; size = 4
_candY$ = -12						; size = 4
_candX$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?DrawCandidateList@@YAXXZ PROC				; DrawCandidateList
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 940
	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 941
	cmp	DWORD PTR _g_CaretInfo+8, 0
	jne	SHORT $LN83@DrawCandid
	mov	esi, esp
	push	941					; 000003adH
	push	OFFSET $SG153156
	push	OFFSET $SG153157
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN83@DrawCandid:
; Line 943
	mov	ecx, DWORD PTR _g_dwCandX
	mov	DWORD PTR _candX$[ebp], ecx
; Line 944
	mov	edx, DWORD PTR _g_dwCandY
	mov	DWORD PTR _candY$[ebp], edx
; Line 945
	mov	eax, DWORD PTR _g_hCompChar
	mov	DWORD PTR _hCompChar$[ebp], eax
; Line 949
	cmp	DWORD PTR _g_dwCount, 0
	je	SHORT $LN79@DrawCandid
	mov	ecx, 512				; 00000200H
	imul	edx, ecx, 0
	mov	eax, 2
	imul	ecx, eax, 0
	movzx	edx, WORD PTR _g_szCandidate[edx+ecx]
	test	edx, edx
	jne	SHORT $LN80@DrawCandid
$LN79@DrawCandid:
; Line 951
	jmp	$LN82@DrawCandid
$LN80@DrawCandid:
; Line 955
	cmp	DWORD PTR _candX$[ebp], -1
	jne	SHORT $LN78@DrawCandid
; Line 959
	mov	eax, DWORD PTR _g_hklCurrent
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 1028				; 00000404H
	jne	SHORT $LN77@DrawCandid
	push	0
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
	test	eax, eax
	je	SHORT $LN77@DrawCandid
	cmp	DWORD PTR _g_dwCaretX, -1
	je	SHORT $LN77@DrawCandid
; Line 961
	mov	edx, DWORD PTR _g_dwCaretX
	mov	DWORD PTR _candX$[ebp], edx
; Line 962
	mov	eax, DWORD PTR _g_dwCaretY
	mov	DWORD PTR _candY$[ebp], eax
; Line 964
	jmp	SHORT $LN78@DrawCandid
$LN77@DrawCandid:
; Line 966
	mov	ecx, DWORD PTR _g_CaretInfo
	mov	DWORD PTR _candX$[ebp], ecx
; Line 967
	mov	edx, DWORD PTR _g_CaretInfo+4
	mov	DWORD PTR _candY$[ebp], edx
$LN78@DrawCandid:
; Line 974
	mov	DWORD PTR _largest$[ebp], 0
	mov	DWORD PTR _largest$[ebp+4], 0
; Line 977
	mov	DWORD PTR _uSpaceWidth$[ebp], 0
; Line 981
	mov	eax, DWORD PTR ?pPrevFont@?N@??DrawCandidateList@@YAXXZ@4PAVCImeUiFont_Base@@A
	cmp	eax, DWORD PTR _g_CaretInfo+8
	je	$LN75@DrawCandid
; Line 983
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	DWORD PTR ?pPrevFont@?N@??DrawCandidateList@@YAXXZ@4PAVCImeUiFont_Base@@A, ecx
; Line 984
	mov	DWORD PTR _cnt$18[ebp], 0
	jmp	SHORT $LN74@DrawCandid
$LN73@DrawCandid:
	mov	edx, DWORD PTR _cnt$18[ebp]
	add	edx, 1
	mov	DWORD PTR _cnt$18[ebp], edx
$LN74@DrawCandid:
	cmp	DWORD PTR _cnt$18[ebp], 9
	jg	$LN75@DrawCandid
; Line 986
	mov	DWORD PTR _uDW$17[ebp], 0
; Line 987
	mov	DWORD PTR _uDH$16[ebp], 0
; Line 989
	mov	esi, esp
	mov	eax, DWORD PTR _cnt$18[ebp]
	push	eax
	push	OFFSET $SG153194
	push	8
	lea	ecx, DWORD PTR _ss$15[ebp]
	push	ecx
	call	DWORD PTR __imp__swprintf_s
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 990
	mov	esi, esp
	lea	edx, DWORD PTR _uDH$16[ebp]
	push	edx
	lea	eax, DWORD PTR _uDW$17[ebp]
	push	eax
	lea	ecx, DWORD PTR _ss$15[ebp]
	push	ecx
	mov	edx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 991
	mov	eax, DWORD PTR _cnt$18[ebp]
	mov	ecx, DWORD PTR _uDW$17[ebp]
	mov	DWORD PTR ?uDigitWidthList@?N@??DrawCandidateList@@YAXXZ@4PAKA[eax*4], ecx
; Line 992
	mov	edx, DWORD PTR _uDW$17[ebp]
	cmp	edx, DWORD PTR ?uDigitWidth@?N@??DrawCandidateList@@YAXXZ@4KA
	jbe	SHORT $LN71@DrawCandid
; Line 993
	mov	eax, DWORD PTR _uDW$17[ebp]
	mov	DWORD PTR ?uDigitWidth@?N@??DrawCandidateList@@YAXXZ@4KA, eax
$LN71@DrawCandid:
; Line 994
	mov	ecx, DWORD PTR _uDH$16[ebp]
	cmp	ecx, DWORD PTR _largest$[ebp+4]
	jle	SHORT $LN70@DrawCandid
; Line 995
	mov	edx, DWORD PTR _uDH$16[ebp]
	mov	DWORD PTR _largest$[ebp+4], edx
$LN70@DrawCandid:
; Line 996
	jmp	$LN73@DrawCandid
$LN75@DrawCandid:
; Line 998
	mov	eax, DWORD PTR ?uDigitWidth@?N@??DrawCandidateList@@YAXXZ@4KA
	mov	DWORD PTR _uSpaceWidth$[ebp], eax
; Line 999
	mov	ecx, DWORD PTR _uSpaceWidth$[ebp]
	add	ecx, 1
	shr	ecx, 1
	mov	DWORD PTR _dwMarginX$[ebp], ecx
; Line 1003
	mov	DWORD PTR _dwCandWidth$[ebp], 0
; Line 1004
	movzx	edx, BYTE PTR _g_bReadingWindow
	test	edx, edx
	je	SHORT $LN69@DrawCandid
	movzx	eax, BYTE PTR _g_bHorizontalReading
	test	eax, eax
	je	SHORT $LN69@DrawCandid
; Line 1005
	mov	esi, esp
	lea	ecx, DWORD PTR _largest$[ebp+4]
	push	ecx
	lea	edx, DWORD PTR _largest$[ebp]
	push	edx
	push	OFFSET _g_szReadingString
	mov	eax, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1006
	jmp	$LN68@DrawCandid
$LN69@DrawCandid:
; Line 1008
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN67@DrawCandid
$LN66@DrawCandid:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN67@DrawCandid:
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 9
	mov	eax, 2
	imul	ecx, eax, 0
	movzx	edx, WORD PTR _g_szCandidate[edx+ecx]
	test	edx, edx
	je	$LN68@DrawCandid
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _g_uCandPageSize
	jge	$LN68@DrawCandid
; Line 1010
	mov	DWORD PTR _tx$14[ebp], 0
; Line 1011
	mov	DWORD PTR _ty$13[ebp], 0
; Line 1013
	movzx	ecx, BYTE PTR _g_bReadingWindow
	test	ecx, ecx
	je	SHORT $LN64@DrawCandid
; Line 1014
	mov	esi, esp
	lea	edx, DWORD PTR _ty$13[ebp]
	push	edx
	lea	eax, DWORD PTR _tx$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 9
	add	ecx, OFFSET _g_szCandidate
	push	ecx
	mov	edx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1015
	jmp	$LN63@DrawCandid
$LN64@DrawCandid:
; Line 1017
	movzx	eax, BYTE PTR _g_bVerticalCand
	test	eax, eax
	je	SHORT $LN62@DrawCandid
; Line 1018
	mov	esi, esp
	lea	ecx, DWORD PTR _ty$13[ebp]
	push	ecx
	lea	edx, DWORD PTR _tx$14[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 9
	add	eax, OFFSET _g_szCandidate+4
	push	eax
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1019
	jmp	SHORT $LN61@DrawCandid
$LN62@DrawCandid:
; Line 1020
	mov	esi, esp
	lea	ecx, DWORD PTR _ty$13[ebp]
	push	ecx
	lea	edx, DWORD PTR _tx$14[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 9
	add	eax, OFFSET _g_szCandidate+2
	push	eax
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN61@DrawCandid:
; Line 1021
	mov	ecx, DWORD PTR _tx$14[ebp]
	add	ecx, DWORD PTR ?uDigitWidth@?N@??DrawCandidateList@@YAXXZ@4KA
	add	ecx, DWORD PTR _uSpaceWidth$[ebp]
	mov	DWORD PTR _tx$14[ebp], ecx
$LN63@DrawCandid:
; Line 1024
	mov	edx, DWORD PTR _tx$14[ebp]
	cmp	edx, DWORD PTR _largest$[ebp]
	jle	SHORT $LN60@DrawCandid
; Line 1025
	mov	eax, DWORD PTR _tx$14[ebp]
	mov	DWORD PTR _largest$[ebp], eax
$LN60@DrawCandid:
; Line 1026
	mov	ecx, DWORD PTR _ty$13[ebp]
	cmp	ecx, DWORD PTR _largest$[ebp+4]
	jle	SHORT $LN59@DrawCandid
; Line 1027
	mov	edx, DWORD PTR _ty$13[ebp]
	mov	DWORD PTR _largest$[ebp+4], edx
$LN59@DrawCandid:
; Line 1028
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tx$14[ebp]
	mov	DWORD PTR _adwCandWidth$[ebp+eax*4], ecx
; Line 1029
	mov	edx, DWORD PTR _dwCandWidth$[ebp]
	add	edx, DWORD PTR _tx$14[ebp]
	mov	DWORD PTR _dwCandWidth$[ebp], edx
; Line 1030
	jmp	$LN66@DrawCandid
$LN68@DrawCandid:
; Line 1034
	movzx	eax, BYTE PTR _g_bReadingWindow
	test	eax, eax
	je	SHORT $LN58@DrawCandid
	mov	ecx, DWORD PTR _g_dwCount
	cmp	ecx, DWORD PTR _g_uCandPageSize
	jae	SHORT $LN58@DrawCandid
; Line 1035
	mov	edx, DWORD PTR _g_dwCount
	mov	DWORD PTR _slotsUsed$[ebp], edx
; Line 1036
	jmp	SHORT $LN57@DrawCandid
$LN58@DrawCandid:
; Line 1037
	mov	eax, DWORD PTR _g_uCandPageSize
	mov	DWORD PTR _slotsUsed$[ebp], eax
$LN57@DrawCandid:
; Line 1041
	movzx	ecx, BYTE PTR _g_bVerticalCand
	test	ecx, ecx
	je	SHORT $LN56@DrawCandid
	movzx	edx, BYTE PTR _g_bReadingWindow
	test	edx, edx
	je	SHORT $LN55@DrawCandid
	movzx	eax, BYTE PTR _g_bHorizontalReading
	test	eax, eax
	jne	SHORT $LN56@DrawCandid
$LN55@DrawCandid:
; Line 1042
	mov	ecx, DWORD PTR _slotsUsed$[ebp]
	imul	ecx, DWORD PTR _largest$[ebp+4]
	add	ecx, 2
	mov	DWORD PTR _dwCandHeight$[ebp], ecx
; Line 1043
	jmp	SHORT $LN54@DrawCandid
$LN56@DrawCandid:
; Line 1044
	mov	edx, DWORD PTR _largest$[ebp+4]
	add	edx, 2
	mov	DWORD PTR _dwCandHeight$[ebp], edx
$LN54@DrawCandid:
; Line 1045
	mov	eax, DWORD PTR _candY$[ebp]
	add	eax, DWORD PTR _hCompChar$[ebp]
	add	eax, DWORD PTR _dwCandHeight$[ebp]
	cmp	eax, DWORD PTR _g_screenHeight
	jbe	SHORT $LN53@DrawCandid
; Line 1046
	mov	ecx, DWORD PTR _candY$[ebp]
	sub	ecx, DWORD PTR _dwCandHeight$[ebp]
	mov	DWORD PTR _candY$[ebp], ecx
; Line 1047
	jmp	SHORT $LN52@DrawCandid
$LN53@DrawCandid:
; Line 1048
	mov	edx, DWORD PTR _candY$[ebp]
	add	edx, DWORD PTR _hCompChar$[ebp]
	mov	DWORD PTR _candY$[ebp], edx
$LN52@DrawCandid:
; Line 1049
	cmp	DWORD PTR _candY$[ebp], 0
	jge	SHORT $LN51@DrawCandid
; Line 1050
	mov	DWORD PTR _candY$[ebp], 0
$LN51@DrawCandid:
; Line 1053
	movzx	eax, BYTE PTR _g_bReadingWindow
	test	eax, eax
	jne	SHORT $LN50@DrawCandid
	push	0
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
	and	eax, 65535				; 0000ffffH
	cmp	eax, 2052				; 00000804H
	jne	SHORT $LN50@DrawCandid
; Line 1054
	mov	ecx, DWORD PTR _slotsUsed$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _dwMarginX$[ebp]
	add	ecx, DWORD PTR _dwCandWidth$[ebp]
	mov	DWORD PTR _dwCandWidth$[ebp], ecx
	jmp	SHORT $LN49@DrawCandid
$LN50@DrawCandid:
; Line 1055
	movzx	edx, BYTE PTR _g_bReadingWindow
	test	edx, edx
	je	SHORT $LN48@DrawCandid
	movzx	eax, BYTE PTR _g_bHorizontalReading
	test	eax, eax
	je	SHORT $LN48@DrawCandid
; Line 1056
	mov	ecx, DWORD PTR _dwMarginX$[ebp]
	mov	edx, DWORD PTR _largest$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+2]
	mov	DWORD PTR _dwCandWidth$[ebp], eax
	jmp	SHORT $LN49@DrawCandid
$LN48@DrawCandid:
; Line 1057
	movzx	ecx, BYTE PTR _g_bVerticalCand
	test	ecx, ecx
	jne	SHORT $LN45@DrawCandid
	movzx	edx, BYTE PTR _g_bReadingWindow
	test	edx, edx
	je	SHORT $LN46@DrawCandid
$LN45@DrawCandid:
; Line 1058
	mov	eax, DWORD PTR _dwMarginX$[ebp]
	mov	ecx, DWORD PTR _largest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+2]
	mov	DWORD PTR _dwCandWidth$[ebp], edx
; Line 1059
	jmp	SHORT $LN49@DrawCandid
$LN46@DrawCandid:
; Line 1060
	mov	eax, DWORD PTR _largest$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _slotsUsed$[ebp]
	add	eax, 1
	mov	DWORD PTR _dwCandWidth$[ebp], eax
$LN49@DrawCandid:
; Line 1061
	mov	ecx, DWORD PTR _candX$[ebp]
	add	ecx, DWORD PTR _dwCandWidth$[ebp]
	cmp	ecx, DWORD PTR _g_screenWidth
	jbe	SHORT $LN43@DrawCandid
; Line 1062
	mov	edx, DWORD PTR _g_screenWidth
	sub	edx, DWORD PTR _dwCandWidth$[ebp]
	mov	DWORD PTR _candX$[ebp], edx
$LN43@DrawCandid:
; Line 1063
	cmp	DWORD PTR _candX$[ebp], 0
	jge	SHORT $LN42@DrawCandid
; Line 1064
	mov	DWORD PTR _candX$[ebp], 0
$LN42@DrawCandid:
; Line 1067
	mov	DWORD PTR _seperateLineX$[ebp], 0
; Line 1068
	mov	eax, DWORD PTR _candX$[ebp]
	mov	DWORD PTR _left$[ebp], eax
; Line 1069
	mov	ecx, DWORD PTR _candY$[ebp]
	mov	DWORD PTR _top$[ebp], ecx
; Line 1070
	mov	edx, DWORD PTR _candX$[ebp]
	add	edx, DWORD PTR _dwCandWidth$[ebp]
	mov	DWORD PTR _right$[ebp], edx
; Line 1071
	mov	eax, DWORD PTR _candY$[ebp]
	add	eax, DWORD PTR _dwCandHeight$[ebp]
	mov	DWORD PTR _bottom$[ebp], eax
; Line 1072
	cmp	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
	je	SHORT $LN41@DrawCandid
; Line 1073
	mov	esi, esp
	mov	ecx, DWORD PTR _gSkinIME+24
	push	ecx
	mov	edx, DWORD PTR _bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _top$[ebp]
	push	ecx
	mov	edx, DWORD PTR _left$[ebp]
	push	edx
	call	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN41@DrawCandid:
; Line 1074
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, 1
	mov	DWORD PTR _left$[ebp], eax
; Line 1075
	mov	ecx, DWORD PTR _top$[ebp]
	add	ecx, 1
	mov	DWORD PTR _top$[ebp], ecx
; Line 1076
	mov	edx, DWORD PTR _right$[ebp]
	sub	edx, 1
	mov	DWORD PTR _right$[ebp], edx
; Line 1077
	mov	eax, DWORD PTR _bottom$[ebp]
	sub	eax, 1
	mov	DWORD PTR _bottom$[ebp], eax
; Line 1078
	movzx	ecx, BYTE PTR _g_bReadingWindow
	test	ecx, ecx
	jne	SHORT $LN39@DrawCandid
	push	0
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
	and	eax, 65535				; 0000ffffH
	cmp	eax, 2052				; 00000804H
	jne	SHORT $LN40@DrawCandid
$LN39@DrawCandid:
; Line 1080
	cmp	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
	je	SHORT $LN38@DrawCandid
; Line 1081
	mov	esi, esp
	mov	edx, DWORD PTR _gSkinIME+20
	push	edx
	mov	eax, DWORD PTR _bottom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _right$[ebp]
	push	ecx
	mov	edx, DWORD PTR _top$[ebp]
	push	edx
	mov	eax, DWORD PTR _left$[ebp]
	push	eax
	call	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN38@DrawCandid:
; Line 1082
	jmp	$LN37@DrawCandid
$LN40@DrawCandid:
; Line 1083
	movzx	ecx, BYTE PTR _g_bVerticalCand
	test	ecx, ecx
	je	$LN36@DrawCandid
; Line 1086
	movzx	edx, BYTE PTR _g_bReadingWindow
	test	edx, edx
	jne	$LN35@DrawCandid
; Line 1088
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, DWORD PTR _dwMarginX$[ebp]
	add	eax, DWORD PTR ?uDigitWidth@?N@??DrawCandidateList@@YAXXZ@4KA
	mov	ecx, DWORD PTR _uSpaceWidth$[ebp]
	shr	ecx, 1
	add	eax, ecx
	mov	DWORD PTR _seperateLineX$[ebp], eax
; Line 1089
	cmp	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
	je	SHORT $LN35@DrawCandid
; Line 1091
	mov	esi, esp
	mov	edx, DWORD PTR _gSkinIME+20
	push	edx
	mov	eax, DWORD PTR _bottom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seperateLineX$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _top$[ebp]
	push	edx
	mov	eax, DWORD PTR _left$[ebp]
	push	eax
	call	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1092
	mov	esi, esp
	mov	ecx, DWORD PTR _gSkinIME+20
	push	ecx
	mov	edx, DWORD PTR _bottom$[ebp]
	push	edx
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _top$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seperateLineX$[ebp]
	push	edx
	call	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN35@DrawCandid:
; Line 1096
	jmp	SHORT $LN37@DrawCandid
$LN36@DrawCandid:
; Line 1098
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN32@DrawCandid
$LN31@DrawCandid:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN32@DrawCandid:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _slotsUsed$[ebp]
	jae	SHORT $LN37@DrawCandid
; Line 1100
	cmp	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
	je	SHORT $LN29@DrawCandid
; Line 1101
	mov	esi, esp
	mov	edx, DWORD PTR _gSkinIME+20
	push	edx
	mov	eax, DWORD PTR _bottom$[ebp]
	push	eax
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, DWORD PTR _largest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _top$[ebp]
	push	edx
	mov	eax, DWORD PTR _left$[ebp]
	push	eax
	call	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN29@DrawCandid:
; Line 1102
	mov	ecx, DWORD PTR _largest$[ebp]
	mov	edx, DWORD PTR _left$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	mov	DWORD PTR _left$[ebp], eax
; Line 1103
	jmp	SHORT $LN31@DrawCandid
$LN37@DrawCandid:
; Line 1107
	mov	ecx, DWORD PTR _candX$[ebp]
	add	ecx, 1
	mov	DWORD PTR _candX$[ebp], ecx
; Line 1108
	mov	edx, DWORD PTR _candY$[ebp]
	add	edx, 1
	mov	DWORD PTR _candY$[ebp], edx
; Line 1109
	movzx	eax, BYTE PTR _g_bReadingWindow
	test	eax, eax
	je	$LN28@DrawCandid
	movzx	ecx, BYTE PTR _g_bHorizontalReading
	test	ecx, ecx
	je	$LN28@DrawCandid
; Line 1111
	mov	DWORD PTR _iStart$12[ebp], -1
	mov	DWORD PTR _iEnd$11[ebp], -1
; Line 1112
	mov	edx, DWORD PTR _candX$[ebp]
	add	edx, DWORD PTR _dwMarginX$[ebp]
	mov	DWORD PTR _candX$[ebp], edx
; Line 1116
	cmp	DWORD PTR _g_iReadingError, 0
	jl	$LN27@DrawCandid
; Line 1118
	mov	esi, esp
	push	OFFSET _g_szReadingString
	push	32					; 00000020H
	lea	eax, DWORD PTR _szTemp$9[ebp]
	push	eax
	call	DWORD PTR __imp__wcscpy_s
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1119
	mov	ecx, DWORD PTR _g_iReadingError
	lea	edx, DWORD PTR _szTemp$9[ebp+ecx*2]
	mov	DWORD PTR _psz$8[ebp], edx
; Line 1120
	mov	eax, DWORD PTR _psz$8[ebp]
	add	eax, 2
	mov	DWORD PTR _psz$8[ebp], eax
; Line 1121
	xor	ecx, ecx
	mov	edx, DWORD PTR _psz$8[ebp]
	mov	WORD PTR [edx], cx
; Line 1122
	mov	esi, esp
	lea	eax, DWORD PTR _iDummy$10[ebp]
	push	eax
	lea	ecx, DWORD PTR _iEnd$11[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTemp$9[ebp]
	push	edx
	mov	eax, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1123
	mov	ecx, DWORD PTR _g_iReadingError
	mov	dx, WORD PTR _szTemp$9[ebp+ecx*2]
	mov	WORD PTR _cSave$7[ebp], dx
; Line 1124
	mov	eax, DWORD PTR _g_iReadingError
	shl	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 64			; 00000040H
	jae	SHORT $LN84@DrawCandid
	jmp	SHORT $LN85@DrawCandid
$LN84@DrawCandid:
	call	___report_rangecheckfailure
$LN85@DrawCandid:
	xor	ecx, ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	WORD PTR _szTemp$9[ebp+edx], cx
; Line 1125
	mov	esi, esp
	lea	eax, DWORD PTR _iDummy$10[ebp]
	push	eax
	lea	ecx, DWORD PTR _iStart$12[ebp]
	push	ecx
	lea	edx, DWORD PTR _szTemp$9[ebp]
	push	edx
	mov	eax, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1126
	mov	ecx, DWORD PTR _g_iReadingError
	mov	dx, WORD PTR _cSave$7[ebp]
	mov	WORD PTR _szTemp$9[ebp+ecx*2], dx
; Line 1127
	cmp	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
	je	SHORT $LN27@DrawCandid
; Line 1129
	mov	esi, esp
	mov	eax, DWORD PTR _gSkinIME+24
	push	eax
	mov	ecx, DWORD PTR _candY$[ebp]
	add	ecx, DWORD PTR _largest$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _candX$[ebp]
	add	edx, DWORD PTR _iEnd$11[ebp]
	push	edx
	mov	eax, DWORD PTR _candY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _candX$[ebp]
	add	ecx, DWORD PTR _iStart$12[ebp]
	push	ecx
	call	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN27@DrawCandid:
; Line 1132
	mov	esi, esp
	mov	edx, DWORD PTR _candY$[ebp]
	push	edx
	mov	eax, DWORD PTR _candX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1133
	mov	esi, esp
	mov	ecx, DWORD PTR _g_CaretInfo+16
	push	ecx
	mov	edx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1134
	mov	esi, esp
	push	OFFSET _g_szReadingString
	mov	eax, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1137
	cmp	DWORD PTR _iStart$12[ebp], 0
	jl	$LN25@DrawCandid
; Line 1139
	mov	esi, esp
	mov	ecx, DWORD PTR _candY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _candX$[ebp]
	add	edx, DWORD PTR _iStart$12[ebp]
	push	edx
	mov	eax, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1140
	cmp	DWORD PTR _gSkinIME+20, -1
	jne	SHORT $LN23@DrawCandid
	cmp	DWORD PTR _gSkinIME+24, -16777216	; ff000000H
	je	SHORT $LN24@DrawCandid
$LN23@DrawCandid:
; Line 1141
	mov	esi, esp
	mov	ecx, DWORD PTR _g_CaretInfo+16
	push	ecx
	mov	edx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1142
	jmp	SHORT $LN22@DrawCandid
$LN24@DrawCandid:
; Line 1143
	mov	eax, DWORD PTR _g_CaretInfo+16
	and	eax, 16777215				; 00ffffffH
	not	eax
	sub	eax, 16777216				; 01000000H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@DrawCandid:
; Line 1144
	mov	ecx, DWORD PTR _g_iReadingError
	lea	edx, DWORD PTR _szTemp$9[ebp+ecx*2]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@DrawCandid:
; Line 1147
	jmp	$LN82@DrawCandid
$LN28@DrawCandid:
; Line 1149
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@DrawCandid
$LN19@DrawCandid:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN20@DrawCandid:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _g_uCandPageSize
	jge	$LN82@DrawCandid
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _g_dwCount
	jae	$LN82@DrawCandid
; Line 1151
	mov	ecx, DWORD PTR _g_dwSelection
	cmp	ecx, DWORD PTR _i$[ebp]
	jne	$LN17@DrawCandid
; Line 1153
	cmp	DWORD PTR _gSkinIME+20, -1
	jne	SHORT $LN15@DrawCandid
	cmp	DWORD PTR _gSkinIME+24, -16777216	; ff000000H
	je	SHORT $LN16@DrawCandid
$LN15@DrawCandid:
; Line 1154
	mov	esi, esp
	mov	edx, DWORD PTR _g_CaretInfo+16
	push	edx
	mov	eax, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1155
	jmp	SHORT $LN14@DrawCandid
$LN16@DrawCandid:
; Line 1156
	mov	ecx, DWORD PTR _g_CaretInfo+16
	and	ecx, 16777215				; 00ffffffH
	not	ecx
	sub	ecx, 16777216				; 01000000H
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@DrawCandid:
; Line 1158
	cmp	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA, 0 ; ImeUiCallback_DrawRect
	je	$LN13@DrawCandid
; Line 1160
	movzx	eax, BYTE PTR _g_bReadingWindow
	test	eax, eax
	jne	SHORT $LN11@DrawCandid
	movzx	ecx, BYTE PTR _g_bVerticalCand
	test	ecx, ecx
	je	SHORT $LN12@DrawCandid
$LN11@DrawCandid:
; Line 1163
	mov	esi, esp
	mov	edx, DWORD PTR _gSkinIME+24
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _largest$[ebp+4]
	add	eax, DWORD PTR _candY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwCandWidth$[ebp]
	mov	edx, DWORD PTR _candX$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, DWORD PTR _largest$[ebp+4]
	add	ecx, DWORD PTR _candY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _candX$[ebp]
	push	edx
	call	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1164
	jmp	SHORT $LN13@DrawCandid
$LN12@DrawCandid:
; Line 1167
	mov	esi, esp
	mov	eax, DWORD PTR _gSkinIME+24
	push	eax
	mov	ecx, DWORD PTR _candY$[ebp]
	add	ecx, DWORD PTR _largest$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _candX$[ebp]
	add	eax, DWORD PTR _adwCandWidth$[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _candY$[ebp]
	push	ecx
	mov	edx, DWORD PTR _candX$[ebp]
	push	edx
	call	DWORD PTR ?ImeUiCallback_DrawRect@@3P6GXHHHHK@ZA ; ImeUiCallback_DrawRect
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@DrawCandid:
; Line 1170
	jmp	SHORT $LN9@DrawCandid
$LN17@DrawCandid:
; Line 1171
	mov	esi, esp
	mov	eax, DWORD PTR _g_CaretInfo+16
	push	eax
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@DrawCandid:
; Line 1172
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 9
	mov	edx, 2
	imul	eax, edx, 0
	movzx	ecx, WORD PTR _g_szCandidate[ecx+eax]
	test	ecx, ecx
	je	$LN8@DrawCandid
; Line 1174
	movzx	edx, BYTE PTR _g_bReadingWindow
	test	edx, edx
	jne	$LN7@DrawCandid
	movzx	eax, BYTE PTR _g_bVerticalCand
	test	eax, eax
	je	$LN7@DrawCandid
; Line 1179
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 9
	mov	edx, 2
	imul	eax, edx, 0
	mov	cx, WORD PTR _g_szCandidate[ecx+eax]
	mov	WORD PTR _szOneDigit$6[ebp], cx
	xor	edx, edx
	mov	WORD PTR _szOneDigit$6[ebp+2], dx
; Line 1180
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 9
	mov	ecx, 2
	imul	edx, ecx, 0
	movzx	eax, WORD PTR _g_szCandidate[eax+edx]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR _nOneDigit$5[ebp], eax
; Line 1181
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 9
	add	ecx, OFFSET _g_szCandidate+4
	mov	DWORD PTR _szCandidateBody$4[ebp], ecx
; Line 1183
	mov	edx, DWORD PTR _seperateLineX$[ebp]
	sub	edx, DWORD PTR _candX$[ebp]
	mov	eax, DWORD PTR _nOneDigit$5[ebp]
	sub	edx, DWORD PTR ?uDigitWidthList@?N@??DrawCandidateList@@YAXXZ@4PAKA[eax*4]
	shr	edx, 1
	add	edx, DWORD PTR _candX$[ebp]
	mov	DWORD PTR _dx$3[ebp], edx
; Line 1184
	mov	ecx, DWORD PTR _largest$[ebp+4]
	imul	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _candY$[ebp]
	mov	DWORD PTR _dy$2[ebp], ecx
; Line 1186
	mov	esi, esp
	mov	edx, DWORD PTR _dy$2[ebp]
	push	edx
	mov	eax, DWORD PTR _dx$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1187
	mov	esi, esp
	lea	ecx, DWORD PTR _szOneDigit$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1188
	mov	esi, esp
	mov	eax, DWORD PTR _dy$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _seperateLineX$[ebp]
	add	ecx, DWORD PTR _dwMarginX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1189
	mov	esi, esp
	mov	eax, DWORD PTR _szCandidateBody$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN8@DrawCandid
$LN7@DrawCandid:
; Line 1191
	movzx	ecx, BYTE PTR _g_bReadingWindow
	test	ecx, ecx
	je	SHORT $LN5@DrawCandid
; Line 1193
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, DWORD PTR _largest$[ebp+4]
	add	edx, DWORD PTR _candY$[ebp]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _dwMarginX$[ebp]
	add	eax, DWORD PTR _candX$[ebp]
	push	eax
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1194
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 9
	add	ecx, OFFSET _g_szCandidate
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1196
	jmp	SHORT $LN8@DrawCandid
$LN5@DrawCandid:
; Line 1198
	mov	esi, esp
	mov	eax, DWORD PTR _candY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uSpaceWidth$[ebp]
	shr	ecx, 1
	add	ecx, DWORD PTR _candX$[ebp]
	push	ecx
	mov	edx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1199
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 9
	add	eax, OFFSET _g_szCandidate
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _g_CaretInfo+8
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DrawCandid:
; Line 1202
	movzx	ecx, BYTE PTR _g_bReadingWindow
	test	ecx, ecx
	jne	SHORT $LN3@DrawCandid
	movzx	edx, BYTE PTR _g_bVerticalCand
	test	edx, edx
	jne	SHORT $LN3@DrawCandid
; Line 1204
	push	0
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
	and	eax, 65535				; 0000ffffH
	cmp	eax, 2052				; 00000804H
	jne	SHORT $LN2@DrawCandid
; Line 1205
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _adwCandWidth$[ebp+eax*4]
	add	ecx, DWORD PTR _dwMarginX$[ebp]
	add	ecx, DWORD PTR _candX$[ebp]
	mov	DWORD PTR _candX$[ebp], ecx
; Line 1206
	jmp	SHORT $LN3@DrawCandid
$LN2@DrawCandid:
; Line 1207
	mov	edx, DWORD PTR _largest$[ebp]
	mov	eax, DWORD PTR _candX$[ebp]
	lea	ecx, DWORD PTR [eax+edx+1]
	mov	DWORD PTR _candX$[ebp], ecx
$LN3@DrawCandid:
; Line 1209
	jmp	$LN19@DrawCandid
$LN82@DrawCandid:
; Line 1211
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN99@DrawCandid
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN99@DrawCandid:
	DD	12					; 0000000cH
	DD	$LN98@DrawCandid
$LN98@DrawCandid:
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN86@DrawCandid
	DD	-52					; ffffffccH
	DD	4
	DD	$LN87@DrawCandid
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN88@DrawCandid
	DD	-88					; ffffffa8H
	DD	16					; 00000010H
	DD	$LN89@DrawCandid
	DD	-140					; ffffff74H
	DD	40					; 00000028H
	DD	$LN90@DrawCandid
	DD	-156					; ffffff64H
	DD	4
	DD	$LN91@DrawCandid
	DD	-168					; ffffff58H
	DD	4
	DD	$LN92@DrawCandid
	DD	-208					; ffffff30H
	DD	4
	DD	$LN93@DrawCandid
	DD	-220					; ffffff24H
	DD	4
	DD	$LN94@DrawCandid
	DD	-232					; ffffff18H
	DD	4
	DD	$LN95@DrawCandid
	DD	-304					; fffffed0H
	DD	64					; 00000040H
	DD	$LN96@DrawCandid
	DD	-324					; fffffebcH
	DD	4
	DD	$LN97@DrawCandid
$LN97@DrawCandid:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	79					; 0000004fH
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
$LN96@DrawCandid:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN95@DrawCandid:
	DB	105					; 00000069H
	DB	68					; 00000044H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
$LN94@DrawCandid:
	DB	105					; 00000069H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN93@DrawCandid:
	DB	105					; 00000069H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN92@DrawCandid:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
$LN91@DrawCandid:
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	0
$LN90@DrawCandid:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN89@DrawCandid:
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN88@DrawCandid:
	DB	117					; 00000075H
	DB	68					; 00000044H
	DB	72					; 00000048H
	DB	0
$LN87@DrawCandid:
	DB	117					; 00000075H
	DB	68					; 00000044H
	DB	87					; 00000057H
	DB	0
$LN86@DrawCandid:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
?DrawCandidateList@@YAXXZ ENDP				; DrawCandidateList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv407 = -724						; size = 4
tv359 = -720						; size = 4
tv610 = -716						; size = 4
tv685 = -712						; size = 4
tv600 = -708						; size = 4
tv683 = -704						; size = 4
tv588 = -700						; size = 8
tv585 = -692						; size = 4
tv579 = -688						; size = 4
tv571 = -684						; size = 4
tv558 = -680						; size = 8
tv554 = -672						; size = 4
tv543 = -668						; size = 8
tv539 = -660						; size = 4
tv531 = -656						; size = 8
tv527 = -648						; size = 4
tv516 = -644						; size = 8
tv512 = -636						; size = 4
tv483 = -632						; size = 8
tv447 = -624						; size = 4
tv73 = -620						; size = 4
tv65 = -616						; size = 4
_cszSymbol$1 = -612					; size = 4
_h$2 = -604						; size = 4
_w$3 = -592						; size = 4
_fHeight$ = -584					; size = 4
_t1$4 = -580						; size = 4
_dwColor$5 = -576					; size = 4
_radian$6 = -572					; size = 4
_t1$7 = -568						; size = 4
_SizeOfPie$ = -564					; size = 4
_PieData$ = -556					; size = 544
_bOn$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
?DrawImeIndicator@@YAXXZ PROC				; DrawImeIndicator
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 597
	push	ebp
	mov	ebp, esp
	sub	esp, 724				; 000002d4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-724]
	mov	ecx, 181				; 000000b5H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 598
	cmp	DWORD PTR _g_dwState, 0
	je	SHORT $LN27@DrawImeInd
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN28@DrawImeInd
$LN27@DrawImeInd:
	mov	DWORD PTR tv65[ebp], 0
$LN28@DrawImeInd:
	mov	al, BYTE PTR tv65[ebp]
	mov	BYTE PTR _bOn$[ebp], al
; Line 601
	movzx	ecx, BYTE PTR _gSkinIME+12
	cvtsi2ss xmm0, ecx
	movss	DWORD PTR _SizeOfPie$[ebp], xmm0
; Line 603
	push	544					; 00000220H
	push	0
	lea	edx, DWORD PTR _PieData$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 605
	movzx	eax, BYTE PTR _gSkinIME+14
	mov	DWORD PTR tv73[ebp], eax
	cmp	DWORD PTR tv73[ebp], 4
	ja	$LN23@DrawImeInd
	mov	ecx, DWORD PTR tv73[ebp]
	jmp	DWORD PTR $LN38@DrawImeInd[ecx*4]
$LN22@DrawImeInd:
; Line 609
	cvtsi2ss xmm0, DWORD PTR _g_CaretInfo+28
	addss	xmm0, DWORD PTR _SizeOfPie$[ebp]
	addss	xmm0, DWORD PTR __real@40800000
	mov	edx, DWORD PTR _g_screenWidth
	mov	DWORD PTR tv447[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv447[ebp]
	mov	eax, DWORD PTR tv447[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv483[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv483[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN21@DrawImeInd
; Line 611
	movss	xmm0, DWORD PTR _SizeOfPie$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@40000000
	cvtsi2ss xmm1, DWORD PTR _g_CaretInfo+20
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@40800000
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	movss	DWORD PTR _PieData$[ebp+edx], xmm0
; Line 613
	cvtsi2ss xmm0, DWORD PTR _g_CaretInfo+24
	mov	eax, DWORD PTR _g_CaretInfo+32
	sub	eax, DWORD PTR _g_CaretInfo+24
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm1, eax
	addss	xmm0, xmm1
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	movss	DWORD PTR _PieData$[ebp+ecx+4], xmm0
; Line 615
	jmp	SHORT $LN20@DrawImeInd
$LN21@DrawImeInd:
; Line 617
	movss	xmm0, DWORD PTR _SizeOfPie$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtsi2ss xmm1, DWORD PTR _g_CaretInfo+28
	addss	xmm0, xmm1
	movzx	edx, BYTE PTR _gSkinIME+12
	cvtsi2ss xmm1, edx
	addss	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@40800000
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	movss	DWORD PTR _PieData$[ebp+ecx], xmm0
; Line 619
	cvtsi2ss xmm0, DWORD PTR _g_CaretInfo+24
	mov	eax, DWORD PTR _g_CaretInfo+32
	sub	eax, DWORD PTR _g_CaretInfo+24
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm1, eax
	addss	xmm0, xmm1
	mov	edx, 32					; 00000020H
	imul	eax, edx, 0
	movss	DWORD PTR _PieData$[ebp+eax+4], xmm0
$LN20@DrawImeInd:
; Line 621
	jmp	$LN23@DrawImeInd
$LN19@DrawImeInd:
; Line 624
	movss	xmm0, DWORD PTR _SizeOfPie$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR __real@40800000
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	movss	DWORD PTR _PieData$[ebp+edx], xmm0
; Line 625
	movss	xmm0, DWORD PTR _SizeOfPie$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR __real@40800000
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	movss	DWORD PTR _PieData$[ebp+ecx+4], xmm0
; Line 626
	jmp	$LN23@DrawImeInd
$LN18@DrawImeInd:
; Line 628
	mov	edx, DWORD PTR _g_screenWidth
	mov	DWORD PTR tv512[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv512[ebp]
	mov	eax, DWORD PTR tv512[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv516[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv516[ebp]
	movss	xmm1, DWORD PTR _SizeOfPie$[ebp]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm1, DWORD PTR __real@40800000
	subss	xmm0, xmm1
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	movss	DWORD PTR _PieData$[ebp+edx], xmm0
; Line 629
	movss	xmm0, DWORD PTR _SizeOfPie$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR __real@40800000
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	movss	DWORD PTR _PieData$[ebp+ecx+4], xmm0
; Line 630
	jmp	$LN23@DrawImeInd
$LN17@DrawImeInd:
; Line 632
	mov	edx, DWORD PTR _g_screenWidth
	mov	DWORD PTR tv527[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv527[ebp]
	mov	eax, DWORD PTR tv527[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv531[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv531[ebp]
	movss	xmm1, DWORD PTR _SizeOfPie$[ebp]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm1, DWORD PTR __real@40800000
	subss	xmm0, xmm1
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	movss	DWORD PTR _PieData$[ebp+edx], xmm0
; Line 633
	mov	eax, DWORD PTR _g_screenHeight
	mov	DWORD PTR tv539[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv539[ebp]
	mov	ecx, DWORD PTR tv539[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv543[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv543[ebp]
	movss	xmm1, DWORD PTR _SizeOfPie$[ebp]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm1, DWORD PTR __real@40800000
	subss	xmm0, xmm1
	mov	edx, 32					; 00000020H
	imul	eax, edx, 0
	movss	DWORD PTR _PieData$[ebp+eax+4], xmm0
; Line 634
	jmp	$LN23@DrawImeInd
$LN16@DrawImeInd:
; Line 636
	movss	xmm0, DWORD PTR _SizeOfPie$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	addss	xmm0, DWORD PTR __real@40800000
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	movss	DWORD PTR _PieData$[ebp+edx], xmm0
; Line 637
	mov	eax, DWORD PTR _g_screenHeight
	mov	DWORD PTR tv554[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv554[ebp]
	mov	ecx, DWORD PTR tv554[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv558[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv558[ebp]
	movss	xmm1, DWORD PTR _SizeOfPie$[ebp]
	divss	xmm1, DWORD PTR __real@40000000
	addss	xmm1, DWORD PTR __real@40800000
	subss	xmm0, xmm1
	mov	edx, 32					; 00000020H
	imul	eax, edx, 0
	movss	DWORD PTR _PieData$[ebp+eax+4], xmm0
$LN23@DrawImeInd:
; Line 640
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _PieData$[ebp+edx+12], xmm0
; Line 641
	movzx	eax, BYTE PTR _bOn$[ebp]
	test	eax, eax
	je	$LN15@DrawImeInd
; Line 643
	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv571[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv571[ebp]
	mov	ecx, DWORD PTR tv571[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	subsd	xmm0, QWORD PTR _lastSwirl
	comisd	xmm0, QWORD PTR __real@406f400000000000
	jbe	SHORT $LN13@DrawImeInd
; Line 645
	mov	edx, DWORD PTR _swirl
	add	edx, 1
	mov	DWORD PTR _swirl, edx
; Line 646
	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv579[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv579[ebp]
	mov	eax, DWORD PTR tv579[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR _lastSwirl, xmm0
; Line 647
	cmp	DWORD PTR _swirl, 13			; 0000000dH
	jbe	SHORT $LN13@DrawImeInd
; Line 648
	mov	DWORD PTR _swirl, 0
$LN13@DrawImeInd:
; Line 651
	jmp	SHORT $LN12@DrawImeInd
$LN15@DrawImeInd:
; Line 652
	mov	DWORD PTR _swirl, 0
$LN12@DrawImeInd:
; Line 653
	mov	DWORD PTR _t1$7[ebp], 1
	jmp	SHORT $LN11@DrawImeInd
$LN10@DrawImeInd:
	mov	ecx, DWORD PTR _t1$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _t1$7[ebp], ecx
$LN11@DrawImeInd:
	cmp	DWORD PTR _t1$7[ebp], 16		; 00000010H
	jge	$LN9@DrawImeInd
; Line 655
	movzx	edx, BYTE PTR _bOn$[ebp]
	imul	edx, DWORD PTR _swirl
	mov	eax, DWORD PTR _t1$7[ebp]
	lea	ecx, DWORD PTR [eax+edx-1]
	mov	DWORD PTR tv585[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv585[ebp]
	mov	edx, DWORD PTR tv585[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv588[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv588[ebp]
	mulss	xmm0, DWORD PTR __real@40c90fda
	divss	xmm0, DWORD PTR __real@41600000
	movss	DWORD PTR _radian$6[ebp], xmm0
; Line 656
	mov	eax, 32					; 00000020H
	imul	esi, eax, 0
	movss	xmm0, DWORD PTR _SizeOfPie$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	xmm1, DWORD PTR _radian$6[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv683[ebp], xmm0
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv600[ebp]
	movss	xmm0, DWORD PTR tv683[ebp]
	mulss	xmm0, DWORD PTR tv600[ebp]
	addss	xmm0, DWORD PTR _PieData$[ebp+esi]
	mov	ecx, DWORD PTR _t1$7[ebp]
	shl	ecx, 5
	movss	DWORD PTR _PieData$[ebp+ecx], xmm0
; Line 657
	mov	edx, 32					; 00000020H
	imul	esi, edx, 0
	movss	xmm0, DWORD PTR _SizeOfPie$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	xmm1, DWORD PTR _radian$6[ebp]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv685[ebp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv610[ebp]
	movss	xmm0, DWORD PTR tv685[ebp]
	mulss	xmm0, DWORD PTR tv610[ebp]
	addss	xmm0, DWORD PTR _PieData$[ebp+esi+4]
	mov	eax, DWORD PTR _t1$7[ebp]
	shl	eax, 5
	movss	DWORD PTR _PieData$[ebp+eax+4], xmm0
; Line 658
	mov	ecx, DWORD PTR _t1$7[ebp]
	shl	ecx, 5
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _PieData$[ebp+ecx+12], xmm0
; Line 659
	jmp	$LN10@DrawImeInd
$LN9@DrawImeInd:
; Line 661
	movzx	edx, BYTE PTR _gSkinIME+13
	shl	edx, 24					; 00000018H
	add	edx, 16777215				; 00ffffffH
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 0
	mov	DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 662
	cmp	DWORD PTR _gSkinIME, 0
	jne	$LN8@DrawImeInd
	movzx	edx, BYTE PTR _bOn$[ebp]
	test	edx, edx
	je	$LN8@DrawImeInd
; Line 665
	movzx	eax, BYTE PTR _gSkinIME+13
	shl	eax, 24					; 00000018H
	add	eax, 16711680				; 00ff0000H
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	mov	DWORD PTR _PieData$[ebp+ecx+16], eax
; Line 666
	movzx	edx, BYTE PTR _gSkinIME+13
	shl	edx, 24					; 00000018H
	add	edx, 16723968				; 00ff3000H
	mov	eax, 32					; 00000020H
	shl	eax, 1
	mov	DWORD PTR _PieData$[ebp+eax+16], edx
; Line 667
	movzx	ecx, BYTE PTR _gSkinIME+13
	shl	ecx, 24					; 00000018H
	add	ecx, 16736256				; 00ff6000H
	mov	edx, 32					; 00000020H
	imul	eax, edx, 3
	mov	DWORD PTR _PieData$[ebp+eax+16], ecx
; Line 668
	movzx	ecx, BYTE PTR _gSkinIME+13
	shl	ecx, 24					; 00000018H
	add	ecx, 16748544				; 00ff9000H
	mov	edx, 32					; 00000020H
	shl	edx, 2
	mov	DWORD PTR _PieData$[ebp+edx+16], ecx
; Line 669
	movzx	eax, BYTE PTR _gSkinIME+13
	shl	eax, 24					; 00000018H
	add	eax, 16760832				; 00ffc000H
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 5
	mov	DWORD PTR _PieData$[ebp+edx+16], eax
; Line 670
	movzx	eax, BYTE PTR _gSkinIME+13
	shl	eax, 24					; 00000018H
	add	eax, 16776960				; 00ffff00H
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 6
	mov	DWORD PTR _PieData$[ebp+edx+16], eax
; Line 671
	movzx	eax, BYTE PTR _gSkinIME+13
	shl	eax, 24					; 00000018H
	add	eax, 12648192				; 00c0ff00H
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 7
	mov	DWORD PTR _PieData$[ebp+edx+16], eax
; Line 672
	movzx	eax, BYTE PTR _gSkinIME+13
	shl	eax, 24					; 00000018H
	add	eax, 9502464				; 0090ff00H
	mov	ecx, 32					; 00000020H
	shl	ecx, 3
	mov	DWORD PTR _PieData$[ebp+ecx+16], eax
; Line 673
	movzx	edx, BYTE PTR _gSkinIME+13
	shl	edx, 24					; 00000018H
	add	edx, 6356736				; 0060ff00H
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 9
	mov	DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 674
	movzx	edx, BYTE PTR _gSkinIME+13
	shl	edx, 24					; 00000018H
	add	edx, 3195135				; 0030c0ffH
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 10
	mov	DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 675
	movzx	edx, BYTE PTR _gSkinIME+13
	shl	edx, 24					; 00000018H
	add	edx, 41215				; 0000a0ffH
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 11
	mov	DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 676
	movzx	edx, BYTE PTR _gSkinIME+13
	shl	edx, 24					; 00000018H
	add	edx, 3182847				; 003090ffH
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 12
	mov	DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 677
	movzx	edx, BYTE PTR _gSkinIME+13
	shl	edx, 24					; 00000018H
	add	edx, 6316287				; 006060ffH
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 13
	mov	DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 678
	movzx	edx, BYTE PTR _gSkinIME+13
	shl	edx, 24					; 00000018H
	add	edx, 9449727				; 009030ffH
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 14
	mov	DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 679
	movzx	edx, BYTE PTR _gSkinIME+13
	shl	edx, 24					; 00000018H
	add	edx, 12583167				; 00c000ffH
	mov	eax, 32					; 00000020H
	imul	ecx, eax, 15
	mov	DWORD PTR _PieData$[ebp+ecx+16], edx
; Line 682
	jmp	SHORT $LN4@DrawImeInd
$LN8@DrawImeInd:
; Line 684
	movzx	edx, BYTE PTR _bOn$[ebp]
	test	edx, edx
	je	SHORT $LN29@DrawImeInd
	mov	eax, DWORD PTR _gSkinIME
	mov	DWORD PTR tv359[ebp], eax
	jmp	SHORT $LN30@DrawImeInd
$LN29@DrawImeInd:
	mov	ecx, DWORD PTR _gSkinIME+4
	mov	DWORD PTR tv359[ebp], ecx
$LN30@DrawImeInd:
	mov	edx, DWORD PTR tv359[ebp]
	mov	DWORD PTR _dwColor$5[ebp], edx
; Line 685
	mov	DWORD PTR _t1$4[ebp], 1
	jmp	SHORT $LN6@DrawImeInd
$LN5@DrawImeInd:
	mov	eax, DWORD PTR _t1$4[ebp]
	add	eax, 1
	mov	DWORD PTR _t1$4[ebp], eax
$LN6@DrawImeInd:
	cmp	DWORD PTR _t1$4[ebp], 16		; 00000010H
	jge	SHORT $LN4@DrawImeInd
; Line 687
	movzx	ecx, BYTE PTR _gSkinIME+13
	shl	ecx, 24					; 00000018H
	add	ecx, DWORD PTR _dwColor$5[ebp]
	mov	edx, DWORD PTR _t1$4[ebp]
	shl	edx, 5
	mov	DWORD PTR _PieData$[ebp+edx+16], ecx
; Line 688
	jmp	SHORT $LN5@DrawImeInd
$LN4@DrawImeInd:
; Line 690
	mov	eax, 32					; 00000020H
	shl	eax, 0
	lea	esi, DWORD PTR _PieData$[ebp+eax]
	mov	ecx, 32					; 00000020H
	shl	ecx, 4
	lea	edi, DWORD PTR _PieData$[ebp+ecx]
	mov	ecx, 8
	rep movsd
; Line 692
	cmp	DWORD PTR ?ImeUiCallback_DrawFans@@3P6GXPBUIMEUI_VERTEX@@I@ZA, 0 ; ImeUiCallback_DrawFans
	je	SHORT $LN3@DrawImeInd
; Line 693
	mov	esi, esp
	push	17					; 00000011H
	lea	edx, DWORD PTR _PieData$[ebp]
	push	edx
	call	DWORD PTR ?ImeUiCallback_DrawFans@@3P6GXPBUIMEUI_VERTEX@@I@ZA ; ImeUiCallback_DrawFans
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@DrawImeInd:
; Line 695
	movzx	eax, BYTE PTR _gSkinIME+12
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3f200000
	movss	DWORD PTR _fHeight$[ebp], xmm0
; Line 698
	mov	ecx, DWORD PTR _g_hklCurrent
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	and	edx, 1023				; 000003ffH
	movzx	eax, dx
	cmp	eax, 18					; 00000012H
	jne	SHORT $LN2@DrawImeInd
	movzx	ecx, BYTE PTR _bOn$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@DrawImeInd
; Line 700
	movss	xmm0, DWORD PTR _fHeight$[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR _fHeight$[ebp], xmm0
$LN2@DrawImeInd:
; Line 703
	cmp	DWORD PTR _gSkinIME+16, 0
	je	$LN1@DrawImeInd
; Line 712
	movss	xmm0, DWORD PTR _fHeight$[ebp]
	mulss	xmm0, DWORD PTR __real@42c00000
	divss	xmm0, DWORD PTR __real@42900000
	movss	DWORD PTR _fHeight$[ebp], xmm0
; Line 713
	movss	xmm0, DWORD PTR _fHeight$[ebp]
	call	__ftoui3
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _gSkinIME+16
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _gSkinIME+16
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 714
	movzx	eax, BYTE PTR _gSkinIME+13
	shl	eax, 24					; 00000018H
	or	eax, DWORD PTR _gSkinIME+8
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _gSkinIME+16
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _gSkinIME+16
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 720
	cmp	DWORD PTR _g_dwState, 1
	jne	SHORT $LN31@DrawImeInd
	mov	ecx, DWORD PTR _g_pszIndicatior
	mov	DWORD PTR tv407[ebp], ecx
	jmp	SHORT $LN32@DrawImeInd
$LN31@DrawImeInd:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _g_aszIndicator[eax]
	mov	DWORD PTR tv407[ebp], ecx
$LN32@DrawImeInd:
	mov	edx, DWORD PTR tv407[ebp]
	mov	DWORD PTR _cszSymbol$1[ebp], edx
; Line 722
	mov	esi, esp
	lea	eax, DWORD PTR _h$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _w$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _cszSymbol$1[ebp]
	push	edx
	mov	eax, DWORD PTR _gSkinIME+16
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _gSkinIME+16
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 723
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	cvttss2si eax, DWORD PTR _PieData$[ebp+edx+4]
	mov	ecx, DWORD PTR _h$2[ebp]
	shr	ecx, 1
	sub	eax, ecx
	mov	esi, esp
	push	eax
	mov	edx, 32					; 00000020H
	imul	eax, edx, 0
	cvttss2si ecx, DWORD PTR _PieData$[ebp+eax]
	mov	edx, DWORD PTR _w$3[ebp]
	shr	edx, 1
	sub	ecx, edx
	push	ecx
	mov	eax, DWORD PTR _gSkinIME+16
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _gSkinIME+16
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 724
	mov	esi, esp
	mov	ecx, DWORD PTR _cszSymbol$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _gSkinIME+16
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _gSkinIME+16
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawImeInd:
; Line 751
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@DrawImeInd
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 724				; 000002d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@DrawImeInd:
	DD	3
	DD	$LN36@DrawImeInd
$LN36@DrawImeInd:
	DD	-556					; fffffdd4H
	DD	544					; 00000220H
	DD	$LN33@DrawImeInd
	DD	-592					; fffffdb0H
	DD	4
	DD	$LN34@DrawImeInd
	DD	-604					; fffffda4H
	DD	4
	DD	$LN35@DrawImeInd
$LN35@DrawImeInd:
	DB	104					; 00000068H
	DB	0
$LN34@DrawImeInd:
	DB	119					; 00000077H
	DB	0
$LN33@DrawImeInd:
	DB	80					; 00000050H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN38@DrawImeInd:
	DD	$LN22@DrawImeInd
	DD	$LN19@DrawImeInd
	DD	$LN18@DrawImeInd
	DD	$LN17@DrawImeInd
	DD	$LN16@DrawImeInd
?DrawImeIndicator@@YAXXZ ENDP				; DrawImeIndicator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv132 = -48						; size = 4
tv94 = -44						; size = 4
tv82 = -40						; size = 4
tv71 = -36						; size = 4
_dwSentMode$1 = -28					; size = 4
_dwConvMode$2 = -16					; size = 4
_himc$ = -8						; size = 4
_bIme$ = -1						; size = 1
?CheckToggleState@@YAXXZ PROC				; CheckToggleState
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2298
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2299
	call	?CheckInputLocale@@YAXXZ		; CheckInputLocale
; Line 2304
	movzx	eax, BYTE PTR _g_bUILessMode
	test	eax, eax
	je	SHORT $LN5@CheckToggl
; Line 2306
	jmp	$LN6@CheckToggl
$LN5@CheckToggl:
; Line 2310
	mov	ecx, DWORD PTR _g_hklCurrent
	push	ecx
	call	_ImmIsIME@4
	test	eax, eax
	je	SHORT $LN8@CheckToggl
	mov	edx, DWORD PTR _g_hklCurrent
	and	edx, -268435456				; f0000000H
	cmp	edx, -536870912				; e0000000H
	jne	SHORT $LN8@CheckToggl
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN9@CheckToggl
$LN8@CheckToggl:
	mov	DWORD PTR tv71[ebp], 0
$LN9@CheckToggl:
	mov	al, BYTE PTR tv71[ebp]
	mov	BYTE PTR _bIme$[ebp], al
; Line 2311
	mov	ecx, DWORD PTR _g_hklCurrent
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	and	edx, 1023				; 000003ffH
	movzx	eax, dx
	cmp	eax, 4
	jne	SHORT $LN10@CheckToggl
	movzx	ecx, BYTE PTR _bIme$[ebp]
	test	ecx, ecx
	je	SHORT $LN10@CheckToggl
	mov	DWORD PTR tv82[ebp], 1
	jmp	SHORT $LN11@CheckToggl
$LN10@CheckToggl:
	mov	DWORD PTR tv82[ebp], 0
$LN11@CheckToggl:
	mov	dl, BYTE PTR tv82[ebp]
	mov	BYTE PTR _g_bChineseIME, dl
; Line 2313
	mov	eax, DWORD PTR _g_hwndCurr
	push	eax
	call	_ImmGetContext@4
	mov	DWORD PTR _himc$[ebp], eax
; Line 2314
	cmp	DWORD PTR _himc$[ebp], 0
	je	SHORT $LN4@CheckToggl
; Line 2316
	movzx	ecx, BYTE PTR _g_bChineseIME
	test	ecx, ecx
	je	SHORT $LN3@CheckToggl
; Line 2319
	lea	edx, DWORD PTR _dwSentMode$1[ebp]
	push	edx
	lea	eax, DWORD PTR _dwConvMode$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _himc$[ebp]
	push	ecx
	call	_ImmGetConversionStatus@12
; Line 2320
	mov	edx, DWORD PTR _dwConvMode$2[ebp]
	and	edx, 1
	je	SHORT $LN12@CheckToggl
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN13@CheckToggl
$LN12@CheckToggl:
	mov	DWORD PTR tv94[ebp], 2
$LN13@CheckToggl:
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR _g_dwState, eax
; Line 2322
	jmp	SHORT $LN2@CheckToggl
$LN3@CheckToggl:
; Line 2324
	movzx	ecx, BYTE PTR _bIme$[ebp]
	test	ecx, ecx
	je	SHORT $LN14@CheckToggl
	mov	edx, DWORD PTR _himc$[ebp]
	push	edx
	call	_ImmGetOpenStatus@4
	test	eax, eax
	je	SHORT $LN14@CheckToggl
	mov	DWORD PTR tv132[ebp], 1
	jmp	SHORT $LN15@CheckToggl
$LN14@CheckToggl:
	mov	DWORD PTR tv132[ebp], 0
$LN15@CheckToggl:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR _g_dwState, eax
$LN2@CheckToggl:
; Line 2326
	mov	ecx, DWORD PTR _himc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _g_hwndCurr
	push	edx
	call	_ImmReleaseContext@8
; Line 2328
	jmp	SHORT $LN6@CheckToggl
$LN4@CheckToggl:
; Line 2329
	mov	DWORD PTR _g_dwState, 0
$LN6@CheckToggl:
; Line 2330
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@CheckToggl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN19@CheckToggl:
	DD	2
	DD	$LN18@CheckToggl
$LN18@CheckToggl:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN16@CheckToggl
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN17@CheckToggl
$LN17@CheckToggl:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN16@CheckToggl:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?CheckToggleState@@YAXXZ ENDP				; CheckToggleState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dwVer$1 = -1092					; size = 4
_dwLang$ = -1088					; size = 4
_kl$ = -1084						; size = 4
_szTmp$ = -1076						; size = 1024
_cbVerData$ = -44					; size = 4
_lpVerData$ = -32					; size = 4
_lpVerBuffer$ = -24					; size = 4
_dwVerHandle$ = -16					; size = 4
_dwVerSize$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_uIndex$ = 8						; size = 4
?GetImeId@@YAKI@Z PROC					; GetImeId
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 1818
	push	ebp
	mov	ebp, esp
	sub	esp, 1092				; 00000444H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1092]
	mov	ecx, 273				; 00000111H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1832
	cmp	DWORD PTR _uIndex$[ebp], 2
	jb	SHORT $LN18@GetImeId
; Line 1833
	xor	eax, eax
	jmp	$LN19@GetImeId
$LN18@GetImeId:
; Line 1835
	mov	eax, DWORD PTR _g_hklCurrent
	mov	DWORD PTR _kl$[ebp], eax
; Line 1836
	mov	ecx, DWORD PTR ?hklPrev@?1??GetImeId@@YAKI@Z@4PAUHKL__@@A
	cmp	ecx, DWORD PTR _kl$[ebp]
	jne	SHORT $LN17@GetImeId
; Line 1838
	mov	edx, DWORD PTR _uIndex$[ebp]
	mov	eax, DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[edx*4]
	jmp	$LN19@GetImeId
$LN17@GetImeId:
; Line 1840
	mov	eax, DWORD PTR _kl$[ebp]
	mov	DWORD PTR ?hklPrev@?1??GetImeId@@YAKI@Z@4PAUHKL__@@A, eax
; Line 1841
	mov	ecx, DWORD PTR _kl$[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _dwLang$[ebp], ecx
; Line 1843
	movzx	edx, BYTE PTR _g_bUILessMode
	test	edx, edx
	je	SHORT $LN16@GetImeId
	mov	eax, DWORD PTR _g_hklCurrent
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	cmp	ecx, 1028				; 00000404H
	jne	SHORT $LN16@GetImeId
; Line 1846
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[eax], 117441540 ; 07000404H
; Line 1847
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[ecx], 0
; Line 1848
	mov	edx, 4
	imul	eax, edx, 0
	mov	eax, DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[eax]
	jmp	$LN19@GetImeId
$LN16@GetImeId:
; Line 1852
	cmp	DWORD PTR _kl$[ebp], -536345596		; e0080404H
	je	SHORT $LN15@GetImeId
	cmp	DWORD PTR _kl$[ebp], -536280060		; e0090404H
	je	SHORT $LN15@GetImeId
	cmp	DWORD PTR _kl$[ebp], -536214524		; e00a0404H
	je	SHORT $LN15@GetImeId
	cmp	DWORD PTR _kl$[ebp], -536148988		; e00b0404H
	je	SHORT $LN15@GetImeId
	cmp	DWORD PTR _kl$[ebp], -535951356		; e00e0804H
	je	SHORT $LN15@GetImeId
; Line 1854
	jmp	$error$27
	jmp	$error$27
$LN15@GetImeId:
; Line 1857
	push	1023					; 000003ffH
	lea	ecx, DWORD PTR _szTmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _kl$[ebp]
	push	edx
	call	_ImmGetIMEFileNameA@12
	test	eax, eax
	ja	SHORT $LN13@GetImeId
; Line 1859
	jmp	$error$27
	jmp	$error$27
$LN13@GetImeId:
; Line 1862
	cmp	DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA, 0 ; _GetReadingString
	jne	$LN11@GetImeId
; Line 1870
	mov	esi, esp
	push	-1
	push	OFFSET $SG153753
	push	-1
	lea	eax, DWORD PTR _szTmp$[ebp]
	push	eax
	push	1
	push	1033					; 00000409H
	call	DWORD PTR __imp__CompareStringA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	je	$LN11@GetImeId
	mov	esi, esp
	push	-1
	push	OFFSET $SG153754
	push	-1
	lea	ecx, DWORD PTR _szTmp$[ebp]
	push	ecx
	push	1
	push	1033					; 00000409H
	call	DWORD PTR __imp__CompareStringA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	je	$LN11@GetImeId
	mov	esi, esp
	push	-1
	push	OFFSET $SG153755
	push	-1
	lea	edx, DWORD PTR _szTmp$[ebp]
	push	edx
	push	1
	push	1033					; 00000409H
	call	DWORD PTR __imp__CompareStringA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	je	SHORT $LN11@GetImeId
	mov	esi, esp
	push	-1
	push	OFFSET $SG153756
	push	-1
	lea	eax, DWORD PTR _szTmp$[ebp]
	push	eax
	push	1
	push	1033					; 00000409H
	call	DWORD PTR __imp__CompareStringA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	je	SHORT $LN11@GetImeId
	mov	esi, esp
	push	-1
	push	OFFSET $SG153757
	push	-1
	lea	ecx, DWORD PTR _szTmp$[ebp]
	push	ecx
	push	1
	push	1033					; 00000409H
	call	DWORD PTR __imp__CompareStringA@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 2
	je	SHORT $LN11@GetImeId
; Line 1872
	jmp	$error$27
	jmp	$error$27
$LN11@GetImeId:
; Line 1876
	lea	edx, DWORD PTR _dwVerHandle$[ebp]
	push	edx
	lea	eax, DWORD PTR _szTmp$[ebp]
	push	eax
	call	_GetFileVersionInfoSizeA@8
	mov	DWORD PTR _dwVerSize$[ebp], eax
; Line 1877
	cmp	DWORD PTR _dwVerSize$[ebp], 0
	je	$error$27
; Line 1879
	mov	esi, esp
	mov	ecx, DWORD PTR _dwVerSize$[ebp]
	push	ecx
	call	DWORD PTR ?ImeUiCallback_Malloc@@3P6APAXI@ZA ; ImeUiCallback_Malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lpVerBuffer$[ebp], eax
; Line 1880
	cmp	DWORD PTR _lpVerBuffer$[ebp], 0
	je	$error$27
; Line 1882
	mov	edx, DWORD PTR _lpVerBuffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwVerSize$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _szTmp$[ebp]
	push	ecx
	call	_GetFileVersionInfoA@16
	test	eax, eax
	je	$LN6@GetImeId
; Line 1884
	lea	edx, DWORD PTR _cbVerData$[ebp]
	push	edx
	lea	eax, DWORD PTR _lpVerData$[ebp]
	push	eax
	push	OFFSET $SG153764
	mov	ecx, DWORD PTR _lpVerBuffer$[ebp]
	push	ecx
	call	_VerQueryValueA@16
	test	eax, eax
	je	$LN6@GetImeId
; Line 1887
	mov	edx, DWORD PTR _lpVerData$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _dwVer$1[ebp], eax
; Line 1888
	mov	ecx, DWORD PTR _dwVer$1[ebp]
	and	ecx, 16711680				; 00ff0000H
	shl	ecx, 8
	mov	edx, DWORD PTR _dwVer$1[ebp]
	and	edx, 255				; 000000ffH
	shl	edx, 16					; 00000010H
	or	ecx, edx
	mov	DWORD PTR _dwVer$1[ebp], ecx
; Line 1902
	cmp	DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA, 0 ; _GetReadingString
	jne	$LN3@GetImeId
	cmp	DWORD PTR _dwLang$[ebp], 1028		; 00000404H
	jne	SHORT $LN2@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 67239936	; 04020000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 67305472	; 04030000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 67371008	; 04040000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 83886080	; 05000000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 83951616	; 05010000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 84017152	; 05020000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 100663296	; 06000000H
	je	SHORT $LN3@GetImeId
$LN2@GetImeId:
	cmp	DWORD PTR _dwLang$[ebp], 2052		; 00000804H
	jne	SHORT $LN6@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 67174400	; 04010000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 67239936	; 04020000H
	je	SHORT $LN3@GetImeId
	cmp	DWORD PTR _dwVer$1[ebp], 84082688	; 05030000H
	jne	SHORT $LN6@GetImeId
$LN3@GetImeId:
; Line 1904
	mov	eax, DWORD PTR _dwVer$1[ebp]
	or	eax, DWORD PTR _dwLang$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[edx], eax
; Line 1905
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _lpVerData$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[eax], edx
; Line 1906
	mov	esi, esp
	mov	eax, DWORD PTR _lpVerBuffer$[ebp]
	push	eax
	call	DWORD PTR ?ImeUiCallback_Free@@3P6AXPAX@ZA ; ImeUiCallback_Free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1907
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[edx]
	jmp	SHORT $LN19@GetImeId
$LN6@GetImeId:
; Line 1912
	mov	esi, esp
	mov	eax, DWORD PTR _lpVerBuffer$[ebp]
	push	eax
	call	DWORD PTR ?ImeUiCallback_Free@@3P6AXPAX@ZA ; ImeUiCallback_Free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$error$27:
; Line 1920
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[ecx], 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[eax], 0
; Line 1921
	mov	ecx, DWORD PTR _uIndex$[ebp]
	mov	eax, DWORD PTR ?dwRet@?1??GetImeId@@YAKI@Z@4PAKA[ecx*4]
$LN19@GetImeId:
; Line 1922
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@GetImeId
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1092				; 00000444H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN26@GetImeId:
	DD	4
	DD	$LN25@GetImeId
$LN25@GetImeId:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN21@GetImeId
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN22@GetImeId
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN23@GetImeId
	DD	-1076					; fffffbccH
	DD	1024					; 00000400H
	DD	$LN24@GetImeId
$LN24@GetImeId:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN23@GetImeId:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN22@GetImeId:
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN21@GetImeId:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	72					; 00000048H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?GetImeId@@YAKI@Z ENDP					; GetImeId
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv323 = -192						; size = 4
tv503 = -186						; size = 2
tv500 = -184						; size = 4
tv497 = -180						; size = 4
tv288 = -176						; size = 4
tv221 = -172						; size = 4
tv198 = -168						; size = 4
tv181 = -164						; size = 4
tv94 = -160						; size = 4
tv90 = -156						; size = 4
$T1 = -152						; size = 4
_pszTmp$2 = -148					; size = 4
_i$3 = -144						; size = 4
_j$4 = -140						; size = 4
_i$5 = -136						; size = 4
_p$6 = -132						; size = 4
_i$7 = -128						; size = 4
_nTcharSize$8 = -124					; size = 4
_offset$9 = -120					; size = 4
_p$10 = -116						; size = 4
_uMaxUiLen$11 = -108					; size = 4
_bVertical$12 = -96					; size = 4
_lpIMC$ = -88						; size = 4
_unicode$ = -81						; size = 1
_wstr$ = -80						; size = 4
_wzBuf$ = -72						; size = 32
_dwerr$ = -32						; size = 4
_dwlen$ = -20						; size = 4
_himc$ = -12						; size = 4
_dwId$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
?GetReadingString@@YAXPAUHWND__@@@Z PROC		; GetReadingString
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 1925
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1926
	movzx	eax, BYTE PTR _g_bUILessMode
	test	eax, eax
	je	SHORT $LN38@GetReading
; Line 1928
	jmp	$LN40@GetReading
$LN38@GetReading:
; Line 1930
	push	0
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
	mov	DWORD PTR _dwId$[ebp], eax
; Line 1931
	cmp	DWORD PTR _dwId$[ebp], 0
	jne	SHORT $LN37@GetReading
; Line 1933
	jmp	$LN40@GetReading
$LN37@GetReading:
; Line 1937
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	_ImmGetContext@4
	mov	DWORD PTR _himc$[ebp], eax
; Line 1938
	cmp	DWORD PTR _himc$[ebp], 0
	jne	SHORT $LN36@GetReading
; Line 1939
	jmp	$LN40@GetReading
$LN36@GetReading:
; Line 1941
	mov	DWORD PTR _dwlen$[ebp], 0
; Line 1942
	mov	DWORD PTR _dwerr$[ebp], 0
; Line 1944
	lea	edx, DWORD PTR _wzBuf$[ebp]
	mov	DWORD PTR _wstr$[ebp], edx
; Line 1945
	mov	BYTE PTR _unicode$[ebp], 0
; Line 1946
	mov	DWORD PTR _lpIMC$[ebp], 0
; Line 1948
	cmp	DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA, 0 ; _GetReadingString
	je	$LN35@GetReading
; Line 1952
	mov	esi, esp
	lea	eax, DWORD PTR _uMaxUiLen$11[ebp]
	push	eax
	lea	ecx, DWORD PTR _bVertical$12[ebp]
	push	ecx
	lea	edx, DWORD PTR _dwerr$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _himc$[ebp]
	push	eax
	call	DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA ; _GetReadingString
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwlen$[ebp], eax
; Line 1953
	cmp	DWORD PTR _dwlen$[ebp], 0
	je	SHORT $LN34@GetReading
; Line 1955
	cmp	DWORD PTR _dwlen$[ebp], 16		; 00000010H
	jbe	SHORT $LN33@GetReading
; Line 1957
	mov	DWORD PTR _dwlen$[ebp], 16		; 00000010H
$LN33@GetReading:
; Line 1959
	mov	esi, esp
	lea	ecx, DWORD PTR _uMaxUiLen$11[ebp]
	push	ecx
	lea	edx, DWORD PTR _bVertical$12[ebp]
	push	edx
	lea	eax, DWORD PTR _dwerr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wstr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwlen$[ebp]
	push	edx
	mov	eax, DWORD PTR _himc$[ebp]
	push	eax
	call	DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA ; _GetReadingString
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwlen$[ebp], eax
$LN34@GetReading:
; Line 1962
	cmp	DWORD PTR _bVertical$12[ebp], 0
	jne	SHORT $LN41@GetReading
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN42@GetReading
$LN41@GetReading:
	mov	DWORD PTR tv90[ebp], 0
$LN42@GetReading:
	mov	cl, BYTE PTR tv90[ebp]
	mov	BYTE PTR _g_bHorizontalReading, cl
; Line 1963
	mov	BYTE PTR _unicode$[ebp], 1
; Line 1965
	jmp	$LN32@GetReading
$LN35@GetReading:
; Line 1967
	mov	esi, esp
	mov	edx, DWORD PTR _himc$[ebp]
	push	edx
	call	DWORD PTR __ImmLockIMC
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lpIMC$[ebp], eax
; Line 1971
	mov	DWORD PTR _p$10[ebp], 0
; Line 1973
	mov	eax, DWORD PTR _dwId$[ebp]
	mov	DWORD PTR tv94[ebp], eax
	cmp	DWORD PTR tv94[ebp], 67372036		; 04040404H
	ja	SHORT $LN49@GetReading
	cmp	DWORD PTR tv94[ebp], 67372036		; 04040404H
	je	$LN29@GetReading
	cmp	DWORD PTR tv94[ebp], 67241988		; 04020804H
	ja	SHORT $LN50@GetReading
	cmp	DWORD PTR tv94[ebp], 67241988		; 04020804H
	je	$LN19@GetReading
	cmp	DWORD PTR tv94[ebp], 67176452		; 04010804H
	je	$LN21@GetReading
	cmp	DWORD PTR tv94[ebp], 67240964		; 04020404H
	je	SHORT $LN29@GetReading
	jmp	$LN30@GetReading
$LN50@GetReading:
	cmp	DWORD PTR tv94[ebp], 67306500		; 04030404H
	je	SHORT $LN29@GetReading
	jmp	$LN30@GetReading
$LN49@GetReading:
	cmp	DWORD PTR tv94[ebp], 84018180		; 05020404H
	ja	SHORT $LN51@GetReading
	cmp	DWORD PTR tv94[ebp], 84018180		; 05020404H
	je	$LN24@GetReading
	cmp	DWORD PTR tv94[ebp], 83887108		; 05000404H
	je	SHORT $LN27@GetReading
	cmp	DWORD PTR tv94[ebp], 83952644		; 05010404H
	je	$LN24@GetReading
	jmp	$LN30@GetReading
$LN51@GetReading:
	cmp	DWORD PTR tv94[ebp], 84084740		; 05030804H
	je	$LN24@GetReading
	jmp	$LN30@GetReading
$LN29@GetReading:
; Line 1980
	mov	esi, esp
	mov	ecx, DWORD PTR _lpIMC$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	push	edx
	call	DWORD PTR __ImmLockIMCC
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR [eax+24]
	mov	DWORD PTR _p$10[ebp], eax
; Line 1981
	cmp	DWORD PTR _p$10[ebp], 0
	jne	SHORT $LN28@GetReading
	jmp	$LN30@GetReading
$LN28@GetReading:
; Line 1982
	mov	ecx, DWORD PTR _p$10[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR _dwlen$[ebp], edx
; Line 1983
	mov	eax, DWORD PTR _p$10[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	DWORD PTR _dwerr$[ebp], ecx
; Line 1984
	mov	edx, DWORD PTR _p$10[ebp]
	add	edx, 56					; 00000038H
	mov	DWORD PTR _wstr$[ebp], edx
; Line 1985
	mov	BYTE PTR _unicode$[ebp], 1
; Line 1986
	jmp	$LN30@GetReading
$LN27@GetReading:
; Line 1990
	mov	esi, esp
	mov	eax, DWORD PTR _lpIMC$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	call	DWORD PTR __ImmLockIMCC
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _p$10[ebp], edx
; Line 1991
	cmp	DWORD PTR _p$10[ebp], 0
	jne	SHORT $LN26@GetReading
	jmp	$LN30@GetReading
$LN26@GetReading:
; Line 1992
	mov	eax, DWORD PTR _p$10[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _p$10[ebp], ecx
; Line 1993
	cmp	DWORD PTR _p$10[ebp], 0
	jne	SHORT $LN25@GetReading
	jmp	$LN30@GetReading
$LN25@GetReading:
; Line 1994
	mov	edx, DWORD PTR _p$10[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	DWORD PTR _dwlen$[ebp], eax
; Line 1995
	mov	ecx, DWORD PTR _p$10[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _dwerr$[ebp], edx
; Line 1996
	mov	eax, DWORD PTR _p$10[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _wstr$[ebp], eax
; Line 1997
	mov	BYTE PTR _unicode$[ebp], 0
; Line 1998
	jmp	$LN30@GetReading
$LN24@GetReading:
; Line 2004
	mov	esi, esp
	mov	ecx, DWORD PTR _lpIMC$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	push	edx
	call	DWORD PTR __ImmLockIMCC
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _p$10[ebp], eax
; Line 2005
	cmp	DWORD PTR _p$10[ebp], 0
	jne	SHORT $LN23@GetReading
	jmp	$LN30@GetReading
$LN23@GetReading:
; Line 2006
	mov	ecx, DWORD PTR _p$10[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _p$10[ebp], edx
; Line 2007
	cmp	DWORD PTR _p$10[ebp], 0
	jne	SHORT $LN22@GetReading
	jmp	$LN30@GetReading
$LN22@GetReading:
; Line 2008
	mov	eax, DWORD PTR _p$10[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	DWORD PTR _dwlen$[ebp], ecx
; Line 2009
	mov	edx, DWORD PTR _p$10[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _dwerr$[ebp], eax
; Line 2010
	mov	ecx, DWORD PTR _p$10[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _wstr$[ebp], ecx
; Line 2011
	mov	BYTE PTR _unicode$[ebp], 1
; Line 2012
	jmp	$LN30@GetReading
$LN21@GetReading:
; Line 2018
	push	1
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
	cmp	eax, 2
	jb	SHORT $LN43@GetReading
	mov	DWORD PTR tv181[ebp], 8
	jmp	SHORT $LN44@GetReading
$LN43@GetReading:
	mov	DWORD PTR tv181[ebp], 7
$LN44@GetReading:
	mov	edx, DWORD PTR tv181[ebp]
	mov	DWORD PTR _offset$9[ebp], edx
; Line 2020
	mov	esi, esp
	mov	eax, DWORD PTR _lpIMC$[ebp]
	mov	ecx, DWORD PTR [eax+292]
	push	ecx
	call	DWORD PTR __ImmLockIMCC
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _offset$9[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _p$10[ebp], eax
; Line 2021
	cmp	DWORD PTR _p$10[ebp], 0
	jne	SHORT $LN20@GetReading
	jmp	$LN30@GetReading
$LN20@GetReading:
; Line 2022
	mov	ecx, DWORD PTR _p$10[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR _dwlen$[ebp], edx
; Line 2023
	mov	eax, DWORD PTR _p$10[ebp]
	mov	ecx, DWORD PTR [eax+160]
	mov	DWORD PTR _dwerr$[ebp], ecx
; Line 2024
	lea	edx, DWORD PTR _dwlen$[ebp]
	push	edx
	lea	eax, DWORD PTR _dwerr$[ebp]
	push	eax
	call	??$min@K@std@@YAABKABK0@Z		; std::min<unsigned long>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _dwerr$[ebp], ecx
; Line 2025
	mov	edx, DWORD PTR _p$10[ebp]
	add	edx, 56					; 00000038H
	mov	DWORD PTR _wstr$[ebp], edx
; Line 2026
	mov	BYTE PTR _unicode$[ebp], 1
; Line 2027
	jmp	$LN30@GetReading
$LN19@GetReading:
; Line 2032
	cmp	DWORD PTR _g_osi+16, 2
	jne	SHORT $LN45@GetReading
	mov	DWORD PTR tv198[ebp], 2
	jmp	SHORT $LN46@GetReading
$LN45@GetReading:
	mov	DWORD PTR tv198[ebp], 1
$LN46@GetReading:
	mov	eax, DWORD PTR tv198[ebp]
	mov	DWORD PTR _nTcharSize$8[ebp], eax
; Line 2033
	mov	esi, esp
	mov	ecx, DWORD PTR _lpIMC$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	push	edx
	call	DWORD PTR __ImmLockIMCC
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR _p$10[ebp], eax
; Line 2034
	cmp	DWORD PTR _p$10[ebp], 0
	jne	SHORT $LN18@GetReading
	jmp	SHORT $LN30@GetReading
$LN18@GetReading:
; Line 2035
	mov	ecx, DWORD PTR _nTcharSize$8[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _p$10[ebp]
	mov	eax, DWORD PTR [edx+ecx+64]
	mov	DWORD PTR _dwlen$[ebp], eax
; Line 2036
	mov	ecx, DWORD PTR _nTcharSize$8[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _p$10[ebp]
	mov	eax, DWORD PTR [edx+ecx+68]
	mov	DWORD PTR _dwerr$[ebp], eax
; Line 2037
	mov	ecx, DWORD PTR _p$10[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _wstr$[ebp], ecx
; Line 2038
	cmp	DWORD PTR _g_osi+16, 2
	jne	SHORT $LN47@GetReading
	mov	DWORD PTR tv221[ebp], 1
	jmp	SHORT $LN48@GetReading
$LN47@GetReading:
	mov	DWORD PTR tv221[ebp], 0
$LN48@GetReading:
	mov	dl, BYTE PTR tv221[ebp]
	mov	BYTE PTR _unicode$[ebp], dl
$LN30@GetReading:
; Line 2042
	mov	eax, 512				; 00000200H
	imul	ecx, eax, 0
	mov	edx, 2
	imul	eax, edx, 0
	xor	edx, edx
	mov	WORD PTR _g_szCandidate[ecx+eax], dx
; Line 2043
	mov	eax, 512				; 00000200H
	shl	eax, 0
	mov	ecx, 2
	imul	edx, ecx, 0
	xor	ecx, ecx
	mov	WORD PTR _g_szCandidate[eax+edx], cx
; Line 2044
	mov	edx, 512				; 00000200H
	shl	edx, 1
	mov	eax, 2
	imul	ecx, eax, 0
	xor	eax, eax
	mov	WORD PTR _g_szCandidate[edx+ecx], ax
; Line 2045
	mov	ecx, 512				; 00000200H
	imul	edx, ecx, 3
	mov	eax, 2
	imul	ecx, eax, 0
	xor	eax, eax
	mov	WORD PTR _g_szCandidate[edx+ecx], ax
$LN32@GetReading:
; Line 2047
	mov	ecx, DWORD PTR _dwlen$[ebp]
	mov	DWORD PTR _g_dwCount, ecx
; Line 2048
	mov	DWORD PTR _g_dwSelection, -1
; Line 2049
	movzx	edx, BYTE PTR _unicode$[ebp]
	test	edx, edx
	je	$LN17@GetReading
; Line 2052
	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN16@GetReading
$LN15@GetReading:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN16@GetReading:
	mov	ecx, DWORD PTR _i$7[ebp]
	cmp	ecx, DWORD PTR _dwlen$[ebp]
	jae	SHORT $LN14@GetReading
; Line 2054
	mov	edx, DWORD PTR _dwerr$[ebp]
	cmp	edx, DWORD PTR _i$7[ebp]
	ja	SHORT $LN13@GetReading
	cmp	DWORD PTR _g_dwSelection, -1
	jne	SHORT $LN13@GetReading
; Line 2056
	mov	eax, DWORD PTR _i$7[ebp]
	mov	DWORD PTR _g_dwSelection, eax
$LN13@GetReading:
; Line 2058
	mov	ecx, DWORD PTR _i$7[ebp]
	shl	ecx, 9
	mov	edx, 2
	imul	eax, edx, 0
	mov	edx, DWORD PTR _i$7[ebp]
	mov	esi, DWORD PTR _wstr$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR _g_szCandidate[ecx+eax], dx
; Line 2059
	mov	eax, DWORD PTR _i$7[ebp]
	shl	eax, 9
	mov	ecx, 2
	shl	ecx, 0
	xor	edx, edx
	mov	WORD PTR _g_szCandidate[eax+ecx], dx
; Line 2060
	jmp	SHORT $LN15@GetReading
$LN14@GetReading:
; Line 2061
	mov	eax, DWORD PTR _i$7[ebp]
	shl	eax, 9
	mov	ecx, 2
	imul	edx, ecx, 0
	xor	ecx, ecx
	mov	WORD PTR _g_szCandidate[eax+edx], cx
; Line 2063
	jmp	$LN12@GetReading
$LN17@GetReading:
; Line 2065
	mov	edx, DWORD PTR _wstr$[ebp]
	mov	DWORD PTR _p$6[ebp], edx
; Line 2067
	mov	DWORD PTR _i$5[ebp], 0
	mov	DWORD PTR _j$4[ebp], 0
	jmp	SHORT $LN11@GetReading
$LN10@GetReading:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
	mov	ecx, DWORD PTR _j$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$4[ebp], ecx
$LN11@GetReading:
	mov	edx, DWORD PTR _i$5[ebp]
	cmp	edx, DWORD PTR _dwlen$[ebp]
	jae	$LN9@GetReading
; Line 2069
	mov	eax, DWORD PTR _dwerr$[ebp]
	cmp	eax, DWORD PTR _i$5[ebp]
	ja	SHORT $LN8@GetReading
	cmp	DWORD PTR _g_dwSelection, -1
	jne	SHORT $LN8@GetReading
; Line 2071
	mov	ecx, DWORD PTR _j$4[ebp]
	mov	DWORD PTR _g_dwSelection, ecx
$LN8@GetReading:
; Line 2074
	mov	edx, DWORD PTR _p$6[ebp]
	add	edx, DWORD PTR _i$5[ebp]
	movzx	eax, BYTE PTR [edx]
	movzx	ecx, BYTE PTR _LeadByteTable[eax]
	test	ecx, ecx
	je	SHORT $LN52@GetReading
	mov	DWORD PTR tv288[ebp], 1
	jmp	SHORT $LN53@GetReading
$LN52@GetReading:
	mov	DWORD PTR tv288[ebp], 0
$LN53@GetReading:
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _j$4[ebp]
	shl	edx, 9
	add	edx, OFFSET _g_szCandidate
	push	edx
	mov	eax, DWORD PTR tv288[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _p$6[ebp]
	add	ecx, DWORD PTR _i$5[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _g_uCodePage
	push	edx
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2075
	mov	eax, DWORD PTR _p$6[ebp]
	add	eax, DWORD PTR _i$5[ebp]
	movzx	ecx, BYTE PTR [eax]
	movzx	edx, BYTE PTR _LeadByteTable[ecx]
	test	edx, edx
	je	SHORT $LN7@GetReading
; Line 2077
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN7@GetReading:
; Line 2079
	jmp	$LN10@GetReading
$LN9@GetReading:
; Line 2080
	mov	ecx, DWORD PTR _j$4[ebp]
	shl	ecx, 9
	mov	edx, 2
	imul	eax, edx, 0
	xor	edx, edx
	mov	WORD PTR _g_szCandidate[ecx+eax], dx
; Line 2081
	mov	eax, DWORD PTR _j$4[ebp]
	mov	DWORD PTR _g_dwCount, eax
$LN12@GetReading:
; Line 2083
	cmp	DWORD PTR ?_GetReadingString@@3P6GIPAUHIMC__@@IPA_WPAH2PAI@ZA, 0 ; _GetReadingString
	jne	SHORT $LN6@GetReading
; Line 2085
	mov	esi, esp
	mov	ecx, DWORD PTR _lpIMC$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	push	edx
	call	DWORD PTR __ImmUnlockIMCC
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2086
	mov	esi, esp
	mov	eax, DWORD PTR _himc$[ebp]
	push	eax
	call	DWORD PTR __ImmUnlockIMC
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2087
	mov	ecx, DWORD PTR _dwId$[ebp]
	push	ecx
	call	?GetReadingWindowOrientation@@YAXK@Z	; GetReadingWindowOrientation
	add	esp, 4
$LN6@GetReading:
; Line 2089
	mov	edx, DWORD PTR _himc$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	_ImmReleaseContext@8
; Line 2091
	mov	BYTE PTR _g_bReadingWindow, 1
; Line 2092
	movzx	ecx, BYTE PTR _g_bHorizontalReading
	test	ecx, ecx
	je	$LN5@GetReading
; Line 2094
	mov	DWORD PTR _g_iReadingError, -1
; Line 2095
	mov	edx, 2
	imul	eax, edx, 0
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 64			; 00000040H
	jae	SHORT $LN54@GetReading
	jmp	SHORT $LN55@GetReading
$LN54@GetReading:
	call	___report_rangecheckfailure
$LN55@GetReading:
	xor	ecx, ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	WORD PTR _g_szReadingString[edx], cx
; Line 2096
	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@GetReading
$LN3@GetReading:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@GetReading:
	mov	ecx, DWORD PTR _i$3[ebp]
	cmp	ecx, DWORD PTR _g_dwCount
	jae	$LN5@GetReading
; Line 2098
	mov	edx, DWORD PTR _g_dwSelection
	cmp	edx, DWORD PTR _i$3[ebp]
	jne	SHORT $LN1@GetReading
; Line 2099
	mov	DWORD PTR tv497[ebp], OFFSET _g_szReadingString
	mov	eax, DWORD PTR tv497[ebp]
	add	eax, 2
	mov	DWORD PTR tv500[ebp], eax
$LL56@GetReading:
	mov	ecx, DWORD PTR tv497[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR tv503[ebp], dx
	add	DWORD PTR tv497[ebp], 2
	cmp	WORD PTR tv503[ebp], 0
	jne	SHORT $LL56@GetReading
	mov	eax, DWORD PTR tv497[ebp]
	sub	eax, DWORD PTR tv500[ebp]
	sar	eax, 1
	mov	DWORD PTR tv323[ebp], eax
	mov	ecx, DWORD PTR tv323[ebp]
	mov	DWORD PTR _g_iReadingError, ecx
$LN1@GetReading:
; Line 2100
	mov	edx, DWORD PTR _i$3[ebp]
	shl	edx, 9
	add	edx, OFFSET _g_szCandidate
	mov	DWORD PTR _pszTmp$2[ebp], edx
; Line 2101
	mov	esi, esp
	mov	eax, DWORD PTR _pszTmp$2[ebp]
	push	eax
	push	32					; 00000020H
	push	OFFSET _g_szReadingString
	call	DWORD PTR __imp__wcscat_s
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2102
	jmp	$LN3@GetReading
$LN5@GetReading:
; Line 2104
	mov	DWORD PTR _g_uCandPageSize, 10		; 0000000aH
$LN40@GetReading:
; Line 2105
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN63@GetReading
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN63@GetReading:
	DD	5
	DD	$LN62@GetReading
$LN62@GetReading:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN57@GetReading
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN58@GetReading
	DD	-72					; ffffffb8H
	DD	32					; 00000020H
	DD	$LN59@GetReading
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN60@GetReading
	DD	-108					; ffffff94H
	DD	4
	DD	$LN61@GetReading
$LN61@GetReading:
	DB	117					; 00000075H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	85					; 00000055H
	DB	105					; 00000069H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN60@GetReading:
	DB	98					; 00000062H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN59@GetReading:
	DB	119					; 00000077H
	DB	122					; 0000007aH
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN58@GetReading:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	0
$LN57@GetReading:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
?GetReadingString@@YAXPAUHWND__@@@Z ENDP		; GetReadingString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_pszIndicatior@@YAXXZ
text$di	SEGMENT
??__Eg_pszIndicatior@@YAXXZ PROC			; `dynamic initializer for 'g_pszIndicatior'', COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 307
	push	ebp
	mov	ebp, esp
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _g_aszIndicator[ecx]
	mov	DWORD PTR _g_pszIndicatior, edx
	pop	ebp
	ret	0
??__Eg_pszIndicatior@@YAXXZ ENDP			; `dynamic initializer for 'g_pszIndicatior''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__E_SendMessage@@YAXXZ
text$di	SEGMENT
??__E_SendMessage@@YAXXZ PROC				; `dynamic initializer for '_SendMessage'', COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 225
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __imp__SendMessageA@16
	mov	DWORD PTR __SendMessage, eax
	pop	ebp
	ret	0
??__E_SendMessage@@YAXXZ ENDP				; `dynamic initializer for '_SendMessage''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_msg$ = -32						; size = 28
?_PumpMessage@@YAXXZ PROC				; _PumpMessage
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2354
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN3@PumpMessag:
; Line 2356
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__PeekMessageA@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN4@PumpMessag
; Line 2358
	mov	esi, esp
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN1@PumpMessag
; Line 2360
	mov	esi, esp
	mov	edx, DWORD PTR _msg$[ebp+8]
	push	edx
	call	DWORD PTR __imp__PostQuitMessage@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2361
	jmp	SHORT $LN4@PumpMessag
$LN1@PumpMessag:
; Line 2364
	mov	esi, esp
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__TranslateMessage@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2365
	mov	esi, esp
	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	DWORD PTR __imp__DispatchMessageA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2367
	jmp	SHORT $LN3@PumpMessag
$LN4@PumpMessag:
; Line 2368
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@PumpMessag
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@PumpMessag:
	DD	1
	DD	$LN7@PumpMessag
$LN7@PumpMessag:
	DD	-32					; ffffffe0H
	DD	28					; 0000001cH
	DD	$LN6@PumpMessag
$LN6@PumpMessag:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
?_PumpMessage@@YAXXZ ENDP				; _PumpMessage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Fg_disableCicero@@YAXXZ
text$yd	SEGMENT
??__Fg_disableCicero@@YAXXZ PROC			; `dynamic atexit destructor for 'g_disableCicero'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _g_disableCicero
	call	??1CDisableCicero@@QAE@XZ		; CDisableCicero::~CDisableCicero
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Fg_disableCicero@@YAXXZ ENDP			; `dynamic atexit destructor for 'g_disableCicero''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_disableCicero@@YAXXZ
text$di	SEGMENT
??__Eg_disableCicero@@YAXXZ PROC			; `dynamic initializer for 'g_disableCicero'', COMDAT
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 187
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _g_disableCicero
	call	??0CDisableCicero@@QAE@XZ		; CDisableCicero::CDisableCicero
	push	OFFSET ??__Fg_disableCicero@@YAXXZ	; `dynamic atexit destructor for 'g_disableCicero''
	call	_atexit
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Eg_disableCicero@@YAXXZ ENDP			; `dynamic initializer for 'g_disableCicero''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DisableCiceroOnThisWnd@CDisableCicero@@QAEXPAUHWND__@@@Z
_TEXT	SEGMENT
_pdimPrev$ = -12					; size = 4
_this$ = -4						; size = 4
_hwnd$ = 8						; size = 4
?DisableCiceroOnThisWnd@CDisableCicero@@QAEXPAUHWND__@@@Z PROC ; CDisableCicero::DisableCiceroOnThisWnd, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 170
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 171
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@DisableCic
; Line 172
	jmp	SHORT $LN4@DisableCic
$LN3@DisableCic:
; Line 177
	mov	esi, esp
	lea	ecx, DWORD PTR _pdimPrev$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+36]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN4@DisableCic
; Line 179
	cmp	DWORD PTR _pdimPrev$[ebp], 0
	je	SHORT $LN4@DisableCic
; Line 180
	mov	eax, DWORD PTR _pdimPrev$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pdimPrev$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@DisableCic:
; Line 182
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@DisableCic
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN8@DisableCic:
	DD	1
	DD	$LN7@DisableCic
$LN7@DisableCic:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN6@DisableCic
$LN6@DisableCic:
	DB	112					; 00000070H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	0
?DisableCiceroOnThisWnd@CDisableCicero@@QAEXPAUHWND__@@@Z ENDP ; CDisableCicero::DisableCiceroOnThisWnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Uninitialize@CDisableCicero@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Uninitialize@CDisableCicero@@QAEXXZ PROC		; CDisableCicero::Uninitialize, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 158
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 159
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Uninitiali
; Line 161
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 162
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Uninitiali:
; Line 164
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	test	eax, eax
	je	SHORT $LN1@Uninitiali
; Line 165
	mov	esi, esp
	call	DWORD PTR __imp__CoUninitialize@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Uninitiali:
; Line 166
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], 0
; Line 167
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Uninitialize@CDisableCicero@@QAEXXZ ENDP		; CDisableCicero::Uninitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Initialize@CDisableCicero@@QAEXXZ
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
?Initialize@CDisableCicero@@QAEXXZ PROC			; CDisableCicero::Initialize, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 140
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 141
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN2@Initialize
; Line 143
	jmp	SHORT $LN3@Initialize
$LN2@Initialize:
; Line 146
	mov	esi, esp
	push	2
	push	0
	call	DWORD PTR __imp__CoInitializeEx@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 147
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN3@Initialize
; Line 149
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+4], 1
; Line 154
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, esp
	push	eax
	push	OFFSET __GUID_aa80e801_2021_11d2_93e0_0060b067b86e
	push	1
	push	0
	push	OFFSET _CLSID_TF_ThreadMgr
	call	DWORD PTR __imp__CoCreateInstance@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$LN3@Initialize:
; Line 156
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Initialize@CDisableCicero@@QAEXXZ ENDP			; CDisableCicero::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CDisableCicero@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDisableCicero@@QAE@XZ PROC				; CDisableCicero::~CDisableCicero, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 136
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 137
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Uninitialize@CDisableCicero@@QAEXXZ	; CDisableCicero::Uninitialize
; Line 138
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDisableCicero@@QAE@XZ ENDP				; CDisableCicero::~CDisableCicero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CDisableCicero@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDisableCicero@@QAE@XZ PROC				; CDisableCicero::CDisableCicero, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 133
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], 0
; Line 134
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDisableCicero@@QAE@XZ ENDP				; CDisableCicero::CDisableCicero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0ITfUIElementSink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ITfUIElementSink@@QAE@XZ PROC			; ITfUIElementSink::ITfUIElementSink, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ITfUIElementSink@@QAE@XZ ENDP			; ITfUIElementSink::ITfUIElementSink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0ITfInputProcessorProfileActivationSink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ITfInputProcessorProfileActivationSink@@QAE@XZ PROC	; ITfInputProcessorProfileActivationSink::ITfInputProcessorProfileActivationSink, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ITfInputProcessorProfileActivationSink@@QAE@XZ ENDP	; ITfInputProcessorProfileActivationSink::ITfInputProcessorProfileActivationSink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0ITfCompartmentEventSink@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ITfCompartmentEventSink@@QAE@XZ PROC			; ITfCompartmentEventSink::ITfCompartmentEventSink, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ITfCompartmentEventSink@@QAE@XZ ENDP			; ITfCompartmentEventSink::ITfCompartmentEventSink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetImeCursorChars@@YAKXZ PROC			; ImeUi_GetImeCursorChars
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3249
	push	ebp
	mov	ebp, esp
; Line 3250
	mov	eax, DWORD PTR _g_IMECursorChars
; Line 3251
	pop	ebp
	ret	0
?ImeUi_GetImeCursorChars@@YAKXZ ENDP			; ImeUi_GetImeCursorChars
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetCompStringAttr@@YAPAEXZ PROC			; ImeUi_GetCompStringAttr
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3244
	push	ebp
	mov	ebp, esp
; Line 3245
	mov	eax, OFFSET _g_szCompAttrString
; Line 3246
	pop	ebp
	ret	0
?ImeUi_GetCompStringAttr@@YAPAEXZ ENDP			; ImeUi_GetCompStringAttr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetCandidateCount@@YAKXZ PROC			; ImeUi_GetCandidateCount
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3234
	push	ebp
	mov	ebp, esp
; Line 3235
	mov	eax, DWORD PTR _g_dwCount
; Line 3236
	pop	ebp
	ret	0
?ImeUi_GetCandidateCount@@YAKXZ ENDP			; ImeUi_GetCandidateCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetCandidateSelection@@YAKXZ PROC		; ImeUi_GetCandidateSelection
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3229
	push	ebp
	mov	ebp, esp
; Line 3230
	mov	eax, DWORD PTR _g_dwSelection
; Line 3231
	pop	ebp
	ret	0
?ImeUi_GetCandidateSelection@@YAKXZ ENDP		; ImeUi_GetCandidateSelection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetCompositionString@@YAPA_WXZ PROC		; ImeUi_GetCompositionString
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3239
	push	ebp
	mov	ebp, esp
; Line 3240
	mov	eax, OFFSET _g_szCompositionString
; Line 3241
	pop	ebp
	ret	0
?ImeUi_GetCompositionString@@YAPA_WXZ ENDP		; ImeUi_GetCompositionString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_idx$ = 8						; size = 4
?ImeUi_GetCandidate@@YAPA_WI@Z PROC			; ImeUi_GetCandidate
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3221
	push	ebp
	mov	ebp, esp
; Line 3222
	cmp	DWORD PTR _idx$[ebp], 10		; 0000000aH
	jae	SHORT $LN2@ImeUi_GetC
; Line 3223
	mov	eax, DWORD PTR _idx$[ebp]
	shl	eax, 9
	add	eax, OFFSET _g_szCandidate
	jmp	SHORT $LN3@ImeUi_GetC
; Line 3224
	jmp	SHORT $LN3@ImeUi_GetC
$LN2@ImeUi_GetC:
; Line 3225
	mov	eax, 512				; 00000200H
	imul	eax, eax, 0
	add	eax, OFFSET _g_szCandidate
$LN3@ImeUi_GetC:
; Line 3226
	pop	ebp
	ret	0
?ImeUi_GetCandidate@@YAPA_WI@Z ENDP			; ImeUi_GetCandidate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_IsHorizontalReading@@YA_NXZ PROC			; ImeUi_IsHorizontalReading
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3216
	push	ebp
	mov	ebp, esp
; Line 3217
	mov	al, BYTE PTR _g_bHorizontalReading
; Line 3218
	pop	ebp
	ret	0
?ImeUi_IsHorizontalReading@@YA_NXZ ENDP			; ImeUi_IsHorizontalReading
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_IsVerticalCand@@YA_NXZ PROC			; ImeUi_IsVerticalCand
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3211
	push	ebp
	mov	ebp, esp
; Line 3212
	mov	al, BYTE PTR _g_bVerticalCand
; Line 3213
	pop	ebp
	ret	0
?ImeUi_IsVerticalCand@@YA_NXZ ENDP			; ImeUi_IsVerticalCand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_IsShowCandListWindow@@YA_NXZ PROC		; ImeUi_IsShowCandListWindow
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3206
	push	ebp
	mov	ebp, esp
; Line 3207
	mov	al, BYTE PTR _g_bCandList
; Line 3208
	pop	ebp
	ret	0
?ImeUi_IsShowCandListWindow@@YA_NXZ ENDP		; ImeUi_IsShowCandListWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_IsShowReadingWindow@@YA_NXZ PROC			; ImeUi_IsShowReadingWindow
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3201
	push	ebp
	mov	ebp, esp
; Line 3202
	mov	al, BYTE PTR _g_bReadingWindow
; Line 3203
	pop	ebp
	ret	0
?ImeUi_IsShowReadingWindow@@YA_NXZ ENDP			; ImeUi_IsShowReadingWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetIndicatior@@YAPA_WXZ PROC			; ImeUi_GetIndicatior
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3195
	push	ebp
	mov	ebp, esp
; Line 3196
	mov	eax, DWORD PTR _g_pszIndicatior
; Line 3197
	pop	ebp
	ret	0
?ImeUi_GetIndicatior@@YAPA_WXZ ENDP			; ImeUi_GetIndicatior
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetLanguage@@YAGXZ PROC				; ImeUi_GetLanguage
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3190
	push	ebp
	mov	ebp, esp
; Line 3191
	mov	eax, DWORD PTR _g_hklCurrent
	and	eax, 65535				; 0000ffffH
; Line 3192
	pop	ebp
	ret	0
?ImeUi_GetLanguage@@YAGXZ ENDP				; ImeUi_GetLanguage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uIndex$ = 8						; size = 4
?ImeUi_GetImeId@@YAKI@Z PROC				; ImeUi_GetImeId
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3185
	push	ebp
	mov	ebp, esp
; Line 3186
	mov	eax, DWORD PTR _uIndex$[ebp]
	push	eax
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
; Line 3187
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?ImeUi_GetImeId@@YAKI@Z ENDP				; ImeUi_GetImeId
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetPrimaryLanguage@@YAGXZ PROC			; ImeUi_GetPrimaryLanguage
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 3180
	push	ebp
	mov	ebp, esp
; Line 3181
	mov	eax, DWORD PTR _g_hklCurrent
	and	eax, 65535				; 0000ffffH
	movzx	eax, ax
	and	eax, 1023				; 000003ffH
; Line 3182
	pop	ebp
	ret	0
?ImeUi_GetPrimaryLanguage@@YAGXZ ENDP			; ImeUi_GetPrimaryLanguage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dwFlags$ = 8						; size = 4
_bSet$ = 12						; size = 1
?ImeUi_SetFlags@@YAXK_N@Z PROC				; ImeUi_SetFlags
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2592
	push	ebp
	mov	ebp, esp
; Line 2593
	movzx	eax, BYTE PTR _bSet$[ebp]
	test	eax, eax
	je	SHORT $LN2@ImeUi_SetF
; Line 2595
	mov	ecx, DWORD PTR _g_dwImeUiFlags
	or	ecx, DWORD PTR _dwFlags$[ebp]
	mov	DWORD PTR _g_dwImeUiFlags, ecx
; Line 2597
	jmp	SHORT $LN3@ImeUi_SetF
$LN2@ImeUi_SetF:
; Line 2599
	mov	edx, DWORD PTR _dwFlags$[ebp]
	not	edx
	and	edx, DWORD PTR _g_dwImeUiFlags
	mov	DWORD PTR _g_dwImeUiFlags, edx
$LN3@ImeUi_SetF:
; Line 2601
	pop	ebp
	ret	0
?ImeUi_SetFlags@@YAXK_N@Z ENDP				; ImeUi_SetFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetFlags@@YAKXZ PROC				; ImeUi_GetFlags
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2587
	push	ebp
	mov	ebp, esp
; Line 2588
	mov	eax, DWORD PTR _g_dwImeUiFlags
; Line 2589
	pop	ebp
	ret	0
?ImeUi_GetFlags@@YAKXZ ENDP				; ImeUi_GetFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetInputCodePage@@YAIXZ PROC			; ImeUi_GetInputCodePage
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2582
	push	ebp
	mov	ebp, esp
; Line 2583
	mov	eax, DWORD PTR _g_uCodePage
; Line 2584
	pop	ebp
	ret	0
?ImeUi_GetInputCodePage@@YAIXZ ENDP			; ImeUi_GetInputCodePage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
?ImeUi_SetWindow@@YAXPAUHWND__@@@Z PROC			; ImeUi_SetWindow
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2576
	push	ebp
	mov	ebp, esp
; Line 2577
	mov	eax, DWORD PTR _hwnd$[ebp]
	mov	DWORD PTR _g_hwndCurr, eax
; Line 2578
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	mov	ecx, OFFSET _g_disableCicero
	call	?DisableCiceroOnThisWnd@CDisableCicero@@QAEXPAUHWND__@@@Z ; CDisableCicero::DisableCiceroOnThisWnd
; Line 2579
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?ImeUi_SetWindow@@YAXPAUHWND__@@@Z ENDP			; ImeUi_SetWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_IsSendingKeyMessage@@YA_NXZ PROC			; ImeUi_IsSendingKeyMessage
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2463
	push	ebp
	mov	ebp, esp
; Line 2464
	mov	al, BYTE PTR _bIsSendingKeyMessage
; Line 2465
	pop	ebp
	ret	0
?ImeUi_IsSendingKeyMessage@@YA_NXZ ENDP			; ImeUi_IsSendingKeyMessage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -64						; size = 4
tv77 = -60						; size = 4
tv184 = -53						; size = 1
tv181 = -52						; size = 4
tv178 = -48						; size = 4
tv66 = -44						; size = 4
_uRc$1 = -40						; size = 4
_dwCur$2 = -32						; size = 4
_plbm$3 = -20						; size = 4
_hr$ = -12						; size = 4
_hwndImeDef$ = -8					; size = 4
_bCheck$ = -1						; size = 1
_bRestore$ = 8						; size = 4
?ImeUi_ToggleLanguageBar@@YAXH@Z PROC			; ImeUi_ToggleLanguageBar
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2405
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2407
	cmp	DWORD PTR ?prevRestore@?1??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA, 1
	je	SHORT $LN15@ImeUi_Togg
	cmp	DWORD PTR _bRestore$[ebp], 1
	je	SHORT $LN15@ImeUi_Togg
	mov	DWORD PTR tv66[ebp], 0
	jmp	SHORT $LN16@ImeUi_Togg
$LN15@ImeUi_Togg:
	mov	DWORD PTR tv66[ebp], 1
$LN16@ImeUi_Togg:
	mov	al, BYTE PTR tv66[ebp]
	mov	BYTE PTR _bCheck$[ebp], al
; Line 2408
	mov	ecx, DWORD PTR _bRestore$[ebp]
	mov	DWORD PTR ?prevRestore@?1??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA, ecx
; Line 2409
	movzx	edx, BYTE PTR _bCheck$[ebp]
	test	edx, edx
	jne	SHORT $LN12@ImeUi_Togg
; Line 2410
	jmp	$LN13@ImeUi_Togg
$LN12@ImeUi_Togg:
; Line 2413
	cmp	DWORD PTR ?iShowStatusWindow@?3??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA, -1
	jne	SHORT $LN11@ImeUi_Togg
; Line 2416
	cmp	DWORD PTR _g_osi+16, 2
	jne	SHORT $LN18@ImeUi_Togg
	cmp	DWORD PTR _g_osi+4, 5
	jb	SHORT $LN18@ImeUi_Togg
	cmp	DWORD PTR _g_osi+8, 1
	ja	SHORT $LN19@ImeUi_Togg
	cmp	DWORD PTR _g_osi+8, 1
	jne	SHORT $LN18@ImeUi_Togg
	mov	DWORD PTR tv178[ebp], OFFSET _g_osi+20
	mov	eax, DWORD PTR tv178[ebp]
	add	eax, 1
	mov	DWORD PTR tv181[ebp], eax
$LL21@ImeUi_Togg:
	mov	ecx, DWORD PTR tv178[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv184[ebp], dl
	add	DWORD PTR tv178[ebp], 1
	cmp	BYTE PTR tv184[ebp], 0
	jne	SHORT $LL21@ImeUi_Togg
	mov	eax, DWORD PTR tv178[ebp]
	sub	eax, DWORD PTR tv181[ebp]
	mov	DWORD PTR tv77[ebp], eax
	je	SHORT $LN18@ImeUi_Togg
$LN19@ImeUi_Togg:
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN20@ImeUi_Togg
$LN18@ImeUi_Togg:
	mov	DWORD PTR tv79[ebp], 0
$LN20@ImeUi_Togg:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR ?iShowStatusWindow@?3??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA, ecx
$LN11@ImeUi_Togg:
; Line 2418
	mov	edx, DWORD PTR _g_hwndCurr
	push	edx
	call	_ImmGetDefaultIMEWnd@4
	mov	DWORD PTR _hwndImeDef$[ebp], eax
; Line 2419
	cmp	DWORD PTR _hwndImeDef$[ebp], 0
	je	SHORT $LN10@ImeUi_Togg
	cmp	DWORD PTR _bRestore$[ebp], 0
	je	SHORT $LN10@ImeUi_Togg
	cmp	DWORD PTR ?iShowStatusWindow@?3??ImeUi_ToggleLanguageBar@@YAXH@Z@4HA, 0
	je	SHORT $LN10@ImeUi_Togg
; Line 2420
	mov	esi, esp
	push	0
	push	34					; 00000022H
	push	643					; 00000283H
	mov	eax, DWORD PTR _hwndImeDef$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@ImeUi_Togg:
; Line 2422
	mov	esi, esp
	push	0
	call	DWORD PTR __imp__CoInitialize@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2423
	cmp	DWORD PTR _hr$[ebp], 0
	jl	$LN9@ImeUi_Togg
; Line 2425
	mov	DWORD PTR _plbm$3[ebp], 0
; Line 2427
	mov	esi, esp
	lea	ecx, DWORD PTR _plbm$3[ebp]
	push	ecx
	push	OFFSET __GUID_87955690_e627_11d2_8ddb_00105a2799b5
	push	1
	push	0
	push	OFFSET _CLSID_TF_LangBarMgr
	call	DWORD PTR __imp__CoCreateInstance@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2428
	cmp	DWORD PTR _hr$[ebp], 0
	jl	$LN8@ImeUi_Togg
	cmp	DWORD PTR _plbm$3[ebp], 0
	je	$LN8@ImeUi_Togg
; Line 2432
	cmp	DWORD PTR _hr$[ebp], 0
	jl	$LN7@ImeUi_Togg
; Line 2434
	cmp	DWORD PTR _bRestore$[ebp], 0
	je	SHORT $LN6@ImeUi_Togg
; Line 2436
	cmp	DWORD PTR _g_dwPrevFloat, 0
	je	SHORT $LN5@ImeUi_Togg
; Line 2437
	mov	esi, esp
	mov	edx, DWORD PTR _g_dwPrevFloat
	push	edx
	mov	eax, DWORD PTR _plbm$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _plbm$3[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$LN5@ImeUi_Togg:
; Line 2439
	jmp	SHORT $LN7@ImeUi_Togg
$LN6@ImeUi_Togg:
; Line 2441
	mov	esi, esp
	lea	ecx, DWORD PTR _dwCur$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _plbm$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _plbm$3[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 2442
	cmp	DWORD PTR _hr$[ebp], 0
	jl	SHORT $LN3@ImeUi_Togg
; Line 2443
	mov	eax, DWORD PTR _dwCur$2[ebp]
	mov	DWORD PTR _g_dwPrevFloat, eax
$LN3@ImeUi_Togg:
; Line 2444
	mov	ecx, DWORD PTR _g_dwPrevFloat
	and	ecx, 2048				; 00000800H
	jne	SHORT $LN7@ImeUi_Togg
; Line 2446
	mov	esi, esp
	push	8
	mov	edx, DWORD PTR _plbm$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _plbm$3[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+40]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$LN7@ImeUi_Togg:
; Line 2450
	mov	eax, DWORD PTR _plbm$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _plbm$3[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _uRc$1[ebp], eax
$LN8@ImeUi_Togg:
; Line 2452
	mov	esi, esp
	call	DWORD PTR __imp__CoUninitialize@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@ImeUi_Togg:
; Line 2454
	cmp	DWORD PTR _hwndImeDef$[ebp], 0
	je	SHORT $LN13@ImeUi_Togg
	cmp	DWORD PTR _bRestore$[ebp], 0
	jne	SHORT $LN13@ImeUi_Togg
; Line 2457
	mov	esi, esp
	push	0
	push	34					; 00000022H
	push	643					; 00000283H
	mov	ecx, DWORD PTR _hwndImeDef$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2458
	mov	esi, esp
	push	0
	push	33					; 00000021H
	push	643					; 00000283H
	mov	edx, DWORD PTR _hwndImeDef$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@ImeUi_Togg:
; Line 2460
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@ImeUi_Togg
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN25@ImeUi_Togg:
	DD	2
	DD	$LN24@ImeUi_Togg
$LN24@ImeUi_Togg:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN22@ImeUi_Togg
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN23@ImeUi_Togg
$LN23@ImeUi_Togg:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
$LN22@ImeUi_Togg:
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	109					; 0000006dH
	DB	0
?ImeUi_ToggleLanguageBar@@YAXH@Z ENDP			; ImeUi_ToggleLanguageBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -24						; size = 4
tv152 = -18						; size = 2
tv149 = -16						; size = 4
tv146 = -12						; size = 4
_lRet$1 = -8						; size = 4
_himc$ = -4						; size = 4
_bSend$ = 8						; size = 1
?ImeUi_FinalizeString@@YAX_N@Z PROC			; ImeUi_FinalizeString
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2190
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2193
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	je	SHORT $LN5@ImeUi_Fina
	movzx	ecx, BYTE PTR ?bProcessing@?1??ImeUi_FinalizeString@@YAX_N@Z@4_NA
	test	ecx, ecx
	je	SHORT $LN6@ImeUi_Fina
$LN5@ImeUi_Fina:
; Line 2194
	jmp	$LN7@ImeUi_Fina
$LN6@ImeUi_Fina:
; Line 2196
	mov	edx, DWORD PTR _g_hwndCurr
	push	edx
	call	_ImmGetContext@4
	mov	DWORD PTR _himc$[ebp], eax
; Line 2197
	cmp	DWORD PTR _himc$[ebp], 0
	jne	SHORT $LN4@ImeUi_Fina
; Line 2198
	jmp	$LN7@ImeUi_Fina
$LN4@ImeUi_Fina:
; Line 2199
	mov	BYTE PTR ?bProcessing@?1??ImeUi_FinalizeString@@YAX_N@Z@4_NA, 1
; Line 2201
	cmp	DWORD PTR _g_dwIMELevel, 2
	jne	$LN3@ImeUi_Fina
	movzx	eax, BYTE PTR _bSend$[ebp]
	test	eax, eax
	je	$LN3@ImeUi_Fina
; Line 2204
	mov	DWORD PTR tv146[ebp], OFFSET _g_szCompositionString
	mov	ecx, DWORD PTR tv146[ebp]
	add	ecx, 2
	mov	DWORD PTR tv149[ebp], ecx
$LL10@ImeUi_Fina:
	mov	edx, DWORD PTR tv146[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv152[ebp], ax
	add	DWORD PTR tv146[ebp], 2
	cmp	WORD PTR tv152[ebp], 0
	jne	SHORT $LL10@ImeUi_Fina
	mov	ecx, DWORD PTR tv146[ebp]
	sub	ecx, DWORD PTR tv149[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv76[ebp], ecx
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _lRet$1[ebp], edx
; Line 2205
	cmp	DWORD PTR _lRet$1[ebp], 2
	jge	SHORT $LN9@ImeUi_Fina
	mov	esi, esp
	push	2205					; 0000089dH
	push	OFFSET $SG154017
	push	OFFSET $SG154018
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@ImeUi_Fina:
; Line 2208
	mov	ecx, DWORD PTR _g_hklCurrent
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 1028				; 00000404H
	jne	SHORT $LN2@ImeUi_Fina
	cmp	DWORD PTR _lRet$1[ebp], 1
	jl	SHORT $LN2@ImeUi_Fina
	mov	eax, DWORD PTR _lRet$1[ebp]
	movzx	ecx, WORD PTR _g_szCompositionString[eax*2-2]
	cmp	ecx, 12288				; 00003000H
	jne	SHORT $LN2@ImeUi_Fina
; Line 2210
	mov	edx, DWORD PTR _lRet$1[ebp]
	sub	edx, 1
	mov	DWORD PTR _lRet$1[ebp], edx
$LN2@ImeUi_Fina:
; Line 2212
	mov	esi, esp
	call	DWORD PTR __SendCompString
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@ImeUi_Fina:
; Line 2215
	call	?InitCompStringData@@YAXXZ		; InitCompStringData
; Line 2217
	push	0
	push	4
	push	21					; 00000015H
	mov	eax, DWORD PTR _himc$[ebp]
	push	eax
	call	_ImmNotifyIME@16
; Line 2218
	movzx	ecx, BYTE PTR _g_bUILessMode
	test	ecx, ecx
	je	SHORT $LN1@ImeUi_Fina
; Line 2221
	push	2
	push	OFFSET $SG154027
	push	2
	push	OFFSET $SG154028
	push	9
	mov	edx, DWORD PTR _himc$[ebp]
	push	edx
	call	_ImmSetCompositionStringW@24
$LN1@ImeUi_Fina:
; Line 2224
	push	0
	push	0
	push	17					; 00000011H
	mov	eax, DWORD PTR _himc$[ebp]
	push	eax
	call	_ImmNotifyIME@16
; Line 2225
	mov	ecx, DWORD PTR _himc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _g_hwndCurr
	push	edx
	call	_ImmReleaseContext@8
; Line 2228
	call	?CloseCandidateList@@YAXXZ		; CloseCandidateList
; Line 2229
	mov	BYTE PTR ?bProcessing@?1??ImeUi_FinalizeString@@YAX_N@Z@4_NA, 0
$LN7@ImeUi_Fina:
; Line 2231
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ImeUi_FinalizeString@@YAX_N@Z ENDP			; ImeUi_FinalizeString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_IsEnabled@@YA_NXZ PROC				; ImeUi_IsEnabled
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 1683
	push	ebp
	mov	ebp, esp
; Line 1684
	mov	al, BYTE PTR _g_bImeEnabled
; Line 1685
	pop	ebp
	ret	0
?ImeUi_IsEnabled@@YA_NXZ ENDP				; ImeUi_IsEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -8						; size = 4
_himcDbg$1 = -4						; size = 4
_bEnable$ = 8						; size = 1
?ImeUi_EnableIme@@YAX_N@Z PROC				; ImeUi_EnableIme
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 1663
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1664
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	je	SHORT $LN4@ImeUi_Enab
	cmp	DWORD PTR _g_hwndCurr, 0
	jne	SHORT $LN5@ImeUi_Enab
$LN4@ImeUi_Enab:
; Line 1665
	jmp	SHORT $LN6@ImeUi_Enab
$LN5@ImeUi_Enab:
; Line 1666
	cmp	DWORD PTR _g_bDisableImeCompletely, 0
	je	SHORT $LN3@ImeUi_Enab
; Line 1667
	mov	BYTE PTR _bEnable$[ebp], 0
$LN3@ImeUi_Enab:
; Line 1669
	mov	ecx, DWORD PTR _g_hwndCurr
	cmp	ecx, DWORD PTR _g_hwndMain
	jne	SHORT $LN2@ImeUi_Enab
; Line 1672
	movzx	edx, BYTE PTR _bEnable$[ebp]
	test	edx, edx
	je	SHORT $LN8@ImeUi_Enab
	mov	eax, DWORD PTR _g_himcOrg
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN9@ImeUi_Enab
$LN8@ImeUi_Enab:
	mov	DWORD PTR tv72[ebp], 0
$LN9@ImeUi_Enab:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	mov	edx, DWORD PTR _g_hwndCurr
	push	edx
	call	_ImmAssociateContext@8
	mov	DWORD PTR _himcDbg$1[ebp], eax
$LN2@ImeUi_Enab:
; Line 1674
	mov	al, BYTE PTR _bEnable$[ebp]
	mov	BYTE PTR _g_bImeEnabled, al
; Line 1675
	movzx	ecx, BYTE PTR _bEnable$[ebp]
	test	ecx, ecx
	je	SHORT $LN1@ImeUi_Enab
; Line 1677
	call	?CheckToggleState@@YAXXZ		; CheckToggleState
$LN1@ImeUi_Enab:
; Line 1679
	movzx	edx, BYTE PTR _bEnable$[ebp]
	push	edx
	call	?EnableUiUpdates@CTsfUiLessMode@@SAX_N@Z ; CTsfUiLessMode::EnableUiUpdates
	add	esp, 4
$LN6@ImeUi_Enab:
; Line 1680
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ImeUi_EnableIme@@YAX_N@Z ENDP				; ImeUi_EnableIme
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_GetState@@YAKXZ PROC				; ImeUi_GetState
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 1655
	push	ebp
	mov	ebp, esp
; Line 1656
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	jne	SHORT $LN1@ImeUi_GetS
; Line 1657
	xor	eax, eax
	jmp	SHORT $LN2@ImeUi_GetS
$LN1@ImeUi_GetS:
; Line 1658
	call	?CheckToggleState@@YAXXZ		; CheckToggleState
; Line 1659
	mov	eax, DWORD PTR _g_dwState
$LN2@ImeUi_GetS:
; Line 1660
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?ImeUi_GetState@@YAKXZ ENDP				; ImeUi_GetState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv132 = -48						; size = 4
tv81 = -44						; size = 4
tv73 = -40						; size = 4
_dwSentMode$1 = -32					; size = 4
_dwConvMode$2 = -20					; size = 4
_dwId$3 = -12						; size = 4
_bOn$4 = -5						; size = 1
_himc$ = -4						; size = 4
_dwState$ = 8						; size = 4
?ImeUi_SetState@@YAXK@Z PROC				; ImeUi_SetState
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 1596
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1597
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	jne	SHORT $LN17@ImeUi_SetS
; Line 1598
	jmp	$LN18@ImeUi_SetS
$LN17@ImeUi_SetS:
; Line 1600
	cmp	DWORD PTR _dwState$[ebp], 1
	jne	SHORT $LN16@ImeUi_SetS
; Line 1602
	push	1
	call	?ImeUi_EnableIme@@YAX_N@Z		; ImeUi_EnableIme
	add	esp, 4
$LN16@ImeUi_SetS:
; Line 1604
	mov	ecx, DWORD PTR _g_hwndCurr
	push	ecx
	call	_ImmGetContext@4
	mov	DWORD PTR _himc$[ebp], eax
; Line 1605
	cmp	DWORD PTR _himc$[ebp], 0
	je	$LN18@ImeUi_SetS
; Line 1607
	cmp	DWORD PTR _g_bDisableImeCompletely, 0
	je	SHORT $LN14@ImeUi_SetS
; Line 1608
	mov	DWORD PTR _dwState$[ebp], 0
$LN14@ImeUi_SetS:
; Line 1610
	cmp	DWORD PTR _dwState$[ebp], 1
	jne	SHORT $LN20@ImeUi_SetS
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN21@ImeUi_SetS
$LN20@ImeUi_SetS:
	mov	DWORD PTR tv73[ebp], 0
$LN21@ImeUi_SetS:
	mov	dl, BYTE PTR tv73[ebp]
	mov	BYTE PTR _bOn$4[ebp], dl
; Line 1611
	mov	eax, DWORD PTR _g_hklCurrent
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	and	ecx, 1023				; 000003ffH
	movzx	edx, cx
	mov	DWORD PTR tv81[ebp], edx
	cmp	DWORD PTR tv81[ebp], 4
	je	SHORT $LN11@ImeUi_SetS
	cmp	DWORD PTR tv81[ebp], 17			; 00000011H
	je	$LN1@ImeUi_SetS
	cmp	DWORD PTR tv81[ebp], 18			; 00000012H
	je	$LN5@ImeUi_SetS
	jmp	$LN12@ImeUi_SetS
$LN11@ImeUi_SetS:
; Line 1617
	mov	DWORD PTR _dwConvMode$2[ebp], 0
	mov	DWORD PTR _dwSentMode$1[ebp], 0
; Line 1619
	movzx	eax, BYTE PTR _g_bChineseIME
	test	eax, eax
	je	SHORT $LN8@ImeUi_SetS
	cmp	DWORD PTR _dwState$[ebp], 0
	je	SHORT $LN9@ImeUi_SetS
$LN8@ImeUi_SetS:
	movzx	ecx, BYTE PTR _g_bChineseIME
	test	ecx, ecx
	jne	SHORT $LN10@ImeUi_SetS
	cmp	DWORD PTR _dwState$[ebp], 0
	je	SHORT $LN10@ImeUi_SetS
$LN9@ImeUi_SetS:
; Line 1621
	push	112					; 00000070H
	mov	edx, DWORD PTR _g_hwndCurr
	push	edx
	call	_ImmSimulateHotKey@8
; Line 1622
	call	?_PumpMessage@@YAXXZ			; _PumpMessage
$LN10@ImeUi_SetS:
; Line 1624
	cmp	DWORD PTR _dwState$[ebp], 0
	je	SHORT $LN7@ImeUi_SetS
; Line 1626
	push	0
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
	mov	DWORD PTR _dwId$3[ebp], eax
; Line 1627
	cmp	DWORD PTR _dwId$3[ebp], 0
	je	SHORT $LN7@ImeUi_SetS
; Line 1629
	lea	eax, DWORD PTR _dwSentMode$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _dwConvMode$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _himc$[ebp]
	push	edx
	call	_ImmGetConversionStatus@12
; Line 1632
	cmp	DWORD PTR _dwState$[ebp], 1
	jne	SHORT $LN22@ImeUi_SetS
	mov	eax, DWORD PTR _dwConvMode$2[ebp]
	or	eax, 1
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN23@ImeUi_SetS
$LN22@ImeUi_SetS:
	mov	ecx, DWORD PTR _dwConvMode$2[ebp]
	and	ecx, -2					; fffffffeH
	mov	DWORD PTR tv132[ebp], ecx
$LN23@ImeUi_SetS:
	mov	edx, DWORD PTR tv132[ebp]
	mov	DWORD PTR _dwConvMode$2[ebp], edx
; Line 1633
	mov	eax, DWORD PTR _dwSentMode$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwConvMode$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _himc$[ebp]
	push	edx
	call	_ImmSetConversionStatus@12
$LN7@ImeUi_SetS:
; Line 1636
	jmp	SHORT $LN12@ImeUi_SetS
$LN5@ImeUi_SetS:
; Line 1640
	movzx	eax, BYTE PTR _bOn$4[ebp]
	test	eax, eax
	je	SHORT $LN2@ImeUi_SetS
	cmp	DWORD PTR _g_dwState, 1
	jne	SHORT $LN3@ImeUi_SetS
$LN2@ImeUi_SetS:
	movzx	ecx, BYTE PTR _bOn$4[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@ImeUi_SetS
	cmp	DWORD PTR _g_dwState, 1
	jne	SHORT $LN4@ImeUi_SetS
$LN3@ImeUi_SetS:
; Line 1642
	push	82					; 00000052H
	mov	edx, DWORD PTR _g_hwndCurr
	push	edx
	call	_ImmSimulateHotKey@8
$LN4@ImeUi_SetS:
; Line 1644
	jmp	SHORT $LN12@ImeUi_SetS
$LN1@ImeUi_SetS:
; Line 1646
	movzx	eax, BYTE PTR _bOn$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _himc$[ebp]
	push	ecx
	call	_ImmSetOpenStatus@8
$LN12@ImeUi_SetS:
; Line 1649
	mov	edx, DWORD PTR _himc$[ebp]
	push	edx
	mov	eax, DWORD PTR _g_hwndCurr
	push	eax
	call	_ImmReleaseContext@8
; Line 1650
	call	?CheckToggleState@@YAXXZ		; CheckToggleState
$LN18@ImeUi_SetS:
; Line 1652
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@ImeUi_SetS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN27@ImeUi_SetS:
	DD	2
	DD	$LN26@ImeUi_SetS
$LN26@ImeUi_SetS:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN24@ImeUi_SetS
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN25@ImeUi_SetS
$LN25@ImeUi_SetS:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN24@ImeUi_SetS:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?ImeUi_SetState@@YAXK@Z ENDP				; ImeUi_SetState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bInsert$ = 8						; size = 1
?ImeUi_SetInsertMode@@YAX_N@Z PROC			; ImeUi_SetInsertMode
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2333
	push	ebp
	mov	ebp, esp
; Line 2334
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	jne	SHORT $LN1@ImeUi_SetI
; Line 2335
	jmp	SHORT $LN2@ImeUi_SetI
$LN1@ImeUi_SetI:
; Line 2336
	mov	cl, BYTE PTR _bInsert$[ebp]
	mov	BYTE PTR _g_bInsertMode, cl
$LN2@ImeUi_SetI:
; Line 2337
	pop	ebp
	ret	0
?ImeUi_SetInsertMode@@YAX_N@Z ENDP			; ImeUi_SetInsertMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv70 = -4						; size = 4
?ImeUi_GetCaretStatus@@YA_NXZ PROC			; ImeUi_GetCaretStatus
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2340
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2341
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	je	SHORT $LN3@ImeUi_GetC
	mov	ecx, 2
	imul	edx, ecx, 0
	movzx	eax, WORD PTR _g_szCompositionString[edx]
	test	eax, eax
	je	SHORT $LN3@ImeUi_GetC
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@ImeUi_GetC
$LN3@ImeUi_GetC:
	mov	DWORD PTR tv70[ebp], 1
$LN4@ImeUi_GetC:
	mov	al, BYTE PTR tv70[ebp]
; Line 2342
	mov	esp, ebp
	pop	ebp
	ret	0
?ImeUi_GetCaretStatus@@YA_NXZ ENDP			; ImeUi_GetCaretStatus
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pFont$ = 8						; size = 4
_color$ = 12						; size = 4
_prc$ = 16						; size = 4
?ImeUi_SetCompStringAppearance@@YAXPAVCImeUiFont_Base@@KPBUtagRECT@@@Z PROC ; ImeUi_SetCompStringAppearance
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 1579
	push	ebp
	mov	ebp, esp
; Line 1580
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	jne	SHORT $LN5@ImeUi_SetC
; Line 1581
	jmp	SHORT $LN6@ImeUi_SetC
$LN5@ImeUi_SetC:
; Line 1582
	mov	ecx, DWORD PTR _pFont$[ebp]
	mov	DWORD PTR _g_CaretInfo+8, ecx
; Line 1583
	mov	edx, DWORD PTR _prc$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _g_CaretInfo+20, eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _g_CaretInfo+24, ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _g_CaretInfo+28, eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _g_CaretInfo+32, ecx
; Line 1585
	cmp	DWORD PTR _gSkinIME+28, 0
	jne	SHORT $LN4@ImeUi_SetC
; Line 1586
	mov	edx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _g_CaretInfo+16, edx
; Line 1587
	jmp	SHORT $LN3@ImeUi_SetC
$LN4@ImeUi_SetC:
; Line 1588
	mov	eax, DWORD PTR _gSkinIME+28
	mov	DWORD PTR _g_CaretInfo+16, eax
$LN3@ImeUi_SetC:
; Line 1589
	cmp	DWORD PTR _gSkinIME+56, 0
	jne	SHORT $LN2@ImeUi_SetC
; Line 1590
	mov	ecx, DWORD PTR _color$[ebp]
	mov	DWORD PTR _g_CaretInfo+12, ecx
; Line 1591
	jmp	SHORT $LN6@ImeUi_SetC
$LN2@ImeUi_SetC:
; Line 1592
	mov	edx, DWORD PTR _gSkinIME+56
	mov	DWORD PTR _g_CaretInfo+12, edx
$LN6@ImeUi_SetC:
; Line 1593
	pop	ebp
	ret	0
?ImeUi_SetCompStringAppearance@@YAXPAVCImeUiFont_Base@@KPBUtagRECT@@@Z ENDP ; ImeUi_SetCompStringAppearance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?ImeUi_SetCaretPosition@@YAXII@Z PROC			; ImeUi_SetCaretPosition
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 1570
	push	ebp
	mov	ebp, esp
; Line 1571
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	jne	SHORT $LN1@ImeUi_SetC
; Line 1572
	jmp	SHORT $LN2@ImeUi_SetC
$LN1@ImeUi_SetC:
; Line 1573
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _g_CaretInfo, ecx
; Line 1574
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _g_CaretInfo+4, edx
$LN2@ImeUi_SetC:
; Line 1575
	pop	ebp
	ret	0
?ImeUi_SetCaretPosition@@YAXII@Z ENDP			; ImeUi_SetCaretPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bDrawCompAttr$ = 8					; size = 1
_bDrawOtherUi$ = 12					; size = 1
?ImeUi_RenderUI@@YAX_N0@Z PROC				; ImeUi_RenderUI
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 576
	push	ebp
	mov	ebp, esp
; Line 577
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	je	SHORT $LN6@ImeUi_Rend
	movzx	ecx, BYTE PTR _g_bImeEnabled
	test	ecx, ecx
	je	SHORT $LN6@ImeUi_Rend
	cmp	DWORD PTR _g_CaretInfo+8, 0
	jne	SHORT $LN7@ImeUi_Rend
$LN6@ImeUi_Rend:
; Line 578
	jmp	SHORT $LN8@ImeUi_Rend
$LN7@ImeUi_Rend:
; Line 579
	movzx	edx, BYTE PTR _bDrawCompAttr$[ebp]
	test	edx, edx
	jne	SHORT $LN5@ImeUi_Rend
	movzx	eax, BYTE PTR _bDrawOtherUi$[ebp]
	test	eax, eax
	jne	SHORT $LN5@ImeUi_Rend
; Line 580
	jmp	SHORT $LN8@ImeUi_Rend
$LN5@ImeUi_Rend:
; Line 581
	cmp	DWORD PTR _g_dwIMELevel, 2
	jne	SHORT $LN4@ImeUi_Rend
; Line 583
	movzx	ecx, BYTE PTR _bDrawOtherUi$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@ImeUi_Rend
; Line 584
	jmp	SHORT $LN8@ImeUi_Rend
$LN4@ImeUi_Rend:
; Line 587
	movzx	edx, BYTE PTR _bDrawOtherUi$[ebp]
	test	edx, edx
	je	SHORT $LN2@ImeUi_Rend
; Line 588
	call	?DrawImeIndicator@@YAXXZ		; DrawImeIndicator
$LN2@ImeUi_Rend:
; Line 590
	movzx	eax, BYTE PTR _bDrawCompAttr$[ebp]
	push	eax
	call	?DrawCompositionString@@YAX_N@Z		; DrawCompositionString
	add	esp, 4
; Line 592
	movzx	ecx, BYTE PTR _bDrawOtherUi$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@ImeUi_Rend
; Line 593
	call	?DrawCandidateList@@YAXXZ		; DrawCandidateList
$LN8@ImeUi_Rend:
; Line 594
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?ImeUi_RenderUI@@YAX_N0@Z ENDP				; ImeUi_RenderUI
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?ImeUi_SetScreenDimension@@YAXII@Z PROC			; ImeUi_SetScreenDimension
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2345
	push	ebp
	mov	ebp, esp
; Line 2346
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	jne	SHORT $LN1@ImeUi_SetS
; Line 2347
	jmp	SHORT $LN2@ImeUi_SetS
$LN1@ImeUi_SetS:
; Line 2348
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _g_screenWidth, ecx
; Line 2349
	mov	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _g_screenHeight, edx
$LN2@ImeUi_SetS:
; Line 2350
	pop	ebp
	ret	0
?ImeUi_SetScreenDimension@@YAXII@Z ENDP			; ImeUi_SetScreenDimension
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv419 = -772						; size = 4
tv358 = -768						; size = 4
tv287 = -764						; size = 4
tv278 = -760						; size = 4
tv262 = -756						; size = 4
tv635 = -750						; size = 2
tv632 = -748						; size = 4
tv629 = -744						; size = 4
tv217 = -740						; size = 4
tv209 = -736						; size = 4
tv586 = -730						; size = 2
tv583 = -728						; size = 4
tv580 = -724						; size = 4
tv193 = -720						; size = 4
tv561 = -714						; size = 2
tv558 = -712						; size = 4
tv555 = -708						; size = 4
tv159 = -704						; size = 4
tv525 = -698						; size = 2
tv522 = -696						; size = 4
tv519 = -692						; size = 4
tv136 = -688						; size = 4
tv500 = -682						; size = 2
tv497 = -680						; size = 4
tv494 = -676						; size = 4
tv84 = -672						; size = 4
tv470 = -666						; size = 2
tv467 = -664						; size = 4
tv464 = -660						; size = 4
tv67 = -656						; size = 4
$T1 = -652						; size = 4
$T2 = -648						; size = 4
$T3 = -644						; size = 4
$T4 = -640						; size = 4
$T5 = -636						; size = 4
$T6 = -632						; size = 4
_dwId$7 = -628						; size = 4
_j$8 = -624						; size = 4
_i$9 = -620						; size = 4
_uLen$10 = -616						; size = 4
_i$11 = -612						; size = 4
_cChars$12 = -608					; size = 4
_maxCandChar$13 = -604					; size = 4
_startOfPage$14 = -600					; size = 4
_dwBufLen$15 = -596					; size = 4
_dwIndex$16 = -592					; size = 4
_lpCandList$17 = -584					; size = 4
_dwFlag$18 = -576					; size = 4
_dwSentMode$19 = -568					; size = 4
_dwConvMode$20 = -556					; size = 4
_pszTmp$21 = -548					; size = 4
_chars$22 = -544					; size = 4
_i$23 = -540						; size = 4
_szCompStr$24 = -532					; size = 512
_lRet$25 = -16						; size = 4
_len$ = -12						; size = 4
_himc$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
_trapped$ = 24						; size = 4
?ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z PROC	; ImeUi_ProcessMessage
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 1231
	push	ebp
	mov	ebp, esp
	sub	esp, 772				; 00000304H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-772]
	mov	ecx, 193				; 000000c1H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1236
	mov	eax, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [eax], 0
; Line 1237
	movzx	ecx, BYTE PTR _g_bInitialized
	test	ecx, ecx
	je	SHORT $LN75@ImeUi_Proc
	cmp	DWORD PTR _g_bDisableImeCompletely, 0
	je	SHORT $LN76@ImeUi_Proc
$LN75@ImeUi_Proc:
; Line 1239
	xor	eax, eax
	jmp	$LN78@ImeUi_Proc
$LN76@ImeUi_Proc:
; Line 1242
	mov	edx, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv67[ebp], edx
	cmp	DWORD PTR tv67[ebp], 269		; 0000010dH
	ja	SHORT $LN94@ImeUi_Proc
	cmp	DWORD PTR tv67[ebp], 269		; 0000010dH
	je	$LN70@ImeUi_Proc
	mov	eax, DWORD PTR tv67[ebp]
	sub	eax, 81					; 00000051H
	mov	DWORD PTR tv67[ebp], eax
	cmp	DWORD PTR tv67[ebp], 180		; 000000b4H
	ja	$LN73@ImeUi_Proc
	mov	ecx, DWORD PTR tv67[ebp]
	movzx	edx, BYTE PTR $LN96@ImeUi_Proc[ecx]
	jmp	DWORD PTR $LN110@ImeUi_Proc[edx*4]
$LN94@ImeUi_Proc:
	cmp	DWORD PTR tv67[ebp], 641		; 00000281H
	ja	SHORT $LN95@ImeUi_Proc
	cmp	DWORD PTR tv67[ebp], 641		; 00000281H
	je	SHORT $LN71@ImeUi_Proc
	cmp	DWORD PTR tv67[ebp], 270		; 0000010eH
	je	$LN51@ImeUi_Proc
	cmp	DWORD PTR tv67[ebp], 271		; 0000010fH
	je	SHORT $LN69@ImeUi_Proc
	jmp	$LN73@ImeUi_Proc
$LN95@ImeUi_Proc:
	cmp	DWORD PTR tv67[ebp], 642		; 00000282H
	je	$LN50@ImeUi_Proc
	jmp	$LN73@ImeUi_Proc
$LN72@ImeUi_Proc:
; Line 1248
	call	?OnInputLangChange@@YAXXZ		; OnInputLangChange
; Line 1249
	jmp	$LN73@ImeUi_Proc
$LN71@ImeUi_Proc:
; Line 1256
	mov	eax, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1257
	jmp	$LN73@ImeUi_Proc
$LN70@ImeUi_Proc:
; Line 1260
	call	?InitCompStringData@@YAXXZ		; InitCompStringData
; Line 1261
	mov	ecx, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [ecx], 1
; Line 1262
	jmp	$LN73@ImeUi_Proc
$LN69@ImeUi_Proc:
; Line 1269
	mov	edx, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [edx], 1
; Line 1270
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	_ImmGetContext@4
	mov	DWORD PTR _himc$[ebp], eax
; Line 1271
	cmp	DWORD PTR _himc$[ebp], 0
	jne	SHORT $LN68@ImeUi_Proc
; Line 1273
	jmp	$LN73@ImeUi_Proc
$LN68@ImeUi_Proc:
; Line 1277
	mov	ecx, DWORD PTR _lParam$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 2048				; 00000800H
	je	$LN67@ImeUi_Proc
; Line 1280
	mov	esi, esp
	push	256					; 00000100H
	lea	eax, DWORD PTR _szCompStr$24[ebp]
	push	eax
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _himc$[ebp]
	push	ecx
	call	DWORD PTR __ImmGetCompositionString
	cmp	esi, esp
	call	__RTC_CheckEsp
	shr	eax, 1
	mov	DWORD PTR _lRet$25[ebp], eax
; Line 1281
	mov	edx, DWORD PTR _lRet$25[ebp]
	shl	edx, 1
	mov	DWORD PTR $T6[ebp], edx
	cmp	DWORD PTR $T6[ebp], 512			; 00000200H
	jae	SHORT $LN79@ImeUi_Proc
	jmp	SHORT $LN80@ImeUi_Proc
$LN79@ImeUi_Proc:
	call	___report_rangecheckfailure
$LN80@ImeUi_Proc:
	xor	eax, eax
	mov	ecx, DWORD PTR $T6[ebp]
	mov	WORD PTR _szCompStr$24[ebp+ecx], ax
; Line 1282
	lea	edx, DWORD PTR _szCompStr$24[ebp]
	mov	DWORD PTR tv464[ebp], edx
	mov	eax, DWORD PTR tv464[ebp]
	add	eax, 2
	mov	DWORD PTR tv467[ebp], eax
$LL97@ImeUi_Proc:
	mov	ecx, DWORD PTR tv464[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR tv470[ebp], dx
	add	DWORD PTR tv464[ebp], 2
	cmp	WORD PTR tv470[ebp], 0
	jne	SHORT $LL97@ImeUi_Proc
	mov	eax, DWORD PTR tv464[ebp]
	sub	eax, DWORD PTR tv467[ebp]
	sar	eax, 1
	mov	DWORD PTR tv84[ebp], eax
	mov	ecx, DWORD PTR tv84[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _g_hwndCurr
	push	edx
	call	?CancelCompString@@YAXPAUHWND__@@_NH@Z	; CancelCompString
	add	esp, 12					; 0000000cH
; Line 1283
	mov	esi, esp
	lea	eax, DWORD PTR _szCompStr$24[ebp]
	push	eax
	push	256					; 00000100H
	push	OFFSET _g_szCompositionString
	call	DWORD PTR __imp__wcscpy_s
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1284
	mov	esi, esp
	call	DWORD PTR __SendCompString
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1285
	call	?InitCompStringData@@YAXXZ		; InitCompStringData
$LN67@ImeUi_Proc:
; Line 1290
	mov	ecx, DWORD PTR _lParam$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 8
	je	$LN66@ImeUi_Proc
; Line 1295
	mov	esi, esp
	push	256					; 00000100H
	lea	eax, DWORD PTR _szCompStr$24[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _himc$[ebp]
	push	ecx
	call	DWORD PTR __ImmGetCompositionString
	cmp	esi, esp
	call	__RTC_CheckEsp
	shr	eax, 1
	mov	DWORD PTR _lRet$25[ebp], eax
; Line 1296
	mov	edx, DWORD PTR _lRet$25[ebp]
	shl	edx, 1
	mov	DWORD PTR $T5[ebp], edx
	cmp	DWORD PTR $T5[ebp], 512			; 00000200H
	jae	SHORT $LN81@ImeUi_Proc
	jmp	SHORT $LN82@ImeUi_Proc
$LN81@ImeUi_Proc:
	call	___report_rangecheckfailure
$LN82@ImeUi_Proc:
	xor	eax, eax
	mov	ecx, DWORD PTR $T5[ebp]
	mov	WORD PTR _szCompStr$24[ebp+ecx], ax
; Line 1300
	lea	edx, DWORD PTR _szCompStr$24[ebp]
	mov	DWORD PTR tv494[ebp], edx
	mov	eax, DWORD PTR tv494[ebp]
	add	eax, 2
	mov	DWORD PTR tv497[ebp], eax
$LL98@ImeUi_Proc:
	mov	ecx, DWORD PTR tv494[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR tv500[ebp], dx
	add	DWORD PTR tv494[ebp], 2
	cmp	WORD PTR tv500[ebp], 0
	jne	SHORT $LL98@ImeUi_Proc
	mov	eax, DWORD PTR tv494[ebp]
	sub	eax, DWORD PTR tv497[ebp]
	sar	eax, 1
	mov	DWORD PTR tv136[ebp], eax
	mov	ecx, DWORD PTR tv136[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _g_hwndCurr
	push	edx
	call	?CancelCompString@@YAXPAUHWND__@@_NH@Z	; CancelCompString
	add	esp, 12					; 0000000cH
; Line 1302
	mov	esi, esp
	lea	eax, DWORD PTR _szCompStr$24[ebp]
	push	eax
	push	256					; 00000100H
	push	OFFSET _g_szCompositionString
	call	DWORD PTR __imp__wcscpy_s
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1304
	mov	esi, esp
	push	256					; 00000100H
	push	OFFSET _g_szCompAttrString
	push	16					; 00000010H
	mov	ecx, DWORD PTR _himc$[ebp]
	push	ecx
	call	DWORD PTR __ImmGetCompositionString
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _lRet$25[ebp], eax
; Line 1305
	mov	edx, DWORD PTR _lRet$25[ebp]
	mov	DWORD PTR $T4[ebp], edx
	cmp	DWORD PTR $T4[ebp], 256			; 00000100H
	jae	SHORT $LN83@ImeUi_Proc
	jmp	SHORT $LN84@ImeUi_Proc
$LN83@ImeUi_Proc:
	call	___report_rangecheckfailure
$LN84@ImeUi_Proc:
	mov	eax, DWORD PTR $T4[ebp]
	mov	BYTE PTR _g_szCompAttrString[eax], 0
; Line 1307
	mov	ecx, DWORD PTR _g_hklCurrent
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 1028				; 00000404H
	jne	$LN65@ImeUi_Proc
	push	0
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
	test	eax, eax
	jne	$LN65@ImeUi_Proc
; Line 1309
	mov	DWORD PTR tv519[ebp], OFFSET _g_szCompositionString
	mov	eax, DWORD PTR tv519[ebp]
	add	eax, 2
	mov	DWORD PTR tv522[ebp], eax
$LL99@ImeUi_Proc:
	mov	ecx, DWORD PTR tv519[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR tv525[ebp], dx
	add	DWORD PTR tv519[ebp], 2
	cmp	WORD PTR tv525[ebp], 0
	jne	SHORT $LL99@ImeUi_Proc
	mov	eax, DWORD PTR tv519[ebp]
	sub	eax, DWORD PTR tv522[ebp]
	sar	eax, 1
	mov	DWORD PTR tv159[ebp], eax
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR _chars$22[ebp], ecx
; Line 1310
	cmp	DWORD PTR _chars$22[ebp], 0
	je	$LN64@ImeUi_Proc
; Line 1312
	mov	DWORD PTR _g_dwCount, 4
; Line 1313
	mov	DWORD PTR _g_dwSelection, -1
; Line 1315
	mov	DWORD PTR _i$23[ebp], 3
	jmp	SHORT $LN63@ImeUi_Proc
$LN62@ImeUi_Proc:
	mov	edx, DWORD PTR _i$23[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$23[ebp], edx
$LN63@ImeUi_Proc:
	cmp	DWORD PTR _i$23[ebp], 0
	jl	SHORT $LN61@ImeUi_Proc
; Line 1317
	mov	eax, DWORD PTR _chars$22[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$23[ebp], eax
	jle	SHORT $LN60@ImeUi_Proc
; Line 1318
	mov	ecx, DWORD PTR _i$23[ebp]
	shl	ecx, 9
	mov	edx, 2
	imul	eax, edx, 0
	xor	edx, edx
	mov	WORD PTR _g_szCandidate[ecx+eax], dx
; Line 1319
	jmp	SHORT $LN59@ImeUi_Proc
$LN60@ImeUi_Proc:
; Line 1321
	mov	eax, DWORD PTR _i$23[ebp]
	shl	eax, 9
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _i$23[ebp]
	mov	cx, WORD PTR _g_szCompositionString[ecx*2]
	mov	WORD PTR _g_szCandidate[eax+edx], cx
; Line 1322
	mov	edx, DWORD PTR _i$23[ebp]
	shl	edx, 9
	mov	eax, 2
	shl	eax, 0
	xor	ecx, ecx
	mov	WORD PTR _g_szCandidate[edx+eax], cx
$LN59@ImeUi_Proc:
; Line 1324
	jmp	$LN62@ImeUi_Proc
$LN61@ImeUi_Proc:
; Line 1325
	mov	DWORD PTR _g_uCandPageSize, 10		; 0000000aH
; Line 1326
	xor	edx, edx
	mov	DWORD PTR _g_szCompositionString, edx
	mov	DWORD PTR _g_szCompositionString+4, edx
; Line 1327
	mov	BYTE PTR _g_bReadingWindow, 1
; Line 1328
	push	0
	call	?GetReadingWindowOrientation@@YAXK@Z	; GetReadingWindowOrientation
	add	esp, 4
; Line 1329
	movzx	eax, BYTE PTR _g_bHorizontalReading
	test	eax, eax
	je	$LN58@ImeUi_Proc
; Line 1331
	mov	DWORD PTR _g_iReadingError, -1
; Line 1332
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 64			; 00000040H
	jae	SHORT $LN85@ImeUi_Proc
	jmp	SHORT $LN86@ImeUi_Proc
$LN85@ImeUi_Proc:
	call	___report_rangecheckfailure
$LN86@ImeUi_Proc:
	xor	eax, eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	WORD PTR _g_szReadingString[ecx], ax
; Line 1333
	mov	DWORD PTR _i$23[ebp], 0
	jmp	SHORT $LN57@ImeUi_Proc
$LN56@ImeUi_Proc:
	mov	edx, DWORD PTR _i$23[ebp]
	add	edx, 1
	mov	DWORD PTR _i$23[ebp], edx
$LN57@ImeUi_Proc:
	mov	eax, DWORD PTR _i$23[ebp]
	cmp	eax, DWORD PTR _g_dwCount
	jge	$LN58@ImeUi_Proc
; Line 1335
	mov	ecx, DWORD PTR _g_dwSelection
	cmp	ecx, DWORD PTR _i$23[ebp]
	jne	SHORT $LN54@ImeUi_Proc
; Line 1336
	mov	DWORD PTR tv555[ebp], OFFSET _g_szReadingString
	mov	edx, DWORD PTR tv555[ebp]
	add	edx, 2
	mov	DWORD PTR tv558[ebp], edx
$LL100@ImeUi_Proc:
	mov	eax, DWORD PTR tv555[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR tv561[ebp], cx
	add	DWORD PTR tv555[ebp], 2
	cmp	WORD PTR tv561[ebp], 0
	jne	SHORT $LL100@ImeUi_Proc
	mov	edx, DWORD PTR tv555[ebp]
	sub	edx, DWORD PTR tv558[ebp]
	sar	edx, 1
	mov	DWORD PTR tv193[ebp], edx
	mov	eax, DWORD PTR tv193[ebp]
	mov	DWORD PTR _g_iReadingError, eax
$LN54@ImeUi_Proc:
; Line 1337
	mov	ecx, DWORD PTR _i$23[ebp]
	shl	ecx, 9
	add	ecx, OFFSET _g_szCandidate
	mov	DWORD PTR _pszTmp$21[ebp], ecx
; Line 1338
	mov	esi, esp
	mov	edx, DWORD PTR _pszTmp$21[ebp]
	push	edx
	push	32					; 00000020H
	push	OFFSET _g_szReadingString
	call	DWORD PTR __imp__wcscat_s
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1339
	jmp	$LN56@ImeUi_Proc
$LN58@ImeUi_Proc:
; Line 1342
	jmp	SHORT $LN65@ImeUi_Proc
$LN64@ImeUi_Proc:
; Line 1343
	mov	DWORD PTR _g_dwCount, 0
$LN65@ImeUi_Proc:
; Line 1347
	mov	esi, esp
	push	0
	push	0
	push	128					; 00000080H
	mov	eax, DWORD PTR _himc$[ebp]
	push	eax
	call	DWORD PTR __ImmGetCompositionString
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _g_IMECursorBytes, eax
; Line 1348
	mov	ecx, DWORD PTR _g_IMECursorBytes
	mov	DWORD PTR _g_IMECursorChars, ecx
; Line 1350
	cmp	DWORD PTR _g_dwIMELevel, 3
	jne	SHORT $LN66@ImeUi_Proc
; Line 1353
	mov	esi, esp
	call	DWORD PTR __SendCompString
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1355
	mov	edx, DWORD PTR _g_IMECursorBytes
	lea	eax, DWORD PTR _g_szCompositionString[edx*2]
	mov	DWORD PTR tv580[ebp], eax
	mov	ecx, DWORD PTR tv580[ebp]
	add	ecx, 2
	mov	DWORD PTR tv583[ebp], ecx
$LL101@ImeUi_Proc:
	mov	edx, DWORD PTR tv580[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR tv586[ebp], ax
	add	DWORD PTR tv580[ebp], 2
	cmp	WORD PTR tv586[ebp], 0
	jne	SHORT $LL101@ImeUi_Proc
	mov	ecx, DWORD PTR tv580[ebp]
	sub	ecx, DWORD PTR tv583[ebp]
	sar	ecx, 1
	mov	DWORD PTR tv209[ebp], ecx
	mov	edx, DWORD PTR tv209[ebp]
	mov	DWORD PTR _len$[ebp], edx
; Line 1356
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	push	37					; 00000025H
	call	?SendControlKeys@@YAXII@Z		; SendControlKeys
	add	esp, 8
$LN66@ImeUi_Proc:
; Line 1359
	mov	ecx, DWORD PTR _himc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	call	_ImmReleaseContext@8
; Line 1361
	jmp	$LN73@ImeUi_Proc
$LN51@ImeUi_Proc:
; Line 1364
	push	0
	push	1
	mov	eax, DWORD PTR _g_hwndCurr
	push	eax
	call	?CancelCompString@@YAXPAUHWND__@@_NH@Z	; CancelCompString
	add	esp, 12					; 0000000cH
; Line 1365
	call	?InitCompStringData@@YAXXZ		; InitCompStringData
; Line 1366
	jmp	$LN73@ImeUi_Proc
$LN50@ImeUi_Proc:
; Line 1369
	mov	ecx, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv217[ebp], ecx
	mov	edx, DWORD PTR tv217[ebp]
	sub	edx, 3
	mov	DWORD PTR tv217[ebp], edx
	cmp	DWORD PTR tv217[ebp], 11		; 0000000bH
	ja	$LN13@ImeUi_Proc
	mov	eax, DWORD PTR tv217[ebp]
	movzx	ecx, BYTE PTR $LN102@ImeUi_Proc[eax]
	jmp	DWORD PTR $LN111@ImeUi_Proc[ecx*4]
$LN47@ImeUi_Proc:
; Line 1375
	mov	edx, DWORD PTR _g_hklCurrent
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cmp	eax, 1028				; 00000404H
	jne	SHORT $LN46@ImeUi_Proc
	movzx	ecx, BYTE PTR ?bNoReentrance@?CL@??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4_NA
	test	ecx, ecx
	jne	SHORT $LN46@ImeUi_Proc
; Line 1377
	mov	BYTE PTR ?bNoReentrance@?CL@??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4_NA, 1
; Line 1379
	lea	edx, DWORD PTR _dwSentMode$19[ebp]
	push	edx
	lea	eax, DWORD PTR _dwConvMode$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _g_himcOrg
	push	ecx
	call	_ImmGetConversionStatus@12
; Line 1380
	mov	DWORD PTR _dwFlag$18[ebp], 1152		; 00000480H
; Line 1381
	mov	edx, DWORD PTR _dwConvMode$20[ebp]
	and	edx, 1152				; 00000480H
	je	SHORT $LN46@ImeUi_Proc
; Line 1382
	mov	eax, DWORD PTR _dwSentMode$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwConvMode$20[ebp]
	and	ecx, -1153				; fffffb7fH
	push	ecx
	mov	edx, DWORD PTR _g_himcOrg
	push	edx
	call	_ImmSetConversionStatus@12
$LN46@ImeUi_Proc:
; Line 1384
	mov	BYTE PTR ?bNoReentrance@?CL@??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4_NA, 0
$LN44@ImeUi_Proc:
; Line 1388
	movzx	eax, BYTE PTR _g_bUILessMode
	test	eax, eax
	je	SHORT $LN43@ImeUi_Proc
; Line 1389
	jmp	$LN48@ImeUi_Proc
$LN43@ImeUi_Proc:
; Line 1390
	call	?CheckToggleState@@YAXXZ		; CheckToggleState
; Line 1391
	jmp	$LN48@ImeUi_Proc
$LN42@ImeUi_Proc:
; Line 1395
	movzx	ecx, BYTE PTR _g_bUILessMode
	test	ecx, ecx
	je	SHORT $LN41@ImeUi_Proc
; Line 1397
	jmp	$LN48@ImeUi_Proc
$LN41@ImeUi_Proc:
; Line 1400
	mov	BYTE PTR _g_bCandList, 1
; Line 1401
	mov	edx, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [edx], 1
; Line 1402
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	_ImmGetContext@4
	mov	DWORD PTR _himc$[ebp], eax
; Line 1403
	cmp	DWORD PTR _himc$[ebp], 0
	jne	SHORT $LN40@ImeUi_Proc
; Line 1404
	jmp	$LN48@ImeUi_Proc
$LN40@ImeUi_Proc:
; Line 1409
	mov	BYTE PTR _g_bReadingWindow, 0
; Line 1410
	mov	DWORD PTR _dwIndex$16[ebp], 0
; Line 1411
	mov	esi, esp
	lea	ecx, DWORD PTR _lpCandList$17[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwIndex$16[ebp]
	push	edx
	mov	eax, DWORD PTR _himc$[ebp]
	push	eax
	call	DWORD PTR __GetCandidateList
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dwBufLen$15[ebp], eax
; Line 1413
	cmp	DWORD PTR _dwBufLen$15[ebp], 0
	je	$LN39@ImeUi_Proc
; Line 1415
	mov	ecx, DWORD PTR _lpCandList$17[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _g_dwSelection, edx
; Line 1416
	mov	eax, DWORD PTR _lpCandList$17[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _g_dwCount, ecx
; Line 1418
	mov	DWORD PTR _startOfPage$14[ebp], 0
; Line 1419
	mov	edx, DWORD PTR _g_hklCurrent
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cmp	eax, 2052				; 00000804H
	jne	$LN38@ImeUi_Proc
	push	0
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
	test	eax, eax
	je	$LN38@ImeUi_Proc
; Line 1423
	mov	DWORD PTR _maxCandChar$13[ebp], 18	; 00000012H
; Line 1424
	mov	DWORD PTR _cChars$12[ebp], 0
; Line 1426
	mov	DWORD PTR _i$11[ebp], 0
	jmp	SHORT $LN37@ImeUi_Proc
$LN36@ImeUi_Proc:
	mov	ecx, DWORD PTR _i$11[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$11[ebp], ecx
$LN37@ImeUi_Proc:
	mov	edx, DWORD PTR _i$11[ebp]
	cmp	edx, DWORD PTR _g_dwCount
	jae	$LN35@ImeUi_Proc
; Line 1430
	mov	eax, DWORD PTR _i$11[ebp]
	mov	ecx, DWORD PTR _lpCandList$17[ebp]
	mov	edx, DWORD PTR _lpCandList$17[ebp]
	add	edx, DWORD PTR [ecx+eax*4+24]
	mov	DWORD PTR tv629[ebp], edx
	mov	eax, DWORD PTR tv629[ebp]
	add	eax, 2
	mov	DWORD PTR tv632[ebp], eax
$LL103@ImeUi_Proc:
	mov	ecx, DWORD PTR tv629[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR tv635[ebp], dx
	add	DWORD PTR tv629[ebp], 2
	cmp	WORD PTR tv635[ebp], 0
	jne	SHORT $LL103@ImeUi_Proc
	mov	eax, DWORD PTR tv629[ebp]
	sub	eax, DWORD PTR tv632[ebp]
	sar	eax, 1
	mov	DWORD PTR tv262[ebp], eax
	mov	ecx, DWORD PTR tv262[ebp]
	add	ecx, 1
	mov	DWORD PTR _uLen$10[ebp], ecx
; Line 1431
	mov	edx, DWORD PTR _uLen$10[ebp]
	add	edx, DWORD PTR _cChars$12[ebp]
	cmp	edx, 18					; 00000012H
	jbe	SHORT $LN34@ImeUi_Proc
; Line 1433
	mov	eax, DWORD PTR _i$11[ebp]
	cmp	eax, DWORD PTR _g_dwSelection
	jbe	SHORT $LN33@ImeUi_Proc
; Line 1435
	jmp	SHORT $LN35@ImeUi_Proc
$LN33@ImeUi_Proc:
; Line 1437
	mov	ecx, DWORD PTR _i$11[ebp]
	mov	DWORD PTR _startOfPage$14[ebp], ecx
; Line 1438
	mov	edx, DWORD PTR _uLen$10[ebp]
	mov	DWORD PTR _cChars$12[ebp], edx
; Line 1440
	jmp	SHORT $LN32@ImeUi_Proc
$LN34@ImeUi_Proc:
; Line 1442
	mov	eax, DWORD PTR _cChars$12[ebp]
	add	eax, DWORD PTR _uLen$10[ebp]
	mov	DWORD PTR _cChars$12[ebp], eax
$LN32@ImeUi_Proc:
; Line 1444
	jmp	$LN36@ImeUi_Proc
$LN35@ImeUi_Proc:
; Line 1445
	mov	ecx, DWORD PTR _i$11[ebp]
	sub	ecx, DWORD PTR _startOfPage$14[ebp]
	mov	DWORD PTR _g_uCandPageSize, ecx
; Line 1447
	jmp	SHORT $LN31@ImeUi_Proc
$LN38@ImeUi_Proc:
; Line 1449
	mov	DWORD PTR $T2[ebp], 10			; 0000000aH
	mov	edx, DWORD PTR _lpCandList$17[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _g_uCandPageSize, eax
; Line 1451
	movzx	ecx, BYTE PTR _g_bUILessMode
	test	ecx, ecx
	je	SHORT $LN87@ImeUi_Proc
	mov	edx, DWORD PTR _lpCandList$17[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR tv278[ebp], eax
	jmp	SHORT $LN88@ImeUi_Proc
$LN87@ImeUi_Proc:
	mov	eax, DWORD PTR _g_dwSelection
	xor	edx, edx
	div	DWORD PTR _g_uCandPageSize
	imul	eax, DWORD PTR _g_uCandPageSize
	mov	DWORD PTR tv278[ebp], eax
$LN88@ImeUi_Proc:
	mov	ecx, DWORD PTR tv278[ebp]
	mov	DWORD PTR _startOfPage$14[ebp], ecx
$LN31@ImeUi_Proc:
; Line 1455
	mov	edx, DWORD PTR _g_hklCurrent
	and	edx, 65535				; 0000ffffH
	movzx	eax, dx
	cmp	eax, 2052				; 00000804H
	jne	SHORT $LN89@ImeUi_Proc
	push	0
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN89@ImeUi_Proc
	mov	DWORD PTR tv287[ebp], -1
	jmp	SHORT $LN90@ImeUi_Proc
$LN89@ImeUi_Proc:
	mov	ecx, DWORD PTR _g_dwSelection
	sub	ecx, DWORD PTR _startOfPage$14[ebp]
	mov	DWORD PTR tv287[ebp], ecx
$LN90@ImeUi_Proc:
	mov	edx, DWORD PTR tv287[ebp]
	mov	DWORD PTR _g_dwSelection, edx
; Line 1457
	push	5120					; 00001400H
	push	0
	push	OFFSET _g_szCandidate
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1458
	mov	eax, DWORD PTR _startOfPage$14[ebp]
	mov	DWORD PTR _i$9[ebp], eax
	mov	DWORD PTR _j$8[ebp], 0
; Line 1459
	jmp	SHORT $LN30@ImeUi_Proc
$LN29@ImeUi_Proc:
; Line 1460
	mov	ecx, DWORD PTR _i$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$9[ebp], ecx
	mov	edx, DWORD PTR _j$8[ebp]
	add	edx, 1
	mov	DWORD PTR _j$8[ebp], edx
$LN30@ImeUi_Proc:
	mov	eax, DWORD PTR _lpCandList$17[ebp]
	mov	ecx, DWORD PTR _i$9[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN28@ImeUi_Proc
	mov	edx, DWORD PTR _j$8[ebp]
	cmp	edx, DWORD PTR _g_uCandPageSize
	jae	SHORT $LN28@ImeUi_Proc
; Line 1463
	mov	eax, DWORD PTR _i$9[ebp]
	mov	ecx, DWORD PTR _lpCandList$17[ebp]
	mov	edx, DWORD PTR _lpCandList$17[ebp]
	add	edx, DWORD PTR [ecx+eax*4+24]
	push	edx
	mov	eax, DWORD PTR _j$8[ebp]
	push	eax
	call	?ComposeCandidateLine@@YAXHPB_W@Z	; ComposeCandidateLine
	add	esp, 8
; Line 1464
	jmp	SHORT $LN29@ImeUi_Proc
$LN28@ImeUi_Proc:
; Line 1465
	mov	esi, esp
	mov	ecx, DWORD PTR _lpCandList$17[ebp]
	push	ecx
	call	DWORD PTR ?ImeUiCallback_Free@@3P6AXPAX@ZA ; ImeUiCallback_Free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1466
	mov	edx, DWORD PTR _himc$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	_ImmReleaseContext@8
; Line 1470
	mov	ecx, DWORD PTR _g_hklCurrent
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	and	edx, 1023				; 000003ffH
	movzx	eax, dx
	cmp	eax, 18					; 00000012H
	je	SHORT $LN26@ImeUi_Proc
	mov	ecx, DWORD PTR _g_hklCurrent
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 1028				; 00000404H
	jne	SHORT $LN39@ImeUi_Proc
	push	0
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN39@ImeUi_Proc
$LN26@ImeUi_Proc:
; Line 1471
	mov	DWORD PTR _g_dwSelection, -1
$LN39@ImeUi_Proc:
; Line 1473
	jmp	$LN48@ImeUi_Proc
$LN25@ImeUi_Proc:
; Line 1477
	movzx	eax, BYTE PTR _g_bUILessMode
	test	eax, eax
	je	SHORT $LN24@ImeUi_Proc
; Line 1479
	jmp	$LN48@ImeUi_Proc
$LN24@ImeUi_Proc:
; Line 1481
	call	?CloseCandidateList@@YAXXZ		; CloseCandidateList
; Line 1482
	mov	ecx, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [ecx], 1
; Line 1483
	jmp	$LN48@ImeUi_Proc
$LN23@ImeUi_Proc:
; Line 1488
	movzx	edx, BYTE PTR _g_bCandList
	test	edx, edx
	jne	SHORT $LN22@ImeUi_Proc
; Line 1490
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	call	?GetReadingString@@YAXPAUHWND__@@@Z	; GetReadingString
	add	esp, 4
$LN22@ImeUi_Proc:
; Line 1493
	push	0
	call	?GetImeId@@YAKI@Z			; GetImeId
	add	esp, 4
	mov	DWORD PTR _dwId$7[ebp], eax
; Line 1494
	mov	ecx, DWORD PTR _dwId$7[ebp]
	mov	DWORD PTR tv358[ebp], ecx
	cmp	DWORD PTR tv358[ebp], 83887108		; 05000404H
	ja	SHORT $LN91@ImeUi_Proc
	cmp	DWORD PTR tv358[ebp], 83887108		; 05000404H
	je	$LN16@ImeUi_Proc
	cmp	DWORD PTR tv358[ebp], 67241988		; 04020804H
	ja	SHORT $LN92@ImeUi_Proc
	cmp	DWORD PTR tv358[ebp], 67241988		; 04020804H
	je	SHORT $LN19@ImeUi_Proc
	cmp	DWORD PTR tv358[ebp], 67176452		; 04010804H
	je	SHORT $LN19@ImeUi_Proc
	cmp	DWORD PTR tv358[ebp], 67240964		; 04020404H
	je	SHORT $LN19@ImeUi_Proc
	jmp	$LN20@ImeUi_Proc
$LN92@ImeUi_Proc:
	cmp	DWORD PTR tv358[ebp], 67306500		; 04030404H
	je	SHORT $LN19@ImeUi_Proc
	cmp	DWORD PTR tv358[ebp], 67372036		; 04040404H
	je	SHORT $LN19@ImeUi_Proc
	jmp	$LN20@ImeUi_Proc
$LN91@ImeUi_Proc:
	cmp	DWORD PTR tv358[ebp], 84084740		; 05030804H
	ja	SHORT $LN93@ImeUi_Proc
	cmp	DWORD PTR tv358[ebp], 84084740		; 05030804H
	je	SHORT $LN16@ImeUi_Proc
	cmp	DWORD PTR tv358[ebp], 83952644		; 05010404H
	je	SHORT $LN16@ImeUi_Proc
	cmp	DWORD PTR tv358[ebp], 84018180		; 05020404H
	je	SHORT $LN16@ImeUi_Proc
	jmp	SHORT $LN20@ImeUi_Proc
$LN93@ImeUi_Proc:
	cmp	DWORD PTR tv358[ebp], 100664324		; 06000404H
	je	SHORT $LN16@ImeUi_Proc
	jmp	SHORT $LN20@ImeUi_Proc
$LN19@ImeUi_Proc:
; Line 1501
	mov	edx, DWORD PTR _lParam$[ebp]
	cmp	DWORD PTR [edx], 1
	je	SHORT $LN17@ImeUi_Proc
	mov	eax, DWORD PTR _lParam$[ebp]
	cmp	DWORD PTR [eax], 2
	jne	SHORT $LN18@ImeUi_Proc
$LN17@ImeUi_Proc:
; Line 1503
	mov	ecx, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [ecx], 1
$LN18@ImeUi_Proc:
; Line 1505
	jmp	SHORT $LN20@ImeUi_Proc
$LN16@ImeUi_Proc:
; Line 1512
	mov	edx, DWORD PTR _lParam$[ebp]
	cmp	DWORD PTR [edx], 16			; 00000010H
	je	SHORT $LN14@ImeUi_Proc
	mov	eax, DWORD PTR _lParam$[ebp]
	cmp	DWORD PTR [eax], 17			; 00000011H
	je	SHORT $LN14@ImeUi_Proc
	mov	ecx, DWORD PTR _lParam$[ebp]
	cmp	DWORD PTR [ecx], 26			; 0000001aH
	je	SHORT $LN14@ImeUi_Proc
	mov	edx, DWORD PTR _lParam$[ebp]
	cmp	DWORD PTR [edx], 27			; 0000001bH
	je	SHORT $LN14@ImeUi_Proc
	mov	eax, DWORD PTR _lParam$[ebp]
	cmp	DWORD PTR [eax], 28			; 0000001cH
	jne	SHORT $LN20@ImeUi_Proc
$LN14@ImeUi_Proc:
; Line 1514
	mov	ecx, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [ecx], 1
$LN20@ImeUi_Proc:
; Line 1519
	jmp	SHORT $LN48@ImeUi_Proc
$LN13@ImeUi_Proc:
; Line 1522
	mov	edx, DWORD PTR _trapped$[ebp]
	mov	BYTE PTR [edx], 1
$LN48@ImeUi_Proc:
; Line 1525
	jmp	$LN73@ImeUi_Proc
$LN12@ImeUi_Proc:
; Line 1532
	mov	eax, DWORD PTR ?lAlt@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
	and	eax, -2147483648			; 80000000H
	jne	SHORT $LN11@ImeUi_Proc
	cmp	DWORD PTR _wParam$[ebp], 18		; 00000012H
	je	SHORT $LN11@ImeUi_Proc
	mov	esi, esp
	push	18					; 00000012H
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, ax
	and	ecx, 32768				; 00008000H
	jne	SHORT $LN11@ImeUi_Proc
; Line 1534
	mov	edx, DWORD PTR ?lAlt@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
	and	edx, 33488896				; 01ff0000H
	or	edx, -1073741823			; c0000001H
	mov	esi, esp
	push	edx
	push	18					; 00000012H
	push	257					; 00000101H
	mov	edi, esp
	call	DWORD PTR __imp__GetFocus@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__PostMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1536
	jmp	$LN6@ImeUi_Proc
$LN11@ImeUi_Proc:
; Line 1537
	mov	eax, DWORD PTR ?lCtrl@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
	and	eax, -2147483648			; 80000000H
	jne	SHORT $LN9@ImeUi_Proc
	cmp	DWORD PTR _wParam$[ebp], 17		; 00000011H
	je	SHORT $LN9@ImeUi_Proc
	mov	esi, esp
	push	17					; 00000011H
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, ax
	and	ecx, 32768				; 00008000H
	jne	SHORT $LN9@ImeUi_Proc
; Line 1539
	mov	edx, DWORD PTR ?lCtrl@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
	and	edx, 33488896				; 01ff0000H
	or	edx, -1073741823			; c0000001H
	mov	esi, esp
	push	edx
	push	17					; 00000011H
	push	257					; 00000101H
	mov	edi, esp
	call	DWORD PTR __imp__GetFocus@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__PostMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN6@ImeUi_Proc
$LN9@ImeUi_Proc:
; Line 1541
	mov	eax, DWORD PTR ?lShift@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
	and	eax, -2147483648			; 80000000H
	jne	SHORT $LN6@ImeUi_Proc
	cmp	DWORD PTR _wParam$[ebp], 16		; 00000010H
	je	SHORT $LN6@ImeUi_Proc
	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, ax
	and	ecx, 32768				; 00008000H
	jne	SHORT $LN6@ImeUi_Proc
; Line 1543
	mov	edx, DWORD PTR ?lShift@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA
	and	edx, 33488896				; 01ff0000H
	or	edx, -1073741823			; c0000001H
	mov	esi, esp
	push	edx
	push	16					; 00000010H
	push	257					; 00000101H
	mov	edi, esp
	call	DWORD PTR __imp__GetFocus@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__PostMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@ImeUi_Proc:
; Line 1549
	mov	eax, DWORD PTR _wParam$[ebp]
	mov	DWORD PTR tv419[ebp], eax
	cmp	DWORD PTR tv419[ebp], 16		; 00000010H
	je	SHORT $LN2@ImeUi_Proc
	cmp	DWORD PTR tv419[ebp], 17		; 00000011H
	je	SHORT $LN1@ImeUi_Proc
	cmp	DWORD PTR tv419[ebp], 18		; 00000012H
	je	SHORT $LN3@ImeUi_Proc
	jmp	SHORT $LN73@ImeUi_Proc
$LN3@ImeUi_Proc:
; Line 1552
	mov	ecx, DWORD PTR _lParam$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR ?lAlt@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA, edx
; Line 1553
	jmp	SHORT $LN73@ImeUi_Proc
$LN2@ImeUi_Proc:
; Line 1555
	mov	eax, DWORD PTR _lParam$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?lShift@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA, ecx
; Line 1556
	jmp	SHORT $LN73@ImeUi_Proc
$LN1@ImeUi_Proc:
; Line 1558
	mov	edx, DWORD PTR _lParam$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR ?lCtrl@?1??ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z@4JA, eax
$LN73@ImeUi_Proc:
; Line 1564
	xor	eax, eax
$LN78@ImeUi_Proc:
; Line 1565
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN109@ImeUi_Proc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 772				; 00000304H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN109@ImeUi_Proc:
	DD	4
	DD	$LN108@ImeUi_Proc
$LN108@ImeUi_Proc:
	DD	-532					; fffffdecH
	DD	512					; 00000200H
	DD	$LN104@ImeUi_Proc
	DD	-556					; fffffdd4H
	DD	4
	DD	$LN105@ImeUi_Proc
	DD	-568					; fffffdc8H
	DD	4
	DD	$LN106@ImeUi_Proc
	DD	-584					; fffffdb8H
	DD	4
	DD	$LN107@ImeUi_Proc
$LN107@ImeUi_Proc:
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN106@ImeUi_Proc:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN105@ImeUi_Proc:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN104@ImeUi_Proc:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
	npad	1
$LN110@ImeUi_Proc:
	DD	$LN72@ImeUi_Proc
	DD	$LN6@ImeUi_Proc
	DD	$LN12@ImeUi_Proc
	DD	$LN73@ImeUi_Proc
$LN96@ImeUi_Proc:
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	2
	DB	3
	DB	3
	DB	1
	DB	2
	npad	3
$LN111@ImeUi_Proc:
	DD	$LN42@ImeUi_Proc
	DD	$LN25@ImeUi_Proc
	DD	$LN47@ImeUi_Proc
	DD	$LN44@ImeUi_Proc
	DD	$LN23@ImeUi_Proc
	DD	$LN13@ImeUi_Proc
$LN102@ImeUi_Proc:
	DB	0
	DB	1
	DB	0
	DB	2
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
?ImeUi_ProcessMessage@@YAJPAUHWND__@@IIAAJPA_N@Z ENDP	; ImeUi_ProcessMessage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv141 = -15						; size = 1
tv135 = -14						; size = 1
tv129 = -13						; size = 1
_i$1 = -12						; size = 4
_uVkReal$2 = -8						; size = 4
_bAlt$3 = -3						; size = 1
_bShift$4 = -2						; size = 1
_bCtrl$5 = -1						; size = 1
_pmsg$ = 8						; size = 4
?ImeUi_IgnoreHotKey@@YA_NPBUtagMSG@@@Z PROC		; ImeUi_IgnoreHotKey
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2148
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2149
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	je	SHORT $LN10@ImeUi_Igno
	cmp	DWORD PTR _pmsg$[ebp], 0
	jne	SHORT $LN11@ImeUi_Igno
$LN10@ImeUi_Igno:
; Line 2150
	xor	al, al
	jmp	$LN12@ImeUi_Igno
$LN11@ImeUi_Igno:
; Line 2152
	mov	ecx, DWORD PTR _pmsg$[ebp]
	cmp	DWORD PTR [ecx+8], 229			; 000000e5H
	jne	$LN9@ImeUi_Igno
	mov	edx, DWORD PTR _pmsg$[ebp]
	cmp	DWORD PTR [edx+4], 256			; 00000100H
	je	SHORT $LN8@ImeUi_Igno
	mov	eax, DWORD PTR _pmsg$[ebp]
	cmp	DWORD PTR [eax+4], 260			; 00000104H
	jne	$LN9@ImeUi_Igno
$LN8@ImeUi_Igno:
; Line 2155
	mov	ecx, DWORD PTR _pmsg$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_ImmGetVirtualKey@4
	mov	DWORD PTR _uVkReal$2[ebp], eax
; Line 2158
	cmp	DWORD PTR _uVkReal$2[ebp], 23		; 00000017H
	jne	SHORT $LN7@ImeUi_Igno
; Line 2160
	mov	al, 1
	jmp	$LN12@ImeUi_Igno
$LN7@ImeUi_Igno:
; Line 2163
	cmp	DWORD PTR _uVkReal$2[ebp], 39		; 00000027H
	jne	SHORT $LN6@ImeUi_Igno
	movzx	eax, BYTE PTR _g_bCandList
	test	eax, eax
	je	SHORT $LN6@ImeUi_Igno
	mov	ecx, DWORD PTR _g_hklCurrent
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	cmp	edx, 1028				; 00000404H
	jne	SHORT $LN6@ImeUi_Igno
; Line 2165
	mov	al, 1
	jmp	$LN12@ImeUi_Igno
$LN6@ImeUi_Igno:
; Line 2169
	cmp	DWORD PTR _uVkReal$2[ebp], 25		; 00000019H
	jne	SHORT $LN5@ImeUi_Igno
	mov	eax, DWORD PTR _g_hklCurrent
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	and	ecx, 1023				; 000003ffH
	movzx	edx, cx
	cmp	edx, 18					; 00000012H
	jne	SHORT $LN5@ImeUi_Igno
; Line 2171
	mov	al, 1
	jmp	$LN12@ImeUi_Igno
$LN5@ImeUi_Igno:
; Line 2174
	mov	esi, esp
	push	17					; 00000011H
	call	DWORD PTR __imp__GetKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	and	eax, 32768				; 00008000H
	je	SHORT $LN14@ImeUi_Igno
	mov	BYTE PTR tv129[ebp], 1
	jmp	SHORT $LN15@ImeUi_Igno
$LN14@ImeUi_Igno:
	mov	BYTE PTR tv129[ebp], 0
$LN15@ImeUi_Igno:
	mov	cl, BYTE PTR tv129[ebp]
	mov	BYTE PTR _bCtrl$5[ebp], cl
; Line 2175
	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__GetKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	edx, ax
	and	edx, 32768				; 00008000H
	je	SHORT $LN16@ImeUi_Igno
	mov	BYTE PTR tv135[ebp], 1
	jmp	SHORT $LN17@ImeUi_Igno
$LN16@ImeUi_Igno:
	mov	BYTE PTR tv135[ebp], 0
$LN17@ImeUi_Igno:
	mov	al, BYTE PTR tv135[ebp]
	mov	BYTE PTR _bShift$4[ebp], al
; Line 2176
	mov	esi, esp
	push	18					; 00000012H
	call	DWORD PTR __imp__GetKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	movsx	ecx, ax
	and	ecx, 32768				; 00008000H
	je	SHORT $LN18@ImeUi_Igno
	mov	BYTE PTR tv141[ebp], 1
	jmp	SHORT $LN19@ImeUi_Igno
$LN18@ImeUi_Igno:
	mov	BYTE PTR tv141[ebp], 0
$LN19@ImeUi_Igno:
	mov	dl, BYTE PTR tv141[ebp]
	mov	BYTE PTR _bAlt$3[ebp], dl
; Line 2177
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@ImeUi_Igno
$LN3@ImeUi_Igno:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@ImeUi_Igno:
	cmp	DWORD PTR _i$1[ebp], 23			; 00000017H
	jae	SHORT $LN9@ImeUi_Igno
; Line 2182
	mov	ecx, DWORD PTR _i$1[ebp]
	movzx	edx, BYTE PTR _aHotKeys[ecx*8]
	movzx	eax, BYTE PTR _bCtrl$5[ebp]
	cmp	edx, eax
	jne	SHORT $LN1@ImeUi_Igno
	mov	ecx, DWORD PTR _i$1[ebp]
	movzx	edx, BYTE PTR _aHotKeys[ecx*8+1]
	movzx	eax, BYTE PTR _bShift$4[ebp]
	cmp	edx, eax
	jne	SHORT $LN1@ImeUi_Igno
	mov	ecx, DWORD PTR _i$1[ebp]
	movzx	edx, BYTE PTR _aHotKeys[ecx*8+2]
	movzx	eax, BYTE PTR _bAlt$3[ebp]
	cmp	edx, eax
	jne	SHORT $LN1@ImeUi_Igno
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _aHotKeys[ecx*8+4]
	cmp	edx, DWORD PTR _uVkReal$2[ebp]
	jne	SHORT $LN1@ImeUi_Igno
; Line 2183
	mov	al, 1
	jmp	SHORT $LN12@ImeUi_Igno
$LN1@ImeUi_Igno:
; Line 2184
	jmp	SHORT $LN3@ImeUi_Igno
$LN9@ImeUi_Igno:
; Line 2186
	xor	al, al
$LN12@ImeUi_Igno:
; Line 2187
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ImeUi_IgnoreHotKey@@YA_NPBUtagMSG@@@Z ENDP		; ImeUi_IgnoreHotKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pia$ = 8						; size = 4
?ImeUi_GetAppearance@@YAXPAUIMEUI_APPEARANCE@@@Z PROC	; ImeUi_GetAppearance
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2283
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 2284
	cmp	DWORD PTR _pia$[ebp], 0
	je	SHORT $LN4@ImeUi_GetA
; Line 2286
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	je	SHORT $LN2@ImeUi_GetA
; Line 2288
	mov	ecx, 16					; 00000010H
	mov	esi, OFFSET _gSkinIME
	mov	edi, DWORD PTR _pia$[ebp]
	rep movsd
; Line 2290
	jmp	SHORT $LN4@ImeUi_GetA
$LN2@ImeUi_GetA:
; Line 2292
	push	64					; 00000040H
	push	0
	mov	ecx, DWORD PTR _pia$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN4@ImeUi_GetA:
; Line 2295
	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?ImeUi_GetAppearance@@YAXPAUIMEUI_APPEARANCE@@@Z ENDP	; ImeUi_GetAppearance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pia$ = 8						; size = 4
?ImeUi_SetAppearance@@YAXPBUIMEUI_APPEARANCE@@@Z PROC	; ImeUi_SetAppearance
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 2267
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 2268
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	je	SHORT $LN1@ImeUi_SetA
	cmp	DWORD PTR _pia$[ebp], 0
	jne	SHORT $LN2@ImeUi_SetA
$LN1@ImeUi_SetA:
; Line 2269
	jmp	$LN3@ImeUi_SetA
$LN2@ImeUi_SetA:
; Line 2270
	mov	ecx, 16					; 00000010H
	mov	esi, DWORD PTR _pia$[ebp]
	mov	edi, OFFSET _gSkinIME
	rep movsd
; Line 2271
	mov	ecx, DWORD PTR _gSkinIME
	and	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _gSkinIME, ecx
; Line 2272
	mov	edx, DWORD PTR _gSkinIME+4
	and	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _gSkinIME+4, edx
; Line 2273
	mov	eax, DWORD PTR _gSkinIME+8
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _gSkinIME+8, eax
; Line 2274
	mov	ecx, DWORD PTR _gSkinIME+32
	and	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _gSkinIME+32, ecx
; Line 2275
	mov	edx, DWORD PTR _gSkinIME+36
	and	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _gSkinIME+36, edx
; Line 2276
	mov	eax, DWORD PTR _gSkinIME+40
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _gSkinIME+40, eax
; Line 2277
	mov	ecx, DWORD PTR _gSkinIME+44
	and	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR _gSkinIME+44, ecx
; Line 2278
	mov	edx, DWORD PTR _gSkinIME+48
	and	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _gSkinIME+48, edx
; Line 2279
	call	?SetCompStringColor@@YAXXZ		; SetCompStringColor
$LN3@ImeUi_SetA:
; Line 2280
	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?ImeUi_SetAppearance@@YAXPBUIMEUI_APPEARANCE@@@Z ENDP	; ImeUi_SetAppearance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?ImeUi_Uninitialize@@YAXXZ PROC				; ImeUi_Uninitialize
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 1777
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1778
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	jne	SHORT $LN3@ImeUi_Unin
; Line 1780
	jmp	SHORT $LN4@ImeUi_Unin
$LN3@ImeUi_Unin:
; Line 1782
	call	?ReleaseSinks@CTsfUiLessMode@@SAXXZ	; CTsfUiLessMode::ReleaseSinks
; Line 1783
	cmp	DWORD PTR _g_hwndMain, 0
	je	SHORT $LN2@ImeUi_Unin
; Line 1785
	mov	ecx, DWORD PTR _g_himcOrg
	push	ecx
	mov	edx, DWORD PTR _g_hwndMain
	push	edx
	call	_ImmAssociateContext@8
$LN2@ImeUi_Unin:
; Line 1787
	mov	DWORD PTR _g_hwndMain, 0
; Line 1788
	mov	DWORD PTR _g_himcOrg, 0
; Line 1789
	cmp	DWORD PTR _g_hImmDll, 0
	je	SHORT $LN1@ImeUi_Unin
; Line 1791
	mov	esi, esp
	mov	eax, DWORD PTR _g_hImmDll
	push	eax
	call	DWORD PTR __imp__FreeLibrary@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1792
	mov	DWORD PTR _g_hImmDll, 0
$LN1@ImeUi_Unin:
; Line 1794
	mov	ecx, OFFSET _g_disableCicero
	call	?Uninitialize@CDisableCicero@@QAEXXZ	; CDisableCicero::Uninitialize
; Line 1795
	mov	BYTE PTR _g_bInitialized, 0
$LN4@ImeUi_Unin:
; Line 1796
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?ImeUi_Uninitialize@@YAXXZ ENDP				; ImeUi_Uninitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv149 = -12						; size = 4
tv136 = -8						; size = 4
__ImmDisableTextFrameService$1 = -4			; size = 4
_hwnd$ = 8						; size = 4
_bDisable$ = 12						; size = 1
?ImeUi_Initialize@@YA_NPAUHWND__@@_N@Z PROC		; ImeUi_Initialize
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\imeui.cpp
; Line 1688
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1689
	movzx	eax, BYTE PTR _g_bInitialized
	test	eax, eax
	je	SHORT $LN8@ImeUi_Init
; Line 1691
	mov	al, 1
	jmp	$LN9@ImeUi_Init
$LN8@ImeUi_Init:
; Line 1693
	mov	ecx, DWORD PTR _hwnd$[ebp]
	mov	DWORD PTR _g_hwndMain, ecx
; Line 1694
	mov	ecx, OFFSET _g_disableCicero
	call	?Initialize@CDisableCicero@@QAEXXZ	; CDisableCicero::Initialize
; Line 1696
	mov	esi, esp
	push	2048					; 00000800H
	push	0
	push	OFFSET $SG153642
	call	DWORD PTR __imp__LoadLibraryExW@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _g_hImmDll, eax
; Line 1697
	mov	DWORD PTR _g_bDisableImeCompletely, 0
; Line 1699
	cmp	DWORD PTR _g_hImmDll, 0
	je	$LN7@ImeUi_Init
; Line 1701
	mov	esi, esp
	push	OFFSET $SG153646
	mov	edx, DWORD PTR _g_hImmDll
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __ImmLockIMC, eax
; Line 1702
	mov	esi, esp
	push	OFFSET $SG153649
	mov	eax, DWORD PTR _g_hImmDll
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __ImmUnlockIMC, eax
; Line 1703
	mov	esi, esp
	push	OFFSET $SG153652
	mov	ecx, DWORD PTR _g_hImmDll
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __ImmLockIMCC, eax
; Line 1704
	mov	esi, esp
	push	OFFSET $SG153655
	mov	edx, DWORD PTR _g_hImmDll
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __ImmUnlockIMCC, eax
; Line 1705
	mov	esi, esp
	push	OFFSET $SG153660
	mov	eax, DWORD PTR _g_hImmDll
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __ImmDisableTextFrameService$1[ebp], eax
; Line 1707
	cmp	DWORD PTR __ImmDisableTextFrameService$1[ebp], 0
	je	SHORT $LN6@ImeUi_Init
; Line 1709
	mov	esi, esp
	push	-1
	call	DWORD PTR __ImmDisableTextFrameService$1[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@ImeUi_Init:
; Line 1712
	jmp	SHORT $LN5@ImeUi_Init
$LN7@ImeUi_Init:
; Line 1714
	mov	DWORD PTR _g_bDisableImeCompletely, 1
; Line 1715
	xor	al, al
	jmp	$LN9@ImeUi_Init
$LN5@ImeUi_Init:
; Line 1717
	mov	DWORD PTR __ImmGetCompositionString, OFFSET _ImmGetCompositionStringW@16
; Line 1718
	mov	DWORD PTR __ImmGetCandidateList, OFFSET _ImmGetCandidateListW@16
; Line 1719
	mov	DWORD PTR __GetCandidateList, OFFSET ?GetCandidateList@@YAKPAUHIMC__@@KPAPAUtagCANDIDATELIST@@@Z ; GetCandidateList
; Line 1720
	mov	DWORD PTR __SendCompString, OFFSET ?SendCompString@@YAXXZ ; SendCompString
; Line 1721
	mov	ecx, DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR __SendMessage, ecx
; Line 1724
	mov	BYTE PTR _g_bInitialized, 1
; Line 1726
	mov	edx, DWORD PTR _g_hwndMain
	push	edx
	call	?ImeUi_SetWindow@@YAXPAUHWND__@@@Z	; ImeUi_SetWindow
	add	esp, 4
; Line 1727
	mov	eax, DWORD PTR _g_hwndMain
	push	eax
	call	_ImmGetContext@4
	mov	DWORD PTR _g_himcOrg, eax
; Line 1728
	mov	ecx, DWORD PTR _g_himcOrg
	push	ecx
	mov	edx, DWORD PTR _g_hwndMain
	push	edx
	call	_ImmReleaseContext@8
; Line 1730
	cmp	DWORD PTR _g_himcOrg, 0
	jne	SHORT $LN4@ImeUi_Init
; Line 1732
	mov	BYTE PTR _bDisable$[ebp], 1
$LN4@ImeUi_Init:
; Line 1739
	movzx	eax, BYTE PTR _bDisable$[ebp]
	test	eax, eax
	jne	SHORT $LN2@ImeUi_Init
	cmp	DWORD PTR ?ImeUiCallback_Malloc@@3P6APAXI@ZA, 0 ; ImeUiCallback_Malloc
	je	SHORT $LN2@ImeUi_Init
	cmp	DWORD PTR ?ImeUiCallback_Free@@3P6AXPAX@ZA, 0 ; ImeUiCallback_Free
	jne	SHORT $LN3@ImeUi_Init
$LN2@ImeUi_Init:
; Line 1741
	mov	DWORD PTR _g_bDisableImeCompletely, 1
; Line 1742
	push	0
	call	?ImeUi_EnableIme@@YAX_N@Z		; ImeUi_EnableIme
	add	esp, 4
; Line 1743
	mov	cl, BYTE PTR _bDisable$[ebp]
	mov	BYTE PTR _g_bInitialized, cl
; Line 1744
	xor	al, al
	jmp	$LN9@ImeUi_Init
$LN3@ImeUi_Init:
; Line 1747
	mov	esi, esp
	call	DWORD PTR __imp__GetCaretBlinkTime@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _g_uCaretBlinkTime, eax
; Line 1749
	mov	DWORD PTR _g_CaretInfo, 0
; Line 1750
	mov	DWORD PTR _g_CaretInfo+4, 0
; Line 1751
	mov	DWORD PTR _g_CaretInfo+8, 0
; Line 1752
	mov	DWORD PTR _g_CaretInfo+12, 0
; Line 1753
	mov	DWORD PTR _g_CaretInfo+16, 0
; Line 1754
	mov	DWORD PTR _g_CaretInfo+20, 0
; Line 1755
	mov	DWORD PTR _g_CaretInfo+28, 640		; 00000280H
; Line 1756
	mov	DWORD PTR _g_CaretInfo+24, 0
; Line 1757
	mov	DWORD PTR _g_CaretInfo+32, 480		; 000001e0H
; Line 1759
	call	?CheckInputLocale@@YAXXZ		; CheckInputLocale
; Line 1760
	call	?OnInputLangChangeWorker@@YAXXZ		; OnInputLangChangeWorker
; Line 1761
	push	2
	call	?ImeUi_SetSupportLevel@@YAXK@Z		; ImeUi_SetSupportLevel
	add	esp, 4
; Line 1764
	call	?SetupSinks@CTsfUiLessMode@@SAHXZ	; CTsfUiLessMode::SetupSinks
	test	eax, eax
	je	SHORT $LN11@ImeUi_Init
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@ImeUi_Init
$LN11@ImeUi_Init:
	mov	DWORD PTR tv136[ebp], 0
$LN12@ImeUi_Init:
	mov	dl, BYTE PTR tv136[ebp]
	mov	BYTE PTR _g_bUILessMode, dl
; Line 1765
	call	?CheckToggleState@@YAXXZ		; CheckToggleState
; Line 1766
	movzx	eax, BYTE PTR _g_bUILessMode
	test	eax, eax
	je	SHORT $LN1@ImeUi_Init
; Line 1768
	mov	ecx, DWORD PTR _g_hklCurrent
	and	ecx, 65535				; 0000ffffH
	movzx	edx, cx
	and	edx, 1023				; 000003ffH
	movzx	eax, dx
	cmp	eax, 4
	jne	SHORT $LN13@ImeUi_Init
	call	?CurrentInputLocaleIsIme@CTsfUiLessMode@@SAHXZ ; CTsfUiLessMode::CurrentInputLocaleIsIme
	test	eax, eax
	je	SHORT $LN13@ImeUi_Init
	mov	DWORD PTR tv149[ebp], 1
	jmp	SHORT $LN14@ImeUi_Init
$LN13@ImeUi_Init:
	mov	DWORD PTR tv149[ebp], 0
$LN14@ImeUi_Init:
	mov	cl, BYTE PTR tv149[ebp]
	mov	BYTE PTR _g_bChineseIME, cl
; Line 1769
	push	0
	call	?UpdateImeState@CTsfUiLessMode@@SAXH@Z	; CTsfUiLessMode::UpdateImeState
	add	esp, 4
$LN1@ImeUi_Init:
; Line 1771
	push	0
	call	?ImeUi_EnableIme@@YAX_N@Z		; ImeUi_EnableIme
	add	esp, 4
; Line 1773
	mov	al, 1
$LN9@ImeUi_Init:
; Line 1774
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ImeUi_Initialize@@YA_NPAUHWND__@@_N@Z ENDP		; ImeUi_Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 1132
	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 1052
	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _sinf
_TEXT	SEGMENT
tv70 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 764
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 765
	movss	xmm0, DWORD PTR __X$[ebp]
	call	___libm_sse2_sinf
	movss	DWORD PTR tv70[ebp], xmm0
	fld	DWORD PTR tv70[ebp]
; Line 766
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _cosf
_TEXT	SEGMENT
tv70 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 663
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 664
	movss	xmm0, DWORD PTR __X$[ebp]
	call	___libm_sse2_cosf
	movss	DWORD PTR tv70[ebp], xmm0
	fld	DWORD PTR tv70[ebp]
; Line 665
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv70 = -8						; size = 4
tv68 = -4						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT
; File c:\program files (x86)\windows kits\8.1\include\shared\guiddef.h
; Line 160
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv68[ebp], eax
	cmp	DWORD PTR tv68[ebp], 0
	jne	SHORT $LN3@IsEqualGUI
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
	mov	DWORD PTR tv70[ebp], 0
$LN4@IsEqualGUI:
	mov	eax, DWORD PTR tv70[ebp]
; Line 162
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_IsEqualGUID ENDP
_TEXT	ENDS
END
