; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	D:\Engine Class\Assignment 1\Scratch\DXSSE\DXUT\Optional\DXUTcamera.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients0
PUBLIC	?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients1
PUBLIC	?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients0
PUBLIC	?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients1
PUBLIC	?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR0
PUBLIC	?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR1
PUBLIC	?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR2
PUBLIC	?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMIdentityR3
PUBLIC	?g_XMNegativeZero@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMNegativeZero
PUBLIC	?g_XMMask3@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMMask3
PUBLIC	?g_XMMaskY@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMMaskY
PUBLIC	?g_XMOne@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOne
PUBLIC	?g_XMZero@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMZero
PUBLIC	?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMNegativeOne
PUBLIC	?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMOneHalf
PUBLIC	?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMInfinity
PUBLIC	?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMQNaN
PUBLIC	?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B		; DirectX::g_XMAbsMask
PUBLIC	?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B	; DirectX::g_XMSelect1110
CONST	SEGMENT
_XM_PI	DD	040490fdbr			; 3.14159
_XM_2PI	DD	040c90fdbr			; 6.28319
_XM_1DIV2PI DD	03e22f983r			; 0.159155
_XM_PIDIV2 DD	03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B DD 0ffffffffH ; DirectX::g_XMSelect1110
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B DD 07fffffffH	; DirectX::g_XMAbsMask
	DD	07fffffffH
	DD	07fffffffH
	DD	07fffffffH
CONST	ENDS
;	COMDAT ?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B DD 07fc00000H	; DirectX::g_XMQNaN
	DD	07fc00000H
	DD	07fc00000H
	DD	07fc00000H
CONST	ENDS
;	COMDAT ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B DD 07f800000H	; DirectX::g_XMInfinity
	DD	07f800000H
	DD	07f800000H
	DD	07f800000H
CONST	ENDS
;	COMDAT ?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B DD 03f000000r ; 0.5 ; DirectX::g_XMOneHalf
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
CONST	ENDS
;	COMDAT ?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B DD 0bf800000r ; -1 ; DirectX::g_XMNegativeOne
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?g_XMZero@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMZero@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0	; DirectX::g_XMZero
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMOne@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMOne@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1	; DirectX::g_XMOne
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMMaskY@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMaskY@DirectX@@3UXMVECTORI32@1@B DD 00H		; DirectX::g_XMMaskY
	DD	0ffffffffH
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMMask3@DirectX@@3UXMVECTORI32@1@B DD 0ffffffffH	; DirectX::g_XMMask3
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMNegativeZero@DirectX@@3UXMVECTORI32@1@B
CONST	SEGMENT
?g_XMNegativeZero@DirectX@@3UXMVECTORI32@1@B DD 080000000H ; DirectX::g_XMNegativeZero
	DD	080000000H
	DD	080000000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR3
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR2
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B DD 000000000r ; 0 ; DirectX::g_XMIdentityR1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B DD 03f800000r ; 1 ; DirectX::g_XMIdentityR0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0b48bdd11r ; -2.60516e-007 ; DirectX::g_XMCosCoefficients1
	DD	0befff67er			; -0.499927
	DD	03d29f587r			; 0.0414939
	DD	0baa69fdbr			; -0.00127124
CONST	ENDS
;	COMDAT ?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 0bf000000r ; -0.5 ; DirectX::g_XMCosCoefficients0
	DD	03d2aaaa3r			; 0.0416666
	DD	0bab609aar			; -0.00138884
	DD	037cfb4c2r			; 2.47605e-005
CONST	ENDS
;	COMDAT ?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B DD 0b2cd365br ; -2.38899e-008 ; DirectX::g_XMSinCoefficients1
	DD	0be2aa888r			; -0.166659
	DD	03c08373cr			; 0.00831395
	DD	0b9423ec8r			; -0.000185247
CONST	ENDS
;	COMDAT ?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B
CONST	SEGMENT
?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B DD 0be2aaaabr ; -0.166667 ; DirectX::g_XMSinCoefficients0
	DD	03c088886r			; 0.00833333
	DD	0b9500bf1r			; -0.000198409
	DD	03638b88er			; 2.75256e-006
CONST	ENDS
PUBLIC	_atan2f
PUBLIC	_fabsf
PUBLIC	_sqrtf
PUBLIC	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ	; DirectX::XMVECTORF32::operator __m128
PUBLIC	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ	; DirectX::XMVECTORI32::operator __m128
PUBLIC	??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ	; DirectX::XMVECTORU32::operator __m128
PUBLIC	??YDirectX@@YQAAT__m128@@AAT1@T1@@Z		; DirectX::operator+=
PUBLIC	??ZDirectX@@YQAAT__m128@@AAT1@T1@@Z		; DirectX::operator-=
PUBLIC	??XDirectX@@YAAAT__m128@@AAT1@M@Z		; DirectX::operator*=
PUBLIC	??HDirectX@@YQ?AT__m128@@T1@0@Z			; DirectX::operator+
PUBLIC	??GDirectX@@YQ?AT__m128@@T1@0@Z			; DirectX::operator-
PUBLIC	??DDirectX@@YQ?AT__m128@@T1@M@Z			; DirectX::operator*
PUBLIC	??KDirectX@@YQ?AT__m128@@T1@M@Z			; DirectX::operator/
PUBLIC	??0XMMATRIX@DirectX@@QAE@XZ			; DirectX::XMMATRIX::XMMATRIX
PUBLIC	??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z		; DirectX::XMMATRIX::operator=
PUBLIC	??XXMMATRIX@DirectX@@QAQAAU01@U01@@Z		; DirectX::XMMATRIX::operator*=
PUBLIC	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z		; DirectX::XMMATRIX::operator*
PUBLIC	??0XMFLOAT2@DirectX@@QAE@XZ			; DirectX::XMFLOAT2::XMFLOAT2
PUBLIC	??0XMFLOAT2@DirectX@@QAE@MM@Z			; DirectX::XMFLOAT2::XMFLOAT2
PUBLIC	??4XMFLOAT2@DirectX@@QAEAAU01@ABU01@@Z		; DirectX::XMFLOAT2::operator=
PUBLIC	??0XMFLOAT3@DirectX@@QAE@XZ			; DirectX::XMFLOAT3::XMFLOAT3
PUBLIC	??0XMFLOAT3@DirectX@@QAE@MMM@Z			; DirectX::XMFLOAT3::XMFLOAT3
PUBLIC	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z		; DirectX::XMFLOAT3::operator=
PUBLIC	??0XMFLOAT4@DirectX@@QAE@XZ			; DirectX::XMFLOAT4::XMFLOAT4
PUBLIC	??4XMFLOAT4@DirectX@@QAEAAU01@ABU01@@Z		; DirectX::XMFLOAT4::operator=
PUBLIC	??0XMFLOAT4X4@DirectX@@QAE@XZ			; DirectX::XMFLOAT4X4::XMFLOAT4X4
PUBLIC	?XMLoadFloat2@DirectX@@YQ?AT__m128@@PBUXMFLOAT2@1@@Z ; DirectX::XMLoadFloat2
PUBLIC	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
PUBLIC	?XMLoadFloat4@DirectX@@YQ?AT__m128@@PBUXMFLOAT4@1@@Z ; DirectX::XMLoadFloat4
PUBLIC	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
PUBLIC	?XMStoreFloat2@DirectX@@YQXPAUXMFLOAT2@1@T__m128@@@Z ; DirectX::XMStoreFloat2
PUBLIC	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
PUBLIC	?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z ; DirectX::XMStoreFloat4
PUBLIC	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
PUBLIC	?XMVectorZero@DirectX@@YQ?AT__m128@@XZ		; DirectX::XMVectorZero
PUBLIC	?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z	; DirectX::XMVectorSet
PUBLIC	?XMVectorReplicate@DirectX@@YQ?AT__m128@@M@Z	; DirectX::XMVectorReplicate
PUBLIC	?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorSplatX
PUBLIC	?XMVectorSplatY@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorSplatY
PUBLIC	?XMVectorSplatZ@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorSplatZ
PUBLIC	?XMVectorSplatW@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorSplatW
PUBLIC	?XMVectorGetX@DirectX@@YQMT__m128@@@Z		; DirectX::XMVectorGetX
PUBLIC	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z	; DirectX::XMVectorSelect
PUBLIC	?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorRound
PUBLIC	?XMVectorClamp@DirectX@@YQ?AT__m128@@T2@00@Z	; DirectX::XMVectorClamp
PUBLIC	?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorNegate
PUBLIC	?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVectorAdd
PUBLIC	?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVectorSubtract
PUBLIC	?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVectorMultiply
PUBLIC	?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorMultiplyAdd
PUBLIC	?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVectorDivide
PUBLIC	?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z	; DirectX::XMVectorScale
PUBLIC	?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVectorModAngles
PUBLIC	?XMVectorSinCos@DirectX@@YQXPAT__m128@@0T2@@Z	; DirectX::XMVectorSinCos
PUBLIC	?XMVector3Equal@DirectX@@YQ_NT__m128@@0@Z	; DirectX::XMVector3Equal
PUBLIC	?XMVector3IsInfinite@DirectX@@YQ_NT__m128@@@Z	; DirectX::XMVector3IsInfinite
PUBLIC	?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVector3Dot
PUBLIC	?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVector3Cross
PUBLIC	?XMVector3LengthSq@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVector3LengthSq
PUBLIC	?XMVector3Length@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVector3Length
PUBLIC	?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVector3Normalize
PUBLIC	?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformCoord
PUBLIC	?XMVector3TransformNormal@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformNormal
PUBLIC	?XMVector4LessOrEqual@DirectX@@YQ_NT__m128@@0@Z	; DirectX::XMVector4LessOrEqual
PUBLIC	?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z	; DirectX::XMVector4Dot
PUBLIC	?XMVector4Length@DirectX@@YQ?AT__m128@@T2@@Z	; DirectX::XMVector4Length
PUBLIC	?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
PUBLIC	?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z ; DirectX::XMMatrixTranspose
PUBLIC	?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
PUBLIC	?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ	; DirectX::XMMatrixIdentity
PUBLIC	?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
PUBLIC	?XMMatrixRotationRollPitchYaw@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixRotationRollPitchYaw
PUBLIC	?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationRollPitchYawFromVector
PUBLIC	?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationQuaternion
PUBLIC	?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ; DirectX::XMMatrixLookAtLH
PUBLIC	?XMMatrixLookToLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ; DirectX::XMMatrixLookToLH
PUBLIC	?XMMatrixPerspectiveFovLH@DirectX@@YQ?AUXMMATRIX@1@MMMM@Z ; DirectX::XMMatrixPerspectiveFovLH
PUBLIC	?XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMQuaternionMultiply
PUBLIC	?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ	; DirectX::XMQuaternionIdentity
PUBLIC	?XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionRotationRollPitchYawFromVector
PUBLIC	?XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@1@@Z ; DirectX::XMQuaternionRotationMatrix
PUBLIC	?XMScalarNearEqual@DirectX@@YA_NMMM@Z		; DirectX::XMScalarNearEqual
PUBLIC	?XMScalarSinCos@DirectX@@YAXPAM0M@Z		; DirectX::XMScalarSinCos
PUBLIC	??$XMVectorPermute@$0A@$03$03$03@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<0,4,4,4>
PUBLIC	??$XMVectorPermute@$04$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<5,1,5,5>
PUBLIC	??$XMVectorPermute@$05$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<6,6,2,6>
PUBLIC	?IsStopped@CDXUTTimer@@QBE_NXZ			; CDXUTTimer::IsStopped
PUBLIC	?Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute
PUBLIC	?Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute
PUBLIC	?Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute
PUBLIC	??0CD3DArcBall@@QAE@XZ				; CD3DArcBall::CD3DArcBall
PUBLIC	?Reset@CD3DArcBall@@QAEXXZ			; CD3DArcBall::Reset
PUBLIC	?SetWindow@CD3DArcBall@@QAEXHHM@Z		; CD3DArcBall::SetWindow
PUBLIC	?SetOffset@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::SetOffset
PUBLIC	?OnBegin@CD3DArcBall@@QAEXHH@Z			; CD3DArcBall::OnBegin
PUBLIC	?OnMove@CD3DArcBall@@QAEXHH@Z			; CD3DArcBall::OnMove
PUBLIC	?OnEnd@CD3DArcBall@@QAEXXZ			; CD3DArcBall::OnEnd
PUBLIC	?HandleMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z ; CD3DArcBall::HandleMessages
PUBLIC	?GetRotationMatrix@CD3DArcBall@@QBE?AUXMMATRIX@DirectX@@XZ ; CD3DArcBall::GetRotationMatrix
PUBLIC	?IsBeingDragged@CD3DArcBall@@QBE_NXZ		; CD3DArcBall::IsBeingDragged
PUBLIC	?SetQuatNow@CD3DArcBall@@QAEXABT__m128@@@Z	; CD3DArcBall::SetQuatNow
PUBLIC	?QuatFromBallPoints@CD3DArcBall@@SA?AT__m128@@T2@0@Z ; CD3DArcBall::QuatFromBallPoints
PUBLIC	?ScreenToVector@CD3DArcBall@@IAE?AT__m128@@MM@Z	; CD3DArcBall::ScreenToVector
PUBLIC	??0CBaseCamera@@QAE@XZ				; CBaseCamera::CBaseCamera
PUBLIC	?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z ; CBaseCamera::HandleMessages
PUBLIC	?Reset@CBaseCamera@@UAEXXZ			; CBaseCamera::Reset
PUBLIC	?SetViewParams@CBaseCamera@@UAEXT__m128@@0@Z	; CBaseCamera::SetViewParams
PUBLIC	?SetProjParams@CBaseCamera@@UAEXMMMM@Z		; CBaseCamera::SetProjParams
PUBLIC	?SetDragRect@CBaseCamera@@UAEXABUtagRECT@@@Z	; CBaseCamera::SetDragRect
PUBLIC	?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z ; CBaseCamera::MapKey
PUBLIC	?IsKeyDown@CBaseCamera@@IBE_NE@Z		; CBaseCamera::IsKeyDown
PUBLIC	?ConstrainToBoundary@CBaseCamera@@IAE?AT__m128@@T2@@Z ; CBaseCamera::ConstrainToBoundary
PUBLIC	?UpdateMouseDelta@CBaseCamera@@IAEXXZ		; CBaseCamera::UpdateMouseDelta
PUBLIC	?UpdateVelocity@CBaseCamera@@IAEXM@Z		; CBaseCamera::UpdateVelocity
PUBLIC	?GetInput@CBaseCamera@@IAEX_N00@Z		; CBaseCamera::GetInput
PUBLIC	??0CFirstPersonCamera@@QAE@XZ			; CFirstPersonCamera::CFirstPersonCamera
PUBLIC	?FrameMove@CFirstPersonCamera@@UAEXM@Z		; CFirstPersonCamera::FrameMove
PUBLIC	?SetRotateButtons@CFirstPersonCamera@@QAEX_N000@Z ; CFirstPersonCamera::SetRotateButtons
PUBLIC	??0CModelViewerCamera@@QAE@XZ			; CModelViewerCamera::CModelViewerCamera
PUBLIC	?HandleMessages@CModelViewerCamera@@UAEJPAUHWND__@@IIJ@Z ; CModelViewerCamera::HandleMessages
PUBLIC	?FrameMove@CModelViewerCamera@@UAEXM@Z		; CModelViewerCamera::FrameMove
PUBLIC	?SetDragRect@CModelViewerCamera@@UAEXABUtagRECT@@@Z ; CModelViewerCamera::SetDragRect
PUBLIC	?Reset@CModelViewerCamera@@UAEXXZ		; CModelViewerCamera::Reset
PUBLIC	?SetViewParams@CModelViewerCamera@@UAEXT__m128@@0@Z ; CModelViewerCamera::SetViewParams
PUBLIC	?SetWindow@CModelViewerCamera@@QAEXHHM@Z	; CModelViewerCamera::SetWindow
PUBLIC	?SetRadius@CModelViewerCamera@@QAEXMMM@Z	; CModelViewerCamera::SetRadius
PUBLIC	??0CDXUTDirectionWidget@@QAE@XZ			; CDXUTDirectionWidget::CDXUTDirectionWidget
PUBLIC	?HandleMessages@CDXUTDirectionWidget@@QAEJPAUHWND__@@IIJ@Z ; CDXUTDirectionWidget::HandleMessages
PUBLIC	?OnRender@CDXUTDirectionWidget@@QAEJT__m128@@ABUXMMATRIX@DirectX@@10@Z ; CDXUTDirectionWidget::OnRender
PUBLIC	?StaticOnD3D11CreateDevice@CDXUTDirectionWidget@@SGJPAUID3D11Device@@PAUID3D11DeviceContext@@@Z ; CDXUTDirectionWidget::StaticOnD3D11CreateDevice
PUBLIC	?StaticOnD3D11DestroyDevice@CDXUTDirectionWidget@@SGXXZ ; CDXUTDirectionWidget::StaticOnD3D11DestroyDevice
PUBLIC	?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ	; CDXUTDirectionWidget::UpdateLightDir
PUBLIC	??$max@M@std@@YAABMABM0@Z			; std::max<float>
PUBLIC	??$min@M@std@@YAABMABM0@Z			; std::min<float>
PUBLIC	??$_Debug_lt@ABMABM@std@@YA_NABM0PB_WI@Z	; std::_Debug_lt<float const &,float const &>
PUBLIC	??$forward@ABM@std@@YAABMABM@Z			; std::forward<float const &>
PUBLIC	??$_Debug_lt_pred@U?$less@X@std@@ABMABM@std@@YA_NU?$less@X@0@ABM1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,float const &,float const &>
PUBLIC	??$?RABMABM@?$less@X@std@@QBE_NABM0@Z		; std::less<void>::operator()<float const &,float const &>
PUBLIC	?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMHalfPi
PUBLIC	?g_XMPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMPi
PUBLIC	?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B		; DirectX::g_XMTwoPi
PUBLIC	?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B	; DirectX::g_XMReciprocalTwoPi
PUBLIC	??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ ; `string'
PUBLIC	??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JC@LGEHDEBK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ ; `string'
PUBLIC	?magic@?1??XMVectorRound@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORI32@2@B ; `DirectX::XMVectorRound'::`2'::magic
PUBLIC	??_C@_1DO@HJELAGIP@?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA4?$AAL?$AAe?$AAs?$AAs?$AAO?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAM?$AAi?$AAn?$AA?0?$AA?5?$AAM?$AAa?$AAx?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@PCMAADPN@?$AAp?$AAS?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@LFGCHHDM@?$AAp?$AAC?$AAo?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ ; `string'
PUBLIC	?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B ; `DirectX::XMMatrixRotationQuaternion'::`2'::Constant1110
PUBLIC	??_C@_1FM@KOIPKFLA@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM@ ; `string'
PUBLIC	??_C@_1EG@DOFHPLOD@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo@ ; `string'
PUBLIC	??_C@_1FK@IBPGMKAB@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM?$AAV@ ; `string'
PUBLIC	??_C@_1EE@JAOFAOOK@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn@ ; `string'
PUBLIC	??_C@_1FE@IMEJOJAH@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAa?$AAr?$AAZ?$AA?0?$AA?5?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?0?$AA?5@ ; `string'
PUBLIC	??_C@_1GK@EFPMNDEN@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAo?$AAv?$AAA?$AAn?$AAg?$AAl?$AAe?$AAY?$AA?0?$AA?5?$AA0?$AA?4@ ; `string'
PUBLIC	??_C@_1FO@IACFEINC@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAH?$AAB?$AAy?$AAW?$AA?0?$AA?5?$AA0@ ; `string'
PUBLIC	?ControlWZYX@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionMultiply'::`2'::ControlWZYX
PUBLIC	?ControlZWXY@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionMultiply'::`2'::ControlZWXY
PUBLIC	?ControlYXWZ@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionMultiply'::`2'::ControlYXWZ
PUBLIC	??_C@_1IO@PAPJGEKF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ ; `string'
PUBLIC	?Sign@?1??XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationRollPitchYawFromVector'::`2'::Sign
PUBLIC	?XMPMMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMPMMP
PUBLIC	?XMMPMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMMPMP
PUBLIC	?XMMMPP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMMMPP
PUBLIC	??_C@_19MFJHDIJG@?$AAp?$AAS?$AAi?$AAn?$AA?$AA@	; `string'
PUBLIC	??_C@_19MNAGGFOC@?$AAp?$AAC?$AAo?$AAs?$AA?$AA@	; `string'
PUBLIC	?selectMask@?1??Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute'::`2'::selectMask
PUBLIC	?selectMask@?1??Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute'::`2'::selectMask
PUBLIC	?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute'::`2'::selectMask
PUBLIC	??_7CBaseCamera@@6B@				; CBaseCamera::`vftable'
PUBLIC	??_7CFirstPersonCamera@@6B@			; CFirstPersonCamera::`vftable'
PUBLIC	??_7CModelViewerCamera@@6B@			; CModelViewerCamera::`vftable'
PUBLIC	??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ ; `string'
PUBLIC	??_R4CBaseCamera@@6B@				; CBaseCamera::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBaseCamera@@@8				; CBaseCamera `RTTI Type Descriptor'
PUBLIC	??_R3CBaseCamera@@8				; CBaseCamera::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseCamera@@8				; CBaseCamera::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseCamera@@8			; CBaseCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CFirstPersonCamera@@6B@			; CFirstPersonCamera::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFirstPersonCamera@@@8			; CFirstPersonCamera `RTTI Type Descriptor'
PUBLIC	??_R3CFirstPersonCamera@@8			; CFirstPersonCamera::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFirstPersonCamera@@8			; CFirstPersonCamera::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFirstPersonCamera@@8		; CFirstPersonCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CModelViewerCamera@@6B@			; CModelViewerCamera::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCModelViewerCamera@@@8			; CModelViewerCamera `RTTI Type Descriptor'
PUBLIC	??_R3CModelViewerCamera@@8			; CModelViewerCamera::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CModelViewerCamera@@8			; CModelViewerCamera::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CModelViewerCamera@@8		; CModelViewerCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3638b88e
PUBLIC	__real@3727c5ac
PUBLIC	__real@37a7c5ac
PUBLIC	__real@37cfb4c2
PUBLIC	__real@39500bf1
PUBLIC	__real@3ab609aa
PUBLIC	__real@3c088886
PUBLIC	__real@3c23d70a
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3d2aaaa3
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e2aaaab
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@42f00000
PUBLIC	__real@447a0000
PUBLIC	__real@7f7fffff
PUBLIC	__real@b2cd365b
PUBLIC	__real@b48bdd11
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	__imp__SetCapture@4:PROC
EXTRN	__imp__ReleaseCapture@0:PROC
EXTRN	__imp__GetForegroundWindow@0:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__SetCursorPos@8:PROC
EXTRN	__imp__GetCursorPos@4:PROC
EXTRN	__imp__SetRect@20:PROC
EXTRN	__imp__PtInRect@12:PROC
EXTRN	__imp___wassert:PROC
EXTRN	__imp_?_Debug_message@std@@YAXPB_W0I@Z:PROC
EXTRN	?DXUTGetHWND@@YGPAUHWND__@@XZ:PROC		; DXUTGetHWND
EXTRN	?DXUTGetTime@@YGNXZ:PROC			; DXUTGetTime
EXTRN	?DXUTGetFPS@@YGMXZ:PROC				; DXUTGetFPS
EXTRN	?DXUTIsActive@@YG_NXZ:PROC			; DXUTIsActive
EXTRN	?DXUTGetGamepadState@@YAJKPAUDXUT_GAMEPAD@@_N1@Z:PROC ; DXUTGetGamepadState
EXTRN	?DXUTGetGlobalTimer@@YGPAVCDXUTTimer@@XZ:PROC	; DXUTGetGlobalTimer
EXTRN	?DXUTMonitorFromWindow@@YGPAUHMONITOR__@@PAUHWND__@@K@Z:PROC ; DXUTMonitorFromWindow
EXTRN	?DXUTGetMonitorInfo@@YGHPAUHMONITOR__@@PAUtagMONITORINFO@@@Z:PROC ; DXUTGetMonitorInfo
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___libm_sse2_atan2:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMHalfPi$initializer$ DD FLAT:??__Eg_XMHalfPi@DirectX@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@b48bdd11
CONST	SEGMENT
__real@b48bdd11 DD 0b48bdd11r			; -2.60516e-007
CONST	ENDS
;	COMDAT __real@b2cd365b
CONST	SEGMENT
__real@b2cd365b DD 0b2cd365br			; -2.38899e-008
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e2aaaab
CONST	SEGMENT
__real@3e2aaaab DD 03e2aaaabr			; 0.166667
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d2aaaa3
CONST	SEGMENT
__real@3d2aaaa3 DD 03d2aaaa3r			; 0.0416666
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3c088886
CONST	SEGMENT
__real@3c088886 DD 03c088886r			; 0.00833333
CONST	ENDS
;	COMDAT __real@3ab609aa
CONST	SEGMENT
__real@3ab609aa DD 03ab609aar			; 0.00138884
CONST	ENDS
;	COMDAT __real@39500bf1
CONST	SEGMENT
__real@39500bf1 DD 039500bf1r			; 0.000198409
CONST	ENDS
;	COMDAT __real@37cfb4c2
CONST	SEGMENT
__real@37cfb4c2 DD 037cfb4c2r			; 2.47605e-005
CONST	ENDS
;	COMDAT __real@37a7c5ac
CONST	SEGMENT
__real@37a7c5ac DD 037a7c5acr			; 2e-005
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-005
CONST	ENDS
;	COMDAT __real@3638b88e
CONST	SEGMENT
__real@3638b88e DD 03638b88er			; 2.75256e-006
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CModelViewerCamera@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CModelViewerCamera@@8 DD FLAT:??_R0?AVCModelViewerCamera@@@8 ; CModelViewerCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CModelViewerCamera@@8
rdata$r	ENDS
;	COMDAT ??_R2CModelViewerCamera@@8
rdata$r	SEGMENT
??_R2CModelViewerCamera@@8 DD FLAT:??_R1A@?0A@EA@CModelViewerCamera@@8 ; CModelViewerCamera::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_R3CModelViewerCamera@@8
rdata$r	SEGMENT
??_R3CModelViewerCamera@@8 DD 00H			; CModelViewerCamera::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CModelViewerCamera@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCModelViewerCamera@@@8
data$r	SEGMENT
??_R0?AVCModelViewerCamera@@@8 DD FLAT:??_7type_info@@6B@ ; CModelViewerCamera `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCModelViewerCamera@@', 00H
data$r	ENDS
;	COMDAT ??_R4CModelViewerCamera@@6B@
rdata$r	SEGMENT
??_R4CModelViewerCamera@@6B@ DD 00H			; CModelViewerCamera::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCModelViewerCamera@@@8
	DD	FLAT:??_R3CModelViewerCamera@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFirstPersonCamera@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFirstPersonCamera@@8 DD FLAT:??_R0?AVCFirstPersonCamera@@@8 ; CFirstPersonCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFirstPersonCamera@@8
rdata$r	ENDS
;	COMDAT ??_R2CFirstPersonCamera@@8
rdata$r	SEGMENT
??_R2CFirstPersonCamera@@8 DD FLAT:??_R1A@?0A@EA@CFirstPersonCamera@@8 ; CFirstPersonCamera::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_R3CFirstPersonCamera@@8
rdata$r	SEGMENT
??_R3CFirstPersonCamera@@8 DD 00H			; CFirstPersonCamera::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CFirstPersonCamera@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFirstPersonCamera@@@8
data$r	SEGMENT
??_R0?AVCFirstPersonCamera@@@8 DD FLAT:??_7type_info@@6B@ ; CFirstPersonCamera `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFirstPersonCamera@@', 00H
data$r	ENDS
;	COMDAT ??_R4CFirstPersonCamera@@6B@
rdata$r	SEGMENT
??_R4CFirstPersonCamera@@6B@ DD 00H			; CFirstPersonCamera::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFirstPersonCamera@@@8
	DD	FLAT:??_R3CFirstPersonCamera@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseCamera@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseCamera@@8 DD FLAT:??_R0?AVCBaseCamera@@@8 ; CBaseCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseCamera@@8
rdata$r	SEGMENT
??_R2CBaseCamera@@8 DD FLAT:??_R1A@?0A@EA@CBaseCamera@@8 ; CBaseCamera::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBaseCamera@@8
rdata$r	SEGMENT
??_R3CBaseCamera@@8 DD 00H				; CBaseCamera::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseCamera@@@8
data$r	SEGMENT
??_R0?AVCBaseCamera@@@8 DD FLAT:??_7type_info@@6B@	; CBaseCamera `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseCamera@@', 00H
data$r	ENDS
;	COMDAT ??_R4CBaseCamera@@6B@
rdata$r	SEGMENT
??_R4CBaseCamera@@6B@ DD 00H				; CBaseCamera::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBaseCamera@@@8
	DD	FLAT:??_R3CBaseCamera@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 'l', 00H, 'g'
	DB	00H, 'o', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'm', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_7CModelViewerCamera@@6B@
CONST	SEGMENT
??_7CModelViewerCamera@@6B@ DD FLAT:??_R4CModelViewerCamera@@6B@ ; CModelViewerCamera::`vftable'
	DD	FLAT:?HandleMessages@CModelViewerCamera@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?FrameMove@CModelViewerCamera@@UAEXM@Z
	DD	FLAT:?Reset@CModelViewerCamera@@UAEXXZ
	DD	FLAT:?SetViewParams@CModelViewerCamera@@UAEXT__m128@@0@Z
	DD	FLAT:?SetProjParams@CBaseCamera@@UAEXMMMM@Z
	DD	FLAT:?SetDragRect@CModelViewerCamera@@UAEXABUtagRECT@@@Z
	DD	FLAT:?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z
CONST	ENDS
;	COMDAT ??_7CFirstPersonCamera@@6B@
CONST	SEGMENT
??_7CFirstPersonCamera@@6B@ DD FLAT:??_R4CFirstPersonCamera@@6B@ ; CFirstPersonCamera::`vftable'
	DD	FLAT:?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?FrameMove@CFirstPersonCamera@@UAEXM@Z
	DD	FLAT:?Reset@CBaseCamera@@UAEXXZ
	DD	FLAT:?SetViewParams@CBaseCamera@@UAEXT__m128@@0@Z
	DD	FLAT:?SetProjParams@CBaseCamera@@UAEXMMMM@Z
	DD	FLAT:?SetDragRect@CBaseCamera@@UAEXABUtagRECT@@@Z
	DD	FLAT:?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z
CONST	ENDS
;	COMDAT ??_7CBaseCamera@@6B@
CONST	SEGMENT
??_7CBaseCamera@@6B@ DD FLAT:??_R4CBaseCamera@@6B@	; CBaseCamera::`vftable'
	DD	FLAT:?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z
	DD	FLAT:__purecall
	DD	FLAT:?Reset@CBaseCamera@@UAEXXZ
	DD	FLAT:?SetViewParams@CBaseCamera@@UAEXT__m128@@0@Z
	DD	FLAT:?SetProjParams@CBaseCamera@@UAEXMMMM@Z
	DD	FLAT:?SetDragRect@CBaseCamera@@UAEXABUtagRECT@@@Z
	DD	FLAT:?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z
CONST	ENDS
;	COMDAT ?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B
CONST	SEGMENT
?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B DD 0ffffffffH ; `DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute'::`2'::selectMask
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?selectMask@?1??Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B
CONST	SEGMENT
?selectMask@?1??Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B DD 0ffffffffH ; `DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute'::`2'::selectMask
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?selectMask@?1??Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B
CONST	SEGMENT
?selectMask@?1??Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B DD 00H ; `DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute'::`2'::selectMask
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ??_C@_19MNAGGFOC@?$AAp?$AAC?$AAo?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_19MNAGGFOC@?$AAp?$AAC?$AAo?$AAs?$AA?$AA@ DB 'p', 00H, 'C', 00H, 'o', 00H
	DB	's', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19MFJHDIJG@?$AAp?$AAS?$AAi?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_19MFJHDIJG@?$AAp?$AAS?$AAi?$AAn?$AA?$AA@ DB 'p', 00H, 'S', 00H, 'i', 00H
	DB	'n', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?XMMMPP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?XMMMPP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B DD 0bf800000r ; -1 ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMMMPP
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?XMMPMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?XMMPMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B DD 0bf800000r ; -1 ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMMPMP
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?XMPMMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?XMPMMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B DD 03f800000r ; 1 ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMPMMP
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Sign@?1??XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?Sign@?1??XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B DD 03f800000r ; 1 ; `DirectX::XMQuaternionRotationRollPitchYawFromVector'::`2'::Sign
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_1IO@PAPJGEKF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
CONST	SEGMENT
??_C@_1IO@PAPJGEKF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'k', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '8', 00H, '.', 00H, '1', 00H, '\'
	DB	00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H
	DB	'e', 00H, '\', 00H, 'u', 00H, 'm', 00H, '\', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'X', 00H, 'M', 00H
	DB	'a', 00H, 't', 00H, 'h', 00H, 'M', 00H, 'i', 00H, 's', 00H, 'c'
	DB	00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?ControlYXWZ@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?ControlYXWZ@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B DD 0bf800000r ; -1 ; `DirectX::XMQuaternionMultiply'::`2'::ControlYXWZ
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?ControlZWXY@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?ControlZWXY@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B DD 03f800000r ; 1 ; `DirectX::XMQuaternionMultiply'::`2'::ControlZWXY
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?ControlWZYX@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?ControlWZYX@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B DD 03f800000r ; 1 ; `DirectX::XMQuaternionMultiply'::`2'::ControlWZYX
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ??_C@_1FO@IACFEINC@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAH?$AAB?$AAy?$AAW?$AA?0?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1FO@IACFEINC@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAH?$AAB?$AAy?$AAW?$AA?0?$AA?5?$AA0@ DB '!'
	DB	00H, 'X', 00H, 'M', 00H, 'S', 00H, 'c', 00H, 'a', 00H, 'l', 00H
	DB	'a', 00H, 'r', 00H, 'N', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, '(', 00H, 'A', 00H
	DB	's', 00H, 'p', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'H', 00H, 'B'
	DB	00H, 'y', 00H, 'W', 00H, ',', 00H, ' ', 00H, '0', 00H, '.', 00H
	DB	'0', 00H, 'f', 00H, ',', 00H, ' ', 00H, '0', 00H, '.', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, '1', 00H, 'f', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@EFPMNDEN@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAo?$AAv?$AAA?$AAn?$AAg?$AAl?$AAe?$AAY?$AA?0?$AA?5?$AA0?$AA?4@
CONST	SEGMENT
??_C@_1GK@EFPMNDEN@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAo?$AAv?$AAA?$AAn?$AAg?$AAl?$AAe?$AAY?$AA?0?$AA?5?$AA0?$AA?4@ DB '!'
	DB	00H, 'X', 00H, 'M', 00H, 'S', 00H, 'c', 00H, 'a', 00H, 'l', 00H
	DB	'a', 00H, 'r', 00H, 'N', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, '(', 00H, 'F', 00H
	DB	'o', 00H, 'v', 00H, 'A', 00H, 'n', 00H, 'g', 00H, 'l', 00H, 'e'
	DB	00H, 'Y', 00H, ',', 00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H
	DB	'f', 00H, ',', 00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, '1', 00H, 'f', 00H, ' ', 00H, '*', 00H
	DB	' ', 00H, '2', 00H, '.', 00H, '0', 00H, 'f', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@IMEJOJAH@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAa?$AAr?$AAZ?$AA?0?$AA?5?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?0?$AA?5@
CONST	SEGMENT
??_C@_1FE@IMEJOJAH@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAa?$AAr?$AAZ?$AA?0?$AA?5?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?0?$AA?5@ DB '!'
	DB	00H, 'X', 00H, 'M', 00H, 'S', 00H, 'c', 00H, 'a', 00H, 'l', 00H
	DB	'a', 00H, 'r', 00H, 'N', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'E'
	DB	00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, '(', 00H, 'F', 00H
	DB	'a', 00H, 'r', 00H, 'Z', 00H, ',', 00H, ' ', 00H, 'N', 00H, 'e'
	DB	00H, 'a', 00H, 'r', 00H, 'Z', 00H, ',', 00H, ' ', 00H, '0', 00H
	DB	'.', 00H, '0', 00H, '0', 00H, '0', 00H, '0', 00H, '1', 00H, 'f'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@JAOFAOOK@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn@
CONST	SEGMENT
??_C@_1EE@JAOFAOOK@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn@ DB '!'
	DB	00H, 'X', 00H, 'M', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '3', 00H, 'I', 00H, 's', 00H, 'I', 00H, 'n'
	DB	00H, 'f', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'(', 00H, 'U', 00H, 'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@IBPGMKAB@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM?$AAV@
CONST	SEGMENT
??_C@_1FK@IBPGMKAB@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM?$AAV@ DB '!'
	DB	00H, 'X', 00H, 'M', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '3', 00H, 'E', 00H, 'q', 00H, 'u', 00H, 'a'
	DB	00H, 'l', 00H, '(', 00H, 'U', 00H, 'p', 00H, 'D', 00H, 'i', 00H
	DB	'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, ',', 00H, ' ', 00H, 'X', 00H, 'M', 00H, 'V', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'Z', 00H, 'e', 00H, 'r'
	DB	00H, 'o', 00H, '(', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@DOFHPLOD@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo@
CONST	SEGMENT
??_C@_1EG@DOFHPLOD@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo@ DB '!'
	DB	00H, 'X', 00H, 'M', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '3', 00H, 'I', 00H, 's', 00H, 'I', 00H, 'n'
	DB	00H, 'f', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'(', 00H, 'E', 00H, 'y', 00H, 'e', 00H, 'D', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@KOIPKFLA@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM@
CONST	SEGMENT
??_C@_1FM@KOIPKFLA@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM@ DB '!'
	DB	00H, 'X', 00H, 'M', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, '3', 00H, 'E', 00H, 'q', 00H, 'u', 00H, 'a'
	DB	00H, 'l', 00H, '(', 00H, 'E', 00H, 'y', 00H, 'e', 00H, 'D', 00H
	DB	'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, ',', 00H, ' ', 00H, 'X', 00H, 'M', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'Z', 00H, 'e'
	DB	00H, 'r', 00H, 'o', 00H, '(', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B
CONST	SEGMENT
?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B DD 03f800000r ; 1 ; `DirectX::XMMatrixRotationQuaternion'::`2'::Constant1110
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
CONST	SEGMENT
??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'k', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '8', 00H, '.', 00H, '1', 00H, '\'
	DB	00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H
	DB	'e', 00H, '\', 00H, 'u', 00H, 'm', 00H, '\', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'X', 00H, 'M', 00H
	DB	'a', 00H, 't', 00H, 'h', 00H, 'M', 00H, 'a', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'x', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@LFGCHHDM@?$AAp?$AAC?$AAo?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@LFGCHHDM@?$AAp?$AAC?$AAo?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@ DB 'p'
	DB	00H, 'C', 00H, 'o', 00H, 's', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't'
	DB	00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@PCMAADPN@?$AAp?$AAS?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@PCMAADPN@?$AAp?$AAS?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@ DB 'p'
	DB	00H, 'S', 00H, 'i', 00H, 'n', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't'
	DB	00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@HJELAGIP@?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA4?$AAL?$AAe?$AAs?$AAs?$AAO?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAM?$AAi?$AAn?$AA?0?$AA?5?$AAM?$AAa?$AAx?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@HJELAGIP@?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA4?$AAL?$AAe?$AAs?$AAs?$AAO?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAM?$AAi?$AAn?$AA?0?$AA?5?$AAM?$AAa?$AAx?$AA?$CJ?$AA?$AA@ DB 'X'
	DB	00H, 'M', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '4', 00H, 'L', 00H, 'e', 00H, 's', 00H, 's', 00H, 'O'
	DB	00H, 'r', 00H, 'E', 00H, 'q', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	'(', 00H, 'M', 00H, 'i', 00H, 'n', 00H, ',', 00H, ' ', 00H, 'M'
	DB	00H, 'a', 00H, 'x', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?magic@?1??XMVectorRound@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORI32@2@B
CONST	SEGMENT
?magic@?1??XMVectorRound@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORI32@2@B DD 04b000000H ; `DirectX::XMVectorRound'::`2'::magic
	DD	04b000000H
	DD	04b000000H
	DD	04b000000H
CONST	ENDS
;	COMDAT ??_C@_1JC@LGEHDEBK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
CONST	SEGMENT
??_C@_1JC@LGEHDEBK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'k', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '8', 00H, '.', 00H, '1', 00H, '\'
	DB	00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H
	DB	'e', 00H, '\', 00H, 'u', 00H, 'm', 00H, '\', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'X', 00H, 'M', 00H
	DB	'a', 00H, 't', 00H, 'h', 00H, 'V', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@ DB 'p'
	DB	00H, 'D', 00H, 'e', 00H, 's', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ DB 'p', 00H
	DB	'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
CONST	SEGMENT
??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, 'k', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '8', 00H, '.', 00H, '1', 00H, '\'
	DB	00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H
	DB	'e', 00H, '\', 00H, 'u', 00H, 'm', 00H, '\', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'X', 00H, 'M', 00H
	DB	'a', 00H, 't', 00H, 'h', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'v'
	DB	00H, 'e', 00H, 'r', 00H, 't', 00H, '.', 00H, 'i', 00H, 'n', 00H
	DB	'l', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B	ORG $+16 ; DirectX::g_XMReciprocalTwoPi
_DATA	ENDS
;	COMDAT ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B	ORG $+16		; DirectX::g_XMTwoPi
_DATA	ENDS
;	COMDAT ?g_XMPi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMPi@DirectX@@3UXMVECTORF32@1@B	ORG $+16		; DirectX::g_XMPi
_DATA	ENDS
;	COMDAT ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B
_DATA	SEGMENT
?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B	ORG $+16		; DirectX::g_XMHalfPi
_DATA	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMPi$initializer$ DD FLAT:??__Eg_XMPi@DirectX@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMTwoPi$initializer$ DD FLAT:??__Eg_XMTwoPi@DirectX@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
_g_XMReciprocalTwoPi$initializer$ DD FLAT:??__Eg_XMReciprocalTwoPi@DirectX@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$?RABMABM@?$less@X@std@@QBE_NABM0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
_this$ = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RABMABM@?$less@X@std@@QBE_NABM0@Z PROC		; std::less<void>::operator()<float const &,float const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
; Line 263
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 268
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR [ecx]
	jbe	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]
; Line 269
	mov	esp, ebp
	pop	ebp
	ret	8
??$?RABMABM@?$less@X@std@@QBE_NABM0@Z ENDP		; std::less<void>::operator()<float const &,float const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Debug_lt_pred@U?$less@X@std@@ABMABM@std@@YA_NU?$less@X@0@ABM1PB_WI@Z
_TEXT	SEGMENT
__Pred$ = 8						; size = 1
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
__File$ = 20						; size = 4
__Line$ = 24						; size = 4
??$_Debug_lt_pred@U?$less@X@std@@ABMABM@std@@YA_NU?$less@X@0@ABM1PB_WI@Z PROC ; std::_Debug_lt_pred<std::less<void>,float const &,float const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 520
	push	ebp
	mov	ebp, esp
	push	esi
; Line 521
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$forward@ABM@std@@YAABMABM@Z		; std::forward<float const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$forward@ABM@std@@YAABMABM@Z		; std::forward<float const &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??$?RABMABM@?$less@X@std@@QBE_NABM0@Z	; std::less<void>::operator()<float const &,float const &>
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@Debug_lt_p
; Line 522
	xor	al, al
	jmp	SHORT $LN4@Debug_lt_p
	jmp	SHORT $LN2@Debug_lt_p
$LN3@Debug_lt_p:
; Line 523
	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$forward@ABM@std@@YAABMABM@Z		; std::forward<float const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$forward@ABM@std@@YAABMABM@Z		; std::forward<float const &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Pred$[ebp]
	call	??$?RABMABM@?$less@X@std@@QBE_NABM0@Z	; std::less<void>::operator()<float const &,float const &>
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Debug_lt_p
; Line 524
	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_lt_p:
; Line 525
	mov	al, 1
$LN4@Debug_lt_p:
; Line 526
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Debug_lt_pred@U?$less@X@std@@ABMABM@std@@YA_NU?$less@X@0@ABM1PB_WI@Z ENDP ; std::_Debug_lt_pred<std::less<void>,float const &,float const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$forward@ABM@std@@YAABMABM@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABM@std@@YAABMABM@Z PROC			; std::forward<float const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
; Line 1504
	push	ebp
	mov	ebp, esp
; Line 1505
	mov	eax, DWORD PTR __Arg$[ebp]
; Line 1506
	pop	ebp
	ret	0
??$forward@ABM@std@@YAABMABM@Z ENDP			; std::forward<float const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Debug_lt@ABMABM@std@@YA_NABM0PB_WI@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_lt@ABMABM@std@@YA_NABM0PB_WI@Z PROC		; std::_Debug_lt<float const &,float const &>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
; Line 532
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 534
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$forward@ABM@std@@YAABMABM@Z		; std::forward<float const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$forward@ABM@std@@YAABMABM@Z		; std::forward<float const &>
	add	esp, 4
	push	eax
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	call	??$_Debug_lt_pred@U?$less@X@std@@ABMABM@std@@YA_NU?$less@X@0@ABM1PB_WI@Z ; std::_Debug_lt_pred<std::less<void>,float const &,float const &>
	add	esp, 20					; 00000014H
; Line 535
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_lt@ABMABM@std@@YA_NABM0PB_WI@Z ENDP		; std::_Debug_lt<float const &,float const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$min@M@std@@YAABMABM0@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@M@std@@YAABMABM0@Z PROC				; std::min<float>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 4120
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4121
	push	4121					; 00001019H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$_Debug_lt@ABMABM@std@@YA_NABM0PB_WI@Z ; std::_Debug_lt<float const &,float const &>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@min
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN4@min:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
; Line 4122
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$min@M@std@@YAABMABM0@Z ENDP				; std::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$max@M@std@@YAABMABM0@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
$T1 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@M@std@@YAABMABM0@Z PROC				; std::max<float>, COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\algorithm
; Line 4087
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 4088
	push	4088					; 00000ff8H
	push	OFFSET ??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$_Debug_lt@ABMABM@std@@YA_NABM0PB_WI@Z ; std::_Debug_lt<float const &,float const &>
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@max
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN4@max:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
; Line 4089
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$max@M@std@@YAABMABM0@Z ENDP				; std::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv397 = -1728						; size = 16
$T1 = -1712						; size = 64
$T2 = -1648						; size = 64
$T3 = -1584						; size = 64
$T4 = -1520						; size = 64
$T5 = -1456						; size = 64
$T6 = -1392						; size = 16
_vCurrentDir$ = -1376					; size = 16
$T7 = -1360						; size = 16
_vDefaultDir$ = -1344					; size = 16
$T8 = -1328						; size = 16
$T9 = -1312						; size = 16
$T10 = -1296						; size = 16
$T11 = -1280						; size = 16
$T12 = -1264						; size = 16
$T13 = -1248						; size = 16
$T14 = -1232						; size = 16
_zBasis$ = -1216					; size = 16
$T15 = -1200						; size = 16
$T16 = -1184						; size = 16
_yBasis$ = -1168					; size = 16
$T17 = -1152						; size = 16
_xBasis$ = -1136					; size = 16
$T18 = -1120						; size = 64
$T19 = -1056						; size = 64
$T20 = -992						; size = 64
$T21 = -928						; size = 64
_mRot$ = -848						; size = 64
_mRot0$ = -768						; size = 64
$T22 = -688						; size = 64
_mLastRotInv$ = -608					; size = 64
$T23 = -528						; size = 64
_mRotSnapshot$ = -448					; size = 64
$T24 = -368						; size = 16
$T25 = -352						; size = 16
$T26 = -336						; size = 16
$T27 = -320						; size = 64
_mInvView$ = -240					; size = 64
$T28 = -160						; size = 64
_mView$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ PROC	; CDXUTDirectionWidget::UpdateLightDir
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 1163
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1736				; 000006c8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1736]
	mov	ecx, 434				; 000001b2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1164
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 452				; 000001c4H
	call	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
	movaps	XMMWORD PTR $T5[ebp+48], xmm3
	movaps	XMMWORD PTR $T5[ebp+32], xmm2
	movaps	XMMWORD PTR $T5[ebp+16], xmm1
	movaps	XMMWORD PTR $T5[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T5[ebp]
	lea	edi, DWORD PTR $T28[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T28[ebp]
	lea	edi, DWORD PTR _mView$[ebp]
	rep movsd
; Line 1166
	xor	ecx, ecx
	movaps	xmm0, XMMWORD PTR _mView$[ebp]
	movaps	xmm1, XMMWORD PTR _mView$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mView$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mView$[ebp+48]
	call	?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
	movaps	XMMWORD PTR $T4[ebp+48], xmm3
	movaps	XMMWORD PTR $T4[ebp+32], xmm2
	movaps	XMMWORD PTR $T4[ebp+16], xmm1
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T4[ebp]
	lea	edi, DWORD PTR $T27[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T27[ebp]
	lea	edi, DWORD PTR _mInvView$[ebp]
	rep movsd
; Line 1167
	lea	eax, DWORD PTR $T26[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	lea	ecx, DWORD PTR $T25[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
	movaps	XMMWORD PTR tv397[ebp], xmm0
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm1, XMMWORD PTR [eax]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR _mInvView$[ebp+eax]
	movaps	xmm2, XMMWORD PTR tv397[ebp]
	call	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
	movaps	XMMWORD PTR $T24[ebp], xmm0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR $T24[ebp]
	movups	XMMWORD PTR _mInvView$[ebp+edx], xmm0
; Line 1169
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
	movaps	XMMWORD PTR $T3[ebp+48], xmm3
	movaps	XMMWORD PTR $T3[ebp+32], xmm2
	movaps	XMMWORD PTR $T3[ebp+16], xmm1
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T3[ebp]
	lea	edi, DWORD PTR $T23[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T23[ebp]
	lea	edi, DWORD PTR _mRotSnapshot$[ebp]
	rep movsd
; Line 1170
	xor	ecx, ecx
	movaps	xmm0, XMMWORD PTR _mRotSnapshot$[ebp]
	movaps	xmm1, XMMWORD PTR _mRotSnapshot$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mRotSnapshot$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mRotSnapshot$[ebp+48]
	call	?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
	movaps	XMMWORD PTR $T2[ebp+48], xmm3
	movaps	XMMWORD PTR $T2[ebp+32], xmm2
	movaps	XMMWORD PTR $T2[ebp+16], xmm1
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR $T22[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T22[ebp]
	lea	edi, DWORD PTR _mLastRotInv$[ebp]
	rep movsd
; Line 1172
	lea	eax, DWORD PTR _mRot0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	?GetRotationMatrix@CD3DArcBall@@QBE?AUXMMATRIX@DirectX@@XZ ; CD3DArcBall::GetRotationMatrix
; Line 1173
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	movaps	xmm0, XMMWORD PTR _mRot0$[ebp]
	movaps	xmm1, XMMWORD PTR _mRot0$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mRot0$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mRot0$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 1177
	mov	ecx, DWORD PTR _this$[ebp]
	call	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T21[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T21[ebp]
	lea	edi, DWORD PTR _mRot$[ebp]
	rep movsd
; Line 1178
	lea	edx, DWORD PTR $T20[ebp]
	lea	ecx, DWORD PTR _mView$[ebp]
	movaps	xmm0, XMMWORD PTR _mLastRotInv$[ebp]
	movaps	xmm1, XMMWORD PTR _mLastRotInv$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mLastRotInv$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mLastRotInv$[ebp+48]
	call	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z	; DirectX::XMMATRIX::operator*
	lea	edx, DWORD PTR $T19[ebp]
	mov	ecx, eax
	movaps	xmm0, XMMWORD PTR _mRot0$[ebp]
	movaps	xmm1, XMMWORD PTR _mRot0$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mRot0$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mRot0$[ebp+48]
	call	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z	; DirectX::XMMATRIX::operator*
	lea	edx, DWORD PTR $T18[ebp]
	mov	ecx, eax
	movaps	xmm0, XMMWORD PTR _mInvView$[ebp]
	movaps	xmm1, XMMWORD PTR _mInvView$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mInvView$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mInvView$[ebp+48]
	call	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z	; DirectX::XMMATRIX::operator*
	lea	ecx, DWORD PTR _mRot$[ebp]
	movaps	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR [eax+16]
	movaps	xmm2, XMMWORD PTR [eax+32]
	movaps	xmm3, XMMWORD PTR [eax+48]
	call	??XXMMATRIX@DirectX@@QAQAAU01@U01@@Z	; DirectX::XMMATRIX::operator*=
; Line 1182
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR _mRot$[ebp+edx]
	call	?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
	movaps	XMMWORD PTR $T17[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T17[ebp]
	movaps	XMMWORD PTR _xBasis$[ebp], xmm0
; Line 1183
	movaps	xmm1, XMMWORD PTR _xBasis$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR _mRot$[ebp+eax]
	call	?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Cross
	movaps	XMMWORD PTR $T16[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T16[ebp]
	movaps	XMMWORD PTR _yBasis$[ebp], xmm0
; Line 1184
	movaps	xmm0, XMMWORD PTR _yBasis$[ebp]
	call	?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	movaps	XMMWORD PTR _yBasis$[ebp], xmm0
; Line 1185
	movaps	xmm1, XMMWORD PTR _yBasis$[ebp]
	movaps	xmm0, XMMWORD PTR _xBasis$[ebp]
	call	?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Cross
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T14[ebp]
	movaps	XMMWORD PTR _zBasis$[ebp], xmm0
; Line 1186
	lea	ecx, DWORD PTR $T13[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm2, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _xBasis$[ebp]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	movups	xmm0, XMMWORD PTR _mRot$[ebp+eax]
	call	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
	movaps	XMMWORD PTR $T12[ebp], xmm0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR $T12[ebp]
	movups	XMMWORD PTR _mRot$[ebp+edx], xmm0
; Line 1187
	lea	eax, DWORD PTR $T11[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm2, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _yBasis$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	movups	xmm0, XMMWORD PTR _mRot$[ebp+ecx]
	call	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
	movaps	XMMWORD PTR $T10[ebp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR $T10[ebp]
	movups	XMMWORD PTR _mRot$[ebp+edx], xmm0
; Line 1188
	lea	eax, DWORD PTR $T9[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm2, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _zBasis$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR _mRot$[ebp+ecx]
	call	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
	movaps	XMMWORD PTR $T8[ebp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR $T8[ebp]
	movups	XMMWORD PTR _mRot$[ebp+edx], xmm0
; Line 1189
	mov	ecx, DWORD PTR _this$[ebp]
	movaps	xmm0, XMMWORD PTR _mRot$[ebp]
	movaps	xmm1, XMMWORD PTR _mRot$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mRot$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mRot$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 1192
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 428				; 000001acH
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _vDefaultDir$[ebp], xmm0
; Line 1193
	movaps	xmm0, XMMWORD PTR _vDefaultDir$[ebp]
	movaps	xmm1, XMMWORD PTR _mRot$[ebp]
	movaps	xmm2, XMMWORD PTR _mRot$[ebp+16]
	movaps	xmm3, XMMWORD PTR _mRot$[ebp+32]
	movaps	xmm4, XMMWORD PTR _mRot$[ebp+48]
	call	?XMVector3TransformNormal@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformNormal
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vCurrentDir$[ebp], xmm0
; Line 1194
	movaps	xmm0, XMMWORD PTR _vCurrentDir$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 440				; 000001b8H
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 1196
	xor	eax, eax
; Line 1197
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@UpdateLigh
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN10@UpdateLigh:
	DD	6
	DD	$LN9@UpdateLigh
$LN9@UpdateLigh:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@UpdateLigh
	DD	-240					; ffffff10H
	DD	64					; 00000040H
	DD	$LN4@UpdateLigh
	DD	-448					; fffffe40H
	DD	64					; 00000040H
	DD	$LN5@UpdateLigh
	DD	-608					; fffffda0H
	DD	64					; 00000040H
	DD	$LN6@UpdateLigh
	DD	-768					; fffffd00H
	DD	64					; 00000040H
	DD	$LN7@UpdateLigh
	DD	-848					; fffffcb0H
	DD	64					; 00000040H
	DD	$LN8@UpdateLigh
$LN8@UpdateLigh:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
$LN7@UpdateLigh:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	48					; 00000030H
	DB	0
$LN6@UpdateLigh:
	DB	109					; 0000006dH
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	0
$LN5@UpdateLigh:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
$LN4@UpdateLigh:
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN3@UpdateLigh:
	DB	109					; 0000006dH
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ ENDP	; CDXUTDirectionWidget::UpdateLightDir
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?StaticOnD3D11DestroyDevice@CDXUTDirectionWidget@@SGXXZ PROC ; CDXUTDirectionWidget::StaticOnD3D11DestroyDevice
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 1226
	push	ebp
	mov	ebp, esp
; Line 1228
	pop	ebp
	ret	0
?StaticOnD3D11DestroyDevice@CDXUTDirectionWidget@@SGXXZ ENDP ; CDXUTDirectionWidget::StaticOnD3D11DestroyDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pd3dDevice$ = 8					; size = 4
_pd3dImmediateContext$ = 12				; size = 4
?StaticOnD3D11CreateDevice@CDXUTDirectionWidget@@SGJPAUID3D11Device@@PAUID3D11DeviceContext@@@Z PROC ; CDXUTDirectionWidget::StaticOnD3D11CreateDevice
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 1216
	push	ebp
	mov	ebp, esp
; Line 1220
	xor	eax, eax
; Line 1221
	pop	ebp
	ret	8
?StaticOnD3D11CreateDevice@CDXUTDirectionWidget@@SGJPAUID3D11Device@@PAUID3D11DeviceContext@@@Z ENDP ; CDXUTDirectionWidget::StaticOnD3D11CreateDevice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -36						; size = 4
_vEyePt$ = -32						; size = 16
_color$ = -16						; size = 16
_mView$ = 8						; size = 4
_mProj$ = 12						; size = 4
?OnRender@CDXUTDirectionWidget@@QAEJT__m128@@ABUXMMATRIX@DirectX@@10@Z PROC ; CDXUTDirectionWidget::OnRender
; _this$ = ecx
; _color$ = xmm0
; _vEyePt$ = xmm1
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 1203
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _vEyePt$[ebp], xmm1
	movaps	XMMWORD PTR _color$[ebp], xmm0
	mov	DWORD PTR _this$[ebp], ecx
; Line 1209
	xor	eax, eax
; Line 1210
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?OnRender@CDXUTDirectionWidget@@QAEJT__m128@@ABUXMMATRIX@DirectX@@10@Z ENDP ; CDXUTDirectionWidget::OnRender
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -24						; size = 4
_iMouseY$1 = -20					; size = 4
_iMouseX$2 = -16					; size = 4
_iMouseY$3 = -12					; size = 4
_iMouseX$4 = -8						; size = 4
_this$ = -4						; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HandleMessages@CDXUTDirectionWidget@@QAEJPAUHWND__@@IIJ@Z PROC ; CDXUTDirectionWidget::HandleMessages
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 1092
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1095
	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 512				; 00000200H
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 21			; 00000015H
	ja	$LN17@HandleMess
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN21@HandleMess[edx]
	jmp	DWORD PTR $LN22@HandleMess[eax*4]
$LN16@HandleMess:
; Line 1103
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	and	edx, 1
	je	SHORT $LN13@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	je	SHORT $LN14@HandleMess
$LN13@HandleMess:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	and	ecx, 2
	je	SHORT $LN12@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 519		; 00000207H
	je	SHORT $LN14@HandleMess
$LN12@HandleMess:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	and	eax, 4
	je	SHORT $LN15@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 516		; 00000204H
	jne	SHORT $LN15@HandleMess
$LN14@HandleMess:
; Line 1105
	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movsx	edx, cx
	mov	DWORD PTR _iMouseX$4[ebp], edx
; Line 1106
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseY$3[ebp], ecx
; Line 1107
	mov	edx, DWORD PTR _iMouseY$3[ebp]
	push	edx
	mov	eax, DWORD PTR _iMouseX$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	?OnBegin@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnBegin
; Line 1108
	mov	esi, esp
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@HandleMess:
; Line 1110
	mov	eax, 1
	jmp	$LN19@HandleMess
$LN11@HandleMess:
; Line 1115
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	?IsBeingDragged@CD3DArcBall@@QBE_NXZ	; CD3DArcBall::IsBeingDragged
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN10@HandleMess
; Line 1117
	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseX$2[ebp], ecx
; Line 1118
	mov	edx, DWORD PTR _lParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movsx	eax, dx
	mov	DWORD PTR _iMouseY$1[ebp], eax
; Line 1119
	mov	ecx, DWORD PTR _iMouseY$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _iMouseX$2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	?OnMove@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnMove
; Line 1120
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ ; CDXUTDirectionWidget::UpdateLightDir
$LN10@HandleMess:
; Line 1122
	mov	eax, 1
	jmp	$LN19@HandleMess
$LN9@HandleMess:
; Line 1131
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	and	ecx, 1
	je	SHORT $LN6@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 514		; 00000202H
	je	SHORT $LN7@HandleMess
$LN6@HandleMess:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	and	eax, 2
	je	SHORT $LN5@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 520		; 00000208H
	je	SHORT $LN7@HandleMess
$LN5@HandleMess:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	and	edx, 4
	je	SHORT $LN8@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 517		; 00000205H
	jne	SHORT $LN8@HandleMess
$LN7@HandleMess:
; Line 1133
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	?OnEnd@CD3DArcBall@@QAEXXZ		; CD3DArcBall::OnEnd
; Line 1134
	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@HandleMess:
; Line 1137
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateLightDir@CDXUTDirectionWidget@@IAEJXZ ; CDXUTDirectionWidget::UpdateLightDir
; Line 1138
	mov	eax, 1
	jmp	SHORT $LN19@HandleMess
$LN4@HandleMess:
; Line 1143
	mov	eax, DWORD PTR _lParam$[ebp]
	cmp	eax, DWORD PTR _hWnd$[ebp]
	je	SHORT $LN3@HandleMess
; Line 1147
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	and	edx, 1
	jne	SHORT $LN1@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	and	ecx, 2
	jne	SHORT $LN1@HandleMess
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	and	eax, 4
	je	SHORT $LN3@HandleMess
$LN1@HandleMess:
; Line 1149
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	?OnEnd@CD3DArcBall@@QAEXXZ		; CD3DArcBall::OnEnd
; Line 1150
	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@HandleMess:
; Line 1153
	mov	eax, 1
	jmp	SHORT $LN19@HandleMess
$LN17@HandleMess:
; Line 1157
	xor	eax, eax
$LN19@HandleMess:
; Line 1158
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN22@HandleMess:
	DD	$LN11@HandleMess
	DD	$LN16@HandleMess
	DD	$LN9@HandleMess
	DD	$LN4@HandleMess
	DD	$LN17@HandleMess
$LN21@HandleMess:
	DB	0
	DB	1
	DB	2
	DB	4
	DB	1
	DB	2
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?HandleMessages@CDXUTDirectionWidget@@QAEJPAUHWND__@@IIJ@Z ENDP ; CDXUTDirectionWidget::HandleMessages
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -240						; size = 64
$T2 = -172						; size = 12
$T3 = -160						; size = 64
_id$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
??0CDXUTDirectionWidget@@QAE@XZ PROC			; CDXUTDirectionWidget::CDXUTDirectionWidget
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 1076
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0XMFLOAT4X4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4X4::XMFLOAT4X4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0XMFLOAT4X4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4X4::XMFLOAT4X4
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+128], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	call	??0CD3DArcBall@@QAE@XZ			; CD3DArcBall::CD3DArcBall
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 428				; 000001acH
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 440				; 000001b8H
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 452				; 000001c4H
	call	??0XMFLOAT4X4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4X4::XMFLOAT4X4
; Line 1077
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@MMM@Z		; DirectX::XMFLOAT3::XMFLOAT3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 428				; 000001acH
	call	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT3::operator=
; Line 1078
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 428				; 000001acH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 440				; 000001b8H
	call	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT3::operator=
; Line 1080
	call	?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ ; DirectX::XMMatrixIdentity
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T3[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T3[ebp]
	lea	edi, DWORD PTR _id$[ebp]
	rep movsd
; Line 1082
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 452				; 000001c4H
	movaps	xmm0, XMMWORD PTR _id$[ebp]
	movaps	xmm1, XMMWORD PTR _id$[ebp+16]
	movaps	xmm2, XMMWORD PTR _id$[ebp+32]
	movaps	xmm3, XMMWORD PTR _id$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 1083
	mov	ecx, DWORD PTR _this$[ebp]
	movaps	xmm0, XMMWORD PTR _id$[ebp]
	movaps	xmm1, XMMWORD PTR _id$[ebp+16]
	movaps	xmm2, XMMWORD PTR _id$[ebp+32]
	movaps	xmm3, XMMWORD PTR _id$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 1084
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	movaps	xmm0, XMMWORD PTR _id$[ebp]
	movaps	xmm1, XMMWORD PTR _id$[ebp+16]
	movaps	xmm2, XMMWORD PTR _id$[ebp+32]
	movaps	xmm3, XMMWORD PTR _id$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 1085
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@CDXUTDirec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN5@CDXUTDirec:
	DD	1
	DD	$LN4@CDXUTDirec
$LN4@CDXUTDirec:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@CDXUTDirec
$LN3@CDXUTDirec:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
??0CDXUTDirectionWidget@@QAE@XZ ENDP			; CDXUTDirectionWidget::CDXUTDirectionWidget
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetRadius@CModelViewerCamera@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fDefaultRadius$ = 8					; size = 4
_fMinRadius$ = 12					; size = 4
_fMaxRadius$ = 16					; size = 4
?SetRadius@CModelViewerCamera@@QAEXMMM@Z PROC		; CModelViewerCamera::SetRadius, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.h
; Line 331
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 332
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fDefaultRadius$[ebp]
	movss	DWORD PTR [eax+1460], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fDefaultRadius$[ebp]
	movss	DWORD PTR [ecx+1464], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fMinRadius$[ebp]
	movss	DWORD PTR [edx+1468], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fMaxRadius$[ebp]
	movss	DWORD PTR [eax+1472], xmm0
; Line 333
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1458], 1
; Line 334
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetRadius@CModelViewerCamera@@QAEXMMM@Z ENDP		; CModelViewerCamera::SetRadius
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetWindow@CModelViewerCamera@@QAEXHHM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nWidth$ = 8						; size = 4
_nHeight$ = 12						; size = 4
_fArcballRadius$ = 16					; size = 4
?SetWindow@CModelViewerCamera@@QAEXHHM@Z PROC		; CModelViewerCamera::SetWindow, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.h
; Line 326
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 327
	push	ecx
	movss	xmm0, DWORD PTR _fArcballRadius$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _nHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nWidth$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?SetWindow@CD3DArcBall@@QAEXHHM@Z	; CD3DArcBall::SetWindow
; Line 328
	push	ecx
	movss	xmm0, DWORD PTR _fArcballRadius$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _nHeight$[ebp]
	push	edx
	mov	eax, DWORD PTR _nWidth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 948				; 000003b4H
	call	?SetWindow@CD3DArcBall@@QAEXHHM@Z	; CD3DArcBall::SetWindow
; Line 329
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetWindow@CModelViewerCamera@@QAEXHHM@Z ENDP		; CModelViewerCamera::SetWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -416						; size = 64
$T2 = -352						; size = 16
_len$ = -324						; size = 4
$T3 = -320						; size = 16
_vEyeToPoint$ = -304					; size = 16
$T4 = -288						; size = 16
_quat$ = -256						; size = 16
$T5 = -224						; size = 64
$T6 = -160						; size = 16
_mRotation$ = -128					; size = 64
_this$ = -52						; size = 4
_vLookatPt$ = -48					; size = 16
_vEyePt$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
?SetViewParams@CModelViewerCamera@@UAEXT__m128@@0@Z PROC ; CModelViewerCamera::SetViewParams
; _this$ = ecx
; _vEyePt$ = xmm0
; _vLookatPt$ = xmm1
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 963
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 424				; 000001a8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-424]
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _vLookatPt$[ebp], xmm1
	movaps	XMMWORD PTR _vEyePt$[ebp], xmm0
	mov	DWORD PTR _this$[ebp], ecx
; Line 964
	movaps	xmm1, XMMWORD PTR _vLookatPt$[ebp]
	movaps	xmm0, XMMWORD PTR _vEyePt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetViewParams@CBaseCamera@@UAEXT__m128@@0@Z ; CBaseCamera::SetViewParams
; Line 967
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR1
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm2, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _vLookatPt$[ebp]
	movaps	xmm0, XMMWORD PTR _vEyePt$[ebp]
	call	?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ; DirectX::XMMatrixLookAtLH
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T5[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T5[ebp]
	lea	edi, DWORD PTR _mRotation$[ebp]
	rep movsd
; Line 968
	movaps	xmm0, XMMWORD PTR _mRotation$[ebp]
	movaps	xmm1, XMMWORD PTR _mRotation$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mRotation$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mRotation$[ebp+48]
	call	?XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@1@@Z ; DirectX::XMQuaternionRotationMatrix
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _quat$[ebp], xmm0
; Line 969
	lea	ecx, DWORD PTR _quat$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 948				; 000003b4H
	call	?SetQuatNow@CD3DArcBall@@QAEXABT__m128@@@Z ; CD3DArcBall::SetQuatNow
; Line 972
	movaps	xmm1, XMMWORD PTR _vEyePt$[ebp]
	movaps	xmm0, XMMWORD PTR _vLookatPt$[ebp]
	call	?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorSubtract
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vEyeToPoint$[ebp], xmm0
; Line 973
	movaps	xmm0, XMMWORD PTR _vEyeToPoint$[ebp]
	call	?XMVector3Length@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Length
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	call	?XMVectorGetX@DirectX@@YQMT__m128@@@Z	; DirectX::XMVectorGetX
	movss	DWORD PTR _len$[ebp], xmm0
; Line 974
	push	ecx
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _len$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRadius@CModelViewerCamera@@QAEXMMM@Z ; CModelViewerCamera::SetRadius
; Line 977
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1458], 1
; Line 978
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SetViewPar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN6@SetViewPar:
	DD	2
	DD	$LN5@SetViewPar
$LN5@SetViewPar:
	DD	-128					; ffffff80H
	DD	64					; 00000040H
	DD	$LN3@SetViewPar
	DD	-256					; ffffff00H
	DD	16					; 00000010H
	DD	$LN4@SetViewPar
$LN4@SetViewPar:
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
$LN3@SetViewPar:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
?SetViewParams@CModelViewerCamera@@UAEXT__m128@@0@Z ENDP ; CModelViewerCamera::SetViewParams
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -224						; size = 64
$T2 = -160						; size = 64
_id$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Reset@CModelViewerCamera@@UAEXXZ PROC			; CModelViewerCamera::Reset
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 943
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 944
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CBaseCamera@@UAEXXZ		; CBaseCamera::Reset
; Line 946
	call	?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ ; DirectX::XMMatrixIdentity
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR _id$[ebp]
	rep movsd
; Line 947
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1380				; 00000564H
	movaps	xmm0, XMMWORD PTR _id$[ebp]
	movaps	xmm1, XMMWORD PTR _id$[ebp+16]
	movaps	xmm2, XMMWORD PTR _id$[ebp+32]
	movaps	xmm3, XMMWORD PTR _id$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 948
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1316				; 00000524H
	movaps	xmm0, XMMWORD PTR _id$[ebp]
	movaps	xmm1, XMMWORD PTR _id$[ebp+16]
	movaps	xmm2, XMMWORD PTR _id$[ebp+32]
	movaps	xmm3, XMMWORD PTR _id$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 949
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1252				; 000004e4H
	movaps	xmm0, XMMWORD PTR _id$[ebp]
	movaps	xmm1, XMMWORD PTR _id$[ebp+16]
	movaps	xmm2, XMMWORD PTR _id$[ebp+32]
	movaps	xmm3, XMMWORD PTR _id$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 950
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1476				; 000005c4H
	movaps	xmm0, XMMWORD PTR _id$[ebp]
	movaps	xmm1, XMMWORD PTR _id$[ebp+16]
	movaps	xmm2, XMMWORD PTR _id$[ebp+32]
	movaps	xmm3, XMMWORD PTR _id$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 952
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1464]
	mov	DWORD PTR [eax+1460], edx
; Line 953
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?Reset@CD3DArcBall@@QAEXXZ		; CD3DArcBall::Reset
; Line 954
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 948				; 000003b4H
	call	?Reset@CD3DArcBall@@QAEXXZ		; CD3DArcBall::Reset
; Line 955
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Reset
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN5@Reset:
	DD	1
	DD	$LN4@Reset
$LN4@Reset:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@Reset
$LN3@Reset:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
?Reset@CModelViewerCamera@@UAEXXZ ENDP			; CModelViewerCamera::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rc$ = 8						; size = 4
?SetDragRect@CModelViewerCamera@@UAEXABUtagRECT@@@Z PROC ; CModelViewerCamera::SetDragRect
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 929
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 930
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetDragRect@CBaseCamera@@UAEXABUtagRECT@@@Z ; CBaseCamera::SetDragRect
; Line 932
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?SetOffset@CD3DArcBall@@QAEXHH@Z	; CD3DArcBall::SetOffset
; Line 933
	mov	edx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 948				; 000003b4H
	call	?SetOffset@CD3DArcBall@@QAEXHH@Z	; CD3DArcBall::SetOffset
; Line 935
	push	ecx
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _rc$[ebp]
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWindow@CModelViewerCamera@@QAEXHHM@Z ; CModelViewerCamera::SetWindow
; Line 936
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDragRect@CModelViewerCamera@@UAEXABUtagRECT@@@Z ENDP ; CModelViewerCamera::SetDragRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv887 = -3184						; size = 16
tv141 = -3153						; size = 1
$T1 = -3152						; size = 64
$T2 = -3088						; size = 64
$T3 = -3024						; size = 64
$T4 = -2960						; size = 64
$T5 = -2896						; size = 64
$T6 = -2832						; size = 64
$T7 = -2768						; size = 64
$T8 = -2704						; size = 64
$T9 = -2640						; size = 64
_mWorld$ = -2560					; size = 64
$T10 = -2480						; size = 64
_mTrans$ = -2400					; size = 64
$T11 = -2320						; size = 16
$T12 = -2304						; size = 16
$T13 = -2288						; size = 16
$T14 = -2272						; size = 16
$T15 = -2256						; size = 16
$T16 = -2240						; size = 16
$T17 = -2224						; size = 16
$T18 = -2208						; size = 16
$T19 = -2192						; size = 16
_zBasis$ = -2176					; size = 16
$T20 = -2160						; size = 16
$T21 = -2144						; size = 16
_yBasis$ = -2128					; size = 16
$T22 = -2112						; size = 16
_xBasis$ = -2096					; size = 16
_mCameraRotDelta$23 = -2064				; size = 64
$T24 = -1984						; size = 64
_mCameraLastRotInv$25 = -1904				; size = 64
$T26 = -1824						; size = 64
_mCameraRotLast$27 = -1744				; size = 64
$T28 = -1664						; size = 64
$T29 = -1600						; size = 64
$T30 = -1536						; size = 64
$T31 = -1472						; size = 64
_mModelRot$ = -1392					; size = 64
_mModelRot0$ = -1312					; size = 64
$T32 = -1232						; size = 64
_mModelLastRotInv$ = -1152				; size = 64
$T33 = -1072						; size = 64
_mModelLastRot$ = -992					; size = 64
$T34 = -912						; size = 16
$T35 = -896						; size = 16
$T36 = -880						; size = 16
$T37 = -864						; size = 64
_mInvView$ = -784					; size = 64
$T38 = -704						; size = 64
_mView$ = -624						; size = 64
$T39 = -544						; size = 16
$T40 = -528						; size = 16
_vEye$ = -512						; size = 16
$T41 = -496						; size = 16
$T42 = -480						; size = 16
_vLookAt$ = -448					; size = 16
$T43 = -416						; size = 16
_vPosDeltaWorld$ = -400					; size = 16
$T44 = -384						; size = 16
$T45 = -368						; size = 16
_vWorldAhead$ = -352					; size = 16
$T46 = -336						; size = 16
$T47 = -320						; size = 16
_vWorldUp$ = -304					; size = 16
$T48 = -288						; size = 64
$T49 = -224						; size = 64
_mCameraRot$ = -144					; size = 64
$T50 = -64						; size = 16
$T51 = -48						; size = 16
_vPosDelta$ = -32					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_fElapsedTime$ = 8					; size = 4
?FrameMove@CModelViewerCamera@@UAEXM@Z PROC		; CModelViewerCamera::FrameMove
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 824
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 3192				; 00000c78H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-3192]
	mov	ecx, 798				; 0000031eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 825
	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+436]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@FrameMove
; Line 826
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@FrameMove:
; Line 830
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1458]
	test	ecx, ecx
	jne	SHORT $LN4@FrameMove
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+432], 0
	jne	SHORT $LN4@FrameMove
; Line 831
	jmp	$LN6@FrameMove
$LN4@FrameMove:
; Line 833
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1458], 0
; Line 840
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+464], 0
	je	SHORT $LN8@FrameMove
	mov	BYTE PTR tv141[ebp], 1
	jmp	SHORT $LN9@FrameMove
$LN8@FrameMove:
	mov	BYTE PTR tv141[ebp], 0
$LN9@FrameMove:
	push	1
	movzx	edx, BYTE PTR tv141[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+625]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInput@CBaseCamera@@IAEX_N00@Z	; CBaseCamera::GetInput
; Line 843
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateVelocity@CBaseCamera@@IAEXM@Z	; CBaseCamera::UpdateVelocity
; Line 846
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 556				; 0000022cH
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T51[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T51[ebp]
	movss	xmm1, DWORD PTR _fElapsedTime$[ebx]
	call	??DDirectX@@YQ?AT__m128@@T1@M@Z		; DirectX::operator*
	movaps	XMMWORD PTR $T50[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T50[ebp]
	movaps	XMMWORD PTR _vPosDelta$[ebp], xmm0
; Line 849
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+468], 0
	je	SHORT $LN3@FrameMove
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1448], 8
	jne	SHORT $LN3@FrameMove
; Line 850
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+468]
	mov	edx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [edx+1460]
	mulss	xmm0, DWORD PTR __real@3dcccccd
	divss	xmm0, DWORD PTR __real@42f00000
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+1460]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+1460], xmm1
$LN3@FrameMove:
; Line 851
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1460				; 000005b4H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1472				; 000005c0H
	push	eax
	call	??$min@M@std@@YAABMABM0@Z		; std::min<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+1460], edx
; Line 852
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1460				; 000005b4H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1468				; 000005bcH
	push	ecx
	call	??$max@M@std@@YAABMABM0@Z		; std::max<float>
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+1460], eax
; Line 853
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+468], 0
; Line 856
	lea	edx, DWORD PTR $T49[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 948				; 000003b4H
	call	?GetRotationMatrix@CD3DArcBall@@QBE?AUXMMATRIX@DirectX@@XZ ; CD3DArcBall::GetRotationMatrix
	xor	ecx, ecx
	movaps	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR [eax+16]
	movaps	xmm2, XMMWORD PTR [eax+32]
	movaps	xmm3, XMMWORD PTR [eax+48]
	call	?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
	movaps	XMMWORD PTR $T9[ebp+48], xmm3
	movaps	XMMWORD PTR $T9[ebp+32], xmm2
	movaps	XMMWORD PTR $T9[ebp+16], xmm1
	movaps	XMMWORD PTR $T9[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T9[ebp]
	lea	edi, DWORD PTR $T48[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T48[ebp]
	lea	edi, DWORD PTR _mCameraRot$[ebp]
	rep movsd
; Line 859
	lea	eax, DWORD PTR $T47[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR1
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _mCameraRot$[ebp]
	movaps	xmm2, XMMWORD PTR _mCameraRot$[ebp+16]
	movaps	xmm3, XMMWORD PTR _mCameraRot$[ebp+32]
	movaps	xmm4, XMMWORD PTR _mCameraRot$[ebp+48]
	call	?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformCoord
	movaps	XMMWORD PTR $T46[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T46[ebp]
	movaps	XMMWORD PTR _vWorldUp$[ebp], xmm0
; Line 860
	lea	ecx, DWORD PTR $T45[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR2
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _mCameraRot$[ebp]
	movaps	xmm2, XMMWORD PTR _mCameraRot$[ebp+16]
	movaps	xmm3, XMMWORD PTR _mCameraRot$[ebp+32]
	movaps	xmm4, XMMWORD PTR _mCameraRot$[ebp+48]
	call	?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformCoord
	movaps	XMMWORD PTR $T44[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T44[ebp]
	movaps	XMMWORD PTR _vWorldAhead$[ebp], xmm0
; Line 863
	movaps	xmm0, XMMWORD PTR _vPosDelta$[ebp]
	movaps	xmm1, XMMWORD PTR _mCameraRot$[ebp]
	movaps	xmm2, XMMWORD PTR _mCameraRot$[ebp+16]
	movaps	xmm3, XMMWORD PTR _mCameraRot$[ebp+32]
	movaps	xmm4, XMMWORD PTR _mCameraRot$[ebp+48]
	call	?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformCoord
	movaps	XMMWORD PTR $T43[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T43[ebp]
	movaps	XMMWORD PTR _vPosDeltaWorld$[ebp], xmm0
; Line 866
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 520				; 00000208H
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T42[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T42[ebp]
	movaps	XMMWORD PTR _vLookAt$[ebp], xmm0
; Line 867
	movaps	xmm0, XMMWORD PTR _vPosDeltaWorld$[ebp]
	lea	ecx, DWORD PTR _vLookAt$[ebp]
	call	??YDirectX@@YQAAT__m128@@AAT1@T1@@Z	; DirectX::operator+=
; Line 868
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+627]
	test	eax, eax
	je	SHORT $LN2@FrameMove
; Line 869
	movaps	xmm0, XMMWORD PTR _vLookAt$[ebp]
	lea	ecx, DWORD PTR $T41[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstrainToBoundary@CBaseCamera@@IAE?AT__m128@@T2@@Z ; CBaseCamera::ConstrainToBoundary
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR _vLookAt$[ebp], xmm0
$LN2@FrameMove:
; Line 870
	movaps	xmm0, XMMWORD PTR _vLookAt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 520				; 00000208H
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 873
	movaps	xmm0, XMMWORD PTR _vWorldAhead$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1460]
	call	??DDirectX@@YQ?AT__m128@@T1@M@Z		; DirectX::operator*
	movaps	XMMWORD PTR $T40[ebp], xmm0
	movaps	xmm1, XMMWORD PTR $T40[ebp]
	movaps	xmm0, XMMWORD PTR _vLookAt$[ebp]
	call	??GDirectX@@YQ?AT__m128@@T1@0@Z		; DirectX::operator-
	movaps	XMMWORD PTR $T39[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T39[ebp]
	movaps	XMMWORD PTR _vEye$[ebp], xmm0
; Line 874
	movaps	xmm0, XMMWORD PTR _vEye$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 508				; 000001fcH
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 877
	movaps	xmm2, XMMWORD PTR _vWorldUp$[ebp]
	movaps	xmm1, XMMWORD PTR _vLookAt$[ebp]
	movaps	xmm0, XMMWORD PTR _vEye$[ebp]
	call	?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ; DirectX::XMMatrixLookAtLH
	movaps	XMMWORD PTR $T8[ebp+48], xmm3
	movaps	XMMWORD PTR $T8[ebp+32], xmm2
	movaps	XMMWORD PTR $T8[ebp+16], xmm1
	movaps	XMMWORD PTR $T8[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T8[ebp]
	lea	edi, DWORD PTR $T38[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T38[ebp]
	lea	edi, DWORD PTR _mView$[ebp]
	rep movsd
; Line 878
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	movaps	xmm0, XMMWORD PTR _mView$[ebp]
	movaps	xmm1, XMMWORD PTR _mView$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mView$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mView$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 880
	xor	ecx, ecx
	movaps	xmm0, XMMWORD PTR _mView$[ebp]
	movaps	xmm1, XMMWORD PTR _mView$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mView$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mView$[ebp+48]
	call	?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
	movaps	XMMWORD PTR $T7[ebp+48], xmm3
	movaps	XMMWORD PTR $T7[ebp+32], xmm2
	movaps	XMMWORD PTR $T7[ebp+16], xmm1
	movaps	XMMWORD PTR $T7[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T7[ebp]
	lea	edi, DWORD PTR $T37[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T37[ebp]
	lea	edi, DWORD PTR _mInvView$[ebp]
	rep movsd
; Line 881
	lea	eax, DWORD PTR $T36[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	lea	ecx, DWORD PTR $T35[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
	movaps	XMMWORD PTR tv887[ebp], xmm0
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm1, XMMWORD PTR [eax]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR _mInvView$[ebp+eax]
	movaps	xmm2, XMMWORD PTR tv887[ebp]
	call	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
	movaps	XMMWORD PTR $T34[ebp], xmm0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR $T34[ebp]
	movups	XMMWORD PTR _mInvView$[ebp+edx], xmm0
; Line 883
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1252				; 000004e4H
	call	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
	movaps	XMMWORD PTR $T6[ebp+48], xmm3
	movaps	XMMWORD PTR $T6[ebp+32], xmm2
	movaps	XMMWORD PTR $T6[ebp+16], xmm1
	movaps	XMMWORD PTR $T6[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T6[ebp]
	lea	edi, DWORD PTR $T33[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T33[ebp]
	lea	edi, DWORD PTR _mModelLastRot$[ebp]
	rep movsd
; Line 884
	xor	ecx, ecx
	movaps	xmm0, XMMWORD PTR _mModelLastRot$[ebp]
	movaps	xmm1, XMMWORD PTR _mModelLastRot$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mModelLastRot$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mModelLastRot$[ebp+48]
	call	?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
	movaps	XMMWORD PTR $T5[ebp+48], xmm3
	movaps	XMMWORD PTR $T5[ebp+32], xmm2
	movaps	XMMWORD PTR $T5[ebp+16], xmm1
	movaps	XMMWORD PTR $T5[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T5[ebp]
	lea	edi, DWORD PTR $T32[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T32[ebp]
	lea	edi, DWORD PTR _mModelLastRotInv$[ebp]
	rep movsd
; Line 888
	lea	eax, DWORD PTR _mModelRot0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?GetRotationMatrix@CD3DArcBall@@QBE?AUXMMATRIX@DirectX@@XZ ; CD3DArcBall::GetRotationMatrix
; Line 889
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1316				; 00000524H
	call	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
	movaps	XMMWORD PTR $T4[ebp+48], xmm3
	movaps	XMMWORD PTR $T4[ebp+32], xmm2
	movaps	XMMWORD PTR $T4[ebp+16], xmm1
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T4[ebp]
	lea	edi, DWORD PTR $T31[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T31[ebp]
	lea	edi, DWORD PTR _mModelRot$[ebp]
	rep movsd
; Line 890
	lea	edx, DWORD PTR $T30[ebp]
	lea	ecx, DWORD PTR _mView$[ebp]
	movaps	xmm0, XMMWORD PTR _mModelLastRotInv$[ebp]
	movaps	xmm1, XMMWORD PTR _mModelLastRotInv$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mModelLastRotInv$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mModelLastRotInv$[ebp+48]
	call	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z	; DirectX::XMMATRIX::operator*
	lea	edx, DWORD PTR $T29[ebp]
	mov	ecx, eax
	movaps	xmm0, XMMWORD PTR _mModelRot0$[ebp]
	movaps	xmm1, XMMWORD PTR _mModelRot0$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mModelRot0$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mModelRot0$[ebp+48]
	call	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z	; DirectX::XMMATRIX::operator*
	lea	edx, DWORD PTR $T28[ebp]
	mov	ecx, eax
	movaps	xmm0, XMMWORD PTR _mInvView$[ebp]
	movaps	xmm1, XMMWORD PTR _mInvView$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mInvView$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mInvView$[ebp+48]
	call	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z	; DirectX::XMMATRIX::operator*
	lea	ecx, DWORD PTR _mModelRot$[ebp]
	movaps	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR [eax+16]
	movaps	xmm2, XMMWORD PTR [eax+32]
	movaps	xmm3, XMMWORD PTR [eax+48]
	call	??XXMMATRIX@DirectX@@QAQAAU01@U01@@Z	; DirectX::XMMATRIX::operator*=
; Line 892
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 948				; 000003b4H
	call	?IsBeingDragged@CD3DArcBall@@QBE_NXZ	; CD3DArcBall::IsBeingDragged
	movzx	ecx, al
	test	ecx, ecx
	je	$LN1@FrameMove
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1456]
	test	eax, eax
	je	$LN1@FrameMove
	mov	ecx, 1
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+436]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	edx, al
	test	edx, edx
	jne	$LN1@FrameMove
; Line 895
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1476				; 000005c4H
	call	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
	movaps	XMMWORD PTR $T3[ebp+48], xmm3
	movaps	XMMWORD PTR $T3[ebp+32], xmm2
	movaps	XMMWORD PTR $T3[ebp+16], xmm1
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T3[ebp]
	lea	edi, DWORD PTR $T26[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T26[ebp]
	lea	edi, DWORD PTR _mCameraRotLast$27[ebp]
	rep movsd
; Line 896
	xor	ecx, ecx
	movaps	xmm0, XMMWORD PTR _mCameraRotLast$27[ebp]
	movaps	xmm1, XMMWORD PTR _mCameraRotLast$27[ebp+16]
	movaps	xmm2, XMMWORD PTR _mCameraRotLast$27[ebp+32]
	movaps	xmm3, XMMWORD PTR _mCameraRotLast$27[ebp+48]
	call	?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
	movaps	XMMWORD PTR $T2[ebp+48], xmm3
	movaps	XMMWORD PTR $T2[ebp+32], xmm2
	movaps	XMMWORD PTR $T2[ebp+16], xmm1
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR $T24[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T24[ebp]
	lea	edi, DWORD PTR _mCameraLastRotInv$25[ebp]
	rep movsd
; Line 897
	lea	edx, DWORD PTR _mCameraRotDelta$23[ebp]
	lea	ecx, DWORD PTR _mCameraLastRotInv$25[ebp]
	movaps	xmm0, XMMWORD PTR _mCameraRot$[ebp]
	movaps	xmm1, XMMWORD PTR _mCameraRot$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mCameraRot$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mCameraRot$[ebp+48]
	call	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z	; DirectX::XMMATRIX::operator*
; Line 898
	lea	ecx, DWORD PTR _mModelRot$[ebp]
	movaps	xmm0, XMMWORD PTR _mCameraRotDelta$23[ebp]
	movaps	xmm1, XMMWORD PTR _mCameraRotDelta$23[ebp+16]
	movaps	xmm2, XMMWORD PTR _mCameraRotDelta$23[ebp+32]
	movaps	xmm3, XMMWORD PTR _mCameraRotDelta$23[ebp+48]
	call	??XXMMATRIX@DirectX@@QAQAAU01@U01@@Z	; DirectX::XMMATRIX::operator*=
$LN1@FrameMove:
; Line 901
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1252				; 000004e4H
	movaps	xmm0, XMMWORD PTR _mModelRot0$[ebp]
	movaps	xmm1, XMMWORD PTR _mModelRot0$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mModelRot0$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mModelRot0$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 902
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1476				; 000005c4H
	movaps	xmm0, XMMWORD PTR _mCameraRot$[ebp]
	movaps	xmm1, XMMWORD PTR _mCameraRot$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mCameraRot$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mCameraRot$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 906
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movups	xmm0, XMMWORD PTR _mModelRot$[ebp+ecx]
	call	?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
	movaps	XMMWORD PTR $T22[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T22[ebp]
	movaps	XMMWORD PTR _xBasis$[ebp], xmm0
; Line 907
	movaps	xmm1, XMMWORD PTR _xBasis$[ebp]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _mModelRot$[ebp+edx]
	call	?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Cross
	movaps	XMMWORD PTR $T21[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T21[ebp]
	movaps	XMMWORD PTR _yBasis$[ebp], xmm0
; Line 908
	movaps	xmm0, XMMWORD PTR _yBasis$[ebp]
	call	?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
	movaps	XMMWORD PTR $T20[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T20[ebp]
	movaps	XMMWORD PTR _yBasis$[ebp], xmm0
; Line 909
	movaps	xmm1, XMMWORD PTR _yBasis$[ebp]
	movaps	xmm0, XMMWORD PTR _xBasis$[ebp]
	call	?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Cross
	movaps	XMMWORD PTR $T19[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T19[ebp]
	movaps	XMMWORD PTR _zBasis$[ebp], xmm0
; Line 911
	lea	eax, DWORD PTR $T18[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm2, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _xBasis$[ebp]
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR _mModelRot$[ebp+edx]
	call	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
	movaps	XMMWORD PTR $T17[ebp], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movups	xmm0, XMMWORD PTR $T17[ebp]
	movups	XMMWORD PTR _mModelRot$[ebp+ecx], xmm0
; Line 912
	lea	edx, DWORD PTR $T16[ebp]
	push	edx
	mov	ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm2, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _yBasis$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movups	xmm0, XMMWORD PTR _mModelRot$[ebp+eax]
	call	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
	movaps	XMMWORD PTR $T15[ebp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	movups	xmm0, XMMWORD PTR $T15[ebp]
	movups	XMMWORD PTR _mModelRot$[ebp+ecx], xmm0
; Line 913
	lea	edx, DWORD PTR $T14[ebp]
	push	edx
	mov	ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm2, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _zBasis$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR _mModelRot$[ebp+eax]
	call	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
	movaps	XMMWORD PTR $T13[ebp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR $T13[ebp]
	movups	XMMWORD PTR _mModelRot$[ebp+ecx], xmm0
; Line 916
	lea	edx, DWORD PTR $T12[ebp]
	push	edx
	mov	ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm2, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _vLookAt$[ebp]
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	movups	xmm0, XMMWORD PTR _mModelRot$[ebp+ecx]
	call	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
	movaps	XMMWORD PTR $T11[ebp], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR $T11[ebp]
	movups	XMMWORD PTR _mModelRot$[ebp+eax], xmm0
; Line 918
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1316				; 00000524H
	movaps	xmm0, XMMWORD PTR _mModelRot$[ebp]
	movaps	xmm1, XMMWORD PTR _mModelRot$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mModelRot$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mModelRot$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 921
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [ecx+1248]
	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+1244]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+1240]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	call	?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T10[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T10[ebp]
	lea	edi, DWORD PTR _mTrans$[ebp]
	rep movsd
; Line 922
	lea	edx, DWORD PTR _mWorld$[ebp]
	lea	ecx, DWORD PTR _mTrans$[ebp]
	movaps	xmm0, XMMWORD PTR _mModelRot$[ebp]
	movaps	xmm1, XMMWORD PTR _mModelRot$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mModelRot$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mModelRot$[ebp+48]
	call	??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z	; DirectX::XMMATRIX::operator*
; Line 923
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1380				; 00000564H
	movaps	xmm0, XMMWORD PTR _mWorld$[ebp]
	movaps	xmm1, XMMWORD PTR _mWorld$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mWorld$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mWorld$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
$LN6@FrameMove:
; Line 924
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@FrameMove
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	1
$LN24@FrameMove:
	DD	13					; 0000000dH
	DD	$LN23@FrameMove
$LN23@FrameMove:
	DD	-144					; ffffff70H
	DD	64					; 00000040H
	DD	$LN10@FrameMove
	DD	-448					; fffffe40H
	DD	16					; 00000010H
	DD	$LN11@FrameMove
	DD	-624					; fffffd90H
	DD	64					; 00000040H
	DD	$LN12@FrameMove
	DD	-784					; fffffcf0H
	DD	64					; 00000040H
	DD	$LN13@FrameMove
	DD	-992					; fffffc20H
	DD	64					; 00000040H
	DD	$LN14@FrameMove
	DD	-1152					; fffffb80H
	DD	64					; 00000040H
	DD	$LN15@FrameMove
	DD	-1312					; fffffae0H
	DD	64					; 00000040H
	DD	$LN16@FrameMove
	DD	-1392					; fffffa90H
	DD	64					; 00000040H
	DD	$LN17@FrameMove
	DD	-1744					; fffff930H
	DD	64					; 00000040H
	DD	$LN18@FrameMove
	DD	-1904					; fffff890H
	DD	64					; 00000040H
	DD	$LN19@FrameMove
	DD	-2064					; fffff7f0H
	DD	64					; 00000040H
	DD	$LN20@FrameMove
	DD	-2400					; fffff6a0H
	DD	64					; 00000040H
	DD	$LN21@FrameMove
	DD	-2560					; fffff600H
	DD	64					; 00000040H
	DD	$LN22@FrameMove
$LN22@FrameMove:
	DB	109					; 0000006dH
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
$LN21@FrameMove:
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN20@FrameMove:
	DB	109					; 0000006dH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN19@FrameMove:
	DB	109					; 0000006dH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	0
$LN18@FrameMove:
	DB	109					; 0000006dH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN17@FrameMove:
	DB	109					; 0000006dH
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
$LN16@FrameMove:
	DB	109					; 0000006dH
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	48					; 00000030H
	DB	0
$LN15@FrameMove:
	DB	109					; 0000006dH
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	0
$LN14@FrameMove:
	DB	109					; 0000006dH
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	76					; 0000004cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
$LN13@FrameMove:
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN12@FrameMove:
	DB	109					; 0000006dH
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN11@FrameMove:
	DB	118					; 00000076H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	65					; 00000041H
	DB	116					; 00000074H
	DB	0
$LN10@FrameMove:
	DB	109					; 0000006dH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
?FrameMove@CModelViewerCamera@@UAEXM@Z ENDP		; CModelViewerCamera::FrameMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_iMouseY$1 = -28					; size = 4
_iMouseX$2 = -24					; size = 4
_iMouseY$3 = -20					; size = 4
_iMouseX$4 = -16					; size = 4
_iMouseY$5 = -12					; size = 4
_iMouseX$6 = -8						; size = 4
_this$ = -4						; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HandleMessages@CModelViewerCamera@@UAEJPAUHWND__@@IIJ@Z PROC ; CModelViewerCamera::HandleMessages
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 986
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 987
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uMsg$[ebp]
	push	edx
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z ; CBaseCamera::HandleMessages
; Line 991
	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	je	SHORT $LN28@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 515		; 00000203H
	jne	SHORT $LN29@HandleMess
$LN28@HandleMess:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1444]
	and	edx, 1
	jne	SHORT $LN30@HandleMess
$LN29@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 519		; 00000207H
	je	SHORT $LN26@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 521		; 00000209H
	jne	SHORT $LN27@HandleMess
$LN26@HandleMess:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1444]
	and	ecx, 2
	jne	SHORT $LN30@HandleMess
$LN27@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 516		; 00000204H
	je	SHORT $LN25@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 518		; 00000206H
	jne	SHORT $LN31@HandleMess
$LN25@HandleMess:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1444]
	and	eax, 4
	je	SHORT $LN31@HandleMess
$LN30@HandleMess:
; Line 993
	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movsx	edx, cx
	mov	DWORD PTR _iMouseX$6[ebp], edx
; Line 994
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseY$5[ebp], ecx
; Line 995
	mov	edx, DWORD PTR _iMouseY$5[ebp]
	push	edx
	mov	eax, DWORD PTR _iMouseX$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?OnBegin@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnBegin
$LN31@HandleMess:
; Line 1001
	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	je	SHORT $LN21@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 515		; 00000203H
	jne	SHORT $LN22@HandleMess
$LN21@HandleMess:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1452]
	and	edx, 1
	jne	SHORT $LN23@HandleMess
$LN22@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 519		; 00000207H
	je	SHORT $LN19@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 521		; 00000209H
	jne	SHORT $LN20@HandleMess
$LN19@HandleMess:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1452]
	and	ecx, 2
	jne	SHORT $LN23@HandleMess
$LN20@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 516		; 00000204H
	je	SHORT $LN18@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 518		; 00000206H
	jne	SHORT $LN24@HandleMess
$LN18@HandleMess:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1452]
	and	eax, 4
	je	SHORT $LN24@HandleMess
$LN23@HandleMess:
; Line 1003
	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movsx	edx, cx
	mov	DWORD PTR _iMouseX$4[ebp], edx
; Line 1004
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseY$3[ebp], ecx
; Line 1005
	mov	edx, DWORD PTR _iMouseY$3[ebp]
	push	edx
	mov	eax, DWORD PTR _iMouseX$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 948				; 000003b4H
	call	?OnBegin@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnBegin
$LN24@HandleMess:
; Line 1008
	cmp	DWORD PTR _uMsg$[ebp], 512		; 00000200H
	jne	SHORT $LN17@HandleMess
; Line 1010
	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	movsx	edx, cx
	mov	DWORD PTR _iMouseX$2[ebp], edx
; Line 1011
	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseY$1[ebp], ecx
; Line 1012
	mov	edx, DWORD PTR _iMouseY$1[ebp]
	push	edx
	mov	eax, DWORD PTR _iMouseX$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?OnMove@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnMove
; Line 1013
	mov	ecx, DWORD PTR _iMouseY$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _iMouseX$2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 948				; 000003b4H
	call	?OnMove@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnMove
$LN17@HandleMess:
; Line 1018
	cmp	DWORD PTR _uMsg$[ebp], 514		; 00000202H
	jne	SHORT $LN14@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1444]
	and	ecx, 1
	jne	SHORT $LN15@HandleMess
$LN14@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 520		; 00000208H
	jne	SHORT $LN13@HandleMess
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1444]
	and	eax, 2
	jne	SHORT $LN15@HandleMess
$LN13@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 517		; 00000205H
	jne	SHORT $LN16@HandleMess
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1444]
	and	edx, 4
	je	SHORT $LN16@HandleMess
$LN15@HandleMess:
; Line 1020
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?OnEnd@CD3DArcBall@@QAEXXZ		; CD3DArcBall::OnEnd
$LN16@HandleMess:
; Line 1025
	cmp	DWORD PTR _uMsg$[ebp], 514		; 00000202H
	jne	SHORT $LN10@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1452]
	and	ecx, 1
	jne	SHORT $LN11@HandleMess
$LN10@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 520		; 00000208H
	jne	SHORT $LN9@HandleMess
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1452]
	and	eax, 2
	jne	SHORT $LN11@HandleMess
$LN9@HandleMess:
	cmp	DWORD PTR _uMsg$[ebp], 517		; 00000205H
	jne	SHORT $LN12@HandleMess
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1452]
	and	edx, 4
	je	SHORT $LN12@HandleMess
$LN11@HandleMess:
; Line 1027
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 948				; 000003b4H
	call	?OnEnd@CD3DArcBall@@QAEXXZ		; CD3DArcBall::OnEnd
$LN12@HandleMess:
; Line 1030
	cmp	DWORD PTR _uMsg$[ebp], 533		; 00000215H
	jne	SHORT $LN8@HandleMess
; Line 1032
	mov	eax, DWORD PTR _lParam$[ebp]
	cmp	eax, DWORD PTR _hWnd$[ebp]
	je	SHORT $LN8@HandleMess
; Line 1036
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1444]
	and	edx, 1
	jne	SHORT $LN5@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1444]
	and	ecx, 2
	jne	SHORT $LN5@HandleMess
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1444]
	and	eax, 4
	je	SHORT $LN6@HandleMess
$LN5@HandleMess:
; Line 1038
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?OnEnd@CD3DArcBall@@QAEXXZ		; CD3DArcBall::OnEnd
$LN6@HandleMess:
; Line 1043
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1452]
	and	edx, 1
	jne	SHORT $LN3@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1452]
	and	ecx, 2
	jne	SHORT $LN3@HandleMess
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1452]
	and	eax, 4
	je	SHORT $LN8@HandleMess
$LN3@HandleMess:
; Line 1045
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 948				; 000003b4H
	call	?OnEnd@CD3DArcBall@@QAEXXZ		; CD3DArcBall::OnEnd
$LN8@HandleMess:
; Line 1060
	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 515		; 00000203H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 519		; 00000207H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 521		; 00000209H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 516		; 00000204H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 518		; 00000206H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 514		; 00000202H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 520		; 00000208H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 517		; 00000205H
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 522		; 0000020aH
	je	SHORT $LN1@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 512		; 00000200H
	jne	SHORT $LN2@HandleMess
$LN1@HandleMess:
; Line 1062
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1458], 1
$LN2@HandleMess:
; Line 1065
	xor	eax, eax
; Line 1066
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?HandleMessages@CModelViewerCamera@@UAEJPAUHWND__@@IIJ@Z ENDP ; CModelViewerCamera::HandleMessages
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -240						; size = 64
$T2 = -172						; size = 12
$T3 = -160						; size = 64
_id$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
??0CModelViewerCamera@@QAE@XZ PROC			; CModelViewerCamera::CModelViewerCamera
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 806
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseCamera@@QAE@XZ			; CBaseCamera::CBaseCamera
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CModelViewerCamera@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	??0CD3DArcBall@@QAE@XZ			; CD3DArcBall::CD3DArcBall
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 948				; 000003b4H
	call	??0CD3DArcBall@@QAE@XZ			; CD3DArcBall::CD3DArcBall
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1240				; 000004d8H
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1252				; 000004e4H
	call	??0XMFLOAT4X4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4X4::XMFLOAT4X4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1316				; 00000524H
	call	??0XMFLOAT4X4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4X4::XMFLOAT4X4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1380				; 00000564H
	call	??0XMFLOAT4X4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4X4::XMFLOAT4X4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1444], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1448], 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1452], 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1456], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1457], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1458], 1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [ecx+1460], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [edx+1464], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+1468], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR [ecx+1472], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1476				; 000005c4H
	call	??0XMFLOAT4X4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4X4::XMFLOAT4X4
; Line 807
	call	?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ ; DirectX::XMMatrixIdentity
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T3[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T3[ebp]
	lea	edi, DWORD PTR _id$[ebp]
	rep movsd
; Line 809
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1380				; 00000564H
	movaps	xmm0, XMMWORD PTR _id$[ebp]
	movaps	xmm1, XMMWORD PTR _id$[ebp+16]
	movaps	xmm2, XMMWORD PTR _id$[ebp+32]
	movaps	xmm3, XMMWORD PTR _id$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 810
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1316				; 00000524H
	movaps	xmm0, XMMWORD PTR _id$[ebp]
	movaps	xmm1, XMMWORD PTR _id$[ebp+16]
	movaps	xmm2, XMMWORD PTR _id$[ebp+32]
	movaps	xmm3, XMMWORD PTR _id$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 811
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1252				; 000004e4H
	movaps	xmm0, XMMWORD PTR _id$[ebp]
	movaps	xmm1, XMMWORD PTR _id$[ebp+16]
	movaps	xmm2, XMMWORD PTR _id$[ebp+32]
	movaps	xmm3, XMMWORD PTR _id$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 812
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1476				; 000005c4H
	movaps	xmm0, XMMWORD PTR _id$[ebp]
	movaps	xmm1, XMMWORD PTR _id$[ebp+16]
	movaps	xmm2, XMMWORD PTR _id$[ebp+32]
	movaps	xmm3, XMMWORD PTR _id$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 813
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@MMM@Z		; DirectX::XMFLOAT3::XMFLOAT3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1240				; 000004d8H
	call	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT3::operator=
; Line 815
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+625], 0
; Line 816
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@CModelView
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN5@CModelView:
	DD	1
	DD	$LN4@CModelView
$LN4@CModelView:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@CModelView
$LN3@CModelView:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
??0CModelViewerCamera@@QAE@XZ ENDP			; CModelViewerCamera::CModelViewerCamera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -16						; size = 4
tv70 = -12						; size = 4
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_bLeft$ = 8						; size = 1
_bMiddle$ = 12						; size = 1
_bRight$ = 16						; size = 1
_bRotateWithoutButtonDown$ = 20				; size = 1
?SetRotateButtons@CFirstPersonCamera@@QAEX_N000@Z PROC	; CFirstPersonCamera::SetRotateButtons
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 782
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 785
	movzx	eax, BYTE PTR _bLeft$[ebp]
	test	eax, eax
	je	SHORT $LN3@SetRotateB
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@SetRotateB
$LN3@SetRotateB:
	mov	DWORD PTR tv67[ebp], 0
$LN4@SetRotateB:
	movzx	ecx, BYTE PTR _bMiddle$[ebp]
	test	ecx, ecx
	je	SHORT $LN5@SetRotateB
	mov	DWORD PTR tv70[ebp], 2
	jmp	SHORT $LN6@SetRotateB
$LN5@SetRotateB:
	mov	DWORD PTR tv70[ebp], 0
$LN6@SetRotateB:
	movzx	edx, BYTE PTR _bRight$[ebp]
	test	edx, edx
	je	SHORT $LN7@SetRotateB
	mov	DWORD PTR tv74[ebp], 4
	jmp	SHORT $LN8@SetRotateB
$LN7@SetRotateB:
	mov	DWORD PTR tv74[ebp], 0
$LN8@SetRotateB:
	mov	eax, DWORD PTR tv67[ebp]
	or	eax, DWORD PTR tv70[ebp]
	or	eax, DWORD PTR tv74[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+720], eax
; Line 786
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _bRotateWithoutButtonDown$[ebp]
	mov	BYTE PTR [edx+724], al
; Line 787
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetRotateButtons@CFirstPersonCamera@@QAEX_N000@Z ENDP	; CFirstPersonCamera::SetRotateButtons
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv145 = -1145						; size = 1
tv376 = -1144						; size = 4
tv369 = -1140						; size = 4
$T1 = -1136						; size = 64
$T2 = -1072						; size = 64
$T3 = -1008						; size = 64
$T4 = -944						; size = 64
$T5 = -872						; size = 4
$T6 = -868						; size = 4
$T7 = -864						; size = 64
_mCameraWorld$ = -784					; size = 64
$T8 = -704						; size = 64
_mView$ = -624						; size = 64
$T9 = -544						; size = 16
_vLookAt$ = -528					; size = 16
$T10 = -512						; size = 16
$T11 = -496						; size = 16
_vEye$ = -464						; size = 16
$T12 = -432						; size = 16
_vPosDeltaWorld$ = -416					; size = 16
$T13 = -400						; size = 64
$T14 = -336						; size = 16
$T15 = -320						; size = 16
_vWorldAhead$ = -304					; size = 16
$T16 = -288						; size = 16
$T17 = -272						; size = 16
_vWorldUp$ = -256					; size = 16
$T18 = -240						; size = 64
_mCameraRot$ = -160					; size = 64
_fPitchDelta$19 = -88					; size = 4
_fYawDelta$20 = -84					; size = 4
$T21 = -80						; size = 16
_vPosDelta$ = -64					; size = 16
$T22 = -48						; size = 16
_vVelocity$ = -32					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_fElapsedTime$ = 8					; size = 4
?FrameMove@CFirstPersonCamera@@UAEXM@Z PROC		; CFirstPersonCamera::FrameMove
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 691
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1160				; 00000488H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1160]
	mov	ecx, 290				; 00000122H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 692
	call	?DXUTGetGlobalTimer@@YGPAVCDXUTTimer@@XZ ; DXUTGetGlobalTimer
	mov	ecx, eax
	call	?IsStopped@CDXUTTimer@@QBE_NXZ		; CDXUTTimer::IsStopped
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@FrameMove
; Line 694
	call	?DXUTGetFPS@@YGMXZ			; DXUTGetFPS
	fstp	DWORD PTR tv369[ebp]
	movss	xmm0, DWORD PTR tv369[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@FrameMove
; Line 695
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _fElapsedTime$[ebx], xmm0
; Line 696
	jmp	SHORT $LN7@FrameMove
$LN8@FrameMove:
; Line 697
	call	?DXUTGetFPS@@YGMXZ			; DXUTGetFPS
	fstp	DWORD PTR tv376[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv376[ebp]
	movss	DWORD PTR _fElapsedTime$[ebx], xmm0
$LN7@FrameMove:
; Line 700
	mov	ecx, 1
	imul	edx, ecx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+436]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@FrameMove
; Line 702
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@FrameMove:
; Line 706
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+720]
	and	eax, DWORD PTR [edx+464]
	jne	SHORT $LN12@FrameMove
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+724]
	test	edx, edx
	jne	SHORT $LN12@FrameMove
	mov	BYTE PTR tv145[ebp], 0
	jmp	SHORT $LN13@FrameMove
$LN12@FrameMove:
	mov	BYTE PTR tv145[ebp], 1
$LN13@FrameMove:
	push	1
	movzx	eax, BYTE PTR tv145[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+625]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInput@CBaseCamera@@IAEX_N00@Z	; CBaseCamera::GetInput
; Line 713
	push	ecx
	movss	xmm0, DWORD PTR _fElapsedTime$[ebx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateVelocity@CBaseCamera@@IAEXM@Z	; CBaseCamera::UpdateVelocity
; Line 716
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 556				; 0000022cH
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T22[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T22[ebp]
	movaps	XMMWORD PTR _vVelocity$[ebp], xmm0
; Line 717
	movaps	xmm0, XMMWORD PTR _vVelocity$[ebp]
	movss	xmm1, DWORD PTR _fElapsedTime$[ebx]
	call	??DDirectX@@YQ?AT__m128@@T1@M@Z		; DirectX::operator*
	movaps	XMMWORD PTR $T21[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T21[ebp]
	movaps	XMMWORD PTR _vPosDelta$[ebp], xmm0
; Line 723
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+720]
	and	edx, DWORD PTR [ecx+464]
	jne	SHORT $LN4@FrameMove
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+724]
	test	ecx, ecx
	jne	SHORT $LN4@FrameMove
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+388]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN4@FrameMove
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+396]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN5@FrameMove
$LN4@FrameMove:
; Line 726
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+588]
	movss	DWORD PTR _fYawDelta$20[ebp], xmm0
; Line 727
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+592]
	movss	DWORD PTR _fPitchDelta$19[ebp], xmm0
; Line 730
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	je	SHORT $LN3@FrameMove
; Line 731
	movss	xmm0, DWORD PTR _fPitchDelta$19[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _fPitchDelta$19[ebp], xmm0
$LN3@FrameMove:
; Line 733
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+536]
	addss	xmm0, DWORD PTR _fPitchDelta$19[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+536], xmm0
; Line 734
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+532]
	addss	xmm0, DWORD PTR _fYawDelta$20[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+532], xmm0
; Line 737
	movss	xmm0, DWORD PTR _XM_PI
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T6[ebp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 536				; 00000218H
	push	eax
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	??$max@M@std@@YAABMABM0@Z		; std::max<float>
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+536], eax
; Line 738
	movss	xmm0, DWORD PTR _XM_PI
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T5[ebp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 536				; 00000218H
	push	ecx
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	call	??$min@M@std@@YAABMABM0@Z		; std::min<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+536], edx
$LN5@FrameMove:
; Line 742
	movss	xmm2, DWORD PTR __real@00000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+532]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+536]
	call	?XMMatrixRotationRollPitchYaw@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixRotationRollPitchYaw
	movaps	XMMWORD PTR $T4[ebp+48], xmm3
	movaps	XMMWORD PTR $T4[ebp+32], xmm2
	movaps	XMMWORD PTR $T4[ebp+16], xmm1
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T4[ebp]
	lea	edi, DWORD PTR $T18[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T18[ebp]
	lea	edi, DWORD PTR _mCameraRot$[ebp]
	rep movsd
; Line 745
	lea	edx, DWORD PTR $T17[ebp]
	push	edx
	mov	ecx, OFFSET ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR1
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _mCameraRot$[ebp]
	movaps	xmm2, XMMWORD PTR _mCameraRot$[ebp+16]
	movaps	xmm3, XMMWORD PTR _mCameraRot$[ebp+32]
	movaps	xmm4, XMMWORD PTR _mCameraRot$[ebp+48]
	call	?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformCoord
	movaps	XMMWORD PTR $T16[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T16[ebp]
	movaps	XMMWORD PTR _vWorldUp$[ebp], xmm0
; Line 746
	lea	eax, DWORD PTR $T15[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR2
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _mCameraRot$[ebp]
	movaps	xmm2, XMMWORD PTR _mCameraRot$[ebp+16]
	movaps	xmm3, XMMWORD PTR _mCameraRot$[ebp+32]
	movaps	xmm4, XMMWORD PTR _mCameraRot$[ebp+48]
	call	?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformCoord
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T14[ebp]
	movaps	XMMWORD PTR _vWorldAhead$[ebp], xmm0
; Line 749
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+626]
	test	edx, edx
	jne	SHORT $LN2@FrameMove
; Line 753
	movss	xmm2, DWORD PTR __real@00000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+532]
	movss	xmm0, DWORD PTR __real@00000000
	call	?XMMatrixRotationRollPitchYaw@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixRotationRollPitchYaw
	movaps	XMMWORD PTR $T3[ebp+48], xmm3
	movaps	XMMWORD PTR $T3[ebp+32], xmm2
	movaps	XMMWORD PTR $T3[ebp+16], xmm1
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T3[ebp]
	lea	edi, DWORD PTR $T13[ebp]
	rep movsd
	lea	ecx, DWORD PTR $T13[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mCameraRot$[ebp]
	call	??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMMATRIX::operator=
$LN2@FrameMove:
; Line 755
	movaps	xmm0, XMMWORD PTR _vPosDelta$[ebp]
	movaps	xmm1, XMMWORD PTR _mCameraRot$[ebp]
	movaps	xmm2, XMMWORD PTR _mCameraRot$[ebp+16]
	movaps	xmm3, XMMWORD PTR _mCameraRot$[ebp+32]
	movaps	xmm4, XMMWORD PTR _mCameraRot$[ebp+48]
	call	?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ; DirectX::XMVector3TransformCoord
	movaps	XMMWORD PTR $T12[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T12[ebp]
	movaps	XMMWORD PTR _vPosDeltaWorld$[ebp], xmm0
; Line 758
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 508				; 000001fcH
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _vEye$[ebp], xmm0
; Line 759
	movaps	xmm0, XMMWORD PTR _vPosDeltaWorld$[ebp]
	lea	ecx, DWORD PTR _vEye$[ebp]
	call	??YDirectX@@YQAAT__m128@@AAT1@T1@@Z	; DirectX::operator+=
; Line 760
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+627]
	test	eax, eax
	je	SHORT $LN1@FrameMove
; Line 761
	movaps	xmm0, XMMWORD PTR _vEye$[ebp]
	lea	ecx, DWORD PTR $T10[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstrainToBoundary@CBaseCamera@@IAE?AT__m128@@T2@@Z ; CBaseCamera::ConstrainToBoundary
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR _vEye$[ebp], xmm0
$LN1@FrameMove:
; Line 762
	movaps	xmm0, XMMWORD PTR _vEye$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 508				; 000001fcH
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 765
	movaps	xmm1, XMMWORD PTR _vWorldAhead$[ebp]
	movaps	xmm0, XMMWORD PTR _vEye$[ebp]
	call	??HDirectX@@YQ?AT__m128@@T1@0@Z		; DirectX::operator+
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _vLookAt$[ebp], xmm0
; Line 766
	movaps	xmm0, XMMWORD PTR _vLookAt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 520				; 00000208H
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 769
	movaps	xmm2, XMMWORD PTR _vWorldUp$[ebp]
	movaps	xmm1, XMMWORD PTR _vLookAt$[ebp]
	movaps	xmm0, XMMWORD PTR _vEye$[ebp]
	call	?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ; DirectX::XMMatrixLookAtLH
	movaps	XMMWORD PTR $T2[ebp+48], xmm3
	movaps	XMMWORD PTR $T2[ebp+32], xmm2
	movaps	XMMWORD PTR $T2[ebp+16], xmm1
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR $T8[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T8[ebp]
	lea	edi, DWORD PTR _mView$[ebp]
	rep movsd
; Line 770
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	movaps	xmm0, XMMWORD PTR _mView$[ebp]
	movaps	xmm1, XMMWORD PTR _mView$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mView$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mView$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 772
	xor	ecx, ecx
	movaps	xmm0, XMMWORD PTR _mView$[ebp]
	movaps	xmm1, XMMWORD PTR _mView$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mView$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mView$[ebp+48]
	call	?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T7[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T7[ebp]
	lea	edi, DWORD PTR _mCameraWorld$[ebp]
	rep movsd
; Line 773
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	movaps	xmm0, XMMWORD PTR _mCameraWorld$[ebp]
	movaps	xmm1, XMMWORD PTR _mCameraWorld$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mCameraWorld$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mCameraWorld$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 774
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@FrameMove
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	2
$LN19@FrameMove:
	DD	4
	DD	$LN18@FrameMove
$LN18@FrameMove:
	DD	-160					; ffffff60H
	DD	64					; 00000040H
	DD	$LN14@FrameMove
	DD	-464					; fffffe30H
	DD	16					; 00000010H
	DD	$LN15@FrameMove
	DD	-624					; fffffd90H
	DD	64					; 00000040H
	DD	$LN16@FrameMove
	DD	-784					; fffffcf0H
	DD	64					; 00000040H
	DD	$LN17@FrameMove
$LN17@FrameMove:
	DB	109					; 0000006dH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
$LN16@FrameMove:
	DB	109					; 0000006dH
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN15@FrameMove:
	DB	118					; 00000076H
	DB	69					; 00000045H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	0
$LN14@FrameMove:
	DB	109					; 0000006dH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
?FrameMove@CFirstPersonCamera@@UAEXM@Z ENDP		; CFirstPersonCamera::FrameMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFirstPersonCamera@@QAE@XZ PROC			; CFirstPersonCamera::CFirstPersonCamera
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 683
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CBaseCamera@@QAE@XZ			; CBaseCamera::CBaseCamera
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CFirstPersonCamera@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	??0XMFLOAT4X4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4X4::XMFLOAT4X4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+720], 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+724], 0
; Line 684
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFirstPersonCamera@@QAE@XZ ENDP			; CFirstPersonCamera::CFirstPersonCamera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -60						; size = 12
$T2 = -48						; size = 12
$T3 = -36						; size = 12
_iUserIndex$4 = -24					; size = 4
_fMostRecentlyActiveTime$5 = -20			; size = 8
_iMostRecentlyActive$6 = -12				; size = 4
_iUserIndex$7 = -8					; size = 4
_this$ = -4						; size = 4
_bGetKeyboardInput$ = 8					; size = 1
_bGetMouseInput$ = 12					; size = 1
_bGetGamepadInput$ = 16					; size = 1
?GetInput@CBaseCamera@@IAEX_N00@Z PROC			; CBaseCamera::GetInput
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 416
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 417
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@MMM@Z		; DirectX::XMFLOAT3::XMFLOAT3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT3::operator=
; Line 418
	movzx	eax, BYTE PTR _bGetKeyboardInput$[ebp]
	test	eax, eax
	je	$LN13@GetInput
; Line 421
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+436]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN19@GetInput
; Line 422
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+452]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+452], xmm0
$LN19@GetInput:
; Line 423
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+436]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN18@GetInput
; Line 424
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+452]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+452], xmm0
$LN18@GetInput:
; Line 425
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+626]
	test	eax, eax
	je	$LN15@GetInput
; Line 427
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+436]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN16@GetInput
; Line 428
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+448]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+448], xmm0
$LN16@GetInput:
; Line 429
	mov	ecx, 1
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+436]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN15@GetInput
; Line 430
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+448]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+448], xmm0
$LN15@GetInput:
; Line 432
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+436]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN14@GetInput
; Line 433
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+444]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+444], xmm0
$LN14@GetInput:
; Line 434
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+436]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@GetInput
; Line 435
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+444]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+444], xmm0
$LN13@GetInput:
; Line 438
	movzx	eax, BYTE PTR _bGetMouseInput$[ebp]
	test	eax, eax
	je	SHORT $LN12@GetInput
; Line 440
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateMouseDelta@CBaseCamera@@IAEXXZ	; CBaseCamera::UpdateMouseDelta
$LN12@GetInput:
; Line 443
	movzx	ecx, BYTE PTR _bGetGamepadInput$[ebp]
	test	ecx, ecx
	je	$LN1@GetInput
; Line 445
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@MMM@Z		; DirectX::XMFLOAT3::XMFLOAT3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	call	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT3::operator=
; Line 446
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@MMM@Z		; DirectX::XMFLOAT3::XMFLOAT3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 388				; 00000184H
	call	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT3::operator=
; Line 449
	mov	DWORD PTR _iUserIndex$7[ebp], 0
	jmp	SHORT $LN10@GetInput
$LN9@GetInput:
	mov	edx, DWORD PTR _iUserIndex$7[ebp]
	add	edx, 1
	mov	DWORD PTR _iUserIndex$7[ebp], edx
$LN10@GetInput:
	cmp	DWORD PTR _iUserIndex$7[ebp], 4
	jae	$LN8@GetInput
; Line 451
	push	1
	push	1
	imul	eax, DWORD PTR _iUserIndex$7[ebp], 60
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+136]
	push	edx
	mov	eax, DWORD PTR _iUserIndex$7[ebp]
	push	eax
	call	?DXUTGetGamepadState@@YAJKPAUDXUT_GAMEPAD@@_N1@Z ; DXUTGetGamepadState
	add	esp, 16					; 00000010H
; Line 457
	imul	ecx, DWORD PTR _iUserIndex$7[ebp], 60
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+136]
	test	eax, eax
	jne	SHORT $LN6@GetInput
	imul	ecx, DWORD PTR _iUserIndex$7[ebp], 60
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+ecx+140]
	test	eax, eax
	jne	SHORT $LN6@GetInput
	imul	ecx, DWORD PTR _iUserIndex$7[ebp], 60
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+ecx+140]
	test	eax, eax
	jne	SHORT $LN6@GetInput
	imul	ecx, DWORD PTR _iUserIndex$7[ebp], 60
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+ecx+144]
	test	eax, eax
	jne	SHORT $LN6@GetInput
	imul	ecx, DWORD PTR _iUserIndex$7[ebp], 60
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, WORD PTR [edx+ecx+146]
	test	eax, eax
	jne	SHORT $LN6@GetInput
	imul	ecx, DWORD PTR _iUserIndex$7[ebp], 60
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+138]
	test	eax, eax
	jne	SHORT $LN6@GetInput
	imul	ecx, DWORD PTR _iUserIndex$7[ebp], 60
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+139]
	test	eax, eax
	je	SHORT $LN7@GetInput
$LN6@GetInput:
; Line 459
	call	?DXUTGetTime@@YGNXZ			; DXUTGetTime
	mov	ecx, DWORD PTR _iUserIndex$7[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	QWORD PTR [edx+ecx*8+400]
$LN7@GetInput:
; Line 461
	jmp	$LN9@GetInput
$LN8@GetInput:
; Line 464
	mov	DWORD PTR _iMostRecentlyActive$6[ebp], -1
; Line 465
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _fMostRecentlyActiveTime$5[ebp], xmm0
; Line 466
	mov	DWORD PTR _iUserIndex$4[ebp], 0
	jmp	SHORT $LN5@GetInput
$LN4@GetInput:
	mov	eax, DWORD PTR _iUserIndex$4[ebp]
	add	eax, 1
	mov	DWORD PTR _iUserIndex$4[ebp], eax
$LN5@GetInput:
	cmp	DWORD PTR _iUserIndex$4[ebp], 4
	jae	SHORT $LN3@GetInput
; Line 468
	mov	ecx, DWORD PTR _iUserIndex$4[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR [edx+ecx*8+400]
	comisd	xmm0, QWORD PTR _fMostRecentlyActiveTime$5[ebp]
	jbe	SHORT $LN2@GetInput
; Line 470
	mov	eax, DWORD PTR _iUserIndex$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR [ecx+eax*8+400]
	movsd	QWORD PTR _fMostRecentlyActiveTime$5[ebp], xmm0
; Line 471
	mov	edx, DWORD PTR _iUserIndex$4[ebp]
	mov	DWORD PTR _iMostRecentlyActive$6[ebp], edx
$LN2@GetInput:
; Line 473
	jmp	SHORT $LN4@GetInput
$LN3@GetInput:
; Line 476
	cmp	DWORD PTR _iMostRecentlyActive$6[ebp], 0
	jl	$LN1@GetInput
	imul	eax, DWORD PTR _iMostRecentlyActive$6[ebp], 60
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+168]
	test	edx, edx
	je	$LN1@GetInput
; Line 478
	imul	eax, DWORD PTR _iMostRecentlyActive$6[ebp], 60
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax+180]
	mov	DWORD PTR [ecx+376], eax
; Line 479
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+380], xmm0
; Line 480
	imul	edx, DWORD PTR _iMostRecentlyActive$6[ebp], 60
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx+184]
	mov	DWORD PTR [eax+384], edx
; Line 482
	imul	eax, DWORD PTR _iMostRecentlyActive$6[ebp], 60
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax+172]
	mov	DWORD PTR [ecx+388], eax
; Line 483
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+392], xmm0
; Line 484
	imul	edx, DWORD PTR _iMostRecentlyActive$6[ebp], 60
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+edx+176]
	mov	DWORD PTR [eax+396], edx
$LN1@GetInput:
; Line 487
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetInput@CBaseCamera@@IAEX_N00@Z ENDP			; CBaseCamera::GetInput
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -444						; size = 12
$T2 = -432						; size = 16
$T3 = -416						; size = 16
_vVelocityDrag$4 = -400					; size = 16
$T5 = -384						; size = 16
_vVelocity$6 = -352					; size = 16
$T7 = -320						; size = 16
$T8 = -304						; size = 16
$T9 = -288						; size = 16
$T10 = -272						; size = 16
_vAccel$ = -240						; size = 16
$T11 = -208						; size = 16
_vGamePadLeftThumb$ = -192				; size = 16
$T12 = -176						; size = 16
_vKeyboardDirection$ = -160				; size = 16
$T13 = -144						; size = 16
$T14 = -128						; size = 16
$T15 = -112						; size = 16
_vRotVelocity$ = -96					; size = 16
$T16 = -80						; size = 16
_vMouseDelta$ = -64					; size = 16
$T17 = -48						; size = 16
_vGamePadRightThumb$ = -32				; size = 16
_this$ = -4						; size = 4
_fElapsedTime$ = 8					; size = 4
?UpdateVelocity@CBaseCamera@@IAEXM@Z PROC		; CBaseCamera::UpdateVelocity
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 542
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 448				; 000001c0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-448]
	mov	ecx, 112				; 00000070H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 543
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+396]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm3, DWORD PTR __real@00000000
	movss	xmm2, DWORD PTR __real@00000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+388]
	call	?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
	movaps	XMMWORD PTR $T17[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T17[ebp]
	movaps	XMMWORD PTR _vGamePadRightThumb$[ebp], xmm0
; Line 545
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 472				; 000001d8H
	call	?XMLoadFloat2@DirectX@@YQ?AT__m128@@PBUXMFLOAT2@1@@Z ; DirectX::XMLoadFloat2
	movaps	XMMWORD PTR $T16[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T16[ebp]
	movaps	XMMWORD PTR _vMouseDelta$[ebp], xmm0
; Line 546
	movaps	xmm0, XMMWORD PTR _vGamePadRightThumb$[ebp]
	movss	xmm1, DWORD PTR __real@3ca3d70a
	call	??DDirectX@@YQ?AT__m128@@T1@M@Z		; DirectX::operator*
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR _vMouseDelta$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+612]
	call	??DDirectX@@YQ?AT__m128@@T1@M@Z		; DirectX::operator*
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm1, XMMWORD PTR $T14[ebp]
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	call	??HDirectX@@YQ?AT__m128@@T1@0@Z		; DirectX::operator+
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	movaps	XMMWORD PTR _vRotVelocity$[ebp], xmm0
; Line 548
	movaps	xmm0, XMMWORD PTR _vRotVelocity$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 588				; 0000024cH
	call	?XMStoreFloat2@DirectX@@YQXPAUXMFLOAT2@1@T__m128@@@Z ; DirectX::XMStoreFloat2
; Line 550
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T12[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T12[ebp]
	movaps	XMMWORD PTR _vKeyboardDirection$[ebp], xmm0
; Line 551
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _vGamePadLeftThumb$[ebp], xmm0
; Line 552
	movaps	xmm1, XMMWORD PTR _vGamePadLeftThumb$[ebp]
	movaps	xmm0, XMMWORD PTR _vKeyboardDirection$[ebp]
	call	??HDirectX@@YQ?AT__m128@@T1@0@Z		; DirectX::operator+
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _vAccel$[ebp], xmm0
; Line 556
	movaps	xmm0, XMMWORD PTR _vAccel$[ebp]
	call	?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _vAccel$[ebp], xmm0
; Line 559
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+616]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _vAccel$[ebp]
	push	ecx
	call	??XDirectX@@YAAAT__m128@@AAT1@M@Z	; DirectX::operator*=
	add	esp, 8
; Line 561
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+623]
	test	eax, eax
	je	$LN6@UpdateVelo
; Line 564
	movaps	xmm0, XMMWORD PTR _vAccel$[ebp]
	call	?XMVector3LengthSq@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3LengthSq
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	call	?XMVectorGetX@DirectX@@YQMT__m128@@@Z	; DirectX::XMVectorGetX
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN5@UpdateVelo
; Line 570
	movaps	xmm0, XMMWORD PTR _vAccel$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 556				; 0000022cH
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 572
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+584]
	mov	DWORD PTR [ecx+580], eax
; Line 574
	movaps	xmm0, XMMWORD PTR _vAccel$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+580]
	call	??KDirectX@@YQ?AT__m128@@T1@M@Z		; DirectX::operator/
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 568				; 00000238H
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 576
	jmp	$LN2@UpdateVelo
$LN5@UpdateVelo:
; Line 579
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+580]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN3@UpdateVelo
; Line 582
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 556				; 0000022cH
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vVelocity$6[ebp], xmm0
; Line 583
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 568				; 00000238H
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vVelocityDrag$4[ebp], xmm0
; Line 585
	movaps	xmm0, XMMWORD PTR _vVelocityDrag$4[ebp]
	movss	xmm1, DWORD PTR _fElapsedTime$[ebx]
	call	??DDirectX@@YQ?AT__m128@@T1@M@Z		; DirectX::operator*
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	lea	ecx, DWORD PTR _vVelocity$6[ebp]
	call	??ZDirectX@@YQAAT__m128@@AAT1@T1@@Z	; DirectX::operator-=
; Line 587
	movaps	xmm0, XMMWORD PTR _vVelocity$6[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 556				; 0000022cH
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 589
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+580]
	subss	xmm0, DWORD PTR _fElapsedTime$[ebx]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+580], xmm0
; Line 591
	jmp	SHORT $LN2@UpdateVelo
$LN3@UpdateVelo:
; Line 594
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@MMM@Z		; DirectX::XMFLOAT3::XMFLOAT3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 556				; 0000022cH
	call	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT3::operator=
$LN2@UpdateVelo:
; Line 598
	jmp	SHORT $LN1@UpdateVelo
$LN6@UpdateVelo:
; Line 601
	movaps	xmm0, XMMWORD PTR _vAccel$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 556				; 0000022cH
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
$LN1@UpdateVelo:
; Line 603
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@UpdateVelo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	2
$LN12@UpdateVelo:
	DD	2
	DD	$LN11@UpdateVelo
$LN11@UpdateVelo:
	DD	-240					; ffffff10H
	DD	16					; 00000010H
	DD	$LN9@UpdateVelo
	DD	-352					; fffffea0H
	DD	16					; 00000010H
	DD	$LN10@UpdateVelo
$LN10@UpdateVelo:
	DB	118					; 00000076H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
$LN9@UpdateVelo:
	DB	118					; 00000076H
	DB	65					; 00000041H
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
?UpdateVelocity@CBaseCamera@@IAEXM@Z ENDP		; CBaseCamera::UpdateVelocity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fPercentOfOld$ = -112					; size = 4
_fPercentOfNew$ = -108					; size = 4
_mi$1 = -100						; size = 40
_ptCenter$2 = -52					; size = 8
_ptCurMouseDelta$ = -36					; size = 8
_ptCurMousePos$ = -20					; size = 8
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?UpdateMouseDelta@CBaseCamera@@IAEXXZ PROC		; CBaseCamera::UpdateMouseDelta
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 494
	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 497
	mov	esi, esp
	lea	eax, DWORD PTR _ptCurMousePos$[ebp]
	push	eax
	call	DWORD PTR __imp__GetCursorPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 501
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ptCurMousePos$[ebp]
	sub	edx, DWORD PTR [ecx+456]
	mov	DWORD PTR _ptCurMouseDelta$[ebp], edx
; Line 502
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ptCurMousePos$[ebp+4]
	sub	ecx, DWORD PTR [eax+460]
	mov	DWORD PTR _ptCurMouseDelta$[ebp+4], ecx
; Line 505
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ptCurMousePos$[ebp]
	mov	DWORD PTR [edx+456], eax
	mov	ecx, DWORD PTR _ptCurMousePos$[ebp+4]
	mov	DWORD PTR [edx+460], ecx
; Line 507
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+628]
	test	eax, eax
	je	SHORT $LN1@UpdateMous
	call	?DXUTIsActive@@YG_NXZ			; DXUTIsActive
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@UpdateMous
; Line 518
	mov	DWORD PTR _mi$1[ebp], 40		; 00000028H
; Line 519
	lea	edx, DWORD PTR _mi$1[ebp]
	push	edx
	push	2
	call	?DXUTGetHWND@@YGPAUHWND__@@XZ		; DXUTGetHWND
	push	eax
	call	?DXUTMonitorFromWindow@@YGPAUHMONITOR__@@PAUHWND__@@K@Z ; DXUTMonitorFromWindow
	push	eax
	call	?DXUTGetMonitorInfo@@YGHPAUHMONITOR__@@PAUtagMONITORINFO@@@Z ; DXUTGetMonitorInfo
; Line 520
	mov	eax, DWORD PTR _mi$1[ebp+4]
	add	eax, DWORD PTR _mi$1[ebp+12]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _ptCenter$2[ebp], eax
; Line 521
	mov	eax, DWORD PTR _mi$1[ebp+8]
	add	eax, DWORD PTR _mi$1[ebp+16]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _ptCenter$2[ebp+4], eax
; Line 522
	mov	esi, esp
	mov	eax, DWORD PTR _ptCenter$2[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ptCenter$2[ebp]
	push	ecx
	call	DWORD PTR __imp__SetCursorPos@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 523
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ptCenter$2[ebp]
	mov	DWORD PTR [edx+456], eax
	mov	ecx, DWORD PTR _ptCenter$2[ebp+4]
	mov	DWORD PTR [edx+460], ecx
$LN1@UpdateMous:
; Line 528
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR [edx+480]
	movss	DWORD PTR _fPercentOfNew$[ebp], xmm0
; Line 529
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _fPercentOfNew$[ebp]
	movss	DWORD PTR _fPercentOfOld$[ebp], xmm0
; Line 530
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+472]
	mulss	xmm0, DWORD PTR _fPercentOfOld$[ebp]
	cvtsi2ss xmm1, DWORD PTR _ptCurMouseDelta$[ebp]
	mulss	xmm1, DWORD PTR _fPercentOfNew$[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+472], xmm0
; Line 531
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+476]
	mulss	xmm0, DWORD PTR _fPercentOfOld$[ebp]
	cvtsi2ss xmm1, DWORD PTR _ptCurMouseDelta$[ebp+4]
	mulss	xmm1, DWORD PTR _fPercentOfNew$[ebp]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+476], xmm0
; Line 533
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+472]
	mulss	xmm0, DWORD PTR [edx+612]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+588], xmm0
; Line 534
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+476]
	mulss	xmm0, DWORD PTR [edx+612]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+592], xmm0
; Line 535
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@UpdateMous
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@UpdateMous:
	DD	4
	DD	$LN8@UpdateMous
$LN8@UpdateMous:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN4@UpdateMous
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN5@UpdateMous
	DD	-52					; ffffffccH
	DD	8
	DD	$LN6@UpdateMous
	DD	-100					; ffffff9cH
	DD	40					; 00000028H
	DD	$LN7@UpdateMous
$LN7@UpdateMous:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	0
$LN6@UpdateMous:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN5@UpdateMous:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN4@UpdateMous:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
?UpdateMouseDelta@CBaseCamera@@IAEXXZ ENDP		; CBaseCamera::UpdateMouseDelta
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ConstrainToBoundary@CBaseCamera@@IAE?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -112						; size = 16
$T2 = -96						; size = 16
_vMax$ = -80						; size = 16
$T3 = -64						; size = 16
_vMin$ = -48						; size = 16
_this$ = -20						; size = 4
_v$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
?ConstrainToBoundary@CBaseCamera@@IAE?AT__m128@@T2@@Z PROC ; CBaseCamera::ConstrainToBoundary, COMDAT
; _this$ = ecx
; _v$ = xmm0
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.h
; Line 202
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _v$[ebp], xmm0
	mov	DWORD PTR _this$[ebp], ecx
; Line 205
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 632				; 00000278H
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vMin$[ebp], xmm0
; Line 206
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 644				; 00000284H
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vMax$[ebp], xmm0
; Line 209
	movaps	xmm2, XMMWORD PTR _vMax$[ebp]
	movaps	xmm1, XMMWORD PTR _vMin$[ebp]
	movaps	xmm0, XMMWORD PTR _v$[ebp]
	call	?XMVectorClamp@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorClamp
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [eax], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 210
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
?ConstrainToBoundary@CBaseCamera@@IAE?AT__m128@@T2@@Z ENDP ; CBaseCamera::ConstrainToBoundary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsKeyDown@CBaseCamera@@IBE_NE@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 1
?IsKeyDown@CBaseCamera@@IBE_NE@Z PROC			; CBaseCamera::IsKeyDown, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.h
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _key$[ebp]
	and	eax, 1
	je	SHORT $LN3@IsKeyDown
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsKeyDown
$LN3@IsKeyDown:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsKeyDown:
	mov	al, BYTE PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?IsKeyDown@CBaseCamera@@IBE_NE@Z ENDP			; CBaseCamera::IsKeyDown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_nKey$ = 8						; size = 4
?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z PROC ; CBaseCamera::MapKey
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 610
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 613
	mov	eax, DWORD PTR _nKey$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 17					; 00000011H
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 88			; 00000058H
	ja	$LN21@MapKey
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN25@MapKey[edx]
	jmp	DWORD PTR $LN26@MapKey[eax*4]
$LN20@MapKey:
; Line 616
	mov	eax, 7
	jmp	$LN23@MapKey
$LN19@MapKey:
; Line 618
	xor	eax, eax
	jmp	SHORT $LN23@MapKey
$LN18@MapKey:
; Line 620
	mov	eax, 1
	jmp	SHORT $LN23@MapKey
$LN17@MapKey:
; Line 622
	mov	eax, 2
	jmp	SHORT $LN23@MapKey
$LN16@MapKey:
; Line 624
	mov	eax, 3
	jmp	SHORT $LN23@MapKey
$LN15@MapKey:
; Line 626
	mov	eax, 4
	jmp	SHORT $LN23@MapKey
$LN14@MapKey:
; Line 628
	mov	eax, 5
	jmp	SHORT $LN23@MapKey
$LN13@MapKey:
; Line 631
	xor	eax, eax
	jmp	SHORT $LN23@MapKey
$LN12@MapKey:
; Line 633
	mov	eax, 1
	jmp	SHORT $LN23@MapKey
$LN11@MapKey:
; Line 635
	mov	eax, 2
	jmp	SHORT $LN23@MapKey
$LN10@MapKey:
; Line 637
	mov	eax, 3
	jmp	SHORT $LN23@MapKey
$LN9@MapKey:
; Line 639
	mov	eax, 5
	jmp	SHORT $LN23@MapKey
$LN8@MapKey:
; Line 641
	mov	eax, 4
	jmp	SHORT $LN23@MapKey
$LN7@MapKey:
; Line 644
	xor	eax, eax
	jmp	SHORT $LN23@MapKey
$LN6@MapKey:
; Line 646
	mov	eax, 1
	jmp	SHORT $LN23@MapKey
$LN5@MapKey:
; Line 648
	mov	eax, 2
	jmp	SHORT $LN23@MapKey
$LN4@MapKey:
; Line 650
	mov	eax, 3
	jmp	SHORT $LN23@MapKey
$LN3@MapKey:
; Line 652
	mov	eax, 4
	jmp	SHORT $LN23@MapKey
$LN2@MapKey:
; Line 654
	mov	eax, 5
	jmp	SHORT $LN23@MapKey
$LN1@MapKey:
; Line 657
	mov	eax, 6
	jmp	SHORT $LN23@MapKey
$LN21@MapKey:
; Line 660
	mov	eax, 255				; 000000ffH
$LN23@MapKey:
; Line 661
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN26@MapKey:
	DD	$LN20@MapKey
	DD	$LN15@MapKey
	DD	$LN14@MapKey
	DD	$LN1@MapKey
	DD	$LN19@MapKey
	DD	$LN17@MapKey
	DD	$LN18@MapKey
	DD	$LN16@MapKey
	DD	$LN13@MapKey
	DD	$LN12@MapKey
	DD	$LN8@MapKey
	DD	$LN9@MapKey
	DD	$LN10@MapKey
	DD	$LN11@MapKey
	DD	$LN4@MapKey
	DD	$LN2@MapKey
	DD	$LN7@MapKey
	DD	$LN6@MapKey
	DD	$LN5@MapKey
	DD	$LN3@MapKey
	DD	$LN21@MapKey
$LN25@MapKey:
	DB	0
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	1
	DB	2
	DB	20					; 00000014H
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	8
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	9
	DB	10					; 0000000aH
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	11					; 0000000bH
	DB	20					; 00000014H
	DB	12					; 0000000cH
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	13					; 0000000dH
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	20					; 00000014H
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	20					; 00000014H
	DB	17					; 00000011H
	DB	20					; 00000014H
	DB	18					; 00000012H
	DB	19					; 00000013H
?MapKey@CBaseCamera@@MAE?AW4D3DUtil_CameraKeys@@I@Z ENDP ; CBaseCamera::MapKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetDragRect@CBaseCamera@@UAEXABUtagRECT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rc$ = 8						; size = 4
?SetDragRect@CBaseCamera@@UAEXABUtagRECT@@@Z PROC	; CBaseCamera::SetDragRect, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.h
; Line 158
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 540				; 0000021cH
	mov	ecx, DWORD PTR _rc$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDragRect@CBaseCamera@@UAEXABUtagRECT@@@Z ENDP	; CBaseCamera::SetDragRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -224						; size = 64
$T2 = -160						; size = 64
_mProj$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_fFOV$ = 8						; size = 4
_fAspect$ = 12						; size = 4
_fNearPlane$ = 16					; size = 4
_fFarPlane$ = 20					; size = 4
?SetProjParams@CBaseCamera@@UAEXMMMM@Z PROC		; CBaseCamera::SetProjParams
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 265
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 267
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fFOV$[ebx]
	movss	DWORD PTR [eax+596], xmm0
; Line 268
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fAspect$[ebx]
	movss	DWORD PTR [ecx+600], xmm0
; Line 269
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fNearPlane$[ebx]
	movss	DWORD PTR [edx+604], xmm0
; Line 270
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fFarPlane$[ebx]
	movss	DWORD PTR [eax+608], xmm0
; Line 272
	movss	xmm3, DWORD PTR _fFarPlane$[ebx]
	movss	xmm2, DWORD PTR _fNearPlane$[ebx]
	movss	xmm1, DWORD PTR _fAspect$[ebx]
	movss	xmm0, DWORD PTR _fFOV$[ebx]
	call	?XMMatrixPerspectiveFovLH@DirectX@@YQ?AUXMMATRIX@1@MMMM@Z ; DirectX::XMMatrixPerspectiveFovLH
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR _mProj$[ebp]
	rep movsd
; Line 273
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	movaps	xmm0, XMMWORD PTR _mProj$[ebp]
	movaps	xmm1, XMMWORD PTR _mProj$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mProj$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mProj$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 274
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetProjPar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	16					; 00000010H
$LN5@SetProjPar:
	DD	1
	DD	$LN4@SetProjPar
$LN4@SetProjPar:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@SetProjPar
$LN3@SetProjPar:
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	106					; 0000006aH
	DB	0
?SetProjParams@CBaseCamera@@UAEXMMMM@Z ENDP		; CBaseCamera::SetProjParams
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv203 = -548						; size = 4
$T1 = -544						; size = 64
$T2 = -480						; size = 64
_fLen$ = -408						; size = 4
_zBasis$ = -400						; size = 12
$T3 = -384						; size = 64
_mInvView$ = -304					; size = 64
$T4 = -224						; size = 64
$T5 = -160						; size = 16
_mView$ = -128						; size = 64
_this$ = -52						; size = 4
_vLookatPt$ = -48					; size = 16
_vEyePt$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
?SetViewParams@CBaseCamera@@UAEXT__m128@@0@Z PROC	; CBaseCamera::SetViewParams
; _this$ = ecx
; _vEyePt$ = xmm0
; _vLookatPt$ = xmm1
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 235
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 552				; 00000228H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-552]
	mov	ecx, 138				; 0000008aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _vLookatPt$[ebp], xmm1
	movaps	XMMWORD PTR _vEyePt$[ebp], xmm0
	mov	DWORD PTR _this$[ebp], ecx
; Line 236
	movaps	xmm0, XMMWORD PTR _vEyePt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 508				; 000001fcH
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 237
	movaps	xmm0, XMMWORD PTR _vEyePt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 239
	movaps	xmm0, XMMWORD PTR _vLookatPt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 520				; 00000208H
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 240
	movaps	xmm0, XMMWORD PTR _vLookatPt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 496				; 000001f0H
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 243
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR1
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm2, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _vLookatPt$[ebp]
	movaps	xmm0, XMMWORD PTR _vEyePt$[ebp]
	call	?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ; DirectX::XMMatrixLookAtLH
	movaps	XMMWORD PTR $T2[ebp+48], xmm3
	movaps	XMMWORD PTR $T2[ebp+32], xmm2
	movaps	XMMWORD PTR $T2[ebp+16], xmm1
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR $T4[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T4[ebp]
	lea	edi, DWORD PTR _mView$[ebp]
	rep movsd
; Line 244
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	movaps	xmm0, XMMWORD PTR _mView$[ebp]
	movaps	xmm1, XMMWORD PTR _mView$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mView$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mView$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 246
	xor	ecx, ecx
	movaps	xmm0, XMMWORD PTR _mView$[ebp]
	movaps	xmm1, XMMWORD PTR _mView$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mView$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mView$[ebp+48]
	call	?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ; DirectX::XMMatrixInverse
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T3[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T3[ebp]
	lea	edi, DWORD PTR _mInvView$[ebp]
	rep movsd
; Line 251
	lea	ecx, DWORD PTR _zBasis$[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
; Line 252
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR _mInvView$[ebp+ecx]
	lea	ecx, DWORD PTR _zBasis$[ebp]
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 254
	push	ecx
	movss	xmm0, DWORD PTR _zBasis$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _zBasis$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atan2f
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+532]
; Line 255
	movss	xmm0, DWORD PTR _zBasis$[ebp+8]
	mulss	xmm0, DWORD PTR _zBasis$[ebp+8]
	movss	xmm1, DWORD PTR _zBasis$[ebp]
	mulss	xmm1, DWORD PTR _zBasis$[ebp]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	fstp	DWORD PTR _fLen$[ebp]
; Line 256
	push	ecx
	movss	xmm0, DWORD PTR _fLen$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _zBasis$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	call	_atan2f
	add	esp, 8
	fstp	DWORD PTR tv203[ebp]
	movss	xmm0, DWORD PTR tv203[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+536], xmm0
; Line 257
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SetViewPar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN7@SetViewPar:
	DD	3
	DD	$LN6@SetViewPar
$LN6@SetViewPar:
	DD	-128					; ffffff80H
	DD	64					; 00000040H
	DD	$LN3@SetViewPar
	DD	-304					; fffffed0H
	DD	64					; 00000040H
	DD	$LN4@SetViewPar
	DD	-400					; fffffe70H
	DD	12					; 0000000cH
	DD	$LN5@SetViewPar
$LN5@SetViewPar:
	DB	122					; 0000007aH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN4@SetViewPar:
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN3@SetViewPar:
	DB	109					; 0000006dH
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
?SetViewParams@CBaseCamera@@UAEXT__m128@@0@Z ENDP	; CBaseCamera::SetViewParams
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -80						; size = 16
_vDefaultLookAt$ = -64					; size = 16
$T2 = -48						; size = 16
_vDefaultEye$ = -32					; size = 16
_this$ = -4						; size = 4
?Reset@CBaseCamera@@UAEXXZ PROC				; CBaseCamera::Reset
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 668
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 669
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vDefaultEye$[ebp], xmm0
; Line 670
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 496				; 000001f0H
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vDefaultLookAt$[ebp], xmm0
; Line 672
	mov	esi, esp
	movaps	xmm1, XMMWORD PTR _vDefaultLookAt$[ebp]
	movaps	xmm0, XMMWORD PTR _vDefaultEye$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 673
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Reset@CBaseCamera@@UAEXXZ ENDP				; CBaseCamera::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -32						; size = 4
_ptCursor$1 = -24					; size = 8
_mappedKey$2 = -12					; size = 4
_mappedKey$3 = -8					; size = 4
_this$ = -4						; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z PROC	; CBaseCamera::HandleMessages
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 282
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 286
	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 513		; 00000201H
	ja	SHORT $LN27@HandleMess
	cmp	DWORD PTR tv64[ebp], 513		; 00000201H
	je	$LN17@HandleMess
	cmp	DWORD PTR tv64[ebp], 256		; 00000100H
	je	SHORT $LN22@HandleMess
	cmp	DWORD PTR tv64[ebp], 257		; 00000101H
	je	$LN19@HandleMess
	jmp	$LN23@HandleMess
$LN27@HandleMess:
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 514				; 00000202H
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 19			; 00000013H
	ja	$LN23@HandleMess
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN28@HandleMess[edx]
	jmp	DWORD PTR $LN32@HandleMess[eax*4]
$LN22@HandleMess:
; Line 293
	mov	esi, esp
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _mappedKey$3[ebp], eax
; Line 294
	cmp	DWORD PTR _mappedKey$3[ebp], 255	; 000000ffH
	je	SHORT $LN21@HandleMess
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _mappedKey$3[ebp]
	movzx	ecx, BYTE PTR [eax+436]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsKeyDown@CBaseCamera@@IBE_NE@Z	; CBaseCamera::IsKeyDown
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN21@HandleMess
; Line 299
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _mappedKey$3[ebp]
	mov	BYTE PTR [eax+436], 129			; 00000081H
; Line 300
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+432]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+432], edx
$LN21@HandleMess:
; Line 303
	jmp	$LN23@HandleMess
$LN19@HandleMess:
; Line 310
	mov	esi, esp
	mov	ecx, DWORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _mappedKey$2[ebp], eax
; Line 311
	cmp	DWORD PTR _mappedKey$2[ebp], 255	; 000000ffH
	je	SHORT $LN18@HandleMess
	cmp	DWORD PTR _mappedKey$2[ebp], 8
	jae	SHORT $LN18@HandleMess
; Line 313
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _mappedKey$2[ebp]
	movzx	ecx, BYTE PTR [eax+436]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _mappedKey$2[ebp]
	mov	BYTE PTR [edx+436], cl
; Line 314
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+432]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+432], ecx
$LN18@HandleMess:
; Line 316
	jmp	$LN23@HandleMess
$LN17@HandleMess:
; Line 330
	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _ptCursor$1[ebp], ecx
	mov	edx, DWORD PTR _lParam$[ebp]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movsx	eax, dx
	mov	DWORD PTR _ptCursor$1[ebp+4], eax
; Line 333
	cmp	DWORD PTR _uMsg$[ebp], 513		; 00000201H
	je	SHORT $LN15@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 515		; 00000203H
	jne	SHORT $LN16@HandleMess
$LN15@HandleMess:
	mov	esi, esp
	mov	ecx, DWORD PTR _ptCursor$1[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _ptCursor$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 540				; 0000021cH
	push	eax
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN16@HandleMess
; Line 335
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+620], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+464]
	or	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+464], eax
$LN16@HandleMess:
; Line 337
	cmp	DWORD PTR _uMsg$[ebp], 519		; 00000207H
	je	SHORT $LN13@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 521		; 00000209H
	jne	SHORT $LN14@HandleMess
$LN13@HandleMess:
	mov	esi, esp
	mov	edx, DWORD PTR _ptCursor$1[ebp+4]
	push	edx
	mov	eax, DWORD PTR _ptCursor$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 540				; 0000021cH
	push	ecx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN14@HandleMess
; Line 339
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+621], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+464]
	or	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+464], ecx
$LN14@HandleMess:
; Line 341
	cmp	DWORD PTR _uMsg$[ebp], 516		; 00000204H
	je	SHORT $LN11@HandleMess
	cmp	DWORD PTR _uMsg$[ebp], 518		; 00000206H
	jne	SHORT $LN12@HandleMess
$LN11@HandleMess:
	mov	esi, esp
	mov	eax, DWORD PTR _ptCursor$1[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ptCursor$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 540				; 0000021cH
	push	edx
	call	DWORD PTR __imp__PtInRect@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN12@HandleMess
; Line 343
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+622], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+464]
	or	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+464], edx
$LN12@HandleMess:
; Line 348
	mov	esi, esp
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 349
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 456				; 000001c8H
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__GetCursorPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 350
	mov	eax, 1
	jmp	$LN25@HandleMess
$LN10@HandleMess:
; Line 358
	cmp	DWORD PTR _uMsg$[ebp], 514		; 00000202H
	jne	SHORT $LN9@HandleMess
; Line 360
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+620], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+464]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+464], edx
$LN9@HandleMess:
; Line 362
	cmp	DWORD PTR _uMsg$[ebp], 520		; 00000208H
	jne	SHORT $LN8@HandleMess
; Line 364
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+621], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+464]
	and	eax, -3					; fffffffdH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+464], eax
$LN8@HandleMess:
; Line 366
	cmp	DWORD PTR _uMsg$[ebp], 517		; 00000205H
	jne	SHORT $LN7@HandleMess
; Line 368
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+622], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+464]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+464], ecx
$LN7@HandleMess:
; Line 374
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+620]
	test	ecx, ecx
	jne	SHORT $LN6@HandleMess
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+622]
	test	eax, eax
	jne	SHORT $LN6@HandleMess
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+621]
	test	edx, edx
	jne	SHORT $LN6@HandleMess
; Line 376
	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@HandleMess:
; Line 378
	jmp	$LN23@HandleMess
$LN5@HandleMess:
; Line 383
	mov	eax, DWORD PTR _lParam$[ebp]
	cmp	eax, DWORD PTR _hWnd$[ebp]
	je	$LN4@HandleMess
; Line 387
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+464]
	and	edx, 1
	jne	SHORT $LN2@HandleMess
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+464]
	and	ecx, 2
	jne	SHORT $LN2@HandleMess
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+464]
	and	eax, 4
	je	SHORT $LN4@HandleMess
$LN2@HandleMess:
; Line 389
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+620], 0
; Line 390
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+621], 0
; Line 391
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+622], 0
; Line 392
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+464]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+464], edx
; Line 393
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+464]
	and	edx, -3					; fffffffdH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+464], edx
; Line 394
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+464]
	and	edx, -5					; fffffffbH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+464], edx
; Line 395
	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@HandleMess:
; Line 398
	jmp	SHORT $LN23@HandleMess
$LN1@HandleMess:
; Line 403
	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	movsx	edx, cx
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+468]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+468], edx
$LN23@HandleMess:
; Line 407
	xor	eax, eax
$LN25@HandleMess:
; Line 408
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@HandleMess
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN31@HandleMess:
	DD	1
	DD	$LN30@HandleMess
$LN30@HandleMess:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN29@HandleMess
$LN29@HandleMess:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
	npad	3
$LN32@HandleMess:
	DD	$LN10@HandleMess
	DD	$LN17@HandleMess
	DD	$LN1@HandleMess
	DD	$LN5@HandleMess
	DD	$LN23@HandleMess
$LN28@HandleMess:
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	1
	DB	0
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?HandleMessages@CBaseCamera@@UAEJPAUHWND__@@IIJ@Z ENDP	; CBaseCamera::HandleMessages
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv335 = -128						; size = 16
$T1 = -112						; size = 12
$T2 = -100						; size = 12
$T3 = -88						; size = 8
$T4 = -80						; size = 8
$T5 = -72						; size = 12
$T6 = -60						; size = 12
$T7 = -48						; size = 16
$T8 = -32						; size = 16
_this$ = -4						; size = 4
??0CBaseCamera@@QAE@XZ PROC				; CBaseCamera::CBaseCamera
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 206
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-140]
	mov	ecx, 35					; 00000023H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBaseCamera@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0XMFLOAT4X4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4X4::XMFLOAT4X4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0XMFLOAT4X4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4X4::XMFLOAT4X4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 388				; 00000184H
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+432], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 444				; 000001bcH
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+464], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+468], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 472				; 000001d8H
	call	??0XMFLOAT2@DirectX@@QAE@XZ		; DirectX::XMFLOAT2::XMFLOAT2
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [ecx+480], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 496				; 000001f0H
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 508				; 000001fcH
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 520				; 00000208H
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+532], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+536], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 556				; 0000022cH
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 568				; 00000238H
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+580], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [edx+584], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 588				; 0000024cH
	call	??0XMFLOAT2@DirectX@@QAE@XZ		; DirectX::XMFLOAT2::XMFLOAT2
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR [eax+612], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [ecx+616], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+620], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+621], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+622], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+623], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+624], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+625], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+626], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+627], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+628], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 632				; 00000278H
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 644				; 00000284H
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
; Line 207
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 436				; 000001b4H
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edx
; Line 208
	push	240					; 000000f0H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 136				; 00000088H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 211
	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	mov	ecx, OFFSET ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR2
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
	movaps	XMMWORD PTR tv335[ebp], xmm0
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movaps	xmm1, XMMWORD PTR tv335[ebp]
	call	?SetViewParams@CBaseCamera@@UAEXT__m128@@0@Z ; CBaseCamera::SetViewParams
; Line 214
	push	ecx
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _XM_PI
	divss	xmm0, DWORD PTR __real@40800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetProjParams@CBaseCamera@@UAEXMMMM@Z	; CBaseCamera::SetProjParams
; Line 216
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__GetCursorPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 218
	mov	esi, esp
	push	2147483647				; 7fffffffH
	push	2147483647				; 7fffffffH
	push	-2147483648				; 80000000H
	push	-2147483648				; 80000000H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 540				; 0000021cH
	push	edx
	call	DWORD PTR __imp__SetRect@20
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 219
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T6[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@MMM@Z		; DirectX::XMFLOAT3::XMFLOAT3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 556				; 0000022cH
	call	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT3::operator=
; Line 220
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@MMM@Z		; DirectX::XMFLOAT3::XMFLOAT3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 568				; 00000238H
	call	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT3::operator=
; Line 221
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0XMFLOAT2@DirectX@@QAE@MM@Z		; DirectX::XMFLOAT2::XMFLOAT2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 588				; 0000024cH
	call	??4XMFLOAT2@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT2::operator=
; Line 223
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0XMFLOAT2@DirectX@@QAE@MM@Z		; DirectX::XMFLOAT2::XMFLOAT2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 472				; 000001d8H
	call	??4XMFLOAT2@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT2::operator=
; Line 225
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@MMM@Z		; DirectX::XMFLOAT3::XMFLOAT3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 632				; 00000278H
	call	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT3::operator=
; Line 226
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@MMM@Z		; DirectX::XMFLOAT3::XMFLOAT3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 644				; 00000284H
	call	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT3::operator=
; Line 227
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
??0CBaseCamera@@QAE@XZ ENDP				; CBaseCamera::CBaseCamera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ScreenToVector@CD3DArcBall@@IAE?AT__m128@@MM@Z
_TEXT	SEGMENT
tv177 = -52						; size = 4
$T1 = -48						; size = 16
_scale$2 = -24						; size = 4
_mag$ = -20						; size = 4
_z$ = -16						; size = 4
_y$ = -12						; size = 4
_x$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_fScreenPtX$ = 12					; size = 4
_fScreenPtY$ = 16					; size = 4
?ScreenToVector@CD3DArcBall@@IAE?AT__m128@@MM@Z PROC	; CD3DArcBall::ScreenToVector, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.h
; Line 90
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 92
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+192]
	movss	xmm1, DWORD PTR _fScreenPtX$[ebx]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+200]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	subss	xmm1, xmm0
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+200]
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+216]
	divss	xmm0, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	movss	DWORD PTR _x$[ebp], xmm1
; Line 93
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+196]
	movss	xmm1, DWORD PTR _fScreenPtY$[ebx]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+204]
	cdq
	sub	eax, edx
	sar	eax, 1
	cvtsi2ss xmm0, eax
	subss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+204]
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+216]
	divss	xmm0, DWORD PTR __real@40000000
	divss	xmm1, xmm0
	movss	DWORD PTR _y$[ebp], xmm1
; Line 95
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _z$[ebp], xmm0
; Line 96
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	mulss	xmm1, DWORD PTR _y$[ebp]
	addss	xmm0, xmm1
	movss	DWORD PTR _mag$[ebp], xmm0
; Line 98
	movss	xmm0, DWORD PTR _mag$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN2@ScreenToVe
; Line 100
	push	ecx
	movss	xmm0, DWORD PTR _mag$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	fstp	DWORD PTR tv177[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv177[ebp]
	movss	DWORD PTR _scale$2[ebp], xmm0
; Line 101
	movss	xmm0, DWORD PTR _x$[ebp]
	mulss	xmm0, DWORD PTR _scale$2[ebp]
	movss	DWORD PTR _x$[ebp], xmm0
; Line 102
	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _scale$2[ebp]
	movss	DWORD PTR _y$[ebp], xmm0
; Line 104
	jmp	SHORT $LN1@ScreenToVe
$LN2@ScreenToVe:
; Line 105
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _mag$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	fstp	DWORD PTR _z$[ebp]
$LN1@ScreenToVe:
; Line 107
	movss	xmm3, DWORD PTR __real@00000000
	movss	xmm2, DWORD PTR _z$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	call	?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	edx, DWORD PTR ___$ReturnUdt$[ebx]
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [edx], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 108
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
?ScreenToVector@CD3DArcBall@@IAE?AT__m128@@MM@Z ENDP	; CD3DArcBall::ScreenToVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QuatFromBallPoints@CD3DArcBall@@SA?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -128						; size = 16
$T2 = -112						; size = 16
$T3 = -96						; size = 16
_vPart$ = -80						; size = 16
$T4 = -64						; size = 16
_dot$ = -48						; size = 16
_vTo$ = -32						; size = 16
_vFrom$ = -16						; size = 16
?QuatFromBallPoints@CD3DArcBall@@SA?AT__m128@@T2@0@Z PROC ; CD3DArcBall::QuatFromBallPoints, COMDAT
; _vFrom$ = xmm0
; _vTo$ = xmm1
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.h
; Line 61
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	edi
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movaps	XMMWORD PTR _vTo$[ebp], xmm1
	movaps	XMMWORD PTR _vFrom$[ebp], xmm0
; Line 64
	movaps	xmm1, XMMWORD PTR _vTo$[ebp]
	movaps	xmm0, XMMWORD PTR _vFrom$[ebp]
	call	?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Dot
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _dot$[ebp], xmm0
; Line 65
	movaps	xmm1, XMMWORD PTR _vTo$[ebp]
	movaps	xmm0, XMMWORD PTR _vFrom$[ebp]
	call	?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Cross
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vPart$[ebp], xmm0
; Line 66
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMSelect1110
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm2, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _vPart$[ebp]
	movaps	xmm0, XMMWORD PTR _dot$[ebp]
	call	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 67
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?QuatFromBallPoints@CD3DArcBall@@SA?AT__m128@@T2@0@Z ENDP ; CD3DArcBall::QuatFromBallPoints
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetQuatNow@CD3DArcBall@@QAEXABT__m128@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_q$ = 8							; size = 4
?SetQuatNow@CD3DArcBall@@QAEXABT__m128@@@Z PROC		; CD3DArcBall::SetQuatNow, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.h
; Line 58
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _q$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z ; DirectX::XMStoreFloat4
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetQuatNow@CD3DArcBall@@QAEXABT__m128@@@Z ENDP		; CD3DArcBall::SetQuatNow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsBeingDragged@CD3DArcBall@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBeingDragged@CD3DArcBall@@QBE_NXZ PROC		; CD3DArcBall::IsBeingDragged, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.h
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+256]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBeingDragged@CD3DArcBall@@QBE_NXZ ENDP		; CD3DArcBall::IsBeingDragged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetRotationMatrix@CD3DArcBall@@QBE?AUXMMATRIX@DirectX@@XZ
_TEXT	SEGMENT
$T1 = -176						; size = 64
$T2 = -112						; size = 64
$T3 = -48						; size = 16
_q$ = -32						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetRotationMatrix@CD3DArcBall@@QBE?AUXMMATRIX@DirectX@@XZ PROC ; CD3DArcBall::GetRotationMatrix, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.h
; Line 49
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-184]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 51
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	?XMLoadFloat4@DirectX@@YQ?AT__m128@@PBUXMFLOAT4@1@@Z ; DirectX::XMLoadFloat4
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _q$[ebp], xmm0
; Line 52
	movaps	xmm0, XMMWORD PTR _q$[ebp]
	call	?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationQuaternion
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebx]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 53
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
?GetRotationMatrix@CD3DArcBall@@QBE?AUXMMATRIX@DirectX@@XZ ENDP ; CD3DArcBall::GetRotationMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -836						; size = 4
$T1 = -832						; size = 64
$T2 = -768						; size = 64
$T3 = -704						; size = 64
$T4 = -640						; size = 64
$T5 = -576						; size = 64
$T6 = -512						; size = 64
$T7 = -448						; size = 64
$T8 = -384						; size = 64
$T9 = -320						; size = 64
$T10 = -256						; size = 64
_mTranslation$11 = -176					; size = 64
_mTranslationDelta$12 = -96				; size = 64
_fDeltaY$13 = -24					; size = 4
_fDeltaX$14 = -20					; size = 4
_iMouseY$ = -16						; size = 4
_iMouseX$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HandleMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z PROC	; CD3DArcBall::HandleMessages
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 101
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 840				; 00000348H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-840]
	mov	ecx, 210				; 000000d2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 103
	mov	eax, DWORD PTR _lParam$[ebx]
	and	eax, 65535				; 0000ffffH
	movsx	ecx, ax
	mov	DWORD PTR _iMouseX$[ebp], ecx
; Line 104
	mov	edx, DWORD PTR _lParam$[ebx]
	shr	edx, 16					; 00000010H
	and	edx, 65535				; 0000ffffH
	movsx	eax, dx
	mov	DWORD PTR _iMouseY$[ebp], eax
; Line 106
	mov	ecx, DWORD PTR _uMsg$[ebx]
	mov	DWORD PTR tv71[ebp], ecx
	mov	edx, DWORD PTR tv71[ebp]
	sub	edx, 512				; 00000200H
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 21			; 00000015H
	ja	$LN14@HandleMess
	mov	eax, DWORD PTR tv71[ebp]
	movzx	ecx, BYTE PTR $LN18@HandleMess[eax]
	jmp	DWORD PTR $LN23@HandleMess[ecx*4]
$LN13@HandleMess:
; Line 110
	mov	esi, esp
	mov	edx, DWORD PTR _hWnd$[ebx]
	push	edx
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 111
	mov	eax, DWORD PTR _iMouseY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMouseX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnBegin@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnBegin
; Line 112
	mov	eax, 1
	jmp	$LN16@HandleMess
$LN12@HandleMess:
; Line 115
	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 116
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnEnd@CD3DArcBall@@QAEXXZ		; CD3DArcBall::OnEnd
; Line 117
	mov	eax, 1
	jmp	$LN16@HandleMess
$LN11@HandleMess:
; Line 119
	mov	edx, DWORD PTR _lParam$[ebx]
	cmp	edx, DWORD PTR _hWnd$[ebx]
	je	SHORT $LN10@HandleMess
; Line 121
	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 122
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnEnd@CD3DArcBall@@QAEXXZ		; CD3DArcBall::OnEnd
$LN10@HandleMess:
; Line 124
	mov	eax, 1
	jmp	$LN16@HandleMess
$LN9@HandleMess:
; Line 130
	mov	esi, esp
	mov	eax, DWORD PTR _hWnd$[ebx]
	push	eax
	call	DWORD PTR __imp__SetCapture@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 132
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iMouseX$[ebp]
	mov	DWORD PTR [ecx+260], edx
; Line 133
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iMouseY$[ebp]
	mov	DWORD PTR [eax+264], ecx
; Line 134
	mov	eax, 1
	jmp	$LN16@HandleMess
$LN8@HandleMess:
; Line 138
	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 139
	mov	eax, 1
	jmp	$LN16@HandleMess
$LN7@HandleMess:
; Line 142
	mov	edx, DWORD PTR _wParam$[ebx]
	and	edx, 1
	je	SHORT $LN6@HandleMess
; Line 144
	mov	eax, DWORD PTR _iMouseY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMouseX$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnMove@CD3DArcBall@@QAEXHH@Z		; CD3DArcBall::OnMove
	jmp	$LN4@HandleMess
$LN6@HandleMess:
; Line 146
	mov	edx, DWORD PTR _wParam$[ebx]
	and	edx, 2
	jne	SHORT $LN3@HandleMess
	mov	eax, DWORD PTR _wParam$[ebx]
	and	eax, 16					; 00000010H
	je	$LN4@HandleMess
$LN3@HandleMess:
; Line 149
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	sub	edx, DWORD PTR _iMouseX$[ebp]
	cvtsi2ss xmm0, edx
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [eax+220]
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [ecx+200]
	divss	xmm0, xmm1
	movss	DWORD PTR _fDeltaX$14[ebp], xmm0
; Line 150
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+264]
	sub	eax, DWORD PTR _iMouseY$[ebp]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mulss	xmm0, DWORD PTR [ecx+220]
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm1, DWORD PTR [edx+204]
	divss	xmm0, xmm1
	movss	DWORD PTR _fDeltaY$13[ebp], xmm0
; Line 152
	lea	ecx, DWORD PTR _mTranslationDelta$12[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 153
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ; DirectX::XMLoadFloat4x4
	movaps	XMMWORD PTR $T5[ebp+48], xmm3
	movaps	XMMWORD PTR $T5[ebp+32], xmm2
	movaps	XMMWORD PTR $T5[ebp+16], xmm1
	movaps	XMMWORD PTR $T5[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T5[ebp]
	lea	edi, DWORD PTR $T10[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T10[ebp]
	lea	edi, DWORD PTR _mTranslation$11[ebp]
	rep movsd
; Line 154
	mov	eax, DWORD PTR _wParam$[ebx]
	and	eax, 2
	je	$LN2@HandleMess
; Line 156
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR _fDeltaY$13[ebp]
	movss	xmm0, DWORD PTR __real@c0000000
	mulss	xmm0, DWORD PTR _fDeltaX$14[ebp]
	movss	xmm2, DWORD PTR __real@00000000
	call	?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
	movaps	XMMWORD PTR $T4[ebp+48], xmm3
	movaps	XMMWORD PTR $T4[ebp+32], xmm2
	movaps	XMMWORD PTR $T4[ebp+16], xmm1
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T4[ebp]
	lea	edi, DWORD PTR $T9[ebp]
	rep movsd
	lea	ecx, DWORD PTR $T9[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mTranslationDelta$12[ebp]
	call	??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMMATRIX::operator=
; Line 157
	lea	ecx, DWORD PTR _mTranslationDelta$12[ebp]
	movaps	xmm0, XMMWORD PTR _mTranslation$11[ebp]
	movaps	xmm1, XMMWORD PTR _mTranslation$11[ebp+16]
	movaps	xmm2, XMMWORD PTR _mTranslation$11[ebp+32]
	movaps	xmm3, XMMWORD PTR _mTranslation$11[ebp+48]
	call	?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
	movaps	XMMWORD PTR $T3[ebp+48], xmm3
	movaps	XMMWORD PTR $T3[ebp+32], xmm2
	movaps	XMMWORD PTR $T3[ebp+16], xmm1
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T3[ebp]
	lea	edi, DWORD PTR $T8[ebp]
	rep movsd
	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	lea	ecx, DWORD PTR _mTranslation$11[ebp]
	call	??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMMATRIX::operator=
; Line 159
	jmp	$LN1@HandleMess
$LN2@HandleMess:
; Line 161
	movss	xmm2, DWORD PTR __real@40a00000
	mulss	xmm2, DWORD PTR _fDeltaY$13[ebp]
	movss	xmm1, DWORD PTR __real@00000000
	movss	xmm0, DWORD PTR __real@00000000
	call	?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ; DirectX::XMMatrixTranslation
	movaps	XMMWORD PTR $T2[ebp+48], xmm3
	movaps	XMMWORD PTR $T2[ebp+32], xmm2
	movaps	XMMWORD PTR $T2[ebp+16], xmm1
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR $T7[ebp]
	rep movsd
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	lea	ecx, DWORD PTR _mTranslationDelta$12[ebp]
	call	??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMMATRIX::operator=
; Line 162
	lea	ecx, DWORD PTR _mTranslationDelta$12[ebp]
	movaps	xmm0, XMMWORD PTR _mTranslation$11[ebp]
	movaps	xmm1, XMMWORD PTR _mTranslation$11[ebp+16]
	movaps	xmm2, XMMWORD PTR _mTranslation$11[ebp+32]
	movaps	xmm3, XMMWORD PTR _mTranslation$11[ebp+48]
	call	?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T6[ebp]
	rep movsd
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mTranslation$11[ebp]
	call	??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMMATRIX::operator=
$LN1@HandleMess:
; Line 165
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	movaps	xmm0, XMMWORD PTR _mTranslationDelta$12[ebp]
	movaps	xmm1, XMMWORD PTR _mTranslationDelta$12[ebp+16]
	movaps	xmm2, XMMWORD PTR _mTranslationDelta$12[ebp+32]
	movaps	xmm3, XMMWORD PTR _mTranslationDelta$12[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 166
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	movaps	xmm0, XMMWORD PTR _mTranslation$11[ebp]
	movaps	xmm1, XMMWORD PTR _mTranslation$11[ebp+16]
	movaps	xmm2, XMMWORD PTR _mTranslation$11[ebp+32]
	movaps	xmm3, XMMWORD PTR _mTranslation$11[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 169
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iMouseX$[ebp]
	mov	DWORD PTR [edx+260], eax
; Line 170
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iMouseY$[ebp]
	mov	DWORD PTR [ecx+264], edx
$LN4@HandleMess:
; Line 172
	mov	eax, 1
	jmp	SHORT $LN16@HandleMess
$LN14@HandleMess:
; Line 175
	xor	eax, eax
$LN16@HandleMess:
; Line 176
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@HandleMess
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	16					; 00000010H
	npad	1
$LN22@HandleMess:
	DD	2
	DD	$LN21@HandleMess
$LN21@HandleMess:
	DD	-96					; ffffffa0H
	DD	64					; 00000040H
	DD	$LN19@HandleMess
	DD	-176					; ffffff50H
	DD	64					; 00000040H
	DD	$LN20@HandleMess
$LN20@HandleMess:
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN19@HandleMess:
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
	npad	1
$LN23@HandleMess:
	DD	$LN7@HandleMess
	DD	$LN13@HandleMess
	DD	$LN12@HandleMess
	DD	$LN9@HandleMess
	DD	$LN8@HandleMess
	DD	$LN11@HandleMess
	DD	$LN14@HandleMess
$LN18@HandleMess:
	DB	0
	DB	1
	DB	2
	DB	1
	DB	3
	DB	4
	DB	3
	DB	3
	DB	4
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
?HandleMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z ENDP	; CD3DArcBall::HandleMessages
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnEnd@CD3DArcBall@@QAEXXZ PROC				; CD3DArcBall::OnEnd
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 93
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 94
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+256], 0
; Line 95
	mov	esp, ebp
	pop	ebp
	ret	0
?OnEnd@CD3DArcBall@@QAEXXZ ENDP				; CD3DArcBall::OnEnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
_result$3 = -128					; size = 16
$T4 = -112						; size = 16
_qdown$5 = -96						; size = 16
$T6 = -80						; size = 16
_down$7 = -64						; size = 16
_curr$8 = -32						; size = 16
_this$ = -4						; size = 4
_nX$ = 8						; size = 4
_nY$ = 12						; size = 4
?OnMove@CD3DArcBall@@QAEXHH@Z PROC			; CD3DArcBall::OnMove
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 76
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+256]
	test	ecx, ecx
	je	$LN1@OnMove
; Line 79
	cvtsi2ss xmm0, DWORD PTR _nY$[ebx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _nX$[ebx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR _curr$8[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScreenToVector@CD3DArcBall@@IAE?AT__m128@@MM@Z ; CD3DArcBall::ScreenToVector
; Line 80
	movaps	xmm0, XMMWORD PTR _curr$8[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
; Line 82
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 268				; 0000010cH
	call	?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ; DirectX::XMLoadFloat3
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _down$7[ebp], xmm0
; Line 83
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	call	?XMLoadFloat4@DirectX@@YQ?AT__m128@@PBUXMFLOAT4@1@@Z ; DirectX::XMLoadFloat4
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _qdown$5[ebp], xmm0
; Line 85
	movaps	xmm1, XMMWORD PTR _curr$8[ebp]
	movaps	xmm0, XMMWORD PTR _down$7[ebp]
	call	?QuatFromBallPoints@CD3DArcBall@@SA?AT__m128@@T2@0@Z ; CD3DArcBall::QuatFromBallPoints
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm1, XMMWORD PTR $T2[ebp]
	movaps	xmm0, XMMWORD PTR _qdown$5[ebp]
	call	?XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMQuaternionMultiply
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _result$3[ebp], xmm0
; Line 86
	movaps	xmm0, XMMWORD PTR _result$3[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z ; DirectX::XMStoreFloat4
$LN1@OnMove:
; Line 88
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@OnMove
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
	npad	3
$LN6@OnMove:
	DD	1
	DD	$LN5@OnMove
$LN5@OnMove:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN4@OnMove
$LN4@OnMove:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	0
?OnMove@CD3DArcBall@@QAEXHH@Z ENDP			; CD3DArcBall::OnMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_v$1 = -32						; size = 16
_this$ = -4						; size = 4
_nX$ = 8						; size = 4
_nY$ = 12						; size = 4
?OnBegin@CD3DArcBall@@QAEXHH@Z PROC			; CD3DArcBall::OnBegin
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 58
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 64
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nX$[ebx]
	cmp	ecx, DWORD PTR [eax+192]
	jl	$LN1@OnBegin
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+200]
	cmp	DWORD PTR _nX$[ebx], eax
	jge	SHORT $LN1@OnBegin
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _nY$[ebx]
	cmp	eax, DWORD PTR [edx+196]
	jl	SHORT $LN1@OnBegin
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+196]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+204]
	cmp	DWORD PTR _nY$[ebx], edx
	jge	SHORT $LN1@OnBegin
; Line 66
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+256], 1
; Line 67
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 240				; 000000f0H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	call	??4XMFLOAT4@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT4::operator=
; Line 68
	cvtsi2ss xmm0, DWORD PTR _nY$[ebx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	cvtsi2ss xmm0, DWORD PTR _nX$[ebx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _v$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScreenToVector@CD3DArcBall@@IAE?AT__m128@@MM@Z ; CD3DArcBall::ScreenToVector
; Line 69
	movaps	xmm0, XMMWORD PTR _v$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 268				; 0000010cH
	call	?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ; DirectX::XMStoreFloat3
$LN1@OnBegin:
; Line 71
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@OnBegin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
	npad	3
$LN6@OnBegin:
	DD	1
	DD	$LN5@OnBegin
$LN5@OnBegin:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN4@OnBegin
$LN4@OnBegin:
	DB	118					; 00000076H
	DB	0
?OnBegin@CD3DArcBall@@QAEXHH@Z ENDP			; CD3DArcBall::OnBegin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetOffset@CD3DArcBall@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nX$ = 8						; size = 4
_nY$ = 12						; size = 4
?SetOffset@CD3DArcBall@@QAEXHH@Z PROC			; CD3DArcBall::SetOffset, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.h
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nX$[ebp]
	mov	DWORD PTR [eax+192], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _nY$[ebp]
	mov	DWORD PTR [edx+196], eax
	mov	esp, ebp
	pop	ebp
	ret	8
?SetOffset@CD3DArcBall@@QAEXHH@Z ENDP			; CD3DArcBall::SetOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetWindow@CD3DArcBall@@QAEXHHM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nWidth$ = 8						; size = 4
_nHeight$ = 12						; size = 4
_fRadius$ = 16						; size = 4
?SetWindow@CD3DArcBall@@QAEXHHM@Z PROC			; CD3DArcBall::SetWindow, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.h
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 31
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nWidth$[ebp]
	mov	DWORD PTR [eax+200], ecx
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _nHeight$[ebp]
	mov	DWORD PTR [edx+204], eax
; Line 33
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fRadius$[ebp]
	movss	DWORD PTR [ecx+216], xmm0
; Line 34
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+200]
	divss	xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+208], xmm0
; Line 35
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+204]
	divss	xmm0, DWORD PTR __real@40000000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+212], xmm0
; Line 36
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetWindow@CD3DArcBall@@QAEXHHM@Z ENDP			; CD3DArcBall::SetWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -272						; size = 64
$T2 = -208						; size = 64
_id$ = -128						; size = 64
$T3 = -48						; size = 16
_qid$ = -32						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?Reset@CD3DArcBall@@QAEXXZ PROC				; CD3DArcBall::Reset
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 40
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 41
	call	?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ ; DirectX::XMQuaternionIdentity
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _qid$[ebp], xmm0
; Line 42
	movaps	xmm0, XMMWORD PTR _qid$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	call	?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z ; DirectX::XMStoreFloat4
; Line 43
	movaps	xmm0, XMMWORD PTR _qid$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z ; DirectX::XMStoreFloat4
; Line 45
	call	?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ ; DirectX::XMMatrixIdentity
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	lea	edi, DWORD PTR _id$[ebp]
	rep movsd
; Line 46
	mov	ecx, DWORD PTR _this$[ebp]
	movaps	xmm0, XMMWORD PTR _id$[ebp]
	movaps	xmm1, XMMWORD PTR _id$[ebp+16]
	movaps	xmm2, XMMWORD PTR _id$[ebp+32]
	movaps	xmm3, XMMWORD PTR _id$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 47
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	movaps	xmm0, XMMWORD PTR _id$[ebp]
	movaps	xmm1, XMMWORD PTR _id$[ebp+16]
	movaps	xmm2, XMMWORD PTR _id$[ebp+32]
	movaps	xmm3, XMMWORD PTR _id$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 48
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	movaps	xmm0, XMMWORD PTR _id$[ebp]
	movaps	xmm1, XMMWORD PTR _id$[ebp+16]
	movaps	xmm2, XMMWORD PTR _id$[ebp+32]
	movaps	xmm3, XMMWORD PTR _id$[ebp+48]
	call	?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ; DirectX::XMStoreFloat4x4
; Line 50
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+256], 0
; Line 51
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+220], xmm0
; Line 52
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [edx+216], xmm0
; Line 53
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Reset
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN5@Reset:
	DD	1
	DD	$LN4@Reset
$LN4@Reset:
	DD	-128					; ffffff80H
	DD	64					; 00000040H
	DD	$LN3@Reset
$LN3@Reset:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
?Reset@CD3DArcBall@@QAEXXZ ENDP				; CD3DArcBall::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -56						; size = 12
$T2 = -44						; size = 12
_rc$ = -28						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
??0CD3DArcBall@@QAE@XZ PROC				; CD3DArcBall::CD3DArcBall
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\optional\dxutcamera.cpp
; Line 25
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0XMFLOAT4X4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4X4::XMFLOAT4X4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0XMFLOAT4X4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4X4::XMFLOAT4X4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??0XMFLOAT4X4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4X4::XMFLOAT4X4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	??0XMFLOAT2@DirectX@@QAE@XZ		; DirectX::XMFLOAT2::XMFLOAT2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	call	??0XMFLOAT4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4::XMFLOAT4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	??0XMFLOAT4@DirectX@@QAE@XZ		; DirectX::XMFLOAT4::XMFLOAT4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 268				; 0000010cH
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	call	??0XMFLOAT3@DirectX@@QAE@XZ		; DirectX::XMFLOAT3::XMFLOAT3
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@CD3DArcBall@@QAEXXZ		; CD3DArcBall::Reset
; Line 28
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@MMM@Z		; DirectX::XMFLOAT3::XMFLOAT3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 268				; 0000010cH
	call	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT3::operator=
; Line 29
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0XMFLOAT3@DirectX@@QAE@MMM@Z		; DirectX::XMFLOAT3::XMFLOAT3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	call	??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMFLOAT3::operator=
; Line 30
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+196], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+192], 0
; Line 33
	mov	esi, esp
	lea	edx, DWORD PTR _rc$[ebp]
	push	edx
	mov	edi, esp
	call	DWORD PTR __imp__GetForegroundWindow@0
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	call	DWORD PTR __imp__GetClientRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 34
	push	ecx
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _rc$[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _rc$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetWindow@CD3DArcBall@@QAEXHHM@Z	; CD3DArcBall::SetWindow
; Line 35
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@CD3DArcBal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@CD3DArcBal:
	DD	1
	DD	$LN4@CD3DArcBal
$LN4@CD3DArcBal:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN3@CD3DArcBal
$LN3@CD3DArcBal:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
??0CD3DArcBall@@QAE@XZ ENDP				; CD3DArcBall::CD3DArcBall
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
tv132 = -240						; size = 16
tv130 = -224						; size = 16
$T1 = -208						; size = 16
$T2 = -192						; size = 16
$T3 = -176						; size = 16
_masked2$ = -160					; size = 16
$T4 = -144						; size = 16
$T5 = -128						; size = 16
_masked1$ = -112					; size = 16
$T6 = -96						; size = 16
_shuffled2$ = -80					; size = 16
$T7 = -64						; size = 16
_shuffled1$ = -48					; size = 16
_v2$ = -32						; size = 16
_v1$ = -16						; size = 16
?Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute, COMDAT
; _v1$ = xmm0
; _v2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1453
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _v2$[ebp], xmm1
	movaps	XMMWORD PTR _v1$[ebp], xmm0
; Line 1462
	movaps	xmm0, XMMWORD PTR _v1$[ebp]
	shufps	xmm0, XMMWORD PTR _v1$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _shuffled1$[ebp], xmm0
; Line 1463
	movaps	xmm0, XMMWORD PTR _v2$[ebp]
	shufps	xmm0, XMMWORD PTR _v2$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _shuffled2$[ebp], xmm0
; Line 1465
	movaps	xmm0, XMMWORD PTR _shuffled1$[ebp]
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, OFFSET ?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute'::`2'::selectMask
	movaps	XMMWORD PTR tv130[ebp], xmm0
	call	??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv130[ebp]
	andnps	xmm0, xmm1
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _masked1$[ebp], xmm0
; Line 1466
	movaps	xmm0, XMMWORD PTR _shuffled2$[ebp]
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, OFFSET ?selectMask@?1??Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute'::`2'::selectMask
	movaps	XMMWORD PTR tv132[ebp], xmm0
	call	??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv132[ebp]
	andps	xmm0, xmm1
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _masked2$[ebp], xmm0
; Line 1468
	movaps	xmm0, XMMWORD PTR _masked1$[ebp]
	orps	xmm0, XMMWORD PTR _masked2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 1469
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
tv132 = -240						; size = 16
tv130 = -224						; size = 16
$T1 = -208						; size = 16
$T2 = -192						; size = 16
$T3 = -176						; size = 16
_masked2$ = -160					; size = 16
$T4 = -144						; size = 16
$T5 = -128						; size = 16
_masked1$ = -112					; size = 16
$T6 = -96						; size = 16
_shuffled2$ = -80					; size = 16
$T7 = -64						; size = 16
_shuffled1$ = -48					; size = 16
_v2$ = -32						; size = 16
_v1$ = -16						; size = 16
?Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute, COMDAT
; _v1$ = xmm0
; _v2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1453
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _v2$[ebp], xmm1
	movaps	XMMWORD PTR _v1$[ebp], xmm0
; Line 1462
	movaps	xmm0, XMMWORD PTR _v1$[ebp]
	shufps	xmm0, XMMWORD PTR _v1$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _shuffled1$[ebp], xmm0
; Line 1463
	movaps	xmm0, XMMWORD PTR _v2$[ebp]
	shufps	xmm0, XMMWORD PTR _v2$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _shuffled2$[ebp], xmm0
; Line 1465
	movaps	xmm0, XMMWORD PTR _shuffled1$[ebp]
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, OFFSET ?selectMask@?1??Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute'::`2'::selectMask
	movaps	XMMWORD PTR tv130[ebp], xmm0
	call	??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv130[ebp]
	andnps	xmm0, xmm1
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _masked1$[ebp], xmm0
; Line 1466
	movaps	xmm0, XMMWORD PTR _shuffled2$[ebp]
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, OFFSET ?selectMask@?1??Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute'::`2'::selectMask
	movaps	XMMWORD PTR tv132[ebp], xmm0
	call	??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv132[ebp]
	andps	xmm0, xmm1
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _masked2$[ebp], xmm0
; Line 1468
	movaps	xmm0, XMMWORD PTR _masked1$[ebp]
	orps	xmm0, XMMWORD PTR _masked2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 1469
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z
_TEXT	SEGMENT
tv132 = -240						; size = 16
tv130 = -224						; size = 16
$T1 = -208						; size = 16
$T2 = -192						; size = 16
$T3 = -176						; size = 16
_masked2$ = -160					; size = 16
$T4 = -144						; size = 16
$T5 = -128						; size = 16
_masked1$ = -112					; size = 16
$T6 = -96						; size = 16
_shuffled2$ = -80					; size = 16
$T7 = -64						; size = 16
_shuffled1$ = -48					; size = 16
_v2$ = -32						; size = 16
_v1$ = -16						; size = 16
?Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z PROC ; DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute, COMDAT
; _v1$ = xmm0
; _v2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1453
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _v2$[ebp], xmm1
	movaps	XMMWORD PTR _v1$[ebp], xmm0
; Line 1462
	movaps	xmm0, XMMWORD PTR _v1$[ebp]
	shufps	xmm0, XMMWORD PTR _v1$[ebp], 0
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _shuffled1$[ebp], xmm0
; Line 1463
	movaps	xmm0, XMMWORD PTR _v2$[ebp]
	shufps	xmm0, XMMWORD PTR _v2$[ebp], 0
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _shuffled2$[ebp], xmm0
; Line 1465
	movaps	xmm0, XMMWORD PTR _shuffled1$[ebp]
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, OFFSET ?selectMask@?1??Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute'::`2'::selectMask
	movaps	XMMWORD PTR tv130[ebp], xmm0
	call	??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv130[ebp]
	andnps	xmm0, xmm1
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _masked1$[ebp], xmm0
; Line 1466
	movaps	xmm0, XMMWORD PTR _shuffled2$[ebp]
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, OFFSET ?selectMask@?1??Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T5@0@Z@4UXMVECTORU32@4@B ; `DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute'::`2'::selectMask
	movaps	XMMWORD PTR tv132[ebp], xmm0
	call	??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORU32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv132[ebp]
	andps	xmm0, xmm1
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _masked2$[ebp], xmm0
; Line 1468
	movaps	xmm0, XMMWORD PTR _masked1$[ebp]
	orps	xmm0, XMMWORD PTR _masked2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 1469
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ENDP ; DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsStopped@CDXUTTimer@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsStopped@CDXUTTimer@@QBE_NXZ PROC			; CDXUTTimer::IsStopped, COMDAT
; _this$ = ecx
; File d:\engine class\assignment 1\scratch\dxsse\dxut\core\dxutmisc.h
; Line 94
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+1]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStopped@CDXUTTimer@@QBE_NXZ ENDP			; CDXUTTimer::IsStopped
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$XMVectorPermute@$05$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
$T1 = -64						; size = 16
_WhichW$ = -40						; size = 1
_WhichZ$ = -39						; size = 1
_WhichY$ = -38						; size = 1
_WhichX$ = -37						; size = 1
_Shuffle$ = -36						; size = 4
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
??$XMVectorPermute@$05$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<6,6,2,6>, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1502
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1509
	mov	DWORD PTR _Shuffle$[ebp], 170		; 000000aaH
; Line 1511
	mov	BYTE PTR _WhichX$[ebp], 1
; Line 1512
	mov	BYTE PTR _WhichY$[ebp], 1
; Line 1513
	mov	BYTE PTR _WhichZ$[ebp], 0
; Line 1514
	mov	BYTE PTR _WhichW$[ebp], 1
; Line 1516
	movaps	xmm1, XMMWORD PTR _V2$[ebp]
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	call	?Permute@?$PermuteHelper@$0KK@$00$00$0A@$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<170,1,1,0,1>::Permute
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 1522
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
??$XMVectorPermute@$05$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<6,6,2,6>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$XMVectorPermute@$04$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
$T1 = -64						; size = 16
_WhichW$ = -40						; size = 1
_WhichZ$ = -39						; size = 1
_WhichY$ = -38						; size = 1
_WhichX$ = -37						; size = 1
_Shuffle$ = -36						; size = 4
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
??$XMVectorPermute@$04$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<5,1,5,5>, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1502
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1509
	mov	DWORD PTR _Shuffle$[ebp], 85		; 00000055H
; Line 1511
	mov	BYTE PTR _WhichX$[ebp], 1
; Line 1512
	mov	BYTE PTR _WhichY$[ebp], 0
; Line 1513
	mov	BYTE PTR _WhichZ$[ebp], 1
; Line 1514
	mov	BYTE PTR _WhichW$[ebp], 1
; Line 1516
	movaps	xmm1, XMMWORD PTR _V2$[ebp]
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	call	?Permute@?$PermuteHelper@$0FF@$00$0A@$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<85,1,0,1,1>::Permute
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 1522
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
??$XMVectorPermute@$04$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<5,1,5,5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$XMVectorPermute@$0A@$03$03$03@DirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
$T1 = -64						; size = 16
_WhichW$ = -40						; size = 1
_WhichZ$ = -39						; size = 1
_WhichY$ = -38						; size = 1
_WhichX$ = -37						; size = 1
_Shuffle$ = -36						; size = 4
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
??$XMVectorPermute@$0A@$03$03$03@DirectX@@YQ?AT__m128@@T1@0@Z PROC ; DirectX::XMVectorPermute<0,4,4,4>, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1502
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1509
	mov	DWORD PTR _Shuffle$[ebp], 0
; Line 1511
	mov	BYTE PTR _WhichX$[ebp], 0
; Line 1512
	mov	BYTE PTR _WhichY$[ebp], 1
; Line 1513
	mov	BYTE PTR _WhichZ$[ebp], 1
; Line 1514
	mov	BYTE PTR _WhichW$[ebp], 1
; Line 1516
	movaps	xmm1, XMMWORD PTR _V2$[ebp]
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	call	?Permute@?$PermuteHelper@$0A@$0A@$00$00$00@Internal@DirectX@@SQ?AT__m128@@T4@0@Z ; DirectX::Internal::PermuteHelper<0,0,1,1,1>::Permute
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 1522
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
??$XMVectorPermute@$0A@$03$03$03@DirectX@@YQ?AT__m128@@T1@0@Z ENDP ; DirectX::XMVectorPermute<0,4,4,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMReciprocalTwoPi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMReciprocalTwoPi@DirectX@@YAXXZ PROC		; DirectX::`dynamic initializer for 'g_XMReciprocalTwoPi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1736
	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _XM_1DIV2PI
	movss	DWORD PTR ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B, xmm0
	movss	xmm0, DWORD PTR _XM_1DIV2PI
	movss	DWORD PTR ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
	movss	xmm0, DWORD PTR _XM_1DIV2PI
	movss	DWORD PTR ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
	movss	xmm0, DWORD PTR _XM_1DIV2PI
	movss	DWORD PTR ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
	pop	ebp
	ret	0
??__Eg_XMReciprocalTwoPi@DirectX@@YAXXZ ENDP		; DirectX::`dynamic initializer for 'g_XMReciprocalTwoPi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMTwoPi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMTwoPi@DirectX@@YAXXZ PROC			; DirectX::`dynamic initializer for 'g_XMTwoPi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1735
	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _XM_2PI
	movss	DWORD PTR ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B, xmm0
	movss	xmm0, DWORD PTR _XM_2PI
	movss	DWORD PTR ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
	movss	xmm0, DWORD PTR _XM_2PI
	movss	DWORD PTR ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
	movss	xmm0, DWORD PTR _XM_2PI
	movss	DWORD PTR ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
	pop	ebp
	ret	0
??__Eg_XMTwoPi@DirectX@@YAXXZ ENDP			; DirectX::`dynamic initializer for 'g_XMTwoPi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMPi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMPi@DirectX@@YAXXZ PROC				; DirectX::`dynamic initializer for 'g_XMPi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1733
	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _XM_PI
	movss	DWORD PTR ?g_XMPi@DirectX@@3UXMVECTORF32@1@B, xmm0
	movss	xmm0, DWORD PTR _XM_PI
	movss	DWORD PTR ?g_XMPi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
	movss	xmm0, DWORD PTR _XM_PI
	movss	DWORD PTR ?g_XMPi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
	movss	xmm0, DWORD PTR _XM_PI
	movss	DWORD PTR ?g_XMPi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
	pop	ebp
	ret	0
??__Eg_XMPi@DirectX@@YAXXZ ENDP				; DirectX::`dynamic initializer for 'g_XMPi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_XMHalfPi@DirectX@@YAXXZ
text$di	SEGMENT
??__Eg_XMHalfPi@DirectX@@YAXXZ PROC			; DirectX::`dynamic initializer for 'g_XMHalfPi'', COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 1732
	push	ebp
	mov	ebp, esp
	movss	xmm0, DWORD PTR _XM_PIDIV2
	movss	DWORD PTR ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B, xmm0
	movss	xmm0, DWORD PTR _XM_PIDIV2
	movss	DWORD PTR ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B+4, xmm0
	movss	xmm0, DWORD PTR _XM_PIDIV2
	movss	DWORD PTR ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B+8, xmm0
	movss	xmm0, DWORD PTR _XM_PIDIV2
	movss	DWORD PTR ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B+12, xmm0
	pop	ebp
	ret	0
??__Eg_XMHalfPi@DirectX@@YAXXZ ENDP			; DirectX::`dynamic initializer for 'g_XMHalfPi''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMScalarSinCos@DirectX@@YAXPAM0M@Z
_TEXT	SEGMENT
_p$ = -20						; size = 4
_y2$ = -16						; size = 4
_sign$ = -12						; size = 4
_y$ = -8						; size = 4
_quotient$ = -4						; size = 4
_pSin$ = 8						; size = 4
_pCos$ = 12						; size = 4
_Value$ = 16						; size = 4
?XMScalarSinCos@DirectX@@YAXPAM0M@Z PROC		; DirectX::XMScalarSinCos, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 2340
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2341
	cmp	DWORD PTR _pSin$[ebp], 0
	jne	SHORT $LN9@XMScalarSi
	mov	esi, esp
	push	2341					; 00000925H
	push	OFFSET ??_C@_1IO@PAPJGEKF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_19MFJHDIJG@?$AAp?$AAS?$AAi?$AAn?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@XMScalarSi:
; Line 2342
	cmp	DWORD PTR _pCos$[ebp], 0
	jne	SHORT $LN10@XMScalarSi
	mov	esi, esp
	push	2342					; 00000926H
	push	OFFSET ??_C@_1IO@PAPJGEKF@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_19MNAGGFOC@?$AAp?$AAC?$AAo?$AAs?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@XMScalarSi:
; Line 2345
	movss	xmm0, DWORD PTR _XM_1DIV2PI
	mulss	xmm0, DWORD PTR _Value$[ebp]
	movss	DWORD PTR _quotient$[ebp], xmm0
; Line 2346
	movss	xmm0, DWORD PTR _Value$[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN6@XMScalarSi
; Line 2348
	movss	xmm0, DWORD PTR _quotient$[ebp]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si edx, xmm0
	cvtsi2ss xmm0, edx
	movss	DWORD PTR _quotient$[ebp], xmm0
; Line 2350
	jmp	SHORT $LN5@XMScalarSi
$LN6@XMScalarSi:
; Line 2352
	movss	xmm0, DWORD PTR _quotient$[ebp]
	subss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _quotient$[ebp], xmm0
$LN5@XMScalarSi:
; Line 2354
	movss	xmm0, DWORD PTR _XM_2PI
	mulss	xmm0, DWORD PTR _quotient$[ebp]
	movss	xmm1, DWORD PTR _Value$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _y$[ebp], xmm1
; Line 2358
	movss	xmm0, DWORD PTR _y$[ebp]
	comiss	xmm0, DWORD PTR _XM_PIDIV2
	jbe	SHORT $LN4@XMScalarSi
; Line 2360
	movss	xmm0, DWORD PTR _XM_PI
	subss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0
; Line 2361
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _sign$[ebp], xmm0
	jmp	SHORT $LN1@XMScalarSi
$LN4@XMScalarSi:
; Line 2363
	movss	xmm0, DWORD PTR _XM_PIDIV2
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR _y$[ebp]
	jbe	SHORT $LN2@XMScalarSi
; Line 2365
	movss	xmm0, DWORD PTR _XM_PI
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _y$[ebp], xmm0
; Line 2366
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _sign$[ebp], xmm0
; Line 2368
	jmp	SHORT $LN1@XMScalarSi
$LN2@XMScalarSi:
; Line 2370
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _sign$[ebp], xmm0
$LN1@XMScalarSi:
; Line 2373
	movss	xmm0, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _y2$[ebp], xmm0
; Line 2376
	movss	xmm0, DWORD PTR __real@b2cd365b
	mulss	xmm0, DWORD PTR _y2$[ebp]
	addss	xmm0, DWORD PTR __real@3638b88e
	mulss	xmm0, DWORD PTR _y2$[ebp]
	subss	xmm0, DWORD PTR __real@39500bf1
	mulss	xmm0, DWORD PTR _y2$[ebp]
	addss	xmm0, DWORD PTR __real@3c088886
	mulss	xmm0, DWORD PTR _y2$[ebp]
	subss	xmm0, DWORD PTR __real@3e2aaaab
	mulss	xmm0, DWORD PTR _y2$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _pSin$[ebp]
	movss	DWORD PTR [ecx], xmm0
; Line 2379
	movss	xmm0, DWORD PTR __real@b48bdd11
	mulss	xmm0, DWORD PTR _y2$[ebp]
	addss	xmm0, DWORD PTR __real@37cfb4c2
	mulss	xmm0, DWORD PTR _y2$[ebp]
	subss	xmm0, DWORD PTR __real@3ab609aa
	mulss	xmm0, DWORD PTR _y2$[ebp]
	addss	xmm0, DWORD PTR __real@3d2aaaa3
	mulss	xmm0, DWORD PTR _y2$[ebp]
	subss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _y2$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _p$[ebp], xmm0
; Line 2380
	movss	xmm0, DWORD PTR _sign$[ebp]
	mulss	xmm0, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _pCos$[ebp]
	movss	DWORD PTR [edx], xmm0
; Line 2381
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?XMScalarSinCos@DirectX@@YAXPAM0M@Z ENDP		; DirectX::XMScalarSinCos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMScalarNearEqual@DirectX@@YA_NMMM@Z
_TEXT	SEGMENT
tv68 = -12						; size = 4
tv76 = -8						; size = 4
_Delta$ = -4						; size = 4
_S1$ = 8						; size = 4
_S2$ = 12						; size = 4
_Epsilon$ = 16						; size = 4
?XMScalarNearEqual@DirectX@@YA_NMMM@Z PROC		; DirectX::XMScalarNearEqual, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 2150
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2151
	movss	xmm0, DWORD PTR _S1$[ebp]
	subss	xmm0, DWORD PTR _S2$[ebp]
	movss	DWORD PTR _Delta$[ebp], xmm0
; Line 2152
	push	ecx
	movss	xmm0, DWORD PTR _Delta$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	fstp	DWORD PTR tv76[ebp]
	movss	xmm0, DWORD PTR _Epsilon$[ebp]
	comiss	xmm0, DWORD PTR tv76[ebp]
	jb	SHORT $LN3@XMScalarNe
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@XMScalarNe
$LN3@XMScalarNe:
	mov	DWORD PTR tv68[ebp], 0
$LN4@XMScalarNe:
	mov	al, BYTE PTR tv68[ebp]
; Line 2153
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?XMScalarNearEqual@DirectX@@YA_NMMM@Z ENDP		; DirectX::XMScalarNearEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@1@@Z
_TEXT	SEGMENT
tv402 = -1280						; size = 16
tv400 = -1264						; size = 16
tv398 = -1248						; size = 16
tv396 = -1232						; size = 16
$T1 = -1216						; size = 16
$T2 = -1200						; size = 16
$T3 = -1184						; size = 16
$T4 = -1168						; size = 16
$T5 = -1152						; size = 16
$T6 = -1136						; size = 16
$T7 = -1120						; size = 16
$T8 = -1104						; size = 16
$T9 = -1088						; size = 16
$T10 = -1072						; size = 16
$T11 = -1056						; size = 16
$T12 = -1040						; size = 16
_tensor3$ = -1024					; size = 16
$T13 = -1008						; size = 16
_tensor2$ = -992					; size = 16
$T14 = -976						; size = 16
_tensor1$ = -960					; size = 16
$T15 = -944						; size = 16
_tensor0$ = -928					; size = 16
$T16 = -912						; size = 16
$T17 = -896						; size = 16
$T18 = -880						; size = 16
$T19 = -864						; size = 16
$T20 = -848						; size = 16
$T21 = -832						; size = 16
_xwywzw$ = -816						; size = 16
$T22 = -800						; size = 16
$T23 = -784						; size = 16
$T24 = -768						; size = 16
$T25 = -752						; size = 16
_xyxzyz$ = -736						; size = 16
$T26 = -720						; size = 16
$T27 = -704						; size = 16
$T28 = -688						; size = 16
$T29 = -672						; size = 16
$T30 = -656						; size = 16
$T31 = -640						; size = 16
$T32 = -624						; size = 16
_x2y2z2w2$ = -608					; size = 16
$T33 = -592						; size = 16
$T34 = -576						; size = 16
_t2$ = -560						; size = 16
$T35 = -544						; size = 16
$T36 = -528						; size = 16
_t1$ = -512						; size = 16
$T37 = -496						; size = 16
$T38 = -480						; size = 16
_t0$ = -464						; size = 16
$T39 = -448						; size = 16
$T40 = -432						; size = 16
_x2py2gez2pw2$ = -416					; size = 16
$T41 = -400						; size = 16
$T42 = -384						; size = 16
_z2gew2$ = -368						; size = 16
$T43 = -352						; size = 16
_r11pr00$ = -336					; size = 16
$T44 = -320						; size = 16
$T45 = -304						; size = 16
_x2gey2$ = -288						; size = 16
$T46 = -272						; size = 16
_r11mr00$ = -256					; size = 16
$T47 = -240						; size = 16
_r22$ = -224						; size = 16
$T48 = -208						; size = 16
_r11$ = -192						; size = 16
$T49 = -176						; size = 16
_r00$ = -160						; size = 16
_r2$ = -144						; size = 16
_r1$ = -128						; size = 16
_r0$ = -112						; size = 16
_M$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
?XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@1@@Z PROC ; DirectX::XMQuaternionRotationMatrix, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 749
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1280				; 00000500H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1280]
	mov	ecx, 320				; 00000140H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _M$[ebp+48], xmm3
	movaps	XMMWORD PTR _M$[ebp+32], xmm2
	movaps	XMMWORD PTR _M$[ebp+16], xmm1
	movaps	XMMWORD PTR _M$[ebp], xmm0
; Line 894
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movups	xmm0, XMMWORD PTR _M$[ebp+ecx]
	movups	XMMWORD PTR _r0$[ebp], xmm0
; Line 895
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR _M$[ebp+edx]
	movups	XMMWORD PTR _r1$[ebp], xmm0
; Line 896
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR _M$[ebp+eax]
	movups	XMMWORD PTR _r2$[ebp], xmm0
; Line 899
	movaps	xmm0, XMMWORD PTR _r0$[ebp]
	shufps	xmm0, XMMWORD PTR _r0$[ebp], 0
	movaps	XMMWORD PTR $T49[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T49[ebp]
	movaps	XMMWORD PTR _r00$[ebp], xmm0
; Line 901
	movaps	xmm0, XMMWORD PTR _r1$[ebp]
	shufps	xmm0, XMMWORD PTR _r1$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T48[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T48[ebp]
	movaps	XMMWORD PTR _r11$[ebp], xmm0
; Line 903
	movaps	xmm0, XMMWORD PTR _r2$[ebp]
	shufps	xmm0, XMMWORD PTR _r2$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T47[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T47[ebp]
	movaps	XMMWORD PTR _r22$[ebp], xmm0
; Line 907
	movaps	xmm0, XMMWORD PTR _r11$[ebp]
	subps	xmm0, XMMWORD PTR _r00$[ebp]
	movaps	XMMWORD PTR $T46[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T46[ebp]
	movaps	XMMWORD PTR _r11mr00$[ebp], xmm0
; Line 908
	lea	ecx, DWORD PTR $T45[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _r11mr00$[ebp]
	cmpleps	xmm1, xmm0
	movaps	XMMWORD PTR $T44[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T44[ebp]
	movaps	XMMWORD PTR _x2gey2$[ebp], xmm0
; Line 912
	movaps	xmm0, XMMWORD PTR _r11$[ebp]
	addps	xmm0, XMMWORD PTR _r00$[ebp]
	movaps	XMMWORD PTR $T43[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T43[ebp]
	movaps	XMMWORD PTR _r11pr00$[ebp], xmm0
; Line 913
	lea	edx, DWORD PTR $T42[ebp]
	push	edx
	mov	ecx, OFFSET ?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _r11pr00$[ebp]
	cmpleps	xmm1, xmm0
	movaps	XMMWORD PTR $T41[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T41[ebp]
	movaps	XMMWORD PTR _z2gew2$[ebp], xmm0
; Line 916
	lea	eax, DWORD PTR $T40[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMZero@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMZero
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _r22$[ebp]
	cmpleps	xmm1, xmm0
	movaps	XMMWORD PTR $T39[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T39[ebp]
	movaps	XMMWORD PTR _x2py2gez2pw2$[ebp], xmm0
; Line 919
	movaps	xmm0, XMMWORD PTR _r00$[ebp]
	lea	ecx, DWORD PTR $T38[ebp]
	push	ecx
	mov	ecx, OFFSET ?XMPMMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMPMMP
	movaps	XMMWORD PTR tv396[ebp], xmm0
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv396[ebp]
	mulps	xmm0, xmm1
	movaps	XMMWORD PTR $T37[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T37[ebp]
	movaps	XMMWORD PTR _t0$[ebp], xmm0
; Line 922
	movaps	xmm0, XMMWORD PTR _r11$[ebp]
	lea	edx, DWORD PTR $T36[ebp]
	push	edx
	mov	ecx, OFFSET ?XMMPMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMMPMP
	movaps	XMMWORD PTR tv398[ebp], xmm0
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv398[ebp]
	mulps	xmm0, xmm1
	movaps	XMMWORD PTR $T35[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T35[ebp]
	movaps	XMMWORD PTR _t1$[ebp], xmm0
; Line 925
	movaps	xmm0, XMMWORD PTR _r22$[ebp]
	lea	eax, DWORD PTR $T34[ebp]
	push	eax
	mov	ecx, OFFSET ?XMMMPP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMMMPP
	movaps	XMMWORD PTR tv400[ebp], xmm0
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv400[ebp]
	mulps	xmm0, xmm1
	movaps	XMMWORD PTR $T33[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T33[ebp]
	movaps	XMMWORD PTR _t2$[ebp], xmm0
; Line 928
	movaps	xmm0, XMMWORD PTR _t0$[ebp]
	addps	xmm0, XMMWORD PTR _t1$[ebp]
	movaps	XMMWORD PTR $T32[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T32[ebp]
	movaps	XMMWORD PTR _x2y2z2w2$[ebp], xmm0
; Line 929
	movaps	xmm0, XMMWORD PTR _t2$[ebp]
	addps	xmm0, XMMWORD PTR _x2y2z2w2$[ebp]
	movaps	XMMWORD PTR $T31[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T31[ebp]
	movaps	XMMWORD PTR _x2y2z2w2$[ebp], xmm0
; Line 930
	lea	ecx, DWORD PTR $T30[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _x2y2z2w2$[ebp]
	addps	xmm1, xmm0
	movaps	XMMWORD PTR $T29[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T29[ebp]
	movaps	XMMWORD PTR _x2y2z2w2$[ebp], xmm0
; Line 933
	movaps	xmm0, XMMWORD PTR _r0$[ebp]
	shufps	xmm0, XMMWORD PTR _r1$[ebp], 105	; 00000069H
	movaps	XMMWORD PTR $T28[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T28[ebp]
	movaps	XMMWORD PTR _t0$[ebp], xmm0
; Line 935
	movaps	xmm0, XMMWORD PTR _r1$[ebp]
	shufps	xmm0, XMMWORD PTR _r2$[ebp], 64		; 00000040H
	movaps	XMMWORD PTR $T27[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T27[ebp]
	movaps	XMMWORD PTR _t1$[ebp], xmm0
; Line 937
	movaps	xmm0, XMMWORD PTR _t1$[ebp]
	shufps	xmm0, XMMWORD PTR _t1$[ebp], 120	; 00000078H
	movaps	XMMWORD PTR $T26[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T26[ebp]
	movaps	XMMWORD PTR _t1$[ebp], xmm0
; Line 939
	movaps	xmm0, XMMWORD PTR _t0$[ebp]
	addps	xmm0, XMMWORD PTR _t1$[ebp]
	movaps	XMMWORD PTR $T25[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T25[ebp]
	movaps	XMMWORD PTR _xyxzyz$[ebp], xmm0
; Line 942
	movaps	xmm0, XMMWORD PTR _r2$[ebp]
	shufps	xmm0, XMMWORD PTR _r1$[ebp], 1
	movaps	XMMWORD PTR $T24[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T24[ebp]
	movaps	XMMWORD PTR _t0$[ebp], xmm0
; Line 944
	movaps	xmm0, XMMWORD PTR _r1$[ebp]
	shufps	xmm0, XMMWORD PTR _r0$[ebp], 106	; 0000006aH
	movaps	XMMWORD PTR $T23[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T23[ebp]
	movaps	XMMWORD PTR _t1$[ebp], xmm0
; Line 946
	movaps	xmm0, XMMWORD PTR _t1$[ebp]
	shufps	xmm0, XMMWORD PTR _t1$[ebp], 120	; 00000078H
	movaps	XMMWORD PTR $T22[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T22[ebp]
	movaps	XMMWORD PTR _t1$[ebp], xmm0
; Line 948
	movaps	xmm0, XMMWORD PTR _t0$[ebp]
	subps	xmm0, XMMWORD PTR _t1$[ebp]
	movaps	XMMWORD PTR $T21[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T21[ebp]
	movaps	XMMWORD PTR _xwywzw$[ebp], xmm0
; Line 949
	movaps	xmm0, XMMWORD PTR _xwywzw$[ebp]
	lea	edx, DWORD PTR $T20[ebp]
	push	edx
	mov	ecx, OFFSET ?XMMPMP@?1??XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@2@@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionRotationMatrix'::`2'::XMMPMP
	movaps	XMMWORD PTR tv402[ebp], xmm0
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv402[ebp]
	mulps	xmm0, xmm1
	movaps	XMMWORD PTR $T19[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T19[ebp]
	movaps	XMMWORD PTR _xwywzw$[ebp], xmm0
; Line 952
	movaps	xmm0, XMMWORD PTR _x2y2z2w2$[ebp]
	shufps	xmm0, XMMWORD PTR _xyxzyz$[ebp], 4
	movaps	XMMWORD PTR $T18[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T18[ebp]
	movaps	XMMWORD PTR _t0$[ebp], xmm0
; Line 954
	movaps	xmm0, XMMWORD PTR _x2y2z2w2$[ebp]
	shufps	xmm0, XMMWORD PTR _xwywzw$[ebp], 46	; 0000002eH
	movaps	XMMWORD PTR $T17[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T17[ebp]
	movaps	XMMWORD PTR _t1$[ebp], xmm0
; Line 956
	movaps	xmm0, XMMWORD PTR _xyxzyz$[ebp]
	shufps	xmm0, XMMWORD PTR _xwywzw$[ebp], 73	; 00000049H
	movaps	XMMWORD PTR $T16[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T16[ebp]
	movaps	XMMWORD PTR _t2$[ebp], xmm0
; Line 959
	movaps	xmm0, XMMWORD PTR _t0$[ebp]
	shufps	xmm0, XMMWORD PTR _t2$[ebp], 136	; 00000088H
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	movaps	XMMWORD PTR _tensor0$[ebp], xmm0
; Line 961
	movaps	xmm0, XMMWORD PTR _t0$[ebp]
	shufps	xmm0, XMMWORD PTR _t2$[ebp], 214	; 000000d6H
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T14[ebp]
	movaps	XMMWORD PTR _tensor1$[ebp], xmm0
; Line 963
	movaps	xmm0, XMMWORD PTR _t2$[ebp]
	shufps	xmm0, XMMWORD PTR _t1$[ebp], 132	; 00000084H
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	movaps	XMMWORD PTR _tensor2$[ebp], xmm0
; Line 965
	movaps	xmm0, XMMWORD PTR _t2$[ebp]
	shufps	xmm0, XMMWORD PTR _t1$[ebp], 110	; 0000006eH
	movaps	XMMWORD PTR $T12[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T12[ebp]
	movaps	XMMWORD PTR _tensor3$[ebp], xmm0
; Line 969
	movaps	xmm0, XMMWORD PTR _x2gey2$[ebp]
	andps	xmm0, XMMWORD PTR _tensor0$[ebp]
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _t0$[ebp], xmm0
; Line 970
	movaps	xmm0, XMMWORD PTR _x2gey2$[ebp]
	andnps	xmm0, XMMWORD PTR _tensor1$[ebp]
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _t1$[ebp], xmm0
; Line 971
	movaps	xmm0, XMMWORD PTR _t0$[ebp]
	orps	xmm0, XMMWORD PTR _t1$[ebp]
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _t0$[ebp], xmm0
; Line 972
	movaps	xmm0, XMMWORD PTR _z2gew2$[ebp]
	andps	xmm0, XMMWORD PTR _tensor2$[ebp]
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _t1$[ebp], xmm0
; Line 973
	movaps	xmm0, XMMWORD PTR _z2gew2$[ebp]
	andnps	xmm0, XMMWORD PTR _tensor3$[ebp]
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _t2$[ebp], xmm0
; Line 974
	movaps	xmm0, XMMWORD PTR _t1$[ebp]
	orps	xmm0, XMMWORD PTR _t2$[ebp]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _t1$[ebp], xmm0
; Line 975
	movaps	xmm0, XMMWORD PTR _x2py2gez2pw2$[ebp]
	andps	xmm0, XMMWORD PTR _t0$[ebp]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _t0$[ebp], xmm0
; Line 976
	movaps	xmm0, XMMWORD PTR _x2py2gez2pw2$[ebp]
	andnps	xmm0, XMMWORD PTR _t1$[ebp]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _t1$[ebp], xmm0
; Line 977
	movaps	xmm0, XMMWORD PTR _t0$[ebp]
	orps	xmm0, XMMWORD PTR _t1$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _t2$[ebp], xmm0
; Line 982
	movaps	xmm0, XMMWORD PTR _t2$[ebp]
	call	?XMVector4Length@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector4Length
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _t0$[ebp], xmm0
; Line 983
	movaps	xmm0, XMMWORD PTR _t2$[ebp]
	divps	xmm0, XMMWORD PTR _t0$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 986
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@XMQuaterni
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN5@XMQuaterni:
	DD	1
	DD	$LN4@XMQuaterni
$LN4@XMQuaterni:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@XMQuaterni
$LN3@XMQuaterni:
	DB	77					; 0000004dH
	DB	0
?XMQuaternionRotationMatrix@DirectX@@YQ?AT__m128@@UXMMATRIX@1@@Z ENDP ; DirectX::XMQuaternionRotationMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -448						; size = 16
_Q$ = -432						; size = 16
$T2 = -416						; size = 16
$T3 = -400						; size = 16
$T4 = -384						; size = 16
_Q0$ = -368						; size = 16
$T5 = -352						; size = 16
_Q1$ = -336						; size = 16
$T6 = -320						; size = 16
_R1$ = -304						; size = 16
$T7 = -288						; size = 16
_Y1$ = -272						; size = 16
$T8 = -256						; size = 16
_P1$ = -240						; size = 16
$T9 = -224						; size = 16
_R0$ = -208						; size = 16
$T10 = -192						; size = 16
_Y0$ = -176						; size = 16
$T11 = -160						; size = 16
_P0$ = -144						; size = 16
_CosAngles$ = -112					; size = 16
_SinAngles$ = -80					; size = 16
$T12 = -48						; size = 16
_HalfAngles$ = -32					; size = 16
_Angles$ = -16						; size = 16
?XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T2@@Z PROC ; DirectX::XMQuaternionRotationRollPitchYawFromVector, COMDAT
; _Angles$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 662
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 448				; 000001c0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-448]
	mov	ecx, 112				; 00000070H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _Angles$[ebp], xmm0
; Line 667
	movaps	xmm1, XMMWORD PTR ?g_XMOneHalf@DirectX@@3UXMVECTORF32@1@B
	movaps	xmm0, XMMWORD PTR _Angles$[ebp]
	call	?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorMultiply
	movaps	XMMWORD PTR $T12[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T12[ebp]
	movaps	XMMWORD PTR _HalfAngles$[ebp], xmm0
; Line 670
	movaps	xmm0, XMMWORD PTR _HalfAngles$[ebp]
	lea	edx, DWORD PTR _CosAngles$[ebp]
	lea	ecx, DWORD PTR _SinAngles$[ebp]
	call	?XMVectorSinCos@DirectX@@YQXPAT__m128@@0T2@@Z ; DirectX::XMVectorSinCos
; Line 672
	movaps	xmm1, XMMWORD PTR _CosAngles$[ebp]
	movaps	xmm0, XMMWORD PTR _SinAngles$[ebp]
	call	??$XMVectorPermute@$0A@$03$03$03@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<0,4,4,4>
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _P0$[ebp], xmm0
; Line 673
	movaps	xmm1, XMMWORD PTR _CosAngles$[ebp]
	movaps	xmm0, XMMWORD PTR _SinAngles$[ebp]
	call	??$XMVectorPermute@$04$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<5,1,5,5>
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _Y0$[ebp], xmm0
; Line 674
	movaps	xmm1, XMMWORD PTR _CosAngles$[ebp]
	movaps	xmm0, XMMWORD PTR _SinAngles$[ebp]
	call	??$XMVectorPermute@$05$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<6,6,2,6>
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _R0$[ebp], xmm0
; Line 675
	movaps	xmm1, XMMWORD PTR _SinAngles$[ebp]
	movaps	xmm0, XMMWORD PTR _CosAngles$[ebp]
	call	??$XMVectorPermute@$0A@$03$03$03@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<0,4,4,4>
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _P1$[ebp], xmm0
; Line 676
	movaps	xmm1, XMMWORD PTR _SinAngles$[ebp]
	movaps	xmm0, XMMWORD PTR _CosAngles$[ebp]
	call	??$XMVectorPermute@$04$00$04$04@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<5,1,5,5>
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _Y1$[ebp], xmm0
; Line 677
	movaps	xmm1, XMMWORD PTR _SinAngles$[ebp]
	movaps	xmm0, XMMWORD PTR _CosAngles$[ebp]
	call	??$XMVectorPermute@$05$05$01$05@DirectX@@YQ?AT__m128@@T1@0@Z ; DirectX::XMVectorPermute<6,6,2,6>
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _R1$[ebp], xmm0
; Line 679
	movaps	xmm1, XMMWORD PTR ?Sign@?1??XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORF32@2@B
	movaps	xmm0, XMMWORD PTR _P1$[ebp]
	call	?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorMultiply
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 680
	movaps	xmm1, XMMWORD PTR _Y0$[ebp]
	movaps	xmm0, XMMWORD PTR _P0$[ebp]
	call	?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorMultiply
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _Q0$[ebp], xmm0
; Line 681
	movaps	xmm1, XMMWORD PTR _Y1$[ebp]
	movaps	xmm0, XMMWORD PTR _Q1$[ebp]
	call	?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorMultiply
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 682
	movaps	xmm1, XMMWORD PTR _R0$[ebp]
	movaps	xmm0, XMMWORD PTR _Q0$[ebp]
	call	?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorMultiply
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _Q0$[ebp], xmm0
; Line 683
	movaps	xmm2, XMMWORD PTR _Q0$[ebp]
	movaps	xmm1, XMMWORD PTR _R1$[ebp]
	movaps	xmm0, XMMWORD PTR _Q1$[ebp]
	call	?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorMultiplyAdd
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _Q$[ebp], xmm0
; Line 685
	movaps	xmm0, XMMWORD PTR _Q$[ebp]
; Line 689
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XMQuaterni
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN6@XMQuaterni:
	DD	2
	DD	$LN5@XMQuaterni
$LN5@XMQuaterni:
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN3@XMQuaterni
	DD	-112					; ffffff90H
	DD	16					; 00000010H
	DD	$LN4@XMQuaterni
$LN4@XMQuaterni:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN3@XMQuaterni:
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T2@@Z ENDP ; DirectX::XMQuaternionRotationRollPitchYawFromVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ
_TEXT	SEGMENT
?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ PROC	; DirectX::XMQuaternionIdentity, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 635
	push	ebp
	mov	ebp, esp
; Line 637
	movaps	xmm0, XMMWORD PTR ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
; Line 640
	pop	ebp
	ret	0
?XMQuaternionIdentity@DirectX@@YQ?AT__m128@@XZ ENDP	; DirectX::XMQuaternionIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -432						; size = 16
$T2 = -416						; size = 16
$T3 = -400						; size = 16
$T4 = -384						; size = 16
$T5 = -368						; size = 16
$T6 = -352						; size = 16
$T7 = -336						; size = 16
$T8 = -320						; size = 16
$T9 = -304						; size = 16
$T10 = -288						; size = 16
$T11 = -272						; size = 16
$T12 = -256						; size = 16
$T13 = -240						; size = 16
$T14 = -224						; size = 16
$T15 = -208						; size = 16
_Q1Shuffle$ = -192					; size = 16
$T16 = -176						; size = 16
$T17 = -160						; size = 16
$T18 = -144						; size = 16
$T19 = -128						; size = 16
$T20 = -112						; size = 16
_vResult$ = -96						; size = 16
_Q2Z$ = -80						; size = 16
_Q2Y$ = -64						; size = 16
_Q2X$ = -48						; size = 16
_Q2$ = -32						; size = 16
_Q1$ = -16						; size = 16
?XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMQuaternionMultiply, COMDAT
; _Q1$ = xmm0
; _Q2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmisc.inl
; Line 103
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 432				; 000001b0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-432]
	mov	ecx, 108				; 0000006cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _Q2$[ebp], xmm1
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 153
	movaps	xmm0, XMMWORD PTR _Q2$[ebp]
	movaps	XMMWORD PTR _Q2X$[ebp], xmm0
; Line 154
	movaps	xmm0, XMMWORD PTR _Q2$[ebp]
	movaps	XMMWORD PTR _Q2Y$[ebp], xmm0
; Line 155
	movaps	xmm0, XMMWORD PTR _Q2$[ebp]
	movaps	XMMWORD PTR _Q2Z$[ebp], xmm0
; Line 156
	movaps	xmm0, XMMWORD PTR _Q2$[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 158
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	shufps	xmm0, XMMWORD PTR _vResult$[ebp], 255	; 000000ffH
	movaps	XMMWORD PTR $T20[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T20[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 159
	movaps	xmm0, XMMWORD PTR _Q2X$[ebp]
	shufps	xmm0, XMMWORD PTR _Q2X$[ebp], 0
	movaps	XMMWORD PTR $T19[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T19[ebp]
	movaps	XMMWORD PTR _Q2X$[ebp], xmm0
; Line 160
	movaps	xmm0, XMMWORD PTR _Q2Y$[ebp]
	shufps	xmm0, XMMWORD PTR _Q2Y$[ebp], 85	; 00000055H
	movaps	XMMWORD PTR $T18[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T18[ebp]
	movaps	XMMWORD PTR _Q2Y$[ebp], xmm0
; Line 161
	movaps	xmm0, XMMWORD PTR _Q2Z$[ebp]
	shufps	xmm0, XMMWORD PTR _Q2Z$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T17[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T17[ebp]
	movaps	XMMWORD PTR _Q2Z$[ebp], xmm0
; Line 163
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	mulps	xmm0, XMMWORD PTR _Q1$[ebp]
	movaps	XMMWORD PTR $T16[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T16[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 164
	movaps	xmm0, XMMWORD PTR _Q1$[ebp]
	movaps	XMMWORD PTR _Q1Shuffle$[ebp], xmm0
; Line 166
	movaps	xmm0, XMMWORD PTR _Q1Shuffle$[ebp]
	shufps	xmm0, XMMWORD PTR _Q1Shuffle$[ebp], 27	; 0000001bH
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	movaps	XMMWORD PTR _Q1Shuffle$[ebp], xmm0
; Line 168
	movaps	xmm0, XMMWORD PTR _Q2X$[ebp]
	mulps	xmm0, XMMWORD PTR _Q1Shuffle$[ebp]
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T14[ebp]
	movaps	XMMWORD PTR _Q2X$[ebp], xmm0
; Line 169
	movaps	xmm0, XMMWORD PTR _Q1Shuffle$[ebp]
	shufps	xmm0, XMMWORD PTR _Q1Shuffle$[ebp], 177	; 000000b1H
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	movaps	XMMWORD PTR _Q1Shuffle$[ebp], xmm0
; Line 171
	lea	eax, DWORD PTR $T12[ebp]
	push	eax
	mov	ecx, OFFSET ?ControlWZYX@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionMultiply'::`2'::ControlWZYX
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _Q2X$[ebp]
	mulps	xmm1, xmm0
	movaps	XMMWORD PTR $T11[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _Q2X$[ebp], xmm0
; Line 173
	movaps	xmm0, XMMWORD PTR _Q2Y$[ebp]
	mulps	xmm0, XMMWORD PTR _Q1Shuffle$[ebp]
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _Q2Y$[ebp], xmm0
; Line 174
	movaps	xmm0, XMMWORD PTR _Q1Shuffle$[ebp]
	shufps	xmm0, XMMWORD PTR _Q1Shuffle$[ebp], 27	; 0000001bH
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _Q1Shuffle$[ebp], xmm0
; Line 176
	lea	ecx, DWORD PTR $T8[ebp]
	push	ecx
	mov	ecx, OFFSET ?ControlZWXY@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionMultiply'::`2'::ControlZWXY
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _Q2Y$[ebp]
	mulps	xmm1, xmm0
	movaps	XMMWORD PTR $T7[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _Q2Y$[ebp], xmm0
; Line 178
	movaps	xmm0, XMMWORD PTR _Q2Z$[ebp]
	mulps	xmm0, XMMWORD PTR _Q1Shuffle$[ebp]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _Q2Z$[ebp], xmm0
; Line 179
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	addps	xmm0, XMMWORD PTR _Q2X$[ebp]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 181
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, OFFSET ?ControlYXWZ@?1??XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T3@0@Z@4UXMVECTORF32@2@B ; `DirectX::XMQuaternionMultiply'::`2'::ControlYXWZ
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _Q2Z$[ebp]
	mulps	xmm1, xmm0
	movaps	XMMWORD PTR $T3[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _Q2Z$[ebp], xmm0
; Line 182
	movaps	xmm0, XMMWORD PTR _Q2Y$[ebp]
	addps	xmm0, XMMWORD PTR _Q2Z$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _Q2Y$[ebp], xmm0
; Line 183
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	addps	xmm0, XMMWORD PTR _Q2Y$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 184
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
; Line 187
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMQuaternionMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMQuaternionMultiply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixPerspectiveFovLH@DirectX@@YQ?AUXMMATRIX@1@MMMM@Z
_TEXT	SEGMENT
$T1 = -352						; size = 16
$T2 = -336						; size = 16
$T3 = -320						; size = 16
$T4 = -304						; size = 16
$T5 = -288						; size = 16
$T6 = -272						; size = 16
$T7 = -256						; size = 16
_M$ = -224						; size = 64
$T8 = -144						; size = 16
$T9 = -128						; size = 16
_vTemp$ = -112						; size = 16
_vValues$ = -96						; size = 16
_rMem$ = -80						; size = 16
_Height$ = -52						; size = 4
_fRange$ = -48						; size = 4
_CosFov$ = -40						; size = 4
_SinFov$ = -28						; size = 4
_FarZ$ = -20						; size = 4
_NearZ$ = -16						; size = 4
_AspectHByW$ = -12					; size = 4
_FovAngleY$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
?XMMatrixPerspectiveFovLH@DirectX@@YQ?AUXMMATRIX@1@MMMM@Z PROC ; DirectX::XMMatrixPerspectiveFovLH, COMDAT
; _FovAngleY$ = xmm0s
; _AspectHByW$ = xmm1s
; _NearZ$ = xmm2s
; _FarZ$ = xmm3s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 2177
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movss	DWORD PTR _FarZ$[ebp], xmm3
	movss	DWORD PTR _NearZ$[ebp], xmm2
	movss	DWORD PTR _AspectHByW$[ebp], xmm1
	movss	DWORD PTR _FovAngleY$[ebp], xmm0
; Line 2178
	push	ecx
	movss	xmm0, DWORD PTR __real@37a7c5ac
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _FovAngleY$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?XMScalarNearEqual@DirectX@@YA_NMMM@Z	; DirectX::XMScalarNearEqual
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@XMMatrixPe
	mov	esi, esp
	push	2178					; 00000882H
	push	OFFSET ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1GK@EFPMNDEN@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAo?$AAv?$AAA?$AAn?$AAg?$AAl?$AAe?$AAY?$AA?0?$AA?5?$AA0?$AA?4@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMMatrixPe:
; Line 2179
	push	ecx
	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _AspectHByW$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?XMScalarNearEqual@DirectX@@YA_NMMM@Z	; DirectX::XMScalarNearEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@XMMatrixPe
	mov	esi, esp
	push	2179					; 00000883H
	push	OFFSET ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1FO@IACFEINC@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAH?$AAB?$AAy?$AAW?$AA?0?$AA?5?$AA0@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@XMMatrixPe:
; Line 2180
	push	ecx
	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _NearZ$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _FarZ$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?XMScalarNearEqual@DirectX@@YA_NMMM@Z	; DirectX::XMScalarNearEqual
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@XMMatrixPe
	mov	esi, esp
	push	2180					; 00000884H
	push	OFFSET ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1FE@IMEJOJAH@?$AA?$CB?$AAX?$AAM?$AAS?$AAc?$AAa?$AAl?$AAa?$AAr?$AAN?$AAe?$AAa?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAF?$AAa?$AAr?$AAZ?$AA?0?$AA?5?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?0?$AA?5@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@XMMatrixPe:
; Line 2233
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _FovAngleY$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _CosFov$[ebp]
	push	eax
	lea	ecx, DWORD PTR _SinFov$[ebp]
	push	ecx
	call	?XMScalarSinCos@DirectX@@YAXPAM0M@Z	; DirectX::XMScalarSinCos
	add	esp, 12					; 0000000cH
; Line 2235
	movss	xmm0, DWORD PTR _FarZ$[ebp]
	subss	xmm0, DWORD PTR _NearZ$[ebp]
	movss	xmm1, DWORD PTR _FarZ$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _fRange$[ebp], xmm1
; Line 2237
	movss	xmm0, DWORD PTR _CosFov$[ebp]
	divss	xmm0, DWORD PTR _SinFov$[ebp]
	movss	DWORD PTR _Height$[ebp], xmm0
; Line 2243
	movss	xmm0, DWORD PTR _Height$[ebp]
	divss	xmm0, DWORD PTR _AspectHByW$[ebp]
	movss	DWORD PTR _rMem$[ebp], xmm0
	movss	xmm0, DWORD PTR _Height$[ebp]
	movss	DWORD PTR _rMem$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _fRange$[ebp]
	movss	DWORD PTR _rMem$[ebp+8], xmm0
	movss	xmm0, DWORD PTR _fRange$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _NearZ$[ebp]
	movss	DWORD PTR _rMem$[ebp+12], xmm0
; Line 2245
	movaps	xmm0, XMMWORD PTR _rMem$[ebp]
	movaps	XMMWORD PTR _vValues$[ebp], xmm0
; Line 2246
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 2248
	movaps	xmm0, XMMWORD PTR _vValues$[ebp]
	movaps	xmm1, XMMWORD PTR _vTemp$[ebp]
	_movss	xmm1, xmm0
	movaps	XMMWORD PTR $T8[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 2250
	lea	ecx, DWORD PTR _M$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 2251
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	movups	xmm0, XMMWORD PTR _vTemp$[ebp]
	movups	XMMWORD PTR _M$[ebp+eax], xmm0
; Line 2253
	movaps	xmm0, XMMWORD PTR _vValues$[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 2254
	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMMaskY@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMMaskY
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _vTemp$[ebp]
	andps	xmm1, xmm0
	movaps	XMMWORD PTR $T6[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 2255
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR _vTemp$[ebp]
	movups	XMMWORD PTR _M$[ebp+edx], xmm0
; Line 2257
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 2258
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR3
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _vValues$[ebp]
	shufps	xmm1, xmm0, 238				; 000000eeH
	movaps	XMMWORD PTR $T3[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vValues$[ebp], xmm0
; Line 2260
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	shufps	xmm0, XMMWORD PTR _vValues$[ebp], 192	; 000000c0H
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 2261
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR _vTemp$[ebp]
	movups	XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 2263
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	shufps	xmm0, XMMWORD PTR _vValues$[ebp], 144	; 00000090H
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 2264
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR _vTemp$[ebp]
	movups	XMMWORD PTR _M$[ebp+eax], xmm0
; Line 2265
	movaps	xmm0, XMMWORD PTR _M$[ebp]
	movaps	xmm1, XMMWORD PTR _M$[ebp+16]
	movaps	xmm2, XMMWORD PTR _M$[ebp+32]
	movaps	xmm3, XMMWORD PTR _M$[ebp+48]
; Line 2268
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@XMMatrixPe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN10@XMMatrixPe:
	DD	3
	DD	$LN9@XMMatrixPe
$LN9@XMMatrixPe:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN6@XMMatrixPe
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN7@XMMatrixPe
	DD	-224					; ffffff20H
	DD	64					; 00000040H
	DD	$LN8@XMMatrixPe
$LN8@XMMatrixPe:
	DB	77					; 0000004dH
	DB	0
$LN7@XMMatrixPe:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	0
$LN6@XMMatrixPe:
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	0
?XMMatrixPerspectiveFovLH@DirectX@@YQ?AUXMMATRIX@1@MMMM@Z ENDP ; DirectX::XMMatrixPerspectiveFovLH
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixLookToLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z
_TEXT	SEGMENT
$T1 = -608						; size = 64
$T2 = -544						; size = 64
$T3 = -480						; size = 16
$T4 = -464						; size = 16
$T5 = -448						; size = 16
_M$ = -416						; size = 64
$T6 = -336						; size = 16
_D2$ = -320						; size = 16
$T7 = -304						; size = 16
_D1$ = -288						; size = 16
$T8 = -272						; size = 16
_D0$ = -256						; size = 16
$T9 = -240						; size = 16
_NegEyePosition$ = -224					; size = 16
$T10 = -208						; size = 16
_R1$ = -192						; size = 16
$T11 = -176						; size = 16
$T12 = -160						; size = 16
_R0$ = -144						; size = 16
$T13 = -128						; size = 16
_R2$ = -112						; size = 16
$T14 = -96						; size = 16
$T15 = -80						; size = 16
_UpDirection$ = -64					; size = 16
_EyeDirection$ = -48					; size = 16
_EyePosition$ = -32					; size = 16
__$ArrayPad$ = -4					; size = 4
?XMMatrixLookToLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z PROC ; DirectX::XMMatrixLookToLH, COMDAT
; _EyePosition$ = xmm0
; _EyeDirection$ = xmm1
; _UpDirection$ = xmm2
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1944
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 616				; 00000268H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-616]
	mov	ecx, 154				; 0000009aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _UpDirection$[ebp], xmm2
	movaps	XMMWORD PTR _EyeDirection$[ebp], xmm1
	movaps	XMMWORD PTR _EyePosition$[ebp], xmm0
; Line 1945
	call	?XMVectorZero@DirectX@@YQ?AT__m128@@XZ	; DirectX::XMVectorZero
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm1, XMMWORD PTR $T15[ebp]
	movaps	xmm0, XMMWORD PTR _EyeDirection$[ebp]
	call	?XMVector3Equal@DirectX@@YQ_NT__m128@@0@Z ; DirectX::XMVector3Equal
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@XMMatrixLo
	mov	esi, esp
	push	1945					; 00000799H
	push	OFFSET ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1FM@KOIPKFLA@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMMatrixLo:
; Line 1946
	movaps	xmm0, XMMWORD PTR _EyeDirection$[ebp]
	call	?XMVector3IsInfinite@DirectX@@YQ_NT__m128@@@Z ; DirectX::XMVector3IsInfinite
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@XMMatrixLo
	mov	esi, esp
	push	1946					; 0000079aH
	push	OFFSET ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1EG@DOFHPLOD@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAE?$AAy?$AAe?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@XMMatrixLo:
; Line 1947
	call	?XMVectorZero@DirectX@@YQ?AT__m128@@XZ	; DirectX::XMVectorZero
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm1, XMMWORD PTR $T14[ebp]
	movaps	xmm0, XMMWORD PTR _UpDirection$[ebp]
	call	?XMVector3Equal@DirectX@@YQ_NT__m128@@0@Z ; DirectX::XMVector3Equal
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@XMMatrixLo
	mov	esi, esp
	push	1947					; 0000079bH
	push	OFFSET ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1FK@IBPGMKAB@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?0?$AA?5?$AAX?$AAM?$AAV@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@XMMatrixLo:
; Line 1948
	movaps	xmm0, XMMWORD PTR _UpDirection$[ebp]
	call	?XMVector3IsInfinite@DirectX@@YQ_NT__m128@@@Z ; DirectX::XMVector3IsInfinite
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@XMMatrixLo
	mov	esi, esp
	push	1948					; 0000079cH
	push	OFFSET ??_C@_1JC@FPIPICAN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1EE@JAOFAOOK@?$AA?$CB?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA3?$AAI?$AAs?$AAI?$AAn?$AAf?$AAi?$AAn?$AAi?$AAt?$AAe?$AA?$CI?$AAU?$AAp?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@XMMatrixLo:
; Line 1952
	movaps	xmm0, XMMWORD PTR _EyeDirection$[ebp]
	call	?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	movaps	XMMWORD PTR _R2$[ebp], xmm0
; Line 1954
	movaps	xmm1, XMMWORD PTR _R2$[ebp]
	movaps	xmm0, XMMWORD PTR _UpDirection$[ebp]
	call	?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Cross
	movaps	XMMWORD PTR $T12[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T12[ebp]
	movaps	XMMWORD PTR _R0$[ebp], xmm0
; Line 1955
	movaps	xmm0, XMMWORD PTR _R0$[ebp]
	call	?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVector3Normalize
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _R0$[ebp], xmm0
; Line 1957
	movaps	xmm1, XMMWORD PTR _R0$[ebp]
	movaps	xmm0, XMMWORD PTR _R2$[ebp]
	call	?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Cross
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _R1$[ebp], xmm0
; Line 1959
	movaps	xmm0, XMMWORD PTR _EyePosition$[ebp]
	call	?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorNegate
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _NegEyePosition$[ebp], xmm0
; Line 1961
	movaps	xmm1, XMMWORD PTR _NegEyePosition$[ebp]
	movaps	xmm0, XMMWORD PTR _R0$[ebp]
	call	?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Dot
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _D0$[ebp], xmm0
; Line 1962
	movaps	xmm1, XMMWORD PTR _NegEyePosition$[ebp]
	movaps	xmm0, XMMWORD PTR _R1$[ebp]
	call	?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Dot
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _D1$[ebp], xmm0
; Line 1963
	movaps	xmm1, XMMWORD PTR _NegEyePosition$[ebp]
	movaps	xmm0, XMMWORD PTR _R2$[ebp]
	call	?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Dot
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _D2$[ebp], xmm0
; Line 1965
	lea	ecx, DWORD PTR _M$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 1966
	movaps	xmm2, XMMWORD PTR ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B
	movaps	xmm1, XMMWORD PTR _R0$[ebp]
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	call	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
	movaps	XMMWORD PTR $T5[ebp], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	movups	xmm0, XMMWORD PTR $T5[ebp]
	movups	XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1967
	movaps	xmm2, XMMWORD PTR ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B
	movaps	xmm1, XMMWORD PTR _R1$[ebp]
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	call	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	movups	xmm0, XMMWORD PTR $T4[ebp]
	movups	XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1968
	movaps	xmm2, XMMWORD PTR ?g_XMSelect1110@DirectX@@3UXMVECTORI32@1@B
	movaps	xmm1, XMMWORD PTR _R2$[ebp]
	movaps	xmm0, XMMWORD PTR _D2$[ebp]
	call	?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorSelect
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR $T3[ebp]
	movups	XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1969
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	movups	xmm0, XMMWORD PTR ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
	movups	XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1971
	movaps	xmm0, XMMWORD PTR _M$[ebp]
	movaps	xmm1, XMMWORD PTR _M$[ebp+16]
	movaps	xmm2, XMMWORD PTR _M$[ebp+32]
	movaps	xmm3, XMMWORD PTR _M$[ebp+48]
	call	?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z ; DirectX::XMMatrixTranspose
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	lea	ecx, DWORD PTR _M$[ebp]
	call	??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMMATRIX::operator=
; Line 1973
	movaps	xmm0, XMMWORD PTR _M$[ebp]
	movaps	xmm1, XMMWORD PTR _M$[ebp+16]
	movaps	xmm2, XMMWORD PTR _M$[ebp+32]
	movaps	xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1977
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@XMMatrixLo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN9@XMMatrixLo:
	DD	1
	DD	$LN8@XMMatrixLo
$LN8@XMMatrixLo:
	DD	-416					; fffffe60H
	DD	64					; 00000040H
	DD	$LN7@XMMatrixLo
$LN7@XMMatrixLo:
	DB	77					; 0000004dH
	DB	0
?XMMatrixLookToLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ENDP ; DirectX::XMMatrixLookToLH
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z
_TEXT	SEGMENT
$T1 = -224						; size = 64
$T2 = -160						; size = 64
$T3 = -96						; size = 16
_EyeDirection$ = -80					; size = 16
_UpDirection$ = -64					; size = 16
_FocusPosition$ = -48					; size = 16
_EyePosition$ = -32					; size = 16
__$ArrayPad$ = -4					; size = 4
?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z PROC ; DirectX::XMMatrixLookAtLH, COMDAT
; _EyePosition$ = xmm0
; _FocusPosition$ = xmm1
; _UpDirection$ = xmm2
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1918
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _UpDirection$[ebp], xmm2
	movaps	XMMWORD PTR _FocusPosition$[ebp], xmm1
	movaps	XMMWORD PTR _EyePosition$[ebp], xmm0
; Line 1919
	movaps	xmm1, XMMWORD PTR _EyePosition$[ebp]
	movaps	xmm0, XMMWORD PTR _FocusPosition$[ebp]
	call	?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorSubtract
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _EyeDirection$[ebp], xmm0
; Line 1920
	movaps	xmm2, XMMWORD PTR _UpDirection$[ebp]
	movaps	xmm1, XMMWORD PTR _EyeDirection$[ebp]
	movaps	xmm0, XMMWORD PTR _EyePosition$[ebp]
	call	?XMMatrixLookToLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ; DirectX::XMMatrixLookToLH
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	xmm1, XMMWORD PTR $T2[ebp+16]
	movaps	xmm2, XMMWORD PTR $T2[ebp+32]
	movaps	xmm3, XMMWORD PTR $T2[ebp+48]
; Line 1921
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMMatrixLookAtLH@DirectX@@YQ?AUXMMATRIX@1@T__m128@@00@Z ENDP ; DirectX::XMMatrixLookAtLH
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z
_TEXT	SEGMENT
tv283 = -736						; size = 16
$T1 = -720						; size = 16
$T2 = -704						; size = 16
$T3 = -688						; size = 16
$T4 = -672						; size = 16
_M$ = -640						; size = 64
$T5 = -560						; size = 16
$T6 = -544						; size = 16
$T7 = -528						; size = 16
$T8 = -512						; size = 16
$T9 = -496						; size = 16
$T10 = -480						; size = 16
$T11 = -464						; size = 16
_R2$ = -448						; size = 16
$T12 = -432						; size = 16
_R1$ = -416						; size = 16
$T13 = -400						; size = 16
$T14 = -384						; size = 16
_V2$ = -368						; size = 16
$T15 = -352						; size = 16
$T16 = -336						; size = 16
$T17 = -320						; size = 16
$T18 = -304						; size = 16
$T19 = -288						; size = 16
$T20 = -272						; size = 16
$T21 = -256						; size = 16
_R0$ = -240						; size = 16
$T22 = -224						; size = 16
$T23 = -208						; size = 16
$T24 = -192						; size = 16
_V1$ = -176						; size = 16
$T25 = -160						; size = 16
$T26 = -144						; size = 16
$T27 = -128						; size = 16
_V0$ = -112						; size = 16
$T28 = -96						; size = 16
_Q1$ = -80						; size = 16
$T29 = -64						; size = 16
_Q0$ = -48						; size = 16
_Quaternion$ = -32					; size = 16
__$ArrayPad$ = -4					; size = 4
?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z PROC ; DirectX::XMMatrixRotationQuaternion, COMDAT
; _Quaternion$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1631
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 736				; 000002e0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-736]
	mov	ecx, 184				; 000000b8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _Quaternion$[ebp], xmm0
; Line 1668
	movaps	xmm0, XMMWORD PTR _Quaternion$[ebp]
	addps	xmm0, XMMWORD PTR _Quaternion$[ebp]
	movaps	XMMWORD PTR $T29[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T29[ebp]
	movaps	XMMWORD PTR _Q0$[ebp], xmm0
; Line 1669
	movaps	xmm0, XMMWORD PTR _Quaternion$[ebp]
	mulps	xmm0, XMMWORD PTR _Q0$[ebp]
	movaps	XMMWORD PTR $T28[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T28[ebp]
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 1671
	movaps	xmm0, XMMWORD PTR _Q1$[ebp]
	shufps	xmm0, XMMWORD PTR _Q1$[ebp], 193	; 000000c1H
	movaps	XMMWORD PTR $T27[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T27[ebp]
	movaps	XMMWORD PTR _V0$[ebp], xmm0
; Line 1672
	lea	eax, DWORD PTR $T26[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMMask3
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _V0$[ebp]
	andps	xmm1, xmm0
	movaps	XMMWORD PTR $T25[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T25[ebp]
	movaps	XMMWORD PTR _V0$[ebp], xmm0
; Line 1673
	movaps	xmm0, XMMWORD PTR _Q1$[ebp]
	shufps	xmm0, XMMWORD PTR _Q1$[ebp], 218	; 000000daH
	movaps	XMMWORD PTR $T24[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T24[ebp]
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1674
	lea	ecx, DWORD PTR $T23[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMMask3
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _V1$[ebp]
	andps	xmm1, xmm0
	movaps	XMMWORD PTR $T22[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T22[ebp]
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1675
	movaps	xmm0, XMMWORD PTR _V0$[ebp]
	lea	edx, DWORD PTR $T21[ebp]
	push	edx
	mov	ecx, OFFSET ?Constant1110@?1??XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@2@T__m128@@@Z@4UXMVECTORF32@2@B ; `DirectX::XMMatrixRotationQuaternion'::`2'::Constant1110
	movaps	XMMWORD PTR tv283[ebp], xmm0
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv283[ebp]
	subps	xmm0, xmm1
	movaps	XMMWORD PTR $T20[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T20[ebp]
	movaps	XMMWORD PTR _R0$[ebp], xmm0
; Line 1676
	movaps	xmm0, XMMWORD PTR _R0$[ebp]
	subps	xmm0, XMMWORD PTR _V1$[ebp]
	movaps	XMMWORD PTR $T19[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T19[ebp]
	movaps	XMMWORD PTR _R0$[ebp], xmm0
; Line 1678
	movaps	xmm0, XMMWORD PTR _Quaternion$[ebp]
	shufps	xmm0, XMMWORD PTR _Quaternion$[ebp], 208 ; 000000d0H
	movaps	XMMWORD PTR $T18[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T18[ebp]
	movaps	XMMWORD PTR _V0$[ebp], xmm0
; Line 1679
	movaps	xmm0, XMMWORD PTR _Q0$[ebp]
	shufps	xmm0, XMMWORD PTR _Q0$[ebp], 230	; 000000e6H
	movaps	XMMWORD PTR $T17[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T17[ebp]
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1680
	movaps	xmm0, XMMWORD PTR _V0$[ebp]
	mulps	xmm0, XMMWORD PTR _V1$[ebp]
	movaps	XMMWORD PTR $T16[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T16[ebp]
	movaps	XMMWORD PTR _V0$[ebp], xmm0
; Line 1682
	movaps	xmm0, XMMWORD PTR _Quaternion$[ebp]
	shufps	xmm0, XMMWORD PTR _Quaternion$[ebp], 255 ; 000000ffH
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1683
	movaps	xmm0, XMMWORD PTR _Q0$[ebp]
	shufps	xmm0, XMMWORD PTR _Q0$[ebp], 201	; 000000c9H
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T14[ebp]
	movaps	XMMWORD PTR _V2$[ebp], xmm0
; Line 1684
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	mulps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1686
	movaps	xmm0, XMMWORD PTR _V0$[ebp]
	addps	xmm0, XMMWORD PTR _V1$[ebp]
	movaps	XMMWORD PTR $T12[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T12[ebp]
	movaps	XMMWORD PTR _R1$[ebp], xmm0
; Line 1687
	movaps	xmm0, XMMWORD PTR _V0$[ebp]
	subps	xmm0, XMMWORD PTR _V1$[ebp]
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _R2$[ebp], xmm0
; Line 1689
	movaps	xmm0, XMMWORD PTR _R1$[ebp]
	shufps	xmm0, XMMWORD PTR _R2$[ebp], 73		; 00000049H
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _V0$[ebp], xmm0
; Line 1690
	movaps	xmm0, XMMWORD PTR _V0$[ebp]
	shufps	xmm0, XMMWORD PTR _V0$[ebp], 120	; 00000078H
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _V0$[ebp], xmm0
; Line 1691
	movaps	xmm0, XMMWORD PTR _R1$[ebp]
	shufps	xmm0, XMMWORD PTR _R2$[ebp], 160	; 000000a0H
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1692
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	shufps	xmm0, XMMWORD PTR _V1$[ebp], 136	; 00000088H
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1694
	movaps	xmm0, XMMWORD PTR _R0$[ebp]
	shufps	xmm0, XMMWORD PTR _V0$[ebp], 76		; 0000004cH
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 1695
	movaps	xmm0, XMMWORD PTR _Q1$[ebp]
	shufps	xmm0, XMMWORD PTR _Q1$[ebp], 120	; 00000078H
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 1697
	lea	ecx, DWORD PTR _M$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 1698
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movups	xmm0, XMMWORD PTR _Q1$[ebp]
	movups	XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1700
	movaps	xmm0, XMMWORD PTR _R0$[ebp]
	shufps	xmm0, XMMWORD PTR _V0$[ebp], 237	; 000000edH
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 1701
	movaps	xmm0, XMMWORD PTR _Q1$[ebp]
	shufps	xmm0, XMMWORD PTR _Q1$[ebp], 114	; 00000072H
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 1702
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR _Q1$[ebp]
	movups	XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1704
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	shufps	xmm0, XMMWORD PTR _R0$[ebp], 228	; 000000e4H
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _Q1$[ebp], xmm0
; Line 1705
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR _Q1$[ebp]
	movups	XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1706
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMIdentityR3
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1707
	movaps	xmm0, XMMWORD PTR _M$[ebp]
	movaps	xmm1, XMMWORD PTR _M$[ebp+16]
	movaps	xmm2, XMMWORD PTR _M$[ebp+32]
	movaps	xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1710
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@XMMatrixRo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN5@XMMatrixRo:
	DD	1
	DD	$LN4@XMMatrixRo
$LN4@XMMatrixRo:
	DD	-640					; fffffd80H
	DD	64					; 00000040H
	DD	$LN3@XMMatrixRo
$LN3@XMMatrixRo:
	DB	77					; 0000004dH
	DB	0
?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ENDP ; DirectX::XMMatrixRotationQuaternion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z
_TEXT	SEGMENT
$T1 = -192						; size = 64
$T2 = -128						; size = 64
$T3 = -64						; size = 16
_Q$ = -48						; size = 16
_Angles$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z PROC ; DirectX::XMMatrixRotationRollPitchYawFromVector, COMDAT
; _Angles$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1509
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _Angles$[ebp], xmm0
; Line 1510
	movaps	xmm0, XMMWORD PTR _Angles$[ebp]
	call	?XMQuaternionRotationRollPitchYawFromVector@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMQuaternionRotationRollPitchYawFromVector
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _Q$[ebp], xmm0
; Line 1511
	movaps	xmm0, XMMWORD PTR _Q$[ebp]
	call	?XMMatrixRotationQuaternion@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationQuaternion
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	xmm1, XMMWORD PTR $T2[ebp+16]
	movaps	xmm2, XMMWORD PTR $T2[ebp+32]
	movaps	xmm3, XMMWORD PTR $T2[ebp+48]
; Line 1512
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ENDP ; DirectX::XMMatrixRotationRollPitchYawFromVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixRotationRollPitchYaw@DirectX@@YQ?AUXMMATRIX@1@MMM@Z
_TEXT	SEGMENT
$T1 = -176						; size = 64
$T2 = -112						; size = 64
$T3 = -48						; size = 16
_Angles$ = -32						; size = 16
_Roll$ = -16						; size = 4
_Yaw$ = -12						; size = 4
_Pitch$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?XMMatrixRotationRollPitchYaw@DirectX@@YQ?AUXMMATRIX@1@MMM@Z PROC ; DirectX::XMMatrixRotationRollPitchYaw, COMDAT
; _Pitch$ = xmm0s
; _Yaw$ = xmm1s
; _Roll$ = xmm2s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1498
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-184]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movss	DWORD PTR _Roll$[ebp], xmm2
	movss	DWORD PTR _Yaw$[ebp], xmm1
	movss	DWORD PTR _Pitch$[ebp], xmm0
; Line 1499
	movss	xmm3, DWORD PTR __real@00000000
	movss	xmm2, DWORD PTR _Roll$[ebp]
	movss	xmm1, DWORD PTR _Yaw$[ebp]
	movss	xmm0, DWORD PTR _Pitch$[ebp]
	call	?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _Angles$[ebp], xmm0
; Line 1500
	movaps	xmm0, XMMWORD PTR _Angles$[ebp]
	call	?XMMatrixRotationRollPitchYawFromVector@DirectX@@YQ?AUXMMATRIX@1@T__m128@@@Z ; DirectX::XMMatrixRotationRollPitchYawFromVector
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	xmm1, XMMWORD PTR $T2[ebp+16]
	movaps	xmm2, XMMWORD PTR $T2[ebp+32]
	movaps	xmm3, XMMWORD PTR $T2[ebp+48]
; Line 1501
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMMatrixRotationRollPitchYaw@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ENDP ; DirectX::XMMatrixRotationRollPitchYaw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z
_TEXT	SEGMENT
$T1 = -128						; size = 16
_M$ = -96						; size = 64
_OffsetZ$ = -16						; size = 4
_OffsetY$ = -12						; size = 4
_OffsetX$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z PROC ; DirectX::XMMatrixTranslation, COMDAT
; _OffsetX$ = xmm0s
; _OffsetY$ = xmm1s
; _OffsetZ$ = xmm2s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1079
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movss	DWORD PTR _OffsetZ$[ebp], xmm2
	movss	DWORD PTR _OffsetY$[ebp], xmm1
	movss	DWORD PTR _OffsetX$[ebp], xmm0
; Line 1105
	lea	ecx, DWORD PTR _M$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 1106
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movups	xmm0, XMMWORD PTR ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
	movups	XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1107
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
	movups	XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1108
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
	movups	XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1109
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR _OffsetZ$[ebp]
	movss	xmm1, DWORD PTR _OffsetY$[ebp]
	movss	xmm0, DWORD PTR _OffsetX$[ebp]
	call	?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ; DirectX::XMVectorSet
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1110
	movaps	xmm0, XMMWORD PTR _M$[ebp]
	movaps	xmm1, XMMWORD PTR _M$[ebp+16]
	movaps	xmm2, XMMWORD PTR _M$[ebp+32]
	movaps	xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1113
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@XMMatrixTr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN5@XMMatrixTr:
	DD	1
	DD	$LN4@XMMatrixTr
$LN4@XMMatrixTr:
	DD	-96					; ffffffa0H
	DD	64					; 00000040H
	DD	$LN3@XMMatrixTr
$LN3@XMMatrixTr:
	DB	77					; 0000004dH
	DB	0
?XMMatrixTranslation@DirectX@@YQ?AUXMMATRIX@1@MMM@Z ENDP ; DirectX::XMMatrixTranslation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ
_TEXT	SEGMENT
_M$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ PROC	; DirectX::XMMatrixIdentity, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 1032
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1035
	lea	ecx, DWORD PTR _M$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 1036
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movups	xmm0, XMMWORD PTR ?g_XMIdentityR0@DirectX@@3UXMVECTORF32@1@B
	movups	XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1037
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR ?g_XMIdentityR1@DirectX@@3UXMVECTORF32@1@B
	movups	XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1038
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR ?g_XMIdentityR2@DirectX@@3UXMVECTORF32@1@B
	movups	XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1039
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR ?g_XMIdentityR3@DirectX@@3UXMVECTORF32@1@B
	movups	XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1040
	movaps	xmm0, XMMWORD PTR _M$[ebp]
	movaps	xmm1, XMMWORD PTR _M$[ebp+16]
	movaps	xmm2, XMMWORD PTR _M$[ebp+32]
	movaps	xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1044
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@XMMatrixId
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN5@XMMatrixId:
	DD	1
	DD	$LN4@XMMatrixId
$LN4@XMMatrixId:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@XMMatrixId
$LN3@XMMatrixId:
	DB	77					; 0000004dH
	DB	0
?XMMatrixIdentity@DirectX@@YQ?AUXMMATRIX@1@XZ ENDP	; DirectX::XMMatrixIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z
_TEXT	SEGMENT
tv806 = -2208						; size = 16
$T1 = -2192						; size = 64
$T2 = -2128						; size = 16
$T3 = -2112						; size = 16
$T4 = -2096						; size = 16
$T5 = -2080						; size = 16
_mResult$ = -2048					; size = 64
$T6 = -1968						; size = 16
$T7 = -1952						; size = 16
$T8 = -1936						; size = 16
_vTemp$ = -1920						; size = 16
$T9 = -1904						; size = 16
$T10 = -1888						; size = 16
$T11 = -1872						; size = 16
$T12 = -1856						; size = 16
$T13 = -1840						; size = 16
$T14 = -1824						; size = 16
$T15 = -1808						; size = 16
$T16 = -1792						; size = 16
$T17 = -1776						; size = 16
$T18 = -1760						; size = 16
_C7$ = -1744						; size = 16
$T19 = -1728						; size = 16
$T20 = -1712						; size = 16
_C5$ = -1696						; size = 16
$T21 = -1680						; size = 16
$T22 = -1664						; size = 16
_C3$ = -1648						; size = 16
$T23 = -1632						; size = 16
$T24 = -1616						; size = 16
_C1$ = -1600						; size = 16
$T25 = -1584						; size = 16
$T26 = -1568						; size = 16
$T27 = -1552						; size = 16
$T28 = -1536						; size = 16
$T29 = -1520						; size = 16
$T30 = -1504						; size = 16
$T31 = -1488						; size = 16
$T32 = -1472						; size = 16
$T33 = -1456						; size = 16
$T34 = -1440						; size = 16
$T35 = -1424						; size = 16
$T36 = -1408						; size = 16
$T37 = -1392						; size = 16
$T38 = -1376						; size = 16
$T39 = -1360						; size = 16
$T40 = -1344						; size = 16
$T41 = -1328						; size = 16
$T42 = -1312						; size = 16
$T43 = -1296						; size = 16
$T44 = -1280						; size = 16
$T45 = -1264						; size = 16
$T46 = -1248						; size = 16
$T47 = -1232						; size = 16
$T48 = -1216						; size = 16
$T49 = -1200						; size = 16
$T50 = -1184						; size = 16
$T51 = -1168						; size = 16
$T52 = -1152						; size = 16
$T53 = -1136						; size = 16
$T54 = -1120						; size = 16
$T55 = -1104						; size = 16
$T56 = -1088						; size = 16
$T57 = -1072						; size = 16
$T58 = -1056						; size = 16
$T59 = -1040						; size = 16
_C6$ = -1024						; size = 16
$T60 = -1008						; size = 16
_C4$ = -992						; size = 16
$T61 = -976						; size = 16
_C2$ = -960						; size = 16
$T62 = -944						; size = 16
_C0$ = -928						; size = 16
$T63 = -912						; size = 16
$T64 = -896						; size = 16
_V03$ = -880						; size = 16
$T65 = -864						; size = 16
$T66 = -848						; size = 16
$T67 = -832						; size = 16
_V13$ = -816						; size = 16
$T68 = -800						; size = 16
$T69 = -784						; size = 16
$T70 = -768						; size = 16
$T71 = -752						; size = 16
$T72 = -736						; size = 16
$T73 = -720						; size = 16
$T74 = -704						; size = 16
$T75 = -688						; size = 16
$T76 = -672						; size = 16
$T77 = -656						; size = 16
$T78 = -640						; size = 16
$T79 = -624						; size = 16
$T80 = -608						; size = 16
$T81 = -592						; size = 16
$T82 = -576						; size = 16
$T83 = -560						; size = 16
$T84 = -544						; size = 16
$T85 = -528						; size = 16
_D2$ = -512						; size = 16
$T86 = -496						; size = 16
_D1$ = -480						; size = 16
$T87 = -464						; size = 16
_D0$ = -448						; size = 16
$T88 = -432						; size = 16
_V12$ = -416						; size = 16
$T89 = -400						; size = 16
_V02$ = -384						; size = 16
$T90 = -368						; size = 16
_V11$ = -352						; size = 16
$T91 = -336						; size = 16
_V01$ = -320						; size = 16
$T92 = -304						; size = 16
_V10$ = -288						; size = 16
$T93 = -272						; size = 16
_V00$ = -256						; size = 16
$T94 = -240						; size = 64
_MT$ = -160						; size = 64
_M$ = -80						; size = 64
_pDeterminant$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z PROC ; DirectX::XMMatrixInverse, COMDAT
; _pDeterminant$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 611
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 2216				; 000008a8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-2216]
	mov	ecx, 554				; 0000022aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _M$[ebp+48], xmm3
	movaps	XMMWORD PTR _M$[ebp+32], xmm2
	movaps	XMMWORD PTR _M$[ebp+16], xmm1
	movaps	XMMWORD PTR _M$[ebp], xmm0
	mov	DWORD PTR _pDeterminant$[ebp], ecx
; Line 706
	movaps	xmm0, XMMWORD PTR _M$[ebp]
	movaps	xmm1, XMMWORD PTR _M$[ebp+16]
	movaps	xmm2, XMMWORD PTR _M$[ebp+32]
	movaps	xmm3, XMMWORD PTR _M$[ebp+48]
	call	?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z ; DirectX::XMMatrixTranspose
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T94[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T94[ebp]
	lea	edi, DWORD PTR _MT$[ebp]
	rep movsd
; Line 707
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR _MT$[ebp+ecx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 80	; 00000050H
	movaps	XMMWORD PTR $T93[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T93[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 708
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 238	; 000000eeH
	movaps	XMMWORD PTR $T92[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T92[ebp]
	movaps	XMMWORD PTR _V10$[ebp], xmm0
; Line 709
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+eax]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 80	; 00000050H
	movaps	XMMWORD PTR $T91[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T91[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 710
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 238	; 000000eeH
	movaps	XMMWORD PTR $T90[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T90[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 711
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 136	; 00000088H
	movaps	XMMWORD PTR $T89[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T89[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 712
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 221	; 000000ddH
	movaps	XMMWORD PTR $T88[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T88[ebp]
	movaps	XMMWORD PTR _V12$[ebp], xmm0
; Line 714
	movaps	xmm0, XMMWORD PTR _V00$[ebp]
	mulps	xmm0, XMMWORD PTR _V10$[ebp]
	movaps	XMMWORD PTR $T87[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T87[ebp]
	movaps	XMMWORD PTR _D0$[ebp], xmm0
; Line 715
	movaps	xmm0, XMMWORD PTR _V01$[ebp]
	mulps	xmm0, XMMWORD PTR _V11$[ebp]
	movaps	XMMWORD PTR $T86[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T86[ebp]
	movaps	XMMWORD PTR _D1$[ebp], xmm0
; Line 716
	movaps	xmm0, XMMWORD PTR _V02$[ebp]
	mulps	xmm0, XMMWORD PTR _V12$[ebp]
	movaps	XMMWORD PTR $T85[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T85[ebp]
	movaps	XMMWORD PTR _D2$[ebp], xmm0
; Line 718
	mov	eax, 16					; 00000010H
	shl	eax, 1
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR _MT$[ebp+ecx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 238	; 000000eeH
	movaps	XMMWORD PTR $T84[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T84[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 719
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 80	; 00000050H
	movaps	XMMWORD PTR $T83[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T83[ebp]
	movaps	XMMWORD PTR _V10$[ebp], xmm0
; Line 720
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+eax]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 238	; 000000eeH
	movaps	XMMWORD PTR $T82[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T82[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 721
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 80	; 00000050H
	movaps	XMMWORD PTR $T81[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T81[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 722
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 221	; 000000ddH
	movaps	XMMWORD PTR $T80[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T80[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 723
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 136	; 00000088H
	movaps	XMMWORD PTR $T79[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T79[ebp]
	movaps	XMMWORD PTR _V12$[ebp], xmm0
; Line 725
	movaps	xmm0, XMMWORD PTR _V00$[ebp]
	mulps	xmm0, XMMWORD PTR _V10$[ebp]
	movaps	XMMWORD PTR $T78[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T78[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 726
	movaps	xmm0, XMMWORD PTR _V01$[ebp]
	mulps	xmm0, XMMWORD PTR _V11$[ebp]
	movaps	XMMWORD PTR $T77[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T77[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 727
	movaps	xmm0, XMMWORD PTR _V02$[ebp]
	mulps	xmm0, XMMWORD PTR _V12$[ebp]
	movaps	XMMWORD PTR $T76[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T76[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 728
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	subps	xmm0, XMMWORD PTR _V00$[ebp]
	movaps	XMMWORD PTR $T75[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T75[ebp]
	movaps	XMMWORD PTR _D0$[ebp], xmm0
; Line 729
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	subps	xmm0, XMMWORD PTR _V01$[ebp]
	movaps	XMMWORD PTR $T74[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T74[ebp]
	movaps	XMMWORD PTR _D1$[ebp], xmm0
; Line 730
	movaps	xmm0, XMMWORD PTR _D2$[ebp]
	subps	xmm0, XMMWORD PTR _V02$[ebp]
	movaps	XMMWORD PTR $T73[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T73[ebp]
	movaps	XMMWORD PTR _D2$[ebp], xmm0
; Line 732
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 93		; 0000005dH
	movaps	XMMWORD PTR $T72[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T72[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 733
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+ecx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 73	; 00000049H
	movaps	XMMWORD PTR $T71[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T71[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 734
	movaps	xmm0, XMMWORD PTR _V11$[ebp]
	shufps	xmm0, XMMWORD PTR _D0$[ebp], 50		; 00000032H
	movaps	XMMWORD PTR $T70[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T70[ebp]
	movaps	XMMWORD PTR _V10$[ebp], xmm0
; Line 735
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 18	; 00000012H
	movaps	XMMWORD PTR $T69[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T69[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 736
	movaps	xmm0, XMMWORD PTR _V11$[ebp]
	shufps	xmm0, XMMWORD PTR _D0$[ebp], 153	; 00000099H
	movaps	XMMWORD PTR $T68[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T68[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 738
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 253	; 000000fdH
	movaps	XMMWORD PTR $T67[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T67[ebp]
	movaps	XMMWORD PTR _V13$[ebp], xmm0
; Line 739
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR _MT$[ebp+eax]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 73	; 00000049H
	movaps	XMMWORD PTR $T66[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T66[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 740
	movaps	xmm0, XMMWORD PTR _V13$[ebp]
	shufps	xmm0, XMMWORD PTR _D1$[ebp], 50		; 00000032H
	movaps	XMMWORD PTR $T65[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T65[ebp]
	movaps	XMMWORD PTR _V12$[ebp], xmm0
; Line 741
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 18	; 00000012H
	movaps	XMMWORD PTR $T64[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T64[ebp]
	movaps	XMMWORD PTR _V03$[ebp], xmm0
; Line 742
	movaps	xmm0, XMMWORD PTR _V13$[ebp]
	shufps	xmm0, XMMWORD PTR _D1$[ebp], 153	; 00000099H
	movaps	XMMWORD PTR $T63[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T63[ebp]
	movaps	XMMWORD PTR _V13$[ebp], xmm0
; Line 744
	movaps	xmm0, XMMWORD PTR _V00$[ebp]
	mulps	xmm0, XMMWORD PTR _V10$[ebp]
	movaps	XMMWORD PTR $T62[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T62[ebp]
	movaps	XMMWORD PTR _C0$[ebp], xmm0
; Line 745
	movaps	xmm0, XMMWORD PTR _V01$[ebp]
	mulps	xmm0, XMMWORD PTR _V11$[ebp]
	movaps	XMMWORD PTR $T61[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T61[ebp]
	movaps	XMMWORD PTR _C2$[ebp], xmm0
; Line 746
	movaps	xmm0, XMMWORD PTR _V02$[ebp]
	mulps	xmm0, XMMWORD PTR _V12$[ebp]
	movaps	XMMWORD PTR $T60[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T60[ebp]
	movaps	XMMWORD PTR _C4$[ebp], xmm0
; Line 747
	movaps	xmm0, XMMWORD PTR _V03$[ebp]
	mulps	xmm0, XMMWORD PTR _V13$[ebp]
	movaps	XMMWORD PTR $T59[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T59[ebp]
	movaps	XMMWORD PTR _C6$[ebp], xmm0
; Line 750
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 4
	movaps	XMMWORD PTR $T58[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T58[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 751
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+ecx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 158	; 0000009eH
	movaps	XMMWORD PTR $T57[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T57[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 752
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	shufps	xmm0, XMMWORD PTR _V11$[ebp], 147	; 00000093H
	movaps	XMMWORD PTR $T56[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T56[ebp]
	movaps	XMMWORD PTR _V10$[ebp], xmm0
; Line 753
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 123	; 0000007bH
	movaps	XMMWORD PTR $T55[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T55[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 754
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	shufps	xmm0, XMMWORD PTR _V11$[ebp], 38	; 00000026H
	movaps	XMMWORD PTR $T54[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T54[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 756
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 164	; 000000a4H
	movaps	XMMWORD PTR $T53[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T53[ebp]
	movaps	XMMWORD PTR _V13$[ebp], xmm0
; Line 757
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR _MT$[ebp+eax]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 158	; 0000009eH
	movaps	XMMWORD PTR $T52[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T52[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 758
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	shufps	xmm0, XMMWORD PTR _V13$[ebp], 147	; 00000093H
	movaps	XMMWORD PTR $T51[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T51[ebp]
	movaps	XMMWORD PTR _V12$[ebp], xmm0
; Line 759
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 123	; 0000007bH
	movaps	XMMWORD PTR $T50[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T50[ebp]
	movaps	XMMWORD PTR _V03$[ebp], xmm0
; Line 760
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	shufps	xmm0, XMMWORD PTR _V13$[ebp], 38	; 00000026H
	movaps	XMMWORD PTR $T49[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T49[ebp]
	movaps	XMMWORD PTR _V13$[ebp], xmm0
; Line 762
	movaps	xmm0, XMMWORD PTR _V00$[ebp]
	mulps	xmm0, XMMWORD PTR _V10$[ebp]
	movaps	XMMWORD PTR $T48[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T48[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 763
	movaps	xmm0, XMMWORD PTR _V01$[ebp]
	mulps	xmm0, XMMWORD PTR _V11$[ebp]
	movaps	XMMWORD PTR $T47[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T47[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 764
	movaps	xmm0, XMMWORD PTR _V02$[ebp]
	mulps	xmm0, XMMWORD PTR _V12$[ebp]
	movaps	XMMWORD PTR $T46[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T46[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 765
	movaps	xmm0, XMMWORD PTR _V03$[ebp]
	mulps	xmm0, XMMWORD PTR _V13$[ebp]
	movaps	XMMWORD PTR $T45[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T45[ebp]
	movaps	XMMWORD PTR _V03$[ebp], xmm0
; Line 766
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	subps	xmm0, XMMWORD PTR _V00$[ebp]
	movaps	XMMWORD PTR $T44[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T44[ebp]
	movaps	XMMWORD PTR _C0$[ebp], xmm0
; Line 767
	movaps	xmm0, XMMWORD PTR _C2$[ebp]
	subps	xmm0, XMMWORD PTR _V01$[ebp]
	movaps	XMMWORD PTR $T43[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T43[ebp]
	movaps	XMMWORD PTR _C2$[ebp], xmm0
; Line 768
	movaps	xmm0, XMMWORD PTR _C4$[ebp]
	subps	xmm0, XMMWORD PTR _V02$[ebp]
	movaps	XMMWORD PTR $T42[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T42[ebp]
	movaps	XMMWORD PTR _C4$[ebp], xmm0
; Line 769
	movaps	xmm0, XMMWORD PTR _C6$[ebp]
	subps	xmm0, XMMWORD PTR _V03$[ebp]
	movaps	XMMWORD PTR $T41[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T41[ebp]
	movaps	XMMWORD PTR _C6$[ebp], xmm0
; Line 771
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+ecx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 51	; 00000033H
	movaps	XMMWORD PTR $T40[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T40[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 773
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 74		; 0000004aH
	movaps	XMMWORD PTR $T39[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T39[ebp]
	movaps	XMMWORD PTR _V10$[ebp], xmm0
; Line 774
	movaps	xmm0, XMMWORD PTR _V10$[ebp]
	shufps	xmm0, XMMWORD PTR _V10$[ebp], 44	; 0000002cH
	movaps	XMMWORD PTR $T38[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T38[ebp]
	movaps	XMMWORD PTR _V10$[ebp], xmm0
; Line 775
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+eax], 141	; 0000008dH
	movaps	XMMWORD PTR $T37[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T37[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 777
	movaps	xmm0, XMMWORD PTR _D0$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 76		; 0000004cH
	movaps	XMMWORD PTR $T36[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T36[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 778
	movaps	xmm0, XMMWORD PTR _V11$[ebp]
	shufps	xmm0, XMMWORD PTR _V11$[ebp], 147	; 00000093H
	movaps	XMMWORD PTR $T35[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T35[ebp]
	movaps	XMMWORD PTR _V11$[ebp], xmm0
; Line 779
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR _MT$[ebp+eax]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 51	; 00000033H
	movaps	XMMWORD PTR $T34[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T34[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 781
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 234	; 000000eaH
	movaps	XMMWORD PTR $T33[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T33[ebp]
	movaps	XMMWORD PTR _V12$[ebp], xmm0
; Line 782
	movaps	xmm0, XMMWORD PTR _V12$[ebp]
	shufps	xmm0, XMMWORD PTR _V12$[ebp], 44	; 0000002cH
	movaps	XMMWORD PTR $T32[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T32[ebp]
	movaps	XMMWORD PTR _V12$[ebp], xmm0
; Line 783
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _MT$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _MT$[ebp+ecx], 141	; 0000008dH
	movaps	XMMWORD PTR $T31[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T31[ebp]
	movaps	XMMWORD PTR _V03$[ebp], xmm0
; Line 785
	movaps	xmm0, XMMWORD PTR _D1$[ebp]
	shufps	xmm0, XMMWORD PTR _D2$[ebp], 236	; 000000ecH
	movaps	XMMWORD PTR $T30[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T30[ebp]
	movaps	XMMWORD PTR _V13$[ebp], xmm0
; Line 786
	movaps	xmm0, XMMWORD PTR _V13$[ebp]
	shufps	xmm0, XMMWORD PTR _V13$[ebp], 147	; 00000093H
	movaps	XMMWORD PTR $T29[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T29[ebp]
	movaps	XMMWORD PTR _V13$[ebp], xmm0
; Line 788
	movaps	xmm0, XMMWORD PTR _V00$[ebp]
	mulps	xmm0, XMMWORD PTR _V10$[ebp]
	movaps	XMMWORD PTR $T28[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T28[ebp]
	movaps	XMMWORD PTR _V00$[ebp], xmm0
; Line 789
	movaps	xmm0, XMMWORD PTR _V01$[ebp]
	mulps	xmm0, XMMWORD PTR _V11$[ebp]
	movaps	XMMWORD PTR $T27[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T27[ebp]
	movaps	XMMWORD PTR _V01$[ebp], xmm0
; Line 790
	movaps	xmm0, XMMWORD PTR _V02$[ebp]
	mulps	xmm0, XMMWORD PTR _V12$[ebp]
	movaps	XMMWORD PTR $T26[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T26[ebp]
	movaps	XMMWORD PTR _V02$[ebp], xmm0
; Line 791
	movaps	xmm0, XMMWORD PTR _V03$[ebp]
	mulps	xmm0, XMMWORD PTR _V13$[ebp]
	movaps	XMMWORD PTR $T25[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T25[ebp]
	movaps	XMMWORD PTR _V03$[ebp], xmm0
; Line 792
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	subps	xmm0, XMMWORD PTR _V00$[ebp]
	movaps	XMMWORD PTR $T24[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T24[ebp]
	movaps	XMMWORD PTR _C1$[ebp], xmm0
; Line 793
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	addps	xmm0, XMMWORD PTR _V00$[ebp]
	movaps	XMMWORD PTR $T23[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T23[ebp]
	movaps	XMMWORD PTR _C0$[ebp], xmm0
; Line 794
	movaps	xmm0, XMMWORD PTR _C2$[ebp]
	addps	xmm0, XMMWORD PTR _V01$[ebp]
	movaps	XMMWORD PTR $T22[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T22[ebp]
	movaps	XMMWORD PTR _C3$[ebp], xmm0
; Line 795
	movaps	xmm0, XMMWORD PTR _C2$[ebp]
	subps	xmm0, XMMWORD PTR _V01$[ebp]
	movaps	XMMWORD PTR $T21[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T21[ebp]
	movaps	XMMWORD PTR _C2$[ebp], xmm0
; Line 796
	movaps	xmm0, XMMWORD PTR _C4$[ebp]
	subps	xmm0, XMMWORD PTR _V02$[ebp]
	movaps	XMMWORD PTR $T20[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T20[ebp]
	movaps	XMMWORD PTR _C5$[ebp], xmm0
; Line 797
	movaps	xmm0, XMMWORD PTR _C4$[ebp]
	addps	xmm0, XMMWORD PTR _V02$[ebp]
	movaps	XMMWORD PTR $T19[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T19[ebp]
	movaps	XMMWORD PTR _C4$[ebp], xmm0
; Line 798
	movaps	xmm0, XMMWORD PTR _C6$[ebp]
	addps	xmm0, XMMWORD PTR _V03$[ebp]
	movaps	XMMWORD PTR $T18[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T18[ebp]
	movaps	XMMWORD PTR _C7$[ebp], xmm0
; Line 799
	movaps	xmm0, XMMWORD PTR _C6$[ebp]
	subps	xmm0, XMMWORD PTR _V03$[ebp]
	movaps	XMMWORD PTR $T17[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T17[ebp]
	movaps	XMMWORD PTR _C6$[ebp], xmm0
; Line 801
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	shufps	xmm0, XMMWORD PTR _C1$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T16[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T16[ebp]
	movaps	XMMWORD PTR _C0$[ebp], xmm0
; Line 802
	movaps	xmm0, XMMWORD PTR _C2$[ebp]
	shufps	xmm0, XMMWORD PTR _C3$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	movaps	XMMWORD PTR _C2$[ebp], xmm0
; Line 803
	movaps	xmm0, XMMWORD PTR _C4$[ebp]
	shufps	xmm0, XMMWORD PTR _C5$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T14[ebp]
	movaps	XMMWORD PTR _C4$[ebp], xmm0
; Line 804
	movaps	xmm0, XMMWORD PTR _C6$[ebp]
	shufps	xmm0, XMMWORD PTR _C7$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	movaps	XMMWORD PTR _C6$[ebp], xmm0
; Line 805
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	shufps	xmm0, XMMWORD PTR _C0$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T12[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T12[ebp]
	movaps	XMMWORD PTR _C0$[ebp], xmm0
; Line 806
	movaps	xmm0, XMMWORD PTR _C2$[ebp]
	shufps	xmm0, XMMWORD PTR _C2$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _C2$[ebp], xmm0
; Line 807
	movaps	xmm0, XMMWORD PTR _C4$[ebp]
	shufps	xmm0, XMMWORD PTR _C4$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _C4$[ebp], xmm0
; Line 808
	movaps	xmm0, XMMWORD PTR _C6$[ebp]
	shufps	xmm0, XMMWORD PTR _C6$[ebp], 216	; 000000d8H
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _C6$[ebp], xmm0
; Line 810
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movups	xmm1, XMMWORD PTR _MT$[ebp+ecx]
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	call	?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector4Dot
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 811
	cmp	DWORD PTR _pDeterminant$[ebp], 0
	je	SHORT $LN1@XMMatrixIn
; Line 812
	mov	edx, DWORD PTR _pDeterminant$[ebp]
	movups	xmm0, XMMWORD PTR _vTemp$[ebp]
	movups	XMMWORD PTR [edx], xmm0
$LN1@XMMatrixIn:
; Line 813
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
	movaps	XMMWORD PTR tv806[ebp], xmm0
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv806[ebp]
	divps	xmm0, xmm1
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 814
	lea	ecx, DWORD PTR _mResult$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 815
	movaps	xmm0, XMMWORD PTR _C0$[ebp]
	mulps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR $T5[ebp]
	movups	XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 816
	movaps	xmm0, XMMWORD PTR _C2$[ebp]
	mulps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movups	xmm0, XMMWORD PTR $T4[ebp]
	movups	XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 817
	movaps	xmm0, XMMWORD PTR _C4$[ebp]
	mulps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR $T3[ebp]
	movups	XMMWORD PTR _mResult$[ebp+ecx], xmm0
; Line 818
	movaps	xmm0, XMMWORD PTR _C6$[ebp]
	mulps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 819
	movaps	xmm0, XMMWORD PTR _mResult$[ebp]
	movaps	xmm1, XMMWORD PTR _mResult$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mResult$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mResult$[ebp+48]
; Line 822
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@XMMatrixIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN8@XMMatrixIn:
	DD	3
	DD	$LN7@XMMatrixIn
$LN7@XMMatrixIn:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN4@XMMatrixIn
	DD	-160					; ffffff60H
	DD	64					; 00000040H
	DD	$LN5@XMMatrixIn
	DD	-2048					; fffff800H
	DD	64					; 00000040H
	DD	$LN6@XMMatrixIn
$LN6@XMMatrixIn:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN5@XMMatrixIn:
	DB	77					; 0000004dH
	DB	84					; 00000054H
	DB	0
$LN4@XMMatrixIn:
	DB	77					; 0000004dH
	DB	0
?XMMatrixInverse@DirectX@@YQ?AUXMMATRIX@1@PAT__m128@@U21@@Z ENDP ; DirectX::XMMatrixInverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z
_TEXT	SEGMENT
$T1 = -384						; size = 16
$T2 = -368						; size = 16
$T3 = -352						; size = 16
$T4 = -336						; size = 16
_mResult$ = -304					; size = 64
$T5 = -224						; size = 16
_vTemp4$ = -208						; size = 16
$T6 = -192						; size = 16
_vTemp2$ = -176						; size = 16
$T7 = -160						; size = 16
_vTemp3$ = -144						; size = 16
$T8 = -128						; size = 16
_vTemp1$ = -112						; size = 16
_M$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z PROC	; DirectX::XMMatrixTranspose, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 543
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _M$[ebp+48], xmm3
	movaps	XMMWORD PTR _M$[ebp+32], xmm2
	movaps	XMMWORD PTR _M$[ebp+16], xmm1
	movaps	XMMWORD PTR _M$[ebp], xmm0
; Line 581
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR _M$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _M$[ebp+eax], 68	; 00000044H
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 583
	mov	eax, 16					; 00000010H
	shl	eax, 0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR _M$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _M$[ebp+eax], 238	; 000000eeH
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _vTemp3$[ebp], xmm0
; Line 585
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _M$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _M$[ebp+ecx], 68	; 00000044H
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 587
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm0, XMMWORD PTR _M$[ebp+edx]
	shufps	xmm0, XMMWORD PTR _M$[ebp+ecx], 238	; 000000eeH
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vTemp4$[ebp], xmm0
; Line 588
	lea	ecx, DWORD PTR _mResult$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 591
	movaps	xmm0, XMMWORD PTR _vTemp1$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp2$[ebp], 136	; 00000088H
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movups	xmm0, XMMWORD PTR $T4[ebp]
	movups	XMMWORD PTR _mResult$[ebp+ecx], xmm0
; Line 593
	movaps	xmm0, XMMWORD PTR _vTemp1$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp2$[ebp], 221	; 000000ddH
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR $T3[ebp]
	movups	XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 595
	movaps	xmm0, XMMWORD PTR _vTemp3$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp4$[ebp], 136	; 00000088H
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 597
	movaps	xmm0, XMMWORD PTR _vTemp3$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp4$[ebp], 221	; 000000ddH
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 598
	movaps	xmm0, XMMWORD PTR _mResult$[ebp]
	movaps	xmm1, XMMWORD PTR _mResult$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mResult$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mResult$[ebp+48]
; Line 601
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XMMatrixTr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN6@XMMatrixTr:
	DD	2
	DD	$LN5@XMMatrixTr
$LN5@XMMatrixTr:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@XMMatrixTr
	DD	-304					; fffffed0H
	DD	64					; 00000040H
	DD	$LN4@XMMatrixTr
$LN4@XMMatrixTr:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN3@XMMatrixTr:
	DB	77					; 0000004dH
	DB	0
?XMMatrixTranspose@DirectX@@YQ?AUXMMATRIX@1@U21@@Z ENDP	; DirectX::XMMatrixTranspose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z
_TEXT	SEGMENT
$T1 = -944						; size = 16
$T2 = -928						; size = 16
$T3 = -912						; size = 16
$T4 = -896						; size = 16
$T5 = -880						; size = 16
$T6 = -864						; size = 16
$T7 = -848						; size = 16
$T8 = -832						; size = 16
$T9 = -816						; size = 16
$T10 = -800						; size = 16
$T11 = -784						; size = 16
$T12 = -768						; size = 16
$T13 = -752						; size = 16
$T14 = -736						; size = 16
$T15 = -720						; size = 16
$T16 = -704						; size = 16
$T17 = -688						; size = 16
$T18 = -672						; size = 16
$T19 = -656						; size = 16
$T20 = -640						; size = 16
$T21 = -624						; size = 16
$T22 = -608						; size = 16
$T23 = -592						; size = 16
$T24 = -576						; size = 16
$T25 = -560						; size = 16
$T26 = -544						; size = 16
$T27 = -528						; size = 16
$T28 = -512						; size = 16
$T29 = -496						; size = 16
$T30 = -480						; size = 16
$T31 = -464						; size = 16
$T32 = -448						; size = 16
$T33 = -432						; size = 16
$T34 = -416						; size = 16
$T35 = -400						; size = 16
$T36 = -384						; size = 16
$T37 = -368						; size = 16
$T38 = -352						; size = 16
$T39 = -336						; size = 16
$T40 = -320						; size = 16
$T41 = -304						; size = 16
$T42 = -288						; size = 16
_vZ$ = -272						; size = 16
$T43 = -256						; size = 16
_vY$ = -240						; size = 16
$T44 = -224						; size = 16
_vX$ = -208						; size = 16
_vW$ = -192						; size = 16
_mResult$ = -160					; size = 64
_M2$ = -88						; size = 4
_M1$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z PROC ; DirectX::XMMatrixMultiply, COMDAT
; _M2$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 228
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 944				; 000003b0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-944]
	mov	ecx, 236				; 000000ecH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _M2$[ebp], ecx
	movaps	XMMWORD PTR _M1$[ebp+48], xmm3
	movaps	XMMWORD PTR _M1$[ebp+32], xmm2
	movaps	XMMWORD PTR _M1$[ebp+16], xmm1
	movaps	XMMWORD PTR _M1$[ebp], xmm0
; Line 301
	lea	ecx, DWORD PTR _mResult$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 303
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movups	xmm0, XMMWORD PTR _M1$[ebp+ecx]
	movups	XMMWORD PTR _vW$[ebp], xmm0
; Line 305
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 0
	movaps	XMMWORD PTR $T44[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T44[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 306
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T43[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T43[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 307
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T42[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T42[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 308
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 255	; 000000ffH
	movaps	XMMWORD PTR $T41[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T41[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 310
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	mulps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T40[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T40[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 311
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	mulps	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T39[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T39[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 312
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vZ$[ebp]
	mulps	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T38[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T38[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 313
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	mulps	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T37[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T37[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 315
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vZ$[ebp]
	movaps	XMMWORD PTR $T36[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T36[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 316
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	addps	xmm0, XMMWORD PTR _vW$[ebp]
	movaps	XMMWORD PTR $T35[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T35[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 317
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vY$[ebp]
	movaps	XMMWORD PTR $T34[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T34[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 318
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	movups	xmm0, XMMWORD PTR _vX$[ebp]
	movups	XMMWORD PTR _mResult$[ebp+eax], xmm0
; Line 320
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	movups	xmm0, XMMWORD PTR _M1$[ebp+ecx]
	movups	XMMWORD PTR _vW$[ebp], xmm0
; Line 321
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 0
	movaps	XMMWORD PTR $T33[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T33[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 322
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T32[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T32[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 323
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T31[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T31[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 324
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 255	; 000000ffH
	movaps	XMMWORD PTR $T30[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T30[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 325
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	mulps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T29[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T29[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 326
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	mulps	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T28[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T28[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 327
	mov	edx, 16					; 00000010H
	shl	edx, 1
	add	edx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vZ$[ebp]
	mulps	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T27[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T27[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 328
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	mulps	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T26[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T26[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 329
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vZ$[ebp]
	movaps	XMMWORD PTR $T25[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T25[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 330
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	addps	xmm0, XMMWORD PTR _vW$[ebp]
	movaps	XMMWORD PTR $T24[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T24[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 331
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vY$[ebp]
	movaps	XMMWORD PTR $T23[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T23[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 332
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR _vX$[ebp]
	movups	XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 333
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR _M1$[ebp+eax]
	movups	XMMWORD PTR _vW$[ebp], xmm0
; Line 334
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 0
	movaps	XMMWORD PTR $T22[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T22[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 335
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T21[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T21[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 336
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T20[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T20[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 337
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 255	; 000000ffH
	movaps	XMMWORD PTR $T19[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T19[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 338
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	mulps	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T18[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T18[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 339
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	mulps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T17[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T17[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 340
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vZ$[ebp]
	mulps	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T16[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T16[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 341
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	mulps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 342
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vZ$[ebp]
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T14[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 343
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	addps	xmm0, XMMWORD PTR _vW$[ebp]
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 344
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vY$[ebp]
	movaps	XMMWORD PTR $T12[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T12[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 345
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR _vX$[ebp]
	movups	XMMWORD PTR _mResult$[ebp+ecx], xmm0
; Line 346
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR _M1$[ebp+eax]
	movups	XMMWORD PTR _vW$[ebp], xmm0
; Line 347
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 0
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 348
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 349
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 350
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	shufps	xmm0, XMMWORD PTR _vW$[ebp], 255	; 000000ffH
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 351
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	mulps	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 352
	mov	eax, 16					; 00000010H
	shl	eax, 0
	add	eax, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	mulps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 353
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vZ$[ebp]
	mulps	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vZ$[ebp], xmm0
; Line 354
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _M2$[ebp]
	movaps	xmm0, XMMWORD PTR _vW$[ebp]
	mulps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _vW$[ebp], xmm0
; Line 355
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vZ$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 356
	movaps	xmm0, XMMWORD PTR _vY$[ebp]
	addps	xmm0, XMMWORD PTR _vW$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vY$[ebp], xmm0
; Line 357
	movaps	xmm0, XMMWORD PTR _vX$[ebp]
	addps	xmm0, XMMWORD PTR _vY$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vX$[ebp], xmm0
; Line 358
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	movups	xmm0, XMMWORD PTR _vX$[ebp]
	movups	XMMWORD PTR _mResult$[ebp+edx], xmm0
; Line 359
	movaps	xmm0, XMMWORD PTR _mResult$[ebp]
	movaps	xmm1, XMMWORD PTR _mResult$[ebp+16]
	movaps	xmm2, XMMWORD PTR _mResult$[ebp+32]
	movaps	xmm3, XMMWORD PTR _mResult$[ebp+48]
; Line 362
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XMMatrixMu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN6@XMMatrixMu:
	DD	2
	DD	$LN5@XMMatrixMu
$LN5@XMMatrixMu:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@XMMatrixMu
	DD	-160					; ffffff60H
	DD	64					; 00000040H
	DD	$LN4@XMMatrixMu
$LN4@XMMatrixMu:
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN3@XMMatrixMu:
	DB	77					; 0000004dH
	DB	49					; 00000031H
	DB	0
?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ENDP ; DirectX::XMMatrixMultiply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector4Length@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -176						; size = 16
$T2 = -160						; size = 16
$T3 = -144						; size = 16
$T4 = -128						; size = 16
$T5 = -112						; size = 16
$T6 = -96						; size = 16
$T7 = -80						; size = 16
_vTemp$ = -64						; size = 16
$T8 = -48						; size = 16
_vLengthSq$ = -32					; size = 16
_V$ = -16						; size = 16
?XMVector4Length@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVector4Length, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 13295
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 176				; 000000b0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-176]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 13328
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	mulps	xmm0, XMMWORD PTR _V$[ebp]
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13330
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	shufps	xmm0, XMMWORD PTR _vLengthSq$[ebp], 238	; 000000eeH
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 13332
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	addps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13334
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	shufps	xmm0, XMMWORD PTR _vLengthSq$[ebp], 64	; 00000040H
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13336
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	shufps	xmm0, XMMWORD PTR _vLengthSq$[ebp], 240	; 000000f0H
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 13338
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	addps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13340
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	shufps	xmm0, XMMWORD PTR _vLengthSq$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13342
	sqrtps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 13343
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
; Line 13346
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVector4Length@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVector4Length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
$T3 = -128						; size = 16
$T4 = -112						; size = 16
$T5 = -96						; size = 16
$T6 = -80						; size = 16
_vTemp$ = -64						; size = 16
_vTemp2$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z PROC		; DirectX::XMVector4Dot, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 12940
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 12959
	movaps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 12960
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	mulps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12961
	movaps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp$[ebp], 64	; 00000040H
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 12962
	movaps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	addps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 12963
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp2$[ebp], 48	; 00000030H
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12964
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	addps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12965
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 12968
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVector4Dot@DirectX@@YQ?AT__m128@@T2@0@Z ENDP		; DirectX::XMVector4Dot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector4LessOrEqual@DirectX@@YQ_NT__m128@@0@Z
_TEXT	SEGMENT
tv72 = -72						; size = 4
tv70 = -68						; size = 4
$T1 = -64						; size = 16
_vTemp$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector4LessOrEqual@DirectX@@YQ_NT__m128@@0@Z PROC	; DirectX::XMVector4LessOrEqual, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 12808
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 12817
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	cmpleps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 12818
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movmskps eax, xmm0
	cmp	eax, 15					; 0000000fH
	jne	SHORT $LN3@XMVector4L
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@XMVector4L
$LN3@XMVector4L:
	mov	DWORD PTR tv70[ebp], 0
$LN4@XMVector4L:
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN5@XMVector4L
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN6@XMVector4L
$LN5@XMVector4L:
	mov	DWORD PTR tv72[ebp], 0
$LN6@XMVector4L:
	mov	al, BYTE PTR tv72[ebp]
; Line 12822
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVector4LessOrEqual@DirectX@@YQ_NT__m128@@0@Z ENDP	; DirectX::XMVector4LessOrEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3TransformNormal@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z
_TEXT	SEGMENT
$T1 = -288						; size = 16
$T2 = -272						; size = 16
$T3 = -256						; size = 16
$T4 = -240						; size = 16
$T5 = -224						; size = 16
$T6 = -208						; size = 16
_vTemp$ = -192						; size = 16
$T7 = -176						; size = 16
$T8 = -160						; size = 16
_vResult$ = -144					; size = 16
_M$ = -112						; size = 64
_V$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
?XMVector3TransformNormal@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z PROC ; DirectX::XMVector3TransformNormal, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 10809
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _M$[ebp+48], xmm4
	movaps	XMMWORD PTR _M$[ebp+32], xmm3
	movaps	XMMWORD PTR _M$[ebp+16], xmm2
	movaps	XMMWORD PTR _M$[ebp], xmm1
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 10828
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	shufps	xmm0, XMMWORD PTR _V$[ebp], 0
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 10829
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	mulps	xmm0, XMMWORD PTR _M$[ebp+ecx]
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 10830
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	shufps	xmm0, XMMWORD PTR _V$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 10831
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	mulps	xmm0, XMMWORD PTR _M$[ebp+edx]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 10832
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	addps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 10833
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	shufps	xmm0, XMMWORD PTR _V$[ebp], 170		; 000000aaH
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 10834
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	mulps	xmm0, XMMWORD PTR _M$[ebp+eax]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 10835
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	addps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 10836
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
; Line 10839
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@XMVector3T
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN5@XMVector3T:
	DD	1
	DD	$LN4@XMVector3T
$LN4@XMVector3T:
	DD	-112					; ffffff90H
	DD	64					; 00000040H
	DD	$LN3@XMVector3T
$LN3@XMVector3T:
	DB	77					; 0000004dH
	DB	0
?XMVector3TransformNormal@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ENDP ; DirectX::XMVector3TransformNormal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z
_TEXT	SEGMENT
$T1 = -336						; size = 16
$T2 = -320						; size = 16
_W$ = -304						; size = 16
$T3 = -288						; size = 16
$T4 = -272						; size = 16
$T5 = -256						; size = 16
_Result$ = -240						; size = 16
$T6 = -224						; size = 16
_X$ = -208						; size = 16
$T7 = -192						; size = 16
_Y$ = -176						; size = 16
$T8 = -160						; size = 16
_Z$ = -144						; size = 16
_M$ = -112						; size = 64
_V$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z PROC ; DirectX::XMVector3TransformCoord, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 10318
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _M$[ebp+48], xmm4
	movaps	XMMWORD PTR _M$[ebp+32], xmm3
	movaps	XMMWORD PTR _M$[ebp+16], xmm2
	movaps	XMMWORD PTR _M$[ebp], xmm1
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 10321
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	call	?XMVectorSplatZ@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorSplatZ
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _Z$[ebp], xmm0
; Line 10322
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	call	?XMVectorSplatY@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorSplatY
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _Y$[ebp], xmm0
; Line 10323
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	call	?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorSplatX
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _X$[ebp], xmm0
; Line 10325
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	movups	xmm2, XMMWORD PTR _M$[ebp+ecx]
	mov	edx, 16					; 00000010H
	shl	edx, 1
	movups	xmm1, XMMWORD PTR _M$[ebp+edx]
	movaps	xmm0, XMMWORD PTR _Z$[ebp]
	call	?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorMultiplyAdd
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 10326
	movaps	xmm2, XMMWORD PTR _Result$[ebp]
	mov	eax, 16					; 00000010H
	shl	eax, 0
	movups	xmm1, XMMWORD PTR _M$[ebp+eax]
	movaps	xmm0, XMMWORD PTR _Y$[ebp]
	call	?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorMultiplyAdd
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 10327
	movaps	xmm2, XMMWORD PTR _Result$[ebp]
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm1, XMMWORD PTR _M$[ebp+edx]
	movaps	xmm0, XMMWORD PTR _X$[ebp]
	call	?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ; DirectX::XMVectorMultiplyAdd
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 10329
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	call	?XMVectorSplatW@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorSplatW
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _W$[ebp], xmm0
; Line 10330
	movaps	xmm1, XMMWORD PTR _W$[ebp]
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	call	?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorDivide
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 10334
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@XMVector3T
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN5@XMVector3T:
	DD	1
	DD	$LN4@XMVector3T
$LN4@XMVector3T:
	DD	-112					; ffffff90H
	DD	64					; 00000040H
	DD	$LN3@XMVector3T
$LN3@XMVector3T:
	DB	77					; 0000004dH
	DB	0
?XMVector3TransformCoord@DirectX@@YQ?AT__m128@@T2@UXMMATRIX@1@@Z ENDP ; DirectX::XMVector3TransformCoord
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -384						; size = 16
$T2 = -368						; size = 16
_vTemp2$ = -352						; size = 16
$T3 = -336						; size = 16
$T4 = -320						; size = 16
_vTemp1$ = -304						; size = 16
$T5 = -288						; size = 16
$T6 = -272						; size = 16
$T7 = -256						; size = 16
$T8 = -240						; size = 16
$T9 = -224						; size = 16
$T10 = -208						; size = 16
_vZeroMask$ = -192					; size = 16
$T11 = -176						; size = 16
_vResult$ = -160					; size = 16
$T12 = -144						; size = 16
$T13 = -128						; size = 16
$T14 = -112						; size = 16
$T15 = -96						; size = 16
$T16 = -80						; size = 16
_vTemp$ = -64						; size = 16
$T17 = -48						; size = 16
_vLengthSq$ = -32					; size = 16
_V$ = -16						; size = 16
?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVector3Normalize, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 9459
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 9502
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	mulps	xmm0, XMMWORD PTR _V$[ebp]
	movaps	XMMWORD PTR $T17[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T17[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9503
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	shufps	xmm0, XMMWORD PTR _vLengthSq$[ebp], 153	; 00000099H
	movaps	XMMWORD PTR $T16[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T16[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9504
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	addss	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9505
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp$[ebp], 85	; 00000055H
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T14[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9506
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	addss	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9507
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	shufps	xmm0, XMMWORD PTR _vLengthSq$[ebp], 0
	movaps	XMMWORD PTR $T12[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T12[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9509
	sqrtps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 9511
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _vZeroMask$[ebp], xmm0
; Line 9513
	movaps	xmm0, XMMWORD PTR _vZeroMask$[ebp]
	cmpneqps xmm0, XMMWORD PTR _vResult$[ebp]
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _vZeroMask$[ebp], xmm0
; Line 9516
	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMInfinity
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _vLengthSq$[ebp]
	cmpneqps xmm1, xmm0
	movaps	XMMWORD PTR $T7[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9518
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	divps	xmm0, XMMWORD PTR _vResult$[ebp]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 9520
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	andps	xmm0, XMMWORD PTR _vZeroMask$[ebp]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 9522
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMQNaN@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMQNaN
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _vLengthSq$[ebp]
	andnps	xmm1, xmm0
	movaps	XMMWORD PTR $T3[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 9523
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	andps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 9524
	movaps	xmm0, XMMWORD PTR _vTemp1$[ebp]
	orps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 9525
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
; Line 9528
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVector3Normalize@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVector3Normalize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3Length@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
$T3 = -128						; size = 16
$T4 = -112						; size = 16
$T5 = -96						; size = 16
$T6 = -80						; size = 16
_vTemp$ = -64						; size = 16
$T7 = -48						; size = 16
_vLengthSq$ = -32					; size = 16
_V$ = -16						; size = 16
?XMVector3Length@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVector3Length, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 9352
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 9385
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	mulps	xmm0, XMMWORD PTR _V$[ebp]
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9387
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	shufps	xmm0, XMMWORD PTR _vLengthSq$[ebp], 102	; 00000066H
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9389
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	addss	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9391
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp$[ebp], 85	; 00000055H
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9393
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	addss	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9395
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	shufps	xmm0, XMMWORD PTR _vLengthSq$[ebp], 0
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9397
	sqrtps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vLengthSq$[ebp], xmm0
; Line 9398
	movaps	xmm0, XMMWORD PTR _vLengthSq$[ebp]
; Line 9401
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVector3Length@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVector3Length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3LengthSq@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_V$ = -16						; size = 16
?XMVector3LengthSq@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVector3LengthSq, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 9189
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 9190
	movaps	xmm1, XMMWORD PTR _V$[ebp]
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	call	?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVector3Dot
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 9191
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVector3LengthSq@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVector3LengthSq
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -224						; size = 16
$T2 = -208						; size = 16
$T3 = -192						; size = 16
$T4 = -176						; size = 16
$T5 = -160						; size = 16
$T6 = -144						; size = 16
$T7 = -128						; size = 16
_vResult$ = -112					; size = 16
$T8 = -96						; size = 16
_vTemp2$ = -80						; size = 16
$T9 = -64						; size = 16
_vTemp1$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMVector3Cross, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 9137
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 9164
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	shufps	xmm0, XMMWORD PTR _V1$[ebp], 201	; 000000c9H
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 9166
	movaps	xmm0, XMMWORD PTR _V2$[ebp]
	shufps	xmm0, XMMWORD PTR _V2$[ebp], 210	; 000000d2H
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 9168
	movaps	xmm0, XMMWORD PTR _vTemp1$[ebp]
	mulps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 9170
	movaps	xmm0, XMMWORD PTR _vTemp1$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp1$[ebp], 201	; 000000c9H
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 9172
	movaps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp2$[ebp], 210	; 000000d2H
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 9174
	movaps	xmm0, XMMWORD PTR _vTemp1$[ebp]
	mulps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 9176
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	subps	xmm0, XMMWORD PTR _vTemp1$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 9178
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMMask3@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMMask3
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _vResult$[ebp]
	andps	xmm1, xmm0
	movaps	XMMWORD PTR $T1[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 9181
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVector3Cross@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMVector3Cross
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
$T3 = -128						; size = 16
$T4 = -112						; size = 16
$T5 = -96						; size = 16
_vTemp$ = -80						; size = 16
$T6 = -64						; size = 16
_vDot$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z PROC		; DirectX::XMVector3Dot, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 9094
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 9115
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	mulps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vDot$[ebp], xmm0
; Line 9117
	movaps	xmm0, XMMWORD PTR _vDot$[ebp]
	shufps	xmm0, XMMWORD PTR _vDot$[ebp], 153	; 00000099H
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9119
	movaps	xmm0, XMMWORD PTR _vDot$[ebp]
	addss	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _vDot$[ebp], xmm0
; Line 9121
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	shufps	xmm0, XMMWORD PTR _vTemp$[ebp], 85	; 00000055H
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9123
	movaps	xmm0, XMMWORD PTR _vDot$[ebp]
	addss	xmm0, XMMWORD PTR _vTemp$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vDot$[ebp], xmm0
; Line 9125
	movaps	xmm0, XMMWORD PTR _vDot$[ebp]
	shufps	xmm0, XMMWORD PTR _vDot$[ebp], 0
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 9128
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVector3Dot@DirectX@@YQ?AT__m128@@T2@0@Z ENDP		; DirectX::XMVector3Dot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3IsInfinite@DirectX@@YQ_NT__m128@@@Z
_TEXT	SEGMENT
tv80 = -100						; size = 4
$T1 = -96						; size = 16
$T2 = -80						; size = 16
$T3 = -64						; size = 16
$T4 = -48						; size = 16
_vTemp$ = -32						; size = 16
_V$ = -16						; size = 16
?XMVector3IsInfinite@DirectX@@YQ_NT__m128@@@Z PROC	; DirectX::XMVector3IsInfinite, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 9058
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 9074
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMAbsMask@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMAbsMask
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _V$[ebp]
	andps	xmm1, xmm0
	movaps	XMMWORD PTR $T3[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9076
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMInfinity@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMInfinity
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _vTemp$[ebp]
	cmpeqps	xmm1, xmm0
	movaps	XMMWORD PTR $T1[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 9078
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movmskps edx, xmm0
	and	edx, 7
	je	SHORT $LN3@XMVector3I
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN4@XMVector3I
$LN3@XMVector3I:
	mov	DWORD PTR tv80[ebp], 0
$LN4@XMVector3I:
	mov	al, BYTE PTR tv80[ebp]
; Line 9081
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVector3IsInfinite@DirectX@@YQ_NT__m128@@@Z ENDP	; DirectX::XMVector3IsInfinite
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVector3Equal@DirectX@@YQ_NT__m128@@0@Z
_TEXT	SEGMENT
tv73 = -72						; size = 4
tv71 = -68						; size = 4
$T1 = -64						; size = 16
_vTemp$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector3Equal@DirectX@@YQ_NT__m128@@0@Z PROC		; DirectX::XMVector3Equal, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 8539
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 8548
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	cmpeqps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vTemp$[ebp], xmm0
; Line 8549
	movaps	xmm0, XMMWORD PTR _vTemp$[ebp]
	movmskps eax, xmm0
	and	eax, 7
	cmp	eax, 7
	jne	SHORT $LN3@XMVector3E
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@XMVector3E
$LN3@XMVector3E:
	mov	DWORD PTR tv71[ebp], 0
$LN4@XMVector3E:
	cmp	DWORD PTR tv71[ebp], 0
	je	SHORT $LN5@XMVector3E
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN6@XMVector3E
$LN5@XMVector3E:
	mov	DWORD PTR tv73[ebp], 0
$LN6@XMVector3E:
	mov	al, BYTE PTR tv73[ebp]
; Line 8553
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVector3Equal@DirectX@@YQ_NT__m128@@0@Z ENDP		; DirectX::XMVector3Equal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSinCos@DirectX@@YQXPAT__m128@@0T2@@Z
_TEXT	SEGMENT
tv420 = -1248						; size = 16
$T1 = -1232						; size = 16
$T2 = -1216						; size = 16
$T3 = -1200						; size = 16
$T4 = -1184						; size = 16
$T5 = -1168						; size = 16
$T6 = -1152						; size = 16
$T7 = -1136						; size = 16
$T8 = -1120						; size = 16
$T9 = -1104						; size = 16
$T10 = -1088						; size = 16
$T11 = -1072						; size = 16
$T12 = -1056						; size = 16
$T13 = -1040						; size = 16
$T14 = -1024						; size = 16
$T15 = -1008						; size = 16
_CC0$ = -976						; size = 16
$T16 = -944						; size = 16
$T17 = -928						; size = 16
_CC1$ = -896						; size = 16
$T18 = -864						; size = 16
$T19 = -848						; size = 16
$T20 = -832						; size = 16
$T21 = -816						; size = 16
$T22 = -800						; size = 16
$T23 = -784						; size = 16
$T24 = -768						; size = 16
$T25 = -752						; size = 16
$T26 = -736						; size = 16
$T27 = -720						; size = 16
$T28 = -704						; size = 16
$T29 = -688						; size = 16
$T30 = -672						; size = 16
$T31 = -656						; size = 16
$T32 = -640						; size = 16
_SC0$ = -608						; size = 16
$T33 = -576						; size = 16
_Result$ = -560						; size = 16
$T34 = -544						; size = 16
_vConstants$ = -528					; size = 16
_SC1$ = -496						; size = 16
$T35 = -464						; size = 16
_x2$ = -448						; size = 16
$T36 = -432						; size = 16
$T37 = -416						; size = 16
$T38 = -400						; size = 16
$T39 = -384						; size = 16
$T40 = -368						; size = 16
$T41 = -352						; size = 16
$T42 = -336						; size = 16
_select1$ = -320					; size = 16
$T43 = -304						; size = 16
_select0$ = -288					; size = 16
$T44 = -272						; size = 16
$T45 = -256						; size = 16
_comp$ = -240						; size = 16
$T46 = -224						; size = 16
_rflx$ = -208						; size = 16
$T47 = -192						; size = 16
_absx$ = -176						; size = 16
$T48 = -160						; size = 16
$T49 = -144						; size = 16
_c$ = -128						; size = 16
$T50 = -112						; size = 16
$T51 = -96						; size = 16
_sign$ = -80						; size = 16
$T52 = -64						; size = 16
_x$ = -48						; size = 16
_V$ = -32						; size = 16
_pCos$ = -8						; size = 4
_pSin$ = -4						; size = 4
?XMVectorSinCos@DirectX@@YQXPAT__m128@@0T2@@Z PROC	; DirectX::XMVectorSinCos, COMDAT
; _pSin$ = ecx
; _pCos$ = edx
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 4406
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1260				; 000004ecH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1260]
	mov	ecx, 315				; 0000013bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V$[ebp], xmm0
	mov	DWORD PTR _pCos$[ebp], edx
	mov	DWORD PTR _pSin$[ebp], ecx
; Line 4407
	cmp	DWORD PTR _pSin$[ebp], 0
	jne	SHORT $LN3@XMVectorSi
	mov	esi, esp
	push	4407					; 00001137H
	push	OFFSET ??_C@_1JC@LGEHDEBK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1CA@PCMAADPN@?$AAp?$AAS?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMVectorSi:
; Line 4408
	cmp	DWORD PTR _pCos$[ebp], 0
	jne	SHORT $LN4@XMVectorSi
	mov	esi, esp
	push	4408					; 00001138H
	push	OFFSET ??_C@_1JC@LGEHDEBK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1CA@LFGCHHDM@?$AAp?$AAC?$AAo?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@XMVectorSi:
; Line 4475
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	call	?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorModAngles
	movaps	XMMWORD PTR $T52[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T52[ebp]
	movaps	XMMWORD PTR _x$[ebp], xmm0
; Line 4478
	lea	edx, DWORD PTR $T51[ebp]
	push	edx
	mov	ecx, OFFSET ?g_XMNegativeZero@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMNegativeZero
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _x$[ebp]
	andps	xmm1, xmm0
	movaps	XMMWORD PTR $T50[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T50[ebp]
	movaps	XMMWORD PTR _sign$[ebp], xmm0
; Line 4479
	movaps	xmm0, XMMWORD PTR _sign$[ebp]
	lea	eax, DWORD PTR $T49[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMPi@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMPi
	movaps	XMMWORD PTR tv420[ebp], xmm0
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv420[ebp]
	orps	xmm0, xmm1
	movaps	XMMWORD PTR $T48[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T48[ebp]
	movaps	XMMWORD PTR _c$[ebp], xmm0
; Line 4480
	movaps	xmm0, XMMWORD PTR _sign$[ebp]
	andnps	xmm0, XMMWORD PTR _x$[ebp]
	movaps	XMMWORD PTR $T47[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T47[ebp]
	movaps	XMMWORD PTR _absx$[ebp], xmm0
; Line 4481
	movaps	xmm0, XMMWORD PTR _c$[ebp]
	subps	xmm0, XMMWORD PTR _x$[ebp]
	movaps	XMMWORD PTR $T46[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T46[ebp]
	movaps	XMMWORD PTR _rflx$[ebp], xmm0
; Line 4482
	lea	ecx, DWORD PTR $T45[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMHalfPi@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMHalfPi
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _absx$[ebp]
	cmpleps	xmm1, xmm0
	movaps	XMMWORD PTR $T44[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T44[ebp]
	movaps	XMMWORD PTR _comp$[ebp], xmm0
; Line 4483
	movaps	xmm0, XMMWORD PTR _comp$[ebp]
	andps	xmm0, XMMWORD PTR _x$[ebp]
	movaps	XMMWORD PTR $T43[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T43[ebp]
	movaps	XMMWORD PTR _select0$[ebp], xmm0
; Line 4484
	movaps	xmm0, XMMWORD PTR _comp$[ebp]
	andnps	xmm0, XMMWORD PTR _rflx$[ebp]
	movaps	XMMWORD PTR $T42[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T42[ebp]
	movaps	XMMWORD PTR _select1$[ebp], xmm0
; Line 4485
	movaps	xmm0, XMMWORD PTR _select0$[ebp]
	orps	xmm0, XMMWORD PTR _select1$[ebp]
	movaps	XMMWORD PTR $T41[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T41[ebp]
	movaps	XMMWORD PTR _x$[ebp], xmm0
; Line 4486
	lea	edx, DWORD PTR $T40[ebp]
	push	edx
	mov	ecx, OFFSET ?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _comp$[ebp]
	andps	xmm1, xmm0
	movaps	XMMWORD PTR $T39[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T39[ebp]
	movaps	XMMWORD PTR _select0$[ebp], xmm0
; Line 4487
	lea	eax, DWORD PTR $T38[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMNegativeOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMNegativeOne
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _comp$[ebp]
	andnps	xmm1, xmm0
	movaps	XMMWORD PTR $T37[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T37[ebp]
	movaps	XMMWORD PTR _select1$[ebp], xmm0
; Line 4488
	movaps	xmm0, XMMWORD PTR _select0$[ebp]
	orps	xmm0, XMMWORD PTR _select1$[ebp]
	movaps	XMMWORD PTR $T36[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T36[ebp]
	movaps	XMMWORD PTR _sign$[ebp], xmm0
; Line 4490
	movaps	xmm0, XMMWORD PTR _x$[ebp]
	mulps	xmm0, XMMWORD PTR _x$[ebp]
	movaps	XMMWORD PTR $T35[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T35[ebp]
	movaps	XMMWORD PTR _x2$[ebp], xmm0
; Line 4493
	lea	ecx, DWORD PTR _SC1$[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMSinCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients1
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
; Line 4494
	movaps	xmm0, XMMWORD PTR _SC1$[ebp]
	shufps	xmm0, XMMWORD PTR _SC1$[ebp], 0
	movaps	XMMWORD PTR $T34[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T34[ebp]
	movaps	XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4495
	movaps	xmm0, XMMWORD PTR _vConstants$[ebp]
	mulps	xmm0, XMMWORD PTR _x2$[ebp]
	movaps	XMMWORD PTR $T33[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T33[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4497
	lea	edx, DWORD PTR _SC0$[ebp]
	push	edx
	mov	ecx, OFFSET ?g_XMSinCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMSinCoefficients0
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
; Line 4498
	movaps	xmm0, XMMWORD PTR _SC0$[ebp]
	shufps	xmm0, XMMWORD PTR _SC0$[ebp], 255	; 000000ffH
	movaps	XMMWORD PTR $T32[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T32[ebp]
	movaps	XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4499
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	addps	xmm0, XMMWORD PTR _vConstants$[ebp]
	movaps	XMMWORD PTR $T31[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T31[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4500
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	mulps	xmm0, XMMWORD PTR _x2$[ebp]
	movaps	XMMWORD PTR $T30[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T30[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4502
	movaps	xmm0, XMMWORD PTR _SC0$[ebp]
	shufps	xmm0, XMMWORD PTR _SC0$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T29[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T29[ebp]
	movaps	XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4503
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	addps	xmm0, XMMWORD PTR _vConstants$[ebp]
	movaps	XMMWORD PTR $T28[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T28[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4504
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	mulps	xmm0, XMMWORD PTR _x2$[ebp]
	movaps	XMMWORD PTR $T27[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T27[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4506
	movaps	xmm0, XMMWORD PTR _SC0$[ebp]
	shufps	xmm0, XMMWORD PTR _SC0$[ebp], 85	; 00000055H
	movaps	XMMWORD PTR $T26[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T26[ebp]
	movaps	XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4507
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	addps	xmm0, XMMWORD PTR _vConstants$[ebp]
	movaps	XMMWORD PTR $T25[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T25[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4508
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	mulps	xmm0, XMMWORD PTR _x2$[ebp]
	movaps	XMMWORD PTR $T24[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T24[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4510
	movaps	xmm0, XMMWORD PTR _SC0$[ebp]
	shufps	xmm0, XMMWORD PTR _SC0$[ebp], 0
	movaps	XMMWORD PTR $T23[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T23[ebp]
	movaps	XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4511
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	addps	xmm0, XMMWORD PTR _vConstants$[ebp]
	movaps	XMMWORD PTR $T22[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T22[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4512
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	mulps	xmm0, XMMWORD PTR _x2$[ebp]
	movaps	XMMWORD PTR $T21[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T21[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4513
	lea	eax, DWORD PTR $T20[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _Result$[ebp]
	addps	xmm1, xmm0
	movaps	XMMWORD PTR $T19[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T19[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4514
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	mulps	xmm0, XMMWORD PTR _x$[ebp]
	movaps	XMMWORD PTR $T18[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T18[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4515
	mov	ecx, DWORD PTR _pSin$[ebp]
	movups	xmm0, XMMWORD PTR _Result$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
; Line 4518
	lea	edx, DWORD PTR _CC1$[ebp]
	push	edx
	mov	ecx, OFFSET ?g_XMCosCoefficients1@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients1
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
; Line 4519
	movaps	xmm0, XMMWORD PTR _CC1$[ebp]
	shufps	xmm0, XMMWORD PTR _CC1$[ebp], 0
	movaps	XMMWORD PTR $T17[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T17[ebp]
	movaps	XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4520
	movaps	xmm0, XMMWORD PTR _vConstants$[ebp]
	mulps	xmm0, XMMWORD PTR _x2$[ebp]
	movaps	XMMWORD PTR $T16[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T16[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4522
	lea	eax, DWORD PTR _CC0$[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMCosCoefficients0@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMCosCoefficients0
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
; Line 4523
	movaps	xmm0, XMMWORD PTR _CC0$[ebp]
	shufps	xmm0, XMMWORD PTR _CC0$[ebp], 255	; 000000ffH
	movaps	XMMWORD PTR $T15[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T15[ebp]
	movaps	XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4524
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	addps	xmm0, XMMWORD PTR _vConstants$[ebp]
	movaps	XMMWORD PTR $T14[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T14[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4525
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	mulps	xmm0, XMMWORD PTR _x2$[ebp]
	movaps	XMMWORD PTR $T13[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4527
	movaps	xmm0, XMMWORD PTR _CC0$[ebp]
	shufps	xmm0, XMMWORD PTR _CC0$[ebp], 170	; 000000aaH
	movaps	XMMWORD PTR $T12[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T12[ebp]
	movaps	XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4528
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	addps	xmm0, XMMWORD PTR _vConstants$[ebp]
	movaps	XMMWORD PTR $T11[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T11[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4529
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	mulps	xmm0, XMMWORD PTR _x2$[ebp]
	movaps	XMMWORD PTR $T10[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4531
	movaps	xmm0, XMMWORD PTR _CC0$[ebp]
	shufps	xmm0, XMMWORD PTR _CC0$[ebp], 85	; 00000055H
	movaps	XMMWORD PTR $T9[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T9[ebp]
	movaps	XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4532
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	addps	xmm0, XMMWORD PTR _vConstants$[ebp]
	movaps	XMMWORD PTR $T8[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T8[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4533
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	mulps	xmm0, XMMWORD PTR _x2$[ebp]
	movaps	XMMWORD PTR $T7[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T7[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4535
	movaps	xmm0, XMMWORD PTR _CC0$[ebp]
	shufps	xmm0, XMMWORD PTR _CC0$[ebp], 0
	movaps	XMMWORD PTR $T6[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T6[ebp]
	movaps	XMMWORD PTR _vConstants$[ebp], xmm0
; Line 4536
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	addps	xmm0, XMMWORD PTR _vConstants$[ebp]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4537
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	mulps	xmm0, XMMWORD PTR _x2$[ebp]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4538
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMOne@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMOne
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _Result$[ebp]
	addps	xmm1, xmm0
	movaps	XMMWORD PTR $T2[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4539
	movaps	xmm0, XMMWORD PTR _Result$[ebp]
	mulps	xmm0, XMMWORD PTR _sign$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _Result$[ebp], xmm0
; Line 4540
	mov	edx, DWORD PTR _pCos$[ebp]
	movups	xmm0, XMMWORD PTR _Result$[ebp]
	movups	XMMWORD PTR [edx], xmm0
; Line 4543
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@XMVectorSi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN10@XMVectorSi:
	DD	4
	DD	$LN9@XMVectorSi
$LN9@XMVectorSi:
	DD	-496					; fffffe10H
	DD	16					; 00000010H
	DD	$LN5@XMVectorSi
	DD	-608					; fffffda0H
	DD	16					; 00000010H
	DD	$LN6@XMVectorSi
	DD	-896					; fffffc80H
	DD	16					; 00000010H
	DD	$LN7@XMVectorSi
	DD	-976					; fffffc30H
	DD	16					; 00000010H
	DD	$LN8@XMVectorSi
$LN8@XMVectorSi:
	DB	67					; 00000043H
	DB	67					; 00000043H
	DB	48					; 00000030H
	DB	0
$LN7@XMVectorSi:
	DB	67					; 00000043H
	DB	67					; 00000043H
	DB	49					; 00000031H
	DB	0
$LN6@XMVectorSi:
	DB	83					; 00000053H
	DB	67					; 00000043H
	DB	48					; 00000030H
	DB	0
$LN5@XMVectorSi:
	DB	83					; 00000053H
	DB	67					; 00000043H
	DB	49					; 00000031H
	DB	0
?XMVectorSinCos@DirectX@@YQXPAT__m128@@0T2@@Z ENDP	; DirectX::XMVectorSinCos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -128						; size = 16
$T2 = -112						; size = 16
$T3 = -96						; size = 16
$T4 = -80						; size = 16
$T5 = -64						; size = 16
$T6 = -48						; size = 16
_vResult$ = -32						; size = 16
_Angles$ = -16						; size = 16
?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorModAngles, COMDAT
; _Angles$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 4179
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _Angles$[ebp], xmm0
; Line 4199
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMReciprocalTwoPi@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMReciprocalTwoPi
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _Angles$[ebp]
	mulps	xmm1, xmm0
	movaps	XMMWORD PTR $T5[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 4201
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	call	?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z ; DirectX::XMVectorRound
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 4202
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, OFFSET ?g_XMTwoPi@DirectX@@3UXMVECTORF32@1@B ; DirectX::g_XMTwoPi
	call	??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORF32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _vResult$[ebp]
	mulps	xmm1, xmm0
	movaps	XMMWORD PTR $T2[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 4203
	movaps	xmm0, XMMWORD PTR _Angles$[ebp]
	subps	xmm0, XMMWORD PTR _vResult$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 4204
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
; Line 4207
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorModAngles@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorModAngles
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
$T2 = -64						; size = 16
_vResult$ = -48						; size = 16
_ScaleFactor$ = -20					; size = 4
_V$ = -16						; size = 16
?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z PROC	; DirectX::XMVectorScale, COMDAT
; _V$ = xmm0
; _ScaleFactor$ = xmm1s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 3062
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movss	DWORD PTR _ScaleFactor$[ebp], xmm1
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 3075
	movss	xmm0, DWORD PTR _ScaleFactor$[ebp]
	shufps	xmm0, xmm0, 0
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 3076
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	mulps	xmm0, XMMWORD PTR _V$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 3079
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z ENDP	; DirectX::XMVectorScale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMVectorDivide, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 3005
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 3022
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	divps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 3025
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMVectorDivide
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z
_TEXT	SEGMENT
$T1 = -96						; size = 16
$T2 = -80						; size = 16
_vResult$ = -64						; size = 16
_V3$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z PROC	; DirectX::XMVectorMultiplyAdd, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; _V3$ = xmm2
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2979
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V3$[ebp], xmm2
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 2992
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	mulps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 2993
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	addps	xmm0, XMMWORD PTR _V3$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 2996
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorMultiplyAdd@DirectX@@YQ?AT__m128@@T2@00@Z ENDP	; DirectX::XMVectorMultiplyAdd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMVectorMultiply, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2954
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 2966
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	mulps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 2969
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorMultiply@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMVectorMultiply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z PROC	; DirectX::XMVectorSubtract, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2869
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 2882
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	subps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 2885
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z ENDP	; DirectX::XMVectorSubtract
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z PROC		; DirectX::XMVectorAdd, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2784
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 2797
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	addps	xmm0, XMMWORD PTR _V2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 2800
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z ENDP		; DirectX::XMVectorAdd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -64						; size = 16
$T2 = -48						; size = 16
_Z$ = -32						; size = 16
_V$ = -16						; size = 16
?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorNegate, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2755
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 2770
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _Z$[ebp], xmm0
; Line 2772
	movaps	xmm0, XMMWORD PTR _Z$[ebp]
	subps	xmm0, XMMWORD PTR _V$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 2775
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorNegate@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorNegate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorClamp@DirectX@@YQ?AT__m128@@T2@00@Z
_TEXT	SEGMENT
$T1 = -96						; size = 16
$T2 = -80						; size = 16
_vResult$ = -64						; size = 16
_Max$ = -48						; size = 16
_Min$ = -32						; size = 16
_V$ = -16						; size = 16
?XMVectorClamp@DirectX@@YQ?AT__m128@@T2@00@Z PROC	; DirectX::XMVectorClamp, COMDAT
; _V$ = xmm0
; _Min$ = xmm1
; _Max$ = xmm2
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2560
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _Max$[ebp], xmm2
	movaps	XMMWORD PTR _Min$[ebp], xmm1
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 2561
	movaps	xmm1, XMMWORD PTR _Max$[ebp]
	movaps	xmm0, XMMWORD PTR _Min$[ebp]
	call	?XMVector4LessOrEqual@DirectX@@YQ_NT__m128@@0@Z ; DirectX::XMVector4LessOrEqual
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@XMVectorCl
	mov	esi, esp
	push	2561					; 00000a01H
	push	OFFSET ??_C@_1JC@LGEHDEBK@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1DO@HJELAGIP@?$AAX?$AAM?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA4?$AAL?$AAe?$AAs?$AAs?$AAO?$AAr?$AAE?$AAq?$AAu?$AAa?$AAl?$AA?$CI?$AAM?$AAi?$AAn?$AA?0?$AA?5?$AAM?$AAa?$AAx?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMVectorCl:
; Line 2577
	movaps	xmm0, XMMWORD PTR _Min$[ebp]
	maxps	xmm0, XMMWORD PTR _V$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 2578
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	minps	xmm0, XMMWORD PTR _Max$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 2579
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
; Line 2582
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorClamp@DirectX@@YQ?AT__m128@@T2@00@Z ENDP	; DirectX::XMVectorClamp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
tv92 = -176						; size = 16
$T1 = -160						; size = 16
$T2 = -144						; size = 16
_vResult$ = -128					; size = 16
$T3 = -112						; size = 16
$T4 = -96						; size = 16
_sMagic$ = -80						; size = 16
$T5 = -64						; size = 16
$T6 = -48						; size = 16
_sign$ = -32						; size = 16
_V$ = -16						; size = 16
?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z PROC		; DirectX::XMVectorRound, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 2357
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 176				; 000000b0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-176]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 2377
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, OFFSET ?g_XMNegativeZero@DirectX@@3UXMVECTORI32@1@B ; DirectX::g_XMNegativeZero
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR _V$[ebp]
	andps	xmm1, xmm0
	movaps	XMMWORD PTR $T5[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _sign$[ebp], xmm0
; Line 2378
	movaps	xmm0, XMMWORD PTR _sign$[ebp]
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, OFFSET ?magic@?1??XMVectorRound@DirectX@@YQ?AT__m128@@T3@@Z@4UXMVECTORI32@2@B ; `DirectX::XMVectorRound'::`2'::magic
	movaps	XMMWORD PTR tv92[ebp], xmm0
	call	??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ; DirectX::XMVECTORI32::operator __m128
	movups	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR tv92[ebp]
	orps	xmm0, xmm1
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _sMagic$[ebp], xmm0
; Line 2379
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	addps	xmm0, XMMWORD PTR _sMagic$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 2380
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
	subps	xmm0, XMMWORD PTR _sMagic$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _vResult$[ebp], xmm0
; Line 2381
	movaps	xmm0, XMMWORD PTR _vResult$[ebp]
; Line 2384
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorRound@DirectX@@YQ?AT__m128@@T2@@Z ENDP		; DirectX::XMVectorRound
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z
_TEXT	SEGMENT
$T1 = -128						; size = 16
$T2 = -112						; size = 16
_vTemp2$ = -96						; size = 16
$T3 = -80						; size = 16
_vTemp1$ = -64						; size = 16
_Control$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z PROC	; DirectX::XMVectorSelect, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; _Control$ = xmm2
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 1448
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _Control$[ebp], xmm2
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 1461
	movaps	xmm0, XMMWORD PTR _Control$[ebp]
	andnps	xmm0, XMMWORD PTR _V1$[ebp]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _vTemp1$[ebp], xmm0
; Line 1462
	movaps	xmm0, XMMWORD PTR _V2$[ebp]
	andps	xmm0, XMMWORD PTR _Control$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vTemp2$[ebp], xmm0
; Line 1463
	movaps	xmm0, XMMWORD PTR _vTemp1$[ebp]
	orps	xmm0, XMMWORD PTR _vTemp2$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 1466
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorSelect@DirectX@@YQ?AT__m128@@T2@00@Z ENDP	; DirectX::XMVectorSelect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorGetX@DirectX@@YQMT__m128@@@Z
_TEXT	SEGMENT
tv66 = -20						; size = 4
_V$ = -16						; size = 16
?XMVectorGetX@DirectX@@YQMT__m128@@@Z PROC		; DirectX::XMVectorGetX, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 422
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 428
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	movss	DWORD PTR tv66[ebp], xmm0
	movss	xmm0, DWORD PTR tv66[ebp]
; Line 431
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorGetX@DirectX@@YQMT__m128@@@Z ENDP		; DirectX::XMVectorGetX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSplatW@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_V$ = -16						; size = 16
?XMVectorSplatW@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorSplatW, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 290
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 301
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	shufps	xmm0, XMMWORD PTR _V$[ebp], 255		; 000000ffH
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 304
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorSplatW@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorSplatW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSplatZ@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_V$ = -16						; size = 16
?XMVectorSplatZ@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorSplatZ, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 268
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 279
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	shufps	xmm0, XMMWORD PTR _V$[ebp], 170		; 000000aaH
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 282
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorSplatZ@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorSplatZ
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSplatY@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_V$ = -16						; size = 16
?XMVectorSplatY@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorSplatY, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 246
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 257
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	shufps	xmm0, XMMWORD PTR _V$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 260
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorSplatY@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorSplatY
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_V$ = -16						; size = 16
?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z PROC	; DirectX::XMVectorSplatX, COMDAT
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 224
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 235
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	shufps	xmm0, XMMWORD PTR _V$[ebp], 0
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 238
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorSplatX@DirectX@@YQ?AT__m128@@T2@@Z ENDP	; DirectX::XMVectorSplatX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorReplicate@DirectX@@YQ?AT__m128@@M@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_Value$ = -4						; size = 4
?XMVectorReplicate@DirectX@@YQ?AT__m128@@M@Z PROC	; DirectX::XMVectorReplicate, COMDAT
; _Value$ = xmm0s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 116
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	movss	DWORD PTR _Value$[ebp], xmm0
; Line 123
	movss	xmm0, DWORD PTR _Value$[ebp]
	shufps	xmm0, xmm0, 0
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 126
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorReplicate@DirectX@@YQ?AT__m128@@M@Z ENDP	; DirectX::XMVectorReplicate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_w$ = -16						; size = 4
_z$ = -12						; size = 4
_y$ = -8						; size = 4
_x$ = -4						; size = 4
?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z PROC		; DirectX::XMVectorSet, COMDAT
; _x$ = xmm0s
; _y$ = xmm1s
; _z$ = xmm2s
; _w$ = xmm3s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 72
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	movss	DWORD PTR _w$[ebp], xmm3
	movss	DWORD PTR _z$[ebp], xmm2
	movss	DWORD PTR _y$[ebp], xmm1
	movss	DWORD PTR _x$[ebp], xmm0
; Line 81
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR _y$[ebp]
	movss	xmm2, DWORD PTR _z$[ebp]
	movss	xmm3, DWORD PTR _w$[ebp]
	unpcklps xmm0, xmm2
	unpcklps xmm1, xmm3
	unpcklps xmm0, xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 84
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorSet@DirectX@@YQ?AT__m128@@MMMM@Z ENDP		; DirectX::XMVectorSet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMVectorZero@DirectX@@YQ?AT__m128@@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 16
?XMVectorZero@DirectX@@YQ?AT__m128@@XZ PROC		; DirectX::XMVectorZero, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 51
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 58
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 61
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMVectorZero@DirectX@@YQ?AT__m128@@XZ ENDP		; DirectX::XMVectorZero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z
_TEXT	SEGMENT
_M$ = -80						; size = 64
_pDestination$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z PROC ; DirectX::XMStoreFloat4x4, COMDAT
; _pDestination$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 1875
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _M$[ebp+48], xmm3
	movaps	XMMWORD PTR _M$[ebp+32], xmm2
	movaps	XMMWORD PTR _M$[ebp+16], xmm1
	movaps	XMMWORD PTR _M$[ebp], xmm0
	mov	DWORD PTR _pDestination$[ebp], ecx
; Line 1876
	cmp	DWORD PTR _pDestination$[ebp], 0
	jne	SHORT $LN3@XMStoreFlo
	mov	esi, esp
	push	1876					; 00000754H
	push	OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMStoreFlo:
; Line 1905
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	movups	xmm0, XMMWORD PTR _M$[ebp+edx]
	mov	eax, DWORD PTR _pDestination$[ebp]
	movups	XMMWORD PTR [eax], xmm0
; Line 1906
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	movups	xmm0, XMMWORD PTR _M$[ebp+ecx]
	mov	edx, DWORD PTR _pDestination$[ebp]
	add	edx, 16					; 00000010H
	movups	XMMWORD PTR [edx], xmm0
; Line 1907
	mov	eax, 16					; 00000010H
	shl	eax, 1
	movups	xmm0, XMMWORD PTR _M$[ebp+eax]
	mov	ecx, DWORD PTR _pDestination$[ebp]
	add	ecx, 32					; 00000020H
	movups	XMMWORD PTR [ecx], xmm0
; Line 1908
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	movups	xmm0, XMMWORD PTR _M$[ebp+eax]
	mov	ecx, DWORD PTR _pDestination$[ebp]
	add	ecx, 48					; 00000030H
	movups	XMMWORD PTR [ecx], xmm0
; Line 1911
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XMStoreFlo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN6@XMStoreFlo:
	DD	1
	DD	$LN5@XMStoreFlo
$LN5@XMStoreFlo:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN4@XMStoreFlo
$LN4@XMStoreFlo:
	DB	77					; 0000004dH
	DB	0
?XMStoreFloat4x4@DirectX@@YQXPAUXMFLOAT4X4@1@UXMMATRIX@1@@Z ENDP ; DirectX::XMStoreFloat4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z
_TEXT	SEGMENT
_V$ = -32						; size = 16
_pDestination$ = -4					; size = 4
?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z PROC ; DirectX::XMStoreFloat4, COMDAT
; _pDestination$ = ecx
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 1585
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V$[ebp], xmm0
	mov	DWORD PTR _pDestination$[ebp], ecx
; Line 1586
	cmp	DWORD PTR _pDestination$[ebp], 0
	jne	SHORT $LN3@XMStoreFlo
	mov	esi, esp
	push	1586					; 00000632H
	push	OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMStoreFlo:
; Line 1595
	movups	xmm0, XMMWORD PTR _V$[ebp]
	mov	ecx, DWORD PTR _pDestination$[ebp]
	movups	XMMWORD PTR [ecx], xmm0
; Line 1598
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMStoreFloat4@DirectX@@YQXPAUXMFLOAT4@1@T__m128@@@Z ENDP ; DirectX::XMStoreFloat4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z
_TEXT	SEGMENT
$T1 = -96						; size = 16
_T2$ = -80						; size = 16
$T2 = -64						; size = 16
_T1$ = -48						; size = 16
_V$ = -32						; size = 16
_pDestination$ = -4					; size = 4
?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z PROC ; DirectX::XMStoreFloat3, COMDAT
; _pDestination$ = ecx
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 1403
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V$[ebp], xmm0
	mov	DWORD PTR _pDestination$[ebp], ecx
; Line 1404
	cmp	DWORD PTR _pDestination$[ebp], 0
	jne	SHORT $LN3@XMStoreFlo
	mov	esi, esp
	push	1404					; 0000057cH
	push	OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMStoreFlo:
; Line 1414
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	shufps	xmm0, XMMWORD PTR _V$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _T1$[ebp], xmm0
; Line 1415
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	shufps	xmm0, XMMWORD PTR _V$[ebp], 170		; 000000aaH
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _T2$[ebp], xmm0
; Line 1416
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	mov	ecx, DWORD PTR _pDestination$[ebp]
	movss	DWORD PTR [ecx], xmm0
; Line 1417
	movaps	xmm0, XMMWORD PTR _T1$[ebp]
	mov	edx, DWORD PTR _pDestination$[ebp]
	add	edx, 4
	movss	DWORD PTR [edx], xmm0
; Line 1418
	movaps	xmm0, XMMWORD PTR _T2$[ebp]
	mov	eax, DWORD PTR _pDestination$[ebp]
	add	eax, 8
	movss	DWORD PTR [eax], xmm0
; Line 1421
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMStoreFloat3@DirectX@@YQXPAUXMFLOAT3@1@T__m128@@@Z ENDP ; DirectX::XMStoreFloat3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMStoreFloat2@DirectX@@YQXPAUXMFLOAT2@1@T__m128@@@Z
_TEXT	SEGMENT
$T1 = -64						; size = 16
_T$ = -48						; size = 16
_V$ = -32						; size = 16
_pDestination$ = -4					; size = 4
?XMStoreFloat2@DirectX@@YQXPAUXMFLOAT2@1@T__m128@@@Z PROC ; DirectX::XMStoreFloat2, COMDAT
; _pDestination$ = ecx
; _V$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 1230
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V$[ebp], xmm0
	mov	DWORD PTR _pDestination$[ebp], ecx
; Line 1231
	cmp	DWORD PTR _pDestination$[ebp], 0
	jne	SHORT $LN3@XMStoreFlo
	mov	esi, esp
	push	1231					; 000004cfH
	push	OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1BK@FHLBGAOP@?$AAp?$AAD?$AAe?$AAs?$AAt?$AAi?$AAn?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMStoreFlo:
; Line 1239
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	shufps	xmm0, XMMWORD PTR _V$[ebp], 85		; 00000055H
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
	movaps	XMMWORD PTR _T$[ebp], xmm0
; Line 1240
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	mov	ecx, DWORD PTR _pDestination$[ebp]
	movss	DWORD PTR [ecx], xmm0
; Line 1241
	movaps	xmm0, XMMWORD PTR _T$[ebp]
	mov	edx, DWORD PTR _pDestination$[ebp]
	add	edx, 4
	movss	DWORD PTR [edx], xmm0
; Line 1244
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMStoreFloat2@DirectX@@YQXPAUXMFLOAT2@1@T__m128@@@Z ENDP ; DirectX::XMStoreFloat2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
$T3 = -128						; size = 16
$T4 = -112						; size = 16
_M$ = -80						; size = 64
_pSource$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z PROC ; DirectX::XMLoadFloat4x4, COMDAT
; _pSource$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 1041
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-172]
	mov	ecx, 43					; 0000002bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _pSource$[ebp], ecx
; Line 1042
	cmp	DWORD PTR _pSource$[ebp], 0
	jne	SHORT $LN3@XMLoadFloa
	mov	esi, esp
	push	1042					; 00000412H
	push	OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMLoadFloa:
; Line 1075
	lea	ecx, DWORD PTR _M$[ebp]
	call	??0XMMATRIX@DirectX@@QAE@XZ		; DirectX::XMMATRIX::XMMATRIX
; Line 1076
	mov	ecx, DWORD PTR _pSource$[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	movups	xmm0, XMMWORD PTR $T4[ebp]
	movups	XMMWORD PTR _M$[ebp+eax], xmm0
; Line 1077
	mov	ecx, DWORD PTR _pSource$[ebp]
	add	ecx, 16					; 00000010H
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	mov	edx, 16					; 00000010H
	shl	edx, 0
	movups	xmm0, XMMWORD PTR $T3[ebp]
	movups	XMMWORD PTR _M$[ebp+edx], xmm0
; Line 1078
	mov	eax, DWORD PTR _pSource$[ebp]
	add	eax, 32					; 00000020H
	movups	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	movups	xmm0, XMMWORD PTR $T2[ebp]
	movups	XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1079
	mov	edx, DWORD PTR _pSource$[ebp]
	add	edx, 48					; 00000030H
	movups	xmm0, XMMWORD PTR [edx]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 3
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR _M$[ebp+ecx], xmm0
; Line 1080
	movaps	xmm0, XMMWORD PTR _M$[ebp]
	movaps	xmm1, XMMWORD PTR _M$[ebp+16]
	movaps	xmm2, XMMWORD PTR _M$[ebp+32]
	movaps	xmm3, XMMWORD PTR _M$[ebp+48]
; Line 1083
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XMLoadFloa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN6@XMLoadFloa:
	DD	1
	DD	$LN5@XMLoadFloa
$LN5@XMLoadFloa:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN4@XMLoadFloa
$LN4@XMLoadFloa:
	DB	77					; 0000004dH
	DB	0
?XMLoadFloat4x4@DirectX@@YQ?AUXMMATRIX@1@PBUXMFLOAT4X4@1@@Z ENDP ; DirectX::XMLoadFloat4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMLoadFloat4@DirectX@@YQ?AT__m128@@PBUXMFLOAT4@1@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 16
_pSource$ = -4						; size = 4
?XMLoadFloat4@DirectX@@YQ?AT__m128@@PBUXMFLOAT4@1@@Z PROC ; DirectX::XMLoadFloat4, COMDAT
; _pSource$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 701
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _pSource$[ebp], ecx
; Line 702
	cmp	DWORD PTR _pSource$[ebp], 0
	jne	SHORT $LN3@XMLoadFloa
	mov	esi, esp
	push	702					; 000002beH
	push	OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMLoadFloa:
; Line 713
	mov	ecx, DWORD PTR _pSource$[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 716
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMLoadFloat4@DirectX@@YQ?AT__m128@@PBUXMFLOAT4@1@@Z ENDP ; DirectX::XMLoadFloat4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z
_TEXT	SEGMENT
$T1 = -160						; size = 16
$T2 = -144						; size = 16
_xy$ = -128						; size = 16
$T3 = -112						; size = 16
_z$ = -96						; size = 16
$T4 = -80						; size = 16
_y$ = -64						; size = 16
$T5 = -48						; size = 16
_x$ = -32						; size = 16
_pSource$ = -4						; size = 4
?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z PROC ; DirectX::XMLoadFloat3, COMDAT
; _pSource$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 514
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-172]
	mov	ecx, 43					; 0000002bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _pSource$[ebp], ecx
; Line 515
	cmp	DWORD PTR _pSource$[ebp], 0
	jne	SHORT $LN3@XMLoadFloa
	mov	esi, esp
	push	515					; 00000203H
	push	OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMLoadFloa:
; Line 529
	mov	ecx, DWORD PTR _pSource$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movaps	XMMWORD PTR $T5[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T5[ebp]
	movaps	XMMWORD PTR _x$[ebp], xmm0
; Line 530
	mov	edx, DWORD PTR _pSource$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	movaps	XMMWORD PTR $T4[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T4[ebp]
	movaps	XMMWORD PTR _y$[ebp], xmm0
; Line 531
	mov	eax, DWORD PTR _pSource$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _z$[ebp], xmm0
; Line 532
	movaps	xmm0, XMMWORD PTR _x$[ebp]
	unpcklps xmm0, XMMWORD PTR _y$[ebp]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _xy$[ebp], xmm0
; Line 533
	movaps	xmm0, XMMWORD PTR _z$[ebp]
	movaps	xmm1, XMMWORD PTR _xy$[ebp]
	movlhps	xmm1, xmm0
	movaps	XMMWORD PTR $T1[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 536
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMLoadFloat3@DirectX@@YQ?AT__m128@@PBUXMFLOAT3@1@@Z ENDP ; DirectX::XMLoadFloat3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?XMLoadFloat2@DirectX@@YQ?AT__m128@@PBUXMFLOAT2@1@@Z
_TEXT	SEGMENT
$T1 = -96						; size = 16
$T2 = -80						; size = 16
_y$ = -64						; size = 16
$T3 = -48						; size = 16
_x$ = -32						; size = 16
_pSource$ = -4						; size = 4
?XMLoadFloat2@DirectX@@YQ?AT__m128@@PBUXMFLOAT2@1@@Z PROC ; DirectX::XMLoadFloat2, COMDAT
; _pSource$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathconvert.inl
; Line 331
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _pSource$[ebp], ecx
; Line 332
	cmp	DWORD PTR _pSource$[ebp], 0
	jne	SHORT $LN3@XMLoadFloa
	mov	esi, esp
	push	332					; 0000014cH
	push	OFFSET ??_C@_1JE@EKCDEKPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAk@
	push	OFFSET ??_C@_1BA@LBADLIHI@?$AAp?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@XMLoadFloa:
; Line 345
	mov	ecx, DWORD PTR _pSource$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	movaps	XMMWORD PTR $T3[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T3[ebp]
	movaps	XMMWORD PTR _x$[ebp], xmm0
; Line 346
	mov	edx, DWORD PTR _pSource$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _y$[ebp], xmm0
; Line 347
	movaps	xmm0, XMMWORD PTR _x$[ebp]
	unpcklps xmm0, XMMWORD PTR _y$[ebp]
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 350
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?XMLoadFloat2@DirectX@@YQ?AT__m128@@PBUXMFLOAT2@1@@Z ENDP ; DirectX::XMLoadFloat2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT4X4@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMFLOAT4X4@DirectX@@QAE@XZ PROC			; DirectX::XMFLOAT4X4::XMFLOAT4X4, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 716
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0XMFLOAT4X4@DirectX@@QAE@XZ ENDP			; DirectX::XMFLOAT4X4::XMFLOAT4X4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4XMFLOAT4@DirectX@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Float4$ = 8						; size = 4
??4XMFLOAT4@DirectX@@QAEAAU01@ABU01@@Z PROC		; DirectX::XMFLOAT4::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 582
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Float4$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Float4$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Float4$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Float4$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4XMFLOAT4@DirectX@@QAEAAU01@ABU01@@Z ENDP		; DirectX::XMFLOAT4::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT4@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMFLOAT4@DirectX@@QAE@XZ PROC			; DirectX::XMFLOAT4::XMFLOAT4, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 578
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0XMFLOAT4@DirectX@@QAE@XZ ENDP			; DirectX::XMFLOAT4::XMFLOAT4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Float3$ = 8						; size = 4
??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z PROC		; DirectX::XMFLOAT3::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 527
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Float3$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Float3$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Float3$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4XMFLOAT3@DirectX@@QAEAAU01@ABU01@@Z ENDP		; DirectX::XMFLOAT3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT3@DirectX@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0XMFLOAT3@DirectX@@QAE@MMM@Z PROC			; DirectX::XMFLOAT3::XMFLOAT3, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 524
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __y$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __z$[ebp]
	movss	DWORD PTR [edx+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0XMFLOAT3@DirectX@@QAE@MMM@Z ENDP			; DirectX::XMFLOAT3::XMFLOAT3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT3@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMFLOAT3@DirectX@@QAE@XZ PROC			; DirectX::XMFLOAT3::XMFLOAT3, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 523
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0XMFLOAT3@DirectX@@QAE@XZ ENDP			; DirectX::XMFLOAT3::XMFLOAT3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4XMFLOAT2@DirectX@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Float2$ = 8						; size = 4
??4XMFLOAT2@DirectX@@QAEAAU01@ABU01@@Z PROC		; DirectX::XMFLOAT2::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 475
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Float2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Float2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4XMFLOAT2@DirectX@@QAEAAU01@ABU01@@Z ENDP		; DirectX::XMFLOAT2::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT2@DirectX@@QAE@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
??0XMFLOAT2@DirectX@@QAE@MM@Z PROC			; DirectX::XMFLOAT2::XMFLOAT2, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __x$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __y$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0XMFLOAT2@DirectX@@QAE@MM@Z ENDP			; DirectX::XMFLOAT2::XMFLOAT2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMFLOAT2@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMFLOAT2@DirectX@@QAE@XZ PROC			; DirectX::XMFLOAT2::XMFLOAT2, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 471
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0XMFLOAT2@DirectX@@QAE@XZ ENDP			; DirectX::XMFLOAT2::XMFLOAT2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 64
$T2 = -160						; size = 64
_this$ = -92						; size = 4
___$ReturnUdt$ = -88					; size = 4
_M$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z PROC		; DirectX::XMMATRIX::operator*, COMDAT
; _this$ = ecx
; ___$ReturnUdt$ = edx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 3091
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _M$[ebp+48], xmm3
	movaps	XMMWORD PTR _M$[ebp+32], xmm2
	movaps	XMMWORD PTR _M$[ebp+16], xmm1
	movaps	XMMWORD PTR _M$[ebp], xmm0
	mov	DWORD PTR ___$ReturnUdt$[ebp], edx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3092
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR _M$[ebp]
	movaps	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR [eax+16]
	movaps	xmm2, XMMWORD PTR [eax+32]
	movaps	xmm3, XMMWORD PTR [eax+48]
	call	?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 3093
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@operator
$LN3@operator:
	DB	77					; 0000004dH
	DB	0
??DXMMATRIX@DirectX@@QBQ?AU01@U01@@Z ENDP		; DirectX::XMMATRIX::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??XXMMATRIX@DirectX@@QAQAAU01@U01@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 64
$T2 = -160						; size = 64
_this$ = -88						; size = 4
_M$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
??XXMMATRIX@DirectX@@QAQAAU01@U01@@Z PROC		; DirectX::XMMATRIX::operator*=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathmatrix.inl
; Line 3012
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	movaps	XMMWORD PTR _M$[ebp+48], xmm3
	movaps	XMMWORD PTR _M$[ebp+32], xmm2
	movaps	XMMWORD PTR _M$[ebp+16], xmm1
	movaps	XMMWORD PTR _M$[ebp], xmm0
	mov	DWORD PTR _this$[ebp], ecx
; Line 3013
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR _M$[ebp]
	movaps	xmm0, XMMWORD PTR [eax]
	movaps	xmm1, XMMWORD PTR [eax+16]
	movaps	xmm2, XMMWORD PTR [eax+32]
	movaps	xmm3, XMMWORD PTR [eax+48]
	call	?XMMatrixMultiply@DirectX@@YQ?AUXMMATRIX@1@U21@ABU21@@Z ; DirectX::XMMatrixMultiply
	movaps	XMMWORD PTR $T1[ebp+48], xmm3
	movaps	XMMWORD PTR $T1[ebp+32], xmm2
	movaps	XMMWORD PTR $T1[ebp+16], xmm1
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR $T1[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z	; DirectX::XMMATRIX::operator=
; Line 3014
	mov	eax, DWORD PTR _this$[ebp]
; Line 3015
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@operator
$LN3@operator:
	DB	77					; 0000004dH
	DB	0
??XXMMATRIX@DirectX@@QAQAAU01@U01@@Z ENDP		; DirectX::XMMATRIX::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_M$ = 8							; size = 4
??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z PROC		; DirectX::XMMATRIX::operator=, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 444
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _M$[ebp]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	add	eax, DWORD PTR _this$[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movups	XMMWORD PTR [eax], xmm0
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _M$[ebp]
	mov	edx, 16					; 00000010H
	shl	edx, 0
	add	edx, DWORD PTR _this$[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movups	XMMWORD PTR [edx], xmm0
	mov	eax, 16					; 00000010H
	shl	eax, 1
	add	eax, DWORD PTR _M$[ebp]
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	edx, 16					; 00000010H
	imul	eax, edx, 3
	add	eax, DWORD PTR _M$[ebp]
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	add	edx, DWORD PTR _this$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [edx], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??4XMMATRIX@DirectX@@QAEAAU01@ABU01@@Z ENDP		; DirectX::XMMATRIX::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0XMMATRIX@DirectX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0XMMATRIX@DirectX@@QAE@XZ PROC			; DirectX::XMMATRIX::XMMATRIX, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 431
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0XMMATRIX@DirectX@@QAE@XZ ENDP			; DirectX::XMMATRIX::XMMATRIX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??KDirectX@@YQ?AT__m128@@T1@M@Z
_TEXT	SEGMENT
$T1 = -80						; size = 16
$T2 = -64						; size = 16
_vS$ = -48						; size = 16
_S$ = -20						; size = 4
_V$ = -16						; size = 16
??KDirectX@@YQ?AT__m128@@T1@M@Z PROC			; DirectX::operator/, COMDAT
; _V$ = xmm0
; _S$ = xmm1s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 14253
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movss	DWORD PTR _S$[ebp], xmm1
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 14254
	movss	xmm0, DWORD PTR _S$[ebp]
	call	?XMVectorReplicate@DirectX@@YQ?AT__m128@@M@Z ; DirectX::XMVectorReplicate
	movaps	XMMWORD PTR $T2[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[ebp]
	movaps	XMMWORD PTR _vS$[ebp], xmm0
; Line 14255
	movaps	xmm1, XMMWORD PTR _vS$[ebp]
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	call	?XMVectorDivide@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorDivide
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 14256
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
??KDirectX@@YQ?AT__m128@@T1@M@Z ENDP			; DirectX::operator/
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??DDirectX@@YQ?AT__m128@@T1@M@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_S$ = -20						; size = 4
_V$ = -16						; size = 16
??DDirectX@@YQ?AT__m128@@T1@M@Z PROC			; DirectX::operator*, COMDAT
; _V$ = xmm0
; _S$ = xmm1s
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 14242
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movss	DWORD PTR _S$[ebp], xmm1
	movaps	XMMWORD PTR _V$[ebp], xmm0
; Line 14243
	movaps	xmm0, XMMWORD PTR _V$[ebp]
	movss	xmm1, DWORD PTR _S$[ebp]
	call	?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z ; DirectX::XMVectorScale
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 14244
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
??DDirectX@@YQ?AT__m128@@T1@M@Z ENDP			; DirectX::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??GDirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
??GDirectX@@YQ?AT__m128@@T1@0@Z PROC			; DirectX::operator-, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 14209
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 14210
	movaps	xmm1, XMMWORD PTR _V2$[ebp]
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	call	?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorSubtract
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 14211
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
??GDirectX@@YQ?AT__m128@@T1@0@Z ENDP			; DirectX::operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??HDirectX@@YQ?AT__m128@@T1@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
??HDirectX@@YQ?AT__m128@@T1@0@Z PROC			; DirectX::operator+, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 14198
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm1
	movaps	XMMWORD PTR _V1$[ebp], xmm0
; Line 14199
	movaps	xmm1, XMMWORD PTR _V2$[ebp]
	movaps	xmm0, XMMWORD PTR _V1$[ebp]
	call	?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorAdd
	movaps	XMMWORD PTR $T1[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[ebp]
; Line 14200
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
??HDirectX@@YQ?AT__m128@@T1@0@Z ENDP			; DirectX::operator+
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??XDirectX@@YAAAT__m128@@AAT1@M@Z
_TEXT	SEGMENT
$T1 = -16						; size = 16
_V$ = 8							; size = 4
_S$ = 12						; size = 4
??XDirectX@@YAAAT__m128@@AAT1@M@Z PROC			; DirectX::operator*=, COMDAT
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 14173
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 14174
	mov	eax, DWORD PTR _V$[ebx]
	movups	xmm0, XMMWORD PTR [eax]
	movss	xmm1, DWORD PTR _S$[ebx]
	call	?XMVectorScale@DirectX@@YQ?AT__m128@@T2@M@Z ; DirectX::XMVectorScale
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, DWORD PTR _V$[ebx]
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm0
; Line 14175
	mov	eax, DWORD PTR _V$[ebx]
; Line 14176
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
??XDirectX@@YAAAT__m128@@AAT1@M@Z ENDP			; DirectX::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??ZDirectX@@YQAAT__m128@@AAT1@T1@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -4						; size = 4
??ZDirectX@@YQAAT__m128@@AAT1@T1@@Z PROC		; DirectX::operator-=, COMDAT
; _V1$ = ecx
; _V2$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 14137
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm0
	mov	DWORD PTR _V1$[ebp], ecx
; Line 14138
	movaps	xmm1, XMMWORD PTR _V2$[ebp]
	mov	eax, DWORD PTR _V1$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	call	?XMVectorSubtract@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorSubtract
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, DWORD PTR _V1$[ebp]
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm0
; Line 14139
	mov	eax, DWORD PTR _V1$[ebp]
; Line 14140
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
??ZDirectX@@YQAAT__m128@@AAT1@T1@@Z ENDP		; DirectX::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??YDirectX@@YQAAT__m128@@AAT1@T1@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -4						; size = 4
??YDirectX@@YQAAT__m128@@AAT1@T1@@Z PROC		; DirectX::operator+=, COMDAT
; _V1$ = ecx
; _V2$ = xmm0
; File c:\program files (x86)\windows kits\8.1\include\um\directxmathvector.inl
; Line 14125
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	movaps	XMMWORD PTR _V2$[ebp], xmm0
	mov	DWORD PTR _V1$[ebp], ecx
; Line 14126
	movaps	xmm1, XMMWORD PTR _V2$[ebp]
	mov	eax, DWORD PTR _V1$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	call	?XMVectorAdd@DirectX@@YQ?AT__m128@@T2@0@Z ; DirectX::XMVectorAdd
	movaps	XMMWORD PTR $T1[ebp], xmm0
	mov	ecx, DWORD PTR _V1$[ebp]
	movups	xmm0, XMMWORD PTR $T1[ebp]
	movups	XMMWORD PTR [ecx], xmm0
; Line 14127
	mov	eax, DWORD PTR _V1$[ebp]
; Line 14128
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
??YDirectX@@YQAAT__m128@@AAT1@T1@@Z ENDP		; DirectX::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ PROC		; DirectX::XMVECTORU32::operator __m128, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 360
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??BXMVECTORU32@DirectX@@QBE?AT__m128@@XZ ENDP		; DirectX::XMVECTORU32::operator __m128
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ PROC		; DirectX::XMVECTORI32::operator __m128, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 330
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??BXMVECTORI32@DirectX@@QBE?AT__m128@@XZ ENDP		; DirectX::XMVECTORI32::operator __m128
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ PROC		; DirectX::XMVECTORF32::operator __m128, COMDAT
; _this$ = ecx
; File c:\program files (x86)\windows kits\8.1\include\um\directxmath.h
; Line 314
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??BXMVECTORF32@DirectX@@QBE?AT__m128@@XZ ENDP		; DirectX::XMVECTORF32::operator __m128
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv70 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 774
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 775
	sqrtss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR tv70[ebp], xmm0
	fld	DWORD PTR tv70[ebp]
; Line 776
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 686
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 687
	movss	xmm0, DWORD PTR __X$[ebp]
	andps	xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
	movss	DWORD PTR tv71[ebp], xmm0
	fld	DWORD PTR tv71[ebp]
; Line 688
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _atan2f
_TEXT	SEGMENT
tv72 = -4						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
; Line 648
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 649
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	cvtss2sd xmm1, DWORD PTR __X$[ebp]
	call	___libm_sse2_atan2
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv72[ebp], xmm0
	fld	DWORD PTR tv72[ebp]
; Line 650
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_atan2f	ENDP
_TEXT	ENDS
END
